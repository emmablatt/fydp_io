
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7e8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800eab8  0800eab8  0001eab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004d4  24000000  0800ee10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003694  240004e0  0800f2e4  000204e0  2**5
                  ALLOC
  7 ._user_heap_stack 00000604  24003b74  0800f2e4  00023b74  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00030e7c  00000000  00000000  00020502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000441c  00000000  00000000  0005137e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001cc8  00000000  00000000  000557a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b88  00000000  00000000  00057468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035e39  00000000  00000000  00058ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e881  00000000  00000000  0008ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154657  00000000  00000000  000ad6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  00201d01  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007b3c  00000000  00000000  00201dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004e0 	.word	0x240004e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800eaa0 	.word	0x0800eaa0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004e4 	.word	0x240004e4
 800030c:	0800eaa0 	.word	0x0800eaa0

08000310 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800031a:	2303      	movs	r3, #3
 800031c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f103 0018 	add.w	r0, r3, #24
 8000324:	f107 020a 	add.w	r2, r7, #10
 8000328:	2302      	movs	r3, #2
 800032a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800032e:	f001 fdb9 	bl	8001ea4 <wm8994_write_reg>
 8000332:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000334:	2300      	movs	r3, #0
 8000336:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0018 	add.w	r0, r3, #24
 800033e:	f107 020a 	add.w	r2, r7, #10
 8000342:	2302      	movs	r3, #2
 8000344:	f640 0117 	movw	r1, #2071	; 0x817
 8000348:	f001 fdac 	bl	8001ea4 <wm8994_write_reg>
 800034c:	4602      	mov	r2, r0
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0018 	add.w	r0, r3, #24
 800035a:	f107 020a 	add.w	r2, r7, #10
 800035e:	2302      	movs	r3, #2
 8000360:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000364:	f001 fd9e 	bl	8001ea4 <wm8994_write_reg>
 8000368:	4602      	mov	r2, r0
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000370:	236c      	movs	r3, #108	; 0x6c
 8000372:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0018 	add.w	r0, r3, #24
 800037a:	f107 020a 	add.w	r2, r7, #10
 800037e:	2302      	movs	r3, #2
 8000380:	2139      	movs	r1, #57	; 0x39
 8000382:	f001 fd8f 	bl	8001ea4 <wm8994_write_reg>
 8000386:	4602      	mov	r2, r0
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000396:	2313      	movs	r3, #19
 8000398:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f103 0018 	add.w	r0, r3, #24
 80003a0:	f107 020a 	add.w	r2, r7, #10
 80003a4:	2302      	movs	r3, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	f001 fd7c 	bl	8001ea4 <wm8994_write_reg>
 80003ac:	4602      	mov	r2, r0
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00e      	b.n	80003d4 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80003b6:	2303      	movs	r3, #3
 80003b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 0018 	add.w	r0, r3, #24
 80003c0:	f107 020a 	add.w	r2, r7, #10
 80003c4:	2302      	movs	r3, #2
 80003c6:	2101      	movs	r1, #1
 80003c8:	f001 fd6c 	bl	8001ea4 <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80003d4:	2132      	movs	r1, #50	; 0x32
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f001 fcec 	bl	8001db4 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 8141 	bhi.w	8000668 <WM8994_Init+0x358>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <WM8994_Init+0xdc>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000703 	.word	0x08000703
 80003f0:	080003fd 	.word	0x080003fd
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000531 	.word	0x08000531
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80003fc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000400:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f103 0018 	add.w	r0, r3, #24
 8000408:	f107 020a 	add.w	r2, r7, #10
 800040c:	2302      	movs	r3, #2
 800040e:	2105      	movs	r1, #5
 8000410:	f001 fd48 	bl	8001ea4 <wm8994_write_reg>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800041c:	2300      	movs	r3, #0
 800041e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 0018 	add.w	r0, r3, #24
 8000426:	f107 020a 	add.w	r2, r7, #10
 800042a:	2302      	movs	r3, #2
 800042c:	f240 6101 	movw	r1, #1537	; 0x601
 8000430:	f001 fd38 	bl	8001ea4 <wm8994_write_reg>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f103 0018 	add.w	r0, r3, #24
 8000442:	f107 020a 	add.w	r2, r7, #10
 8000446:	2302      	movs	r3, #2
 8000448:	f240 6102 	movw	r1, #1538	; 0x602
 800044c:	f001 fd2a 	bl	8001ea4 <wm8994_write_reg>
 8000450:	4602      	mov	r2, r0
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000458:	2302      	movs	r3, #2
 800045a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0018 	add.w	r0, r3, #24
 8000462:	f107 020a 	add.w	r2, r7, #10
 8000466:	2302      	movs	r3, #2
 8000468:	f240 6104 	movw	r1, #1540	; 0x604
 800046c:	f001 fd1a 	bl	8001ea4 <wm8994_write_reg>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0018 	add.w	r0, r3, #24
 800047e:	f107 020a 	add.w	r2, r7, #10
 8000482:	2302      	movs	r3, #2
 8000484:	f240 6105 	movw	r1, #1541	; 0x605
 8000488:	f001 fd0c 	bl	8001ea4 <wm8994_write_reg>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    break;
 8000494:	e136      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000496:	f240 3303 	movw	r3, #771	; 0x303
 800049a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f103 0018 	add.w	r0, r3, #24
 80004a2:	f107 020a 	add.w	r2, r7, #10
 80004a6:	2302      	movs	r3, #2
 80004a8:	2105      	movs	r1, #5
 80004aa:	f001 fcfb 	bl	8001ea4 <wm8994_write_reg>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80004b6:	2301      	movs	r3, #1
 80004b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0018 	add.w	r0, r3, #24
 80004c0:	f107 020a 	add.w	r2, r7, #10
 80004c4:	2302      	movs	r3, #2
 80004c6:	f240 6101 	movw	r1, #1537	; 0x601
 80004ca:	f001 fceb 	bl	8001ea4 <wm8994_write_reg>
 80004ce:	4602      	mov	r2, r0
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0018 	add.w	r0, r3, #24
 80004dc:	f107 020a 	add.w	r2, r7, #10
 80004e0:	2302      	movs	r3, #2
 80004e2:	f240 6102 	movw	r1, #1538	; 0x602
 80004e6:	f001 fcdd 	bl	8001ea4 <wm8994_write_reg>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0018 	add.w	r0, r3, #24
 80004fc:	f107 020a 	add.w	r2, r7, #10
 8000500:	2302      	movs	r3, #2
 8000502:	f240 6104 	movw	r1, #1540	; 0x604
 8000506:	f001 fccd 	bl	8001ea4 <wm8994_write_reg>
 800050a:	4602      	mov	r2, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0018 	add.w	r0, r3, #24
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	2302      	movs	r3, #2
 800051e:	f240 6105 	movw	r1, #1541	; 0x605
 8000522:	f001 fcbf 	bl	8001ea4 <wm8994_write_reg>
 8000526:	4602      	mov	r2, r0
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    break;
 800052e:	e0e9      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d14a      	bne.n	80005ce <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000538:	f640 730f 	movw	r3, #3855	; 0xf0f
 800053c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0018 	add.w	r0, r3, #24
 8000544:	f107 020a 	add.w	r2, r7, #10
 8000548:	2302      	movs	r3, #2
 800054a:	2105      	movs	r1, #5
 800054c:	f001 fcaa 	bl	8001ea4 <wm8994_write_reg>
 8000550:	4602      	mov	r2, r0
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000558:	2303      	movs	r3, #3
 800055a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0018 	add.w	r0, r3, #24
 8000562:	f107 020a 	add.w	r2, r7, #10
 8000566:	2302      	movs	r3, #2
 8000568:	f240 6101 	movw	r1, #1537	; 0x601
 800056c:	f001 fc9a 	bl	8001ea4 <wm8994_write_reg>
 8000570:	4602      	mov	r2, r0
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0018 	add.w	r0, r3, #24
 800057e:	f107 020a 	add.w	r2, r7, #10
 8000582:	2302      	movs	r3, #2
 8000584:	f240 6102 	movw	r1, #1538	; 0x602
 8000588:	f001 fc8c 	bl	8001ea4 <wm8994_write_reg>
 800058c:	4602      	mov	r2, r0
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0018 	add.w	r0, r3, #24
 800059a:	f107 020a 	add.w	r2, r7, #10
 800059e:	2302      	movs	r3, #2
 80005a0:	f240 6104 	movw	r1, #1540	; 0x604
 80005a4:	f001 fc7e 	bl	8001ea4 <wm8994_write_reg>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 020a 	add.w	r2, r7, #10
 80005ba:	2302      	movs	r3, #2
 80005bc:	f240 6105 	movw	r1, #1541	; 0x605
 80005c0:	f001 fc70 	bl	8001ea4 <wm8994_write_reg>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80005cc:	e09a      	b.n	8000704 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80005ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80005d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020a 	add.w	r2, r7, #10
 80005de:	2302      	movs	r3, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	f001 fc5f 	bl	8001ea4 <wm8994_write_reg>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80005ee:	2301      	movs	r3, #1
 80005f0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0018 	add.w	r0, r3, #24
 80005f8:	f107 020a 	add.w	r2, r7, #10
 80005fc:	2302      	movs	r3, #2
 80005fe:	f240 6101 	movw	r1, #1537	; 0x601
 8000602:	f001 fc4f 	bl	8001ea4 <wm8994_write_reg>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0018 	add.w	r0, r3, #24
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	2302      	movs	r3, #2
 800061a:	f240 6102 	movw	r1, #1538	; 0x602
 800061e:	f001 fc41 	bl	8001ea4 <wm8994_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800062a:	2302      	movs	r3, #2
 800062c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0018 	add.w	r0, r3, #24
 8000634:	f107 020a 	add.w	r2, r7, #10
 8000638:	2302      	movs	r3, #2
 800063a:	f240 6104 	movw	r1, #1540	; 0x604
 800063e:	f001 fc31 	bl	8001ea4 <wm8994_write_reg>
 8000642:	4602      	mov	r2, r0
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0018 	add.w	r0, r3, #24
 8000650:	f107 020a 	add.w	r2, r7, #10
 8000654:	2302      	movs	r3, #2
 8000656:	f240 6105 	movw	r1, #1541	; 0x605
 800065a:	f001 fc23 	bl	8001ea4 <wm8994_write_reg>
 800065e:	4602      	mov	r2, r0
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
    break;
 8000666:	e04d      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000668:	f240 3303 	movw	r3, #771	; 0x303
 800066c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0018 	add.w	r0, r3, #24
 8000674:	f107 020a 	add.w	r2, r7, #10
 8000678:	2302      	movs	r3, #2
 800067a:	2105      	movs	r1, #5
 800067c:	f001 fc12 	bl	8001ea4 <wm8994_write_reg>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000688:	2301      	movs	r3, #1
 800068a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 0018 	add.w	r0, r3, #24
 8000692:	f107 020a 	add.w	r2, r7, #10
 8000696:	2302      	movs	r3, #2
 8000698:	f240 6101 	movw	r1, #1537	; 0x601
 800069c:	f001 fc02 	bl	8001ea4 <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0018 	add.w	r0, r3, #24
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	2302      	movs	r3, #2
 80006b4:	f240 6102 	movw	r1, #1538	; 0x602
 80006b8:	f001 fbf4 	bl	8001ea4 <wm8994_write_reg>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 0018 	add.w	r0, r3, #24
 80006ce:	f107 020a 	add.w	r2, r7, #10
 80006d2:	2302      	movs	r3, #2
 80006d4:	f240 6104 	movw	r1, #1540	; 0x604
 80006d8:	f001 fbe4 	bl	8001ea4 <wm8994_write_reg>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0018 	add.w	r0, r3, #24
 80006ea:	f107 020a 	add.w	r2, r7, #10
 80006ee:	2302      	movs	r3, #2
 80006f0:	f240 6105 	movw	r1, #1541	; 0x605
 80006f4:	f001 fbd6 	bl	8001ea4 <wm8994_write_reg>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    break;
 8000700:	e000      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
 8000702:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2b04      	cmp	r3, #4
 800070c:	f200 81e0 	bhi.w	8000ad0 <WM8994_Init+0x7c0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <WM8994_Init+0x408>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000901 	.word	0x08000901
 800071c:	0800072d 	.word	0x0800072d
 8000720:	080007eb 	.word	0x080007eb
 8000724:	08000ad1 	.word	0x08000ad1
 8000728:	080009bf 	.word	0x080009bf
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 800072c:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000730:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0018 	add.w	r0, r3, #24
 8000738:	f107 020a 	add.w	r2, r7, #10
 800073c:	2302      	movs	r3, #2
 800073e:	2104      	movs	r1, #4
 8000740:	f001 fbb0 	bl	8001ea4 <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800074c:	23db      	movs	r3, #219	; 0xdb
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000760:	f001 fba0 	bl	8001ea4 <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800076c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000770:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0018 	add.w	r0, r3, #24
 8000778:	f107 020a 	add.w	r2, r7, #10
 800077c:	2302      	movs	r3, #2
 800077e:	2102      	movs	r1, #2
 8000780:	f001 fb90 	bl	8001ea4 <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800078c:	2302      	movs	r3, #2
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007a0:	f001 fb80 	bl	8001ea4 <wm8994_write_reg>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0018 	add.w	r0, r3, #24
 80007b2:	f107 020a 	add.w	r2, r7, #10
 80007b6:	2302      	movs	r3, #2
 80007b8:	f240 6109 	movw	r1, #1545	; 0x609
 80007bc:	f001 fb72 	bl	8001ea4 <wm8994_write_reg>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80007c8:	230e      	movs	r3, #14
 80007ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 0018 	add.w	r0, r3, #24
 80007d2:	f107 020a 	add.w	r2, r7, #10
 80007d6:	2302      	movs	r3, #2
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	f001 fb62 	bl	8001ea4 <wm8994_write_reg>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    break;
 80007e8:	e173      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80007ea:	2311      	movs	r3, #17
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	f001 fb52 	bl	8001ea4 <wm8994_write_reg>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000808:	2335      	movs	r3, #53	; 0x35
 800080a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0018 	add.w	r0, r3, #24
 8000812:	f107 020a 	add.w	r2, r7, #10
 8000816:	2302      	movs	r3, #2
 8000818:	2129      	movs	r1, #41	; 0x29
 800081a:	f001 fb43 	bl	8001ea4 <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0018 	add.w	r0, r3, #24
 800082c:	f107 020a 	add.w	r2, r7, #10
 8000830:	2302      	movs	r3, #2
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	f001 fb36 	bl	8001ea4 <wm8994_write_reg>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000840:	f240 3303 	movw	r3, #771	; 0x303
 8000844:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0018 	add.w	r0, r3, #24
 800084c:	f107 020a 	add.w	r2, r7, #10
 8000850:	2302      	movs	r3, #2
 8000852:	2104      	movs	r1, #4
 8000854:	f001 fb26 	bl	8001ea4 <wm8994_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000860:	23db      	movs	r3, #219	; 0xdb
 8000862:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0018 	add.w	r0, r3, #24
 800086a:	f107 020a 	add.w	r2, r7, #10
 800086e:	2302      	movs	r3, #2
 8000870:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000874:	f001 fb16 	bl	8001ea4 <wm8994_write_reg>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000880:	f246 3350 	movw	r3, #25424	; 0x6350
 8000884:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0018 	add.w	r0, r3, #24
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	2302      	movs	r3, #2
 8000892:	2102      	movs	r1, #2
 8000894:	f001 fb06 	bl	8001ea4 <wm8994_write_reg>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80008a0:	2302      	movs	r3, #2
 80008a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6106 	movw	r1, #1542	; 0x606
 80008b4:	f001 faf6 	bl	8001ea4 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f103 0018 	add.w	r0, r3, #24
 80008c6:	f107 020a 	add.w	r2, r7, #10
 80008ca:	2302      	movs	r3, #2
 80008cc:	f240 6107 	movw	r1, #1543	; 0x607
 80008d0:	f001 fae8 	bl	8001ea4 <wm8994_write_reg>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80008dc:	f248 030d 	movw	r3, #32781	; 0x800d
 80008e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0018 	add.w	r0, r3, #24
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	2302      	movs	r3, #2
 80008ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008f2:	f001 fad7 	bl	8001ea4 <wm8994_write_reg>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    break;
 80008fe:	e0e8      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000900:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2104      	movs	r1, #4
 8000914:	f001 fac6 	bl	8001ea4 <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000920:	23db      	movs	r3, #219	; 0xdb
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000934:	f001 fab6 	bl	8001ea4 <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000940:	f246 3350 	movw	r3, #25424	; 0x6350
 8000944:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0018 	add.w	r0, r3, #24
 800094c:	f107 020a 	add.w	r2, r7, #10
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f001 faa6 	bl	8001ea4 <wm8994_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000960:	2302      	movs	r3, #2
 8000962:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0018 	add.w	r0, r3, #24
 800096a:	f107 020a 	add.w	r2, r7, #10
 800096e:	2302      	movs	r3, #2
 8000970:	f240 6106 	movw	r1, #1542	; 0x606
 8000974:	f001 fa96 	bl	8001ea4 <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6107 	movw	r1, #1543	; 0x607
 8000990:	f001 fa88 	bl	8001ea4 <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800099c:	230d      	movs	r3, #13
 800099e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b0:	f001 fa78 	bl	8001ea4 <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    break;
 80009bc:	e089      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80009be:	f640 733c 	movw	r3, #3900	; 0xf3c
 80009c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0018 	add.w	r0, r3, #24
 80009ca:	f107 020a 	add.w	r2, r7, #10
 80009ce:	2302      	movs	r3, #2
 80009d0:	2104      	movs	r1, #4
 80009d2:	f001 fa67 	bl	8001ea4 <wm8994_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80009de:	23db      	movs	r3, #219	; 0xdb
 80009e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0018 	add.w	r0, r3, #24
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	2302      	movs	r3, #2
 80009ee:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80009f2:	f001 fa57 	bl	8001ea4 <wm8994_write_reg>
 80009f6:	4602      	mov	r2, r0
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f103 0018 	add.w	r0, r3, #24
 8000a04:	f107 020a 	add.w	r2, r7, #10
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a0e:	f001 fa49 	bl	8001ea4 <wm8994_write_reg>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a1a:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	f001 fa39 	bl	8001ea4 <wm8994_write_reg>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f103 0018 	add.w	r0, r3, #24
 8000a44:	f107 020a 	add.w	r2, r7, #10
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f240 6106 	movw	r1, #1542	; 0x606
 8000a4e:	f001 fa29 	bl	8001ea4 <wm8994_write_reg>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0018 	add.w	r0, r3, #24
 8000a60:	f107 020a 	add.w	r2, r7, #10
 8000a64:	2302      	movs	r3, #2
 8000a66:	f240 6107 	movw	r1, #1543	; 0x607
 8000a6a:	f001 fa1b 	bl	8001ea4 <wm8994_write_reg>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0018 	add.w	r0, r3, #24
 8000a7c:	f107 020a 	add.w	r2, r7, #10
 8000a80:	2302      	movs	r3, #2
 8000a82:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a86:	f001 fa0d 	bl	8001ea4 <wm8994_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0018 	add.w	r0, r3, #24
 8000a98:	f107 020a 	add.w	r2, r7, #10
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f240 6109 	movw	r1, #1545	; 0x609
 8000aa2:	f001 f9ff 	bl	8001ea4 <wm8994_write_reg>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f103 0018 	add.w	r0, r3, #24
 8000ab8:	f107 020a 	add.w	r2, r7, #10
 8000abc:	2302      	movs	r3, #2
 8000abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac2:	f001 f9ef 	bl	8001ea4 <wm8994_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000ace:	e000      	b.n	8000ad2 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000ad0:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fff9 	bl	8001ad0 <WM8994_SetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d11a      	bne.n	8000b24 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 ff59 	bl	80019a8 <WM8994_SetResolution>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000afe:	2103      	movs	r1, #3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 ffab 	bl	8001a5c <WM8994_SetProtocol>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 faf3 	bl	8002100 <wm8994_aif1_control1_adcr_src>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e01b      	b.n	8000b5c <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 ff3c 	bl	80019a8 <WM8994_SetResolution>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 ff8e 	bl	8001a5c <WM8994_SetProtocol>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fad6 	bl	8002100 <wm8994_aif1_control1_adcr_src>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0018 	add.w	r0, r3, #24
 8000b66:	f107 020a 	add.w	r2, r7, #10
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f240 3102 	movw	r1, #770	; 0x302
 8000b70:	f001 f998 	bl	8001ea4 <wm8994_write_reg>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000b90:	f001 f988 	bl	8001ea4 <wm8994_write_reg>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0018 	add.w	r0, r3, #24
 8000ba6:	f107 020a 	add.w	r2, r7, #10
 8000baa:	2302      	movs	r3, #2
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	f001 f978 	bl	8001ea4 <wm8994_write_reg>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 81c6 	beq.w	8000f52 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d164      	bne.n	8000c98 <WM8994_Init+0x988>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d160      	bne.n	8000c98 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 0018 	add.w	r0, r3, #24
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	2302      	movs	r3, #2
 8000be8:	212d      	movs	r1, #45	; 0x2d
 8000bea:	f001 f95b 	bl	8001ea4 <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 0018 	add.w	r0, r3, #24
 8000bfc:	f107 020a 	add.w	r2, r7, #10
 8000c00:	2302      	movs	r3, #2
 8000c02:	212e      	movs	r1, #46	; 0x2e
 8000c04:	f001 f94e 	bl	8001ea4 <wm8994_write_reg>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d119      	bne.n	8000c4c <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c1c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0018 	add.w	r0, r3, #24
 8000c24:	f107 020a 	add.w	r2, r7, #10
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c2e:	f001 f939 	bl	8001ea4 <wm8994_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000c40:	f240 1145 	movw	r1, #325	; 0x145
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f001 f8b5 	bl	8001db4 <WM8994_Delay>
 8000c4a:	e014      	b.n	8000c76 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000c4c:	f248 1308 	movw	r3, #33032	; 0x8108
 8000c50:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f103 0018 	add.w	r0, r3, #24
 8000c58:	f107 020a 	add.w	r2, r7, #10
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c62:	f001 f91f 	bl	8001ea4 <wm8994_write_reg>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f001 f89f 	bl	8001db4 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000c76:	2300      	movs	r3, #0
 8000c78:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f103 0018 	add.w	r0, r3, #24
 8000c80:	f107 020a 	add.w	r2, r7, #10
 8000c84:	2302      	movs	r3, #2
 8000c86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c8a:	f001 f90b 	bl	8001ea4 <wm8994_write_reg>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e0f4      	b.n	8000e82 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2103      	movs	r1, #3
 8000cac:	f001 f8fa 	bl	8001ea4 <wm8994_write_reg>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	f001 f8eb 	bl	8001ea4 <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	f107 020a 	add.w	r2, r7, #10
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	f001 f8de 	bl	8001ea4 <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	2136      	movs	r1, #54	; 0x36
 8000d04:	f001 f8ce 	bl	8001ea4 <wm8994_write_reg>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d10:	f243 0303 	movw	r3, #12291	; 0x3003
 8000d14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0018 	add.w	r0, r3, #24
 8000d1c:	f107 020a 	add.w	r2, r7, #10
 8000d20:	2302      	movs	r3, #2
 8000d22:	2101      	movs	r1, #1
 8000d24:	f001 f8be 	bl	8001ea4 <wm8994_write_reg>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d113      	bne.n	8000d60 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000d38:	f240 2305 	movw	r3, #517	; 0x205
 8000d3c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 0018 	add.w	r0, r3, #24
 8000d44:	f107 020a 	add.w	r2, r7, #10
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2151      	movs	r1, #81	; 0x51
 8000d4c:	f001 f8aa 	bl	8001ea4 <wm8994_write_reg>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <WM8994_Init+0xa6e>
 8000d5a:	bf00      	nop
 8000d5c:	24000448 	.word	0x24000448
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000d60:	2305      	movs	r3, #5
 8000d62:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0018 	add.w	r0, r3, #24
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	2302      	movs	r3, #2
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	f001 f897 	bl	8001ea4 <wm8994_write_reg>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000d7e:	f243 3303 	movw	r3, #13059	; 0x3303
 8000d82:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2101      	movs	r1, #1
 8000d92:	f001 f887 	bl	8001ea4 <wm8994_write_reg>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0018 	add.w	r0, r3, #24
 8000da8:	f107 020a 	add.w	r2, r7, #10
 8000dac:	2302      	movs	r3, #2
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f001 f878 	bl	8001ea4 <wm8994_write_reg>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000dbc:	f649 7325 	movw	r3, #40741	; 0x9f25
 8000dc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0018 	add.w	r0, r3, #24
 8000dc8:	f107 020a 	add.w	r2, r7, #10
 8000dcc:	2302      	movs	r3, #2
 8000dce:	214c      	movs	r1, #76	; 0x4c
 8000dd0:	f001 f868 	bl	8001ea4 <wm8994_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 ffe8 	bl	8001db4 <WM8994_Delay>
      
      tmp = 0x0001;
 8000de4:	2301      	movs	r3, #1
 8000de6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0018 	add.w	r0, r3, #24
 8000dee:	f107 020a 	add.w	r2, r7, #10
 8000df2:	2302      	movs	r3, #2
 8000df4:	212d      	movs	r1, #45	; 0x2d
 8000df6:	f001 f855 	bl	8001ea4 <wm8994_write_reg>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	212e      	movs	r1, #46	; 0x2e
 8000e10:	f001 f848 	bl	8001ea4 <wm8994_write_reg>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e1c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2103      	movs	r1, #3
 8000e30:	f001 f838 	bl	8001ea4 <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0018 	add.w	r0, r3, #24
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2154      	movs	r1, #84	; 0x54
 8000e4e:	f001 f829 	bl	8001ea4 <wm8994_write_reg>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000e5a:	f240 1101 	movw	r1, #257	; 0x101
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 ffa8 	bl	8001db4 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000e64:	23ee      	movs	r3, #238	; 0xee
 8000e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	2160      	movs	r1, #96	; 0x60
 8000e76:	f001 f815 	bl	8001ea4 <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f103 0018 	add.w	r0, r3, #24
 8000e8c:	f107 020a 	add.w	r2, r7, #10
 8000e90:	2302      	movs	r3, #2
 8000e92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000e96:	f001 f805 	bl	8001ea4 <wm8994_write_reg>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb2:	f000 fff7 	bl	8001ea4 <wm8994_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0018 	add.w	r0, r3, #24
 8000ec8:	f107 020a 	add.w	r2, r7, #10
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ed2:	f000 ffe7 	bl	8001ea4 <wm8994_write_reg>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0018 	add.w	r0, r3, #24
 8000ee8:	f107 020a 	add.w	r2, r7, #10
 8000eec:	2302      	movs	r3, #2
 8000eee:	f240 6112 	movw	r1, #1554	; 0x612
 8000ef2:	f000 ffd7 	bl	8001ea4 <wm8994_write_reg>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0018 	add.w	r0, r3, #24
 8000f04:	f107 020a 	add.w	r2, r7, #10
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8000f0e:	f000 ffc9 	bl	8001ea4 <wm8994_write_reg>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f103 0018 	add.w	r0, r3, #24
 8000f24:	f107 020a 	add.w	r2, r7, #10
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f240 4122 	movw	r1, #1058	; 0x422
 8000f2e:	f000 ffb9 	bl	8001ea4 <wm8994_write_reg>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f99f 	bl	8001288 <WM8994_SetVolume>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b5 	beq.w	80010c6 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <WM8994_Init+0xc5c>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000f6c:	2313      	movs	r3, #19
 8000f6e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0018 	add.w	r0, r3, #24
 8000f76:	f107 020a 	add.w	r2, r7, #10
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f000 ff91 	bl	8001ea4 <wm8994_write_reg>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0018 	add.w	r0, r3, #24
 8000f94:	f107 020a 	add.w	r2, r7, #10
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f9e:	f000 ff81 	bl	8001ea4 <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f103 0018 	add.w	r0, r3, #24
 8000fb6:	f107 020a 	add.w	r2, r7, #10
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f240 4111 	movw	r1, #1041	; 0x411
 8000fc0:	f000 ff70 	bl	8001ea4 <wm8994_write_reg>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e06f      	b.n	80010ae <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d13e      	bne.n	8001054 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f103 0018 	add.w	r0, r3, #24
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f000 ff5c 	bl	8001ea4 <wm8994_write_reg>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 0018 	add.w	r0, r3, #24
 8000ffe:	f107 020a 	add.w	r2, r7, #10
 8001002:	2302      	movs	r3, #2
 8001004:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001008:	f000 ff4c 	bl	8001ea4 <wm8994_write_reg>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001018:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0018 	add.w	r0, r3, #24
 8001020:	f107 020a 	add.w	r2, r7, #10
 8001024:	2302      	movs	r3, #2
 8001026:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800102a:	f000 ff3b 	bl	8001ea4 <wm8994_write_reg>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	f240 4111 	movw	r1, #1041	; 0x411
 8001046:	f000 ff2d 	bl	8001ea4 <wm8994_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e02c      	b.n	80010ae <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8001054:	230b      	movs	r3, #11
 8001056:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0018 	add.w	r0, r3, #24
 800105e:	f107 020a 	add.w	r2, r7, #10
 8001062:	2302      	movs	r3, #2
 8001064:	2118      	movs	r1, #24
 8001066:	f000 ff1d 	bl	8001ea4 <wm8994_write_reg>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f103 0018 	add.w	r0, r3, #24
 8001078:	f107 020a 	add.w	r2, r7, #10
 800107c:	2302      	movs	r3, #2
 800107e:	211a      	movs	r1, #26
 8001080:	f000 ff10 	bl	8001ea4 <wm8994_write_reg>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800108c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010a2:	f000 feff 	bl	8001ea4 <wm8994_write_reg>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8e5 	bl	8001288 <WM8994_SetVolume>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f861 	bl	80011ae <WM8994_Stop>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3318      	adds	r3, #24
 800110a:	f107 020a 	add.w	r2, r7, #10
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f000 ff00 	bl	8001f16 <wm8994_sw_reset_r>
 8001116:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	601a      	str	r2, [r3, #0]
  
  return ret;
 8001120:	68fb      	ldr	r3, [r7, #12]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f9d3 	bl	80014e0 <WM8994_SetMute>
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 800114c:	2301      	movs	r3, #1
 800114e:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8001150:	2101      	movs	r1, #1
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f9c4 	bl	80014e0 <WM8994_SetMute>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e011      	b.n	800118a <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f103 0018 	add.w	r0, r3, #24
 800116c:	f107 020a 	add.w	r2, r7, #10
 8001170:	2302      	movs	r3, #2
 8001172:	2102      	movs	r1, #2
 8001174:	f000 fe96 	bl	8001ea4 <wm8994_write_reg>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e001      	b.n	800118a <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800119c:	2100      	movs	r1, #0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f99e 	bl	80014e0 <WM8994_SetMute>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 80011b8:	2101      	movs	r1, #1
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f990 	bl	80014e0 <WM8994_SetMute>
 80011c0:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d054      	beq.n	8001272 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 80011c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011cc:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f103 0018 	add.w	r0, r3, #24
 80011d4:	f107 020a 	add.w	r2, r7, #10
 80011d8:	2302      	movs	r3, #2
 80011da:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011de:	f000 fe61 	bl	8001ea4 <wm8994_write_reg>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f103 0018 	add.w	r0, r3, #24
 80011f0:	f107 020a 	add.w	r2, r7, #10
 80011f4:	2302      	movs	r3, #2
 80011f6:	f240 4122 	movw	r1, #1058	; 0x422
 80011fa:	f000 fe53 	bl	8001ea4 <wm8994_write_reg>
 80011fe:	4602      	mov	r2, r0
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 8001206:	2300      	movs	r3, #0
 8001208:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f103 0018 	add.w	r0, r3, #24
 8001210:	f107 020a 	add.w	r2, r7, #10
 8001214:	2302      	movs	r3, #2
 8001216:	212d      	movs	r1, #45	; 0x2d
 8001218:	f000 fe44 	bl	8001ea4 <wm8994_write_reg>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f103 0018 	add.w	r0, r3, #24
 800122a:	f107 020a 	add.w	r2, r7, #10
 800122e:	2302      	movs	r3, #2
 8001230:	212e      	movs	r1, #46	; 0x2e
 8001232:	f000 fe37 	bl	8001ea4 <wm8994_write_reg>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0018 	add.w	r0, r3, #24
 8001244:	f107 020a 	add.w	r2, r7, #10
 8001248:	2302      	movs	r3, #2
 800124a:	2105      	movs	r1, #5
 800124c:	f000 fe2a 	bl	8001ea4 <wm8994_write_reg>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 0018 	add.w	r0, r3, #24
 800125e:	f107 020a 	add.w	r2, r7, #10
 8001262:	2302      	movs	r3, #2
 8001264:	2100      	movs	r1, #0
 8001266:	f000 fe1d 	bl	8001ea4 <wm8994_write_reg>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 8089 	bne.w	80013b0 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b3e      	cmp	r3, #62	; 0x3e
 80012a2:	d93c      	bls.n	800131e <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80012a4:	2100      	movs	r1, #0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f91a 	bl	80014e0 <WM8994_SetMute>
 80012ac:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 80012ae:	f240 137f 	movw	r3, #383	; 0x17f
 80012b2:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f103 0018 	add.w	r0, r3, #24
 80012ba:	f107 0212 	add.w	r2, r7, #18
 80012be:	2302      	movs	r3, #2
 80012c0:	211c      	movs	r1, #28
 80012c2:	f000 fdef 	bl	8001ea4 <wm8994_write_reg>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f103 0018 	add.w	r0, r3, #24
 80012d4:	f107 0212 	add.w	r2, r7, #18
 80012d8:	2302      	movs	r3, #2
 80012da:	211d      	movs	r1, #29
 80012dc:	f000 fde2 	bl	8001ea4 <wm8994_write_reg>
 80012e0:	4602      	mov	r2, r0
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f103 0018 	add.w	r0, r3, #24
 80012ee:	f107 0212 	add.w	r2, r7, #18
 80012f2:	2302      	movs	r3, #2
 80012f4:	2126      	movs	r1, #38	; 0x26
 80012f6:	f000 fdd5 	bl	8001ea4 <wm8994_write_reg>
 80012fa:	4602      	mov	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f103 0018 	add.w	r0, r3, #24
 8001308:	f107 0212 	add.w	r2, r7, #18
 800130c:	2302      	movs	r3, #2
 800130e:	2127      	movs	r1, #39	; 0x27
 8001310:	f000 fdc8 	bl	8001ea4 <wm8994_write_reg>
 8001314:	4602      	mov	r2, r0
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e083      	b.n	8001426 <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001324:	2101      	movs	r1, #1
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f8da 	bl	80014e0 <WM8994_SetMute>
 800132c:	6178      	str	r0, [r7, #20]
 800132e:	e07a      	b.n	8001426 <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001330:	2100      	movs	r1, #0
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f8d4 	bl	80014e0 <WM8994_SetMute>
 8001338:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	b29b      	uxth	r3, r3
 800133e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001342:	b29b      	uxth	r3, r3
 8001344:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 0018 	add.w	r0, r3, #24
 800134c:	f107 0212 	add.w	r2, r7, #18
 8001350:	2302      	movs	r3, #2
 8001352:	211c      	movs	r1, #28
 8001354:	f000 fda6 	bl	8001ea4 <wm8994_write_reg>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f103 0018 	add.w	r0, r3, #24
 8001366:	f107 0212 	add.w	r2, r7, #18
 800136a:	2302      	movs	r3, #2
 800136c:	211d      	movs	r1, #29
 800136e:	f000 fd99 	bl	8001ea4 <wm8994_write_reg>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f103 0018 	add.w	r0, r3, #24
 8001380:	f107 0212 	add.w	r2, r7, #18
 8001384:	2302      	movs	r3, #2
 8001386:	2126      	movs	r1, #38	; 0x26
 8001388:	f000 fd8c 	bl	8001ea4 <wm8994_write_reg>
 800138c:	4602      	mov	r2, r0
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f103 0018 	add.w	r0, r3, #24
 800139a:	f107 0212 	add.w	r2, r7, #18
 800139e:	2302      	movs	r3, #2
 80013a0:	2127      	movs	r1, #39	; 0x27
 80013a2:	f000 fd7f 	bl	8001ea4 <wm8994_write_reg>
 80013a6:	4602      	mov	r2, r0
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4413      	add	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e03a      	b.n	8001426 <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f103 0018 	add.w	r0, r3, #24
 80013c2:	f107 0212 	add.w	r2, r7, #18
 80013c6:	2302      	movs	r3, #2
 80013c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013cc:	f000 fd6a 	bl	8001ea4 <wm8994_write_reg>
 80013d0:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f103 0018 	add.w	r0, r3, #24
 80013d8:	f107 0212 	add.w	r2, r7, #18
 80013dc:	2302      	movs	r3, #2
 80013de:	f240 4101 	movw	r1, #1025	; 0x401
 80013e2:	f000 fd5f 	bl	8001ea4 <wm8994_write_reg>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f103 0018 	add.w	r0, r3, #24
 80013f4:	f107 0212 	add.w	r2, r7, #18
 80013f8:	2302      	movs	r3, #2
 80013fa:	f240 4104 	movw	r1, #1028	; 0x404
 80013fe:	f000 fd51 	bl	8001ea4 <wm8994_write_reg>
 8001402:	4602      	mov	r2, r0
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f103 0018 	add.w	r0, r3, #24
 8001410:	f107 0212 	add.w	r2, r7, #18
 8001414:	2302      	movs	r3, #2
 8001416:	f240 4105 	movw	r1, #1029	; 0x405
 800141a:	f000 fd43 	bl	8001ea4 <wm8994_write_reg>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001430:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001432:	697b      	ldr	r3, [r7, #20]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d11e      	bne.n	8001490 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3318      	adds	r3, #24
 8001456:	f107 0212 	add.w	r2, r7, #18
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fd6a 	bl	8001f36 <wm8994_lo_hpout1l_vol_r>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e02d      	b.n	80014cc <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8001470:	8a7b      	ldrh	r3, [r7, #18]
 8001472:	461a      	mov	r2, r3
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	fb03 f302 	mul.w	r3, r3, r2
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <WM8994_GetVolume+0x9c>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	441a      	add	r2, r3
 8001482:	1152      	asrs	r2, r2, #5
 8001484:	17db      	asrs	r3, r3, #31
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b2da      	uxtb	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e01d      	b.n	80014cc <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3318      	adds	r3, #24
 8001494:	f107 0212 	add.w	r2, r7, #18
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe60 	bl	8002160 <wm8994_aif1_adc1_left_vol_adc1l_r>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e00e      	b.n	80014cc <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	fb03 f302 	mul.w	r3, r3, r2
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <WM8994_GetVolume+0xa0>)
 80014ba:	fb82 1203 	smull	r1, r2, r2, r3
 80014be:	441a      	add	r2, r3
 80014c0:	11d2      	asrs	r2, r2, #7
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80014cc:	697b      	ldr	r3, [r7, #20]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	82082083 	.word	0x82082083
 80014dc:	891ac73b 	.word	0x891ac73b

080014e0 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d11c      	bne.n	800152a <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80014f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f4:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f103 0018 	add.w	r0, r3, #24
 80014fc:	f107 020a 	add.w	r2, r7, #10
 8001500:	2302      	movs	r3, #2
 8001502:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001506:	f000 fccd 	bl	8001ea4 <wm8994_write_reg>
 800150a:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f103 0018 	add.w	r0, r3, #24
 8001512:	f107 020a 	add.w	r2, r7, #10
 8001516:	2302      	movs	r3, #2
 8001518:	f240 4122 	movw	r1, #1058	; 0x422
 800151c:	f000 fcc2 	bl	8001ea4 <wm8994_write_reg>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e01a      	b.n	8001560 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800152a:	2310      	movs	r3, #16
 800152c:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f103 0018 	add.w	r0, r3, #24
 8001534:	f107 020a 	add.w	r2, r7, #10
 8001538:	2302      	movs	r3, #2
 800153a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800153e:	f000 fcb1 	bl	8001ea4 <wm8994_write_reg>
 8001542:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f103 0018 	add.w	r0, r3, #24
 800154a:	f107 020a 	add.w	r2, r7, #10
 800154e:	2302      	movs	r3, #2
 8001550:	f240 4122 	movw	r1, #1058	; 0x422
 8001554:	f000 fca6 	bl	8001ea4 <wm8994_write_reg>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <WM8994_SetOutputMode+0x18>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b04      	cmp	r3, #4
 800158a:	f040 809c 	bne.w	80016c6 <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 800158e:	2300      	movs	r3, #0
 8001590:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f103 0018 	add.w	r0, r3, #24
 8001598:	f107 020a 	add.w	r2, r7, #10
 800159c:	2302      	movs	r3, #2
 800159e:	2101      	movs	r1, #1
 80015a0:	f000 fc80 	bl	8001ea4 <wm8994_write_reg>
 80015a4:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 80015a6:	f240 3303 	movw	r3, #771	; 0x303
 80015aa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f103 0018 	add.w	r0, r3, #24
 80015b2:	f107 020a 	add.w	r2, r7, #10
 80015b6:	2302      	movs	r3, #2
 80015b8:	2105      	movs	r1, #5
 80015ba:	f000 fc73 	bl	8001ea4 <wm8994_write_reg>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80015c6:	2301      	movs	r3, #1
 80015c8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 0018 	add.w	r0, r3, #24
 80015d0:	f107 020a 	add.w	r2, r7, #10
 80015d4:	2302      	movs	r3, #2
 80015d6:	f240 6101 	movw	r1, #1537	; 0x601
 80015da:	f000 fc63 	bl	8001ea4 <wm8994_write_reg>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f103 0018 	add.w	r0, r3, #24
 80015ec:	f107 020a 	add.w	r2, r7, #10
 80015f0:	2302      	movs	r3, #2
 80015f2:	f240 6102 	movw	r1, #1538	; 0x602
 80015f6:	f000 fc55 	bl	8001ea4 <wm8994_write_reg>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8001602:	2300      	movs	r3, #0
 8001604:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f103 0018 	add.w	r0, r3, #24
 800160c:	f107 020a 	add.w	r2, r7, #10
 8001610:	2302      	movs	r3, #2
 8001612:	f240 6104 	movw	r1, #1540	; 0x604
 8001616:	f000 fc45 	bl	8001ea4 <wm8994_write_reg>
 800161a:	4602      	mov	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f103 0018 	add.w	r0, r3, #24
 8001628:	f107 020a 	add.w	r2, r7, #10
 800162c:	2302      	movs	r3, #2
 800162e:	f240 6105 	movw	r1, #1541	; 0x605
 8001632:	f000 fc37 	bl	8001ea4 <wm8994_write_reg>
 8001636:	4602      	mov	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 800163e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001642:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f103 0018 	add.w	r0, r3, #24
 800164a:	f107 020a 	add.w	r2, r7, #10
 800164e:	2302      	movs	r3, #2
 8001650:	212d      	movs	r1, #45	; 0x2d
 8001652:	f000 fc27 	bl	8001ea4 <wm8994_write_reg>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0018 	add.w	r0, r3, #24
 8001664:	f107 020a 	add.w	r2, r7, #10
 8001668:	2302      	movs	r3, #2
 800166a:	212e      	movs	r1, #46	; 0x2e
 800166c:	f000 fc1a 	bl	8001ea4 <wm8994_write_reg>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 8001678:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800167c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f103 0018 	add.w	r0, r3, #24
 8001684:	f107 020a 	add.w	r2, r7, #10
 8001688:	2302      	movs	r3, #2
 800168a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800168e:	f000 fc09 	bl	8001ea4 <wm8994_write_reg>
 8001692:	4602      	mov	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800169a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fb88 	bl	8001db4 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 80016a4:	2300      	movs	r3, #0
 80016a6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f103 0018 	add.w	r0, r3, #24
 80016ae:	f107 020a 	add.w	r2, r7, #10
 80016b2:	2302      	movs	r3, #2
 80016b4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80016b8:	f000 fbf4 	bl	8001ea4 <wm8994_write_reg>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e165      	b.n	8001992 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d149      	bne.n	8001760 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80016cc:	f640 430c 	movw	r3, #3084	; 0xc0c
 80016d0:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f103 0018 	add.w	r0, r3, #24
 80016d8:	f107 020a 	add.w	r2, r7, #10
 80016dc:	2302      	movs	r3, #2
 80016de:	2105      	movs	r1, #5
 80016e0:	f000 fbe0 	bl	8001ea4 <wm8994_write_reg>
 80016e4:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80016e6:	2300      	movs	r3, #0
 80016e8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f103 0018 	add.w	r0, r3, #24
 80016f0:	f107 020a 	add.w	r2, r7, #10
 80016f4:	2302      	movs	r3, #2
 80016f6:	f240 6101 	movw	r1, #1537	; 0x601
 80016fa:	f000 fbd3 	bl	8001ea4 <wm8994_write_reg>
 80016fe:	4602      	mov	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f103 0018 	add.w	r0, r3, #24
 800170c:	f107 020a 	add.w	r2, r7, #10
 8001710:	2302      	movs	r3, #2
 8001712:	f240 6102 	movw	r1, #1538	; 0x602
 8001716:	f000 fbc5 	bl	8001ea4 <wm8994_write_reg>
 800171a:	4602      	mov	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001722:	2302      	movs	r3, #2
 8001724:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f103 0018 	add.w	r0, r3, #24
 800172c:	f107 020a 	add.w	r2, r7, #10
 8001730:	2302      	movs	r3, #2
 8001732:	f240 6104 	movw	r1, #1540	; 0x604
 8001736:	f000 fbb5 	bl	8001ea4 <wm8994_write_reg>
 800173a:	4602      	mov	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f103 0018 	add.w	r0, r3, #24
 8001748:	f107 020a 	add.w	r2, r7, #10
 800174c:	2302      	movs	r3, #2
 800174e:	f240 6105 	movw	r1, #1541	; 0x605
 8001752:	f000 fba7 	bl	8001ea4 <wm8994_write_reg>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
      break;
 800175e:	e03b      	b.n	80017d8 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8001760:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001764:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f103 0018 	add.w	r0, r3, #24
 800176c:	f107 020a 	add.w	r2, r7, #10
 8001770:	2302      	movs	r3, #2
 8001772:	2105      	movs	r1, #5
 8001774:	f000 fb96 	bl	8001ea4 <wm8994_write_reg>
 8001778:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 800177a:	2301      	movs	r3, #1
 800177c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0018 	add.w	r0, r3, #24
 8001784:	f107 020a 	add.w	r2, r7, #10
 8001788:	2302      	movs	r3, #2
 800178a:	f240 6101 	movw	r1, #1537	; 0x601
 800178e:	f000 fb89 	bl	8001ea4 <wm8994_write_reg>
 8001792:	4602      	mov	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0018 	add.w	r0, r3, #24
 80017a0:	f107 020a 	add.w	r2, r7, #10
 80017a4:	2302      	movs	r3, #2
 80017a6:	f240 6102 	movw	r1, #1538	; 0x602
 80017aa:	f000 fb7b 	bl	8001ea4 <wm8994_write_reg>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 80017b6:	2302      	movs	r3, #2
 80017b8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f103 0018 	add.w	r0, r3, #24
 80017c0:	f107 020a 	add.w	r2, r7, #10
 80017c4:	2302      	movs	r3, #2
 80017c6:	f240 6104 	movw	r1, #1540	; 0x604
 80017ca:	f000 fb6b 	bl	8001ea4 <wm8994_write_reg>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
      break;
 80017d6:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 80017d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017dc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f103 0018 	add.w	r0, r3, #24
 80017e4:	f107 020a 	add.w	r2, r7, #10
 80017e8:	2302      	movs	r3, #2
 80017ea:	2103      	movs	r1, #3
 80017ec:	f000 fb5a 	bl	8001ea4 <wm8994_write_reg>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 80017f8:	2300      	movs	r3, #0
 80017fa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0018 	add.w	r0, r3, #24
 8001802:	f107 020a 	add.w	r2, r7, #10
 8001806:	2302      	movs	r3, #2
 8001808:	2122      	movs	r1, #34	; 0x22
 800180a:	f000 fb4b 	bl	8001ea4 <wm8994_write_reg>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 0018 	add.w	r0, r3, #24
 800181c:	f107 020a 	add.w	r2, r7, #10
 8001820:	2302      	movs	r3, #2
 8001822:	2123      	movs	r1, #35	; 0x23
 8001824:	f000 fb3e 	bl	8001ea4 <wm8994_write_reg>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f103 0018 	add.w	r0, r3, #24
 800183c:	f107 020a 	add.w	r2, r7, #10
 8001840:	2302      	movs	r3, #2
 8001842:	2136      	movs	r1, #54	; 0x36
 8001844:	f000 fb2e 	bl	8001ea4 <wm8994_write_reg>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8001850:	f243 0303 	movw	r3, #12291	; 0x3003
 8001854:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f103 0018 	add.w	r0, r3, #24
 800185c:	f107 020a 	add.w	r2, r7, #10
 8001860:	2302      	movs	r3, #2
 8001862:	2101      	movs	r1, #1
 8001864:	f000 fb1e 	bl	8001ea4 <wm8994_write_reg>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8001870:	2305      	movs	r3, #5
 8001872:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f103 0018 	add.w	r0, r3, #24
 800187a:	f107 020a 	add.w	r2, r7, #10
 800187e:	2302      	movs	r3, #2
 8001880:	2151      	movs	r1, #81	; 0x51
 8001882:	f000 fb0f 	bl	8001ea4 <wm8994_write_reg>
 8001886:	4602      	mov	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 800188e:	f243 3303 	movw	r3, #13059	; 0x3303
 8001892:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f103 0018 	add.w	r0, r3, #24
 800189a:	f107 020a 	add.w	r2, r7, #10
 800189e:	2302      	movs	r3, #2
 80018a0:	2101      	movs	r1, #1
 80018a2:	f000 faff 	bl	8001ea4 <wm8994_write_reg>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 80018ae:	2322      	movs	r3, #34	; 0x22
 80018b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0018 	add.w	r0, r3, #24
 80018b8:	f107 020a 	add.w	r2, r7, #10
 80018bc:	2302      	movs	r3, #2
 80018be:	2160      	movs	r1, #96	; 0x60
 80018c0:	f000 faf0 	bl	8001ea4 <wm8994_write_reg>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 80018cc:	f649 7325 	movw	r3, #40741	; 0x9f25
 80018d0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f103 0018 	add.w	r0, r3, #24
 80018d8:	f107 020a 	add.w	r2, r7, #10
 80018dc:	2302      	movs	r3, #2
 80018de:	214c      	movs	r1, #76	; 0x4c
 80018e0:	f000 fae0 	bl	8001ea4 <wm8994_write_reg>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 80018ec:	210f      	movs	r1, #15
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa60 	bl	8001db4 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 80018f4:	2301      	movs	r3, #1
 80018f6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f103 0018 	add.w	r0, r3, #24
 80018fe:	f107 020a 	add.w	r2, r7, #10
 8001902:	2302      	movs	r3, #2
 8001904:	212d      	movs	r1, #45	; 0x2d
 8001906:	f000 facd 	bl	8001ea4 <wm8994_write_reg>
 800190a:	4602      	mov	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f103 0018 	add.w	r0, r3, #24
 8001918:	f107 020a 	add.w	r2, r7, #10
 800191c:	2302      	movs	r3, #2
 800191e:	212e      	movs	r1, #46	; 0x2e
 8001920:	f000 fac0 	bl	8001ea4 <wm8994_write_reg>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 800192c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001930:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f103 0018 	add.w	r0, r3, #24
 8001938:	f107 020a 	add.w	r2, r7, #10
 800193c:	2302      	movs	r3, #2
 800193e:	2103      	movs	r1, #3
 8001940:	f000 fab0 	bl	8001ea4 <wm8994_write_reg>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 800194c:	2333      	movs	r3, #51	; 0x33
 800194e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f103 0018 	add.w	r0, r3, #24
 8001956:	f107 020a 	add.w	r2, r7, #10
 800195a:	2302      	movs	r3, #2
 800195c:	2154      	movs	r1, #84	; 0x54
 800195e:	f000 faa1 	bl	8001ea4 <wm8994_write_reg>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 800196a:	f240 1101 	movw	r1, #257	; 0x101
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa20 	bl	8001db4 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8001974:	23ee      	movs	r3, #238	; 0xee
 8001976:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f103 0018 	add.w	r0, r3, #24
 800197e:	f107 020a 	add.w	r2, r7, #10
 8001982:	2302      	movs	r3, #2
 8001984:	2160      	movs	r1, #96	; 0x60
 8001986:	f000 fa8d 	bl	8001ea4 <wm8994_write_reg>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3318      	adds	r3, #24
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	b292      	uxth	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fb4b 	bl	800205c <wm8994_aif1_control1_wl>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3318      	adds	r3, #24
 80019f2:	f107 020a 	add.w	r2, r7, #10
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fb5f 	bl	80020bc <wm8994_aif1_control1_wl_r>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e021      	b.n	8001a50 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d81a      	bhi.n	8001a48 <WM8994_GetResolution+0x6c>
 8001a12:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <WM8994_GetResolution+0x3c>)
 8001a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a31 	.word	0x08001a31
 8001a20:	08001a39 	.word	0x08001a39
 8001a24:	08001a41 	.word	0x08001a41
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
      break;
 8001a2e:	e00f      	b.n	8001a50 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
      break;
 8001a36:	e00b      	b.n	8001a50 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
      break;
 8001a3e:	e007      	b.n	8001a50 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2203      	movs	r2, #3
 8001a44:	601a      	str	r2, [r3, #0]
      break; 
 8001a46:	e003      	b.n	8001a50 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
      break;
 8001a4e:	bf00      	nop
    }
  }
  
  return ret;
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop

08001a5c <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	b292      	uxth	r2, r2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fa9f 	bl	8001fb8 <wm8994_aif1_control1_fmt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a84:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	f107 020a 	add.w	r2, r7, #10
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fab5 	bl	8002018 <wm8994_aif1_control1_fmt_r>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e003      	b.n	8001ac4 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8001abc:	897b      	ldrh	r3, [r7, #10]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <WM8994_SetFrequency+0x164>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d05d      	beq.n	8001b9e <WM8994_SetFrequency+0xce>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	4a53      	ldr	r2, [pc, #332]	; (8001c34 <WM8994_SetFrequency+0x164>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f200 8091 	bhi.w	8001c0e <WM8994_SetFrequency+0x13e>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d07d      	beq.n	8001bf2 <WM8994_SetFrequency+0x122>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001afc:	4293      	cmp	r3, r2
 8001afe:	f200 8086 	bhi.w	8001c0e <WM8994_SetFrequency+0x13e>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001b08:	d03b      	beq.n	8001b82 <WM8994_SetFrequency+0xb2>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001b10:	d87d      	bhi.n	8001c0e <WM8994_SetFrequency+0x13e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f245 6222 	movw	r2, #22050	; 0x5622
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d05c      	beq.n	8001bd6 <WM8994_SetFrequency+0x106>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d873      	bhi.n	8001c0e <WM8994_SetFrequency+0x13e>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001b2c:	d01b      	beq.n	8001b66 <WM8994_SetFrequency+0x96>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001b34:	d86b      	bhi.n	8001c0e <WM8994_SetFrequency+0x13e>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001b3c:	d005      	beq.n	8001b4a <WM8994_SetFrequency+0x7a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d038      	beq.n	8001bba <WM8994_SetFrequency+0xea>
 8001b48:	e061      	b.n	8001c0e <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 0018 	add.w	r0, r3, #24
 8001b54:	f107 020a 	add.w	r2, r7, #10
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b5e:	f000 f9a1 	bl	8001ea4 <wm8994_write_reg>
 8001b62:	60f8      	str	r0, [r7, #12]
    break;
 8001b64:	e061      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001b66:	2333      	movs	r3, #51	; 0x33
 8001b68:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 0018 	add.w	r0, r3, #24
 8001b70:	f107 020a 	add.w	r2, r7, #10
 8001b74:	2302      	movs	r3, #2
 8001b76:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b7a:	f000 f993 	bl	8001ea4 <wm8994_write_reg>
 8001b7e:	60f8      	str	r0, [r7, #12]
    break;
 8001b80:	e053      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001b82:	2363      	movs	r3, #99	; 0x63
 8001b84:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 0018 	add.w	r0, r3, #24
 8001b8c:	f107 020a 	add.w	r2, r7, #10
 8001b90:	2302      	movs	r3, #2
 8001b92:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b96:	f000 f985 	bl	8001ea4 <wm8994_write_reg>
 8001b9a:	60f8      	str	r0, [r7, #12]
    break;
 8001b9c:	e045      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001b9e:	23a3      	movs	r3, #163	; 0xa3
 8001ba0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0018 	add.w	r0, r3, #24
 8001ba8:	f107 020a 	add.w	r2, r7, #10
 8001bac:	2302      	movs	r3, #2
 8001bae:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001bb2:	f000 f977 	bl	8001ea4 <wm8994_write_reg>
 8001bb6:	60f8      	str	r0, [r7, #12]
    break;
 8001bb8:	e037      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8001bba:	2313      	movs	r3, #19
 8001bbc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0018 	add.w	r0, r3, #24
 8001bc4:	f107 020a 	add.w	r2, r7, #10
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001bce:	f000 f969 	bl	8001ea4 <wm8994_write_reg>
 8001bd2:	60f8      	str	r0, [r7, #12]
    break;
 8001bd4:	e029      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001bd6:	2343      	movs	r3, #67	; 0x43
 8001bd8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f103 0018 	add.w	r0, r3, #24
 8001be0:	f107 020a 	add.w	r2, r7, #10
 8001be4:	2302      	movs	r3, #2
 8001be6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001bea:	f000 f95b 	bl	8001ea4 <wm8994_write_reg>
 8001bee:	60f8      	str	r0, [r7, #12]
    break;
 8001bf0:	e01b      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8001bf2:	2373      	movs	r3, #115	; 0x73
 8001bf4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 0018 	add.w	r0, r3, #24
 8001bfc:	f107 020a 	add.w	r2, r7, #10
 8001c00:	2302      	movs	r3, #2
 8001c02:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001c06:	f000 f94d 	bl	8001ea4 <wm8994_write_reg>
 8001c0a:	60f8      	str	r0, [r7, #12]
    break; 
 8001c0c:	e00d      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001c0e:	2383      	movs	r3, #131	; 0x83
 8001c10:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 0018 	add.w	r0, r3, #24
 8001c18:	f107 020a 	add.w	r2, r7, #10
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001c22:	f000 f93f 	bl	8001ea4 <wm8994_write_reg>
 8001c26:	60f8      	str	r0, [r7, #12]
    break; 
 8001c28:	bf00      	nop
  }
  
  return ret;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	00017700 	.word	0x00017700

08001c38 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	f107 020a 	add.w	r2, r7, #10
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f98d 	bl	8001f74 <wm8994_aif1_sr_r>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e043      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8001c68:	897b      	ldrh	r3, [r7, #10]
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d83f      	bhi.n	8001cee <WM8994_GetFrequency+0xb6>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <WM8994_GetFrequency+0x3c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001ca1 	.word	0x08001ca1
 8001c78:	08001cab 	.word	0x08001cab
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cb5 	.word	0x08001cb5
 8001c84:	08001cbf 	.word	0x08001cbf
 8001c88:	08001cef 	.word	0x08001cef
 8001c8c:	08001cc9 	.word	0x08001cc9
 8001c90:	08001cd3 	.word	0x08001cd3
 8001c94:	08001cdd 	.word	0x08001cdd
 8001c98:	08001cef 	.word	0x08001cef
 8001c9c:	08001ce7 	.word	0x08001ce7
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ca6:	601a      	str	r2, [r3, #0]
      break;
 8001ca8:	e022      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001cb0:	601a      	str	r2, [r3, #0]
      break;    
 8001cb2:	e01d      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001cba:	601a      	str	r2, [r3, #0]
      break;
 8001cbc:	e018      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f245 6222 	movw	r2, #22050	; 0x5622
 8001cc4:	601a      	str	r2, [r3, #0]
      break; 
 8001cc6:	e013      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001cce:	601a      	str	r2, [r3, #0]
      break; 
 8001cd0:	e00e      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001cd8:	601a      	str	r2, [r3, #0]
      break;    
 8001cda:	e009      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001ce2:	601a      	str	r2, [r3, #0]
      break;
 8001ce4:	e004      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <WM8994_GetFrequency+0xc4>)
 8001cea:	601a      	str	r2, [r3, #0]
      break;    
 8001cec:	e000      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8001cee:	bf00      	nop
    }
  }
  
  return ret;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00017700 	.word	0x00017700

08001d00 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3318      	adds	r3, #24
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f8ee 	bl	8001ef4 <wm8994_sw_reset_w>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d22:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d103      	bne.n	8001d48 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e02c      	b.n	8001da2 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	891a      	ldrh	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <WM8994_RegisterBusIO+0x7c>)
 8001d7c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <WM8994_RegisterBusIO+0x80>)
 8001d82:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4798      	blx	r3
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	e002      	b.n	8001da2 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	08001de9 	.word	0x08001de9
 8001db0:	08001e1b 	.word	0x08001e1b

08001db4 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001dc8:	bf00      	nop
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d8f5      	bhi.n	8001dca <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	461a      	mov	r2, r3
 8001df4:	460b      	mov	r3, r1
 8001df6:	817b      	strh	r3, [r7, #10]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	691c      	ldr	r4, [r3, #16]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	8918      	ldrh	r0, [r3, #8]
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	47a0      	blx	r4
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}

08001e1a <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001e1a:	b590      	push	{r4, r7, lr}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	461a      	mov	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	817b      	strh	r3, [r7, #10]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	68dc      	ldr	r4, [r3, #12]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	8918      	ldrh	r0, [r3, #8]
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	47a0      	blx	r4
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}

08001e4c <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	817b      	strh	r3, [r7, #10]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685c      	ldr	r4, [r3, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6898      	ldr	r0, [r3, #8]
 8001e68:	893b      	ldrh	r3, [r7, #8]
 8001e6a:	8979      	ldrh	r1, [r7, #10]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	47a0      	blx	r4
 8001e70:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db10      	blt.n	8001e9a <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8a7a      	ldrh	r2, [r7, #18]
 8001e98:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8001e9a:	697b      	ldr	r3, [r7, #20]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}

08001ea4 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	8afb      	ldrh	r3, [r7, #22]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6898      	ldr	r0, [r3, #8]
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	f107 0216 	add.w	r2, r7, #22
 8001ee6:	8979      	ldrh	r1, [r7, #10]
 8001ee8:	47a0      	blx	r4
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8001f00:	1cba      	adds	r2, r7, #2
 8001f02:	2302      	movs	r3, #2
 8001f04:	2100      	movs	r1, #0
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffcc 	bl	8001ea4 <wm8994_write_reg>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8001f20:	2302      	movs	r3, #2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff90 	bl	8001e4c <wm8994_read_reg>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8001f40:	2302      	movs	r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	211c      	movs	r1, #28
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff80 	bl	8001e4c <wm8994_read_reg>
 8001f4c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8001f7e:	2302      	movs	r3, #2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff60 	bl	8001e4c <wm8994_read_reg>
 8001f8c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10c      	bne.n	8001fae <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001fc8:	f107 020a 	add.w	r2, r7, #10
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff3a 	bl	8001e4c <wm8994_read_reg>
 8001fd8:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d116      	bne.n	800200e <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8001fe0:	897b      	ldrh	r3, [r7, #10]
 8001fe2:	f023 0318 	bic.w	r3, r3, #24
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001ffc:	f107 020a 	add.w	r2, r7, #10
 8002000:	2302      	movs	r3, #2
 8002002:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff4c 	bl	8001ea4 <wm8994_write_reg>
 800200c:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8002022:	2302      	movs	r3, #2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	f44f 7140 	mov.w	r1, #768	; 0x300
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff0e 	bl	8001e4c <wm8994_read_reg>
 8002030:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10c      	bne.n	8002052 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f003 0318 	and.w	r3, r3, #24
 8002040:	b29a      	uxth	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	b29a      	uxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800206c:	f107 020a 	add.w	r2, r7, #10
 8002070:	2302      	movs	r3, #2
 8002072:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fee8 	bl	8001e4c <wm8994_read_reg>
 800207c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d116      	bne.n	80020b2 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800208a:	b29b      	uxth	r3, r3
 800208c:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	015b      	lsls	r3, r3, #5
 8002092:	b21a      	sxth	r2, r3
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b21b      	sxth	r3, r3
 800209c:	b29b      	uxth	r3, r3
 800209e:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80020a0:	f107 020a 	add.w	r2, r7, #10
 80020a4:	2302      	movs	r3, #2
 80020a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fefa 	bl	8001ea4 <wm8994_write_reg>
 80020b0:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80020c6:	2302      	movs	r3, #2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	f44f 7140 	mov.w	r1, #768	; 0x300
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff febc 	bl	8001e4c <wm8994_read_reg>
 80020d4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10c      	bne.n	80020f6 <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002110:	f107 020a 	add.w	r2, r7, #10
 8002114:	2302      	movs	r3, #2
 8002116:	f44f 7140 	mov.w	r1, #768	; 0x300
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe96 	bl	8001e4c <wm8994_read_reg>
 8002120:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d116      	bne.n	8002156 <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 8002128:	897b      	ldrh	r3, [r7, #10]
 800212a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800212e:	b29b      	uxth	r3, r3
 8002130:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	039b      	lsls	r3, r3, #14
 8002136:	b21a      	sxth	r2, r3
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002144:	f107 020a 	add.w	r2, r7, #10
 8002148:	2302      	movs	r3, #2
 800214a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fea8 	bl	8001ea4 <wm8994_write_reg>
 8002154:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 800216a:	2302      	movs	r3, #2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fe6a 	bl	8001e4c <wm8994_read_reg>
 8002178:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	b29a      	uxth	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	881a      	ldrh	r2, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10f      	bne.n	80021d4 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <BSP_LED_Init+0xb0>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ba:	4a25      	ldr	r2, [pc, #148]	; (8002250 <BSP_LED_Init+0xb0>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <BSP_LED_Init+0xb0>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	e015      	b.n	8002200 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10f      	bne.n	80021fa <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <BSP_LED_Init+0xb0>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <BSP_LED_Init+0xb0>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <BSP_LED_Init+0xb0>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	e002      	b.n	8002200 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021fa:	f06f 0301 	mvn.w	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <BSP_LED_Init+0xb4>)
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <BSP_LED_Init+0xb8>)
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	f107 0210 	add.w	r2, r7, #16
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fd07 	bl	8005c38 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <BSP_LED_Init+0xb8>)
 800222e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <BSP_LED_Init+0xb4>)
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	b29b      	uxth	r3, r3
 800223c:	2201      	movs	r2, #1
 800223e:	4619      	mov	r1, r3
 8002240:	f003 ffa4 	bl	800618c <HAL_GPIO_WritePin>

  return ret;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002246:	4618      	mov	r0, r3
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	58024400 	.word	0x58024400
 8002254:	0800eaf0 	.word	0x0800eaf0
 8002258:	2400044c 	.word	0x2400044c

0800225c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <BSP_LED_On+0x34>)
 800226e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <BSP_LED_On+0x38>)
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	b29b      	uxth	r3, r3
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	f003 ff84 	bl	800618c <HAL_GPIO_WritePin>
  return ret;
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2400044c 	.word	0x2400044c
 8002294:	0800eaf0 	.word	0x0800eaf0

08002298 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <BSP_LED_Off+0x34>)
 80022aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <BSP_LED_Off+0x38>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	4619      	mov	r1, r3
 80022bc:	f003 ff66 	bl	800618c <HAL_GPIO_WritePin>
  return ret;
 80022c0:	68fb      	ldr	r3, [r7, #12]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2400044c 	.word	0x2400044c
 80022d0:	0800eaf0 	.word	0x0800eaf0

080022d4 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f825 	bl	800232c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f824 	bl	8002340 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_SAI_ErrorCallback+0x28>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d103      	bne.n	800231a <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8002312:	2000      	movs	r0, #0
 8002314:	f000 f81e 	bl	8002354 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8002318:	e002      	b.n	8002320 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f84e 	bl	80023bc <BSP_AUDIO_IN_Error_CallBack>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40015824 	.word	0x40015824

0800232c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8002370:	2000      	movs	r0, #0
 8002372:	f000 f819 	bl	80023a8 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8002386:	2000      	movs	r0, #0
 8002388:	f000 f804 	bl	8002394 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <BSP_I2C4_Init+0x64>)
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <BSP_I2C4_Init+0x68>)
 80023de:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <BSP_I2C4_Init+0x6c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4915      	ldr	r1, [pc, #84]	; (800243c <BSP_I2C4_Init+0x6c>)
 80023e8:	600a      	str	r2, [r1, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11d      	bne.n	800242a <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80023ee:	4811      	ldr	r0, [pc, #68]	; (8002434 <BSP_I2C4_Init+0x64>)
 80023f0:	f004 fa99 	bl	8006926 <HAL_I2C_GetState>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d117      	bne.n	800242a <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <BSP_I2C4_Init+0x64>)
 80023fc:	f000 fb66 	bl	8002acc <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d111      	bne.n	800242a <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002406:	f006 fb31 	bl	8008a6c <HAL_RCC_GetPCLK2Freq>
 800240a:	4603      	mov	r3, r0
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <BSP_I2C4_Init+0x70>)
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f8e6 	bl	80025e0 <I2C_GetTiming>
 8002414:	4603      	mov	r3, r0
 8002416:	4619      	mov	r1, r3
 8002418:	4806      	ldr	r0, [pc, #24]	; (8002434 <BSP_I2C4_Init+0x64>)
 800241a:	f000 f83b 	bl	8002494 <MX_I2C4_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002424:	f06f 0307 	mvn.w	r3, #7
 8002428:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	24000f3c 	.word	0x24000f3c
 8002438:	58001c00 	.word	0x58001c00
 800243c:	24000500 	.word	0x24000500
 8002440:	000186a0 	.word	0x000186a0

08002444 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]

  if (I2c4InitCounter > 0U)
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <BSP_I2C4_DeInit+0x48>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d014      	beq.n	8002480 <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2c4InitCounter == 0U)
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <BSP_I2C4_DeInit+0x48>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3b01      	subs	r3, #1
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <BSP_I2C4_DeInit+0x48>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <BSP_I2C4_DeInit+0x48>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <BSP_I2C4_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C4_MspDeInit(&hbus_i2c4);
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <BSP_I2C4_DeInit+0x4c>)
 800246a:	f000 fb95 	bl	8002b98 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

      /* Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800246e:	4808      	ldr	r0, [pc, #32]	; (8002490 <BSP_I2C4_DeInit+0x4c>)
 8002470:	f003 ff5a 	bl	8006328 <HAL_I2C_DeInit>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800247a:	f06f 0307 	mvn.w	r3, #7
 800247e:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return ret;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000500 	.word	0x24000500
 8002490:	24000f3c 	.word	0x24000f3c

08002494 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f003 fe98 	bl	8006208 <HAL_I2C_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e014      	b.n	800250e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f005 fa82 	bl	80079f4 <HAL_I2CEx_ConfigAnalogFilter>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e008      	b.n	800250e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80024fc:	2100      	movs	r1, #0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f005 fac3 	bl	8007a8a <HAL_I2CEx_ConfigDigitalFilter>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60ba      	str	r2, [r7, #8]
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	81fb      	strh	r3, [r7, #14]
 8002526:	460b      	mov	r3, r1
 8002528:	81bb      	strh	r3, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800252e:	89b9      	ldrh	r1, [r7, #12]
 8002530:	89f8      	ldrh	r0, [r7, #14]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2202      	movs	r2, #2
 800253a:	f000 fb51 	bl	8002be0 <I2C4_WriteReg>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e00c      	b.n	8002564 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <BSP_I2C4_WriteReg16+0x58>)
 800254c:	f004 f9f9 	bl	8006942 <HAL_I2C_GetError>
 8002550:	4603      	mov	r3, r0
 8002552:	2b04      	cmp	r3, #4
 8002554:	d103      	bne.n	800255e <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002556:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e002      	b.n	8002564 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800255e:	f06f 0303 	mvn.w	r3, #3
 8002562:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002564:	697b      	ldr	r3, [r7, #20]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000f3c 	.word	0x24000f3c

08002574 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60ba      	str	r2, [r7, #8]
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	81fb      	strh	r3, [r7, #14]
 8002582:	460b      	mov	r3, r1
 8002584:	81bb      	strh	r3, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800258a:	89b9      	ldrh	r1, [r7, #12]
 800258c:	89f8      	ldrh	r0, [r7, #14]
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2202      	movs	r2, #2
 8002596:	f000 fb49 	bl	8002c2c <I2C4_ReadReg>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e00c      	b.n	80025c0 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <BSP_I2C4_ReadReg16+0x58>)
 80025a8:	f004 f9cb 	bl	8006942 <HAL_I2C_GetError>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d103      	bne.n	80025ba <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80025b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e002      	b.n	80025c0 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80025ba:	f06f 0303 	mvn.w	r3, #3
 80025be:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80025c0:	697b      	ldr	r3, [r7, #20]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	24000f3c 	.word	0x24000f3c

080025d0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80025d4:	f000 fbd6 	bl	8002d84 <HAL_GetTick>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06b      	beq.n	80026cc <I2C_GetTiming+0xec>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d068      	beq.n	80026cc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	e060      	b.n	80026c2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002600:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <I2C_GetTiming+0xf8>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d352      	bcc.n	80026bc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002616:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <I2C_GetTiming+0xf8>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3308      	adds	r3, #8
 8002624:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d847      	bhi.n	80026bc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800262c:	6939      	ldr	r1, [r7, #16]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f856 	bl	80026e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002634:	6939      	ldr	r1, [r7, #16]
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f940 	bl	80028bc <I2C_Compute_SCLL_SCLH>
 800263c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b7f      	cmp	r3, #127	; 0x7f
 8002642:	d842      	bhi.n	80026ca <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002644:	4925      	ldr	r1, [pc, #148]	; (80026dc <I2C_GetTiming+0xfc>)
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002656:	4821      	ldr	r0, [pc, #132]	; (80026dc <I2C_GetTiming+0xfc>)
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	3304      	adds	r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800266e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002670:	481a      	ldr	r0, [pc, #104]	; (80026dc <I2C_GetTiming+0xfc>)
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4403      	add	r3, r0
 800267e:	3308      	adds	r3, #8
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002688:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800268a:	4814      	ldr	r0, [pc, #80]	; (80026dc <I2C_GetTiming+0xfc>)
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4403      	add	r3, r0
 8002698:	330c      	adds	r3, #12
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80026a0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80026a2:	480e      	ldr	r0, [pc, #56]	; (80026dc <I2C_GetTiming+0xfc>)
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4403      	add	r3, r0
 80026b0:	3310      	adds	r3, #16
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80026b6:	430b      	orrs	r3, r1
 80026b8:	617b      	str	r3, [r7, #20]
        }
        break;
 80026ba:	e006      	b.n	80026ca <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	3301      	adds	r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d99b      	bls.n	8002600 <I2C_GetTiming+0x20>
 80026c8:	e000      	b.n	80026cc <I2C_GetTiming+0xec>
        break;
 80026ca:	bf00      	nop
      }
    }
  }

  return ret;
 80026cc:	697b      	ldr	r3, [r7, #20]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800eaf8 	.word	0x0800eaf8
 80026dc:	24000504 	.word	0x24000504

080026e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b08f      	sub	sp, #60	; 0x3c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80026ea:	2310      	movs	r3, #16
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	085a      	lsrs	r2, r3, #1
 80026f2:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80026f4:	4413      	add	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80026fc:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80026fe:	2332      	movs	r3, #50	; 0x32
 8002700:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8002702:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002706:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002708:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3324      	adds	r3, #36	; 0x24
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	330c      	adds	r3, #12
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800272c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800272e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002730:	495f      	ldr	r1, [pc, #380]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	202c      	movs	r0, #44	; 0x2c
 8002736:	fb00 f303 	mul.w	r3, r0, r3
 800273a:	440b      	add	r3, r1
 800273c:	3328      	adds	r3, #40	; 0x28
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3303      	adds	r3, #3
 8002742:	69f9      	ldr	r1, [r7, #28]
 8002744:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800274c:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3310      	adds	r3, #16
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3320      	adds	r3, #32
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002770:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002772:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002774:	494e      	ldr	r1, [pc, #312]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	202c      	movs	r0, #44	; 0x2c
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	440b      	add	r3, r1
 8002780:	3328      	adds	r3, #40	; 0x28
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3304      	adds	r3, #4
 8002786:	69f9      	ldr	r1, [r7, #28]
 8002788:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002790:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3320      	adds	r3, #32
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3314      	adds	r3, #20
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4403      	add	r3, r0
 80027b4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	dc01      	bgt.n	80027c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	dc01      	bgt.n	80027ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ce:	e062      	b.n	8002896 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	e059      	b.n	800288a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	3301      	adds	r3, #1
 80027da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027dc:	3201      	adds	r2, #1
 80027de:	fb02 f203 	mul.w	r2, r2, r3
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d348      	bcc.n	8002884 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	e042      	b.n	800287e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	3301      	adds	r3, #1
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	fb02 f203 	mul.w	r2, r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d332      	bcc.n	8002878 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d82e      	bhi.n	8002878 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800281a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	429a      	cmp	r2, r3
 8002820:	d02a      	beq.n	8002878 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4924      	ldr	r1, [pc, #144]	; (80028b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002834:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	491f      	ldr	r1, [pc, #124]	; (80028b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3304      	adds	r3, #4
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4919      	ldr	r1, [pc, #100]	; (80028b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3308      	adds	r3, #8
 800285e:	6a3a      	ldr	r2, [r7, #32]
 8002860:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800286e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b7f      	cmp	r3, #127	; 0x7f
 8002876:	d812      	bhi.n	800289e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	3301      	adds	r3, #1
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d9b9      	bls.n	80027f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	3301      	adds	r3, #1
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	2b0f      	cmp	r3, #15
 800288e:	d9a2      	bls.n	80027d6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	3301      	adds	r3, #1
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d999      	bls.n	80027d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800289c:	e000      	b.n	80028a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800289e:	bf00      	nop
          }
        }
      }
    }
  }
}
 80028a0:	373c      	adds	r7, #60	; 0x3c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	3b9aca00 	.word	0x3b9aca00
 80028b0:	0800eaf8 	.word	0x0800eaf8
 80028b4:	24000f04 	.word	0x24000f04
 80028b8:	24000504 	.word	0x24000504

080028bc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80028bc:	b480      	push	{r7}
 80028be:	b093      	sub	sp, #76	; 0x4c
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ca:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	085a      	lsrs	r2, r3, #1
 80028d0:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <I2C_Compute_SCLL_SCLH+0x200>)
 80028d2:	4413      	add	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80028dc:	4a78      	ldr	r2, [pc, #480]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	085a      	lsrs	r2, r3, #1
 80028ec:	4b73      	ldr	r3, [pc, #460]	; (8002abc <I2C_Compute_SCLL_SCLH+0x200>)
 80028ee:	4413      	add	r3, r2
 80028f0:	4973      	ldr	r1, [pc, #460]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	202c      	movs	r0, #44	; 0x2c
 80028f6:	fb00 f202 	mul.w	r2, r0, r2
 80028fa:	440a      	add	r2, r1
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8002904:	2332      	movs	r3, #50	; 0x32
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002908:	4a6d      	ldr	r2, [pc, #436]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002920:	4a67      	ldr	r2, [pc, #412]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3304      	adds	r3, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a62      	ldr	r2, [pc, #392]	; (8002abc <I2C_Compute_SCLL_SCLH+0x200>)
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002938:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3308      	adds	r3, #8
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5c      	ldr	r2, [pc, #368]	; (8002abc <I2C_Compute_SCLL_SCLH+0x200>)
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002954:	2300      	movs	r3, #0
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
 8002958:	e0a3      	b.n	8002aa2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800295a:	495a      	ldr	r1, [pc, #360]	; (8002ac4 <I2C_Compute_SCLL_SCLH+0x208>)
 800295c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002974:	2300      	movs	r3, #0
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002978:	e08c      	b.n	8002a94 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	441a      	add	r2, r3
 8002980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002982:	3301      	adds	r3, #1
 8002984:	6979      	ldr	r1, [r7, #20]
 8002986:	fb01 f103 	mul.w	r1, r1, r3
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	440b      	add	r3, r1
 8002990:	4413      	add	r3, r2
 8002992:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3318      	adds	r3, #24
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d971      	bls.n	8002a8e <I2C_Compute_SCLL_SCLH+0x1d2>
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	1ad2      	subs	r2, r2, r3
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d268      	bcs.n	8002a8e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80029bc:	2300      	movs	r3, #0
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c0:	e062      	b.n	8002a88 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	441a      	add	r2, r3
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	3301      	adds	r3, #1
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	fb01 f103 	mul.w	r1, r1, r3
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	4413      	add	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	441a      	add	r2, r3
 80029e2:	4937      	ldr	r1, [pc, #220]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	202c      	movs	r0, #44	; 0x2c
 80029e8:	fb00 f303 	mul.w	r3, r0, r3
 80029ec:	440b      	add	r3, r1
 80029ee:	3320      	adds	r3, #32
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	441a      	add	r2, r3
 80029f4:	4932      	ldr	r1, [pc, #200]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	202c      	movs	r0, #44	; 0x2c
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	440b      	add	r3, r1
 8002a00:	3324      	adds	r3, #36	; 0x24
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d338      	bcc.n	8002a82 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d834      	bhi.n	8002a82 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	331c      	adds	r3, #28
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d329      	bcc.n	8002a82 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d225      	bcs.n	8002a82 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da02      	bge.n	8002a4a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	425b      	negs	r3, r3
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d917      	bls.n	8002a82 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8002a56:	491b      	ldr	r1, [pc, #108]	; (8002ac4 <I2C_Compute_SCLL_SCLH+0x208>)
 8002a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3310      	adds	r3, #16
 8002a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a68:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002a6a:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <I2C_Compute_SCLL_SCLH+0x208>)
 8002a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	330c      	adds	r3, #12
 8002a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a7c:	601a      	str	r2, [r3, #0]
              ret = count;
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	3301      	adds	r3, #1
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d999      	bls.n	80029c2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	3301      	adds	r3, #1
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a96:	2bff      	cmp	r3, #255	; 0xff
 8002a98:	f67f af6f 	bls.w	800297a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f4ff af56 	bcc.w	800295a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	374c      	adds	r7, #76	; 0x4c
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	3b9aca00 	.word	0x3b9aca00
 8002ac0:	0800eaf8 	.word	0x0800eaf8
 8002ac4:	24000504 	.word	0x24000504
 8002ac8:	24000f04 	.word	0x24000f04

08002acc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002adc:	f043 0320 	orr.w	r3, r3, #32
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002afa:	f043 0320 	orr.w	r3, r3, #32
 8002afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002b10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002b16:	2312      	movs	r3, #18
 8002b18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002b22:	2304      	movs	r3, #4
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4819      	ldr	r0, [pc, #100]	; (8002b94 <I2C4_MspInit+0xc8>)
 8002b2e:	f003 f883 	bl	8005c38 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b36:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	4814      	ldr	r0, [pc, #80]	; (8002b94 <I2C4_MspInit+0xc8>)
 8002b44:	f003 f878 	bl	8005c38 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b6c:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <I2C4_MspInit+0xc4>)
 8002b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58021400 	.word	0x58021400

08002b98 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <I2C4_MspDeInit+0x40>)
 8002bac:	f003 f9ec 	bl	8005f88 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4807      	ldr	r0, [pc, #28]	; (8002bd8 <I2C4_MspDeInit+0x40>)
 8002bbc:	f003 f9e4 	bl	8005f88 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <I2C4_MspDeInit+0x44>)
 8002bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <I2C4_MspDeInit+0x44>)
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58021400 	.word	0x58021400
 8002bdc:	58024400 	.word	0x58024400

08002be0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	4603      	mov	r3, r0
 8002bea:	81fb      	strh	r3, [r7, #14]
 8002bec:	460b      	mov	r3, r1
 8002bee:	81bb      	strh	r3, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002bf4:	8978      	ldrh	r0, [r7, #10]
 8002bf6:	89ba      	ldrh	r2, [r7, #12]
 8002bf8:	89f9      	ldrh	r1, [r7, #14]
 8002bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	8b3b      	ldrh	r3, [r7, #24]
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4807      	ldr	r0, [pc, #28]	; (8002c28 <I2C4_WriteReg+0x48>)
 8002c0c:	f003 fbbc 	bl	8006388 <HAL_I2C_Mem_Write>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e001      	b.n	8002c1e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002c1a:	f06f 0307 	mvn.w	r3, #7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24000f3c 	.word	0x24000f3c

08002c2c <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af04      	add	r7, sp, #16
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	4603      	mov	r3, r0
 8002c36:	81fb      	strh	r3, [r7, #14]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	81bb      	strh	r3, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002c40:	8978      	ldrh	r0, [r7, #10]
 8002c42:	89ba      	ldrh	r2, [r7, #12]
 8002c44:	89f9      	ldrh	r1, [r7, #14]
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	9302      	str	r3, [sp, #8]
 8002c4c:	8b3b      	ldrh	r3, [r7, #24]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4603      	mov	r3, r0
 8002c56:	4807      	ldr	r0, [pc, #28]	; (8002c74 <I2C4_ReadReg+0x48>)
 8002c58:	f003 fcaa 	bl	80065b0 <HAL_I2C_Mem_Read>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e001      	b.n	8002c6a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002c66:	f06f 0307 	mvn.w	r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	24000f3c 	.word	0x24000f3c

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c7e:	2003      	movs	r0, #3
 8002c80:	f000 f980 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c84:	f005 fd48 	bl	8008718 <HAL_RCC_GetSysClockFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_Init+0x68>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	4913      	ldr	r1, [pc, #76]	; (8002ce4 <HAL_Init+0x6c>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_Init+0x68>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_Init+0x6c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_Init+0x70>)
 8002cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <HAL_Init+0x74>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f000 f814 	bl	8002cf0 <HAL_InitTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e002      	b.n	8002cd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd2:	f009 fa8b 	bl	800c1ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	0800eb84 	.word	0x0800eb84
 8002ce8:	2400046c 	.word	0x2400046c
 8002cec:	24000468 	.word	0x24000468

08002cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_InitTick+0x60>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e021      	b.n	8002d48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_InitTick+0x64>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_InitTick+0x60>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f973 	bl	8003006 <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d38:	f000 f92f 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x68>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	24000458 	.word	0x24000458
 8002d54:	24000468 	.word	0x24000468
 8002d58:	24000454 	.word	0x24000454

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	24000458 	.word	0x24000458
 8002d80:	24000f88 	.word	0x24000f88

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	24000f88 	.word	0x24000f88

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <__NVIC_SetPriorityGrouping+0x40>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dca:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <__NVIC_SetPriorityGrouping+0x40>)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60d3      	str	r3, [r2, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00
 8002de0:	05fa0000 	.word	0x05fa0000

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db12      	blt.n	8002e74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	490a      	ldr	r1, [pc, #40]	; (8002e80 <__NVIC_DisableIRQ+0x44>)
 8002e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	3320      	adds	r3, #32
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e68:	f3bf 8f4f 	dsb	sy
}
 8002e6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e6e:	f3bf 8f6f 	isb	sy
}
 8002e72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff05 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff1c 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff90 	bl	8002ed8 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5f 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff0f 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff1f 	bl	8002e3c <__NVIC_DisableIRQ>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff96 	bl	8002f40 <SysTick_Config>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003024:	f3bf 8f5f 	dmb	sy
}
 8003028:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_MPU_Disable+0x28>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_MPU_Disable+0x28>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_MPU_Disable+0x2c>)
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00
 800304c:	e000ed90 	.word	0xe000ed90

08003050 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_MPU_Enable+0x38>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_MPU_Enable+0x3c>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_MPU_Enable+0x3c>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800306e:	f3bf 8f4f 	dsb	sy
}
 8003072:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003074:	f3bf 8f6f 	isb	sy
}
 8003078:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed90 	.word	0xe000ed90
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	785a      	ldrb	r2, [r3, #1]
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_MPU_ConfigRegion+0x84>)
 800309e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d029      	beq.n	80030fc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80030a8:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_MPU_ConfigRegion+0x84>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7adb      	ldrb	r3, [r3, #11]
 80030ba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7a9b      	ldrb	r3, [r3, #10]
 80030c2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7b5b      	ldrb	r3, [r3, #13]
 80030ca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7b9b      	ldrb	r3, [r3, #14]
 80030d2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7bdb      	ldrb	r3, [r3, #15]
 80030da:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7a5b      	ldrb	r3, [r3, #9]
 80030e2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7a1b      	ldrb	r3, [r3, #8]
 80030ea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030ec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030f4:	4a07      	ldr	r2, [pc, #28]	; (8003114 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030f8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80030fa:	e005      	b.n	8003108 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_MPU_ConfigRegion+0x84>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_MPU_ConfigRegion+0x84>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed90 	.word	0xe000ed90

08003118 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e054      	b.n	80031d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7f5b      	ldrb	r3, [r3, #29]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f009 f870 	bl	800c220 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	791b      	ldrb	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_CRC_Init+0xc4>)
 8003154:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0218 	bic.w	r2, r2, #24
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	e00c      	b.n	8003182 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	461a      	mov	r2, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f834 	bl	80031e0 <HAL_CRCEx_Polynomial_Set>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e028      	b.n	80031d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	795b      	ldrb	r3, [r3, #5]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003192:	611a      	str	r2, [r3, #16]
 8003194:	e004      	b.n	80031a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6912      	ldr	r2, [r2, #16]
 800319e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	04c11db7 	.word	0x04c11db7

080031e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031f0:	231f      	movs	r3, #31
 80031f2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031f4:	bf00      	nop
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	613a      	str	r2, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_CRCEx_Polynomial_Set+0x34>
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_CRCEx_Polynomial_Set+0x16>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b18      	cmp	r3, #24
 8003218:	d846      	bhi.n	80032a8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_CRCEx_Polynomial_Set+0x40>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	080032af 	.word	0x080032af
 8003224:	080032a9 	.word	0x080032a9
 8003228:	080032a9 	.word	0x080032a9
 800322c:	080032a9 	.word	0x080032a9
 8003230:	080032a9 	.word	0x080032a9
 8003234:	080032a9 	.word	0x080032a9
 8003238:	080032a9 	.word	0x080032a9
 800323c:	080032a9 	.word	0x080032a9
 8003240:	0800329d 	.word	0x0800329d
 8003244:	080032a9 	.word	0x080032a9
 8003248:	080032a9 	.word	0x080032a9
 800324c:	080032a9 	.word	0x080032a9
 8003250:	080032a9 	.word	0x080032a9
 8003254:	080032a9 	.word	0x080032a9
 8003258:	080032a9 	.word	0x080032a9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	08003291 	.word	0x08003291
 8003264:	080032a9 	.word	0x080032a9
 8003268:	080032a9 	.word	0x080032a9
 800326c:	080032a9 	.word	0x080032a9
 8003270:	080032a9 	.word	0x080032a9
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080032a9 	.word	0x080032a9
 800327c:	080032a9 	.word	0x080032a9
 8003280:	08003285 	.word	0x08003285
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b06      	cmp	r3, #6
 8003288:	d913      	bls.n	80032b2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800328e:	e010      	b.n	80032b2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b07      	cmp	r3, #7
 8003294:	d90f      	bls.n	80032b6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800329a:	e00c      	b.n	80032b6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	d90b      	bls.n	80032ba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032a6:	e008      	b.n	80032ba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	e006      	b.n	80032bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032ae:	bf00      	nop
 80032b0:	e004      	b.n	80032bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032b2:	bf00      	nop
 80032b4:	e002      	b.n	80032bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032ba:	bf00      	nop
  }
  if (status == HAL_OK)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 0118 	bic.w	r1, r3, #24
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff fd46 	bl	8002d84 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e314      	b.n	800392e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a66      	ldr	r2, [pc, #408]	; (80034a4 <HAL_DMA_Init+0x1b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04a      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a65      	ldr	r2, [pc, #404]	; (80034a8 <HAL_DMA_Init+0x1bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d045      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a63      	ldr	r2, [pc, #396]	; (80034ac <HAL_DMA_Init+0x1c0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a62      	ldr	r2, [pc, #392]	; (80034b0 <HAL_DMA_Init+0x1c4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03b      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a60      	ldr	r2, [pc, #384]	; (80034b4 <HAL_DMA_Init+0x1c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5f      	ldr	r2, [pc, #380]	; (80034b8 <HAL_DMA_Init+0x1cc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <HAL_DMA_Init+0x1d0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_DMA_Init+0x1d4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5a      	ldr	r2, [pc, #360]	; (80034c4 <HAL_DMA_Init+0x1d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a59      	ldr	r2, [pc, #356]	; (80034c8 <HAL_DMA_Init+0x1dc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a57      	ldr	r2, [pc, #348]	; (80034cc <HAL_DMA_Init+0x1e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_DMA_Init+0x1e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a54      	ldr	r2, [pc, #336]	; (80034d4 <HAL_DMA_Init+0x1e8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a53      	ldr	r2, [pc, #332]	; (80034d8 <HAL_DMA_Init+0x1ec>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a51      	ldr	r2, [pc, #324]	; (80034dc <HAL_DMA_Init+0x1f0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_DMA_Init+0x1f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA_Init+0xbc>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_DMA_Init+0xbe>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 813c 	beq.w	8003628 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <HAL_DMA_Init+0x1b8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04a      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a36      	ldr	r2, [pc, #216]	; (80034a8 <HAL_DMA_Init+0x1bc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d045      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_DMA_Init+0x1c0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_DMA_Init+0x1c4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_DMA_Init+0x1c8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d036      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a30      	ldr	r2, [pc, #192]	; (80034b8 <HAL_DMA_Init+0x1cc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d031      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_DMA_Init+0x1d0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_DMA_Init+0x1d4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d027      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <HAL_DMA_Init+0x1d8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_DMA_Init+0x174>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <HAL_DMA_Init+0x1dc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01d      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_DMA_Init+0x1e0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <HAL_DMA_Init+0x174>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_DMA_Init+0x1e4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <HAL_DMA_Init+0x1e8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <HAL_DMA_Init+0x1ec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_DMA_Init+0x174>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_DMA_Init+0x1f0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_DMA_Init+0x1f4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <HAL_DMA_Init+0x186>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e007      	b.n	8003482 <HAL_DMA_Init+0x196>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003482:	e02f      	b.n	80034e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003484:	f7ff fc7e 	bl	8002d84 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b05      	cmp	r3, #5
 8003490:	d928      	bls.n	80034e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2203      	movs	r2, #3
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e244      	b.n	800392e <HAL_DMA_Init+0x642>
 80034a4:	40020010 	.word	0x40020010
 80034a8:	40020028 	.word	0x40020028
 80034ac:	40020040 	.word	0x40020040
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40020070 	.word	0x40020070
 80034b8:	40020088 	.word	0x40020088
 80034bc:	400200a0 	.word	0x400200a0
 80034c0:	400200b8 	.word	0x400200b8
 80034c4:	40020410 	.word	0x40020410
 80034c8:	40020428 	.word	0x40020428
 80034cc:	40020440 	.word	0x40020440
 80034d0:	40020458 	.word	0x40020458
 80034d4:	40020470 	.word	0x40020470
 80034d8:	40020488 	.word	0x40020488
 80034dc:	400204a0 	.word	0x400204a0
 80034e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1c8      	bne.n	8003484 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4b84      	ldr	r3, [pc, #528]	; (8003710 <HAL_DMA_Init+0x424>)
 80034fe:	4013      	ands	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800350a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003516:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003522:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4313      	orrs	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b28      	cmp	r3, #40	; 0x28
 800354e:	d903      	bls.n	8003558 <HAL_DMA_Init+0x26c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b2e      	cmp	r3, #46	; 0x2e
 8003556:	d91f      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b3e      	cmp	r3, #62	; 0x3e
 800355e:	d903      	bls.n	8003568 <HAL_DMA_Init+0x27c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b42      	cmp	r3, #66	; 0x42
 8003566:	d917      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b46      	cmp	r3, #70	; 0x46
 800356e:	d903      	bls.n	8003578 <HAL_DMA_Init+0x28c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b48      	cmp	r3, #72	; 0x48
 8003576:	d90f      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b4e      	cmp	r3, #78	; 0x4e
 800357e:	d903      	bls.n	8003588 <HAL_DMA_Init+0x29c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b52      	cmp	r3, #82	; 0x52
 8003586:	d907      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b73      	cmp	r3, #115	; 0x73
 800358e:	d905      	bls.n	800359c <HAL_DMA_Init+0x2b0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b77      	cmp	r3, #119	; 0x77
 8003596:	d801      	bhi.n	800359c <HAL_DMA_Init+0x2b0>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_DMA_Init+0x2b2>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d117      	bne.n	8003604 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00e      	beq.n	8003604 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f002 f884 	bl	80056f4 <DMA_CheckFifoParam>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e194      	b.n	800392e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f001 ffbf 	bl	8005590 <DMA_CalcBaseAndBitshift>
 8003612:	4603      	mov	r3, r0
 8003614:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	223f      	movs	r2, #63	; 0x3f
 8003620:	409a      	lsls	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	e0ca      	b.n	80037be <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a39      	ldr	r2, [pc, #228]	; (8003714 <HAL_DMA_Init+0x428>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_DMA_Init+0x42c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_DMA_Init+0x430>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a35      	ldr	r2, [pc, #212]	; (8003720 <HAL_DMA_Init+0x434>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a33      	ldr	r2, [pc, #204]	; (8003724 <HAL_DMA_Init+0x438>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a32      	ldr	r2, [pc, #200]	; (8003728 <HAL_DMA_Init+0x43c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	; (800372c <HAL_DMA_Init+0x440>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_Init+0x38c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <HAL_DMA_Init+0x444>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_DMA_Init+0x390>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_DMA_Init+0x392>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8094 	beq.w	80037ac <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <HAL_DMA_Init+0x428>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d021      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a21      	ldr	r2, [pc, #132]	; (8003718 <HAL_DMA_Init+0x42c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01c      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_DMA_Init+0x430>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d017      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <HAL_DMA_Init+0x434>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d012      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_DMA_Init+0x438>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_DMA_Init+0x43c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a19      	ldr	r2, [pc, #100]	; (800372c <HAL_DMA_Init+0x440>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <HAL_DMA_Init+0x3e6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_DMA_Init+0x444>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_DMA_Init+0x448>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Init+0x44c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d102      	bne.n	800370a <HAL_DMA_Init+0x41e>
 8003704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003708:	e017      	b.n	800373a <HAL_DMA_Init+0x44e>
 800370a:	2300      	movs	r3, #0
 800370c:	e015      	b.n	800373a <HAL_DMA_Init+0x44e>
 800370e:	bf00      	nop
 8003710:	fe10803f 	.word	0xfe10803f
 8003714:	58025408 	.word	0x58025408
 8003718:	5802541c 	.word	0x5802541c
 800371c:	58025430 	.word	0x58025430
 8003720:	58025444 	.word	0x58025444
 8003724:	58025458 	.word	0x58025458
 8003728:	5802546c 	.word	0x5802546c
 800372c:	58025480 	.word	0x58025480
 8003730:	58025494 	.word	0x58025494
 8003734:	fffe000f 	.word	0xfffe000f
 8003738:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003740:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003748:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003768:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b6e      	ldr	r3, [pc, #440]	; (8003938 <HAL_DMA_Init+0x64c>)
 8003780:	4413      	add	r3, r2
 8003782:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_DMA_Init+0x650>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f001 fefd 	bl	8005590 <DMA_CalcBaseAndBitshift>
 8003796:	4603      	mov	r3, r0
 8003798:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2201      	movs	r2, #1
 80037a4:	409a      	lsls	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e008      	b.n	80037be <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0b7      	b.n	800392e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5f      	ldr	r2, [pc, #380]	; (8003940 <HAL_DMA_Init+0x654>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d072      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_DMA_Init+0x658>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d06d      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5c      	ldr	r2, [pc, #368]	; (8003948 <HAL_DMA_Init+0x65c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d068      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5a      	ldr	r2, [pc, #360]	; (800394c <HAL_DMA_Init+0x660>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d063      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_DMA_Init+0x664>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d05e      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a57      	ldr	r2, [pc, #348]	; (8003954 <HAL_DMA_Init+0x668>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d059      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a56      	ldr	r2, [pc, #344]	; (8003958 <HAL_DMA_Init+0x66c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d054      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <HAL_DMA_Init+0x670>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04f      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a53      	ldr	r2, [pc, #332]	; (8003960 <HAL_DMA_Init+0x674>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d04a      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a51      	ldr	r2, [pc, #324]	; (8003964 <HAL_DMA_Init+0x678>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d045      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a50      	ldr	r2, [pc, #320]	; (8003968 <HAL_DMA_Init+0x67c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d040      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4e      	ldr	r2, [pc, #312]	; (800396c <HAL_DMA_Init+0x680>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d03b      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4d      	ldr	r2, [pc, #308]	; (8003970 <HAL_DMA_Init+0x684>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d036      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_DMA_Init+0x688>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_DMA_Init+0x68c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d02c      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a48      	ldr	r2, [pc, #288]	; (800397c <HAL_DMA_Init+0x690>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d027      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a47      	ldr	r2, [pc, #284]	; (8003980 <HAL_DMA_Init+0x694>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a45      	ldr	r2, [pc, #276]	; (8003984 <HAL_DMA_Init+0x698>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a44      	ldr	r2, [pc, #272]	; (8003988 <HAL_DMA_Init+0x69c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a42      	ldr	r2, [pc, #264]	; (800398c <HAL_DMA_Init+0x6a0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a41      	ldr	r2, [pc, #260]	; (8003990 <HAL_DMA_Init+0x6a4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <HAL_DMA_Init+0x6a8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3e      	ldr	r2, [pc, #248]	; (8003998 <HAL_DMA_Init+0x6ac>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Init+0x5c2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3c      	ldr	r2, [pc, #240]	; (800399c <HAL_DMA_Init+0x6b0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_Init+0x5c6>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_DMA_Init+0x5c8>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f001 ff97 	bl	80057ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d102      	bne.n	80038cc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_DMA_Init+0x620>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d80c      	bhi.n	800390c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f002 f814 	bl	8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	e008      	b.n	800391e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	a7fdabf8 	.word	0xa7fdabf8
 800393c:	cccccccd 	.word	0xcccccccd
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	58025408 	.word	0x58025408
 8003984:	5802541c 	.word	0x5802541c
 8003988:	58025430 	.word	0x58025430
 800398c:	58025444 	.word	0x58025444
 8003990:	58025458 	.word	0x58025458
 8003994:	5802546c 	.word	0x5802546c
 8003998:	58025480 	.word	0x58025480
 800399c:	58025494 	.word	0x58025494

080039a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e226      	b.n	8003e0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_DMA_Start_IT+0x2a>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e21f      	b.n	8003e0a <HAL_DMA_Start_IT+0x46a>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 820a 	bne.w	8003df4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_DMA_Start_IT+0x1f4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a66      	ldr	r2, [pc, #408]	; (8003b98 <HAL_DMA_Start_IT+0x1f8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_DMA_Start_IT+0x1fc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a63      	ldr	r2, [pc, #396]	; (8003ba0 <HAL_DMA_Start_IT+0x200>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a62      	ldr	r2, [pc, #392]	; (8003ba4 <HAL_DMA_Start_IT+0x204>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a60      	ldr	r2, [pc, #384]	; (8003ba8 <HAL_DMA_Start_IT+0x208>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5f      	ldr	r2, [pc, #380]	; (8003bac <HAL_DMA_Start_IT+0x20c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5d      	ldr	r2, [pc, #372]	; (8003bb0 <HAL_DMA_Start_IT+0x210>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5c      	ldr	r2, [pc, #368]	; (8003bb4 <HAL_DMA_Start_IT+0x214>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5a      	ldr	r2, [pc, #360]	; (8003bb8 <HAL_DMA_Start_IT+0x218>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a59      	ldr	r2, [pc, #356]	; (8003bbc <HAL_DMA_Start_IT+0x21c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a57      	ldr	r2, [pc, #348]	; (8003bc0 <HAL_DMA_Start_IT+0x220>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_DMA_Start_IT+0x224>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <HAL_DMA_Start_IT+0x228>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <HAL_DMA_Start_IT+0x22c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_Start_IT+0xee>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a51      	ldr	r2, [pc, #324]	; (8003bd0 <HAL_DMA_Start_IT+0x230>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <HAL_DMA_Start_IT+0x100>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e007      	b.n	8003ab0 <HAL_DMA_Start_IT+0x110>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f001 fbbe 	bl	8005238 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a34      	ldr	r2, [pc, #208]	; (8003b94 <HAL_DMA_Start_IT+0x1f4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a33      	ldr	r2, [pc, #204]	; (8003b98 <HAL_DMA_Start_IT+0x1f8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a31      	ldr	r2, [pc, #196]	; (8003b9c <HAL_DMA_Start_IT+0x1fc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <HAL_DMA_Start_IT+0x200>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2e      	ldr	r2, [pc, #184]	; (8003ba4 <HAL_DMA_Start_IT+0x204>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2d      	ldr	r2, [pc, #180]	; (8003ba8 <HAL_DMA_Start_IT+0x208>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <HAL_DMA_Start_IT+0x20c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <HAL_DMA_Start_IT+0x210>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <HAL_DMA_Start_IT+0x214>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <HAL_DMA_Start_IT+0x218>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a25      	ldr	r2, [pc, #148]	; (8003bbc <HAL_DMA_Start_IT+0x21c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_DMA_Start_IT+0x220>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_DMA_Start_IT+0x224>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_DMA_Start_IT+0x228>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_DMA_Start_IT+0x22c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_Start_IT+0x1bc>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_DMA_Start_IT+0x230>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Start_IT+0x1c0>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_DMA_Start_IT+0x1c2>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d036      	beq.n	8003bd4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 021e 	bic.w	r2, r3, #30
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0216 	orr.w	r2, r2, #22
 8003b78:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03e      	beq.n	8003c00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0208 	orr.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e035      	b.n	8003c00 <HAL_DMA_Start_IT+0x260>
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	40020058 	.word	0x40020058
 8003ba4:	40020070 	.word	0x40020070
 8003ba8:	40020088 	.word	0x40020088
 8003bac:	400200a0 	.word	0x400200a0
 8003bb0:	400200b8 	.word	0x400200b8
 8003bb4:	40020410 	.word	0x40020410
 8003bb8:	40020428 	.word	0x40020428
 8003bbc:	40020440 	.word	0x40020440
 8003bc0:	40020458 	.word	0x40020458
 8003bc4:	40020470 	.word	0x40020470
 8003bc8:	40020488 	.word	0x40020488
 8003bcc:	400204a0 	.word	0x400204a0
 8003bd0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020e 	bic.w	r2, r3, #14
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 020a 	orr.w	r2, r2, #10
 8003be6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0204 	orr.w	r2, r2, #4
 8003bfe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a83      	ldr	r2, [pc, #524]	; (8003e14 <HAL_DMA_Start_IT+0x474>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d072      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a82      	ldr	r2, [pc, #520]	; (8003e18 <HAL_DMA_Start_IT+0x478>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d06d      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a80      	ldr	r2, [pc, #512]	; (8003e1c <HAL_DMA_Start_IT+0x47c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d068      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7f      	ldr	r2, [pc, #508]	; (8003e20 <HAL_DMA_Start_IT+0x480>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d063      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a7d      	ldr	r2, [pc, #500]	; (8003e24 <HAL_DMA_Start_IT+0x484>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d05e      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7c      	ldr	r2, [pc, #496]	; (8003e28 <HAL_DMA_Start_IT+0x488>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d059      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7a      	ldr	r2, [pc, #488]	; (8003e2c <HAL_DMA_Start_IT+0x48c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d054      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a79      	ldr	r2, [pc, #484]	; (8003e30 <HAL_DMA_Start_IT+0x490>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d04f      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a77      	ldr	r2, [pc, #476]	; (8003e34 <HAL_DMA_Start_IT+0x494>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d04a      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a76      	ldr	r2, [pc, #472]	; (8003e38 <HAL_DMA_Start_IT+0x498>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d045      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a74      	ldr	r2, [pc, #464]	; (8003e3c <HAL_DMA_Start_IT+0x49c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d040      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_DMA_Start_IT+0x4a0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d03b      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a71      	ldr	r2, [pc, #452]	; (8003e44 <HAL_DMA_Start_IT+0x4a4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d036      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a70      	ldr	r2, [pc, #448]	; (8003e48 <HAL_DMA_Start_IT+0x4a8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d031      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_DMA_Start_IT+0x4ac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02c      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <HAL_DMA_Start_IT+0x4b0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d027      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6b      	ldr	r2, [pc, #428]	; (8003e54 <HAL_DMA_Start_IT+0x4b4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <HAL_DMA_Start_IT+0x4b8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a68      	ldr	r2, [pc, #416]	; (8003e5c <HAL_DMA_Start_IT+0x4bc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a67      	ldr	r2, [pc, #412]	; (8003e60 <HAL_DMA_Start_IT+0x4c0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <HAL_DMA_Start_IT+0x4c4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a64      	ldr	r2, [pc, #400]	; (8003e68 <HAL_DMA_Start_IT+0x4c8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a62      	ldr	r2, [pc, #392]	; (8003e6c <HAL_DMA_Start_IT+0x4cc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x350>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a61      	ldr	r2, [pc, #388]	; (8003e70 <HAL_DMA_Start_IT+0x4d0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Start_IT+0x354>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_Start_IT+0x356>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01a      	beq.n	8003d30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a37      	ldr	r2, [pc, #220]	; (8003e14 <HAL_DMA_Start_IT+0x474>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d04a      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <HAL_DMA_Start_IT+0x478>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d045      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <HAL_DMA_Start_IT+0x47c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d040      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <HAL_DMA_Start_IT+0x480>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d03b      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a31      	ldr	r2, [pc, #196]	; (8003e24 <HAL_DMA_Start_IT+0x484>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d036      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <HAL_DMA_Start_IT+0x488>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d031      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <HAL_DMA_Start_IT+0x48c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02c      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <HAL_DMA_Start_IT+0x490>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d027      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_DMA_Start_IT+0x494>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <HAL_DMA_Start_IT+0x498>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d01d      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_DMA_Start_IT+0x49c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <HAL_DMA_Start_IT+0x4a0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <HAL_DMA_Start_IT+0x4a4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <HAL_DMA_Start_IT+0x4a8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_DMA_Start_IT+0x4ac>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_DMA_Start_IT+0x430>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <HAL_DMA_Start_IT+0x4b0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d108      	bne.n	8003de2 <HAL_DMA_Start_IT+0x442>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e012      	b.n	8003e08 <HAL_DMA_Start_IT+0x468>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e009      	b.n	8003e08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494

08003e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e205      	b.n	8004292 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e1fa      	b.n	8004292 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a8c      	ldr	r2, [pc, #560]	; (80040d4 <HAL_DMA_Abort_IT+0x260>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a8b      	ldr	r2, [pc, #556]	; (80040d8 <HAL_DMA_Abort_IT+0x264>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a89      	ldr	r2, [pc, #548]	; (80040dc <HAL_DMA_Abort_IT+0x268>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a88      	ldr	r2, [pc, #544]	; (80040e0 <HAL_DMA_Abort_IT+0x26c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a86      	ldr	r2, [pc, #536]	; (80040e4 <HAL_DMA_Abort_IT+0x270>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a85      	ldr	r2, [pc, #532]	; (80040e8 <HAL_DMA_Abort_IT+0x274>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a83      	ldr	r2, [pc, #524]	; (80040ec <HAL_DMA_Abort_IT+0x278>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a82      	ldr	r2, [pc, #520]	; (80040f0 <HAL_DMA_Abort_IT+0x27c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a80      	ldr	r2, [pc, #512]	; (80040f4 <HAL_DMA_Abort_IT+0x280>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7f      	ldr	r2, [pc, #508]	; (80040f8 <HAL_DMA_Abort_IT+0x284>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7d      	ldr	r2, [pc, #500]	; (80040fc <HAL_DMA_Abort_IT+0x288>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7c      	ldr	r2, [pc, #496]	; (8004100 <HAL_DMA_Abort_IT+0x28c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7a      	ldr	r2, [pc, #488]	; (8004104 <HAL_DMA_Abort_IT+0x290>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a79      	ldr	r2, [pc, #484]	; (8004108 <HAL_DMA_Abort_IT+0x294>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a77      	ldr	r2, [pc, #476]	; (800410c <HAL_DMA_Abort_IT+0x298>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a76      	ldr	r2, [pc, #472]	; (8004110 <HAL_DMA_Abort_IT+0x29c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Abort_IT+0xcc>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_Abort_IT+0xce>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d065      	beq.n	8004012 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a60      	ldr	r2, [pc, #384]	; (80040d4 <HAL_DMA_Abort_IT+0x260>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04a      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a5e      	ldr	r2, [pc, #376]	; (80040d8 <HAL_DMA_Abort_IT+0x264>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d045      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_DMA_Abort_IT+0x268>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5b      	ldr	r2, [pc, #364]	; (80040e0 <HAL_DMA_Abort_IT+0x26c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d03b      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_DMA_Abort_IT+0x270>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d036      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_DMA_Abort_IT+0x274>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d031      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a57      	ldr	r2, [pc, #348]	; (80040ec <HAL_DMA_Abort_IT+0x278>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d02c      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a55      	ldr	r2, [pc, #340]	; (80040f0 <HAL_DMA_Abort_IT+0x27c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a54      	ldr	r2, [pc, #336]	; (80040f4 <HAL_DMA_Abort_IT+0x280>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_DMA_Abort_IT+0x284>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a51      	ldr	r2, [pc, #324]	; (80040fc <HAL_DMA_Abort_IT+0x288>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	; (8004100 <HAL_DMA_Abort_IT+0x28c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_DMA_Abort_IT+0x290>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4c      	ldr	r2, [pc, #304]	; (8004108 <HAL_DMA_Abort_IT+0x294>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4b      	ldr	r2, [pc, #300]	; (800410c <HAL_DMA_Abort_IT+0x298>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_DMA_Abort_IT+0x17a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a49      	ldr	r2, [pc, #292]	; (8004110 <HAL_DMA_Abort_IT+0x29c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d108      	bne.n	8004000 <HAL_DMA_Abort_IT+0x18c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e147      	b.n	8004290 <HAL_DMA_Abort_IT+0x41c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e13e      	b.n	8004290 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 020e 	bic.w	r2, r2, #14
 8004020:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <HAL_DMA_Abort_IT+0x260>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04a      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <HAL_DMA_Abort_IT+0x264>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d045      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a28      	ldr	r2, [pc, #160]	; (80040dc <HAL_DMA_Abort_IT+0x268>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d040      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_DMA_Abort_IT+0x26c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a25      	ldr	r2, [pc, #148]	; (80040e4 <HAL_DMA_Abort_IT+0x270>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d036      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <HAL_DMA_Abort_IT+0x274>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_DMA_Abort_IT+0x278>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d02c      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_DMA_Abort_IT+0x27c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <HAL_DMA_Abort_IT+0x280>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <HAL_DMA_Abort_IT+0x284>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <HAL_DMA_Abort_IT+0x288>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <HAL_DMA_Abort_IT+0x28c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_DMA_Abort_IT+0x290>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_DMA_Abort_IT+0x294>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <HAL_DMA_Abort_IT+0x298>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x24e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <HAL_DMA_Abort_IT+0x29c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d128      	bne.n	8004114 <HAL_DMA_Abort_IT+0x2a0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e027      	b.n	8004124 <HAL_DMA_Abort_IT+0x2b0>
 80040d4:	40020010 	.word	0x40020010
 80040d8:	40020028 	.word	0x40020028
 80040dc:	40020040 	.word	0x40020040
 80040e0:	40020058 	.word	0x40020058
 80040e4:	40020070 	.word	0x40020070
 80040e8:	40020088 	.word	0x40020088
 80040ec:	400200a0 	.word	0x400200a0
 80040f0:	400200b8 	.word	0x400200b8
 80040f4:	40020410 	.word	0x40020410
 80040f8:	40020428 	.word	0x40020428
 80040fc:	40020440 	.word	0x40020440
 8004100:	40020458 	.word	0x40020458
 8004104:	40020470 	.word	0x40020470
 8004108:	40020488 	.word	0x40020488
 800410c:	400204a0 	.word	0x400204a0
 8004110:	400204b8 	.word	0x400204b8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5c      	ldr	r2, [pc, #368]	; (800429c <HAL_DMA_Abort_IT+0x428>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d072      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_DMA_Abort_IT+0x42c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d06d      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a59      	ldr	r2, [pc, #356]	; (80042a4 <HAL_DMA_Abort_IT+0x430>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d068      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_DMA_Abort_IT+0x434>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d063      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_DMA_Abort_IT+0x438>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d05e      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a55      	ldr	r2, [pc, #340]	; (80042b0 <HAL_DMA_Abort_IT+0x43c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d059      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <HAL_DMA_Abort_IT+0x440>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d054      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_DMA_Abort_IT+0x444>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d04f      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a50      	ldr	r2, [pc, #320]	; (80042bc <HAL_DMA_Abort_IT+0x448>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04a      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a4f      	ldr	r2, [pc, #316]	; (80042c0 <HAL_DMA_Abort_IT+0x44c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d045      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a4d      	ldr	r2, [pc, #308]	; (80042c4 <HAL_DMA_Abort_IT+0x450>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d040      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4c      	ldr	r2, [pc, #304]	; (80042c8 <HAL_DMA_Abort_IT+0x454>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d03b      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <HAL_DMA_Abort_IT+0x458>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d036      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a49      	ldr	r2, [pc, #292]	; (80042d0 <HAL_DMA_Abort_IT+0x45c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d031      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a47      	ldr	r2, [pc, #284]	; (80042d4 <HAL_DMA_Abort_IT+0x460>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02c      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a46      	ldr	r2, [pc, #280]	; (80042d8 <HAL_DMA_Abort_IT+0x464>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d027      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a44      	ldr	r2, [pc, #272]	; (80042dc <HAL_DMA_Abort_IT+0x468>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a43      	ldr	r2, [pc, #268]	; (80042e0 <HAL_DMA_Abort_IT+0x46c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01d      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a41      	ldr	r2, [pc, #260]	; (80042e4 <HAL_DMA_Abort_IT+0x470>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <HAL_DMA_Abort_IT+0x474>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3e      	ldr	r2, [pc, #248]	; (80042ec <HAL_DMA_Abort_IT+0x478>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <HAL_DMA_Abort_IT+0x47c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3b      	ldr	r2, [pc, #236]	; (80042f4 <HAL_DMA_Abort_IT+0x480>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_DMA_Abort_IT+0x3a0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3a      	ldr	r2, [pc, #232]	; (80042f8 <HAL_DMA_Abort_IT+0x484>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Abort_IT+0x3a4>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_DMA_Abort_IT+0x3a6>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d028      	beq.n	8004270 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800424c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004264:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800426e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	58025408 	.word	0x58025408
 80042e0:	5802541c 	.word	0x5802541c
 80042e4:	58025430 	.word	0x58025430
 80042e8:	58025444 	.word	0x58025444
 80042ec:	58025458 	.word	0x58025458
 80042f0:	5802546c 	.word	0x5802546c
 80042f4:	58025480 	.word	0x58025480
 80042f8:	58025494 	.word	0x58025494

080042fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004308:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <HAL_DMA_IRQHandler+0x1ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_DMA_IRQHandler+0x1b0>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a5f      	ldr	r2, [pc, #380]	; (80044b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d04a      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5d      	ldr	r2, [pc, #372]	; (80044b4 <HAL_DMA_IRQHandler+0x1b8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d045      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5c      	ldr	r2, [pc, #368]	; (80044b8 <HAL_DMA_IRQHandler+0x1bc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d040      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5a      	ldr	r2, [pc, #360]	; (80044bc <HAL_DMA_IRQHandler+0x1c0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d03b      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a59      	ldr	r2, [pc, #356]	; (80044c0 <HAL_DMA_IRQHandler+0x1c4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d036      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a57      	ldr	r2, [pc, #348]	; (80044c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d031      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a56      	ldr	r2, [pc, #344]	; (80044c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d02c      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a54      	ldr	r2, [pc, #336]	; (80044cc <HAL_DMA_IRQHandler+0x1d0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d027      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a53      	ldr	r2, [pc, #332]	; (80044d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a51      	ldr	r2, [pc, #324]	; (80044d4 <HAL_DMA_IRQHandler+0x1d8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01d      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a50      	ldr	r2, [pc, #320]	; (80044d8 <HAL_DMA_IRQHandler+0x1dc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a4e      	ldr	r2, [pc, #312]	; (80044dc <HAL_DMA_IRQHandler+0x1e0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_DMA_IRQHandler+0x1e4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_DMA_IRQHandler+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_DMA_IRQHandler+0x1ec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a48      	ldr	r2, [pc, #288]	; (80044ec <HAL_DMA_IRQHandler+0x1f0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_DMA_IRQHandler+0xd6>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 842b 	beq.w	8004c30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2208      	movs	r2, #8
 80043e4:	409a      	lsls	r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80a2 	beq.w	8004534 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2e      	ldr	r2, [pc, #184]	; (80044b0 <HAL_DMA_IRQHandler+0x1b4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <HAL_DMA_IRQHandler+0x1b8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <HAL_DMA_IRQHandler+0x1bc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <HAL_DMA_IRQHandler+0x1c0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a28      	ldr	r2, [pc, #160]	; (80044c0 <HAL_DMA_IRQHandler+0x1c4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a24      	ldr	r2, [pc, #144]	; (80044cc <HAL_DMA_IRQHandler+0x1d0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <HAL_DMA_IRQHandler+0x1d8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <HAL_DMA_IRQHandler+0x1dc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <HAL_DMA_IRQHandler+0x1e0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <HAL_DMA_IRQHandler+0x1e4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_DMA_IRQHandler+0x1e8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_DMA_IRQHandler+0x1ec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_DMA_IRQHandler+0x1f0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d12f      	bne.n	80044f0 <HAL_DMA_IRQHandler+0x1f4>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	bf14      	ite	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	2300      	moveq	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	e02e      	b.n	8004504 <HAL_DMA_IRQHandler+0x208>
 80044a6:	bf00      	nop
 80044a8:	24000468 	.word	0x24000468
 80044ac:	1b4e81b5 	.word	0x1b4e81b5
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40020028 	.word	0x40020028
 80044b8:	40020040 	.word	0x40020040
 80044bc:	40020058 	.word	0x40020058
 80044c0:	40020070 	.word	0x40020070
 80044c4:	40020088 	.word	0x40020088
 80044c8:	400200a0 	.word	0x400200a0
 80044cc:	400200b8 	.word	0x400200b8
 80044d0:	40020410 	.word	0x40020410
 80044d4:	40020428 	.word	0x40020428
 80044d8:	40020440 	.word	0x40020440
 80044dc:	40020458 	.word	0x40020458
 80044e0:	40020470 	.word	0x40020470
 80044e4:	40020488 	.word	0x40020488
 80044e8:	400204a0 	.word	0x400204a0
 80044ec:	400204b8 	.word	0x400204b8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d015      	beq.n	8004534 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2208      	movs	r2, #8
 8004522:	409a      	lsls	r2, r3
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	fa22 f303 	lsr.w	r3, r2, r3
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d06e      	beq.n	8004628 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a69      	ldr	r2, [pc, #420]	; (80046f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_DMA_IRQHandler+0x3fc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a66      	ldr	r2, [pc, #408]	; (80046fc <HAL_DMA_IRQHandler+0x400>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a64      	ldr	r2, [pc, #400]	; (8004700 <HAL_DMA_IRQHandler+0x404>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a63      	ldr	r2, [pc, #396]	; (8004704 <HAL_DMA_IRQHandler+0x408>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a61      	ldr	r2, [pc, #388]	; (8004708 <HAL_DMA_IRQHandler+0x40c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a60      	ldr	r2, [pc, #384]	; (800470c <HAL_DMA_IRQHandler+0x410>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a5e      	ldr	r2, [pc, #376]	; (8004710 <HAL_DMA_IRQHandler+0x414>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <HAL_DMA_IRQHandler+0x418>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5b      	ldr	r2, [pc, #364]	; (8004718 <HAL_DMA_IRQHandler+0x41c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5a      	ldr	r2, [pc, #360]	; (800471c <HAL_DMA_IRQHandler+0x420>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_DMA_IRQHandler+0x424>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_DMA_IRQHandler+0x428>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a55      	ldr	r2, [pc, #340]	; (8004728 <HAL_DMA_IRQHandler+0x42c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_DMA_IRQHandler+0x430>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_DMA_IRQHandler+0x434>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10a      	bne.n	8004600 <HAL_DMA_IRQHandler+0x304>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e003      	b.n	8004608 <HAL_DMA_IRQHandler+0x30c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2201      	movs	r2, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f043 0202 	orr.w	r2, r3, #2
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2204      	movs	r2, #4
 8004632:	409a      	lsls	r2, r3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 808f 	beq.w	800475c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a2c      	ldr	r2, [pc, #176]	; (80046f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d04a      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_DMA_IRQHandler+0x3fc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d045      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <HAL_DMA_IRQHandler+0x400>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d040      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <HAL_DMA_IRQHandler+0x404>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d03b      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a26      	ldr	r2, [pc, #152]	; (8004704 <HAL_DMA_IRQHandler+0x408>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d036      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a24      	ldr	r2, [pc, #144]	; (8004708 <HAL_DMA_IRQHandler+0x40c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <HAL_DMA_IRQHandler+0x410>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d02c      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a21      	ldr	r2, [pc, #132]	; (8004710 <HAL_DMA_IRQHandler+0x414>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a20      	ldr	r2, [pc, #128]	; (8004714 <HAL_DMA_IRQHandler+0x418>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <HAL_DMA_IRQHandler+0x41c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_DMA_IRQHandler+0x420>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_DMA_IRQHandler+0x424>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <HAL_DMA_IRQHandler+0x428>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_DMA_IRQHandler+0x42c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_DMA_IRQHandler+0x430>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_DMA_IRQHandler+0x434>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d12a      	bne.n	8004734 <HAL_DMA_IRQHandler+0x438>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e023      	b.n	800473c <HAL_DMA_IRQHandler+0x440>
 80046f4:	40020010 	.word	0x40020010
 80046f8:	40020028 	.word	0x40020028
 80046fc:	40020040 	.word	0x40020040
 8004700:	40020058 	.word	0x40020058
 8004704:	40020070 	.word	0x40020070
 8004708:	40020088 	.word	0x40020088
 800470c:	400200a0 	.word	0x400200a0
 8004710:	400200b8 	.word	0x400200b8
 8004714:	40020410 	.word	0x40020410
 8004718:	40020428 	.word	0x40020428
 800471c:	40020440 	.word	0x40020440
 8004720:	40020458 	.word	0x40020458
 8004724:	40020470 	.word	0x40020470
 8004728:	40020488 	.word	0x40020488
 800472c:	400204a0 	.word	0x400204a0
 8004730:	400204b8 	.word	0x400204b8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2204      	movs	r2, #4
 800474a:	409a      	lsls	r2, r3
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2210      	movs	r2, #16
 8004766:	409a      	lsls	r2, r3
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a6 	beq.w	80048be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a85      	ldr	r2, [pc, #532]	; (800498c <HAL_DMA_IRQHandler+0x690>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d04a      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a83      	ldr	r2, [pc, #524]	; (8004990 <HAL_DMA_IRQHandler+0x694>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d045      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a82      	ldr	r2, [pc, #520]	; (8004994 <HAL_DMA_IRQHandler+0x698>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d040      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a80      	ldr	r2, [pc, #512]	; (8004998 <HAL_DMA_IRQHandler+0x69c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d03b      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a7f      	ldr	r2, [pc, #508]	; (800499c <HAL_DMA_IRQHandler+0x6a0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d036      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7d      	ldr	r2, [pc, #500]	; (80049a0 <HAL_DMA_IRQHandler+0x6a4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d031      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <HAL_DMA_IRQHandler+0x6a8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d02c      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <HAL_DMA_IRQHandler+0x6ac>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d027      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_DMA_IRQHandler+0x6b0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a77      	ldr	r2, [pc, #476]	; (80049b0 <HAL_DMA_IRQHandler+0x6b4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01d      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a76      	ldr	r2, [pc, #472]	; (80049b4 <HAL_DMA_IRQHandler+0x6b8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a74      	ldr	r2, [pc, #464]	; (80049b8 <HAL_DMA_IRQHandler+0x6bc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a73      	ldr	r2, [pc, #460]	; (80049bc <HAL_DMA_IRQHandler+0x6c0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a71      	ldr	r2, [pc, #452]	; (80049c0 <HAL_DMA_IRQHandler+0x6c4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a70      	ldr	r2, [pc, #448]	; (80049c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_DMA_IRQHandler+0x6cc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10a      	bne.n	8004828 <HAL_DMA_IRQHandler+0x52c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e009      	b.n	800483c <HAL_DMA_IRQHandler+0x540>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03e      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2210      	movs	r2, #16
 800484a:	409a      	lsls	r2, r3
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d108      	bne.n	800487e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d024      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e01f      	b.n	80048be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01b      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
 800488e:	e016      	b.n	80048be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0208 	bic.w	r2, r2, #8
 80048ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2220      	movs	r2, #32
 80048c8:	409a      	lsls	r2, r3
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8110 	beq.w	8004af4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	; (800498c <HAL_DMA_IRQHandler+0x690>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d04a      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_DMA_IRQHandler+0x694>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d045      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a29      	ldr	r2, [pc, #164]	; (8004994 <HAL_DMA_IRQHandler+0x698>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d040      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a28      	ldr	r2, [pc, #160]	; (8004998 <HAL_DMA_IRQHandler+0x69c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d03b      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a26      	ldr	r2, [pc, #152]	; (800499c <HAL_DMA_IRQHandler+0x6a0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d036      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_DMA_IRQHandler+0x6a4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d031      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_DMA_IRQHandler+0x6a8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d02c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_DMA_IRQHandler+0x6ac>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d027      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_DMA_IRQHandler+0x6b0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_DMA_IRQHandler+0x6b4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d01d      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_DMA_IRQHandler+0x6b8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_DMA_IRQHandler+0x6bc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_DMA_IRQHandler+0x6c0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_DMA_IRQHandler+0x6c4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_DMA_IRQHandler+0x6cc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d12b      	bne.n	80049cc <HAL_DMA_IRQHandler+0x6d0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e02a      	b.n	80049e0 <HAL_DMA_IRQHandler+0x6e4>
 800498a:	bf00      	nop
 800498c:	40020010 	.word	0x40020010
 8004990:	40020028 	.word	0x40020028
 8004994:	40020040 	.word	0x40020040
 8004998:	40020058 	.word	0x40020058
 800499c:	40020070 	.word	0x40020070
 80049a0:	40020088 	.word	0x40020088
 80049a4:	400200a0 	.word	0x400200a0
 80049a8:	400200b8 	.word	0x400200b8
 80049ac:	40020410 	.word	0x40020410
 80049b0:	40020428 	.word	0x40020428
 80049b4:	40020440 	.word	0x40020440
 80049b8:	40020458 	.word	0x40020458
 80049bc:	40020470 	.word	0x40020470
 80049c0:	40020488 	.word	0x40020488
 80049c4:	400204a0 	.word	0x400204a0
 80049c8:	400204b8 	.word	0x400204b8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8087 	beq.w	8004af4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2220      	movs	r2, #32
 80049f0:	409a      	lsls	r2, r3
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d139      	bne.n	8004a76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0216 	bic.w	r2, r2, #22
 8004a10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <HAL_DMA_IRQHandler+0x736>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0208 	bic.w	r2, r2, #8
 8004a40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	223f      	movs	r2, #63	; 0x3f
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 834a 	beq.w	8005100 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
          }
          return;
 8004a74:	e344      	b.n	8005100 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02c      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	e027      	b.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e01e      	b.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0210 	bic.w	r2, r2, #16
 8004ad2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8306 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8088 	beq.w	8004c1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a7a      	ldr	r2, [pc, #488]	; (8004d04 <HAL_DMA_IRQHandler+0xa08>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04a      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a79      	ldr	r2, [pc, #484]	; (8004d08 <HAL_DMA_IRQHandler+0xa0c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d045      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a77      	ldr	r2, [pc, #476]	; (8004d0c <HAL_DMA_IRQHandler+0xa10>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d040      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a76      	ldr	r2, [pc, #472]	; (8004d10 <HAL_DMA_IRQHandler+0xa14>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d03b      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a74      	ldr	r2, [pc, #464]	; (8004d14 <HAL_DMA_IRQHandler+0xa18>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d036      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a73      	ldr	r2, [pc, #460]	; (8004d18 <HAL_DMA_IRQHandler+0xa1c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d031      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a71      	ldr	r2, [pc, #452]	; (8004d1c <HAL_DMA_IRQHandler+0xa20>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d02c      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a70      	ldr	r2, [pc, #448]	; (8004d20 <HAL_DMA_IRQHandler+0xa24>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d027      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a6e      	ldr	r2, [pc, #440]	; (8004d24 <HAL_DMA_IRQHandler+0xa28>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6d      	ldr	r2, [pc, #436]	; (8004d28 <HAL_DMA_IRQHandler+0xa2c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01d      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6b      	ldr	r2, [pc, #428]	; (8004d2c <HAL_DMA_IRQHandler+0xa30>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6a      	ldr	r2, [pc, #424]	; (8004d30 <HAL_DMA_IRQHandler+0xa34>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a68      	ldr	r2, [pc, #416]	; (8004d34 <HAL_DMA_IRQHandler+0xa38>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a67      	ldr	r2, [pc, #412]	; (8004d38 <HAL_DMA_IRQHandler+0xa3c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <HAL_DMA_IRQHandler+0xa40>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a64      	ldr	r2, [pc, #400]	; (8004d40 <HAL_DMA_IRQHandler+0xa44>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0x8ca>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e007      	b.n	8004bd6 <HAL_DMA_IRQHandler+0x8da>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d307      	bcc.n	8004bf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f2      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0x8da>
 8004bf0:	e000      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bf2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c0a:	e003      	b.n	8004c14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8272 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
 8004c2e:	e26c      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a43      	ldr	r2, [pc, #268]	; (8004d44 <HAL_DMA_IRQHandler+0xa48>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a42      	ldr	r2, [pc, #264]	; (8004d48 <HAL_DMA_IRQHandler+0xa4c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a40      	ldr	r2, [pc, #256]	; (8004d4c <HAL_DMA_IRQHandler+0xa50>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3f      	ldr	r2, [pc, #252]	; (8004d50 <HAL_DMA_IRQHandler+0xa54>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3d      	ldr	r2, [pc, #244]	; (8004d54 <HAL_DMA_IRQHandler+0xa58>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3c      	ldr	r2, [pc, #240]	; (8004d58 <HAL_DMA_IRQHandler+0xa5c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3a      	ldr	r2, [pc, #232]	; (8004d5c <HAL_DMA_IRQHandler+0xa60>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a39      	ldr	r2, [pc, #228]	; (8004d60 <HAL_DMA_IRQHandler+0xa64>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_DMA_IRQHandler+0x988>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_IRQHandler+0x98a>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 823f 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80cd 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xb48>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80c7 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d049      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8210 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cec:	e20a      	b.n	8005104 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8206 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d00:	e200      	b.n	8005104 <HAL_DMA_IRQHandler+0xe08>
 8004d02:	bf00      	nop
 8004d04:	40020010 	.word	0x40020010
 8004d08:	40020028 	.word	0x40020028
 8004d0c:	40020040 	.word	0x40020040
 8004d10:	40020058 	.word	0x40020058
 8004d14:	40020070 	.word	0x40020070
 8004d18:	40020088 	.word	0x40020088
 8004d1c:	400200a0 	.word	0x400200a0
 8004d20:	400200b8 	.word	0x400200b8
 8004d24:	40020410 	.word	0x40020410
 8004d28:	40020428 	.word	0x40020428
 8004d2c:	40020440 	.word	0x40020440
 8004d30:	40020458 	.word	0x40020458
 8004d34:	40020470 	.word	0x40020470
 8004d38:	40020488 	.word	0x40020488
 8004d3c:	400204a0 	.word	0x400204a0
 8004d40:	400204b8 	.word	0x400204b8
 8004d44:	58025408 	.word	0x58025408
 8004d48:	5802541c 	.word	0x5802541c
 8004d4c:	58025430 	.word	0x58025430
 8004d50:	58025444 	.word	0x58025444
 8004d54:	58025458 	.word	0x58025458
 8004d58:	5802546c 	.word	0x5802546c
 8004d5c:	58025480 	.word	0x58025480
 8004d60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d160      	bne.n	8004e30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a8c      	ldr	r2, [pc, #560]	; (8004fa4 <HAL_DMA_IRQHandler+0xca8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04a      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a8a      	ldr	r2, [pc, #552]	; (8004fa8 <HAL_DMA_IRQHandler+0xcac>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d045      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a89      	ldr	r2, [pc, #548]	; (8004fac <HAL_DMA_IRQHandler+0xcb0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a87      	ldr	r2, [pc, #540]	; (8004fb0 <HAL_DMA_IRQHandler+0xcb4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a86      	ldr	r2, [pc, #536]	; (8004fb4 <HAL_DMA_IRQHandler+0xcb8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a84      	ldr	r2, [pc, #528]	; (8004fb8 <HAL_DMA_IRQHandler+0xcbc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a83      	ldr	r2, [pc, #524]	; (8004fbc <HAL_DMA_IRQHandler+0xcc0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a81      	ldr	r2, [pc, #516]	; (8004fc0 <HAL_DMA_IRQHandler+0xcc4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a80      	ldr	r2, [pc, #512]	; (8004fc4 <HAL_DMA_IRQHandler+0xcc8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7e      	ldr	r2, [pc, #504]	; (8004fc8 <HAL_DMA_IRQHandler+0xccc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7d      	ldr	r2, [pc, #500]	; (8004fcc <HAL_DMA_IRQHandler+0xcd0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7b      	ldr	r2, [pc, #492]	; (8004fd0 <HAL_DMA_IRQHandler+0xcd4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7a      	ldr	r2, [pc, #488]	; (8004fd4 <HAL_DMA_IRQHandler+0xcd8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a78      	ldr	r2, [pc, #480]	; (8004fd8 <HAL_DMA_IRQHandler+0xcdc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a77      	ldr	r2, [pc, #476]	; (8004fdc <HAL_DMA_IRQHandler+0xce0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a75      	ldr	r2, [pc, #468]	; (8004fe0 <HAL_DMA_IRQHandler+0xce4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <HAL_DMA_IRQHandler+0xb24>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0208 	bic.w	r2, r2, #8
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e007      	b.n	8004e30 <HAL_DMA_IRQHandler+0xb34>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8165 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e42:	e15f      	b.n	8005104 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80c5 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xce8>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80bf 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2202      	movs	r2, #2
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 813a 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9c:	e134      	b.n	8005108 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8130 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	e12a      	b.n	8005108 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d168      	bne.n	8004f8e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a38      	ldr	r2, [pc, #224]	; (8004fa4 <HAL_DMA_IRQHandler+0xca8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04a      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a37      	ldr	r2, [pc, #220]	; (8004fa8 <HAL_DMA_IRQHandler+0xcac>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d045      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a35      	ldr	r2, [pc, #212]	; (8004fac <HAL_DMA_IRQHandler+0xcb0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d040      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a34      	ldr	r2, [pc, #208]	; (8004fb0 <HAL_DMA_IRQHandler+0xcb4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d03b      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a32      	ldr	r2, [pc, #200]	; (8004fb4 <HAL_DMA_IRQHandler+0xcb8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d036      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a31      	ldr	r2, [pc, #196]	; (8004fb8 <HAL_DMA_IRQHandler+0xcbc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d031      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <HAL_DMA_IRQHandler+0xcc0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02c      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2e      	ldr	r2, [pc, #184]	; (8004fc0 <HAL_DMA_IRQHandler+0xcc4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d027      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <HAL_DMA_IRQHandler+0xcc8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_DMA_IRQHandler+0xccc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d01d      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_DMA_IRQHandler+0xcd0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_DMA_IRQHandler+0xcd4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <HAL_DMA_IRQHandler+0xcd8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <HAL_DMA_IRQHandler+0xcdc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <HAL_DMA_IRQHandler+0xce0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_IRQHandler+0xc60>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <HAL_DMA_IRQHandler+0xce4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d108      	bne.n	8004f6e <HAL_DMA_IRQHandler+0xc72>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0214 	bic.w	r2, r2, #20
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e007      	b.n	8004f7e <HAL_DMA_IRQHandler+0xc82>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 020a 	bic.w	r2, r2, #10
 8004f7c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80b8 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa0:	e0b2      	b.n	8005108 <HAL_DMA_IRQHandler+0xe0c>
 8004fa2:	bf00      	nop
 8004fa4:	40020010 	.word	0x40020010
 8004fa8:	40020028 	.word	0x40020028
 8004fac:	40020040 	.word	0x40020040
 8004fb0:	40020058 	.word	0x40020058
 8004fb4:	40020070 	.word	0x40020070
 8004fb8:	40020088 	.word	0x40020088
 8004fbc:	400200a0 	.word	0x400200a0
 8004fc0:	400200b8 	.word	0x400200b8
 8004fc4:	40020410 	.word	0x40020410
 8004fc8:	40020428 	.word	0x40020428
 8004fcc:	40020440 	.word	0x40020440
 8004fd0:	40020458 	.word	0x40020458
 8004fd4:	40020470 	.word	0x40020470
 8004fd8:	40020488 	.word	0x40020488
 8004fdc:	400204a0 	.word	0x400204a0
 8004fe0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2208      	movs	r2, #8
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8088 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8082 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a41      	ldr	r2, [pc, #260]	; (8005110 <HAL_DMA_IRQHandler+0xe14>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d04a      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a3f      	ldr	r2, [pc, #252]	; (8005114 <HAL_DMA_IRQHandler+0xe18>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d045      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a3e      	ldr	r2, [pc, #248]	; (8005118 <HAL_DMA_IRQHandler+0xe1c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d040      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3c      	ldr	r2, [pc, #240]	; (800511c <HAL_DMA_IRQHandler+0xe20>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d03b      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <HAL_DMA_IRQHandler+0xe24>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d036      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a39      	ldr	r2, [pc, #228]	; (8005124 <HAL_DMA_IRQHandler+0xe28>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d031      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <HAL_DMA_IRQHandler+0xe2c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d02c      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a36      	ldr	r2, [pc, #216]	; (800512c <HAL_DMA_IRQHandler+0xe30>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d027      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a35      	ldr	r2, [pc, #212]	; (8005130 <HAL_DMA_IRQHandler+0xe34>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a33      	ldr	r2, [pc, #204]	; (8005134 <HAL_DMA_IRQHandler+0xe38>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01d      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a32      	ldr	r2, [pc, #200]	; (8005138 <HAL_DMA_IRQHandler+0xe3c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a30      	ldr	r2, [pc, #192]	; (800513c <HAL_DMA_IRQHandler+0xe40>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2f      	ldr	r2, [pc, #188]	; (8005140 <HAL_DMA_IRQHandler+0xe44>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <HAL_DMA_IRQHandler+0xe48>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <HAL_DMA_IRQHandler+0xe4c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	; (800514c <HAL_DMA_IRQHandler+0xe50>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <HAL_DMA_IRQHandler+0xdbc>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 021c 	bic.w	r2, r2, #28
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e007      	b.n	80050c8 <HAL_DMA_IRQHandler+0xdcc>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2201      	movs	r2, #1
 80050d2:	409a      	lsls	r2, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	e004      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005100:	bf00      	nop
 8005102:	e002      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005104:	bf00      	nop
 8005106:	e000      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005108:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40020010 	.word	0x40020010
 8005114:	40020028 	.word	0x40020028
 8005118:	40020040 	.word	0x40020040
 800511c:	40020058 	.word	0x40020058
 8005120:	40020070 	.word	0x40020070
 8005124:	40020088 	.word	0x40020088
 8005128:	400200a0 	.word	0x400200a0
 800512c:	400200b8 	.word	0x400200b8
 8005130:	40020410 	.word	0x40020410
 8005134:	40020428 	.word	0x40020428
 8005138:	40020440 	.word	0x40020440
 800513c:	40020458 	.word	0x40020458
 8005140:	40020470 	.word	0x40020470
 8005144:	40020488 	.word	0x40020488
 8005148:	400204a0 	.word	0x400204a0
 800514c:	400204b8 	.word	0x400204b8

08005150 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	460b      	mov	r3, r1
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e045      	b.n	80051f8 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_DMA_RegisterCallback+0x2a>
 8005176:	2302      	movs	r3, #2
 8005178:	e03e      	b.n	80051f8 <HAL_DMA_RegisterCallback+0xa8>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d12d      	bne.n	80051ea <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 800518e:	7afb      	ldrb	r3, [r7, #11]
 8005190:	2b05      	cmp	r3, #5
 8005192:	d827      	bhi.n	80051e4 <HAL_DMA_RegisterCallback+0x94>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_DMA_RegisterCallback+0x4c>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051b5 	.word	0x080051b5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80051ba:	e018      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051c2:	e014      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80051ca:	e010      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80051d2:	e00c      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80051da:	e008      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80051e2:	e004      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
      break;
 80051e8:	e001      	b.n	80051ee <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005212:	b2db      	uxtb	r3, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a84      	ldr	r2, [pc, #528]	; (8005468 <DMA_SetConfig+0x230>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d072      	beq.n	8005342 <DMA_SetConfig+0x10a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a82      	ldr	r2, [pc, #520]	; (800546c <DMA_SetConfig+0x234>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d06d      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a81      	ldr	r2, [pc, #516]	; (8005470 <DMA_SetConfig+0x238>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d068      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a7f      	ldr	r2, [pc, #508]	; (8005474 <DMA_SetConfig+0x23c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d063      	beq.n	8005342 <DMA_SetConfig+0x10a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a7e      	ldr	r2, [pc, #504]	; (8005478 <DMA_SetConfig+0x240>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d05e      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a7c      	ldr	r2, [pc, #496]	; (800547c <DMA_SetConfig+0x244>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d059      	beq.n	8005342 <DMA_SetConfig+0x10a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a7b      	ldr	r2, [pc, #492]	; (8005480 <DMA_SetConfig+0x248>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d054      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a79      	ldr	r2, [pc, #484]	; (8005484 <DMA_SetConfig+0x24c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04f      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a78      	ldr	r2, [pc, #480]	; (8005488 <DMA_SetConfig+0x250>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d04a      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a76      	ldr	r2, [pc, #472]	; (800548c <DMA_SetConfig+0x254>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d045      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a75      	ldr	r2, [pc, #468]	; (8005490 <DMA_SetConfig+0x258>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d040      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a73      	ldr	r2, [pc, #460]	; (8005494 <DMA_SetConfig+0x25c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d03b      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a72      	ldr	r2, [pc, #456]	; (8005498 <DMA_SetConfig+0x260>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d036      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a70      	ldr	r2, [pc, #448]	; (800549c <DMA_SetConfig+0x264>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d031      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a6f      	ldr	r2, [pc, #444]	; (80054a0 <DMA_SetConfig+0x268>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d02c      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a6d      	ldr	r2, [pc, #436]	; (80054a4 <DMA_SetConfig+0x26c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d027      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6c      	ldr	r2, [pc, #432]	; (80054a8 <DMA_SetConfig+0x270>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <DMA_SetConfig+0x10a>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6a      	ldr	r2, [pc, #424]	; (80054ac <DMA_SetConfig+0x274>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01d      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a69      	ldr	r2, [pc, #420]	; (80054b0 <DMA_SetConfig+0x278>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a67      	ldr	r2, [pc, #412]	; (80054b4 <DMA_SetConfig+0x27c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <DMA_SetConfig+0x10a>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a66      	ldr	r2, [pc, #408]	; (80054b8 <DMA_SetConfig+0x280>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a64      	ldr	r2, [pc, #400]	; (80054bc <DMA_SetConfig+0x284>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <DMA_SetConfig+0x10a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a63      	ldr	r2, [pc, #396]	; (80054c0 <DMA_SetConfig+0x288>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <DMA_SetConfig+0x10a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <DMA_SetConfig+0x28c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <DMA_SetConfig+0x10e>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <DMA_SetConfig+0x110>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005354:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005366:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a3e      	ldr	r2, [pc, #248]	; (8005468 <DMA_SetConfig+0x230>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d04a      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a3d      	ldr	r2, [pc, #244]	; (800546c <DMA_SetConfig+0x234>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d045      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a3b      	ldr	r2, [pc, #236]	; (8005470 <DMA_SetConfig+0x238>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d040      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a3a      	ldr	r2, [pc, #232]	; (8005474 <DMA_SetConfig+0x23c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d03b      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a38      	ldr	r2, [pc, #224]	; (8005478 <DMA_SetConfig+0x240>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d036      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a37      	ldr	r2, [pc, #220]	; (800547c <DMA_SetConfig+0x244>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d031      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a35      	ldr	r2, [pc, #212]	; (8005480 <DMA_SetConfig+0x248>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02c      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a34      	ldr	r2, [pc, #208]	; (8005484 <DMA_SetConfig+0x24c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d027      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a32      	ldr	r2, [pc, #200]	; (8005488 <DMA_SetConfig+0x250>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d022      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a31      	ldr	r2, [pc, #196]	; (800548c <DMA_SetConfig+0x254>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d01d      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <DMA_SetConfig+0x258>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d018      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2e      	ldr	r2, [pc, #184]	; (8005494 <DMA_SetConfig+0x25c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <DMA_SetConfig+0x260>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	; (800549c <DMA_SetConfig+0x264>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d009      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <DMA_SetConfig+0x268>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <DMA_SetConfig+0x1d0>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a28      	ldr	r2, [pc, #160]	; (80054a4 <DMA_SetConfig+0x26c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <DMA_SetConfig+0x1d4>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <DMA_SetConfig+0x1d6>
 800540c:	2300      	movs	r3, #0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d05a      	beq.n	80054c8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	223f      	movs	r2, #63	; 0x3f
 800541c:	409a      	lsls	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005430:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d108      	bne.n	8005454 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005452:	e087      	b.n	8005564 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	60da      	str	r2, [r3, #12]
}
 8005464:	e07e      	b.n	8005564 <DMA_SetConfig+0x32c>
 8005466:	bf00      	nop
 8005468:	40020010 	.word	0x40020010
 800546c:	40020028 	.word	0x40020028
 8005470:	40020040 	.word	0x40020040
 8005474:	40020058 	.word	0x40020058
 8005478:	40020070 	.word	0x40020070
 800547c:	40020088 	.word	0x40020088
 8005480:	400200a0 	.word	0x400200a0
 8005484:	400200b8 	.word	0x400200b8
 8005488:	40020410 	.word	0x40020410
 800548c:	40020428 	.word	0x40020428
 8005490:	40020440 	.word	0x40020440
 8005494:	40020458 	.word	0x40020458
 8005498:	40020470 	.word	0x40020470
 800549c:	40020488 	.word	0x40020488
 80054a0:	400204a0 	.word	0x400204a0
 80054a4:	400204b8 	.word	0x400204b8
 80054a8:	58025408 	.word	0x58025408
 80054ac:	5802541c 	.word	0x5802541c
 80054b0:	58025430 	.word	0x58025430
 80054b4:	58025444 	.word	0x58025444
 80054b8:	58025458 	.word	0x58025458
 80054bc:	5802546c 	.word	0x5802546c
 80054c0:	58025480 	.word	0x58025480
 80054c4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <DMA_SetConfig+0x338>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <DMA_SetConfig+0x33c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <DMA_SetConfig+0x340>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <DMA_SetConfig+0x344>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	; (8005580 <DMA_SetConfig+0x348>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <DMA_SetConfig+0x34c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <DMA_SetConfig+0x350>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <DMA_SetConfig+0x2e0>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <DMA_SetConfig+0x354>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <DMA_SetConfig+0x2e4>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <DMA_SetConfig+0x2e6>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d108      	bne.n	8005554 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	60da      	str	r2, [r3, #12]
}
 8005552:	e007      	b.n	8005564 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	58025408 	.word	0x58025408
 8005574:	5802541c 	.word	0x5802541c
 8005578:	58025430 	.word	0x58025430
 800557c:	58025444 	.word	0x58025444
 8005580:	58025458 	.word	0x58025458
 8005584:	5802546c 	.word	0x5802546c
 8005588:	58025480 	.word	0x58025480
 800558c:	58025494 	.word	0x58025494

08005590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a42      	ldr	r2, [pc, #264]	; (80056a8 <DMA_CalcBaseAndBitshift+0x118>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d04a      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a41      	ldr	r2, [pc, #260]	; (80056ac <DMA_CalcBaseAndBitshift+0x11c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d045      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3f      	ldr	r2, [pc, #252]	; (80056b0 <DMA_CalcBaseAndBitshift+0x120>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d040      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3e      	ldr	r2, [pc, #248]	; (80056b4 <DMA_CalcBaseAndBitshift+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d03b      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3c      	ldr	r2, [pc, #240]	; (80056b8 <DMA_CalcBaseAndBitshift+0x128>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d036      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3b      	ldr	r2, [pc, #236]	; (80056bc <DMA_CalcBaseAndBitshift+0x12c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d031      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a39      	ldr	r2, [pc, #228]	; (80056c0 <DMA_CalcBaseAndBitshift+0x130>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02c      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a38      	ldr	r2, [pc, #224]	; (80056c4 <DMA_CalcBaseAndBitshift+0x134>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d027      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a36      	ldr	r2, [pc, #216]	; (80056c8 <DMA_CalcBaseAndBitshift+0x138>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d022      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a35      	ldr	r2, [pc, #212]	; (80056cc <DMA_CalcBaseAndBitshift+0x13c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d01d      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a33      	ldr	r2, [pc, #204]	; (80056d0 <DMA_CalcBaseAndBitshift+0x140>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d018      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a32      	ldr	r2, [pc, #200]	; (80056d4 <DMA_CalcBaseAndBitshift+0x144>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a30      	ldr	r2, [pc, #192]	; (80056d8 <DMA_CalcBaseAndBitshift+0x148>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00e      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <DMA_CalcBaseAndBitshift+0x14c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d009      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <DMA_CalcBaseAndBitshift+0x150>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <DMA_CalcBaseAndBitshift+0xa8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <DMA_CalcBaseAndBitshift+0x154>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d101      	bne.n	800563c <DMA_CalcBaseAndBitshift+0xac>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <DMA_CalcBaseAndBitshift+0xae>
 800563c:	2300      	movs	r3, #0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d024      	beq.n	800568c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	3b10      	subs	r3, #16
 800564a:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <DMA_CalcBaseAndBitshift+0x158>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	4a24      	ldr	r2, [pc, #144]	; (80056ec <DMA_CalcBaseAndBitshift+0x15c>)
 800565c:	5cd3      	ldrb	r3, [r2, r3]
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b03      	cmp	r3, #3
 8005668:	d908      	bls.n	800567c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <DMA_CalcBaseAndBitshift+0x160>)
 8005672:	4013      	ands	r3, r2
 8005674:	1d1a      	adds	r2, r3, #4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	659a      	str	r2, [r3, #88]	; 0x58
 800567a:	e00d      	b.n	8005698 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <DMA_CalcBaseAndBitshift+0x160>)
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6593      	str	r3, [r2, #88]	; 0x58
 800568a:	e005      	b.n	8005698 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40020010 	.word	0x40020010
 80056ac:	40020028 	.word	0x40020028
 80056b0:	40020040 	.word	0x40020040
 80056b4:	40020058 	.word	0x40020058
 80056b8:	40020070 	.word	0x40020070
 80056bc:	40020088 	.word	0x40020088
 80056c0:	400200a0 	.word	0x400200a0
 80056c4:	400200b8 	.word	0x400200b8
 80056c8:	40020410 	.word	0x40020410
 80056cc:	40020428 	.word	0x40020428
 80056d0:	40020440 	.word	0x40020440
 80056d4:	40020458 	.word	0x40020458
 80056d8:	40020470 	.word	0x40020470
 80056dc:	40020488 	.word	0x40020488
 80056e0:	400204a0 	.word	0x400204a0
 80056e4:	400204b8 	.word	0x400204b8
 80056e8:	aaaaaaab 	.word	0xaaaaaaab
 80056ec:	0800eb7c 	.word	0x0800eb7c
 80056f0:	fffffc00 	.word	0xfffffc00

080056f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d120      	bne.n	800574a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	2b03      	cmp	r3, #3
 800570e:	d858      	bhi.n	80057c2 <DMA_CheckFifoParam+0xce>
 8005710:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <DMA_CheckFifoParam+0x24>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	08005729 	.word	0x08005729
 800571c:	0800573b 	.word	0x0800573b
 8005720:	08005729 	.word	0x08005729
 8005724:	080057c3 	.word	0x080057c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d048      	beq.n	80057c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005738:	e045      	b.n	80057c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005742:	d142      	bne.n	80057ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005748:	e03f      	b.n	80057ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005752:	d123      	bne.n	800579c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	2b03      	cmp	r3, #3
 800575a:	d838      	bhi.n	80057ce <DMA_CheckFifoParam+0xda>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <DMA_CheckFifoParam+0x70>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005775 	.word	0x08005775
 8005768:	0800577b 	.word	0x0800577b
 800576c:	08005775 	.word	0x08005775
 8005770:	0800578d 	.word	0x0800578d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
        break;
 8005778:	e030      	b.n	80057dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d025      	beq.n	80057d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800578a:	e022      	b.n	80057d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005794:	d11f      	bne.n	80057d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800579a:	e01c      	b.n	80057d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d902      	bls.n	80057aa <DMA_CheckFifoParam+0xb6>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d003      	beq.n	80057b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057a8:	e018      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
        break;
 80057ae:	e015      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
    break;
 80057c0:	e00b      	b.n	80057da <DMA_CheckFifoParam+0xe6>
        break;
 80057c2:	bf00      	nop
 80057c4:	e00a      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        break;
 80057c6:	bf00      	nop
 80057c8:	e008      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        break;
 80057ca:	bf00      	nop
 80057cc:	e006      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        break;
 80057ce:	bf00      	nop
 80057d0:	e004      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        break;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
        break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
    break;
 80057da:	bf00      	nop
    }
  }

  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a38      	ldr	r2, [pc, #224]	; (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d022      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a36      	ldr	r2, [pc, #216]	; (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01d      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a35      	ldr	r2, [pc, #212]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d018      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a33      	ldr	r2, [pc, #204]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a32      	ldr	r2, [pc, #200]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a30      	ldr	r2, [pc, #192]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2d      	ldr	r2, [pc, #180]	; (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	3b08      	subs	r3, #8
 800585c:	4a28      	ldr	r2, [pc, #160]	; (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4b26      	ldr	r3, [pc, #152]	; (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a24      	ldr	r2, [pc, #144]	; (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005878:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	2201      	movs	r2, #1
 8005882:	409a      	lsls	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005888:	e024      	b.n	80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	3b10      	subs	r3, #16
 8005892:	4a1e      	ldr	r2, [pc, #120]	; (800590c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4a1c      	ldr	r2, [pc, #112]	; (8005910 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d806      	bhi.n	80058b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d902      	bls.n	80058b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3308      	adds	r3, #8
 80058b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4b18      	ldr	r3, [pc, #96]	; (8005918 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2201      	movs	r2, #1
 80058ce:	409a      	lsls	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	58025408 	.word	0x58025408
 80058e4:	5802541c 	.word	0x5802541c
 80058e8:	58025430 	.word	0x58025430
 80058ec:	58025444 	.word	0x58025444
 80058f0:	58025458 	.word	0x58025458
 80058f4:	5802546c 	.word	0x5802546c
 80058f8:	58025480 	.word	0x58025480
 80058fc:	58025494 	.word	0x58025494
 8005900:	cccccccd 	.word	0xcccccccd
 8005904:	16009600 	.word	0x16009600
 8005908:	58025880 	.word	0x58025880
 800590c:	aaaaaaab 	.word	0xaaaaaaab
 8005910:	400204b8 	.word	0x400204b8
 8005914:	4002040f 	.word	0x4002040f
 8005918:	10008200 	.word	0x10008200
 800591c:	40020880 	.word	0x40020880

08005920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04a      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d847      	bhi.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a24      	ldr	r2, [pc, #144]	; (80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01d      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a22      	ldr	r2, [pc, #136]	; (80059e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d101      	bne.n	8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a15      	ldr	r2, [pc, #84]	; (80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059a8:	671a      	str	r2, [r3, #112]	; 0x70
 80059aa:	e009      	b.n	80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	461a      	mov	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	2201      	movs	r2, #1
 80059c6:	409a      	lsls	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494
 80059f8:	1600963f 	.word	0x1600963f
 80059fc:	58025940 	.word	0x58025940
 8005a00:	1000823f 	.word	0x1000823f
 8005a04:	40020940 	.word	0x40020940

08005a08 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	7a1b      	ldrb	r3, [r3, #8]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d155      	bne.n	8005ace <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a4b      	ldr	r2, [pc, #300]	; (8005b54 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d049      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a49      	ldr	r2, [pc, #292]	; (8005b58 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d044      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a48      	ldr	r2, [pc, #288]	; (8005b5c <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d03f      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d03a      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a45      	ldr	r2, [pc, #276]	; (8005b64 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d035      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a43      	ldr	r2, [pc, #268]	; (8005b68 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d030      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a42      	ldr	r2, [pc, #264]	; (8005b6c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d02b      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a40      	ldr	r2, [pc, #256]	; (8005b70 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d026      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3f      	ldr	r2, [pc, #252]	; (8005b74 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d021      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a3d      	ldr	r2, [pc, #244]	; (8005b78 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01c      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3c      	ldr	r2, [pc, #240]	; (8005b7c <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d017      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a3a      	ldr	r2, [pc, #232]	; (8005b80 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d012      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a39      	ldr	r2, [pc, #228]	; (8005b84 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a37      	ldr	r2, [pc, #220]	; (8005b88 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d008      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a36      	ldr	r2, [pc, #216]	; (8005b8c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a34      	ldr	r2, [pc, #208]	; (8005b90 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d131      	bne.n	8005b3e <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e02f      	b.n	8005b48 <HAL_DMAEx_ConfigMuxSync+0x140>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8005afe:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	b2d9      	uxtb	r1, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	061a      	lsls	r2, r3, #24
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	04db      	lsls	r3, r3, #19
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	7a1b      	ldrb	r3, [r3, #8]
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	431a      	orrs	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	7a5b      	ldrb	r3, [r3, #9]
 8005b26:	025b      	lsls	r3, r3, #9
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e004      	b.n	8005b48 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40020010 	.word	0x40020010
 8005b58:	40020028 	.word	0x40020028
 8005b5c:	40020040 	.word	0x40020040
 8005b60:	40020058 	.word	0x40020058
 8005b64:	40020070 	.word	0x40020070
 8005b68:	40020088 	.word	0x40020088
 8005b6c:	400200a0 	.word	0x400200a0
 8005b70:	400200b8 	.word	0x400200b8
 8005b74:	40020410 	.word	0x40020410
 8005b78:	40020428 	.word	0x40020428
 8005b7c:	40020440 	.word	0x40020440
 8005b80:	40020458 	.word	0x40020458
 8005b84:	40020470 	.word	0x40020470
 8005b88:	40020488 	.word	0x40020488
 8005b8c:	400204a0 	.word	0x400204a0
 8005b90:	400204b8 	.word	0x400204b8

08005b94 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01a      	beq.n	8005be2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bc4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d022      	beq.n	8005c30 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01a      	beq.n	8005c30 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
      }
    }
  }
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c46:	4b86      	ldr	r3, [pc, #536]	; (8005e60 <HAL_GPIO_Init+0x228>)
 8005c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c4a:	e18c      	b.n	8005f66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	4013      	ands	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 817e 	beq.w	8005f60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d005      	beq.n	8005c7c <HAL_GPIO_Init+0x44>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d130      	bne.n	8005cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	091b      	lsrs	r3, r3, #4
 8005cc8:	f003 0201 	and.w	r2, r3, #1
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d017      	beq.n	8005d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d123      	bne.n	8005d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	08da      	lsrs	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3208      	adds	r2, #8
 8005d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	220f      	movs	r2, #15
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	08da      	lsrs	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3208      	adds	r2, #8
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	2203      	movs	r2, #3
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0203 	and.w	r2, r3, #3
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80d8 	beq.w	8005f60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db0:	4b2c      	ldr	r3, [pc, #176]	; (8005e64 <HAL_GPIO_Init+0x22c>)
 8005db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005db6:	4a2b      	ldr	r2, [pc, #172]	; (8005e64 <HAL_GPIO_Init+0x22c>)
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_GPIO_Init+0x22c>)
 8005dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dce:	4a26      	ldr	r2, [pc, #152]	; (8005e68 <HAL_GPIO_Init+0x230>)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	220f      	movs	r2, #15
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <HAL_GPIO_Init+0x234>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d04a      	beq.n	8005e90 <HAL_GPIO_Init+0x258>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_GPIO_Init+0x238>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d02b      	beq.n	8005e5a <HAL_GPIO_Init+0x222>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <HAL_GPIO_Init+0x23c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d025      	beq.n	8005e56 <HAL_GPIO_Init+0x21e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	; (8005e78 <HAL_GPIO_Init+0x240>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <HAL_GPIO_Init+0x21a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <HAL_GPIO_Init+0x244>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d019      	beq.n	8005e4e <HAL_GPIO_Init+0x216>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <HAL_GPIO_Init+0x248>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_GPIO_Init+0x212>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <HAL_GPIO_Init+0x24c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00d      	beq.n	8005e46 <HAL_GPIO_Init+0x20e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <HAL_GPIO_Init+0x250>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <HAL_GPIO_Init+0x20a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <HAL_GPIO_Init+0x254>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <HAL_GPIO_Init+0x206>
 8005e3a:	2309      	movs	r3, #9
 8005e3c:	e029      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e027      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e42:	2307      	movs	r3, #7
 8005e44:	e025      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e46:	2306      	movs	r3, #6
 8005e48:	e023      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e4a:	2305      	movs	r3, #5
 8005e4c:	e021      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	e01f      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e52:	2303      	movs	r3, #3
 8005e54:	e01d      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e01b      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e019      	b.n	8005e92 <HAL_GPIO_Init+0x25a>
 8005e5e:	bf00      	nop
 8005e60:	58000080 	.word	0x58000080
 8005e64:	58024400 	.word	0x58024400
 8005e68:	58000400 	.word	0x58000400
 8005e6c:	58020000 	.word	0x58020000
 8005e70:	58020400 	.word	0x58020400
 8005e74:	58020800 	.word	0x58020800
 8005e78:	58020c00 	.word	0x58020c00
 8005e7c:	58021000 	.word	0x58021000
 8005e80:	58021400 	.word	0x58021400
 8005e84:	58021800 	.word	0x58021800
 8005e88:	58021c00 	.word	0x58021c00
 8005e8c:	58022400 	.word	0x58022400
 8005e90:	2300      	movs	r3, #0
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	f002 0203 	and.w	r2, r2, #3
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	4093      	lsls	r3, r2
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ea2:	4938      	ldr	r1, [pc, #224]	; (8005f84 <HAL_GPIO_Init+0x34c>)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f ae6b 	bne.w	8005c4c <HAL_GPIO_Init+0x14>
  }
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	3724      	adds	r7, #36	; 0x24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	58000400 	.word	0x58000400

08005f88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f96:	4b72      	ldr	r3, [pc, #456]	; (8006160 <HAL_GPIO_DeInit+0x1d8>)
 8005f98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005f9a:	e0d3      	b.n	8006144 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80c6 	beq.w	800613e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005fb2:	4a6c      	ldr	r2, [pc, #432]	; (8006164 <HAL_GPIO_DeInit+0x1dc>)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	089b      	lsrs	r3, r3, #2
 8005fb8:	3302      	adds	r3, #2
 8005fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fbe:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	220f      	movs	r2, #15
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a64      	ldr	r2, [pc, #400]	; (8006168 <HAL_GPIO_DeInit+0x1e0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d031      	beq.n	8006040 <HAL_GPIO_DeInit+0xb8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a63      	ldr	r2, [pc, #396]	; (800616c <HAL_GPIO_DeInit+0x1e4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d02b      	beq.n	800603c <HAL_GPIO_DeInit+0xb4>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a62      	ldr	r2, [pc, #392]	; (8006170 <HAL_GPIO_DeInit+0x1e8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d025      	beq.n	8006038 <HAL_GPIO_DeInit+0xb0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a61      	ldr	r2, [pc, #388]	; (8006174 <HAL_GPIO_DeInit+0x1ec>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01f      	beq.n	8006034 <HAL_GPIO_DeInit+0xac>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a60      	ldr	r2, [pc, #384]	; (8006178 <HAL_GPIO_DeInit+0x1f0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d019      	beq.n	8006030 <HAL_GPIO_DeInit+0xa8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a5f      	ldr	r2, [pc, #380]	; (800617c <HAL_GPIO_DeInit+0x1f4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_GPIO_DeInit+0xa4>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a5e      	ldr	r2, [pc, #376]	; (8006180 <HAL_GPIO_DeInit+0x1f8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00d      	beq.n	8006028 <HAL_GPIO_DeInit+0xa0>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a5d      	ldr	r2, [pc, #372]	; (8006184 <HAL_GPIO_DeInit+0x1fc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <HAL_GPIO_DeInit+0x9c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a5c      	ldr	r2, [pc, #368]	; (8006188 <HAL_GPIO_DeInit+0x200>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d101      	bne.n	8006020 <HAL_GPIO_DeInit+0x98>
 800601c:	2309      	movs	r3, #9
 800601e:	e010      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006020:	230a      	movs	r3, #10
 8006022:	e00e      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006024:	2307      	movs	r3, #7
 8006026:	e00c      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006028:	2306      	movs	r3, #6
 800602a:	e00a      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 800602c:	2305      	movs	r3, #5
 800602e:	e008      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006030:	2304      	movs	r3, #4
 8006032:	e006      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006034:	2303      	movs	r3, #3
 8006036:	e004      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006038:	2302      	movs	r3, #2
 800603a:	e002      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_GPIO_DeInit+0xba>
 8006040:	2300      	movs	r3, #0
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	f002 0203 	and.w	r2, r2, #3
 8006048:	0092      	lsls	r2, r2, #2
 800604a:	4093      	lsls	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	d136      	bne.n	80060c0 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	43db      	mvns	r3, r3
 8006068:	401a      	ands	r2, r3
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800606e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	43db      	mvns	r3, r3
 8006078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800607c:	4013      	ands	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	43db      	mvns	r3, r3
 800608a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608e:	4013      	ands	r3, r2
 8006090:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	220f      	movs	r2, #15
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80060a2:	4a30      	ldr	r2, [pc, #192]	; (8006164 <HAL_GPIO_DeInit+0x1dc>)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	3302      	adds	r3, #2
 80060aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	43da      	mvns	r2, r3
 80060b2:	482c      	ldr	r0, [pc, #176]	; (8006164 <HAL_GPIO_DeInit+0x1dc>)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	400a      	ands	r2, r1
 80060ba:	3302      	adds	r3, #2
 80060bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	2103      	movs	r1, #3
 80060ca:	fa01 f303 	lsl.w	r3, r1, r3
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	08da      	lsrs	r2, r3, #3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3208      	adds	r2, #8
 80060dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	220f      	movs	r2, #15
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	08d2      	lsrs	r2, r2, #3
 80060f4:	4019      	ands	r1, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3208      	adds	r2, #8
 80060fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	2103      	movs	r1, #3
 8006108:	fa01 f303 	lsl.w	r3, r1, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	401a      	ands	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	2101      	movs	r1, #1
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	401a      	ands	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	2103      	movs	r1, #3
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	401a      	ands	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	3301      	adds	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f af25 	bne.w	8005f9c <HAL_GPIO_DeInit+0x14>
  }
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	58000080 	.word	0x58000080
 8006164:	58000400 	.word	0x58000400
 8006168:	58020000 	.word	0x58020000
 800616c:	58020400 	.word	0x58020400
 8006170:	58020800 	.word	0x58020800
 8006174:	58020c00 	.word	0x58020c00
 8006178:	58021000 	.word	0x58021000
 800617c:	58021400 	.word	0x58021400
 8006180:	58021800 	.word	0x58021800
 8006184:	58021c00 	.word	0x58021c00
 8006188:	58022400 	.word	0x58022400

0800618c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
 8006198:	4613      	mov	r3, r2
 800619a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800619c:	787b      	ldrb	r3, [r7, #1]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061a8:	e003      	b.n	80061b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	041a      	lsls	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	4603      	mov	r3, r0
 80061c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f804 	bl	80061f2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	4603      	mov	r3, r0
 80061fa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e07f      	b.n	800631a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f006 f818 	bl	800c264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006258:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006268:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d107      	bne.n	8006282 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	e006      	b.n	8006290 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800628e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d104      	bne.n	80062a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_I2C_Init+0x11c>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	02008000 	.word	0x02008000

08006328 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e021      	b.n	800637e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2224      	movs	r2, #36	; 0x24
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0201 	bic.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f005 fff4 	bl	800c340 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4603      	mov	r3, r0
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	460b      	mov	r3, r1
 800639c:	813b      	strh	r3, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	f040 80f9 	bne.w	80065a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_I2C_Mem_Write+0x34>
 80063b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0ed      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_I2C_Mem_Write+0x4e>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e0e6      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063de:	f7fc fcd1 	bl	8002d84 <HAL_GetTick>
 80063e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	2319      	movs	r3, #25
 80063ea:	2201      	movs	r2, #1
 80063ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f001 f8c6 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0d1      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2221      	movs	r2, #33	; 0x21
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2240      	movs	r2, #64	; 0x40
 800640c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006428:	88f8      	ldrh	r0, [r7, #6]
 800642a:	893a      	ldrh	r2, [r7, #8]
 800642c:	8979      	ldrh	r1, [r7, #10]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	4603      	mov	r3, r0
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fb91 	bl	8006b60 <I2C_RequestMemoryWrite>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0a9      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2bff      	cmp	r3, #255	; 0xff
 8006458:	d90e      	bls.n	8006478 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	22ff      	movs	r2, #255	; 0xff
 800645e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006464:	b2da      	uxtb	r2, r3
 8006466:	8979      	ldrh	r1, [r7, #10]
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f001 fa2f 	bl	80078d4 <I2C_TransferConfig>
 8006476:	e00f      	b.n	8006498 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	b2da      	uxtb	r2, r3
 8006488:	8979      	ldrh	r1, [r7, #10]
 800648a:	2300      	movs	r3, #0
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 fa1e 	bl	80078d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f001 f8b0 	bl	8007602 <I2C_WaitOnTXISFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e07b      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d034      	beq.n	8006550 <HAL_I2C_Mem_Write+0x1c8>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d130      	bne.n	8006550 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	2200      	movs	r2, #0
 80064f6:	2180      	movs	r1, #128	; 0x80
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 f842 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e04d      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2bff      	cmp	r3, #255	; 0xff
 8006510:	d90e      	bls.n	8006530 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651c:	b2da      	uxtb	r2, r3
 800651e:	8979      	ldrh	r1, [r7, #10]
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f001 f9d3 	bl	80078d4 <I2C_TransferConfig>
 800652e:	e00f      	b.n	8006550 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653e:	b2da      	uxtb	r2, r3
 8006540:	8979      	ldrh	r1, [r7, #10]
 8006542:	2300      	movs	r3, #0
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 f9c2 	bl	80078d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d19e      	bne.n	8006498 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f001 f88f 	bl	8007682 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e01a      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2220      	movs	r2, #32
 8006574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6859      	ldr	r1, [r3, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_I2C_Mem_Write+0x224>)
 8006582:	400b      	ands	r3, r1
 8006584:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	fe00e800 	.word	0xfe00e800

080065b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	817b      	strh	r3, [r7, #10]
 80065c2:	460b      	mov	r3, r1
 80065c4:	813b      	strh	r3, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	f040 80fd 	bne.w	80067d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <HAL_I2C_Mem_Read+0x34>
 80065de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0f1      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_I2C_Mem_Read+0x4e>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e0ea      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006606:	f7fc fbbd 	bl	8002d84 <HAL_GetTick>
 800660a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2319      	movs	r3, #25
 8006612:	2201      	movs	r2, #1
 8006614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 ffb2 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0d5      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2222      	movs	r2, #34	; 0x22
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2240      	movs	r2, #64	; 0x40
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006650:	88f8      	ldrh	r0, [r7, #6]
 8006652:	893a      	ldrh	r2, [r7, #8]
 8006654:	8979      	ldrh	r1, [r7, #10]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4603      	mov	r3, r0
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fad1 	bl	8006c08 <I2C_RequestMemoryRead>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0ad      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2bff      	cmp	r3, #255	; 0xff
 8006680:	d90e      	bls.n	80066a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668c:	b2da      	uxtb	r2, r3
 800668e:	8979      	ldrh	r1, [r7, #10]
 8006690:	4b52      	ldr	r3, [pc, #328]	; (80067dc <HAL_I2C_Mem_Read+0x22c>)
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f001 f91b 	bl	80078d4 <I2C_TransferConfig>
 800669e:	e00f      	b.n	80066c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	8979      	ldrh	r1, [r7, #10]
 80066b2:	4b4a      	ldr	r3, [pc, #296]	; (80067dc <HAL_I2C_Mem_Read+0x22c>)
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f001 f90a 	bl	80078d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2200      	movs	r2, #0
 80066c8:	2104      	movs	r1, #4
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 ff59 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e07c      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d034      	beq.n	8006780 <HAL_I2C_Mem_Read+0x1d0>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d130      	bne.n	8006780 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	2200      	movs	r2, #0
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 ff2a 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e04d      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673c:	b29b      	uxth	r3, r3
 800673e:	2bff      	cmp	r3, #255	; 0xff
 8006740:	d90e      	bls.n	8006760 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674c:	b2da      	uxtb	r2, r3
 800674e:	8979      	ldrh	r1, [r7, #10]
 8006750:	2300      	movs	r3, #0
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f001 f8bb 	bl	80078d4 <I2C_TransferConfig>
 800675e:	e00f      	b.n	8006780 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676e:	b2da      	uxtb	r2, r3
 8006770:	8979      	ldrh	r1, [r7, #10]
 8006772:	2300      	movs	r3, #0
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 f8aa 	bl	80078d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d19a      	bne.n	80066c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 ff77 	bl	8007682 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e01a      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2220      	movs	r2, #32
 80067a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6859      	ldr	r1, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <HAL_I2C_Mem_Read+0x230>)
 80067b2:	400b      	ands	r3, r1
 80067b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	80002400 	.word	0x80002400
 80067e0:	fe00e800 	.word	0xfe00e800

080067e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d010      	beq.n	800682a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	09db      	lsrs	r3, r3, #7
 800680c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	f043 0201 	orr.w	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006828:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	0a9b      	lsrs	r3, r3, #10
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d010      	beq.n	8006858 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	09db      	lsrs	r3, r3, #7
 800683a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	f043 0208 	orr.w	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006856:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	0a5b      	lsrs	r3, r3, #9
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d010      	beq.n	8006886 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f043 0202 	orr.w	r2, r3, #2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006884:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f003 030b 	and.w	r3, r3, #11
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fd39 	bl	8007310 <I2C_ITError>
  }
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
 80068da:	4613      	mov	r3, r2
 80068dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006934:	b2db      	uxtb	r3, r3
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <I2C_Slave_ISR_IT+0x24>
 800697a:	2302      	movs	r3, #2
 800697c:	e0ec      	b.n	8006b58 <I2C_Slave_ISR_IT+0x1fe>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800699e:	6939      	ldr	r1, [r7, #16]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 fa67 	bl	8006e74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04d      	beq.n	8006a4e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d047      	beq.n	8006a4e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d128      	bne.n	8006a1a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b28      	cmp	r3, #40	; 0x28
 80069d2:	d108      	bne.n	80069e6 <I2C_Slave_ISR_IT+0x8c>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069da:	d104      	bne.n	80069e6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80069dc:	6939      	ldr	r1, [r7, #16]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fc40 	bl	8007264 <I2C_ITListenCplt>
 80069e4:	e032      	b.n	8006a4c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b29      	cmp	r3, #41	; 0x29
 80069f0:	d10e      	bne.n	8006a10 <I2C_Slave_ISR_IT+0xb6>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069f8:	d00a      	beq.n	8006a10 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2210      	movs	r2, #16
 8006a00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fd7b 	bl	80074fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f9d5 	bl	8006db8 <I2C_ITSlaveSeqCplt>
 8006a0e:	e01d      	b.n	8006a4c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2210      	movs	r2, #16
 8006a16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006a18:	e096      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2210      	movs	r2, #16
 8006a20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <I2C_Slave_ISR_IT+0xe4>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a3a:	f040 8085 	bne.w	8006b48 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fc63 	bl	8007310 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a4a:	e07d      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1ee>
 8006a4c:	e07c      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	089b      	lsrs	r3, r3, #2
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d030      	beq.n	8006abc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d02a      	beq.n	8006abc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d018      	beq.n	8006aa2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d14f      	bne.n	8006b4c <I2C_Slave_ISR_IT+0x1f2>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ab2:	d04b      	beq.n	8006b4c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f97f 	bl	8006db8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006aba:	e047      	b.n	8006b4c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	08db      	lsrs	r3, r3, #3
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	08db      	lsrs	r3, r3, #3
 8006acc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006ad4:	6939      	ldr	r1, [r7, #16]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8ea 	bl	8006cb0 <I2C_ITAddrCplt>
 8006adc:	e037      	b.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d031      	beq.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d02b      	beq.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d018      	beq.n	8006b32 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b30:	e00d      	b.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b38:	d002      	beq.n	8006b40 <I2C_Slave_ISR_IT+0x1e6>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f939 	bl	8006db8 <I2C_ITSlaveSeqCplt>
 8006b46:	e002      	b.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006b4c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	817b      	strh	r3, [r7, #10]
 8006b72:	460b      	mov	r3, r1
 8006b74:	813b      	strh	r3, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b7a:	88fb      	ldrh	r3, [r7, #6]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	8979      	ldrh	r1, [r7, #10]
 8006b80:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <I2C_RequestMemoryWrite+0xa4>)
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fea3 	bl	80078d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	69b9      	ldr	r1, [r7, #24]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fd35 	bl	8007602 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e02c      	b.n	8006bfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d105      	bne.n	8006bb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ba8:	893b      	ldrh	r3, [r7, #8]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb2:	e015      	b.n	8006be0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bb4:	893b      	ldrh	r3, [r7, #8]
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fd1b 	bl	8007602 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e012      	b.n	8006bfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd6:	893b      	ldrh	r3, [r7, #8]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2200      	movs	r2, #0
 8006be8:	2180      	movs	r1, #128	; 0x80
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fcc9 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	80002000 	.word	0x80002000

08006c08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	4608      	mov	r0, r1
 8006c12:	4611      	mov	r1, r2
 8006c14:	461a      	mov	r2, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	813b      	strh	r3, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	8979      	ldrh	r1, [r7, #10]
 8006c28:	4b20      	ldr	r3, [pc, #128]	; (8006cac <I2C_RequestMemoryRead+0xa4>)
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fe50 	bl	80078d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	69b9      	ldr	r1, [r7, #24]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fce2 	bl	8007602 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e02c      	b.n	8006ca2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c4e:	893b      	ldrh	r3, [r7, #8]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28
 8006c58:	e015      	b.n	8006c86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c5a:	893b      	ldrh	r3, [r7, #8]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	69b9      	ldr	r1, [r7, #24]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fcc8 	bl	8007602 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e012      	b.n	8006ca2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c7c:	893b      	ldrh	r3, [r7, #8]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2140      	movs	r1, #64	; 0x40
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fc76 	bl	8007582 <I2C_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	80002000 	.word	0x80002000

08006cb0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cc6:	2b28      	cmp	r3, #40	; 0x28
 8006cc8:	d16a      	bne.n	8006da0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ce8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cf6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d04:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d138      	bne.n	8006d80 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d0e:	897b      	ldrh	r3, [r7, #10]
 8006d10:	09db      	lsrs	r3, r3, #7
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	89bb      	ldrh	r3, [r7, #12]
 8006d16:	4053      	eors	r3, r2
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f003 0306 	and.w	r3, r3, #6
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d11c      	bne.n	8006d5c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d22:	897b      	ldrh	r3, [r7, #10]
 8006d24:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d13b      	bne.n	8006db0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2208      	movs	r2, #8
 8006d44:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d4e:	89ba      	ldrh	r2, [r7, #12]
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff fdba 	bl	80068ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d5a:	e029      	b.n	8006db0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006d5c:	893b      	ldrh	r3, [r7, #8]
 8006d5e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fde7 	bl	8007938 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d72:	89ba      	ldrh	r2, [r7, #12]
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fda8 	bl	80068ce <HAL_I2C_AddrCallback>
}
 8006d7e:	e017      	b.n	8006db0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fdd7 	bl	8007938 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d92:	89ba      	ldrh	r2, [r7, #12]
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff fd98 	bl	80068ce <HAL_I2C_AddrCallback>
}
 8006d9e:	e007      	b.n	8006db0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	0b9b      	lsrs	r3, r3, #14
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e00d      	b.n	8006e0a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	0bdb      	lsrs	r3, r3, #15
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b29      	cmp	r3, #41	; 0x29
 8006e14:	d112      	bne.n	8006e3c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2228      	movs	r2, #40	; 0x28
 8006e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2221      	movs	r2, #33	; 0x21
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e24:	2101      	movs	r1, #1
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fd86 	bl	8007938 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fd36 	bl	80068a6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e3a:	e017      	b.n	8006e6c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b2a      	cmp	r3, #42	; 0x2a
 8006e46:	d111      	bne.n	8006e6c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2228      	movs	r2, #40	; 0x28
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2222      	movs	r2, #34	; 0x22
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e56:	2102      	movs	r1, #2
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fd6d 	bl	8007938 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fd27 	bl	80068ba <HAL_I2C_SlaveRxCpltCallback>
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e90:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2220      	movs	r2, #32
 8006e98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b21      	cmp	r3, #33	; 0x21
 8006e9e:	d002      	beq.n	8006ea6 <I2C_ITSlaveCplt+0x32>
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b29      	cmp	r3, #41	; 0x29
 8006ea4:	d108      	bne.n	8006eb8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ea6:	f248 0101 	movw	r1, #32769	; 0x8001
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fd44 	bl	8007938 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2221      	movs	r2, #33	; 0x21
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb6:	e00d      	b.n	8006ed4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b22      	cmp	r3, #34	; 0x22
 8006ebc:	d002      	beq.n	8006ec4 <I2C_ITSlaveCplt+0x50>
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec2:	d107      	bne.n	8006ed4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006ec4:	f248 0102 	movw	r1, #32770	; 0x8002
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fd35 	bl	8007938 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2222      	movs	r2, #34	; 0x22
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6859      	ldr	r1, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b80      	ldr	r3, [pc, #512]	; (80070f0 <I2C_ITSlaveCplt+0x27c>)
 8006ef0:	400b      	ands	r3, r1
 8006ef2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb02 	bl	80074fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	0b9b      	lsrs	r3, r3, #14
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d07a      	beq.n	8006ffc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8111 	beq.w	8007142 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a73      	ldr	r2, [pc, #460]	; (80070f4 <I2C_ITSlaveCplt+0x280>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d059      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a71      	ldr	r2, [pc, #452]	; (80070f8 <I2C_ITSlaveCplt+0x284>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d053      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a6f      	ldr	r2, [pc, #444]	; (80070fc <I2C_ITSlaveCplt+0x288>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d04d      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a6d      	ldr	r2, [pc, #436]	; (8007100 <I2C_ITSlaveCplt+0x28c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d047      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a6b      	ldr	r2, [pc, #428]	; (8007104 <I2C_ITSlaveCplt+0x290>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d041      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a69      	ldr	r2, [pc, #420]	; (8007108 <I2C_ITSlaveCplt+0x294>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d03b      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a67      	ldr	r2, [pc, #412]	; (800710c <I2C_ITSlaveCplt+0x298>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d035      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a65      	ldr	r2, [pc, #404]	; (8007110 <I2C_ITSlaveCplt+0x29c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d02f      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a63      	ldr	r2, [pc, #396]	; (8007114 <I2C_ITSlaveCplt+0x2a0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d029      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a61      	ldr	r2, [pc, #388]	; (8007118 <I2C_ITSlaveCplt+0x2a4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d023      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a5f      	ldr	r2, [pc, #380]	; (800711c <I2C_ITSlaveCplt+0x2a8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d01d      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a5d      	ldr	r2, [pc, #372]	; (8007120 <I2C_ITSlaveCplt+0x2ac>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d017      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a5b      	ldr	r2, [pc, #364]	; (8007124 <I2C_ITSlaveCplt+0x2b0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d011      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a59      	ldr	r2, [pc, #356]	; (8007128 <I2C_ITSlaveCplt+0x2b4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a57      	ldr	r2, [pc, #348]	; (800712c <I2C_ITSlaveCplt+0x2b8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d005      	beq.n	8006fe0 <I2C_ITSlaveCplt+0x16c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a55      	ldr	r2, [pc, #340]	; (8007130 <I2C_ITSlaveCplt+0x2bc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d105      	bne.n	8006fec <I2C_ITSlaveCplt+0x178>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	e004      	b.n	8006ff6 <I2C_ITSlaveCplt+0x182>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	8553      	strh	r3, [r2, #42]	; 0x2a
 8006ffa:	e0a2      	b.n	8007142 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	0bdb      	lsrs	r3, r3, #15
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 809c 	beq.w	8007142 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007018:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 808f 	beq.w	8007142 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a32      	ldr	r2, [pc, #200]	; (80070f4 <I2C_ITSlaveCplt+0x280>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d059      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a30      	ldr	r2, [pc, #192]	; (80070f8 <I2C_ITSlaveCplt+0x284>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d053      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a2e      	ldr	r2, [pc, #184]	; (80070fc <I2C_ITSlaveCplt+0x288>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d04d      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2c      	ldr	r2, [pc, #176]	; (8007100 <I2C_ITSlaveCplt+0x28c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d047      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2a      	ldr	r2, [pc, #168]	; (8007104 <I2C_ITSlaveCplt+0x290>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d041      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a28      	ldr	r2, [pc, #160]	; (8007108 <I2C_ITSlaveCplt+0x294>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d03b      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a26      	ldr	r2, [pc, #152]	; (800710c <I2C_ITSlaveCplt+0x298>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d035      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a24      	ldr	r2, [pc, #144]	; (8007110 <I2C_ITSlaveCplt+0x29c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d02f      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a22      	ldr	r2, [pc, #136]	; (8007114 <I2C_ITSlaveCplt+0x2a0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d029      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a20      	ldr	r2, [pc, #128]	; (8007118 <I2C_ITSlaveCplt+0x2a4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d023      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1e      	ldr	r2, [pc, #120]	; (800711c <I2C_ITSlaveCplt+0x2a8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d01d      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <I2C_ITSlaveCplt+0x2ac>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d017      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <I2C_ITSlaveCplt+0x2b0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d011      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a18      	ldr	r2, [pc, #96]	; (8007128 <I2C_ITSlaveCplt+0x2b4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a16      	ldr	r2, [pc, #88]	; (800712c <I2C_ITSlaveCplt+0x2b8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d005      	beq.n	80070e4 <I2C_ITSlaveCplt+0x270>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a14      	ldr	r2, [pc, #80]	; (8007130 <I2C_ITSlaveCplt+0x2bc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d127      	bne.n	8007134 <I2C_ITSlaveCplt+0x2c0>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	e026      	b.n	800713e <I2C_ITSlaveCplt+0x2ca>
 80070f0:	fe00e800 	.word	0xfe00e800
 80070f4:	40020010 	.word	0x40020010
 80070f8:	40020028 	.word	0x40020028
 80070fc:	40020040 	.word	0x40020040
 8007100:	40020058 	.word	0x40020058
 8007104:	40020070 	.word	0x40020070
 8007108:	40020088 	.word	0x40020088
 800710c:	400200a0 	.word	0x400200a0
 8007110:	400200b8 	.word	0x400200b8
 8007114:	40020410 	.word	0x40020410
 8007118:	40020428 	.word	0x40020428
 800711c:	40020440 	.word	0x40020440
 8007120:	40020458 	.word	0x40020458
 8007124:	40020470 	.word	0x40020470
 8007128:	40020488 	.word	0x40020488
 800712c:	400204a0 	.word	0x400204a0
 8007130:	400204b8 	.word	0x400204b8
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	b29b      	uxth	r3, r3
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	089b      	lsrs	r3, r3, #2
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 0304 	bic.w	r3, r3, #4
 8007154:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	f043 0204 	orr.w	r2, r3, #4
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f8a4 	bl	8007310 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b28      	cmp	r3, #40	; 0x28
 80071d2:	d141      	bne.n	8007258 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80071d4:	6979      	ldr	r1, [r7, #20]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f844 	bl	8007264 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071dc:	e03c      	b.n	8007258 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071e6:	d014      	beq.n	8007212 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fde5 	bl	8006db8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a1b      	ldr	r2, [pc, #108]	; (8007260 <I2C_ITSlaveCplt+0x3ec>)
 80071f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fb6d 	bl	80068ea <HAL_I2C_ListenCpltCallback>
}
 8007210:	e022      	b.n	8007258 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b22      	cmp	r3, #34	; 0x22
 800721c:	d10e      	bne.n	800723c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fb40 	bl	80068ba <HAL_I2C_SlaveRxCpltCallback>
}
 800723a:	e00d      	b.n	8007258 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fb27 	bl	80068a6 <HAL_I2C_SlaveTxCpltCallback>
}
 8007258:	bf00      	nop
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	ffff0000 	.word	0xffff0000

08007264 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a26      	ldr	r2, [pc, #152]	; (800730c <I2C_ITListenCplt+0xa8>)
 8007272:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d022      	beq.n	80072e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d012      	beq.n	80072e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072da:	f043 0204 	orr.w	r2, r3, #4
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80072e2:	f248 0103 	movw	r1, #32771	; 0x8003
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fb26 	bl	8007938 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2210      	movs	r2, #16
 80072f2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff faf4 	bl	80068ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	ffff0000 	.word	0xffff0000

08007310 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a5d      	ldr	r2, [pc, #372]	; (80074a4 <I2C_ITError+0x194>)
 800732e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b28      	cmp	r3, #40	; 0x28
 8007346:	d005      	beq.n	8007354 <I2C_ITError+0x44>
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b29      	cmp	r3, #41	; 0x29
 800734c:	d002      	beq.n	8007354 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b2a      	cmp	r3, #42	; 0x2a
 8007352:	d10b      	bne.n	800736c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007354:	2103      	movs	r1, #3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 faee 	bl	8007938 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2228      	movs	r2, #40	; 0x28
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a50      	ldr	r2, [pc, #320]	; (80074a8 <I2C_ITError+0x198>)
 8007368:	635a      	str	r2, [r3, #52]	; 0x34
 800736a:	e011      	b.n	8007390 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800736c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fae1 	bl	8007938 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b60      	cmp	r3, #96	; 0x60
 8007380:	d003      	beq.n	800738a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d039      	beq.n	8007412 <I2C_ITError+0x102>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b11      	cmp	r3, #17
 80073a2:	d002      	beq.n	80073aa <I2C_ITError+0x9a>
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b21      	cmp	r3, #33	; 0x21
 80073a8:	d133      	bne.n	8007412 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073b8:	d107      	bne.n	80073ca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd ff18 	bl	8005204 <HAL_DMA_GetState>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d017      	beq.n	800740a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	4a33      	ldr	r2, [pc, #204]	; (80074ac <I2C_ITError+0x19c>)
 80073e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fc fd40 	bl	8003e74 <HAL_DMA_Abort_IT>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d04d      	beq.n	8007496 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007408:	e045      	b.n	8007496 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f850 	bl	80074b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007410:	e041      	b.n	8007496 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d039      	beq.n	800748e <I2C_ITError+0x17e>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b12      	cmp	r3, #18
 800741e:	d002      	beq.n	8007426 <I2C_ITError+0x116>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b22      	cmp	r3, #34	; 0x22
 8007424:	d133      	bne.n	800748e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007434:	d107      	bne.n	8007446 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007444:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	4618      	mov	r0, r3
 800744c:	f7fd feda 	bl	8005204 <HAL_DMA_GetState>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d017      	beq.n	8007486 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	4a14      	ldr	r2, [pc, #80]	; (80074ac <I2C_ITError+0x19c>)
 800745c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	4618      	mov	r0, r3
 800746c:	f7fc fd02 	bl	8003e74 <HAL_DMA_Abort_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d011      	beq.n	800749a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007484:	e009      	b.n	800749a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f812 	bl	80074b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800748c:	e005      	b.n	800749a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f80e 	bl	80074b0 <I2C_TreatErrorCallback>
  }
}
 8007494:	e002      	b.n	800749c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800749a:	bf00      	nop
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	ffff0000 	.word	0xffff0000
 80074a8:	0800695b 	.word	0x0800695b
 80074ac:	08007547 	.word	0x08007547

080074b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b60      	cmp	r3, #96	; 0x60
 80074c2:	d10e      	bne.n	80074e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff fa19 	bl	8006912 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074e0:	e009      	b.n	80074f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff fa04 	bl	80068fe <HAL_I2C_ErrorCallback>
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b02      	cmp	r3, #2
 8007512:	d103      	bne.n	800751c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2200      	movs	r2, #0
 800751a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b01      	cmp	r3, #1
 8007528:	d007      	beq.n	800753a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0201 	orr.w	r2, r2, #1
 8007538:	619a      	str	r2, [r3, #24]
  }
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	2200      	movs	r2, #0
 8007562:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	2200      	movs	r2, #0
 8007572:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff ff9b 	bl	80074b0 <I2C_TreatErrorCallback>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007592:	e022      	b.n	80075da <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800759a:	d01e      	beq.n	80075da <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759c:	f7fb fbf2 	bl	8002d84 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d302      	bcc.n	80075b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d113      	bne.n	80075da <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e00f      	b.n	80075fa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d0cd      	beq.n	8007594 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800760e:	e02c      	b.n	800766a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f871 	bl	80076fc <I2C_IsErrorOccurred>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e02a      	b.n	800767a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762a:	d01e      	beq.n	800766a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762c:	f7fb fbaa 	bl	8002d84 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	429a      	cmp	r2, r3
 800763a:	d302      	bcc.n	8007642 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d113      	bne.n	800766a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e007      	b.n	800767a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b02      	cmp	r3, #2
 8007676:	d1cb      	bne.n	8007610 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800768e:	e028      	b.n	80076e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f831 	bl	80076fc <I2C_IsErrorOccurred>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e026      	b.n	80076f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a4:	f7fb fb6e 	bl	8002d84 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d302      	bcc.n	80076ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d113      	bne.n	80076e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e007      	b.n	80076f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d1cf      	bne.n	8007690 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	2b00      	cmp	r3, #0
 8007726:	d075      	beq.n	8007814 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2210      	movs	r2, #16
 800772e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007730:	e056      	b.n	80077e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007738:	d052      	beq.n	80077e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800773a:	f7fb fb23 	bl	8002d84 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <I2C_IsErrorOccurred+0x54>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d147      	bne.n	80077e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800775a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007762:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007772:	d12e      	bne.n	80077d2 <I2C_IsErrorOccurred+0xd6>
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777a:	d02a      	beq.n	80077d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800777c:	7cfb      	ldrb	r3, [r7, #19]
 800777e:	2b20      	cmp	r3, #32
 8007780:	d027      	beq.n	80077d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007790:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007792:	f7fb faf7 	bl	8002d84 <HAL_GetTick>
 8007796:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007798:	e01b      	b.n	80077d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800779a:	f7fb faf3 	bl	8002d84 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b19      	cmp	r3, #25
 80077a6:	d914      	bls.n	80077d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ac:	f043 0220 	orr.w	r2, r3, #32
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d1dc      	bne.n	800779a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d003      	beq.n	80077f6 <I2C_IsErrorOccurred+0xfa>
 80077ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d09d      	beq.n	8007732 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80077f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2220      	movs	r2, #32
 8007804:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f043 0304 	orr.w	r3, r3, #4
 800780c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f043 0308 	orr.w	r3, r3, #8
 800784e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f043 0302 	orr.w	r3, r3, #2
 8007870:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800787a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01c      	beq.n	80078c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fe37 	bl	80074fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6859      	ldr	r1, [r3, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <I2C_IsErrorOccurred+0x1d4>)
 800789c:	400b      	ands	r3, r1
 800789e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80078c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	; 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	fe00e800 	.word	0xfe00e800

080078d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	817b      	strh	r3, [r7, #10]
 80078e2:	4613      	mov	r3, r2
 80078e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078e6:	897b      	ldrh	r3, [r7, #10]
 80078e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078ec:	7a7b      	ldrb	r3, [r7, #9]
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078f4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007902:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	0d5b      	lsrs	r3, r3, #21
 800790e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007912:	4b08      	ldr	r3, [pc, #32]	; (8007934 <I2C_TransferConfig+0x60>)
 8007914:	430b      	orrs	r3, r1
 8007916:	43db      	mvns	r3, r3
 8007918:	ea02 0103 	and.w	r1, r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	03ff63ff 	.word	0x03ff63ff

08007938 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007948:	887b      	ldrh	r3, [r7, #2]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00f      	beq.n	8007972 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007958:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007960:	b2db      	uxtb	r3, r3
 8007962:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007966:	2b28      	cmp	r3, #40	; 0x28
 8007968:	d003      	beq.n	8007972 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007970:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007972:	887b      	ldrh	r3, [r7, #2]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00f      	beq.n	800799c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007982:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007990:	2b28      	cmp	r3, #40	; 0x28
 8007992:	d003      	beq.n	800799c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800799a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800799c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da03      	bge.n	80079ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80079aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80079ac:	887b      	ldrh	r3, [r7, #2]
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d103      	bne.n	80079ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80079b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d103      	bne.n	80079c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f043 0320 	orr.w	r3, r3, #32
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80079c8:	887b      	ldrh	r3, [r7, #2]
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d103      	bne.n	80079d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6819      	ldr	r1, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	43da      	mvns	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	400a      	ands	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d138      	bne.n	8007a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e032      	b.n	8007a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2224      	movs	r2, #36	; 0x24
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0201 	bic.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6819      	ldr	r1, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e000      	b.n	8007a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a7c:	2302      	movs	r3, #2
  }
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d139      	bne.n	8007b14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e033      	b.n	8007b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2224      	movs	r2, #36	; 0x24
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0201 	bic.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007adc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e000      	b.n	8007b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
  }
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
	...

08007b24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007b2c:	4b29      	ldr	r3, [pc, #164]	; (8007bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	d00a      	beq.n	8007b4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007b38:	4b26      	ldr	r3, [pc, #152]	; (8007bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d001      	beq.n	8007b4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e03f      	b.n	8007bca <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e03d      	b.n	8007bca <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007b56:	491f      	ldr	r1, [pc, #124]	; (8007bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007b5e:	f7fb f911 	bl	8002d84 <HAL_GetTick>
 8007b62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b64:	e009      	b.n	8007b7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007b66:	f7fb f90d 	bl	8002d84 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b74:	d901      	bls.n	8007b7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e027      	b.n	8007bca <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b86:	d1ee      	bne.n	8007b66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b1e      	cmp	r3, #30
 8007b8c:	d008      	beq.n	8007ba0 <HAL_PWREx_ConfigSupply+0x7c>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b2e      	cmp	r3, #46	; 0x2e
 8007b92:	d005      	beq.n	8007ba0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b1d      	cmp	r3, #29
 8007b98:	d002      	beq.n	8007ba0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b2d      	cmp	r3, #45	; 0x2d
 8007b9e:	d113      	bne.n	8007bc8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007ba0:	f7fb f8f0 	bl	8002d84 <HAL_GetTick>
 8007ba4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007ba6:	e009      	b.n	8007bbc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ba8:	f7fb f8ec 	bl	8002d84 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb6:	d901      	bls.n	8007bbc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e006      	b.n	8007bca <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0311 	and.w	r3, r3, #17
 8007bc4:	2b11      	cmp	r3, #17
 8007bc6:	d1ef      	bne.n	8007ba8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	58024800 	.word	0x58024800

08007bd8 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e02d      	b.n	8007c46 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0220 	bic.w	r2, r2, #32
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c12:	f023 030f 	bic.w	r3, r3, #15
 8007c16:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 021c 	bic.w	r2, r2, #28
 8007c26:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0207 	bic.w	r2, r2, #7
 8007c36:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08c      	sub	sp, #48	; 0x30
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e397      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8087 	beq.w	8007d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c74:	4b9e      	ldr	r3, [pc, #632]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c7e:	4b9c      	ldr	r3, [pc, #624]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d007      	beq.n	8007c9a <HAL_RCC_OscConfig+0x46>
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	2b18      	cmp	r3, #24
 8007c8e:	d110      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x5e>
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d10b      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c9a:	4b95      	ldr	r3, [pc, #596]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d06c      	beq.n	8007d80 <HAL_RCC_OscConfig+0x12c>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d168      	bne.n	8007d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e371      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cba:	d106      	bne.n	8007cca <HAL_RCC_OscConfig+0x76>
 8007cbc:	4b8c      	ldr	r3, [pc, #560]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a8b      	ldr	r2, [pc, #556]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e02e      	b.n	8007d28 <HAL_RCC_OscConfig+0xd4>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <HAL_RCC_OscConfig+0x98>
 8007cd2:	4b87      	ldr	r3, [pc, #540]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a86      	ldr	r2, [pc, #536]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	4b84      	ldr	r3, [pc, #528]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a83      	ldr	r2, [pc, #524]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	e01d      	b.n	8007d28 <HAL_RCC_OscConfig+0xd4>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cf4:	d10c      	bne.n	8007d10 <HAL_RCC_OscConfig+0xbc>
 8007cf6:	4b7e      	ldr	r3, [pc, #504]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7d      	ldr	r2, [pc, #500]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	4b7b      	ldr	r3, [pc, #492]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a7a      	ldr	r2, [pc, #488]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	e00b      	b.n	8007d28 <HAL_RCC_OscConfig+0xd4>
 8007d10:	4b77      	ldr	r3, [pc, #476]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a76      	ldr	r2, [pc, #472]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	4b74      	ldr	r3, [pc, #464]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a73      	ldr	r2, [pc, #460]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d013      	beq.n	8007d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fb f828 	bl	8002d84 <HAL_GetTick>
 8007d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d38:	f7fb f824 	bl	8002d84 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b64      	cmp	r3, #100	; 0x64
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e325      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d4a:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0f0      	beq.n	8007d38 <HAL_RCC_OscConfig+0xe4>
 8007d56:	e014      	b.n	8007d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d58:	f7fb f814 	bl	8002d84 <HAL_GetTick>
 8007d5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d60:	f7fb f810 	bl	8002d84 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e311      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d72:	4b5f      	ldr	r3, [pc, #380]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f0      	bne.n	8007d60 <HAL_RCC_OscConfig+0x10c>
 8007d7e:	e000      	b.n	8007d82 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 808a 	beq.w	8007ea4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d90:	4b57      	ldr	r3, [pc, #348]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d9a:	4b55      	ldr	r3, [pc, #340]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <HAL_RCC_OscConfig+0x162>
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	2b18      	cmp	r3, #24
 8007daa:	d137      	bne.n	8007e1c <HAL_RCC_OscConfig+0x1c8>
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d132      	bne.n	8007e1c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007db6:	4b4e      	ldr	r3, [pc, #312]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_RCC_OscConfig+0x17a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e2e3      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dce:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f023 0219 	bic.w	r2, r3, #25
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	4945      	ldr	r1, [pc, #276]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007de0:	f7fa ffd0 	bl	8002d84 <HAL_GetTick>
 8007de4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007de8:	f7fa ffcc 	bl	8002d84 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e2cd      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dfa:	4b3d      	ldr	r3, [pc, #244]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e06:	4b3a      	ldr	r3, [pc, #232]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	061b      	lsls	r3, r3, #24
 8007e14:	4936      	ldr	r1, [pc, #216]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e1a:	e043      	b.n	8007ea4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d026      	beq.n	8007e72 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e24:	4b32      	ldr	r3, [pc, #200]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f023 0219 	bic.w	r2, r3, #25
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	492f      	ldr	r1, [pc, #188]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e36:	f7fa ffa5 	bl	8002d84 <HAL_GetTick>
 8007e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e3c:	e008      	b.n	8007e50 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e3e:	f7fa ffa1 	bl	8002d84 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e2a2      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e50:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0f0      	beq.n	8007e3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e5c:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	061b      	lsls	r3, r3, #24
 8007e6a:	4921      	ldr	r1, [pc, #132]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	604b      	str	r3, [r1, #4]
 8007e70:	e018      	b.n	8007ea4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e72:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7e:	f7fa ff81 	bl	8002d84 <HAL_GetTick>
 8007e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e86:	f7fa ff7d 	bl	8002d84 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e27e      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f0      	bne.n	8007e86 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d06d      	beq.n	8007f8c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eb8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	2b08      	cmp	r3, #8
 8007ec4:	d007      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x282>
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	2b18      	cmp	r3, #24
 8007eca:	d11e      	bne.n	8007f0a <HAL_RCC_OscConfig+0x2b6>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d119      	bne.n	8007f0a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <HAL_RCC_OscConfig+0x29c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x2a0>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	2b80      	cmp	r3, #128	; 0x80
 8007ee8:	d004      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e253      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
 8007eee:	bf00      	nop
 8007ef0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ef4:	4ba3      	ldr	r3, [pc, #652]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	061b      	lsls	r3, r3, #24
 8007f02:	49a0      	ldr	r1, [pc, #640]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f08:	e040      	b.n	8007f8c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d023      	beq.n	8007f5a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f12:	4b9c      	ldr	r3, [pc, #624]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a9b      	ldr	r2, [pc, #620]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1e:	f7fa ff31 	bl	8002d84 <HAL_GetTick>
 8007f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f24:	e008      	b.n	8007f38 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f26:	f7fa ff2d 	bl	8002d84 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d901      	bls.n	8007f38 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e22e      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f38:	4b92      	ldr	r3, [pc, #584]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0f0      	beq.n	8007f26 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f44:	4b8f      	ldr	r3, [pc, #572]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	061b      	lsls	r3, r3, #24
 8007f52:	498c      	ldr	r1, [pc, #560]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60cb      	str	r3, [r1, #12]
 8007f58:	e018      	b.n	8007f8c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f5a:	4b8a      	ldr	r3, [pc, #552]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a89      	ldr	r2, [pc, #548]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f66:	f7fa ff0d 	bl	8002d84 <HAL_GetTick>
 8007f6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f6e:	f7fa ff09 	bl	8002d84 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e20a      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f80:	4b80      	ldr	r3, [pc, #512]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f0      	bne.n	8007f6e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d036      	beq.n	8008006 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d019      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fa0:	4b78      	ldr	r3, [pc, #480]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa4:	4a77      	ldr	r2, [pc, #476]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fac:	f7fa feea 	bl	8002d84 <HAL_GetTick>
 8007fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fb4:	f7fa fee6 	bl	8002d84 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e1e7      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007fc6:	4b6f      	ldr	r3, [pc, #444]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x360>
 8007fd2:	e018      	b.n	8008006 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fd4:	4b6b      	ldr	r3, [pc, #428]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd8:	4a6a      	ldr	r2, [pc, #424]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe0:	f7fa fed0 	bl	8002d84 <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fe8:	f7fa fecc 	bl	8002d84 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e1cd      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ffa:	4b62      	ldr	r3, [pc, #392]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8007ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d036      	beq.n	8008080 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d019      	beq.n	800804e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800801a:	4b5a      	ldr	r3, [pc, #360]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a59      	ldr	r2, [pc, #356]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008024:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008026:	f7fa fead 	bl	8002d84 <HAL_GetTick>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800802c:	e008      	b.n	8008040 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800802e:	f7fa fea9 	bl	8002d84 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e1aa      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008040:	4b50      	ldr	r3, [pc, #320]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0f0      	beq.n	800802e <HAL_RCC_OscConfig+0x3da>
 800804c:	e018      	b.n	8008080 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800804e:	4b4d      	ldr	r3, [pc, #308]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a4c      	ldr	r2, [pc, #304]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008058:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800805a:	f7fa fe93 	bl	8002d84 <HAL_GetTick>
 800805e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008060:	e008      	b.n	8008074 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008062:	f7fa fe8f 	bl	8002d84 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e190      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008074:	4b43      	ldr	r3, [pc, #268]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f0      	bne.n	8008062 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8085 	beq.w	8008198 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800808e:	4b3e      	ldr	r3, [pc, #248]	; (8008188 <HAL_RCC_OscConfig+0x534>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3d      	ldr	r2, [pc, #244]	; (8008188 <HAL_RCC_OscConfig+0x534>)
 8008094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008098:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800809a:	f7fa fe73 	bl	8002d84 <HAL_GetTick>
 800809e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080a0:	e008      	b.n	80080b4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80080a2:	f7fa fe6f 	bl	8002d84 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b64      	cmp	r3, #100	; 0x64
 80080ae:	d901      	bls.n	80080b4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e170      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080b4:	4b34      	ldr	r3, [pc, #208]	; (8008188 <HAL_RCC_OscConfig+0x534>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0f0      	beq.n	80080a2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d106      	bne.n	80080d6 <HAL_RCC_OscConfig+0x482>
 80080c8:	4b2e      	ldr	r3, [pc, #184]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 80080ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080cc:	4a2d      	ldr	r2, [pc, #180]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	6713      	str	r3, [r2, #112]	; 0x70
 80080d4:	e02d      	b.n	8008132 <HAL_RCC_OscConfig+0x4de>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10c      	bne.n	80080f8 <HAL_RCC_OscConfig+0x4a4>
 80080de:	4b29      	ldr	r3, [pc, #164]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	4a28      	ldr	r2, [pc, #160]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	6713      	str	r3, [r2, #112]	; 0x70
 80080ea:	4b26      	ldr	r3, [pc, #152]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	4a25      	ldr	r2, [pc, #148]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 80080f0:	f023 0304 	bic.w	r3, r3, #4
 80080f4:	6713      	str	r3, [r2, #112]	; 0x70
 80080f6:	e01c      	b.n	8008132 <HAL_RCC_OscConfig+0x4de>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b05      	cmp	r3, #5
 80080fe:	d10c      	bne.n	800811a <HAL_RCC_OscConfig+0x4c6>
 8008100:	4b20      	ldr	r3, [pc, #128]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	4a1f      	ldr	r2, [pc, #124]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008106:	f043 0304 	orr.w	r3, r3, #4
 800810a:	6713      	str	r3, [r2, #112]	; 0x70
 800810c:	4b1d      	ldr	r3, [pc, #116]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 800810e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008110:	4a1c      	ldr	r2, [pc, #112]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	6713      	str	r3, [r2, #112]	; 0x70
 8008118:	e00b      	b.n	8008132 <HAL_RCC_OscConfig+0x4de>
 800811a:	4b1a      	ldr	r3, [pc, #104]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	4a19      	ldr	r2, [pc, #100]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	6713      	str	r3, [r2, #112]	; 0x70
 8008126:	4b17      	ldr	r3, [pc, #92]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a16      	ldr	r2, [pc, #88]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 800812c:	f023 0304 	bic.w	r3, r3, #4
 8008130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d015      	beq.n	8008166 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813a:	f7fa fe23 	bl	8002d84 <HAL_GetTick>
 800813e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008140:	e00a      	b.n	8008158 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008142:	f7fa fe1f 	bl	8002d84 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008150:	4293      	cmp	r3, r2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e11e      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <HAL_RCC_OscConfig+0x530>)
 800815a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0ee      	beq.n	8008142 <HAL_RCC_OscConfig+0x4ee>
 8008164:	e018      	b.n	8008198 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008166:	f7fa fe0d 	bl	8002d84 <HAL_GetTick>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800816c:	e00e      	b.n	800818c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800816e:	f7fa fe09 	bl	8002d84 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	f241 3288 	movw	r2, #5000	; 0x1388
 800817c:	4293      	cmp	r3, r2
 800817e:	d905      	bls.n	800818c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e108      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
 8008184:	58024400 	.word	0x58024400
 8008188:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800818c:	4b84      	ldr	r3, [pc, #528]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1ea      	bne.n	800816e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 80f9 	beq.w	8008394 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80081a2:	4b7f      	ldr	r3, [pc, #508]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081aa:	2b18      	cmp	r3, #24
 80081ac:	f000 80b4 	beq.w	8008318 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	f040 8095 	bne.w	80082e4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ba:	4b79      	ldr	r3, [pc, #484]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a78      	ldr	r2, [pc, #480]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80081c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c6:	f7fa fddd 	bl	8002d84 <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ce:	f7fa fdd9 	bl	8002d84 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e0da      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081e0:	4b6f      	ldr	r3, [pc, #444]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f0      	bne.n	80081ce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081ec:	4b6c      	ldr	r3, [pc, #432]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80081ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081f0:	4b6c      	ldr	r3, [pc, #432]	; (80083a4 <HAL_RCC_OscConfig+0x750>)
 80081f2:	4013      	ands	r3, r2
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081fc:	0112      	lsls	r2, r2, #4
 80081fe:	430a      	orrs	r2, r1
 8008200:	4967      	ldr	r1, [pc, #412]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	628b      	str	r3, [r1, #40]	; 0x28
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820a:	3b01      	subs	r3, #1
 800820c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	3b01      	subs	r3, #1
 8008216:	025b      	lsls	r3, r3, #9
 8008218:	b29b      	uxth	r3, r3
 800821a:	431a      	orrs	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	3b01      	subs	r3, #1
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	3b01      	subs	r3, #1
 8008230:	061b      	lsls	r3, r3, #24
 8008232:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008236:	495a      	ldr	r1, [pc, #360]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008238:	4313      	orrs	r3, r2
 800823a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800823c:	4b58      	ldr	r3, [pc, #352]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	4a57      	ldr	r2, [pc, #348]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008242:	f023 0301 	bic.w	r3, r3, #1
 8008246:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008248:	4b55      	ldr	r3, [pc, #340]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800824a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800824c:	4b56      	ldr	r3, [pc, #344]	; (80083a8 <HAL_RCC_OscConfig+0x754>)
 800824e:	4013      	ands	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008254:	00d2      	lsls	r2, r2, #3
 8008256:	4952      	ldr	r1, [pc, #328]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008258:	4313      	orrs	r3, r2
 800825a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800825c:	4b50      	ldr	r3, [pc, #320]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	f023 020c 	bic.w	r2, r3, #12
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	494d      	ldr	r1, [pc, #308]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800826a:	4313      	orrs	r3, r2
 800826c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800826e:	4b4c      	ldr	r3, [pc, #304]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	f023 0202 	bic.w	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827a:	4949      	ldr	r1, [pc, #292]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800827c:	4313      	orrs	r3, r2
 800827e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008280:	4b47      	ldr	r3, [pc, #284]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	4a46      	ldr	r2, [pc, #280]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800828a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800828c:	4b44      	ldr	r3, [pc, #272]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	4a43      	ldr	r2, [pc, #268]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008298:	4b41      	ldr	r3, [pc, #260]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	4a40      	ldr	r2, [pc, #256]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800829e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80082a4:	4b3e      	ldr	r3, [pc, #248]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082b0:	4b3b      	ldr	r3, [pc, #236]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a3a      	ldr	r2, [pc, #232]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fa fd62 	bl	8002d84 <HAL_GetTick>
 80082c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082c4:	f7fa fd5e 	bl	8002d84 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e05f      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082d6:	4b32      	ldr	r3, [pc, #200]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCC_OscConfig+0x670>
 80082e2:	e057      	b.n	8008394 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e4:	4b2e      	ldr	r3, [pc, #184]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a2d      	ldr	r2, [pc, #180]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 80082ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fa fd48 	bl	8002d84 <HAL_GetTick>
 80082f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fa fd44 	bl	8002d84 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e045      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800830a:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0x6a4>
 8008316:	e03d      	b.n	8008394 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008318:	4b21      	ldr	r3, [pc, #132]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800831e:	4b20      	ldr	r3, [pc, #128]	; (80083a0 <HAL_RCC_OscConfig+0x74c>)
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b01      	cmp	r3, #1
 800832a:	d031      	beq.n	8008390 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f003 0203 	and.w	r2, r3, #3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008336:	429a      	cmp	r2, r3
 8008338:	d12a      	bne.n	8008390 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008346:	429a      	cmp	r2, r3
 8008348:	d122      	bne.n	8008390 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008356:	429a      	cmp	r2, r3
 8008358:	d11a      	bne.n	8008390 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	0a5b      	lsrs	r3, r3, #9
 800835e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008368:	429a      	cmp	r2, r3
 800836a:	d111      	bne.n	8008390 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800837a:	429a      	cmp	r2, r3
 800837c:	d108      	bne.n	8008390 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	0e1b      	lsrs	r3, r3, #24
 8008382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3730      	adds	r7, #48	; 0x30
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
 80083a4:	fffffc0c 	.word	0xfffffc0c
 80083a8:	ffff0007 	.word	0xffff0007

080083ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d101      	bne.n	80083c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e19c      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083c0:	4b8a      	ldr	r3, [pc, #552]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d910      	bls.n	80083f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ce:	4b87      	ldr	r3, [pc, #540]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f023 020f 	bic.w	r2, r3, #15
 80083d6:	4985      	ldr	r1, [pc, #532]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	4313      	orrs	r3, r2
 80083dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083de:	4b83      	ldr	r3, [pc, #524]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d001      	beq.n	80083f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e184      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d010      	beq.n	800841e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	4b7b      	ldr	r3, [pc, #492]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008408:	429a      	cmp	r2, r3
 800840a:	d908      	bls.n	800841e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800840c:	4b78      	ldr	r3, [pc, #480]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	4975      	ldr	r1, [pc, #468]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800841a:	4313      	orrs	r3, r2
 800841c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d010      	beq.n	800844c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	4b70      	ldr	r3, [pc, #448]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008436:	429a      	cmp	r2, r3
 8008438:	d908      	bls.n	800844c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800843a:	4b6d      	ldr	r3, [pc, #436]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	496a      	ldr	r1, [pc, #424]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 8008448:	4313      	orrs	r3, r2
 800844a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d010      	beq.n	800847a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699a      	ldr	r2, [r3, #24]
 800845c:	4b64      	ldr	r3, [pc, #400]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008464:	429a      	cmp	r2, r3
 8008466:	d908      	bls.n	800847a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008468:	4b61      	ldr	r3, [pc, #388]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	495e      	ldr	r1, [pc, #376]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 8008476:	4313      	orrs	r3, r2
 8008478:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b00      	cmp	r3, #0
 8008484:	d010      	beq.n	80084a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69da      	ldr	r2, [r3, #28]
 800848a:	4b59      	ldr	r3, [pc, #356]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008492:	429a      	cmp	r2, r3
 8008494:	d908      	bls.n	80084a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008496:	4b56      	ldr	r3, [pc, #344]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	4953      	ldr	r1, [pc, #332]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d010      	beq.n	80084d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	4b4d      	ldr	r3, [pc, #308]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d908      	bls.n	80084d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084c4:	4b4a      	ldr	r3, [pc, #296]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f023 020f 	bic.w	r2, r3, #15
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	4947      	ldr	r1, [pc, #284]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d055      	beq.n	800858e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084e2:	4b43      	ldr	r3, [pc, #268]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	4940      	ldr	r1, [pc, #256]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d107      	bne.n	800850c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084fc:	4b3c      	ldr	r3, [pc, #240]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d121      	bne.n	800854c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0f6      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b03      	cmp	r3, #3
 8008512:	d107      	bne.n	8008524 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008514:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d115      	bne.n	800854c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e0ea      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d107      	bne.n	800853c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800852c:	4b30      	ldr	r3, [pc, #192]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0de      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800853c:	4b2c      	ldr	r3, [pc, #176]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e0d6      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	f023 0207 	bic.w	r2, r3, #7
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4925      	ldr	r1, [pc, #148]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855e:	f7fa fc11 	bl	8002d84 <HAL_GetTick>
 8008562:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008564:	e00a      	b.n	800857c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008566:	f7fa fc0d 	bl	8002d84 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	f241 3288 	movw	r2, #5000	; 0x1388
 8008574:	4293      	cmp	r3, r2
 8008576:	d901      	bls.n	800857c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e0be      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800857c:	4b1c      	ldr	r3, [pc, #112]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	00db      	lsls	r3, r3, #3
 800858a:	429a      	cmp	r2, r3
 800858c:	d1eb      	bne.n	8008566 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d010      	beq.n	80085bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d208      	bcs.n	80085bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f023 020f 	bic.w	r2, r3, #15
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	490e      	ldr	r1, [pc, #56]	; (80085f0 <HAL_RCC_ClockConfig+0x244>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085bc:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d214      	bcs.n	80085f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ca:	4b08      	ldr	r3, [pc, #32]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f023 020f 	bic.w	r2, r3, #15
 80085d2:	4906      	ldr	r1, [pc, #24]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085da:	4b04      	ldr	r3, [pc, #16]	; (80085ec <HAL_RCC_ClockConfig+0x240>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d005      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e086      	b.n	80086fa <HAL_RCC_ClockConfig+0x34e>
 80085ec:	52002000 	.word	0x52002000
 80085f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d010      	beq.n	8008622 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800860c:	429a      	cmp	r2, r3
 800860e:	d208      	bcs.n	8008622 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008610:	4b3c      	ldr	r3, [pc, #240]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	4939      	ldr	r1, [pc, #228]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 800861e:	4313      	orrs	r3, r2
 8008620:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695a      	ldr	r2, [r3, #20]
 8008632:	4b34      	ldr	r3, [pc, #208]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800863a:	429a      	cmp	r2, r3
 800863c:	d208      	bcs.n	8008650 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800863e:	4b31      	ldr	r3, [pc, #196]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	492e      	ldr	r1, [pc, #184]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 800864c:	4313      	orrs	r3, r2
 800864e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b00      	cmp	r3, #0
 800865a:	d010      	beq.n	800867e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	4b28      	ldr	r3, [pc, #160]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008668:	429a      	cmp	r2, r3
 800866a:	d208      	bcs.n	800867e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800866c:	4b25      	ldr	r3, [pc, #148]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	4922      	ldr	r1, [pc, #136]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 800867a:	4313      	orrs	r3, r2
 800867c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b00      	cmp	r3, #0
 8008688:	d010      	beq.n	80086ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69da      	ldr	r2, [r3, #28]
 800868e:	4b1d      	ldr	r3, [pc, #116]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008696:	429a      	cmp	r2, r3
 8008698:	d208      	bcs.n	80086ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800869a:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	4917      	ldr	r1, [pc, #92]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80086ac:	f000 f834 	bl	8008718 <HAL_RCC_GetSysClockFreq>
 80086b0:	4602      	mov	r2, r0
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	4912      	ldr	r1, [pc, #72]	; (8008708 <HAL_RCC_ClockConfig+0x35c>)
 80086be:	5ccb      	ldrb	r3, [r1, r3]
 80086c0:	f003 031f 	and.w	r3, r3, #31
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <HAL_RCC_ClockConfig+0x358>)
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f003 030f 	and.w	r3, r3, #15
 80086d2:	4a0d      	ldr	r2, [pc, #52]	; (8008708 <HAL_RCC_ClockConfig+0x35c>)
 80086d4:	5cd3      	ldrb	r3, [r2, r3]
 80086d6:	f003 031f 	and.w	r3, r3, #31
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <HAL_RCC_ClockConfig+0x360>)
 80086e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086e4:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <HAL_RCC_ClockConfig+0x364>)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <HAL_RCC_ClockConfig+0x368>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fa fafe 	bl	8002cf0 <HAL_InitTick>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	58024400 	.word	0x58024400
 8008708:	0800eb84 	.word	0x0800eb84
 800870c:	2400046c 	.word	0x2400046c
 8008710:	24000468 	.word	0x24000468
 8008714:	24000454 	.word	0x24000454

08008718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008718:	b480      	push	{r7}
 800871a:	b089      	sub	sp, #36	; 0x24
 800871c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800871e:	4bb3      	ldr	r3, [pc, #716]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008726:	2b18      	cmp	r3, #24
 8008728:	f200 8155 	bhi.w	80089d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <HAL_RCC_GetSysClockFreq+0x1c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008799 	.word	0x08008799
 8008738:	080089d7 	.word	0x080089d7
 800873c:	080089d7 	.word	0x080089d7
 8008740:	080089d7 	.word	0x080089d7
 8008744:	080089d7 	.word	0x080089d7
 8008748:	080089d7 	.word	0x080089d7
 800874c:	080089d7 	.word	0x080089d7
 8008750:	080089d7 	.word	0x080089d7
 8008754:	080087bf 	.word	0x080087bf
 8008758:	080089d7 	.word	0x080089d7
 800875c:	080089d7 	.word	0x080089d7
 8008760:	080089d7 	.word	0x080089d7
 8008764:	080089d7 	.word	0x080089d7
 8008768:	080089d7 	.word	0x080089d7
 800876c:	080089d7 	.word	0x080089d7
 8008770:	080089d7 	.word	0x080089d7
 8008774:	080087c5 	.word	0x080087c5
 8008778:	080089d7 	.word	0x080089d7
 800877c:	080089d7 	.word	0x080089d7
 8008780:	080089d7 	.word	0x080089d7
 8008784:	080089d7 	.word	0x080089d7
 8008788:	080089d7 	.word	0x080089d7
 800878c:	080089d7 	.word	0x080089d7
 8008790:	080089d7 	.word	0x080089d7
 8008794:	080087cb 	.word	0x080087cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008798:	4b94      	ldr	r3, [pc, #592]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087a4:	4b91      	ldr	r3, [pc, #580]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	08db      	lsrs	r3, r3, #3
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	4a90      	ldr	r2, [pc, #576]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
 80087b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80087b6:	e111      	b.n	80089dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80087b8:	4b8d      	ldr	r3, [pc, #564]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087ba:	61bb      	str	r3, [r7, #24]
    break;
 80087bc:	e10e      	b.n	80089dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80087be:	4b8d      	ldr	r3, [pc, #564]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087c0:	61bb      	str	r3, [r7, #24]
    break;
 80087c2:	e10b      	b.n	80089dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80087c4:	4b8c      	ldr	r3, [pc, #560]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80087c6:	61bb      	str	r3, [r7, #24]
    break;
 80087c8:	e108      	b.n	80089dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087ca:	4b88      	ldr	r3, [pc, #544]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ce:	f003 0303 	and.w	r3, r3, #3
 80087d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80087d4:	4b85      	ldr	r3, [pc, #532]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	091b      	lsrs	r3, r3, #4
 80087da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087e0:	4b82      	ldr	r3, [pc, #520]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087ea:	4b80      	ldr	r3, [pc, #512]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ee:	08db      	lsrs	r3, r3, #3
 80087f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	fb02 f303 	mul.w	r3, r2, r3
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80e1 	beq.w	80089d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b02      	cmp	r3, #2
 8008812:	f000 8083 	beq.w	800891c <HAL_RCC_GetSysClockFreq+0x204>
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b02      	cmp	r3, #2
 800881a:	f200 80a1 	bhi.w	8008960 <HAL_RCC_GetSysClockFreq+0x248>
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_RCC_GetSysClockFreq+0x114>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d056      	beq.n	80088d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800882a:	e099      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800882c:	4b6f      	ldr	r3, [pc, #444]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02d      	beq.n	8008894 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008838:	4b6c      	ldr	r3, [pc, #432]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	08db      	lsrs	r3, r3, #3
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	4a6b      	ldr	r2, [pc, #428]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
 8008848:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008862:	4b62      	ldr	r3, [pc, #392]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008872:	ed97 6a02 	vldr	s12, [r7, #8]
 8008876:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800887a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008892:	e087      	b.n	80089a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008a00 <HAL_RCC_GetSysClockFreq+0x2e8>
 80088a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a6:	4b51      	ldr	r3, [pc, #324]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80088be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d6:	e065      	b.n	80089a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ea:	4b40      	ldr	r3, [pc, #256]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80088fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800890e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891a:	e043      	b.n	80089a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x2f0>
 800892a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892e:	4b2f      	ldr	r3, [pc, #188]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008942:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800895e:	e021      	b.n	80089a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 800896e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008972:	4b1e      	ldr	r3, [pc, #120]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008982:	ed97 6a02 	vldr	s12, [r7, #8]
 8008986:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800898a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80089a4:	4b11      	ldr	r3, [pc, #68]	; (80089ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	0a5b      	lsrs	r3, r3, #9
 80089aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ae:	3301      	adds	r3, #1
 80089b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c8:	ee17 3a90 	vmov	r3, s15
 80089cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80089ce:	e005      	b.n	80089dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61bb      	str	r3, [r7, #24]
    break;
 80089d4:	e002      	b.n	80089dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80089d6:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089d8:	61bb      	str	r3, [r7, #24]
    break;
 80089da:	bf00      	nop
  }

  return sysclockfreq;
 80089dc:	69bb      	ldr	r3, [r7, #24]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3724      	adds	r7, #36	; 0x24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	58024400 	.word	0x58024400
 80089f0:	03d09000 	.word	0x03d09000
 80089f4:	003d0900 	.word	0x003d0900
 80089f8:	017d7840 	.word	0x017d7840
 80089fc:	46000000 	.word	0x46000000
 8008a00:	4c742400 	.word	0x4c742400
 8008a04:	4a742400 	.word	0x4a742400
 8008a08:	4bbebc20 	.word	0x4bbebc20

08008a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a12:	f7ff fe81 	bl	8008718 <HAL_RCC_GetSysClockFreq>
 8008a16:	4602      	mov	r2, r0
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	490f      	ldr	r1, [pc, #60]	; (8008a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a24:	5ccb      	ldrb	r3, [r1, r3]
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a30:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <HAL_RCC_GetHCLKFreq+0x50>)
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	4a09      	ldr	r2, [pc, #36]	; (8008a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a3a:	5cd3      	ldrb	r3, [r2, r3]
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	fa22 f303 	lsr.w	r3, r2, r3
 8008a46:	4a07      	ldr	r2, [pc, #28]	; (8008a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a4a:	4a07      	ldr	r2, [pc, #28]	; (8008a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a52:	681b      	ldr	r3, [r3, #0]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	0800eb84 	.word	0x0800eb84
 8008a64:	2400046c 	.word	0x2400046c
 8008a68:	24000468 	.word	0x24000468

08008a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a70:	f7ff ffcc 	bl	8008a0c <HAL_RCC_GetHCLKFreq>
 8008a74:	4602      	mov	r2, r0
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a82:	5ccb      	ldrb	r3, [r1, r3]
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	58024400 	.word	0x58024400
 8008a94:	0800eb84 	.word	0x0800eb84

08008a98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d03f      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008abc:	d02a      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008abe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ac2:	d824      	bhi.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ac8:	d018      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ace:	d81e      	bhi.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ad8:	d007      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ada:	e018      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008adc:	4bab      	ldr	r3, [pc, #684]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	4aaa      	ldr	r2, [pc, #680]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ae8:	e015      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3304      	adds	r3, #4
 8008aee:	2102      	movs	r1, #2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 feff 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008afa:	e00c      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3324      	adds	r3, #36	; 0x24
 8008b00:	2102      	movs	r1, #2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 ffa8 	bl	800aa58 <RCCEx_PLL3_Config>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b0c:	e003      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]
      break;
 8008b12:	e000      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b1c:	4b9b      	ldr	r3, [pc, #620]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b28:	4998      	ldr	r1, [pc, #608]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b2e:	e001      	b.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d03d      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d826      	bhi.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b65 	.word	0x08008b65
 8008b54:	08008b73 	.word	0x08008b73
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b9d 	.word	0x08008b9d
 8008b60:	08008b9d 	.word	0x08008b9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b64:	4b89      	ldr	r3, [pc, #548]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	4a88      	ldr	r2, [pc, #544]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b70:	e015      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3304      	adds	r3, #4
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 febb 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b82:	e00c      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3324      	adds	r3, #36	; 0x24
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 ff64 	bl	800aa58 <RCCEx_PLL3_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b94:	e003      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
      break;
 8008b9a:	e000      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d109      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ba4:	4b79      	ldr	r3, [pc, #484]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba8:	f023 0207 	bic.w	r2, r3, #7
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb0:	4976      	ldr	r1, [pc, #472]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	650b      	str	r3, [r1, #80]	; 0x50
 8008bb6:	e001      	b.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d051      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008bd2:	d036      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008bd4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008bd8:	d830      	bhi.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bde:	d032      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008be4:	d82a      	bhi.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008be6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bea:	d02e      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008bec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bf0:	d824      	bhi.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bf6:	d018      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bfc:	d81e      	bhi.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c06:	d007      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008c08:	e018      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c0a:	4b60      	ldr	r3, [pc, #384]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0e:	4a5f      	ldr	r2, [pc, #380]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c16:	e019      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 fe68 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c28:	e010      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3324      	adds	r3, #36	; 0x24
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 ff11 	bl	800aa58 <RCCEx_PLL3_Config>
 8008c36:	4603      	mov	r3, r0
 8008c38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c3a:	e007      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c40:	e004      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c42:	bf00      	nop
 8008c44:	e002      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c46:	bf00      	nop
 8008c48:	e000      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c52:	4b4e      	ldr	r3, [pc, #312]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c56:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c60:	494a      	ldr	r1, [pc, #296]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	658b      	str	r3, [r1, #88]	; 0x58
 8008c66:	e001      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d051      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c7e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c82:	d036      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008c84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c88:	d830      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c8e:	d032      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c94:	d82a      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c9a:	d02e      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008c9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ca0:	d824      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca6:	d018      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cac:	d81e      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cb6:	d007      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008cb8:	e018      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cba:	4b34      	ldr	r3, [pc, #208]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	4a33      	ldr	r2, [pc, #204]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cc6:	e019      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fe10 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cd8:	e010      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3324      	adds	r3, #36	; 0x24
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 feb9 	bl	800aa58 <RCCEx_PLL3_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cea:	e007      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf0:	e004      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cf2:	bf00      	nop
 8008cf4:	e002      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10a      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d02:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d06:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d10:	491e      	ldr	r1, [pc, #120]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	658b      	str	r3, [r1, #88]	; 0x58
 8008d16:	e001      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d035      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	d01c      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d30:	2b30      	cmp	r3, #48	; 0x30
 8008d32:	d817      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d00c      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d813      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d016      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008d40:	2b10      	cmp	r3, #16
 8008d42:	d10f      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d44:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	4a10      	ldr	r2, [pc, #64]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d50:	e00e      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	2102      	movs	r1, #2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 fdcb 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d62:	e005      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
      break;
 8008d68:	e002      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008d6a:	bf00      	nop
 8008d6c:	e000      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10c      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d82:	4902      	ldr	r1, [pc, #8]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d88:	e004      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008d8a:	bf00      	nop
 8008d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d047      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008da8:	d030      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dae:	d82a      	bhi.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008db0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008db4:	d02c      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008db6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dba:	d824      	bhi.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc0:	d018      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc6:	d81e      	bhi.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd0:	d007      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008dd2:	e018      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd4:	4bac      	ldr	r3, [pc, #688]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	4aab      	ldr	r2, [pc, #684]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008de0:	e017      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3304      	adds	r3, #4
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 fd83 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008df2:	e00e      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3324      	adds	r3, #36	; 0x24
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 fe2c 	bl	800aa58 <RCCEx_PLL3_Config>
 8008e00:	4603      	mov	r3, r0
 8008e02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e04:	e005      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0a:	e002      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e000      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d109      	bne.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e18:	4b9b      	ldr	r3, [pc, #620]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e24:	4998      	ldr	r1, [pc, #608]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	650b      	str	r3, [r1, #80]	; 0x50
 8008e2a:	e001      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d049      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e44:	d02e      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e4a:	d828      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e50:	d02a      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e56:	d822      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e5c:	d026      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e62:	d81c      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e68:	d010      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e6e:	d816      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01d      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e78:	d111      	bne.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 fd37 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e012      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3324      	adds	r3, #36	; 0x24
 8008e90:	2101      	movs	r1, #1
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fde0 	bl	800aa58 <RCCEx_PLL3_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e9c:	e009      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea2:	e006      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008ea4:	bf00      	nop
 8008ea6:	e004      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008ea8:	bf00      	nop
 8008eaa:	e002      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008eac:	bf00      	nop
 8008eae:	e000      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008eb8:	4b73      	ldr	r3, [pc, #460]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec4:	4970      	ldr	r1, [pc, #448]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	650b      	str	r3, [r1, #80]	; 0x50
 8008eca:	e001      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d04b      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ee6:	d02e      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eec:	d828      	bhi.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d02a      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef8:	d822      	bhi.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008efa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008efe:	d026      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008f00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f04:	d81c      	bhi.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f0a:	d010      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f10:	d816      	bhi.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d01d      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f1a:	d111      	bne.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	2101      	movs	r1, #1
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 fce6 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f2c:	e012      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3324      	adds	r3, #36	; 0x24
 8008f32:	2101      	movs	r1, #1
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 fd8f 	bl	800aa58 <RCCEx_PLL3_Config>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f3e:	e009      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
      break;
 8008f44:	e006      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f46:	bf00      	nop
 8008f48:	e004      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f4a:	bf00      	nop
 8008f4c:	e002      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f4e:	bf00      	nop
 8008f50:	e000      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f5a:	4b4b      	ldr	r3, [pc, #300]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f68:	4947      	ldr	r1, [pc, #284]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f6e:	e001      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02f      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f88:	d00e      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f8e:	d814      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d015      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f98:	d10f      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f9a:	4b3b      	ldr	r3, [pc, #236]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a3a      	ldr	r2, [pc, #232]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fa6:	e00c      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	2101      	movs	r1, #1
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fca0 	bl	800a8f4 <RCCEx_PLL2_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fb8:	e003      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fc8:	4b2f      	ldr	r3, [pc, #188]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd4:	492c      	ldr	r1, [pc, #176]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	650b      	str	r3, [r1, #80]	; 0x50
 8008fda:	e001      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d032      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d81b      	bhi.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009033 	.word	0x08009033
 8009000:	0800900d 	.word	0x0800900d
 8009004:	0800901b 	.word	0x0800901b
 8009008:	08009033 	.word	0x08009033
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	4a1d      	ldr	r2, [pc, #116]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009018:	e00c      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	2102      	movs	r1, #2
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fc67 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800902a:	e003      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	75fb      	strb	r3, [r7, #23]
      break;
 8009030:	e000      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d109      	bne.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800903a:	4b13      	ldr	r3, [pc, #76]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800903e:	f023 0203 	bic.w	r2, r3, #3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	4910      	ldr	r1, [pc, #64]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009048:	4313      	orrs	r3, r2
 800904a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800904c:	e001      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 808a 	beq.w	8009174 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a09      	ldr	r2, [pc, #36]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800906a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800906c:	f7f9 fe8a 	bl	8002d84 <HAL_GetTick>
 8009070:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009072:	e00d      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009074:	f7f9 fe86 	bl	8002d84 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b64      	cmp	r3, #100	; 0x64
 8009080:	d906      	bls.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	75fb      	strb	r3, [r7, #23]
        break;
 8009086:	e009      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009088:	58024400 	.word	0x58024400
 800908c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009090:	4bb9      	ldr	r3, [pc, #740]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0eb      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d166      	bne.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80090a2:	4bb6      	ldr	r3, [pc, #728]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090ac:	4053      	eors	r3, r2
 80090ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d013      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090b6:	4bb1      	ldr	r3, [pc, #708]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090c0:	4bae      	ldr	r3, [pc, #696]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c4:	4aad      	ldr	r2, [pc, #692]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090cc:	4bab      	ldr	r3, [pc, #684]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d0:	4aaa      	ldr	r2, [pc, #680]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090d8:	4aa8      	ldr	r2, [pc, #672]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e8:	d115      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ea:	f7f9 fe4b 	bl	8002d84 <HAL_GetTick>
 80090ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090f0:	e00b      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090f2:	f7f9 fe47 	bl	8002d84 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009100:	4293      	cmp	r3, r2
 8009102:	d902      	bls.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	75fb      	strb	r3, [r7, #23]
            break;
 8009108:	e005      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800910a:	4b9c      	ldr	r3, [pc, #624]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800910c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0ed      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d126      	bne.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912a:	d10d      	bne.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800912c:	4b93      	ldr	r3, [pc, #588]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800913a:	0919      	lsrs	r1, r3, #4
 800913c:	4b90      	ldr	r3, [pc, #576]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800913e:	400b      	ands	r3, r1
 8009140:	498e      	ldr	r1, [pc, #568]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009142:	4313      	orrs	r3, r2
 8009144:	610b      	str	r3, [r1, #16]
 8009146:	e005      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009148:	4b8c      	ldr	r3, [pc, #560]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	4a8b      	ldr	r2, [pc, #556]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800914e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009152:	6113      	str	r3, [r2, #16]
 8009154:	4b89      	ldr	r3, [pc, #548]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800915e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009162:	4986      	ldr	r1, [pc, #536]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009164:	4313      	orrs	r3, r2
 8009166:	670b      	str	r3, [r1, #112]	; 0x70
 8009168:	e004      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	75bb      	strb	r3, [r7, #22]
 800916e:	e001      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d07e      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009184:	2b28      	cmp	r3, #40	; 0x28
 8009186:	d867      	bhi.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009188:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918e:	bf00      	nop
 8009190:	0800925f 	.word	0x0800925f
 8009194:	08009259 	.word	0x08009259
 8009198:	08009259 	.word	0x08009259
 800919c:	08009259 	.word	0x08009259
 80091a0:	08009259 	.word	0x08009259
 80091a4:	08009259 	.word	0x08009259
 80091a8:	08009259 	.word	0x08009259
 80091ac:	08009259 	.word	0x08009259
 80091b0:	08009235 	.word	0x08009235
 80091b4:	08009259 	.word	0x08009259
 80091b8:	08009259 	.word	0x08009259
 80091bc:	08009259 	.word	0x08009259
 80091c0:	08009259 	.word	0x08009259
 80091c4:	08009259 	.word	0x08009259
 80091c8:	08009259 	.word	0x08009259
 80091cc:	08009259 	.word	0x08009259
 80091d0:	08009247 	.word	0x08009247
 80091d4:	08009259 	.word	0x08009259
 80091d8:	08009259 	.word	0x08009259
 80091dc:	08009259 	.word	0x08009259
 80091e0:	08009259 	.word	0x08009259
 80091e4:	08009259 	.word	0x08009259
 80091e8:	08009259 	.word	0x08009259
 80091ec:	08009259 	.word	0x08009259
 80091f0:	0800925f 	.word	0x0800925f
 80091f4:	08009259 	.word	0x08009259
 80091f8:	08009259 	.word	0x08009259
 80091fc:	08009259 	.word	0x08009259
 8009200:	08009259 	.word	0x08009259
 8009204:	08009259 	.word	0x08009259
 8009208:	08009259 	.word	0x08009259
 800920c:	08009259 	.word	0x08009259
 8009210:	0800925f 	.word	0x0800925f
 8009214:	08009259 	.word	0x08009259
 8009218:	08009259 	.word	0x08009259
 800921c:	08009259 	.word	0x08009259
 8009220:	08009259 	.word	0x08009259
 8009224:	08009259 	.word	0x08009259
 8009228:	08009259 	.word	0x08009259
 800922c:	08009259 	.word	0x08009259
 8009230:	0800925f 	.word	0x0800925f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3304      	adds	r3, #4
 8009238:	2101      	movs	r1, #1
 800923a:	4618      	mov	r0, r3
 800923c:	f001 fb5a 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009244:	e00c      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3324      	adds	r3, #36	; 0x24
 800924a:	2101      	movs	r1, #1
 800924c:	4618      	mov	r0, r3
 800924e:	f001 fc03 	bl	800aa58 <RCCEx_PLL3_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009256:	e003      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
      break;
 800925c:	e000      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800925e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009266:	4b45      	ldr	r3, [pc, #276]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009272:	4942      	ldr	r1, [pc, #264]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009274:	4313      	orrs	r3, r2
 8009276:	654b      	str	r3, [r1, #84]	; 0x54
 8009278:	e001      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d037      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	2b05      	cmp	r3, #5
 8009290:	d820      	bhi.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8009292:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	080092db 	.word	0x080092db
 800929c:	080092b1 	.word	0x080092b1
 80092a0:	080092c3 	.word	0x080092c3
 80092a4:	080092db 	.word	0x080092db
 80092a8:	080092db 	.word	0x080092db
 80092ac:	080092db 	.word	0x080092db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3304      	adds	r3, #4
 80092b4:	2101      	movs	r1, #1
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 fb1c 	bl	800a8f4 <RCCEx_PLL2_Config>
 80092bc:	4603      	mov	r3, r0
 80092be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092c0:	e00c      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3324      	adds	r3, #36	; 0x24
 80092c6:	2101      	movs	r1, #1
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 fbc5 	bl	800aa58 <RCCEx_PLL3_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]
      break;
 80092d8:	e000      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80092da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092e2:	4b26      	ldr	r3, [pc, #152]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	f023 0207 	bic.w	r2, r3, #7
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	4923      	ldr	r1, [pc, #140]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	654b      	str	r3, [r1, #84]	; 0x54
 80092f4:	e001      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d040      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930c:	2b05      	cmp	r3, #5
 800930e:	d821      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8009310:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	0800935b 	.word	0x0800935b
 800931c:	08009331 	.word	0x08009331
 8009320:	08009343 	.word	0x08009343
 8009324:	0800935b 	.word	0x0800935b
 8009328:	0800935b 	.word	0x0800935b
 800932c:	0800935b 	.word	0x0800935b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3304      	adds	r3, #4
 8009334:	2101      	movs	r1, #1
 8009336:	4618      	mov	r0, r3
 8009338:	f001 fadc 	bl	800a8f4 <RCCEx_PLL2_Config>
 800933c:	4603      	mov	r3, r0
 800933e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009340:	e00c      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3324      	adds	r3, #36	; 0x24
 8009346:	2101      	movs	r1, #1
 8009348:	4618      	mov	r0, r3
 800934a:	f001 fb85 	bl	800aa58 <RCCEx_PLL3_Config>
 800934e:	4603      	mov	r3, r0
 8009350:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009352:	e003      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]
      break;
 8009358:	e000      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800935a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d110      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009362:	4b06      	ldr	r3, [pc, #24]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009366:	f023 0207 	bic.w	r2, r3, #7
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009370:	4902      	ldr	r1, [pc, #8]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009372:	4313      	orrs	r3, r2
 8009374:	658b      	str	r3, [r1, #88]	; 0x58
 8009376:	e007      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009378:	58024800 	.word	0x58024800
 800937c:	58024400 	.word	0x58024400
 8009380:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d04b      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800939e:	d02e      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x966>
 80093a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093a4:	d828      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80093a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093aa:	d02a      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80093ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b0:	d822      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80093b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093b6:	d026      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80093b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093bc:	d81c      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80093be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c2:	d010      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80093c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c8:	d816      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01d      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x972>
 80093ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093d2:	d111      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3304      	adds	r3, #4
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fa8a 	bl	800a8f4 <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093e4:	e012      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3324      	adds	r3, #36	; 0x24
 80093ea:	2102      	movs	r1, #2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fb33 	bl	800aa58 <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093f6:	e009      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	75fb      	strb	r3, [r7, #23]
      break;
 80093fc:	e006      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80093fe:	bf00      	nop
 8009400:	e004      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009402:	bf00      	nop
 8009404:	e002      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009406:	bf00      	nop
 8009408:	e000      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800940a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009412:	4bb2      	ldr	r3, [pc, #712]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009420:	49ae      	ldr	r1, [pc, #696]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009422:	4313      	orrs	r3, r2
 8009424:	654b      	str	r3, [r1, #84]	; 0x54
 8009426:	e001      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d04b      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800943e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009442:	d02e      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009444:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009448:	d828      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800944a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800944e:	d02a      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009454:	d822      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800945a:	d026      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800945c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009460:	d81c      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009466:	d010      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800946c:	d816      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d01d      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009476:	d111      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	2100      	movs	r1, #0
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fa38 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009484:	4603      	mov	r3, r0
 8009486:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009488:	e012      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3324      	adds	r3, #36	; 0x24
 800948e:	2102      	movs	r1, #2
 8009490:	4618      	mov	r0, r3
 8009492:	f001 fae1 	bl	800aa58 <RCCEx_PLL3_Config>
 8009496:	4603      	mov	r3, r0
 8009498:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800949a:	e009      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	e006      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80094a2:	bf00      	nop
 80094a4:	e004      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80094a6:	bf00      	nop
 80094a8:	e002      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80094aa:	bf00      	nop
 80094ac:	e000      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80094ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094b6:	4b89      	ldr	r3, [pc, #548]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80094b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094c4:	4985      	ldr	r1, [pc, #532]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	658b      	str	r3, [r1, #88]	; 0x58
 80094ca:	e001      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d04b      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094e6:	d02e      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80094e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094ec:	d828      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80094ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094f2:	d02a      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80094f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094f8:	d822      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80094fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094fe:	d026      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009500:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009504:	d81c      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800950a:	d010      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800950c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009510:	d816      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d01d      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8009516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800951a:	d111      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3304      	adds	r3, #4
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f001 f9e6 	bl	800a8f4 <RCCEx_PLL2_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800952c:	e012      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3324      	adds	r3, #36	; 0x24
 8009532:	2102      	movs	r1, #2
 8009534:	4618      	mov	r0, r3
 8009536:	f001 fa8f 	bl	800aa58 <RCCEx_PLL3_Config>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800953e:	e009      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	75fb      	strb	r3, [r7, #23]
      break;
 8009544:	e006      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009546:	bf00      	nop
 8009548:	e004      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800955a:	4b60      	ldr	r3, [pc, #384]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800955c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800955e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009568:	495c      	ldr	r1, [pc, #368]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800956a:	4313      	orrs	r3, r2
 800956c:	658b      	str	r3, [r1, #88]	; 0x58
 800956e:	e001      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d018      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009588:	d10a      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3324      	adds	r3, #36	; 0x24
 800958e:	2102      	movs	r1, #2
 8009590:	4618      	mov	r0, r3
 8009592:	f001 fa61 	bl	800aa58 <RCCEx_PLL3_Config>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80095a0:	4b4e      	ldr	r3, [pc, #312]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ac:	494b      	ldr	r1, [pc, #300]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01a      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c8:	d10a      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3324      	adds	r3, #36	; 0x24
 80095ce:	2102      	movs	r1, #2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 fa41 	bl	800aa58 <RCCEx_PLL3_Config>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095e0:	4b3e      	ldr	r3, [pc, #248]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ee:	493b      	ldr	r1, [pc, #236]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d034      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800960a:	d01d      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800960c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009610:	d817      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800961a:	d009      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800961c:	e011      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3304      	adds	r3, #4
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f965 	bl	800a8f4 <RCCEx_PLL2_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800962e:	e00c      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3324      	adds	r3, #36	; 0x24
 8009634:	2102      	movs	r1, #2
 8009636:	4618      	mov	r0, r3
 8009638:	f001 fa0e 	bl	800aa58 <RCCEx_PLL3_Config>
 800963c:	4603      	mov	r3, r0
 800963e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009640:	e003      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]
      break;
 8009646:	e000      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009650:	4b22      	ldr	r3, [pc, #136]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800965e:	491f      	ldr	r1, [pc, #124]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009660:	4313      	orrs	r3, r2
 8009662:	658b      	str	r3, [r1, #88]	; 0x58
 8009664:	e001      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d036      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800967c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009680:	d01c      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009686:	d816      	bhi.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968c:	d003      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800968e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009692:	d007      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009694:	e00f      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009696:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	4a10      	ldr	r2, [pc, #64]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800969c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80096a2:	e00c      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3324      	adds	r3, #36	; 0x24
 80096a8:	2101      	movs	r1, #1
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 f9d4 	bl	800aa58 <RCCEx_PLL3_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096b4:	e003      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ba:	e000      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80096bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10d      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80096c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d2:	4902      	ldr	r1, [pc, #8]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	654b      	str	r3, [r1, #84]	; 0x54
 80096d8:	e004      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80096da:	bf00      	nop
 80096dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d029      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fc:	d007      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80096fe:	e00f      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009700:	4b61      	ldr	r3, [pc, #388]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	4a60      	ldr	r2, [pc, #384]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800970a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800970c:	e00b      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3304      	adds	r3, #4
 8009712:	2102      	movs	r1, #2
 8009714:	4618      	mov	r0, r3
 8009716:	f001 f8ed 	bl	800a8f4 <RCCEx_PLL2_Config>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800971e:	e002      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	75fb      	strb	r3, [r7, #23]
      break;
 8009724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800972c:	4b56      	ldr	r3, [pc, #344]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800972e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009738:	4953      	ldr	r1, [pc, #332]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800973a:	4313      	orrs	r3, r2
 800973c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800973e:	e001      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	2102      	movs	r1, #2
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f97e 	bl	800aa58 <RCCEx_PLL3_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d030      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800977a:	d017      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800977c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009780:	d811      	bhi.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009786:	d013      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978c:	d80b      	bhi.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d010      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009796:	d106      	bne.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009798:	4b3b      	ldr	r3, [pc, #236]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	4a3a      	ldr	r2, [pc, #232]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800979e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80097a4:	e007      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
      break;
 80097aa:	e004      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80097ac:	bf00      	nop
 80097ae:	e002      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80097b0:	bf00      	nop
 80097b2:	e000      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80097b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097bc:	4b32      	ldr	r3, [pc, #200]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097c8:	492f      	ldr	r1, [pc, #188]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	654b      	str	r3, [r1, #84]	; 0x54
 80097ce:	e001      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097e0:	4b29      	ldr	r3, [pc, #164]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ec:	4926      	ldr	r1, [pc, #152]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097fe:	4b22      	ldr	r3, [pc, #136]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009802:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800980a:	491f      	ldr	r1, [pc, #124]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800980c:	4313      	orrs	r3, r2
 800980e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00d      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800981c:	4b1a      	ldr	r3, [pc, #104]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	4a19      	ldr	r2, [pc, #100]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009826:	6113      	str	r3, [r2, #16]
 8009828:	4b17      	ldr	r3, [pc, #92]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009832:	4915      	ldr	r1, [pc, #84]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009834:	4313      	orrs	r3, r2
 8009836:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	da08      	bge.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009840:	4b11      	ldr	r3, [pc, #68]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009844:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984c:	490e      	ldr	r1, [pc, #56]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800984e:	4313      	orrs	r3, r2
 8009850:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800985e:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986c:	4906      	ldr	r1, [pc, #24]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800986e:	4313      	orrs	r3, r2
 8009870:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009872:	7dbb      	ldrb	r3, [r7, #22]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	58024400 	.word	0x58024400

0800988c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b090      	sub	sp, #64	; 0x40
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989a:	f040 8089 	bne.w	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800989e:	4b95      	ldr	r3, [pc, #596]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80098a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	633b      	str	r3, [r7, #48]	; 0x30
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d87d      	bhi.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098c9 	.word	0x080098c9
 80098b8:	080098ed 	.word	0x080098ed
 80098bc:	08009911 	.word	0x08009911
 80098c0:	080099a5 	.word	0x080099a5
 80098c4:	08009935 	.word	0x08009935

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098c8:	4b8a      	ldr	r3, [pc, #552]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098d4:	d107      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 feb8 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098e4:	e3ed      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ea:	e3ea      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ec:	4b81      	ldr	r3, [pc, #516]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098f8:	d107      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098fa:	f107 0318 	add.w	r3, r7, #24
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fbfe 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009908:	e3db      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990e:	e3d8      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009910:	4b78      	ldr	r3, [pc, #480]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800991c:	d107      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991e:	f107 030c 	add.w	r3, r7, #12
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fd40 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800992c:	e3c9      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009932:	e3c6      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009934:	4b6f      	ldr	r3, [pc, #444]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800993c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800993e:	4b6d      	ldr	r3, [pc, #436]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b04      	cmp	r3, #4
 8009948:	d10c      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800994a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994c:	2b00      	cmp	r3, #0
 800994e:	d109      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009950:	4b68      	ldr	r3, [pc, #416]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	08db      	lsrs	r3, r3, #3
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	4a67      	ldr	r2, [pc, #412]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800995c:	fa22 f303 	lsr.w	r3, r2, r3
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009962:	e01e      	b.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009964:	4b63      	ldr	r3, [pc, #396]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d106      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009978:	d102      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800997a:	4b60      	ldr	r3, [pc, #384]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800997c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800997e:	e010      	b.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009980:	4b5c      	ldr	r3, [pc, #368]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800998c:	d106      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800998e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009994:	d102      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009996:	4b5a      	ldr	r3, [pc, #360]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800999a:	e002      	b.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099a0:	e38f      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80099a2:	e38e      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80099a4:	4b57      	ldr	r3, [pc, #348]	; (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a8:	e38b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ae:	e388      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b6:	f040 80a7 	bne.w	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80099ba:	4b4e      	ldr	r3, [pc, #312]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80099c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099ca:	d054      	beq.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099d2:	f200 808b 	bhi.w	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099dc:	f000 8083 	beq.w	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099e6:	f200 8081 	bhi.w	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099f0:	d02f      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099f8:	d878      	bhi.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a06:	d012      	beq.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8009a08:	e070      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a0a:	4b3a      	ldr	r3, [pc, #232]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a16:	d107      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fe17 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a26:	e34c      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a2c:	e349      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a2e:	4b31      	ldr	r3, [pc, #196]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a3a:	d107      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a3c:	f107 0318 	add.w	r3, r7, #24
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fb5d 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a4a:	e33a      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a50:	e337      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a52:	4b28      	ldr	r3, [pc, #160]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a5e:	d107      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a60:	f107 030c 	add.w	r3, r7, #12
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 fc9f 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a6e:	e328      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a74:	e325      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a76:	4b1f      	ldr	r3, [pc, #124]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a80:	4b1c      	ldr	r3, [pc, #112]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d10c      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d109      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a92:	4b18      	ldr	r3, [pc, #96]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	4a16      	ldr	r2, [pc, #88]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa4:	e01e      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab2:	d106      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aba:	d102      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac0:	e010      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac2:	4b0c      	ldr	r3, [pc, #48]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ace:	d106      	bne.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ad6:	d102      	bne.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009adc:	e002      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ae2:	e2ee      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009ae4:	e2ed      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aea:	e2ea      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af0:	e2e7      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009af2:	bf00      	nop
 8009af4:	58024400 	.word	0x58024400
 8009af8:	03d09000 	.word	0x03d09000
 8009afc:	003d0900 	.word	0x003d0900
 8009b00:	017d7840 	.word	0x017d7840
 8009b04:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0e:	f040 809c 	bne.w	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009b12:	4b9e      	ldr	r3, [pc, #632]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009b1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b22:	d054      	beq.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b2a:	f200 808b 	bhi.w	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b34:	f000 8083 	beq.w	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b3e:	f200 8081 	bhi.w	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b48:	d02f      	beq.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b50:	d878      	bhi.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d004      	beq.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b5e:	d012      	beq.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009b60:	e070      	b.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b62:	4b8a      	ldr	r3, [pc, #552]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b6e:	d107      	bne.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 fd6b 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b7e:	e2a0      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b84:	e29d      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b86:	4b81      	ldr	r3, [pc, #516]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b92:	d107      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b94:	f107 0318 	add.w	r3, r7, #24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fab1 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009ba2:	e28e      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ba8:	e28b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009baa:	4b78      	ldr	r3, [pc, #480]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb6:	d107      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fbf3 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bc6:	e27c      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bcc:	e279      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bce:	4b6f      	ldr	r3, [pc, #444]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bd6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bd8:	4b6c      	ldr	r3, [pc, #432]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d10c      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d109      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bea:	4b68      	ldr	r3, [pc, #416]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	08db      	lsrs	r3, r3, #3
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	4a66      	ldr	r2, [pc, #408]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bfc:	e01e      	b.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bfe:	4b63      	ldr	r3, [pc, #396]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0a:	d106      	bne.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c12:	d102      	bne.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c14:	4b5f      	ldr	r3, [pc, #380]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c18:	e010      	b.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c1a:	4b5c      	ldr	r3, [pc, #368]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c26:	d106      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c2e:	d102      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c30:	4b59      	ldr	r3, [pc, #356]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c34:	e002      	b.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c3a:	e242      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009c3c:	e241      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c3e:	4b57      	ldr	r3, [pc, #348]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c42:	e23e      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c48:	e23b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c50:	f040 80a6 	bne.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c54:	4b4d      	ldr	r3, [pc, #308]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c64:	d054      	beq.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c6c:	f200 808b 	bhi.w	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c76:	f000 8083 	beq.w	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c80:	f200 8081 	bhi.w	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c8a:	d02f      	beq.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c92:	d878      	bhi.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca0:	d012      	beq.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8009ca2:	e070      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ca4:	4b39      	ldr	r3, [pc, #228]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cb0:	d107      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fcca 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cc0:	e1ff      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cc6:	e1fc      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cc8:	4b30      	ldr	r3, [pc, #192]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cd4:	d107      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cd6:	f107 0318 	add.w	r3, r7, #24
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fa10 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ce4:	e1ed      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cea:	e1ea      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cec:	4b27      	ldr	r3, [pc, #156]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf8:	d107      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cfa:	f107 030c 	add.w	r3, r7, #12
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fb52 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d08:	e1db      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d0e:	e1d8      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d10:	4b1e      	ldr	r3, [pc, #120]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d1a:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0304 	and.w	r3, r3, #4
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d10c      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8009d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d109      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d2c:	4b17      	ldr	r3, [pc, #92]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	08db      	lsrs	r3, r3, #3
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	4a16      	ldr	r2, [pc, #88]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d3e:	e01e      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d40:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4c:	d106      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d54:	d102      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d56:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d5a:	e010      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d5c:	4b0b      	ldr	r3, [pc, #44]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d68:	d106      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d70:	d102      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d72:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d76:	e002      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d7c:	e1a1      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009d7e:	e1a0      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d84:	e19d      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8a:	e19a      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009d8c:	58024400 	.word	0x58024400
 8009d90:	03d09000 	.word	0x03d09000
 8009d94:	003d0900 	.word	0x003d0900
 8009d98:	017d7840 	.word	0x017d7840
 8009d9c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009da6:	d173      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009da8:	4b9a      	ldr	r3, [pc, #616]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009db0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db8:	d02f      	beq.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dc0:	d863      	bhi.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dce:	d012      	beq.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009dd0:	e05b      	b.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dd2:	4b90      	ldr	r3, [pc, #576]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dde:	d107      	bne.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de0:	f107 0318 	add.w	r3, r7, #24
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f98b 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dee:	e168      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009df4:	e165      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009df6:	4b87      	ldr	r3, [pc, #540]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e02:	d107      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e04:	f107 030c 	add.w	r3, r7, #12
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 facd 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e12:	e156      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e18:	e153      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e1a:	4b7e      	ldr	r3, [pc, #504]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e22:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e24:	4b7b      	ldr	r3, [pc, #492]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d10c      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8009e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d109      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e36:	4b77      	ldr	r3, [pc, #476]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	08db      	lsrs	r3, r3, #3
 8009e3c:	f003 0303 	and.w	r3, r3, #3
 8009e40:	4a75      	ldr	r2, [pc, #468]	; (800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009e42:	fa22 f303 	lsr.w	r3, r2, r3
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e48:	e01e      	b.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e4a:	4b72      	ldr	r3, [pc, #456]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e56:	d106      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e5e:	d102      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e60:	4b6e      	ldr	r3, [pc, #440]	; (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e64:	e010      	b.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e66:	4b6b      	ldr	r3, [pc, #428]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e72:	d106      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e7a:	d102      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e7c:	4b68      	ldr	r3, [pc, #416]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e80:	e002      	b.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e86:	e11c      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009e88:	e11b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e8e:	e118      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e96:	d133      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e98:	4b5e      	ldr	r3, [pc, #376]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eae:	d012      	beq.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009eb0:	e023      	b.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009eb2:	4b58      	ldr	r3, [pc, #352]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ebe:	d107      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fbc3 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ece:	e0f8      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ed4:	e0f5      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ed6:	4b4f      	ldr	r3, [pc, #316]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ee2:	d107      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ee4:	f107 0318 	add.w	r3, r7, #24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 f909 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ef2:	e0e6      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ef8:	e0e3      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009efe:	e0e0      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f06:	f040 808d 	bne.w	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009f0a:	4b42      	ldr	r3, [pc, #264]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009f12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f1a:	d06b      	beq.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f22:	d874      	bhi.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d056      	beq.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f32:	d86c      	bhi.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f3a:	d03b      	beq.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f42:	d864      	bhi.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f4a:	d021      	beq.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f52:	d85c      	bhi.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f60:	d004      	beq.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009f62:	e054      	b.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f64:	f000 f8b6 	bl	800a0d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f68:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009f6a:	e0aa      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f6c:	4b29      	ldr	r3, [pc, #164]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f78:	d107      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f7a:	f107 0318 	add.w	r3, r7, #24
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f8be 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f88:	e09b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f8e:	e098      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f90:	4b20      	ldr	r3, [pc, #128]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f9c:	d107      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fa00 	bl	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fac:	e089      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fb2:	e086      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d109      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fc0:	4b14      	ldr	r3, [pc, #80]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	08db      	lsrs	r3, r3, #3
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	4a13      	ldr	r2, [pc, #76]	; (800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fd2:	e076      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd8:	e073      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009fda:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe6:	d102      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009fec:	e069      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff2:	e066      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a000:	d102      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800a002:	4b07      	ldr	r3, [pc, #28]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a004:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a006:	e05c      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a00c:	e059      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a012:	e056      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a014:	58024400 	.word	0x58024400
 800a018:	03d09000 	.word	0x03d09000
 800a01c:	003d0900 	.word	0x003d0900
 800a020:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a02a:	d148      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a02c:	4b27      	ldr	r3, [pc, #156]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a034:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03c:	d02a      	beq.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a044:	d838      	bhi.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a052:	d00d      	beq.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800a054:	e030      	b.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a056:	4b1d      	ldr	r3, [pc, #116]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a062:	d102      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800a064:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a066:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a068:	e02b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a06e:	e028      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a070:	4b16      	ldr	r3, [pc, #88]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a07c:	d107      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fae4 	bl	800a650 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a08c:	e019      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a092:	e016      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a094:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a09c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0a0:	d107      	bne.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a2:	f107 0318 	add.w	r3, r7, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f82a 	bl	800a100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0b0:	e007      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0b6:	e004      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0bc:	e001      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3740      	adds	r7, #64	; 0x40
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	58024400 	.word	0x58024400
 800a0d0:	017d7840 	.word	0x017d7840

0800a0d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a0d8:	f7fe fc98 	bl	8008a0c <HAL_RCC_GetHCLKFreq>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	091b      	lsrs	r3, r3, #4
 800a0e4:	f003 0307 	and.w	r3, r3, #7
 800a0e8:	4904      	ldr	r1, [pc, #16]	; (800a0fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a0ea:	5ccb      	ldrb	r3, [r1, r3]
 800a0ec:	f003 031f 	and.w	r3, r3, #31
 800a0f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	58024400 	.word	0x58024400
 800a0fc:	0800eb84 	.word	0x0800eb84

0800a100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a100:	b480      	push	{r7}
 800a102:	b089      	sub	sp, #36	; 0x24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a108:	4ba1      	ldr	r3, [pc, #644]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a112:	4b9f      	ldr	r3, [pc, #636]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	0b1b      	lsrs	r3, r3, #12
 800a118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a11e:	4b9c      	ldr	r3, [pc, #624]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	091b      	lsrs	r3, r3, #4
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a12a:	4b99      	ldr	r3, [pc, #612]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	08db      	lsrs	r3, r3, #3
 800a130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	fb02 f303 	mul.w	r3, r2, r3
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 8111 	beq.w	800a370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b02      	cmp	r3, #2
 800a152:	f000 8083 	beq.w	800a25c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	f200 80a1 	bhi.w	800a2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d056      	beq.n	800a218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a16a:	e099      	b.n	800a2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a16c:	4b88      	ldr	r3, [pc, #544]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0320 	and.w	r3, r3, #32
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02d      	beq.n	800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a178:	4b85      	ldr	r3, [pc, #532]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	08db      	lsrs	r3, r3, #3
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	4a84      	ldr	r2, [pc, #528]	; (800a394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a184:	fa22 f303 	lsr.w	r3, r2, r3
 800a188:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	ee07 3a90 	vmov	s15, r3
 800a190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a2:	4b7b      	ldr	r3, [pc, #492]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1d2:	e087      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a39c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e6:	4b6a      	ldr	r3, [pc, #424]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a216:	e065      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22a:	4b59      	ldr	r3, [pc, #356]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a25a:	e043      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26e:	4b48      	ldr	r3, [pc, #288]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a282:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a29e:	e021      	b.n	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b2:	4b37      	ldr	r3, [pc, #220]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ba:	ee07 3a90 	vmov	s15, r3
 800a2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a2e4:	4b2a      	ldr	r3, [pc, #168]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	0a5b      	lsrs	r3, r3, #9
 800a2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a30a:	ee17 2a90 	vmov	r2, s15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a312:	4b1f      	ldr	r3, [pc, #124]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	0c1b      	lsrs	r3, r3, #16
 800a318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31c:	ee07 3a90 	vmov	s15, r3
 800a320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a32c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a338:	ee17 2a90 	vmov	r2, s15
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a340:	4b13      	ldr	r3, [pc, #76]	; (800a390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	0e1b      	lsrs	r3, r3, #24
 800a346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a35a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a366:	ee17 2a90 	vmov	r2, s15
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a36e:	e008      	b.n	800a382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	609a      	str	r2, [r3, #8]
}
 800a382:	bf00      	nop
 800a384:	3724      	adds	r7, #36	; 0x24
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
 800a394:	03d09000 	.word	0x03d09000
 800a398:	46000000 	.word	0x46000000
 800a39c:	4c742400 	.word	0x4c742400
 800a3a0:	4a742400 	.word	0x4a742400
 800a3a4:	4bbebc20 	.word	0x4bbebc20

0800a3a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b089      	sub	sp, #36	; 0x24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3b0:	4ba1      	ldr	r3, [pc, #644]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	f003 0303 	and.w	r3, r3, #3
 800a3b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a3ba:	4b9f      	ldr	r3, [pc, #636]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	0d1b      	lsrs	r3, r3, #20
 800a3c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a3c6:	4b9c      	ldr	r3, [pc, #624]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	0a1b      	lsrs	r3, r3, #8
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a3d2:	4b99      	ldr	r3, [pc, #612]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 8111 	beq.w	800a618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	f000 8083 	beq.w	800a504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	2b02      	cmp	r3, #2
 800a402:	f200 80a1 	bhi.w	800a548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d056      	beq.n	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a412:	e099      	b.n	800a548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a414:	4b88      	ldr	r3, [pc, #544]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0320 	and.w	r3, r3, #32
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d02d      	beq.n	800a47c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a420:	4b85      	ldr	r3, [pc, #532]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	08db      	lsrs	r3, r3, #3
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	4a84      	ldr	r2, [pc, #528]	; (800a63c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a42c:	fa22 f303 	lsr.w	r3, r2, r3
 800a430:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	ee07 3a90 	vmov	s15, r3
 800a438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44a:	4b7b      	ldr	r3, [pc, #492]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a476:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a47a:	e087      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48e:	4b6a      	ldr	r3, [pc, #424]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4be:	e065      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d2:	4b59      	ldr	r3, [pc, #356]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a502:	e043      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a64c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a516:	4b48      	ldr	r3, [pc, #288]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a526:	ed97 6a03 	vldr	s12, [r7, #12]
 800a52a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a546:	e021      	b.n	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a552:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a55a:	4b37      	ldr	r3, [pc, #220]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a562:	ee07 3a90 	vmov	s15, r3
 800a566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a56a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a57a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a582:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a58a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a58c:	4b2a      	ldr	r3, [pc, #168]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	0a5b      	lsrs	r3, r3, #9
 800a592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b2:	ee17 2a90 	vmov	r2, s15
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a5ba:	4b1f      	ldr	r3, [pc, #124]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e0:	ee17 2a90 	vmov	r2, s15
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a5e8:	4b13      	ldr	r3, [pc, #76]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	0e1b      	lsrs	r3, r3, #24
 800a5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a602:	edd7 6a07 	vldr	s13, [r7, #28]
 800a606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a60e:	ee17 2a90 	vmov	r2, s15
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a616:	e008      	b.n	800a62a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	609a      	str	r2, [r3, #8]
}
 800a62a:	bf00      	nop
 800a62c:	3724      	adds	r7, #36	; 0x24
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	58024400 	.word	0x58024400
 800a63c:	03d09000 	.word	0x03d09000
 800a640:	46000000 	.word	0x46000000
 800a644:	4c742400 	.word	0x4c742400
 800a648:	4a742400 	.word	0x4a742400
 800a64c:	4bbebc20 	.word	0x4bbebc20

0800a650 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a650:	b480      	push	{r7}
 800a652:	b089      	sub	sp, #36	; 0x24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a658:	4ba0      	ldr	r3, [pc, #640]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	f003 0303 	and.w	r3, r3, #3
 800a660:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a662:	4b9e      	ldr	r3, [pc, #632]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	091b      	lsrs	r3, r3, #4
 800a668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a66c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a66e:	4b9b      	ldr	r3, [pc, #620]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a678:	4b98      	ldr	r3, [pc, #608]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	08db      	lsrs	r3, r3, #3
 800a67e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	fb02 f303 	mul.w	r3, r2, r3
 800a688:	ee07 3a90 	vmov	s15, r3
 800a68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a690:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 8111 	beq.w	800a8be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	f000 8083 	beq.w	800a7aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	f200 80a1 	bhi.w	800a7ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d056      	beq.n	800a766 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a6b8:	e099      	b.n	800a7ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ba:	4b88      	ldr	r3, [pc, #544]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02d      	beq.n	800a722 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6c6:	4b85      	ldr	r3, [pc, #532]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	08db      	lsrs	r3, r3, #3
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	4a83      	ldr	r2, [pc, #524]	; (800a8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f0:	4b7a      	ldr	r3, [pc, #488]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f8:	ee07 3a90 	vmov	s15, r3
 800a6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a700:	ed97 6a03 	vldr	s12, [r7, #12]
 800a704:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a720:	e087      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	ee07 3a90 	vmov	s15, r3
 800a728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a734:	4b69      	ldr	r3, [pc, #420]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73c:	ee07 3a90 	vmov	s15, r3
 800a740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a744:	ed97 6a03 	vldr	s12, [r7, #12]
 800a748:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a74c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a764:	e065      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a770:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a8ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a778:	4b58      	ldr	r3, [pc, #352]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a780:	ee07 3a90 	vmov	s15, r3
 800a784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a788:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7a8:	e043      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	ee07 3a90 	vmov	s15, r3
 800a7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a7b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7bc:	4b47      	ldr	r3, [pc, #284]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c4:	ee07 3a90 	vmov	s15, r3
 800a7c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7ec:	e021      	b.n	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	ee07 3a90 	vmov	s15, r3
 800a7f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a800:	4b36      	ldr	r3, [pc, #216]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a808:	ee07 3a90 	vmov	s15, r3
 800a80c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a810:	ed97 6a03 	vldr	s12, [r7, #12]
 800a814:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a830:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a832:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	0a5b      	lsrs	r3, r3, #9
 800a838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a84c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a858:	ee17 2a90 	vmov	r2, s15
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a860:	4b1e      	ldr	r3, [pc, #120]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a864:	0c1b      	lsrs	r3, r3, #16
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	ee07 3a90 	vmov	s15, r3
 800a86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a87a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a886:	ee17 2a90 	vmov	r2, s15
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a88e:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	0e1b      	lsrs	r3, r3, #24
 800a894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b4:	ee17 2a90 	vmov	r2, s15
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a8bc:	e008      	b.n	800a8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	609a      	str	r2, [r3, #8]
}
 800a8d0:	bf00      	nop
 800a8d2:	3724      	adds	r7, #36	; 0x24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	03d09000 	.word	0x03d09000
 800a8e4:	46000000 	.word	0x46000000
 800a8e8:	4c742400 	.word	0x4c742400
 800a8ec:	4a742400 	.word	0x4a742400
 800a8f0:	4bbebc20 	.word	0x4bbebc20

0800a8f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a902:	4b53      	ldr	r3, [pc, #332]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d101      	bne.n	800a912 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e099      	b.n	800aa46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a912:	4b4f      	ldr	r3, [pc, #316]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a4e      	ldr	r2, [pc, #312]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a91c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a91e:	f7f8 fa31 	bl	8002d84 <HAL_GetTick>
 800a922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a924:	e008      	b.n	800a938 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a926:	f7f8 fa2d 	bl	8002d84 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	2b02      	cmp	r3, #2
 800a932:	d901      	bls.n	800a938 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a934:	2303      	movs	r3, #3
 800a936:	e086      	b.n	800aa46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a938:	4b45      	ldr	r3, [pc, #276]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1f0      	bne.n	800a926 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a944:	4b42      	ldr	r3, [pc, #264]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	031b      	lsls	r3, r3, #12
 800a952:	493f      	ldr	r1, [pc, #252]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a954:	4313      	orrs	r3, r2
 800a956:	628b      	str	r3, [r1, #40]	; 0x28
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	3b01      	subs	r3, #1
 800a968:	025b      	lsls	r3, r3, #9
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	3b01      	subs	r3, #1
 800a974:	041b      	lsls	r3, r3, #16
 800a976:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	3b01      	subs	r3, #1
 800a982:	061b      	lsls	r3, r3, #24
 800a984:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a988:	4931      	ldr	r1, [pc, #196]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a98e:	4b30      	ldr	r3, [pc, #192]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	492d      	ldr	r1, [pc, #180]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a9a0:	4b2b      	ldr	r3, [pc, #172]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	f023 0220 	bic.w	r2, r3, #32
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	4928      	ldr	r1, [pc, #160]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a9b2:	4b27      	ldr	r3, [pc, #156]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	4a26      	ldr	r2, [pc, #152]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9b8:	f023 0310 	bic.w	r3, r3, #16
 800a9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9c2:	4b24      	ldr	r3, [pc, #144]	; (800aa54 <RCCEx_PLL2_Config+0x160>)
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	69d2      	ldr	r2, [r2, #28]
 800a9ca:	00d2      	lsls	r2, r2, #3
 800a9cc:	4920      	ldr	r1, [pc, #128]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a9d2:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9d8:	f043 0310 	orr.w	r3, r3, #16
 800a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9f0:	e00f      	b.n	800aa12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d106      	bne.n	800aa06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a14      	ldr	r2, [pc, #80]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800a9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa04:	e005      	b.n	800aa12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa06:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0a:	4a11      	ldr	r2, [pc, #68]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aa12:	4b0f      	ldr	r3, [pc, #60]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a0e      	ldr	r2, [pc, #56]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa1e:	f7f8 f9b1 	bl	8002d84 <HAL_GetTick>
 800aa22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa24:	e008      	b.n	800aa38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa26:	f7f8 f9ad 	bl	8002d84 <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d901      	bls.n	800aa38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e006      	b.n	800aa46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <RCCEx_PLL2_Config+0x15c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0f0      	beq.n	800aa26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	58024400 	.word	0x58024400
 800aa54:	ffff0007 	.word	0xffff0007

0800aa58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa66:	4b53      	ldr	r3, [pc, #332]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d101      	bne.n	800aa76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e099      	b.n	800abaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa76:	4b4f      	ldr	r3, [pc, #316]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a4e      	ldr	r2, [pc, #312]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa82:	f7f8 f97f 	bl	8002d84 <HAL_GetTick>
 800aa86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa88:	e008      	b.n	800aa9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aa8a:	f7f8 f97b 	bl	8002d84 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d901      	bls.n	800aa9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e086      	b.n	800abaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa9c:	4b45      	ldr	r3, [pc, #276]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f0      	bne.n	800aa8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aaa8:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	051b      	lsls	r3, r3, #20
 800aab6:	493f      	ldr	r1, [pc, #252]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aab8:	4313      	orrs	r3, r2
 800aaba:	628b      	str	r3, [r1, #40]	; 0x28
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	025b      	lsls	r3, r3, #9
 800aace:	b29b      	uxth	r3, r3
 800aad0:	431a      	orrs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	041b      	lsls	r3, r3, #16
 800aada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	061b      	lsls	r3, r3, #24
 800aae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aaec:	4931      	ldr	r1, [pc, #196]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aaf2:	4b30      	ldr	r3, [pc, #192]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	492d      	ldr	r1, [pc, #180]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab04:	4b2b      	ldr	r3, [pc, #172]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	4928      	ldr	r1, [pc, #160]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ab16:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ab22:	4b24      	ldr	r3, [pc, #144]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab26:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <RCCEx_PLL3_Config+0x160>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	69d2      	ldr	r2, [r2, #28]
 800ab2e:	00d2      	lsls	r2, r2, #3
 800ab30:	4920      	ldr	r1, [pc, #128]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ab36:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a19      	ldr	r2, [pc, #100]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab54:	e00f      	b.n	800ab76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d106      	bne.n	800ab6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab5c:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4a14      	ldr	r2, [pc, #80]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab68:	e005      	b.n	800ab76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	4a11      	ldr	r2, [pc, #68]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab76:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a0e      	ldr	r2, [pc, #56]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab82:	f7f8 f8ff 	bl	8002d84 <HAL_GetTick>
 800ab86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab88:	e008      	b.n	800ab9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab8a:	f7f8 f8fb 	bl	8002d84 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d901      	bls.n	800ab9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e006      	b.n	800abaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab9c:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <RCCEx_PLL3_Config+0x15c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f0      	beq.n	800ab8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	58024400 	.word	0x58024400
 800abb8:	ffff0007 	.word	0xffff0007

0800abbc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d904      	bls.n	800abda <HAL_SAI_InitProtocol+0x1e>
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	3b03      	subs	r3, #3
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d812      	bhi.n	800abfe <HAL_SAI_InitProtocol+0x42>
 800abd8:	e008      	b.n	800abec <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fb7b 	bl	800b2dc <SAI_InitI2S>
 800abe6:	4603      	mov	r3, r0
 800abe8:	75fb      	strb	r3, [r7, #23]
      break;
 800abea:	e00b      	b.n	800ac04 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 fc24 	bl	800b440 <SAI_InitPCM>
 800abf8:	4603      	mov	r3, r0
 800abfa:	75fb      	strb	r3, [r7, #23]
      break;
 800abfc:	e002      	b.n	800ac04 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	75fb      	strb	r3, [r7, #23]
      break;
 800ac02:	bf00      	nop
  }

  if (status == HAL_OK)
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d104      	bne.n	800ac14 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f808 	bl	800ac20 <HAL_SAI_Init>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08a      	sub	sp, #40	; 0x28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e1fb      	b.n	800b02a <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d113      	bne.n	800ac64 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a96      	ldr	r2, [pc, #600]	; (800ae9c <HAL_SAI_Init+0x27c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d004      	beq.n	800ac50 <HAL_SAI_Init+0x30>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a95      	ldr	r2, [pc, #596]	; (800aea0 <HAL_SAI_Init+0x280>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d107      	bne.n	800ac60 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d103      	bne.n	800ac60 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e1e2      	b.n	800b02a <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a8c      	ldr	r2, [pc, #560]	; (800ae9c <HAL_SAI_Init+0x27c>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d004      	beq.n	800ac78 <HAL_SAI_Init+0x58>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a8c      	ldr	r2, [pc, #560]	; (800aea4 <HAL_SAI_Init+0x284>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d102      	bne.n	800ac7e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800ac78:	4b8b      	ldr	r3, [pc, #556]	; (800aea8 <HAL_SAI_Init+0x288>)
 800ac7a:	61bb      	str	r3, [r7, #24]
 800ac7c:	e00e      	b.n	800ac9c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a87      	ldr	r2, [pc, #540]	; (800aea0 <HAL_SAI_Init+0x280>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d004      	beq.n	800ac92 <HAL_SAI_Init+0x72>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a87      	ldr	r2, [pc, #540]	; (800aeac <HAL_SAI_Init+0x28c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d102      	bne.n	800ac98 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800ac92:	4b87      	ldr	r3, [pc, #540]	; (800aeb0 <HAL_SAI_Init+0x290>)
 800ac94:	61bb      	str	r3, [r7, #24]
 800ac96:	e001      	b.n	800ac9c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e1c6      	b.n	800b02a <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d106      	bne.n	800acb6 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 fb6d 	bl	800c390 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fc7c 	bl	800b5b4 <SAI_Disable>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e1b1      	b.n	800b02a <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2202      	movs	r2, #2
 800acca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d00c      	beq.n	800acf0 <HAL_SAI_Init+0xd0>
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d80d      	bhi.n	800acf6 <HAL_SAI_Init+0xd6>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <HAL_SAI_Init+0xc4>
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d003      	beq.n	800acea <HAL_SAI_Init+0xca>
 800ace2:	e008      	b.n	800acf6 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ace8:	e008      	b.n	800acfc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800acea:	2310      	movs	r3, #16
 800acec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800acee:	e005      	b.n	800acfc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800acf0:	2320      	movs	r3, #32
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800acf4:	e002      	b.n	800acfc <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800acfa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	2b05      	cmp	r3, #5
 800ad02:	d822      	bhi.n	800ad4a <HAL_SAI_Init+0x12a>
 800ad04:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <HAL_SAI_Init+0xec>)
 800ad06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0a:	bf00      	nop
 800ad0c:	0800ad25 	.word	0x0800ad25
 800ad10:	0800ad2b 	.word	0x0800ad2b
 800ad14:	0800ad33 	.word	0x0800ad33
 800ad18:	0800ad4b 	.word	0x0800ad4b
 800ad1c:	0800ad4b 	.word	0x0800ad4b
 800ad20:	0800ad3b 	.word	0x0800ad3b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]
      break;
 800ad28:	e012      	b.n	800ad50 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ad2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2e:	61fb      	str	r3, [r7, #28]
      break;
 800ad30:	e00e      	b.n	800ad50 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ad32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad36:	61fb      	str	r3, [r7, #28]
      break;
 800ad38:	e00a      	b.n	800ad50 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ad3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad3e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	f043 0303 	orr.w	r3, r3, #3
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ad48:	e002      	b.n	800ad50 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	61fb      	str	r3, [r7, #28]
      break;
 800ad4e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad54:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f000 8084 	beq.w	800ae68 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a4c      	ldr	r2, [pc, #304]	; (800ae9c <HAL_SAI_Init+0x27c>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d004      	beq.n	800ad78 <HAL_SAI_Init+0x158>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a4c      	ldr	r2, [pc, #304]	; (800aea4 <HAL_SAI_Init+0x284>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d104      	bne.n	800ad82 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ad78:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ad7c:	f7fe fd86 	bl	800988c <HAL_RCCEx_GetPeriphCLKFreq>
 800ad80:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a46      	ldr	r2, [pc, #280]	; (800aea0 <HAL_SAI_Init+0x280>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d104      	bne.n	800ad96 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800ad8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ad90:	f7fe fd7c 	bl	800988c <HAL_RCCEx_GetPeriphCLKFreq>
 800ad94:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a44      	ldr	r2, [pc, #272]	; (800aeac <HAL_SAI_Init+0x28c>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d104      	bne.n	800adaa <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800ada0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ada4:	f7fe fd72 	bl	800988c <HAL_RCCEx_GetPeriphCLKFreq>
 800ada8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800adb2:	d120      	bne.n	800adf6 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d102      	bne.n	800adc2 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800adbc:	2340      	movs	r3, #64	; 0x40
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	e00a      	b.n	800add8 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc6:	2b08      	cmp	r3, #8
 800adc8:	d103      	bne.n	800add2 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800adca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	e002      	b.n	800add8 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	4613      	mov	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	4619      	mov	r1, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	fb02 f303 	mul.w	r3, r2, r3
 800adee:	fbb1 f3f3 	udiv	r3, r1, r3
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	e017      	b.n	800ae26 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adfe:	d101      	bne.n	800ae04 <HAL_SAI_Init+0x1e4>
 800ae00:	2302      	movs	r3, #2
 800ae02:	e000      	b.n	800ae06 <HAL_SAI_Init+0x1e6>
 800ae04:	2301      	movs	r3, #1
 800ae06:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	005b      	lsls	r3, r3, #1
 800ae12:	4619      	mov	r1, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae24:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	4a22      	ldr	r2, [pc, #136]	; (800aeb4 <HAL_SAI_Init+0x294>)
 800ae2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae2e:	08da      	lsrs	r2, r3, #3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ae34:	6939      	ldr	r1, [r7, #16]
 800ae36:	4b1f      	ldr	r3, [pc, #124]	; (800aeb4 <HAL_SAI_Init+0x294>)
 800ae38:	fba3 2301 	umull	r2, r3, r3, r1
 800ae3c:	08da      	lsrs	r2, r3, #3
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	1aca      	subs	r2, r1, r3
 800ae48:	2a08      	cmp	r2, #8
 800ae4a:	d904      	bls.n	800ae56 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d104      	bne.n	800ae68 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae62:	085a      	lsrs	r2, r3, #1
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <HAL_SAI_Init+0x258>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d109      	bne.n	800ae8c <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d101      	bne.n	800ae84 <HAL_SAI_Init+0x264>
 800ae80:	2300      	movs	r3, #0
 800ae82:	e001      	b.n	800ae88 <HAL_SAI_Init+0x268>
 800ae84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae88:	623b      	str	r3, [r7, #32]
 800ae8a:	e017      	b.n	800aebc <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d111      	bne.n	800aeb8 <HAL_SAI_Init+0x298>
 800ae94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae98:	e00f      	b.n	800aeba <HAL_SAI_Init+0x29a>
 800ae9a:	bf00      	nop
 800ae9c:	40015804 	.word	0x40015804
 800aea0:	58005404 	.word	0x58005404
 800aea4:	40015824 	.word	0x40015824
 800aea8:	40015800 	.word	0x40015800
 800aeac:	58005424 	.word	0x58005424
 800aeb0:	58005400 	.word	0x58005400
 800aeb4:	cccccccd 	.word	0xcccccccd
 800aeb8:	2300      	movs	r3, #0
 800aeba:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6819      	ldr	r1, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b5b      	ldr	r3, [pc, #364]	; (800b034 <HAL_SAI_Init+0x414>)
 800aec8:	400b      	ands	r3, r1
 800aeca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6819      	ldr	r1, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aee0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee6:	431a      	orrs	r2, r3
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800aef4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	051b      	lsls	r3, r3, #20
 800af08:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af0e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6859      	ldr	r1, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	4b43      	ldr	r3, [pc, #268]	; (800b038 <HAL_SAI_Init+0x418>)
 800af2a:	400b      	ands	r3, r1
 800af2c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6859      	ldr	r1, [r3, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	69da      	ldr	r2, [r3, #28]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3c:	431a      	orrs	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af42:	431a      	orrs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	430a      	orrs	r2, r1
 800af4a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6899      	ldr	r1, [r3, #8]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	4b39      	ldr	r3, [pc, #228]	; (800b03c <HAL_SAI_Init+0x41c>)
 800af58:	400b      	ands	r3, r1
 800af5a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6899      	ldr	r1, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af66:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af6c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800af72:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800af78:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7e:	3b01      	subs	r3, #1
 800af80:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800af82:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	430a      	orrs	r2, r1
 800af8a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68d9      	ldr	r1, [r3, #12]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	f24f 0320 	movw	r3, #61472	; 0xf020
 800af9a:	400b      	ands	r3, r1
 800af9c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68d9      	ldr	r1, [r3, #12]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800afb4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	3b01      	subs	r3, #1
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a1c      	ldr	r2, [pc, #112]	; (800b040 <HAL_SAI_Init+0x420>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_SAI_Init+0x3bc>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a1b      	ldr	r2, [pc, #108]	; (800b044 <HAL_SAI_Init+0x424>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d119      	bne.n	800b010 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe0:	f023 0201 	bic.w	r2, r3, #1
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d10e      	bne.n	800b010 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affa:	3b01      	subs	r3, #1
 800affc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800affe:	431a      	orrs	r2, r3
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b008:	f043 0201 	orr.w	r2, r3, #1
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3728      	adds	r7, #40	; 0x28
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	f005c010 	.word	0xf005c010
 800b038:	ffff1ff0 	.word	0xffff1ff0
 800b03c:	fff88000 	.word	0xfff88000
 800b040:	40015804 	.word	0x40015804
 800b044:	58005404 	.word	0x58005404

0800b048 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	4613      	mov	r3, r2
 800b054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b056:	f7f7 fe95 	bl	8002d84 <HAL_GetTick>
 800b05a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <HAL_SAI_Transmit_DMA+0x20>
 800b062:	88fb      	ldrh	r3, [r7, #6]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e098      	b.n	800b19e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b01      	cmp	r3, #1
 800b076:	f040 8091 	bne.w	800b19c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b080:	2b01      	cmp	r3, #1
 800b082:	d101      	bne.n	800b088 <HAL_SAI_Transmit_DMA+0x40>
 800b084:	2302      	movs	r3, #2
 800b086:	e08a      	b.n	800b19e <HAL_SAI_Transmit_DMA+0x156>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	88fa      	ldrh	r2, [r7, #6]
 800b09a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	88fa      	ldrh	r2, [r7, #6]
 800b0a2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2212      	movs	r2, #18
 800b0b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0bc:	4a3a      	ldr	r2, [pc, #232]	; (800b1a8 <HAL_SAI_Transmit_DMA+0x160>)
 800b0be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0c6:	4a39      	ldr	r2, [pc, #228]	; (800b1ac <HAL_SAI_Transmit_DMA+0x164>)
 800b0c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0d0:	4a37      	ldr	r2, [pc, #220]	; (800b1b0 <HAL_SAI_Transmit_DMA+0x168>)
 800b0d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0da:	2200      	movs	r2, #0
 800b0dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	331c      	adds	r3, #28
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b0f8:	f7f8 fc52 	bl	80039a0 <HAL_DMA_Start_IT>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e047      	b.n	800b19e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b10e:	2100      	movs	r1, #0
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 fa17 	bl	800b544 <SAI_InterruptFlag>
 800b116:	4601      	mov	r1, r0
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	691a      	ldr	r2, [r3, #16]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b134:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b136:	e015      	b.n	800b164 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b138:	f7f7 fe24 	bl	8002d84 <HAL_GetTick>
 800b13c:	4602      	mov	r2, r0
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b146:	d90d      	bls.n	800b164 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b14e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e01c      	b.n	800b19e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0e2      	beq.n	800b138 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d107      	bne.n	800b190 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b18e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	e000      	b.n	800b19e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b19c:	2302      	movs	r3, #2
  }
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	0800b689 	.word	0x0800b689
 800b1ac:	0800b629 	.word	0x0800b629
 800b1b0:	0800b721 	.word	0x0800b721

0800b1b4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <HAL_SAI_Receive_DMA+0x1a>
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e079      	b.n	800b2c6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d172      	bne.n	800b2c4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_SAI_Receive_DMA+0x38>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e06c      	b.n	800b2c6 <HAL_SAI_Receive_DMA+0x112>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	88fa      	ldrh	r2, [r7, #6]
 800b1fe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	88fa      	ldrh	r2, [r7, #6]
 800b206:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2222      	movs	r2, #34	; 0x22
 800b216:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b220:	4a2b      	ldr	r2, [pc, #172]	; (800b2d0 <HAL_SAI_Receive_DMA+0x11c>)
 800b222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b22a:	4a2a      	ldr	r2, [pc, #168]	; (800b2d4 <HAL_SAI_Receive_DMA+0x120>)
 800b22c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b234:	4a28      	ldr	r2, [pc, #160]	; (800b2d8 <HAL_SAI_Receive_DMA+0x124>)
 800b236:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b23e:	2200      	movs	r2, #0
 800b240:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	331c      	adds	r3, #28
 800b24e:	4619      	mov	r1, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b254:	461a      	mov	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b25c:	f7f8 fba0 	bl	80039a0 <HAL_DMA_Start_IT>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d005      	beq.n	800b272 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e029      	b.n	800b2c6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b272:	2100      	movs	r1, #0
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f965 	bl	800b544 <SAI_InterruptFlag>
 800b27a:	4601      	mov	r1, r0
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691a      	ldr	r2, [r3, #16]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b298:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d107      	bne.n	800b2b8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b2b6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e000      	b.n	800b2c6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800b2c4:	2302      	movs	r3, #2
  }
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	0800b705 	.word	0x0800b705
 800b2d4:	0800b6a5 	.word	0x0800b6a5
 800b2d8:	0800b721 	.word	0x0800b721

0800b2dc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <SAI_InitI2S+0x2e>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	2b02      	cmp	r3, #2
 800b308:	d103      	bne.n	800b312 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	651a      	str	r2, [r3, #80]	; 0x50
 800b310:	e002      	b.n	800b318 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2201      	movs	r2, #1
 800b316:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b31e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b326:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e077      	b.n	800b432 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d107      	bne.n	800b358 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b354:	665a      	str	r2, [r3, #100]	; 0x64
 800b356:	e006      	b.n	800b366 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b35e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	665a      	str	r2, [r3, #100]	; 0x64
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d84f      	bhi.n	800b40c <SAI_InitI2S+0x130>
 800b36c:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <SAI_InitI2S+0x98>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b3a7 	.word	0x0800b3a7
 800b37c:	0800b3c9 	.word	0x0800b3c9
 800b380:	0800b3eb 	.word	0x0800b3eb

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2280      	movs	r2, #128	; 0x80
 800b388:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	085b      	lsrs	r3, r3, #1
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	085b      	lsrs	r3, r3, #1
 800b398:	011a      	lsls	r2, r3, #4
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2240      	movs	r2, #64	; 0x40
 800b3a2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b3a4:	e035      	b.n	800b412 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2280      	movs	r2, #128	; 0x80
 800b3aa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	085b      	lsrs	r3, r3, #1
 800b3b0:	019a      	lsls	r2, r3, #6
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	085b      	lsrs	r3, r3, #1
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2280      	movs	r2, #128	; 0x80
 800b3c4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b3c6:	e024      	b.n	800b412 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	22c0      	movs	r2, #192	; 0xc0
 800b3cc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	085b      	lsrs	r3, r3, #1
 800b3d2:	019a      	lsls	r2, r3, #6
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	085b      	lsrs	r3, r3, #1
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2280      	movs	r2, #128	; 0x80
 800b3e6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b3e8:	e013      	b.n	800b412 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	22e0      	movs	r2, #224	; 0xe0
 800b3ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	019a      	lsls	r2, r3, #6
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	085b      	lsrs	r3, r3, #1
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2280      	movs	r2, #128	; 0x80
 800b408:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b40a:	e002      	b.n	800b412 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	75fb      	strb	r3, [r7, #23]
      break;
 800b410:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d10b      	bne.n	800b430 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d102      	bne.n	800b424 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2210      	movs	r2, #16
 800b422:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b02      	cmp	r3, #2
 800b428:	d102      	bne.n	800b430 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2208      	movs	r2, #8
 800b42e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
}
 800b432:	4618      	mov	r0, r3
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop

0800b440 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <SAI_InitPCM+0x2e>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d103      	bne.n	800b476 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	651a      	str	r2, [r3, #80]	; 0x50
 800b474:	e002      	b.n	800b47c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b488:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b490:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4a4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	d103      	bne.n	800b4b4 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	659a      	str	r2, [r3, #88]	; 0x58
 800b4b2:	e002      	b.n	800b4ba <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	220d      	movs	r2, #13
 800b4b8:	659a      	str	r2, [r3, #88]	; 0x58
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d837      	bhi.n	800b530 <SAI_InitPCM+0xf0>
 800b4c0:	a201      	add	r2, pc, #4	; (adr r2, 800b4c8 <SAI_InitPCM+0x88>)
 800b4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c6:	bf00      	nop
 800b4c8:	0800b4d9 	.word	0x0800b4d9
 800b4cc:	0800b4ef 	.word	0x0800b4ef
 800b4d0:	0800b505 	.word	0x0800b505
 800b4d4:	0800b51b 	.word	0x0800b51b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2280      	movs	r2, #128	; 0x80
 800b4dc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	011a      	lsls	r2, r3, #4
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2240      	movs	r2, #64	; 0x40
 800b4ea:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b4ec:	e023      	b.n	800b536 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2280      	movs	r2, #128	; 0x80
 800b4f2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	015a      	lsls	r2, r3, #5
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2280      	movs	r2, #128	; 0x80
 800b500:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b502:	e018      	b.n	800b536 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	22c0      	movs	r2, #192	; 0xc0
 800b508:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	015a      	lsls	r2, r3, #5
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2280      	movs	r2, #128	; 0x80
 800b516:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b518:	e00d      	b.n	800b536 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	22e0      	movs	r2, #224	; 0xe0
 800b51e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2280      	movs	r2, #128	; 0x80
 800b52c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b52e:	e002      	b.n	800b536 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	75fb      	strb	r3, [r7, #23]
      break;
 800b534:	bf00      	nop
  }

  return status;
 800b536:	7dfb      	ldrb	r3, [r7, #23]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b550:	2301      	movs	r3, #1
 800b552:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b554:	78fb      	ldrb	r3, [r7, #3]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d103      	bne.n	800b562 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b566:	2b08      	cmp	r3, #8
 800b568:	d10b      	bne.n	800b582 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d003      	beq.n	800b57a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d103      	bne.n	800b582 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f043 0310 	orr.w	r3, r3, #16
 800b580:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	2b03      	cmp	r3, #3
 800b588:	d003      	beq.n	800b592 <SAI_InterruptFlag+0x4e>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d104      	bne.n	800b59c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e003      	b.n	800b5a4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f043 0304 	orr.w	r3, r3, #4
 800b5a2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
	...

0800b5b4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b5bc:	4b18      	ldr	r3, [pc, #96]	; (800b620 <SAI_Disable+0x6c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a18      	ldr	r2, [pc, #96]	; (800b624 <SAI_Disable+0x70>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	0b1b      	lsrs	r3, r3, #12
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b5de:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	72fb      	strb	r3, [r7, #11]
      break;
 800b5fa:	e009      	b.n	800b610 <SAI_Disable+0x5c>
    }
    count--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e7      	bne.n	800b5e0 <SAI_Disable+0x2c>

  return status;
 800b610:	7afb      	ldrb	r3, [r7, #11]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	24000468 	.word	0x24000468
 800b624:	95cbec1b 	.word	0x95cbec1b

0800b628 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b63e:	d01c      	beq.n	800b67a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b656:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b658:	2100      	movs	r1, #0
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ff72 	bl	800b544 <SAI_InterruptFlag>
 800b660:	4603      	mov	r3, r0
 800b662:	43d9      	mvns	r1, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	691a      	ldr	r2, [r3, #16]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	400a      	ands	r2, r1
 800b670:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f7f6 fe2a 	bl	80022d4 <HAL_SAI_TxCpltCallback>
#endif
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b694:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7f6 fe27 	bl	80022ea <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b69c:	bf00      	nop
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ba:	d01c      	beq.n	800b6f6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b6ca:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff ff34 	bl	800b544 <SAI_InterruptFlag>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	43d9      	mvns	r1, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	691a      	ldr	r2, [r3, #16]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	400a      	ands	r2, r1
 800b6ec:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7f6 fe41 	bl	800237e <HAL_SAI_RxCpltCallback>
#endif
}
 800b6fc:	bf00      	nop
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b710:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7f6 fe28 	bl	8002368 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7f9 fd76 	bl	8005220 <HAL_DMA_GetError>
 800b734:	4603      	mov	r3, r0
 800b736:	2b02      	cmp	r3, #2
 800b738:	d01d      	beq.n	800b776 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b740:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b758:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f7ff ff2a 	bl	800b5b4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7f6 fdc5 	bl	8002300 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
	...

0800b780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800b786:	f000 fcd5 	bl	800c134 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800b78a:	4b84      	ldr	r3, [pc, #528]	; (800b99c <main+0x21c>)
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d11b      	bne.n	800b7ce <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b796:	f3bf 8f4f 	dsb	sy
}
 800b79a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b79c:	f3bf 8f6f 	isb	sy
}
 800b7a0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800b7a2:	4b7e      	ldr	r3, [pc, #504]	; (800b99c <main+0x21c>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800b7aa:	f3bf 8f4f 	dsb	sy
}
 800b7ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b7b0:	f3bf 8f6f 	isb	sy
}
 800b7b4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800b7b6:	4b79      	ldr	r3, [pc, #484]	; (800b99c <main+0x21c>)
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	4a78      	ldr	r2, [pc, #480]	; (800b99c <main+0x21c>)
 800b7bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b7c2:	f3bf 8f4f 	dsb	sy
}
 800b7c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b7c8:	f3bf 8f6f 	isb	sy
}
 800b7cc:	e000      	b.n	800b7d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800b7ce:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800b7d0:	4b72      	ldr	r3, [pc, #456]	; (800b99c <main+0x21c>)
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d138      	bne.n	800b84e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800b7dc:	4b6f      	ldr	r3, [pc, #444]	; (800b99c <main+0x21c>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800b7e4:	f3bf 8f4f 	dsb	sy
}
 800b7e8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800b7ea:	4b6c      	ldr	r3, [pc, #432]	; (800b99c <main+0x21c>)
 800b7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f0:	61fb      	str	r3, [r7, #28]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	0b5b      	lsrs	r3, r3, #13
 800b7f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b7fa:	61bb      	str	r3, [r7, #24]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	08db      	lsrs	r3, r3, #3
 800b800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b804:	617b      	str	r3, [r7, #20]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800b80e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800b814:	4961      	ldr	r1, [pc, #388]	; (800b99c <main+0x21c>)
 800b816:	4313      	orrs	r3, r2
 800b818:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	1e5a      	subs	r2, r3, #1
 800b820:	617a      	str	r2, [r7, #20]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1ef      	bne.n	800b806 <main+0x86>
    } while(sets-- != 0U);
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	1e5a      	subs	r2, r3, #1
 800b82a:	61ba      	str	r2, [r7, #24]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e5      	bne.n	800b7fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800b830:	f3bf 8f4f 	dsb	sy
}
 800b834:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800b836:	4b59      	ldr	r3, [pc, #356]	; (800b99c <main+0x21c>)
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	4a58      	ldr	r2, [pc, #352]	; (800b99c <main+0x21c>)
 800b83c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b840:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800b842:	f3bf 8f4f 	dsb	sy
}
 800b846:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b848:	f3bf 8f6f 	isb	sy
}
 800b84c:	e000      	b.n	800b850 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800b84e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b850:	f7f7 fa12 	bl	8002c78 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 800b854:	2000      	movs	r0, #0
 800b856:	f7f6 fca3 	bl	80021a0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800b85a:	2001      	movs	r0, #1
 800b85c:	f7f6 fca0 	bl	80021a0 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800b860:	2000      	movs	r0, #0
 800b862:	f7f6 fd19 	bl	8002298 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800b866:	2001      	movs	r0, #1
 800b868:	f7f6 fd16 	bl	8002298 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b86c:	f000 f8ae 	bl	800b9cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b870:	f000 fada 	bl	800be28 <MX_GPIO_Init>
  MX_BDMA_Init();
 800b874:	f000 fa48 	bl	800bd08 <MX_BDMA_Init>
  MX_SAI4_Init();
 800b878:	f000 f9e4 	bl	800bc44 <MX_SAI4_Init>
  MX_CRC_Init();
 800b87c:	f000 f938 	bl	800baf0 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800b880:	f000 fc8a 	bl	800c198 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 800b884:	f000 fa5a 	bl	800bd3c <MX_DMA_Init>
  MX_SAI1_Init();
 800b888:	f000 f9a6 	bl	800bbd8 <MX_SAI1_Init>
  MX_RAMECC_Init();
 800b88c:	f000 f972 	bl	800bb74 <MX_RAMECC_Init>
//  MX_I2C4_Init();
//  MX_DFSDM1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 800b890:	f000 f90a 	bl	800baa8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Playback_Init();
 800b894:	f000 fb8e 	bl	800bfb4 <Playback_Init>

  /* Initialize the data buffer */
  for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 800b898:	2300      	movs	r3, #0
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
 800b89c:	e008      	b.n	800b8b0 <main+0x130>
  {
    PlayBuff[i] = AUDIO_ZERO;
 800b89e:	4a40      	ldr	r2, [pc, #256]	; (800b9a0 <main+0x220>)
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800b8a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	3302      	adds	r3, #2
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b6:	dbf2      	blt.n	800b89e <main+0x11e>
  }

  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
 800b8b8:	4b3a      	ldr	r3, [pc, #232]	; (800b9a4 <main+0x224>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4b3a      	ldr	r3, [pc, #232]	; (800b9a8 <main+0x228>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8c8:	4838      	ldr	r0, [pc, #224]	; (800b9ac <main+0x22c>)
 800b8ca:	f7f8 f869 	bl	80039a0 <HAL_DMA_Start_IT>
  HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES);
 800b8ce:	4b35      	ldr	r3, [pc, #212]	; (800b9a4 <main+0x224>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4835      	ldr	r0, [pc, #212]	; (800b9b0 <main+0x230>)
 800b8da:	f7ff fc6b 	bl	800b1b4 <HAL_SAI_Receive_DMA>
  while(!hsai_BlockA4.Ack) {}
 800b8de:	bf00      	nop
 800b8e0:	4b33      	ldr	r3, [pc, #204]	; (800b9b0 <main+0x230>)
 800b8e2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0fa      	beq.n	800b8e0 <main+0x160>
  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 800b8ea:	4b2f      	ldr	r3, [pc, #188]	; (800b9a8 <main+0x228>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a31      	ldr	r2, [pc, #196]	; (800b9b4 <main+0x234>)
 800b8f0:	4931      	ldr	r1, [pc, #196]	; (800b9b8 <main+0x238>)
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f002 fec4 	bl	800e680 <PDM_Filter>


  if(0 != AudioDrv->Play(AudioCompObj))
 800b8f8:	4b30      	ldr	r3, [pc, #192]	; (800b9bc <main+0x23c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	4a30      	ldr	r2, [pc, #192]	; (800b9c0 <main+0x240>)
 800b900:	6812      	ldr	r2, [r2, #0]
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <main+0x190>
   {
     Error_Handler();
 800b90c:	f000 fc3f 	bl	800c18e <Error_Handler>
   }

   if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t *)PlayBuff, PLAY_BUFF_SIZE))
 800b910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b914:	4922      	ldr	r1, [pc, #136]	; (800b9a0 <main+0x220>)
 800b916:	482b      	ldr	r0, [pc, #172]	; (800b9c4 <main+0x244>)
 800b918:	f7ff fb96 	bl	800b048 <HAL_SAI_Transmit_DMA>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <main+0x1a6>
   {
     Error_Handler();
 800b922:	f000 fc34 	bl	800c18e <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Wait a callback event */
	while(UpdatePointer==-1);
 800b926:	bf00      	nop
 800b928:	4b27      	ldr	r3, [pc, #156]	; (800b9c8 <main+0x248>)
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	b21b      	sxth	r3, r3
 800b92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b932:	d0f9      	beq.n	800b928 <main+0x1a8>

	int position = UpdatePointer;
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <main+0x248>)
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	b21b      	sxth	r3, r3
 800b93a:	623b      	str	r3, [r7, #32]
	UpdatePointer = -1;
 800b93c:	4b22      	ldr	r3, [pc, #136]	; (800b9c8 <main+0x248>)
 800b93e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b942:	801a      	strh	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)&PlayBuff[position], PLAY_BUFF_SIZE);
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	4a15      	ldr	r2, [pc, #84]	; (800b9a0 <main+0x220>)
 800b94a:	4413      	add	r3, r2
 800b94c:	613b      	str	r3, [r7, #16]
 800b94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b952:	60fb      	str	r3, [r7, #12]
    if ( dsize > 0 ) { 
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	dd1d      	ble.n	800b996 <main+0x216>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f003 021f 	and.w	r2, r3, #31
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	60bb      	str	r3, [r7, #8]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	607b      	str	r3, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800b96a:	f3bf 8f4f 	dsb	sy
}
 800b96e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b970:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <main+0x21c>)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3320      	adds	r3, #32
 800b97c:	607b      	str	r3, [r7, #4]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	3b20      	subs	r3, #32
 800b982:	60bb      	str	r3, [r7, #8]
      } while ( op_size > 0 );
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dcf2      	bgt.n	800b970 <main+0x1f0>
  __ASM volatile ("dsb 0xF":::"memory");
 800b98a:	f3bf 8f4f 	dsb	sy
}
 800b98e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b990:	f3bf 8f6f 	isb	sy
}
 800b994:	bf00      	nop
}
 800b996:	bf00      	nop
  {
 800b998:	e7c5      	b.n	800b926 <main+0x1a6>
 800b99a:	bf00      	nop
 800b99c:	e000ed00 	.word	0xe000ed00
 800b9a0:	240010a0 	.word	0x240010a0
 800b9a4:	2400045c 	.word	0x2400045c
 800b9a8:	24000460 	.word	0x24000460
 800b9ac:	24001000 	.word	0x24001000
 800b9b0:	2400193c 	.word	0x2400193c
 800b9b4:	24003b28 	.word	0x24003b28
 800b9b8:	24001a70 	.word	0x24001a70
 800b9bc:	24000f08 	.word	0x24000f08
 800b9c0:	24000fa0 	.word	0x24000fa0
 800b9c4:	240018a0 	.word	0x240018a0
 800b9c8:	2400045a 	.word	0x2400045a

0800b9cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b09c      	sub	sp, #112	; 0x70
 800b9d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b9d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9d6:	224c      	movs	r2, #76	; 0x4c
 800b9d8:	2100      	movs	r1, #0
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f002 fe94 	bl	800e708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b9e0:	1d3b      	adds	r3, r7, #4
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f002 fe8e 	bl	800e708 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800b9ec:	2004      	movs	r0, #4
 800b9ee:	f7fc f899 	bl	8007b24 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	603b      	str	r3, [r7, #0]
 800b9f6:	4b2b      	ldr	r3, [pc, #172]	; (800baa4 <SystemClock_Config+0xd8>)
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	4a2a      	ldr	r2, [pc, #168]	; (800baa4 <SystemClock_Config+0xd8>)
 800b9fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba00:	6193      	str	r3, [r2, #24]
 800ba02:	4b28      	ldr	r3, [pc, #160]	; (800baa4 <SystemClock_Config+0xd8>)
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ba0e:	bf00      	nop
 800ba10:	4b24      	ldr	r3, [pc, #144]	; (800baa4 <SystemClock_Config+0xd8>)
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba1c:	d1f8      	bne.n	800ba10 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800ba22:	2301      	movs	r3, #1
 800ba24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ba26:	2340      	movs	r3, #64	; 0x40
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ba32:	2304      	movs	r3, #4
 800ba34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800ba36:	2318      	movs	r3, #24
 800ba38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800ba3e:	237d      	movs	r3, #125	; 0x7d
 800ba40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ba42:	2302      	movs	r3, #2
 800ba44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800ba46:	230c      	movs	r3, #12
 800ba48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ba52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fc f8fc 	bl	8007c54 <HAL_RCC_OscConfig>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800ba62:	f000 fb94 	bl	800c18e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ba66:	233f      	movs	r3, #63	; 0x3f
 800ba68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ba72:	2308      	movs	r3, #8
 800ba74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ba76:	2340      	movs	r3, #64	; 0x40
 800ba78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ba7a:	2340      	movs	r3, #64	; 0x40
 800ba7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ba7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ba88:	1d3b      	adds	r3, r7, #4
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fc fc8d 	bl	80083ac <HAL_RCC_ClockConfig>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800ba98:	f000 fb79 	bl	800c18e <Error_Handler>
  }
}
 800ba9c:	bf00      	nop
 800ba9e:	3770      	adds	r7, #112	; 0x70
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	58024800 	.word	0x58024800

0800baa8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 800baac:	2200      	movs	r2, #0
 800baae:	2100      	movs	r1, #0
 800bab0:	2082      	movs	r0, #130	; 0x82
 800bab2:	f7f7 fa72 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800bab6:	2082      	movs	r0, #130	; 0x82
 800bab8:	f7f7 fa89 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800babc:	2200      	movs	r2, #0
 800babe:	2100      	movs	r1, #0
 800bac0:	2038      	movs	r0, #56	; 0x38
 800bac2:	f7f7 fa6a 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800bac6:	2038      	movs	r0, #56	; 0x38
 800bac8:	f7f7 fa81 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800bacc:	2200      	movs	r2, #0
 800bace:	2100      	movs	r1, #0
 800bad0:	2006      	movs	r0, #6
 800bad2:	f7f7 fa62 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800bad6:	2006      	movs	r0, #6
 800bad8:	f7f7 fa79 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800badc:	2200      	movs	r2, #0
 800bade:	2100      	movs	r1, #0
 800bae0:	2080      	movs	r0, #128	; 0x80
 800bae2:	f7f7 fa5a 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800bae6:	2080      	movs	r0, #128	; 0x80
 800bae8:	f7f7 fa71 	bl	8002fce <HAL_NVIC_EnableIRQ>
}
 800baec:	bf00      	nop
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800baf6:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <MX_CRC_Init+0x78>)
 800baf8:	4a1c      	ldr	r2, [pc, #112]	; (800bb6c <MX_CRC_Init+0x7c>)
 800bafa:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800bafc:	4b1a      	ldr	r3, [pc, #104]	; (800bb68 <MX_CRC_Init+0x78>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800bb02:	4b19      	ldr	r3, [pc, #100]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800bb08:	4b17      	ldr	r3, [pc, #92]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800bb0e:	4b16      	ldr	r3, [pc, #88]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800bb14:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800bb1a:	4813      	ldr	r0, [pc, #76]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb1c:	f7f7 fafc 	bl	8003118 <HAL_CRC_Init>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800bb26:	f000 fb32 	bl	800c18e <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800bb2a:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689a      	ldr	r2, [r3, #8]
 800bb30:	4b0d      	ldr	r3, [pc, #52]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f042 0201 	orr.w	r2, r2, #1
 800bb38:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800bb3a:	4b0d      	ldr	r3, [pc, #52]	; (800bb70 <MX_CRC_Init+0x80>)
 800bb3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb40:	4a0b      	ldr	r2, [pc, #44]	; (800bb70 <MX_CRC_Init+0x80>)
 800bb42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <MX_CRC_Init+0x80>)
 800bb4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800bb58:	4803      	ldr	r0, [pc, #12]	; (800bb68 <MX_CRC_Init+0x78>)
 800bb5a:	f000 fb61 	bl	800c220 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	24001078 	.word	0x24001078
 800bb6c:	58024c00 	.word	0x58024c00
 800bb70:	58024400 	.word	0x58024400

0800bb74 <MX_RAMECC_Init>:
//  * @brief RAMECC Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_RAMECC_Init(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800bb78:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <MX_RAMECC_Init+0x4c>)
 800bb7a:	4a12      	ldr	r2, [pc, #72]	; (800bbc4 <MX_RAMECC_Init+0x50>)
 800bb7c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 800bb7e:	4810      	ldr	r0, [pc, #64]	; (800bbc0 <MX_RAMECC_Init+0x4c>)
 800bb80:	f7fc f82a 	bl	8007bd8 <HAL_RAMECC_Init>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800bb8a:	f000 fb00 	bl	800c18e <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 800bb8e:	4b0e      	ldr	r3, [pc, #56]	; (800bbc8 <MX_RAMECC_Init+0x54>)
 800bb90:	4a0e      	ldr	r2, [pc, #56]	; (800bbcc <MX_RAMECC_Init+0x58>)
 800bb92:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800bb94:	480c      	ldr	r0, [pc, #48]	; (800bbc8 <MX_RAMECC_Init+0x54>)
 800bb96:	f7fc f81f 	bl	8007bd8 <HAL_RAMECC_Init>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 800bba0:	f000 faf5 	bl	800c18e <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <MX_RAMECC_Init+0x5c>)
 800bba6:	4a0b      	ldr	r2, [pc, #44]	; (800bbd4 <MX_RAMECC_Init+0x60>)
 800bba8:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800bbaa:	4809      	ldr	r0, [pc, #36]	; (800bbd0 <MX_RAMECC_Init+0x5c>)
 800bbac:	f7fc f814 	bl	8007bd8 <HAL_RAMECC_Init>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800bbb6:	f000 faea 	bl	800c18e <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800bbba:	bf00      	nop
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	24001a60 	.word	0x24001a60
 800bbc4:	48023020 	.word	0x48023020
 800bbc8:	240019d8 	.word	0x240019d8
 800bbcc:	48023040 	.word	0x48023040
 800bbd0:	24000ff0 	.word	0x24000ff0
 800bbd4:	58027020 	.word	0x58027020

0800bbd8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800bbdc:	4b16      	ldr	r3, [pc, #88]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bbde:	4a17      	ldr	r2, [pc, #92]	; (800bc3c <MX_SAI1_Init+0x64>)
 800bbe0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bbe8:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800bbf4:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800bc00:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bc02:	4a0f      	ldr	r2, [pc, #60]	; (800bc40 <MX_SAI1_Init+0x68>)
 800bc04:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bc12:	4b09      	ldr	r3, [pc, #36]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bc18:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800bc1e:	2302      	movs	r3, #2
 800bc20:	2200      	movs	r2, #0
 800bc22:	2100      	movs	r1, #0
 800bc24:	4804      	ldr	r0, [pc, #16]	; (800bc38 <MX_SAI1_Init+0x60>)
 800bc26:	f7fe ffc9 	bl	800abbc <HAL_SAI_InitProtocol>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800bc30:	f000 faad 	bl	800c18e <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800bc34:	bf00      	nop
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	240018a0 	.word	0x240018a0
 800bc3c:	40015824 	.word	0x40015824
 800bc40:	0002ee00 	.word	0x0002ee00

0800bc44 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800bc48:	4b2d      	ldr	r3, [pc, #180]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc4a:	4a2e      	ldr	r2, [pc, #184]	; (800bd04 <MX_SAI4_Init+0xc0>)
 800bc4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800bc54:	4b2a      	ldr	r3, [pc, #168]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 800bc5a:	4b29      	ldr	r3, [pc, #164]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc5c:	2280      	movs	r2, #128	; 0x80
 800bc5e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bc60:	4b27      	ldr	r3, [pc, #156]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bc66:	4b26      	ldr	r3, [pc, #152]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800bc6c:	4b24      	ldr	r3, [pc, #144]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bc72:	4b23      	ldr	r3, [pc, #140]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 800bc78:	4b21      	ldr	r3, [pc, #132]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bc7e:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bc80:	4b1f      	ldr	r3, [pc, #124]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800bc86:	4b1e      	ldr	r3, [pc, #120]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800bc8c:	4b1c      	ldr	r3, [pc, #112]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800bc92:	4b1b      	ldr	r3, [pc, #108]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 800bc9a:	4b19      	ldr	r3, [pc, #100]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800bca0:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bca6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 64;
 800bca8:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcaa:	2240      	movs	r2, #64	; 0x40
 800bcac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 32;
 800bcae:	4b14      	ldr	r3, [pc, #80]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bcba:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bcbc:	4b10      	ldr	r3, [pc, #64]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bcc2:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bcce:	4b0c      	ldr	r3, [pc, #48]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 4;
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcd6:	2204      	movs	r2, #4
 800bcd8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800bcda:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bce0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800bce2:	4807      	ldr	r0, [pc, #28]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bce4:	f7fe ff9c 	bl	800ac20 <HAL_SAI_Init>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 800bcee:	f000 fa4e 	bl	800c18e <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */
  hsai_BlockA4.Ack = 0;
 800bcf2:	4b03      	ldr	r3, [pc, #12]	; (800bd00 <MX_SAI4_Init+0xbc>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* USER CODE END SAI4_Init 2 */

}
 800bcfa:	bf00      	nop
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	2400193c 	.word	0x2400193c
 800bd04:	58005404 	.word	0x58005404

0800bd08 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800bd0e:	4b0a      	ldr	r3, [pc, #40]	; (800bd38 <MX_BDMA_Init+0x30>)
 800bd10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd14:	4a08      	ldr	r2, [pc, #32]	; (800bd38 <MX_BDMA_Init+0x30>)
 800bd16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd1e:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <MX_BDMA_Init+0x30>)
 800bd20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd28:	607b      	str	r3, [r7, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]

}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	58024400 	.word	0x58024400

0800bd3c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bd42:	4b35      	ldr	r3, [pc, #212]	; (800be18 <MX_DMA_Init+0xdc>)
 800bd44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd48:	4a33      	ldr	r2, [pc, #204]	; (800be18 <MX_DMA_Init+0xdc>)
 800bd4a:	f043 0302 	orr.w	r3, r3, #2
 800bd4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bd52:	4b31      	ldr	r3, [pc, #196]	; (800be18 <MX_DMA_Init+0xdc>)
 800bd54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bd60:	4b2d      	ldr	r3, [pc, #180]	; (800be18 <MX_DMA_Init+0xdc>)
 800bd62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd66:	4a2c      	ldr	r2, [pc, #176]	; (800be18 <MX_DMA_Init+0xdc>)
 800bd68:	f043 0301 	orr.w	r3, r3, #1
 800bd6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bd70:	4b29      	ldr	r3, [pc, #164]	; (800be18 <MX_DMA_Init+0xdc>)
 800bd72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	603b      	str	r3, [r7, #0]
 800bd7c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800bd7e:	4b27      	ldr	r3, [pc, #156]	; (800be1c <MX_DMA_Init+0xe0>)
 800bd80:	4a27      	ldr	r2, [pc, #156]	; (800be20 <MX_DMA_Init+0xe4>)
 800bd82:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 800bd84:	4b25      	ldr	r3, [pc, #148]	; (800be1c <MX_DMA_Init+0xe0>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800bd8a:	4b24      	ldr	r3, [pc, #144]	; (800be1c <MX_DMA_Init+0xe0>)
 800bd8c:	2280      	movs	r2, #128	; 0x80
 800bd8e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800bd90:	4b22      	ldr	r3, [pc, #136]	; (800be1c <MX_DMA_Init+0xe0>)
 800bd92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd96:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800bd98:	4b20      	ldr	r3, [pc, #128]	; (800be1c <MX_DMA_Init+0xe0>)
 800bd9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd9e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800bda0:	4b1e      	ldr	r3, [pc, #120]	; (800be1c <MX_DMA_Init+0xe0>)
 800bda2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bda6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800bda8:	4b1c      	ldr	r3, [pc, #112]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bdae:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800bdb0:	4b1a      	ldr	r3, [pc, #104]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800bdb6:	4b19      	ldr	r3, [pc, #100]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bdbc:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800bdbe:	4b17      	ldr	r3, [pc, #92]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800bdc4:	4b15      	ldr	r3, [pc, #84]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdc6:	2203      	movs	r2, #3
 800bdc8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800bdca:	4b14      	ldr	r3, [pc, #80]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800bdd0:	4b12      	ldr	r3, [pc, #72]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800bdd6:	4811      	ldr	r0, [pc, #68]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdd8:	f7f7 fa88 	bl	80032ec <HAL_DMA_Init>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 800bde2:	f000 f9d4 	bl	800c18e <Error_Handler>
  }

  // Register some callbacks for the DMA
//    HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_HALFCPLT_CB_ID, &FYDP_SAI4_RxHalfCallback);
    HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, &RxAck);
 800bde6:	4a0f      	ldr	r2, [pc, #60]	; (800be24 <MX_DMA_Init+0xe8>)
 800bde8:	2100      	movs	r1, #0
 800bdea:	480c      	ldr	r0, [pc, #48]	; (800be1c <MX_DMA_Init+0xe0>)
 800bdec:	f7f9 f9b0 	bl	8005150 <HAL_DMA_RegisterCallback>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	200c      	movs	r0, #12
 800bdf6:	f7f7 f8d0 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800bdfa:	200c      	movs	r0, #12
 800bdfc:	f7f7 f8e7 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800be00:	2200      	movs	r2, #0
 800be02:	2100      	movs	r1, #0
 800be04:	2066      	movs	r0, #102	; 0x66
 800be06:	f7f7 f8c8 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800be0a:	2066      	movs	r0, #102	; 0x66
 800be0c:	f7f7 f8df 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	58024400 	.word	0x58024400
 800be1c:	24001000 	.word	0x24001000
 800be20:	40020410 	.word	0x40020410
 800be24:	0800c789 	.word	0x0800c789

0800be28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	; 0x28
 800be2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be2e:	f107 0314 	add.w	r3, r7, #20
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	605a      	str	r2, [r3, #4]
 800be38:	609a      	str	r2, [r3, #8]
 800be3a:	60da      	str	r2, [r3, #12]
 800be3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800be3e:	4b2e      	ldr	r3, [pc, #184]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be44:	4a2c      	ldr	r2, [pc, #176]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be46:	f043 0302 	orr.w	r3, r3, #2
 800be4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be4e:	4b2a      	ldr	r3, [pc, #168]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	613b      	str	r3, [r7, #16]
 800be5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800be5c:	4b26      	ldr	r3, [pc, #152]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be62:	4a25      	ldr	r2, [pc, #148]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be64:	f043 0301 	orr.w	r3, r3, #1
 800be68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be6c:	4b22      	ldr	r3, [pc, #136]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be72:	f003 0301 	and.w	r3, r3, #1
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800be7a:	4b1f      	ldr	r3, [pc, #124]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be80:	4a1d      	ldr	r2, [pc, #116]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be82:	f043 0310 	orr.w	r3, r3, #16
 800be86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be8a:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be90:	f003 0310 	and.w	r3, r3, #16
 800be94:	60bb      	str	r3, [r7, #8]
 800be96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800be98:	4b17      	ldr	r3, [pc, #92]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800be9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be9e:	4a16      	ldr	r2, [pc, #88]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800bea0:	f043 0308 	orr.w	r3, r3, #8
 800bea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bea8:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800beaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800beae:	f003 0308 	and.w	r3, r3, #8
 800beb2:	607b      	str	r3, [r7, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800beb6:	4b10      	ldr	r3, [pc, #64]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800beb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bebc:	4a0e      	ldr	r2, [pc, #56]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800bebe:	f043 0320 	orr.w	r3, r3, #32
 800bec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bec6:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <MX_GPIO_Init+0xd0>)
 800bec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800becc:	f003 0320 	and.w	r3, r3, #32
 800bed0:	603b      	str	r3, [r7, #0]
 800bed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bed4:	2301      	movs	r3, #1
 800bed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bed8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800bedc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bee2:	f107 0314 	add.w	r3, r7, #20
 800bee6:	4619      	mov	r1, r3
 800bee8:	4804      	ldr	r0, [pc, #16]	; (800befc <MX_GPIO_Init+0xd4>)
 800beea:	f7f9 fea5 	bl	8005c38 <HAL_GPIO_Init>

}
 800beee:	bf00      	nop
 800bef0:	3728      	adds	r7, #40	; 0x28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	58024400 	.word	0x58024400
 800befc:	58021000 	.word	0x58021000

0800bf00 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af00      	add	r7, sp, #0
  int32_t                   ret = BSP_ERROR_NONE;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t               IOCtx;
  static WM8994_Object_t    WM8994Obj;
  uint32_t                  wm8994_id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 800bf0a:	2334      	movs	r3, #52	; 0x34
 800bf0c:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 800bf0e:	4b20      	ldr	r3, [pc, #128]	; (800bf90 <WM8994_Probe+0x90>)
 800bf10:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800bf12:	4b20      	ldr	r3, [pc, #128]	; (800bf94 <WM8994_Probe+0x94>)
 800bf14:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800bf16:	4b20      	ldr	r3, [pc, #128]	; (800bf98 <WM8994_Probe+0x98>)
 800bf18:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800bf1a:	4b20      	ldr	r3, [pc, #128]	; (800bf9c <WM8994_Probe+0x9c>)
 800bf1c:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 800bf1e:	4b20      	ldr	r3, [pc, #128]	; (800bfa0 <WM8994_Probe+0xa0>)
 800bf20:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800bf22:	1d3b      	adds	r3, r7, #4
 800bf24:	4619      	mov	r1, r3
 800bf26:	481f      	ldr	r0, [pc, #124]	; (800bfa4 <WM8994_Probe+0xa4>)
 800bf28:	f7f5 ff02 	bl	8001d30 <WM8994_RegisterBusIO>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d003      	beq.n	800bf3a <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bf32:	f06f 0307 	mvn.w	r3, #7
 800bf36:	61fb      	str	r3, [r7, #28]
 800bf38:	e024      	b.n	800bf84 <WM8994_Probe+0x84>
  }
  else if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 800bf3a:	481a      	ldr	r0, [pc, #104]	; (800bfa4 <WM8994_Probe+0xa4>)
 800bf3c:	f7f5 fee0 	bl	8001d00 <WM8994_Reset>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <WM8994_Probe+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf46:	f06f 0304 	mvn.w	r3, #4
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	e01a      	b.n	800bf84 <WM8994_Probe+0x84>
  }
  else if(WM8994_ReadID(&WM8994Obj, &wm8994_id) != WM8994_OK)
 800bf4e:	463b      	mov	r3, r7
 800bf50:	4619      	mov	r1, r3
 800bf52:	4814      	ldr	r0, [pc, #80]	; (800bfa4 <WM8994_Probe+0xa4>)
 800bf54:	f7f5 f8cf 	bl	80010f6 <WM8994_ReadID>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <WM8994_Probe+0x66>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf5e:	f06f 0304 	mvn.w	r3, #4
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	e00e      	b.n	800bf84 <WM8994_Probe+0x84>
  }
  else if(wm8994_id != WM8994_ID)
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	f648 1294 	movw	r2, #35220	; 0x8994
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d003      	beq.n	800bf78 <WM8994_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf70:	f06f 0306 	mvn.w	r3, #6
 800bf74:	61fb      	str	r3, [r7, #28]
 800bf76:	e005      	b.n	800bf84 <WM8994_Probe+0x84>
  }
  else
  {
    AudioDrv = (AUDIO_Drv_t *) &WM8994_Driver;
 800bf78:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <WM8994_Probe+0xa8>)
 800bf7a:	4a0c      	ldr	r2, [pc, #48]	; (800bfac <WM8994_Probe+0xac>)
 800bf7c:	601a      	str	r2, [r3, #0]
    AudioCompObj = &WM8994Obj;
 800bf7e:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <WM8994_Probe+0xb0>)
 800bf80:	4a08      	ldr	r2, [pc, #32]	; (800bfa4 <WM8994_Probe+0xa4>)
 800bf82:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800bf84:	69fb      	ldr	r3, [r7, #28]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	080023d1 	.word	0x080023d1
 800bf94:	08002445 	.word	0x08002445
 800bf98:	08002575 	.word	0x08002575
 800bf9c:	08002519 	.word	0x08002519
 800bfa0:	080025d1 	.word	0x080025d1
 800bfa4:	24000f0c 	.word	0x24000f0c
 800bfa8:	24000f08 	.word	0x24000f08
 800bfac:	24000400 	.word	0x24000400
 800bfb0:	24000fa0 	.word	0x24000fa0

0800bfb4 <Playback_Init>:
  * @brief  Playback initialization
  * @param  None
  * @retval None
  */
static void Playback_Init(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b0b2      	sub	sp, #200	; 0xc8
 800bfb8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Configure PLLSAI prescalers */
  /* PLL2SAI_VCO: VCO_271M
     SAI_CLK(first level) = PLLSAI_VCO/PLL2P = 271/24 = 11.291 Mhz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800bfba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfbe:	603b      	str	r3, [r7, #0]
  RCC_PeriphCLKInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 24;
 800bfc4:	2318      	movs	r3, #24
 800bfc6:	60fb      	str	r3, [r7, #12]
  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 24;
 800bfc8:	2318      	movs	r3, #24
 800bfca:	613b      	str	r3, [r7, #16]
  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 1;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 271;
 800bfd0:	f240 130f 	movw	r3, #271	; 0x10f
 800bfd4:	60bb      	str	r3, [r7, #8]
  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	623b      	str	r3, [r7, #32]
  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800bfde:	2320      	movs	r3, #32
 800bfe0:	61fb      	str	r3, [r7, #28]
  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 25;
 800bfe2:	2319      	movs	r3, #25
 800bfe4:	607b      	str	r3, [r7, #4]

  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fc fd55 	bl	8008a98 <HAL_RCCEx_PeriphCLKConfig>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <Playback_Init+0x44>
  {
    Error_Handler();
 800bff4:	f000 f8cb 	bl	800c18e <Error_Handler>
  }

  /* Initialize SAI */
  __HAL_SAI_RESET_HANDLE_STATE(&hsai_BlockB1);
 800bff8:	4b4a      	ldr	r3, [pc, #296]	; (800c124 <Playback_Init+0x170>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  hsai_BlockB1.Instance = AUDIO_OUT_SAIx;
 800c000:	4b48      	ldr	r3, [pc, #288]	; (800c124 <Playback_Init+0x170>)
 800c002:	4a49      	ldr	r2, [pc, #292]	; (800c128 <Playback_Init+0x174>)
 800c004:	601a      	str	r2, [r3, #0]

  __HAL_SAI_DISABLE(&hsai_BlockB1);
 800c006:	4b47      	ldr	r3, [pc, #284]	; (800c124 <Playback_Init+0x170>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	4b45      	ldr	r3, [pc, #276]	; (800c124 <Playback_Init+0x170>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c014:	601a      	str	r2, [r3, #0]

  hsai_BlockB1.Init.AudioMode      = SAI_MODEMASTER_TX;
 800c016:	4b43      	ldr	r3, [pc, #268]	; (800c124 <Playback_Init+0x170>)
 800c018:	2200      	movs	r2, #0
 800c01a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro        = SAI_ASYNCHRONOUS;
 800c01c:	4b41      	ldr	r3, [pc, #260]	; (800c124 <Playback_Init+0x170>)
 800c01e:	2200      	movs	r2, #0
 800c020:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800c022:	4b40      	ldr	r3, [pc, #256]	; (800c124 <Playback_Init+0x170>)
 800c024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c028:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800c02a:	4b3e      	ldr	r3, [pc, #248]	; (800c124 <Playback_Init+0x170>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800c030:	4b3c      	ldr	r3, [pc, #240]	; (800c124 <Playback_Init+0x170>)
 800c032:	2201      	movs	r2, #1
 800c034:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 800c036:	4b3b      	ldr	r3, [pc, #236]	; (800c124 <Playback_Init+0x170>)
 800c038:	f245 6222 	movw	r2, #22050	; 0x5622
 800c03c:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.Protocol       = SAI_FREE_PROTOCOL;
 800c03e:	4b39      	ldr	r3, [pc, #228]	; (800c124 <Playback_Init+0x170>)
 800c040:	2200      	movs	r2, #0
 800c042:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.DataSize       = SAI_DATASIZE_16;
 800c044:	4b37      	ldr	r3, [pc, #220]	; (800c124 <Playback_Init+0x170>)
 800c046:	2280      	movs	r2, #128	; 0x80
 800c048:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800c04a:	4b36      	ldr	r3, [pc, #216]	; (800c124 <Playback_Init+0x170>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c050:	4b34      	ldr	r3, [pc, #208]	; (800c124 <Playback_Init+0x170>)
 800c052:	2200      	movs	r2, #0
 800c054:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800c056:	4b33      	ldr	r3, [pc, #204]	; (800c124 <Playback_Init+0x170>)
 800c058:	2200      	movs	r2, #0
 800c05a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.Mckdiv         = 0; /* N.U */
 800c05c:	4b31      	ldr	r3, [pc, #196]	; (800c124 <Playback_Init+0x170>)
 800c05e:	2200      	movs	r2, #0
 800c060:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c062:	4b30      	ldr	r3, [pc, #192]	; (800c124 <Playback_Init+0x170>)
 800c064:	2200      	movs	r2, #0
 800c066:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c068:	4b2e      	ldr	r3, [pc, #184]	; (800c124 <Playback_Init+0x170>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800c06e:	4b2d      	ldr	r3, [pc, #180]	; (800c124 <Playback_Init+0x170>)
 800c070:	2200      	movs	r2, #0
 800c072:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 800c074:	4b2b      	ldr	r3, [pc, #172]	; (800c124 <Playback_Init+0x170>)
 800c076:	2200      	movs	r2, #0
 800c078:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.PdmInit.Activation   = DISABLE;
 800c07a:	4b2a      	ldr	r3, [pc, #168]	; (800c124 <Playback_Init+0x170>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  hsai_BlockB1.FrameInit.FrameLength       = 32;
 800c082:	4b28      	ldr	r3, [pc, #160]	; (800c124 <Playback_Init+0x170>)
 800c084:	2220      	movs	r2, #32
 800c086:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 16;
 800c088:	4b26      	ldr	r3, [pc, #152]	; (800c124 <Playback_Init+0x170>)
 800c08a:	2210      	movs	r2, #16
 800c08c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800c08e:	4b25      	ldr	r3, [pc, #148]	; (800c124 <Playback_Init+0x170>)
 800c090:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c094:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800c096:	4b23      	ldr	r3, [pc, #140]	; (800c124 <Playback_Init+0x170>)
 800c098:	2200      	movs	r2, #0
 800c09a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800c09c:	4b21      	ldr	r3, [pc, #132]	; (800c124 <Playback_Init+0x170>)
 800c09e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c0a2:	665a      	str	r2, [r3, #100]	; 0x64

  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800c0a4:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <Playback_Init+0x170>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800c0aa:	4b1e      	ldr	r3, [pc, #120]	; (800c124 <Playback_Init+0x170>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber     = 2;
 800c0b0:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <Playback_Init+0x170>)
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 800c0b6:	4b1b      	ldr	r3, [pc, #108]	; (800c124 <Playback_Init+0x170>)
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_OK != HAL_SAI_Init(&hsai_BlockB1))
 800c0bc:	4819      	ldr	r0, [pc, #100]	; (800c124 <Playback_Init+0x170>)
 800c0be:	f7fe fdaf 	bl	800ac20 <HAL_SAI_Init>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <Playback_Init+0x118>
  {
    Error_Handler();
 800c0c8:	f000 f861 	bl	800c18e <Error_Handler>
  }

  /* Enable SAI to generate clock used by audio driver */
  __HAL_SAI_ENABLE(&hsai_BlockB1);
 800c0cc:	4b15      	ldr	r3, [pc, #84]	; (800c124 <Playback_Init+0x170>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4b14      	ldr	r3, [pc, #80]	; (800c124 <Playback_Init+0x170>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c0da:	601a      	str	r2, [r3, #0]

  WM8994_Probe();
 800c0dc:	f7ff ff10 	bl	800bf00 <WM8994_Probe>

  /* Fill codec_init structure */
  codec_init.InputDevice  = WM8994_IN_NONE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  codec_init.OutputDevice = WM8994_OUT_HEADPHONE;
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  codec_init.Frequency    = AUDIO_FREQUENCY_22K;
 800c0ec:	f245 6322 	movw	r3, #22050	; 0x5622
 800c0f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  codec_init.Resolution   = WM8994_RESOLUTION_16b; /* Not used */
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  codec_init.Volume       = 80;
 800c0fa:	2350      	movs	r3, #80	; 0x50
 800c0fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  /* Initialize the codec internal registers */
  if(AudioDrv->Init(AudioCompObj, &codec_init) < 0)
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <Playback_Init+0x178>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a0a      	ldr	r2, [pc, #40]	; (800c130 <Playback_Init+0x17c>)
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800c10e:	4610      	mov	r0, r2
 800c110:	4798      	blx	r3
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	da01      	bge.n	800c11c <Playback_Init+0x168>
  {
     Error_Handler();
 800c118:	f000 f839 	bl	800c18e <Error_Handler>
  }
}
 800c11c:	bf00      	nop
 800c11e:	37c8      	adds	r7, #200	; 0xc8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	240018a0 	.word	0x240018a0
 800c128:	40015824 	.word	0x40015824
 800c12c:	24000f08 	.word	0x24000f08
 800c130:	24000fa0 	.word	0x24000fa0

0800c134 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800c13a:	463b      	mov	r3, r7
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	605a      	str	r2, [r3, #4]
 800c142:	609a      	str	r2, [r3, #8]
 800c144:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800c146:	f7f6 ff6b 	bl	8003020 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c14a:	2301      	movs	r3, #1
 800c14c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c14e:	2300      	movs	r3, #0
 800c150:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800c152:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800c156:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800c158:	2310      	movs	r3, #16
 800c15a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c160:	2300      	movs	r3, #0
 800c162:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c164:	2303      	movs	r3, #3
 800c166:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c168:	2300      	movs	r3, #0
 800c16a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c16c:	2301      	movs	r3, #1
 800c16e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c170:	2301      	movs	r3, #1
 800c172:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c174:	2300      	movs	r3, #0
 800c176:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c178:	463b      	mov	r3, r7
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f6 ff88 	bl	8003090 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 800c180:	2006      	movs	r0, #6
 800c182:	f7f6 ff65 	bl	8003050 <HAL_MPU_Enable>

}
 800c186:	bf00      	nop
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c18e:	b480      	push	{r7}
 800c190:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c192:	b672      	cpsid	i
}
 800c194:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c196:	e7fe      	b.n	800c196 <Error_Handler+0x8>

0800c198 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800c19c:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c19e:	2201      	movs	r2, #1
 800c1a0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c1aa:	4a0e      	ldr	r2, [pc, #56]	; (800c1e4 <MX_PDM2PCM_Init+0x4c>)
 800c1ac:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800c1ae:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800c1b4:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800c1ba:	4809      	ldr	r0, [pc, #36]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c1bc:	f002 f896 	bl	800e2ec <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800c1c0:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <MX_PDM2PCM_Init+0x50>)
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800c1c6:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <MX_PDM2PCM_Init+0x50>)
 800c1c8:	2210      	movs	r2, #16
 800c1ca:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800c1cc:	4b06      	ldr	r3, [pc, #24]	; (800c1e8 <MX_PDM2PCM_Init+0x50>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800c1d2:	4905      	ldr	r1, [pc, #20]	; (800c1e8 <MX_PDM2PCM_Init+0x50>)
 800c1d4:	4802      	ldr	r0, [pc, #8]	; (800c1e0 <MX_PDM2PCM_Init+0x48>)
 800c1d6:	f002 f959 	bl	800e48c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c1da:	bf00      	nop
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	24003b28 	.word	0x24003b28
 800c1e4:	7d70a3d6 	.word	0x7d70a3d6
 800c1e8:	24003b20 	.word	0x24003b20

0800c1ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <HAL_MspInit+0x30>)
 800c1f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c1f8:	4a08      	ldr	r2, [pc, #32]	; (800c21c <HAL_MspInit+0x30>)
 800c1fa:	f043 0302 	orr.w	r3, r3, #2
 800c1fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c202:	4b06      	ldr	r3, [pc, #24]	; (800c21c <HAL_MspInit+0x30>)
 800c204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	607b      	str	r3, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	58024400 	.word	0x58024400

0800c220 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a0b      	ldr	r2, [pc, #44]	; (800c25c <HAL_CRC_MspInit+0x3c>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d10e      	bne.n	800c250 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c232:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <HAL_CRC_MspInit+0x40>)
 800c234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <HAL_CRC_MspInit+0x40>)
 800c23a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c23e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c242:	4b07      	ldr	r3, [pc, #28]	; (800c260 <HAL_CRC_MspInit+0x40>)
 800c244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c24c:	60fb      	str	r3, [r7, #12]
 800c24e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800c250:	bf00      	nop
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	58024c00 	.word	0x58024c00
 800c260:	58024400 	.word	0x58024400

0800c264 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b0b6      	sub	sp, #216	; 0xd8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c26c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	605a      	str	r2, [r3, #4]
 800c276:	609a      	str	r2, [r3, #8]
 800c278:	60da      	str	r2, [r3, #12]
 800c27a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c27c:	f107 0310 	add.w	r3, r7, #16
 800c280:	22b4      	movs	r2, #180	; 0xb4
 800c282:	2100      	movs	r1, #0
 800c284:	4618      	mov	r0, r3
 800c286:	f002 fa3f 	bl	800e708 <memset>
  if(hi2c->Instance==I2C4)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a29      	ldr	r2, [pc, #164]	; (800c334 <HAL_I2C_MspInit+0xd0>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d14a      	bne.n	800c32a <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800c294:	2310      	movs	r3, #16
 800c296:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800c298:	2300      	movs	r3, #0
 800c29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c29e:	f107 0310 	add.w	r3, r7, #16
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fc fbf8 	bl	8008a98 <HAL_RCCEx_PeriphCLKConfig>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800c2ae:	f7ff ff6e 	bl	800c18e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2b2:	4b21      	ldr	r3, [pc, #132]	; (800c338 <HAL_I2C_MspInit+0xd4>)
 800c2b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2b8:	4a1f      	ldr	r2, [pc, #124]	; (800c338 <HAL_I2C_MspInit+0xd4>)
 800c2ba:	f043 0302 	orr.w	r3, r3, #2
 800c2be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2c2:	4b1d      	ldr	r3, [pc, #116]	; (800c338 <HAL_I2C_MspInit+0xd4>)
 800c2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c2d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c2d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c2d8:	2312      	movs	r3, #18
 800c2da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800c2ea:	2306      	movs	r3, #6
 800c2ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4811      	ldr	r0, [pc, #68]	; (800c33c <HAL_I2C_MspInit+0xd8>)
 800c2f8:	f7f9 fc9e 	bl	8005c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800c2fc:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <HAL_I2C_MspInit+0xd4>)
 800c2fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c302:	4a0d      	ldr	r2, [pc, #52]	; (800c338 <HAL_I2C_MspInit+0xd4>)
 800c304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c308:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <HAL_I2C_MspInit+0xd4>)
 800c30e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c316:	60bb      	str	r3, [r7, #8]
 800c318:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800c31a:	2200      	movs	r2, #0
 800c31c:	2100      	movs	r1, #0
 800c31e:	2060      	movs	r0, #96	; 0x60
 800c320:	f7f6 fe3b 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800c324:	2060      	movs	r0, #96	; 0x60
 800c326:	f7f6 fe52 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800c32a:	bf00      	nop
 800c32c:	37d8      	adds	r7, #216	; 0xd8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	58001c00 	.word	0x58001c00
 800c338:	58024400 	.word	0x58024400
 800c33c:	58020400 	.word	0x58020400

0800c340 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a0d      	ldr	r2, [pc, #52]	; (800c384 <HAL_I2C_MspDeInit+0x44>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d114      	bne.n	800c37c <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800c352:	4b0d      	ldr	r3, [pc, #52]	; (800c388 <HAL_I2C_MspDeInit+0x48>)
 800c354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c358:	4a0b      	ldr	r2, [pc, #44]	; (800c388 <HAL_I2C_MspDeInit+0x48>)
 800c35a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c35e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800c362:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c366:	4809      	ldr	r0, [pc, #36]	; (800c38c <HAL_I2C_MspDeInit+0x4c>)
 800c368:	f7f9 fe0e 	bl	8005f88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800c36c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c370:	4806      	ldr	r0, [pc, #24]	; (800c38c <HAL_I2C_MspDeInit+0x4c>)
 800c372:	f7f9 fe09 	bl	8005f88 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 800c376:	2060      	movs	r0, #96	; 0x60
 800c378:	f7f6 fe37 	bl	8002fea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	58001c00 	.word	0x58001c00
 800c388:	58024400 	.word	0x58024400
 800c38c:	58020400 	.word	0x58020400

0800c390 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b0ba      	sub	sp, #232	; 0xe8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c398:	f107 0310 	add.w	r3, r7, #16
 800c39c:	22b4      	movs	r2, #180	; 0xb4
 800c39e:	2100      	movs	r1, #0
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f002 f9b1 	bl	800e708 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4aaf      	ldr	r2, [pc, #700]	; (800c668 <HAL_SAI_MspInit+0x2d8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	f040 80af 	bne.w	800c510 <HAL_SAI_MspInit+0x180>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800c3b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c3bc:	f107 0310 	add.w	r3, r7, #16
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fc fb69 	bl	8008a98 <HAL_RCCEx_PeriphCLKConfig>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800c3cc:	f7ff fedf 	bl	800c18e <Error_Handler>
    }

      if (SAI1_client == 0)
 800c3d0:	4ba6      	ldr	r3, [pc, #664]	; (800c66c <HAL_SAI_MspInit+0x2dc>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10e      	bne.n	800c3f6 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800c3d8:	4ba5      	ldr	r3, [pc, #660]	; (800c670 <HAL_SAI_MspInit+0x2e0>)
 800c3da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c3de:	4aa4      	ldr	r2, [pc, #656]	; (800c670 <HAL_SAI_MspInit+0x2e0>)
 800c3e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c3e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c3e8:	4ba1      	ldr	r3, [pc, #644]	; (800c670 <HAL_SAI_MspInit+0x2e0>)
 800c3ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c3ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800c3f6:	4b9d      	ldr	r3, [pc, #628]	; (800c66c <HAL_SAI_MspInit+0x2dc>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	4a9b      	ldr	r2, [pc, #620]	; (800c66c <HAL_SAI_MspInit+0x2dc>)
 800c3fe:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c400:	2308      	movs	r3, #8
 800c402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c406:	2302      	movs	r3, #2
 800c408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c412:	2300      	movs	r3, #0
 800c414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c418:	2306      	movs	r3, #6
 800c41a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c41e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c422:	4619      	mov	r1, r3
 800c424:	4893      	ldr	r0, [pc, #588]	; (800c674 <HAL_SAI_MspInit+0x2e4>)
 800c426:	f7f9 fc07 	bl	8005c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c42a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c42e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c432:	2302      	movs	r3, #2
 800c434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c43e:	2300      	movs	r3, #0
 800c440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c444:	2306      	movs	r3, #6
 800c446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c44a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c44e:	4619      	mov	r1, r3
 800c450:	4889      	ldr	r0, [pc, #548]	; (800c678 <HAL_SAI_MspInit+0x2e8>)
 800c452:	f7f9 fbf1 	bl	8005c38 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800c456:	4b89      	ldr	r3, [pc, #548]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c458:	4a89      	ldr	r2, [pc, #548]	; (800c680 <HAL_SAI_MspInit+0x2f0>)
 800c45a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800c45c:	4b87      	ldr	r3, [pc, #540]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c45e:	2258      	movs	r2, #88	; 0x58
 800c460:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c462:	4b86      	ldr	r3, [pc, #536]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c464:	2240      	movs	r2, #64	; 0x40
 800c466:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800c468:	4b84      	ldr	r3, [pc, #528]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800c46e:	4b83      	ldr	r3, [pc, #524]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c474:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c476:	4b81      	ldr	r3, [pc, #516]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c47c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c47e:	4b7f      	ldr	r3, [pc, #508]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c484:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800c486:	4b7d      	ldr	r3, [pc, #500]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c48c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800c48e:	4b7b      	ldr	r3, [pc, #492]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c494:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c496:	4b79      	ldr	r3, [pc, #484]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c498:	2200      	movs	r2, #0
 800c49a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800c49c:	4877      	ldr	r0, [pc, #476]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c49e:	f7f6 ff25 	bl	80032ec <HAL_DMA_Init>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 800c4a8:	f7ff fe71 	bl	800c18e <Error_Handler>
    }
    // Register some callbacks for the DMA
	HAL_DMA_RegisterCallback(&hdma_sai1_b, HAL_DMA_XFER_HALFCPLT_CB_ID, &TxHalfSpeaker);
 800c4ac:	4a75      	ldr	r2, [pc, #468]	; (800c684 <HAL_SAI_MspInit+0x2f4>)
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	4872      	ldr	r0, [pc, #456]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c4b2:	f7f8 fe4d 	bl	8005150 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_sai1_b, HAL_DMA_XFER_CPLT_CB_ID, &TxFullSpeaker);
 800c4b6:	4a74      	ldr	r2, [pc, #464]	; (800c688 <HAL_SAI_MspInit+0x2f8>)
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	4870      	ldr	r0, [pc, #448]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c4bc:	f7f8 fe48 	bl	8005150 <HAL_DMA_RegisterCallback>

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800c4c0:	2306      	movs	r3, #6
 800c4c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800c4de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4865      	ldr	r0, [pc, #404]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c4e6:	f7f9 fa8f 	bl	8005a08 <HAL_DMAEx_ConfigMuxSync>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <HAL_SAI_MspInit+0x164>
    {
      Error_Handler();
 800c4f0:	f7ff fe4d 	bl	800c18e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a61      	ldr	r2, [pc, #388]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c4fc:	4a5f      	ldr	r2, [pc, #380]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a5d      	ldr	r2, [pc, #372]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c50a:	4a5c      	ldr	r2, [pc, #368]	; (800c67c <HAL_SAI_MspInit+0x2ec>)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a5d      	ldr	r2, [pc, #372]	; (800c68c <HAL_SAI_MspInit+0x2fc>)
 800c516:	4293      	cmp	r3, r2
 800c518:	f040 80a2 	bne.w	800c660 <HAL_SAI_MspInit+0x2d0>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800c51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c520:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800c522:	2300      	movs	r3, #0
 800c524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c528:	f107 0310 	add.w	r3, r7, #16
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fc fab3 	bl	8008a98 <HAL_RCCEx_PeriphCLKConfig>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <HAL_SAI_MspInit+0x1ac>
    {
      Error_Handler();
 800c538:	f7ff fe29 	bl	800c18e <Error_Handler>
    }

    if (SAI4_client == 0)
 800c53c:	4b54      	ldr	r3, [pc, #336]	; (800c690 <HAL_SAI_MspInit+0x300>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10e      	bne.n	800c562 <HAL_SAI_MspInit+0x1d2>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800c544:	4b4a      	ldr	r3, [pc, #296]	; (800c670 <HAL_SAI_MspInit+0x2e0>)
 800c546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c54a:	4a49      	ldr	r2, [pc, #292]	; (800c670 <HAL_SAI_MspInit+0x2e0>)
 800c54c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c550:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c554:	4b46      	ldr	r3, [pc, #280]	; (800c670 <HAL_SAI_MspInit+0x2e0>)
 800c556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c55a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c55e:	60bb      	str	r3, [r7, #8]
 800c560:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800c562:	4b4b      	ldr	r3, [pc, #300]	; (800c690 <HAL_SAI_MspInit+0x300>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3301      	adds	r3, #1
 800c568:	4a49      	ldr	r2, [pc, #292]	; (800c690 <HAL_SAI_MspInit+0x300>)
 800c56a:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800c56c:	2330      	movs	r3, #48	; 0x30
 800c56e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c572:	2302      	movs	r3, #2
 800c574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c57e:	2300      	movs	r3, #0
 800c580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800c584:	230a      	movs	r3, #10
 800c586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c58a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c58e:	4619      	mov	r1, r3
 800c590:	4838      	ldr	r0, [pc, #224]	; (800c674 <HAL_SAI_MspInit+0x2e4>)
 800c592:	f7f9 fb51 	bl	8005c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c596:	2340      	movs	r3, #64	; 0x40
 800c598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c59c:	2302      	movs	r3, #2
 800c59e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c5b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4836      	ldr	r0, [pc, #216]	; (800c694 <HAL_SAI_MspInit+0x304>)
 800c5bc:	f7f9 fb3c 	bl	8005c38 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800c5c0:	4b35      	ldr	r3, [pc, #212]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5c2:	4a36      	ldr	r2, [pc, #216]	; (800c69c <HAL_SAI_MspInit+0x30c>)
 800c5c4:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800c5c6:	4b34      	ldr	r3, [pc, #208]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5c8:	220f      	movs	r2, #15
 800c5ca:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5cc:	4b32      	ldr	r3, [pc, #200]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5d2:	4b31      	ldr	r3, [pc, #196]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800c5d8:	4b2f      	ldr	r3, [pc, #188]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5de:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c5e0:	4b2d      	ldr	r3, [pc, #180]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5e6:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c5e8:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c5ee:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800c5f0:	4b29      	ldr	r3, [pc, #164]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5f6:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c5f8:	4b27      	ldr	r3, [pc, #156]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c5fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c5fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800c600:	4825      	ldr	r0, [pc, #148]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c602:	f7f6 fe73 	bl	80032ec <HAL_DMA_Init>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <HAL_SAI_MspInit+0x280>
    {
      Error_Handler();
 800c60c:	f7ff fdbf 	bl	800c18e <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800c610:	230e      	movs	r3, #14
 800c612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800c616:	2300      	movs	r3, #0
 800c618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800c61c:	2300      	movs	r3, #0
 800c61e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800c622:	2301      	movs	r3, #1
 800c624:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800c628:	2301      	movs	r3, #1
 800c62a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800c62e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c632:	4619      	mov	r1, r3
 800c634:	4818      	ldr	r0, [pc, #96]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c636:	f7f9 f9e7 	bl	8005a08 <HAL_DMAEx_ConfigMuxSync>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <HAL_SAI_MspInit+0x2b4>
    {
      Error_Handler();
 800c640:	f7ff fda5 	bl	800c18e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a14      	ldr	r2, [pc, #80]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c64c:	4a12      	ldr	r2, [pc, #72]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a10      	ldr	r2, [pc, #64]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c65a:	4a0f      	ldr	r2, [pc, #60]	; (800c698 <HAL_SAI_MspInit+0x308>)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800c660:	bf00      	nop
 800c662:	37e8      	adds	r7, #232	; 0xe8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	40015824 	.word	0x40015824
 800c66c:	24000f34 	.word	0x24000f34
 800c670:	58024400 	.word	0x58024400
 800c674:	58021000 	.word	0x58021000
 800c678:	58021400 	.word	0x58021400
 800c67c:	24003aa8 	.word	0x24003aa8
 800c680:	40020028 	.word	0x40020028
 800c684:	0800c7a5 	.word	0x0800c7a5
 800c688:	0800c7c5 	.word	0x0800c7c5
 800c68c:	58005404 	.word	0x58005404
 800c690:	24000f38 	.word	0x24000f38
 800c694:	58020c00 	.word	0x58020c00
 800c698:	240019e8 	.word	0x240019e8
 800c69c:	5802541c 	.word	0x5802541c

0800c6a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c6a4:	e7fe      	b.n	800c6a4 <NMI_Handler+0x4>

0800c6a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c6aa:	e7fe      	b.n	800c6aa <HardFault_Handler+0x4>

0800c6ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c6b0:	e7fe      	b.n	800c6b0 <MemManage_Handler+0x4>

0800c6b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c6b6:	e7fe      	b.n	800c6b6 <BusFault_Handler+0x4>

0800c6b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c6bc:	e7fe      	b.n	800c6bc <UsageFault_Handler+0x4>

0800c6be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c6c2:	bf00      	nop
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c6d0:	bf00      	nop
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c6de:	bf00      	nop
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c6ec:	f7f6 fb36 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c6f0:	bf00      	nop
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	f7f5 fdaf 	bl	800225c <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c6fe:	2001      	movs	r0, #1
 800c700:	f7f9 fd5d 	bl	80061be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 800c704:	bf00      	nop
 800c706:	bd80      	pop	{r7, pc}

0800c708 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800c70c:	4802      	ldr	r0, [pc, #8]	; (800c718 <DMA1_Stream1_IRQHandler+0x10>)
 800c70e:	f7f7 fdf5 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800c712:	bf00      	nop
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	24003aa8 	.word	0x24003aa8

0800c71c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800c720:	4803      	ldr	r0, [pc, #12]	; (800c730 <DMA2_Stream0_IRQHandler+0x14>)
 800c722:	f7f7 fdeb 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 800c726:	2000      	movs	r0, #0
 800c728:	f7f5 fd98 	bl	800225c <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800c72c:	bf00      	nop
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	24001000 	.word	0x24001000

0800c734 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800c738:	4802      	ldr	r0, [pc, #8]	; (800c744 <I2C4_ER_IRQHandler+0x10>)
 800c73a:	f7fa f853 	bl	80067e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800c73e:	bf00      	nop
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	24000fa4 	.word	0x24000fa4

0800c748 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800c74c:	4802      	ldr	r0, [pc, #8]	; (800c758 <DMAMUX1_OVR_IRQHandler+0x10>)
 800c74e:	f7f9 fa21 	bl	8005b94 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800c752:	bf00      	nop
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	24003aa8 	.word	0x24003aa8

0800c75c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800c760:	4802      	ldr	r0, [pc, #8]	; (800c76c <DMAMUX2_OVR_IRQHandler+0x10>)
 800c762:	f7f9 fa17 	bl	8005b94 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800c766:	bf00      	nop
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	240019e8 	.word	0x240019e8

0800c770 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800c774:	4803      	ldr	r0, [pc, #12]	; (800c784 <BDMA_Channel1_IRQHandler+0x14>)
 800c776:	f7f7 fdc1 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 800c77a:	2001      	movs	r0, #1
 800c77c:	f7f5 fd6e 	bl	800225c <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800c780:	bf00      	nop
 800c782:	bd80      	pop	{r7, pc}
 800c784:	240019e8 	.word	0x240019e8

0800c788 <RxAck>:

/* USER CODE BEGIN 1 */
void RxAck(SAI_HandleTypeDef *hsai)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//	HAL_EXTI_GenerateSWI(&hexti0);
	hsai->Ack = 1;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <TxHalfSpeaker>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void TxHalfSpeaker(SAI_HandleTypeDef *hsai)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  UpdatePointer = PLAY_BUFF_SIZE/2;
 800c7ac:	4b04      	ldr	r3, [pc, #16]	; (800c7c0 <TxHalfSpeaker+0x1c>)
 800c7ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7b2:	801a      	strh	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	24000464 	.word	0x24000464

0800c7c4 <TxFullSpeaker>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void TxFullSpeaker(SAI_HandleTypeDef *hsai)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  UpdatePointer = 0;
 800c7cc:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <TxFullSpeaker+0x1c>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	801a      	strh	r2, [r3, #0]
}
 800c7d2:	bf00      	nop
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	24000464 	.word	0x24000464

0800c7e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c7e8:	4b32      	ldr	r3, [pc, #200]	; (800c8b4 <SystemInit+0xd0>)
 800c7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ee:	4a31      	ldr	r2, [pc, #196]	; (800c8b4 <SystemInit+0xd0>)
 800c7f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c7f8:	4b2f      	ldr	r3, [pc, #188]	; (800c8b8 <SystemInit+0xd4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 030f 	and.w	r3, r3, #15
 800c800:	2b06      	cmp	r3, #6
 800c802:	d807      	bhi.n	800c814 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c804:	4b2c      	ldr	r3, [pc, #176]	; (800c8b8 <SystemInit+0xd4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f023 030f 	bic.w	r3, r3, #15
 800c80c:	4a2a      	ldr	r2, [pc, #168]	; (800c8b8 <SystemInit+0xd4>)
 800c80e:	f043 0307 	orr.w	r3, r3, #7
 800c812:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800c814:	4b29      	ldr	r3, [pc, #164]	; (800c8bc <SystemInit+0xd8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a28      	ldr	r2, [pc, #160]	; (800c8bc <SystemInit+0xd8>)
 800c81a:	f043 0301 	orr.w	r3, r3, #1
 800c81e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c820:	4b26      	ldr	r3, [pc, #152]	; (800c8bc <SystemInit+0xd8>)
 800c822:	2200      	movs	r2, #0
 800c824:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c826:	4b25      	ldr	r3, [pc, #148]	; (800c8bc <SystemInit+0xd8>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4924      	ldr	r1, [pc, #144]	; (800c8bc <SystemInit+0xd8>)
 800c82c:	4b24      	ldr	r3, [pc, #144]	; (800c8c0 <SystemInit+0xdc>)
 800c82e:	4013      	ands	r3, r2
 800c830:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c832:	4b21      	ldr	r3, [pc, #132]	; (800c8b8 <SystemInit+0xd4>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 0308 	and.w	r3, r3, #8
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d007      	beq.n	800c84e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c83e:	4b1e      	ldr	r3, [pc, #120]	; (800c8b8 <SystemInit+0xd4>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f023 030f 	bic.w	r3, r3, #15
 800c846:	4a1c      	ldr	r2, [pc, #112]	; (800c8b8 <SystemInit+0xd4>)
 800c848:	f043 0307 	orr.w	r3, r3, #7
 800c84c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c84e:	4b1b      	ldr	r3, [pc, #108]	; (800c8bc <SystemInit+0xd8>)
 800c850:	2200      	movs	r2, #0
 800c852:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800c854:	4b19      	ldr	r3, [pc, #100]	; (800c8bc <SystemInit+0xd8>)
 800c856:	2200      	movs	r2, #0
 800c858:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800c85a:	4b18      	ldr	r3, [pc, #96]	; (800c8bc <SystemInit+0xd8>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800c860:	4b16      	ldr	r3, [pc, #88]	; (800c8bc <SystemInit+0xd8>)
 800c862:	4a18      	ldr	r2, [pc, #96]	; (800c8c4 <SystemInit+0xe0>)
 800c864:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800c866:	4b15      	ldr	r3, [pc, #84]	; (800c8bc <SystemInit+0xd8>)
 800c868:	4a17      	ldr	r2, [pc, #92]	; (800c8c8 <SystemInit+0xe4>)
 800c86a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800c86c:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <SystemInit+0xd8>)
 800c86e:	4a17      	ldr	r2, [pc, #92]	; (800c8cc <SystemInit+0xe8>)
 800c870:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c872:	4b12      	ldr	r3, [pc, #72]	; (800c8bc <SystemInit+0xd8>)
 800c874:	2200      	movs	r2, #0
 800c876:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800c878:	4b10      	ldr	r3, [pc, #64]	; (800c8bc <SystemInit+0xd8>)
 800c87a:	4a14      	ldr	r2, [pc, #80]	; (800c8cc <SystemInit+0xe8>)
 800c87c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800c87e:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <SystemInit+0xd8>)
 800c880:	2200      	movs	r2, #0
 800c882:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800c884:	4b0d      	ldr	r3, [pc, #52]	; (800c8bc <SystemInit+0xd8>)
 800c886:	4a11      	ldr	r2, [pc, #68]	; (800c8cc <SystemInit+0xe8>)
 800c888:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c88a:	4b0c      	ldr	r3, [pc, #48]	; (800c8bc <SystemInit+0xd8>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c890:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <SystemInit+0xd8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a09      	ldr	r2, [pc, #36]	; (800c8bc <SystemInit+0xd8>)
 800c896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c89a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c89c:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <SystemInit+0xd8>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <SystemInit+0xec>)
 800c8a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800c8a8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800c8aa:	bf00      	nop
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	e000ed00 	.word	0xe000ed00
 800c8b8:	52002000 	.word	0x52002000
 800c8bc:	58024400 	.word	0x58024400
 800c8c0:	eaf6ed7f 	.word	0xeaf6ed7f
 800c8c4:	02020200 	.word	0x02020200
 800c8c8:	01ff0000 	.word	0x01ff0000
 800c8cc:	01010280 	.word	0x01010280
 800c8d0:	52004000 	.word	0x52004000

0800c8d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800c8d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c90c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800c8d8:	f7ff ff84 	bl	800c7e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c8dc:	480c      	ldr	r0, [pc, #48]	; (800c910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c8de:	490d      	ldr	r1, [pc, #52]	; (800c914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c8e0:	4a0d      	ldr	r2, [pc, #52]	; (800c918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c8e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c8e4:	e002      	b.n	800c8ec <LoopCopyDataInit>

0800c8e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c8e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c8e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c8ea:	3304      	adds	r3, #4

0800c8ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c8ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c8ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c8f0:	d3f9      	bcc.n	800c8e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c8f2:	4a0a      	ldr	r2, [pc, #40]	; (800c91c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c8f4:	4c0a      	ldr	r4, [pc, #40]	; (800c920 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c8f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c8f8:	e001      	b.n	800c8fe <LoopFillZerobss>

0800c8fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c8fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c8fc:	3204      	adds	r2, #4

0800c8fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c8fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c900:	d3fb      	bcc.n	800c8fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c902:	f001 fedd 	bl	800e6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c906:	f7fe ff3b 	bl	800b780 <main>
  bx  lr
 800c90a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c90c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800c910:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800c914:	240004d4 	.word	0x240004d4
  ldr r2, =_sidata
 800c918:	0800ee10 	.word	0x0800ee10
  ldr r2, =_sbss
 800c91c:	240004e0 	.word	0x240004e0
  ldr r4, =_ebss
 800c920:	24003b74 	.word	0x24003b74

0800c924 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c924:	e7fe      	b.n	800c924 <ADC3_IRQHandler>
	...

0800c928 <D16_GENERIC>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	b089      	sub	sp, #36	; 0x24
 800c92e:	6993      	ldr	r3, [r2, #24]
 800c930:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	9307      	str	r3, [sp, #28]
 800c936:	69d3      	ldr	r3, [r2, #28]
 800c938:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800c93c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800c940:	9106      	str	r1, [sp, #24]
 800c942:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800c946:	2d00      	cmp	r5, #0
 800c948:	d063      	beq.n	800ca12 <D16_GENERIC+0xea>
 800c94a:	f001 0520 	and.w	r5, r1, #32
 800c94e:	f001 0110 	and.w	r1, r1, #16
 800c952:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800ca34 <D16_GENERIC+0x10c>
 800c956:	46c1      	mov	r9, r8
 800c958:	9104      	str	r1, [sp, #16]
 800c95a:	2100      	movs	r1, #0
 800c95c:	9505      	str	r5, [sp, #20]
 800c95e:	e04d      	b.n	800c9fc <D16_GENERIC+0xd4>
 800c960:	5d87      	ldrb	r7, [r0, r6]
 800c962:	7805      	ldrb	r5, [r0, #0]
 800c964:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c968:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800c96c:	b2fe      	uxtb	r6, r7
 800c96e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800c972:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800c976:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800c97a:	441d      	add	r5, r3
 800c97c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800c980:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c984:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800c988:	0a9b      	lsrs	r3, r3, #10
 800c98a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800c98e:	4d27      	ldr	r5, [pc, #156]	; (800ca2c <D16_GENERIC+0x104>)
 800c990:	fb26 c505 	smlad	r5, r6, r5, ip
 800c994:	4f26      	ldr	r7, [pc, #152]	; (800ca30 <D16_GENERIC+0x108>)
 800c996:	fb26 fc07 	smuad	ip, r6, r7
 800c99a:	9e04      	ldr	r6, [sp, #16]
 800c99c:	f101 0801 	add.w	r8, r1, #1
 800c9a0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800c9a4:	b1ae      	cbz	r6, 800c9d2 <D16_GENERIC+0xaa>
 800c9a6:	442c      	add	r4, r5
 800c9a8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800c9ac:	eba4 040a 	sub.w	r4, r4, sl
 800c9b0:	46aa      	mov	sl, r5
 800c9b2:	17e7      	asrs	r7, r4, #31
 800c9b4:	fba4 450b 	umull	r4, r5, r4, fp
 800c9b8:	e9cd 4500 	strd	r4, r5, [sp]
 800c9bc:	fb0b 5407 	mla	r4, fp, r7, r5
 800c9c0:	9401      	str	r4, [sp, #4]
 800c9c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c9c6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800c9ca:	f145 0500 	adc.w	r5, r5, #0
 800c9ce:	006c      	lsls	r4, r5, #1
 800c9d0:	4625      	mov	r5, r4
 800c9d2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800c9d6:	042d      	lsls	r5, r5, #16
 800c9d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c9dc:	2700      	movs	r7, #0
 800c9de:	fb01 fb0b 	mul.w	fp, r1, fp
 800c9e2:	fa1f f188 	uxth.w	r1, r8
 800c9e6:	fbc9 6705 	smlal	r6, r7, r9, r5
 800c9ea:	9e03      	ldr	r6, [sp, #12]
 800c9ec:	10bd      	asrs	r5, r7, #2
 800c9ee:	f305 050f 	ssat	r5, #16, r5
 800c9f2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800c9f6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c9f8:	428d      	cmp	r5, r1
 800c9fa:	d90a      	bls.n	800ca12 <D16_GENERIC+0xea>
 800c9fc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800c9fe:	2d01      	cmp	r5, #1
 800ca00:	b2ee      	uxtb	r6, r5
 800ca02:	d1ad      	bne.n	800c960 <D16_GENERIC+0x38>
 800ca04:	9d05      	ldr	r5, [sp, #20]
 800ca06:	f850 7b02 	ldr.w	r7, [r0], #2
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	d0ae      	beq.n	800c96c <D16_GENERIC+0x44>
 800ca0e:	ba7f      	rev16	r7, r7
 800ca10:	e7ac      	b.n	800c96c <D16_GENERIC+0x44>
 800ca12:	2000      	movs	r0, #0
 800ca14:	9906      	ldr	r1, [sp, #24]
 800ca16:	61d3      	str	r3, [r2, #28]
 800ca18:	9b07      	ldr	r3, [sp, #28]
 800ca1a:	f8c2 c008 	str.w	ip, [r2, #8]
 800ca1e:	60d1      	str	r1, [r2, #12]
 800ca20:	6193      	str	r3, [r2, #24]
 800ca22:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800ca26:	b009      	add	sp, #36	; 0x24
 800ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2c:	00030001 	.word	0x00030001
 800ca30:	00010003 	.word	0x00010003
 800ca34:	24000000 	.word	0x24000000

0800ca38 <D24_GENERIC>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800ca40:	b089      	sub	sp, #36	; 0x24
 800ca42:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ca44:	9303      	str	r3, [sp, #12]
 800ca46:	6993      	ldr	r3, [r2, #24]
 800ca48:	9104      	str	r1, [sp, #16]
 800ca4a:	9307      	str	r3, [sp, #28]
 800ca4c:	69d1      	ldr	r1, [r2, #28]
 800ca4e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800ca52:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800ca56:	2e00      	cmp	r6, #0
 800ca58:	f000 8088 	beq.w	800cb6c <D24_GENERIC+0x134>
 800ca5c:	f005 0620 	and.w	r6, r5, #32
 800ca60:	f005 0510 	and.w	r5, r5, #16
 800ca64:	f04f 0c00 	mov.w	ip, #0
 800ca68:	f8df e140 	ldr.w	lr, [pc, #320]	; 800cbac <D24_GENERIC+0x174>
 800ca6c:	9606      	str	r6, [sp, #24]
 800ca6e:	9505      	str	r5, [sp, #20]
 800ca70:	e064      	b.n	800cb3c <D24_GENERIC+0x104>
 800ca72:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800ca76:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800ca7a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800ca7e:	042d      	lsls	r5, r5, #16
 800ca80:	19f0      	adds	r0, r6, r7
 800ca82:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800ca86:	44a9      	add	r9, r5
 800ca88:	fa5f f689 	uxtb.w	r6, r9
 800ca8c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800ca90:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800ca94:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800ca98:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800ca9c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800caa0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800caa4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800caa8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800caac:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800cab0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800cab4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cab8:	4d3a      	ldr	r5, [pc, #232]	; (800cba4 <D24_GENERIC+0x16c>)
 800caba:	fb26 8705 	smlad	r7, r6, r5, r8
 800cabe:	4d3a      	ldr	r5, [pc, #232]	; (800cba8 <D24_GENERIC+0x170>)
 800cac0:	fb26 3805 	smlad	r8, r6, r5, r3
 800cac4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800cac8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800cacc:	2301      	movs	r3, #1
 800cace:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800cad2:	fb26 f603 	smuad	r6, r6, r3
 800cad6:	eb0c 0903 	add.w	r9, ip, r3
 800cada:	eb0b 0306 	add.w	r3, fp, r6
 800cade:	9e05      	ldr	r6, [sp, #20]
 800cae0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800cae4:	b1ae      	cbz	r6, 800cb12 <D24_GENERIC+0xda>
 800cae6:	442c      	add	r4, r5
 800cae8:	9e03      	ldr	r6, [sp, #12]
 800caea:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800caee:	1ba4      	subs	r4, r4, r6
 800caf0:	9503      	str	r5, [sp, #12]
 800caf2:	17e7      	asrs	r7, r4, #31
 800caf4:	fba4 450b 	umull	r4, r5, r4, fp
 800caf8:	e9cd 4500 	strd	r4, r5, [sp]
 800cafc:	fb0b 5407 	mla	r4, fp, r7, r5
 800cb00:	9401      	str	r4, [sp, #4]
 800cb02:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cb06:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cb0a:	f145 0500 	adc.w	r5, r5, #0
 800cb0e:	006c      	lsls	r4, r5, #1
 800cb10:	4625      	mov	r5, r4
 800cb12:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800cb16:	03ad      	lsls	r5, r5, #14
 800cb18:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cb1c:	2700      	movs	r7, #0
 800cb1e:	fb0c fb0b 	mul.w	fp, ip, fp
 800cb22:	fa1f fc89 	uxth.w	ip, r9
 800cb26:	fbca 6705 	smlal	r6, r7, sl, r5
 800cb2a:	9e04      	ldr	r6, [sp, #16]
 800cb2c:	10bd      	asrs	r5, r7, #2
 800cb2e:	f305 050f 	ssat	r5, #16, r5
 800cb32:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800cb36:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cb38:	4565      	cmp	r5, ip
 800cb3a:	d917      	bls.n	800cb6c <D24_GENERIC+0x134>
 800cb3c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cb3e:	f890 9000 	ldrb.w	r9, [r0]
 800cb42:	b2ef      	uxtb	r7, r5
 800cb44:	2d01      	cmp	r5, #1
 800cb46:	b23e      	sxth	r6, r7
 800cb48:	d193      	bne.n	800ca72 <D24_GENERIC+0x3a>
 800cb4a:	9d06      	ldr	r5, [sp, #24]
 800cb4c:	b1dd      	cbz	r5, 800cb86 <D24_GENERIC+0x14e>
 800cb4e:	78c7      	ldrb	r7, [r0, #3]
 800cb50:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800cb54:	f01c 0f01 	tst.w	ip, #1
 800cb58:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800cb5c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800cb60:	d11a      	bne.n	800cb98 <D24_GENERIC+0x160>
 800cb62:	f890 9001 	ldrb.w	r9, [r0, #1]
 800cb66:	3002      	adds	r0, #2
 800cb68:	44b1      	add	r9, r6
 800cb6a:	e78d      	b.n	800ca88 <D24_GENERIC+0x50>
 800cb6c:	6093      	str	r3, [r2, #8]
 800cb6e:	2000      	movs	r0, #0
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	f8c2 800c 	str.w	r8, [r2, #12]
 800cb76:	6153      	str	r3, [r2, #20]
 800cb78:	9b07      	ldr	r3, [sp, #28]
 800cb7a:	61d1      	str	r1, [r2, #28]
 800cb7c:	6114      	str	r4, [r2, #16]
 800cb7e:	6193      	str	r3, [r2, #24]
 800cb80:	b009      	add	sp, #36	; 0x24
 800cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb86:	7845      	ldrb	r5, [r0, #1]
 800cb88:	3003      	adds	r0, #3
 800cb8a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800cb8e:	022d      	lsls	r5, r5, #8
 800cb90:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800cb94:	44a9      	add	r9, r5
 800cb96:	e777      	b.n	800ca88 <D24_GENERIC+0x50>
 800cb98:	7886      	ldrb	r6, [r0, #2]
 800cb9a:	3004      	adds	r0, #4
 800cb9c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800cba0:	44a9      	add	r9, r5
 800cba2:	e771      	b.n	800ca88 <D24_GENERIC+0x50>
 800cba4:	00030001 	.word	0x00030001
 800cba8:	00060007 	.word	0x00060007
 800cbac:	24000000 	.word	0x24000000

0800cbb0 <D32_GENERIC>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800cbb8:	b089      	sub	sp, #36	; 0x24
 800cbba:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cbbc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800cbbe:	9302      	str	r3, [sp, #8]
 800cbc0:	6993      	ldr	r3, [r2, #24]
 800cbc2:	9104      	str	r1, [sp, #16]
 800cbc4:	9307      	str	r3, [sp, #28]
 800cbc6:	9503      	str	r5, [sp, #12]
 800cbc8:	69d1      	ldr	r1, [r2, #28]
 800cbca:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800cbcc:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	f000 8097 	beq.w	800cd04 <D32_GENERIC+0x154>
 800cbd6:	f005 0620 	and.w	r6, r5, #32
 800cbda:	f005 0510 	and.w	r5, r5, #16
 800cbde:	f04f 0e00 	mov.w	lr, #0
 800cbe2:	f8df c150 	ldr.w	ip, [pc, #336]	; 800cd34 <D32_GENERIC+0x184>
 800cbe6:	9606      	str	r6, [sp, #24]
 800cbe8:	9505      	str	r5, [sp, #20]
 800cbea:	e079      	b.n	800cce0 <D32_GENERIC+0x130>
 800cbec:	783d      	ldrb	r5, [r7, #0]
 800cbee:	f810 b009 	ldrb.w	fp, [r0, r9]
 800cbf2:	042d      	lsls	r5, r5, #16
 800cbf4:	f810 a006 	ldrb.w	sl, [r0, r6]
 800cbf8:	f890 9000 	ldrb.w	r9, [r0]
 800cbfc:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800cc00:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800cc04:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800cc08:	44a9      	add	r9, r5
 800cc0a:	fa5f f789 	uxtb.w	r7, r9
 800cc0e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800cc12:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800cc16:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800cc1a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800cc1e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800cc22:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800cc26:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800cc2a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800cc2e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800cc32:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800cc36:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800cc3a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cc3e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800cc42:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cc46:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800cc4a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800cc4e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cc52:	4d34      	ldr	r5, [pc, #208]	; (800cd24 <D32_GENERIC+0x174>)
 800cc54:	fb29 8805 	smlad	r8, r9, r5, r8
 800cc58:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800cc5c:	fb26 8705 	smlad	r7, r6, r5, r8
 800cc60:	4d31      	ldr	r5, [pc, #196]	; (800cd28 <D32_GENERIC+0x178>)
 800cc62:	fb29 3305 	smlad	r3, r9, r5, r3
 800cc66:	4d31      	ldr	r5, [pc, #196]	; (800cd2c <D32_GENERIC+0x17c>)
 800cc68:	fb26 3805 	smlad	r8, r6, r5, r3
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	fb29 f903 	smuad	r9, r9, r3
 800cc72:	4b2f      	ldr	r3, [pc, #188]	; (800cd30 <D32_GENERIC+0x180>)
 800cc74:	fb26 9303 	smlad	r3, r6, r3, r9
 800cc78:	9e05      	ldr	r6, [sp, #20]
 800cc7a:	f10e 0901 	add.w	r9, lr, #1
 800cc7e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800cc82:	b1ae      	cbz	r6, 800ccb0 <D32_GENERIC+0x100>
 800cc84:	442c      	add	r4, r5
 800cc86:	9e02      	ldr	r6, [sp, #8]
 800cc88:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800cc8c:	1ba4      	subs	r4, r4, r6
 800cc8e:	9502      	str	r5, [sp, #8]
 800cc90:	17e7      	asrs	r7, r4, #31
 800cc92:	fba4 450a 	umull	r4, r5, r4, sl
 800cc96:	e9cd 4500 	strd	r4, r5, [sp]
 800cc9a:	fb0a 5407 	mla	r4, sl, r7, r5
 800cc9e:	9401      	str	r4, [sp, #4]
 800cca0:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cca4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cca8:	f145 0500 	adc.w	r5, r5, #0
 800ccac:	006c      	lsls	r4, r5, #1
 800ccae:	4625      	mov	r5, r4
 800ccb0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800ccb4:	036d      	lsls	r5, r5, #13
 800ccb6:	9f03      	ldr	r7, [sp, #12]
 800ccb8:	fb0e fb0a 	mul.w	fp, lr, sl
 800ccbc:	fa1f fe89 	uxth.w	lr, r9
 800ccc0:	f04f 0a00 	mov.w	sl, #0
 800ccc4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800ccc8:	9e04      	ldr	r6, [sp, #16]
 800ccca:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800ccce:	4657      	mov	r7, sl
 800ccd0:	10bd      	asrs	r5, r7, #2
 800ccd2:	f305 050f 	ssat	r5, #16, r5
 800ccd6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800ccda:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ccdc:	4575      	cmp	r5, lr
 800ccde:	d911      	bls.n	800cd04 <D32_GENERIC+0x154>
 800cce0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cce2:	b2ee      	uxtb	r6, r5
 800cce4:	2d01      	cmp	r5, #1
 800cce6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800ccea:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800ccee:	f47f af7d 	bne.w	800cbec <D32_GENERIC+0x3c>
 800ccf2:	1d05      	adds	r5, r0, #4
 800ccf4:	f8d0 9000 	ldr.w	r9, [r0]
 800ccf8:	9806      	ldr	r0, [sp, #24]
 800ccfa:	b180      	cbz	r0, 800cd1e <D32_GENERIC+0x16e>
 800ccfc:	fa99 f999 	rev16.w	r9, r9
 800cd00:	4628      	mov	r0, r5
 800cd02:	e782      	b.n	800cc0a <D32_GENERIC+0x5a>
 800cd04:	6093      	str	r3, [r2, #8]
 800cd06:	2000      	movs	r0, #0
 800cd08:	9b02      	ldr	r3, [sp, #8]
 800cd0a:	f8c2 800c 	str.w	r8, [r2, #12]
 800cd0e:	6153      	str	r3, [r2, #20]
 800cd10:	9b07      	ldr	r3, [sp, #28]
 800cd12:	61d1      	str	r1, [r2, #28]
 800cd14:	6114      	str	r4, [r2, #16]
 800cd16:	6193      	str	r3, [r2, #24]
 800cd18:	b009      	add	sp, #36	; 0x24
 800cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1e:	4628      	mov	r0, r5
 800cd20:	e773      	b.n	800cc0a <D32_GENERIC+0x5a>
 800cd22:	bf00      	nop
 800cd24:	00060003 	.word	0x00060003
 800cd28:	000a000c 	.word	0x000a000c
 800cd2c:	000c000a 	.word	0x000c000a
 800cd30:	00030006 	.word	0x00030006
 800cd34:	24000000 	.word	0x24000000

0800cd38 <D48_GENERIC>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	6913      	ldr	r3, [r2, #16]
 800cd3e:	b089      	sub	sp, #36	; 0x24
 800cd40:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	6953      	ldr	r3, [r2, #20]
 800cd46:	9104      	str	r1, [sp, #16]
 800cd48:	9302      	str	r3, [sp, #8]
 800cd4a:	6993      	ldr	r3, [r2, #24]
 800cd4c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800cd50:	9307      	str	r3, [sp, #28]
 800cd52:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800cd56:	9100      	str	r1, [sp, #0]
 800cd58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cd5a:	9103      	str	r1, [sp, #12]
 800cd5c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	f000 80be 	beq.w	800cee0 <D48_GENERIC+0x1a8>
 800cd64:	f001 0420 	and.w	r4, r1, #32
 800cd68:	f001 0110 	and.w	r1, r1, #16
 800cd6c:	f04f 0e00 	mov.w	lr, #0
 800cd70:	9105      	str	r1, [sp, #20]
 800cd72:	9406      	str	r4, [sp, #24]
 800cd74:	4962      	ldr	r1, [pc, #392]	; (800cf00 <D48_GENERIC+0x1c8>)
 800cd76:	e0a0      	b.n	800ceba <D48_GENERIC+0x182>
 800cd78:	eb00 0608 	add.w	r6, r0, r8
 800cd7c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800cd80:	f810 9005 	ldrb.w	r9, [r0, r5]
 800cd84:	5df4      	ldrb	r4, [r6, r7]
 800cd86:	443e      	add	r6, r7
 800cd88:	f890 b000 	ldrb.w	fp, [r0]
 800cd8c:	0420      	lsls	r0, r4, #16
 800cd8e:	eb06 0408 	add.w	r4, r6, r8
 800cd92:	f816 6008 	ldrb.w	r6, [r6, r8]
 800cd96:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800cd9a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800cd9e:	4427      	add	r7, r4
 800cda0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800cda4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800cda8:	eb0a 040b 	add.w	r4, sl, fp
 800cdac:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800cdb0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800cdb4:	b2f7      	uxtb	r7, r6
 800cdb6:	b2e6      	uxtb	r6, r4
 800cdb8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800cdbc:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800cdc0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800cdc4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cdc8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800cdcc:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800cdd0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800cdd4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800cdd8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800cddc:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800cde0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800cde4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cde8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800cdec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cdf0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800cdf4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800cdf8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cdfc:	9d00      	ldr	r5, [sp, #0]
 800cdfe:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ce02:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ce06:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800ce0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ce0e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800ce12:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800ce16:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800ce1a:	4c3a      	ldr	r4, [pc, #232]	; (800cf04 <D48_GENERIC+0x1cc>)
 800ce1c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800ce20:	4c39      	ldr	r4, [pc, #228]	; (800cf08 <D48_GENERIC+0x1d0>)
 800ce22:	fb29 aa04 	smlad	sl, r9, r4, sl
 800ce26:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ce2a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800ce2e:	4c37      	ldr	r4, [pc, #220]	; (800cf0c <D48_GENERIC+0x1d4>)
 800ce30:	fb26 3304 	smlad	r3, r6, r4, r3
 800ce34:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ce38:	fb29 3304 	smlad	r3, r9, r4, r3
 800ce3c:	4c34      	ldr	r4, [pc, #208]	; (800cf10 <D48_GENERIC+0x1d8>)
 800ce3e:	fb27 3304 	smlad	r3, r7, r4, r3
 800ce42:	2501      	movs	r5, #1
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	fb26 f605 	smuad	r6, r6, r5
 800ce4a:	4b32      	ldr	r3, [pc, #200]	; (800cf14 <D48_GENERIC+0x1dc>)
 800ce4c:	fb29 6903 	smlad	r9, r9, r3, r6
 800ce50:	4b31      	ldr	r3, [pc, #196]	; (800cf18 <D48_GENERIC+0x1e0>)
 800ce52:	fb27 9303 	smlad	r3, r7, r3, r9
 800ce56:	9c05      	ldr	r4, [sp, #20]
 800ce58:	eb0e 0805 	add.w	r8, lr, r5
 800ce5c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800ce60:	b19c      	cbz	r4, 800ce8a <D48_GENERIC+0x152>
 800ce62:	9c01      	ldr	r4, [sp, #4]
 800ce64:	9d02      	ldr	r5, [sp, #8]
 800ce66:	4454      	add	r4, sl
 800ce68:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800ce6c:	f8cd a008 	str.w	sl, [sp, #8]
 800ce70:	1b64      	subs	r4, r4, r5
 800ce72:	fba4 ab09 	umull	sl, fp, r4, r9
 800ce76:	17e7      	asrs	r7, r4, #31
 800ce78:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800ce7c:	fb09 bb07 	mla	fp, r9, r7, fp
 800ce80:	f14b 0500 	adc.w	r5, fp, #0
 800ce84:	006c      	lsls	r4, r5, #1
 800ce86:	46a2      	mov	sl, r4
 800ce88:	9401      	str	r4, [sp, #4]
 800ce8a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800ce8c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800ce90:	9d03      	ldr	r5, [sp, #12]
 800ce92:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ce96:	fb0e f606 	mul.w	r6, lr, r6
 800ce9a:	fa1f fe88 	uxth.w	lr, r8
 800ce9e:	f04f 0800 	mov.w	r8, #0
 800cea2:	fbc5 780a 	smlal	r7, r8, r5, sl
 800cea6:	4645      	mov	r5, r8
 800cea8:	10ac      	asrs	r4, r5, #2
 800ceaa:	9d04      	ldr	r5, [sp, #16]
 800ceac:	f304 040f 	ssat	r4, #16, r4
 800ceb0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800ceb4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ceb6:	4574      	cmp	r4, lr
 800ceb8:	d912      	bls.n	800cee0 <D48_GENERIC+0x1a8>
 800ceba:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800cebc:	b2e5      	uxtb	r5, r4
 800cebe:	2c01      	cmp	r4, #1
 800cec0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800cec4:	f1c5 0700 	rsb	r7, r5, #0
 800cec8:	f47f af56 	bne.w	800cd78 <D48_GENERIC+0x40>
 800cecc:	9d06      	ldr	r5, [sp, #24]
 800cece:	e9d0 4600 	ldrd	r4, r6, [r0]
 800ced2:	3006      	adds	r0, #6
 800ced4:	2d00      	cmp	r5, #0
 800ced6:	f43f af6b 	beq.w	800cdb0 <D48_GENERIC+0x78>
 800ceda:	ba64      	rev16	r4, r4
 800cedc:	ba76      	rev16	r6, r6
 800cede:	e767      	b.n	800cdb0 <D48_GENERIC+0x78>
 800cee0:	6093      	str	r3, [r2, #8]
 800cee2:	2000      	movs	r0, #0
 800cee4:	9b00      	ldr	r3, [sp, #0]
 800cee6:	f8c2 c01c 	str.w	ip, [r2, #28]
 800ceea:	60d3      	str	r3, [r2, #12]
 800ceec:	9b01      	ldr	r3, [sp, #4]
 800ceee:	6113      	str	r3, [r2, #16]
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	6153      	str	r3, [r2, #20]
 800cef4:	9b07      	ldr	r3, [sp, #28]
 800cef6:	6193      	str	r3, [r2, #24]
 800cef8:	b009      	add	sp, #36	; 0x24
 800cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefe:	bf00      	nop
 800cf00:	24000000 	.word	0x24000000
 800cf04:	000f000a 	.word	0x000f000a
 800cf08:	00060003 	.word	0x00060003
 800cf0c:	00150019 	.word	0x00150019
 800cf10:	00190015 	.word	0x00190015
 800cf14:	00030006 	.word	0x00030006
 800cf18:	000a000f 	.word	0x000a000f

0800cf1c <D64_GENERIC>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	6913      	ldr	r3, [r2, #16]
 800cf22:	b089      	sub	sp, #36	; 0x24
 800cf24:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	6953      	ldr	r3, [r2, #20]
 800cf2a:	9105      	str	r1, [sp, #20]
 800cf2c:	9303      	str	r3, [sp, #12]
 800cf2e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800cf30:	6993      	ldr	r3, [r2, #24]
 800cf32:	69d4      	ldr	r4, [r2, #28]
 800cf34:	9307      	str	r3, [sp, #28]
 800cf36:	9504      	str	r5, [sp, #16]
 800cf38:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	f000 80e8 	beq.w	800d112 <D64_GENERIC+0x1f6>
 800cf42:	6a11      	ldr	r1, [r2, #32]
 800cf44:	2500      	movs	r5, #0
 800cf46:	46b3      	mov	fp, r6
 800cf48:	9302      	str	r3, [sp, #8]
 800cf4a:	9106      	str	r1, [sp, #24]
 800cf4c:	4978      	ldr	r1, [pc, #480]	; (800d130 <D64_GENERIC+0x214>)
 800cf4e:	e0cc      	b.n	800d0ea <D64_GENERIC+0x1ce>
 800cf50:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800cf54:	f1ce 0c00 	rsb	ip, lr, #0
 800cf58:	f890 9000 	ldrb.w	r9, [r0]
 800cf5c:	eb00 0708 	add.w	r7, r0, r8
 800cf60:	f810 6008 	ldrb.w	r6, [r0, r8]
 800cf64:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800cf68:	f817 000c 	ldrb.w	r0, [r7, ip]
 800cf6c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800cf70:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800cf74:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800cf78:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800cf7c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800cf80:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800cf84:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800cf88:	0400      	lsls	r0, r0, #16
 800cf8a:	4467      	add	r7, ip
 800cf8c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800cf90:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800cf94:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800cf98:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800cf9c:	444e      	add	r6, r9
 800cf9e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800cfa2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800cfa6:	44c2      	add	sl, r8
 800cfa8:	b2f7      	uxtb	r7, r6
 800cfaa:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800cfae:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800cfb2:	0e36      	lsrs	r6, r6, #24
 800cfb4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800cfb8:	fa5f fc8a 	uxtb.w	ip, sl
 800cfbc:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800cfc0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800cfc4:	443c      	add	r4, r7
 800cfc6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800cfca:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cfce:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800cfd2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800cfd6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cfda:	4b56      	ldr	r3, [pc, #344]	; (800d134 <D64_GENERIC+0x218>)
 800cfdc:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800cfe0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cfe4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800cfe8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800cfec:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cff0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800cff4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800cff8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800cffc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d000:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d004:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d008:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800d00c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d010:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800d014:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800d018:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800d01c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d020:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800d024:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d028:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800d02c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800d030:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800d034:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800d038:	fb28 b903 	smlad	r9, r8, r3, fp
 800d03c:	4b3e      	ldr	r3, [pc, #248]	; (800d138 <D64_GENERIC+0x21c>)
 800d03e:	fb26 9903 	smlad	r9, r6, r3, r9
 800d042:	4b3e      	ldr	r3, [pc, #248]	; (800d13c <D64_GENERIC+0x220>)
 800d044:	fb2c 9703 	smlad	r7, ip, r3, r9
 800d048:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800d04c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800d050:	4f3b      	ldr	r7, [pc, #236]	; (800d140 <D64_GENERIC+0x224>)
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	fb28 3307 	smlad	r3, r8, r7, r3
 800d058:	fb2a 3317 	smladx	r3, sl, r7, r3
 800d05c:	4f39      	ldr	r7, [pc, #228]	; (800d144 <D64_GENERIC+0x228>)
 800d05e:	fb26 3307 	smlad	r3, r6, r7, r3
 800d062:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800d066:	f04f 0e01 	mov.w	lr, #1
 800d06a:	fb28 f80e 	smuad	r8, r8, lr
 800d06e:	4b36      	ldr	r3, [pc, #216]	; (800d148 <D64_GENERIC+0x22c>)
 800d070:	fb26 8603 	smlad	r6, r6, r3, r8
 800d074:	4b35      	ldr	r3, [pc, #212]	; (800d14c <D64_GENERIC+0x230>)
 800d076:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800d07a:	4b35      	ldr	r3, [pc, #212]	; (800d150 <D64_GENERIC+0x234>)
 800d07c:	fb2a c303 	smlad	r3, sl, r3, ip
 800d080:	9f06      	ldr	r7, [sp, #24]
 800d082:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800d086:	9302      	str	r3, [sp, #8]
 800d088:	b1cf      	cbz	r7, 800d0be <D64_GENERIC+0x1a2>
 800d08a:	9b00      	ldr	r3, [sp, #0]
 800d08c:	444b      	add	r3, r9
 800d08e:	461e      	mov	r6, r3
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	f8cd 900c 	str.w	r9, [sp, #12]
 800d096:	1af6      	subs	r6, r6, r3
 800d098:	46b0      	mov	r8, r6
 800d09a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800d09e:	e9cd 8900 	strd	r8, r9, [sp]
 800d0a2:	fba6 8907 	umull	r8, r9, r6, r7
 800d0a6:	9e01      	ldr	r6, [sp, #4]
 800d0a8:	fb07 9306 	mla	r3, r7, r6, r9
 800d0ac:	4646      	mov	r6, r8
 800d0ae:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800d0b2:	f143 0700 	adc.w	r7, r3, #0
 800d0b6:	fa07 f30e 	lsl.w	r3, r7, lr
 800d0ba:	4699      	mov	r9, r3
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800d0c2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800d0c6:	9b04      	ldr	r3, [sp, #16]
 800d0c8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0cc:	2700      	movs	r7, #0
 800d0ce:	fb05 fc0c 	mul.w	ip, r5, ip
 800d0d2:	3501      	adds	r5, #1
 800d0d4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800d0d8:	9b05      	ldr	r3, [sp, #20]
 800d0da:	10be      	asrs	r6, r7, #2
 800d0dc:	f306 060f 	ssat	r6, #16, r6
 800d0e0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800d0e4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800d0e6:	42ae      	cmp	r6, r5
 800d0e8:	dd11      	ble.n	800d10e <D64_GENERIC+0x1f2>
 800d0ea:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800d0ee:	f1be 0f01 	cmp.w	lr, #1
 800d0f2:	f47f af2d 	bne.w	800cf50 <D64_GENERIC+0x34>
 800d0f6:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800d0f8:	f100 0c08 	add.w	ip, r0, #8
 800d0fc:	06bb      	lsls	r3, r7, #26
 800d0fe:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800d102:	d513      	bpl.n	800d12c <D64_GENERIC+0x210>
 800d104:	ba76      	rev16	r6, r6
 800d106:	fa9a fa9a 	rev16.w	sl, sl
 800d10a:	4660      	mov	r0, ip
 800d10c:	e74c      	b.n	800cfa8 <D64_GENERIC+0x8c>
 800d10e:	465e      	mov	r6, fp
 800d110:	9b02      	ldr	r3, [sp, #8]
 800d112:	6093      	str	r3, [r2, #8]
 800d114:	2000      	movs	r0, #0
 800d116:	9b00      	ldr	r3, [sp, #0]
 800d118:	60d6      	str	r6, [r2, #12]
 800d11a:	6113      	str	r3, [r2, #16]
 800d11c:	9b03      	ldr	r3, [sp, #12]
 800d11e:	61d4      	str	r4, [r2, #28]
 800d120:	6153      	str	r3, [r2, #20]
 800d122:	9b07      	ldr	r3, [sp, #28]
 800d124:	6193      	str	r3, [r2, #24]
 800d126:	b009      	add	sp, #36	; 0x24
 800d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12c:	4660      	mov	r0, ip
 800d12e:	e73b      	b.n	800cfa8 <D64_GENERIC+0x8c>
 800d130:	24000000 	.word	0x24000000
 800d134:	001c0015 	.word	0x001c0015
 800d138:	000f000a 	.word	0x000f000a
 800d13c:	00060003 	.word	0x00060003
 800d140:	0024002a 	.word	0x0024002a
 800d144:	002e0030 	.word	0x002e0030
 800d148:	00030006 	.word	0x00030006
 800d14c:	000a000f 	.word	0x000a000f
 800d150:	0015001c 	.word	0x0015001c

0800d154 <D80_GENERIC>:
 800d154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d158:	b08b      	sub	sp, #44	; 0x2c
 800d15a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d15c:	9107      	str	r1, [sp, #28]
 800d15e:	6911      	ldr	r1, [r2, #16]
 800d160:	9104      	str	r1, [sp, #16]
 800d162:	6951      	ldr	r1, [r2, #20]
 800d164:	9105      	str	r1, [sp, #20]
 800d166:	6991      	ldr	r1, [r2, #24]
 800d168:	9109      	str	r1, [sp, #36]	; 0x24
 800d16a:	69d1      	ldr	r1, [r2, #28]
 800d16c:	9102      	str	r1, [sp, #8]
 800d16e:	6891      	ldr	r1, [r2, #8]
 800d170:	9103      	str	r1, [sp, #12]
 800d172:	68d1      	ldr	r1, [r2, #12]
 800d174:	9101      	str	r1, [sp, #4]
 800d176:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d178:	9106      	str	r1, [sp, #24]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 810b 	beq.w	800d396 <D80_GENERIC+0x242>
 800d180:	6a13      	ldr	r3, [r2, #32]
 800d182:	f04f 0800 	mov.w	r8, #0
 800d186:	f8df c260 	ldr.w	ip, [pc, #608]	; 800d3e8 <D80_GENERIC+0x294>
 800d18a:	9308      	str	r3, [sp, #32]
 800d18c:	9200      	str	r2, [sp, #0]
 800d18e:	e0ee      	b.n	800d36e <D80_GENERIC+0x21a>
 800d190:	b2db      	uxtb	r3, r3
 800d192:	f890 e000 	ldrb.w	lr, [r0]
 800d196:	b219      	sxth	r1, r3
 800d198:	425c      	negs	r4, r3
 800d19a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800d19e:	004e      	lsls	r6, r1, #1
 800d1a0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800d1a4:	4431      	add	r1, r6
 800d1a6:	1843      	adds	r3, r0, r1
 800d1a8:	f810 b001 	ldrb.w	fp, [r0, r1]
 800d1ac:	1919      	adds	r1, r3, r4
 800d1ae:	5d1b      	ldrb	r3, [r3, r4]
 800d1b0:	1948      	adds	r0, r1, r5
 800d1b2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800d1b6:	041b      	lsls	r3, r3, #16
 800d1b8:	1907      	adds	r7, r0, r4
 800d1ba:	5d01      	ldrb	r1, [r0, r4]
 800d1bc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d1c0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800d1c4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800d1c8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800d1cc:	0409      	lsls	r1, r1, #16
 800d1ce:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800d1d2:	eb0b 0905 	add.w	r9, fp, r5
 800d1d6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d1da:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800d1de:	eb09 0b04 	add.w	fp, r9, r4
 800d1e2:	f819 4004 	ldrb.w	r4, [r9, r4]
 800d1e6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d1ea:	4473      	add	r3, lr
 800d1ec:	eb0b 0006 	add.w	r0, fp, r6
 800d1f0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800d1f4:	4439      	add	r1, r7
 800d1f6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800d1fa:	b2df      	uxtb	r7, r3
 800d1fc:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800d200:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800d204:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800d208:	fa5f fa81 	uxtb.w	sl, r1
 800d20c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800d210:	9c02      	ldr	r4, [sp, #8]
 800d212:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800d216:	441c      	add	r4, r3
 800d218:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800d21c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800d220:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800d224:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d228:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800d22c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d230:	b2ed      	uxtb	r5, r5
 800d232:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800d236:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d23a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800d23e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800d242:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800d246:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d24a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800d24e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800d252:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800d256:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800d25a:	0e09      	lsrs	r1, r1, #24
 800d25c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d260:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800d264:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800d268:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d26c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d270:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d274:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d278:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800d27c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d280:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800d284:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800d288:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d28c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800d290:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d294:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d298:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800d29c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800d2a0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800d2a4:	9202      	str	r2, [sp, #8]
 800d2a6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800d2aa:	4a43      	ldr	r2, [pc, #268]	; (800d3b8 <D80_GENERIC+0x264>)
 800d2ac:	9f01      	ldr	r7, [sp, #4]
 800d2ae:	fb23 7a02 	smlad	sl, r3, r2, r7
 800d2b2:	4a42      	ldr	r2, [pc, #264]	; (800d3bc <D80_GENERIC+0x268>)
 800d2b4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800d2b8:	4a41      	ldr	r2, [pc, #260]	; (800d3c0 <D80_GENERIC+0x26c>)
 800d2ba:	fb24 aa02 	smlad	sl, r4, r2, sl
 800d2be:	4a41      	ldr	r2, [pc, #260]	; (800d3c4 <D80_GENERIC+0x270>)
 800d2c0:	fb21 a702 	smlad	r7, r1, r2, sl
 800d2c4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800d2c8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800d2cc:	4a3e      	ldr	r2, [pc, #248]	; (800d3c8 <D80_GENERIC+0x274>)
 800d2ce:	9f03      	ldr	r7, [sp, #12]
 800d2d0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800d2d4:	4a3d      	ldr	r2, [pc, #244]	; (800d3cc <D80_GENERIC+0x278>)
 800d2d6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800d2da:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800d2de:	fb24 e707 	smlad	r7, r4, r7, lr
 800d2e2:	4a3b      	ldr	r2, [pc, #236]	; (800d3d0 <D80_GENERIC+0x27c>)
 800d2e4:	fb21 7702 	smlad	r7, r1, r2, r7
 800d2e8:	4a3a      	ldr	r2, [pc, #232]	; (800d3d4 <D80_GENERIC+0x280>)
 800d2ea:	fb25 7202 	smlad	r2, r5, r2, r7
 800d2ee:	f04f 0901 	mov.w	r9, #1
 800d2f2:	9201      	str	r2, [sp, #4]
 800d2f4:	fb23 f909 	smuad	r9, r3, r9
 800d2f8:	4b37      	ldr	r3, [pc, #220]	; (800d3d8 <D80_GENERIC+0x284>)
 800d2fa:	fb26 9603 	smlad	r6, r6, r3, r9
 800d2fe:	4f37      	ldr	r7, [pc, #220]	; (800d3dc <D80_GENERIC+0x288>)
 800d300:	fb24 6407 	smlad	r4, r4, r7, r6
 800d304:	4f36      	ldr	r7, [pc, #216]	; (800d3e0 <D80_GENERIC+0x28c>)
 800d306:	fb21 4707 	smlad	r7, r1, r7, r4
 800d30a:	4936      	ldr	r1, [pc, #216]	; (800d3e4 <D80_GENERIC+0x290>)
 800d30c:	fb25 7301 	smlad	r3, r5, r1, r7
 800d310:	9303      	str	r3, [sp, #12]
 800d312:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800d316:	9b08      	ldr	r3, [sp, #32]
 800d318:	b193      	cbz	r3, 800d340 <D80_GENERIC+0x1ec>
 800d31a:	9a04      	ldr	r2, [sp, #16]
 800d31c:	4452      	add	r2, sl
 800d31e:	4614      	mov	r4, r2
 800d320:	9a05      	ldr	r2, [sp, #20]
 800d322:	f8cd a014 	str.w	sl, [sp, #20]
 800d326:	1aa4      	subs	r4, r4, r2
 800d328:	fba4 1203 	umull	r1, r2, r4, r3
 800d32c:	17e7      	asrs	r7, r4, #31
 800d32e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800d332:	fb03 2207 	mla	r2, r3, r7, r2
 800d336:	f142 0500 	adc.w	r5, r2, #0
 800d33a:	006b      	lsls	r3, r5, #1
 800d33c:	469a      	mov	sl, r3
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	9e00      	ldr	r6, [sp, #0]
 800d342:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800d346:	9a06      	ldr	r2, [sp, #24]
 800d348:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d34c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800d34e:	2500      	movs	r5, #0
 800d350:	fb08 f303 	mul.w	r3, r8, r3
 800d354:	fbc2 450a 	smlal	r4, r5, r2, sl
 800d358:	9a07      	ldr	r2, [sp, #28]
 800d35a:	f108 0801 	add.w	r8, r8, #1
 800d35e:	10a9      	asrs	r1, r5, #2
 800d360:	f301 010f 	ssat	r1, #16, r1
 800d364:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d368:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d36a:	4543      	cmp	r3, r8
 800d36c:	dd12      	ble.n	800d394 <D80_GENERIC+0x240>
 800d36e:	9b00      	ldr	r3, [sp, #0]
 800d370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d372:	2b01      	cmp	r3, #1
 800d374:	f47f af0c 	bne.w	800d190 <D80_GENERIC+0x3c>
 800d378:	9b00      	ldr	r3, [sp, #0]
 800d37a:	6885      	ldr	r5, [r0, #8]
 800d37c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d37e:	06b2      	lsls	r2, r6, #26
 800d380:	e9d0 3100 	ldrd	r3, r1, [r0]
 800d384:	f100 000a 	add.w	r0, r0, #10
 800d388:	f57f af35 	bpl.w	800d1f6 <D80_GENERIC+0xa2>
 800d38c:	ba5b      	rev16	r3, r3
 800d38e:	ba49      	rev16	r1, r1
 800d390:	ba6d      	rev16	r5, r5
 800d392:	e730      	b.n	800d1f6 <D80_GENERIC+0xa2>
 800d394:	4632      	mov	r2, r6
 800d396:	9b03      	ldr	r3, [sp, #12]
 800d398:	2000      	movs	r0, #0
 800d39a:	6093      	str	r3, [r2, #8]
 800d39c:	9b01      	ldr	r3, [sp, #4]
 800d39e:	60d3      	str	r3, [r2, #12]
 800d3a0:	9b02      	ldr	r3, [sp, #8]
 800d3a2:	61d3      	str	r3, [r2, #28]
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	6113      	str	r3, [r2, #16]
 800d3a8:	9b05      	ldr	r3, [sp, #20]
 800d3aa:	6153      	str	r3, [r2, #20]
 800d3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ae:	6193      	str	r3, [r2, #24]
 800d3b0:	b00b      	add	sp, #44	; 0x2c
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	bf00      	nop
 800d3b8:	002d0024 	.word	0x002d0024
 800d3bc:	001c0015 	.word	0x001c0015
 800d3c0:	000f000a 	.word	0x000f000a
 800d3c4:	00060003 	.word	0x00060003
 800d3c8:	0037003f 	.word	0x0037003f
 800d3cc:	00450049 	.word	0x00450049
 800d3d0:	00490045 	.word	0x00490045
 800d3d4:	003f0037 	.word	0x003f0037
 800d3d8:	00030006 	.word	0x00030006
 800d3dc:	000a000f 	.word	0x000a000f
 800d3e0:	0015001c 	.word	0x0015001c
 800d3e4:	0024002d 	.word	0x0024002d
 800d3e8:	24000000 	.word	0x24000000

0800d3ec <D128_GENERIC>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	b08d      	sub	sp, #52	; 0x34
 800d3f2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d3f4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800d3f8:	9109      	str	r1, [sp, #36]	; 0x24
 800d3fa:	6911      	ldr	r1, [r2, #16]
 800d3fc:	9201      	str	r2, [sp, #4]
 800d3fe:	9106      	str	r1, [sp, #24]
 800d400:	6951      	ldr	r1, [r2, #20]
 800d402:	9107      	str	r1, [sp, #28]
 800d404:	6991      	ldr	r1, [r2, #24]
 800d406:	910b      	str	r1, [sp, #44]	; 0x2c
 800d408:	6891      	ldr	r1, [r2, #8]
 800d40a:	9103      	str	r1, [sp, #12]
 800d40c:	68d1      	ldr	r1, [r2, #12]
 800d40e:	9102      	str	r1, [sp, #8]
 800d410:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d412:	9108      	str	r1, [sp, #32]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 8183 	beq.w	800d720 <D128_GENERIC+0x334>
 800d41a:	2300      	movs	r3, #0
 800d41c:	6a12      	ldr	r2, [r2, #32]
 800d41e:	4681      	mov	r9, r0
 800d420:	920a      	str	r2, [sp, #40]	; 0x28
 800d422:	e9cd a304 	strd	sl, r3, [sp, #16]
 800d426:	e165      	b.n	800d6f4 <D128_GENERIC+0x308>
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	f899 b000 	ldrb.w	fp, [r9]
 800d42e:	b213      	sxth	r3, r2
 800d430:	4255      	negs	r5, r2
 800d432:	f819 0002 	ldrb.w	r0, [r9, r2]
 800d436:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d43a:	009f      	lsls	r7, r3, #2
 800d43c:	eb09 0402 	add.w	r4, r9, r2
 800d440:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d444:	f819 8002 	ldrb.w	r8, [r9, r2]
 800d448:	443b      	add	r3, r7
 800d44a:	1962      	adds	r2, r4, r5
 800d44c:	5d64      	ldrb	r4, [r4, r5]
 800d44e:	eb02 0c03 	add.w	ip, r2, r3
 800d452:	0424      	lsls	r4, r4, #16
 800d454:	5cd3      	ldrb	r3, [r2, r3]
 800d456:	eb0c 0e05 	add.w	lr, ip, r5
 800d45a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800d45e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800d462:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800d466:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800d46a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800d46e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800d472:	eb0c 0e06 	add.w	lr, ip, r6
 800d476:	f81c a006 	ldrb.w	sl, [ip, r6]
 800d47a:	0412      	lsls	r2, r2, #16
 800d47c:	445c      	add	r4, fp
 800d47e:	eb0e 0c05 	add.w	ip, lr, r5
 800d482:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800d486:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800d48a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800d48e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d492:	041b      	lsls	r3, r3, #16
 800d494:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800d498:	eb00 0b06 	add.w	fp, r0, r6
 800d49c:	5d80      	ldrb	r0, [r0, r6]
 800d49e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800d4a2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800d4a6:	eb0b 0a05 	add.w	sl, fp, r5
 800d4aa:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800d4ae:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800d4b2:	0436      	lsls	r6, r6, #16
 800d4b4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800d4b8:	4442      	add	r2, r8
 800d4ba:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800d4be:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800d4c2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d4c6:	44b9      	add	r9, r7
 800d4c8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800d4cc:	4463      	add	r3, ip
 800d4ce:	eb06 0508 	add.w	r5, r6, r8
 800d4d2:	b2e7      	uxtb	r7, r4
 800d4d4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800d4d8:	499b      	ldr	r1, [pc, #620]	; (800d748 <D128_GENERIC+0x35c>)
 800d4da:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800d4de:	0e24      	lsrs	r4, r4, #24
 800d4e0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800d4e4:	b2d7      	uxtb	r7, r2
 800d4e6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800d4ea:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800d4ee:	9904      	ldr	r1, [sp, #16]
 800d4f0:	4461      	add	r1, ip
 800d4f2:	468c      	mov	ip, r1
 800d4f4:	4994      	ldr	r1, [pc, #592]	; (800d748 <D128_GENERIC+0x35c>)
 800d4f6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800d4fa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d4fe:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800d502:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d506:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800d50a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800d50e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800d512:	0e12      	lsrs	r2, r2, #24
 800d514:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800d518:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d51c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800d520:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d524:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800d528:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d532:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800d536:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d53a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d53e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800d542:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800d546:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800d54a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800d54e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d552:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800d556:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800d55a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800d55e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d562:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800d566:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d56a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800d56e:	0e1b      	lsrs	r3, r3, #24
 800d570:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800d574:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d578:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d57c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800d580:	b2eb      	uxtb	r3, r5
 800d582:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d586:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800d58a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800d58e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d592:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800d596:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800d59a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800d59e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d5a2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d5a6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800d5aa:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800d5ae:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800d5b2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800d5b6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800d5ba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d5be:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800d5c2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d5c6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800d5ca:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800d5ce:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800d5d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d5d6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800d5da:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d5de:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800d5e2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800d5e6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800d5ea:	9104      	str	r1, [sp, #16]
 800d5ec:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800d5f0:	9902      	ldr	r1, [sp, #8]
 800d5f2:	4a56      	ldr	r2, [pc, #344]	; (800d74c <D128_GENERIC+0x360>)
 800d5f4:	fb2b 1202 	smlad	r2, fp, r2, r1
 800d5f8:	4955      	ldr	r1, [pc, #340]	; (800d750 <D128_GENERIC+0x364>)
 800d5fa:	fb28 2201 	smlad	r2, r8, r1, r2
 800d5fe:	4955      	ldr	r1, [pc, #340]	; (800d754 <D128_GENERIC+0x368>)
 800d600:	fb27 2201 	smlad	r2, r7, r1, r2
 800d604:	4954      	ldr	r1, [pc, #336]	; (800d758 <D128_GENERIC+0x36c>)
 800d606:	fb26 2201 	smlad	r2, r6, r1, r2
 800d60a:	4954      	ldr	r1, [pc, #336]	; (800d75c <D128_GENERIC+0x370>)
 800d60c:	fb24 2201 	smlad	r2, r4, r1, r2
 800d610:	4953      	ldr	r1, [pc, #332]	; (800d760 <D128_GENERIC+0x374>)
 800d612:	fb20 2201 	smlad	r2, r0, r1, r2
 800d616:	4953      	ldr	r1, [pc, #332]	; (800d764 <D128_GENERIC+0x378>)
 800d618:	fb23 2201 	smlad	r2, r3, r1, r2
 800d61c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800d620:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800d624:	4950      	ldr	r1, [pc, #320]	; (800d768 <D128_GENERIC+0x37c>)
 800d626:	9a03      	ldr	r2, [sp, #12]
 800d628:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800d62c:	4a4f      	ldr	r2, [pc, #316]	; (800d76c <D128_GENERIC+0x380>)
 800d62e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800d632:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d784 <D128_GENERIC+0x398>
 800d636:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800d63a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800d788 <D128_GENERIC+0x39c>
 800d63e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800d642:	f8df e148 	ldr.w	lr, [pc, #328]	; 800d78c <D128_GENERIC+0x3a0>
 800d646:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800d64a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800d790 <D128_GENERIC+0x3a4>
 800d64e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800d652:	f8df c140 	ldr.w	ip, [pc, #320]	; 800d794 <D128_GENERIC+0x3a8>
 800d656:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800d65a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800d798 <D128_GENERIC+0x3ac>
 800d65e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800d662:	f04f 0c01 	mov.w	ip, #1
 800d666:	9202      	str	r2, [sp, #8]
 800d668:	fb2b fb0c 	smuad	fp, fp, ip
 800d66c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800d79c <D128_GENERIC+0x3b0>
 800d670:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800d674:	f8df c128 	ldr.w	ip, [pc, #296]	; 800d7a0 <D128_GENERIC+0x3b4>
 800d678:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800d67c:	4f3c      	ldr	r7, [pc, #240]	; (800d770 <D128_GENERIC+0x384>)
 800d67e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800d682:	4f3c      	ldr	r7, [pc, #240]	; (800d774 <D128_GENERIC+0x388>)
 800d684:	fb24 bb07 	smlad	fp, r4, r7, fp
 800d688:	4f3b      	ldr	r7, [pc, #236]	; (800d778 <D128_GENERIC+0x38c>)
 800d68a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800d68e:	4f3b      	ldr	r7, [pc, #236]	; (800d77c <D128_GENERIC+0x390>)
 800d690:	fb23 bb07 	smlad	fp, r3, r7, fp
 800d694:	4b3a      	ldr	r3, [pc, #232]	; (800d780 <D128_GENERIC+0x394>)
 800d696:	fb25 b303 	smlad	r3, r5, r3, fp
 800d69a:	9303      	str	r3, [sp, #12]
 800d69c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800d6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a2:	b183      	cbz	r3, 800d6c6 <D128_GENERIC+0x2da>
 800d6a4:	9a06      	ldr	r2, [sp, #24]
 800d6a6:	9907      	ldr	r1, [sp, #28]
 800d6a8:	4422      	add	r2, r4
 800d6aa:	9407      	str	r4, [sp, #28]
 800d6ac:	1a52      	subs	r2, r2, r1
 800d6ae:	fba2 0103 	umull	r0, r1, r2, r3
 800d6b2:	17d5      	asrs	r5, r2, #31
 800d6b4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800d6b8:	fb03 1105 	mla	r1, r3, r5, r1
 800d6bc:	f141 0300 	adc.w	r3, r1, #0
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	461c      	mov	r4, r3
 800d6c4:	9306      	str	r3, [sp, #24]
 800d6c6:	9d01      	ldr	r5, [sp, #4]
 800d6c8:	01e4      	lsls	r4, r4, #7
 800d6ca:	9e05      	ldr	r6, [sp, #20]
 800d6cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6d0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9908      	ldr	r1, [sp, #32]
 800d6d6:	fb06 f000 	mul.w	r0, r6, r0
 800d6da:	3601      	adds	r6, #1
 800d6dc:	fbc1 2304 	smlal	r2, r3, r1, r4
 800d6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6e2:	109b      	asrs	r3, r3, #2
 800d6e4:	9605      	str	r6, [sp, #20]
 800d6e6:	f303 030f 	ssat	r3, #16, r3
 800d6ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800d6ee:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800d6f0:	42b3      	cmp	r3, r6
 800d6f2:	dd13      	ble.n	800d71c <D128_GENERIC+0x330>
 800d6f4:	9b01      	ldr	r3, [sp, #4]
 800d6f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d6f8:	2a01      	cmp	r2, #1
 800d6fa:	f47f ae95 	bne.w	800d428 <D128_GENERIC+0x3c>
 800d6fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d700:	f109 0610 	add.w	r6, r9, #16
 800d704:	0681      	lsls	r1, r0, #26
 800d706:	e9d9 4200 	ldrd	r4, r2, [r9]
 800d70a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800d70e:	d518      	bpl.n	800d742 <D128_GENERIC+0x356>
 800d710:	ba64      	rev16	r4, r4
 800d712:	ba52      	rev16	r2, r2
 800d714:	ba5b      	rev16	r3, r3
 800d716:	ba6d      	rev16	r5, r5
 800d718:	46b1      	mov	r9, r6
 800d71a:	e6da      	b.n	800d4d2 <D128_GENERIC+0xe6>
 800d71c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d720:	9b01      	ldr	r3, [sp, #4]
 800d722:	2000      	movs	r0, #0
 800d724:	9903      	ldr	r1, [sp, #12]
 800d726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d728:	6099      	str	r1, [r3, #8]
 800d72a:	9902      	ldr	r1, [sp, #8]
 800d72c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800d730:	60d9      	str	r1, [r3, #12]
 800d732:	9906      	ldr	r1, [sp, #24]
 800d734:	619a      	str	r2, [r3, #24]
 800d736:	6119      	str	r1, [r3, #16]
 800d738:	9907      	ldr	r1, [sp, #28]
 800d73a:	6159      	str	r1, [r3, #20]
 800d73c:	b00d      	add	sp, #52	; 0x34
 800d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d742:	46b1      	mov	r9, r6
 800d744:	e6c5      	b.n	800d4d2 <D128_GENERIC+0xe6>
 800d746:	bf00      	nop
 800d748:	24000000 	.word	0x24000000
 800d74c:	00780069 	.word	0x00780069
 800d750:	005b004e 	.word	0x005b004e
 800d754:	00420037 	.word	0x00420037
 800d758:	002d0024 	.word	0x002d0024
 800d75c:	001c0015 	.word	0x001c0015
 800d760:	000f000a 	.word	0x000f000a
 800d764:	00060003 	.word	0x00060003
 800d768:	00880096 	.word	0x00880096
 800d76c:	00a200ac 	.word	0x00a200ac
 800d770:	0015001c 	.word	0x0015001c
 800d774:	0024002d 	.word	0x0024002d
 800d778:	00370042 	.word	0x00370042
 800d77c:	004e005b 	.word	0x004e005b
 800d780:	00690078 	.word	0x00690078
 800d784:	00b400ba 	.word	0x00b400ba
 800d788:	00be00c0 	.word	0x00be00c0
 800d78c:	00c000be 	.word	0x00c000be
 800d790:	00ba00b4 	.word	0x00ba00b4
 800d794:	00ac00a2 	.word	0x00ac00a2
 800d798:	00960088 	.word	0x00960088
 800d79c:	00030006 	.word	0x00030006
 800d7a0:	000a000f 	.word	0x000a000f

0800d7a4 <D16_1CH_HTONS_VOL_HP>:
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	6993      	ldr	r3, [r2, #24]
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	4682      	mov	sl, r0
 800d7ae:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800d7b0:	9304      	str	r3, [sp, #16]
 800d7b2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800d7b6:	69d3      	ldr	r3, [r2, #28]
 800d7b8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800d7bc:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800d7c0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800d7c4:	9403      	str	r4, [sp, #12]
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d054      	beq.n	800d874 <D16_1CH_HTONS_VOL_HP+0xd0>
 800d7ca:	f1a1 0902 	sub.w	r9, r1, #2
 800d7ce:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800d7d2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d880 <D16_1CH_HTONS_VOL_HP+0xdc>
 800d7d6:	4650      	mov	r0, sl
 800d7d8:	9101      	str	r1, [sp, #4]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	f8cd b008 	str.w	fp, [sp, #8]
 800d7e0:	9205      	str	r2, [sp, #20]
 800d7e2:	f850 3b02 	ldr.w	r3, [r0], #2
 800d7e6:	ba5b      	rev16	r3, r3
 800d7e8:	b2dc      	uxtb	r4, r3
 800d7ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d7ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7f2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800d7f6:	4419      	add	r1, r3
 800d7f8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800d7fc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800d800:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800d804:	0aa1      	lsrs	r1, r4, #10
 800d806:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800d80a:	4a1b      	ldr	r2, [pc, #108]	; (800d878 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800d80c:	fb23 5402 	smlad	r4, r3, r2, r5
 800d810:	4a1a      	ldr	r2, [pc, #104]	; (800d87c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800d812:	fb23 f502 	smuad	r5, r3, r2
 800d816:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800d81a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800d81e:	f04f 0b00 	mov.w	fp, #0
 800d822:	19a2      	adds	r2, r4, r6
 800d824:	eba2 020c 	sub.w	r2, r2, ip
 800d828:	46a4      	mov	ip, r4
 800d82a:	17d7      	asrs	r7, r2, #31
 800d82c:	fba2 230e 	umull	r2, r3, r2, lr
 800d830:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800d834:	fb0e 3307 	mla	r3, lr, r7, r3
 800d838:	f143 0700 	adc.w	r7, r3, #0
 800d83c:	9b02      	ldr	r3, [sp, #8]
 800d83e:	047a      	lsls	r2, r7, #17
 800d840:	007e      	lsls	r6, r7, #1
 800d842:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800d846:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800d84a:	f303 030f 	ssat	r3, #16, r3
 800d84e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800d852:	9b01      	ldr	r3, [sp, #4]
 800d854:	4298      	cmp	r0, r3
 800d856:	d1c4      	bne.n	800d7e2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800d858:	460b      	mov	r3, r1
 800d85a:	9a05      	ldr	r2, [sp, #20]
 800d85c:	2000      	movs	r0, #0
 800d85e:	9903      	ldr	r1, [sp, #12]
 800d860:	61d3      	str	r3, [r2, #28]
 800d862:	9b04      	ldr	r3, [sp, #16]
 800d864:	6095      	str	r5, [r2, #8]
 800d866:	60d1      	str	r1, [r2, #12]
 800d868:	6193      	str	r3, [r2, #24]
 800d86a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800d86e:	b007      	add	sp, #28
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	4664      	mov	r4, ip
 800d876:	e7f1      	b.n	800d85c <D16_1CH_HTONS_VOL_HP+0xb8>
 800d878:	00030001 	.word	0x00030001
 800d87c:	00010003 	.word	0x00010003
 800d880:	24000000 	.word	0x24000000

0800d884 <D24_1CH_HTONS_VOL_HP>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800d88a:	b089      	sub	sp, #36	; 0x24
 800d88c:	6993      	ldr	r3, [r2, #24]
 800d88e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d890:	9604      	str	r6, [sp, #16]
 800d892:	6a16      	ldr	r6, [r2, #32]
 800d894:	9306      	str	r3, [sp, #24]
 800d896:	9505      	str	r5, [sp, #20]
 800d898:	69d3      	ldr	r3, [r2, #28]
 800d89a:	9600      	str	r6, [sp, #0]
 800d89c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800d8a0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800d8a4:	2d00      	cmp	r5, #0
 800d8a6:	f000 8083 	beq.w	800d9b0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800d8aa:	9207      	str	r2, [sp, #28]
 800d8ac:	2600      	movs	r6, #0
 800d8ae:	4622      	mov	r2, r4
 800d8b0:	f1a1 0b02 	sub.w	fp, r1, #2
 800d8b4:	4f3f      	ldr	r7, [pc, #252]	; (800d9b4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800d8b6:	461d      	mov	r5, r3
 800d8b8:	f8cd a00c 	str.w	sl, [sp, #12]
 800d8bc:	9c00      	ldr	r4, [sp, #0]
 800d8be:	e056      	b.n	800d96e <D24_1CH_HTONS_VOL_HP+0xea>
 800d8c0:	7841      	ldrb	r1, [r0, #1]
 800d8c2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800d8c6:	3002      	adds	r0, #2
 800d8c8:	4488      	add	r8, r1
 800d8ca:	fa5f f388 	uxtb.w	r3, r8
 800d8ce:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800d8d2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800d8d6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800d8da:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800d8de:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800d8e2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800d8e6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800d8ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d8ee:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800d8f2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800d8f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d8fa:	492f      	ldr	r1, [pc, #188]	; (800d9b8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800d8fc:	fb23 e901 	smlad	r9, r3, r1, lr
 800d900:	492e      	ldr	r1, [pc, #184]	; (800d9bc <D24_1CH_HTONS_VOL_HP+0x138>)
 800d902:	fb23 ce01 	smlad	lr, r3, r1, ip
 800d906:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800d90a:	2101      	movs	r1, #1
 800d90c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800d910:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800d914:	fb23 f301 	smuad	r3, r3, r1
 800d918:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800d91c:	eb08 0c03 	add.w	ip, r8, r3
 800d920:	9b03      	ldr	r3, [sp, #12]
 800d922:	f04f 0a00 	mov.w	sl, #0
 800d926:	440a      	add	r2, r1
 800d928:	3601      	adds	r6, #1
 800d92a:	9103      	str	r1, [sp, #12]
 800d92c:	1ad2      	subs	r2, r2, r3
 800d92e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d932:	fba2 2304 	umull	r2, r3, r2, r4
 800d936:	e9cd 2300 	strd	r2, r3, [sp]
 800d93a:	fb04 3309 	mla	r3, r4, r9, r3
 800d93e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800d942:	9301      	str	r3, [sp, #4]
 800d944:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d948:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d94c:	f143 0300 	adc.w	r3, r3, #0
 800d950:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800d954:	005a      	lsls	r2, r3, #1
 800d956:	9b04      	ldr	r3, [sp, #16]
 800d958:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800d95c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800d960:	f303 030f 	ssat	r3, #16, r3
 800d964:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800d968:	9b05      	ldr	r3, [sp, #20]
 800d96a:	429e      	cmp	r6, r3
 800d96c:	d010      	beq.n	800d990 <D24_1CH_HTONS_VOL_HP+0x10c>
 800d96e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800d972:	f016 0f01 	tst.w	r6, #1
 800d976:	7801      	ldrb	r1, [r0, #0]
 800d978:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800d97c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800d980:	d09e      	beq.n	800d8c0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800d982:	f890 8002 	ldrb.w	r8, [r0, #2]
 800d986:	3004      	adds	r0, #4
 800d988:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800d98c:	4488      	add	r8, r1
 800d98e:	e79c      	b.n	800d8ca <D24_1CH_HTONS_VOL_HP+0x46>
 800d990:	4614      	mov	r4, r2
 800d992:	462b      	mov	r3, r5
 800d994:	9a07      	ldr	r2, [sp, #28]
 800d996:	2000      	movs	r0, #0
 800d998:	61d3      	str	r3, [r2, #28]
 800d99a:	9b06      	ldr	r3, [sp, #24]
 800d99c:	f8c2 c008 	str.w	ip, [r2, #8]
 800d9a0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d9a4:	6193      	str	r3, [r2, #24]
 800d9a6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800d9aa:	b009      	add	sp, #36	; 0x24
 800d9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b0:	4651      	mov	r1, sl
 800d9b2:	e7f0      	b.n	800d996 <D24_1CH_HTONS_VOL_HP+0x112>
 800d9b4:	24000000 	.word	0x24000000
 800d9b8:	00030001 	.word	0x00030001
 800d9bc:	00060007 	.word	0x00060007

0800d9c0 <D32_1CH_HTONS_VOL_HP>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	6993      	ldr	r3, [r2, #24]
 800d9c6:	b087      	sub	sp, #28
 800d9c8:	4683      	mov	fp, r0
 800d9ca:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800d9cc:	9304      	str	r3, [sp, #16]
 800d9ce:	69d5      	ldr	r5, [r2, #28]
 800d9d0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d9d2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800d9d6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800d9da:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d077      	beq.n	800dad2 <D32_1CH_HTONS_VOL_HP+0x112>
 800d9e2:	460f      	mov	r7, r1
 800d9e4:	46f1      	mov	r9, lr
 800d9e6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800d9ea:	f8cd 8000 	str.w	r8, [sp]
 800d9ee:	4e3a      	ldr	r6, [pc, #232]	; (800dad8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800d9f0:	469e      	mov	lr, r3
 800d9f2:	46a0      	mov	r8, r4
 800d9f4:	9103      	str	r1, [sp, #12]
 800d9f6:	9205      	str	r2, [sp, #20]
 800d9f8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800d9fc:	ba64      	rev16	r4, r4
 800d9fe:	b2e0      	uxtb	r0, r4
 800da00:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800da04:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800da08:	0e24      	lsrs	r4, r4, #24
 800da0a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800da0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800da12:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800da16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800da1a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800da1e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800da22:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800da26:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800da2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da2e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800da32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800da36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da3a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800da3e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800da42:	4826      	ldr	r0, [pc, #152]	; (800dadc <D32_1CH_HTONS_VOL_HP+0x11c>)
 800da44:	fb23 c400 	smlad	r4, r3, r0, ip
 800da48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800da4c:	fb21 4402 	smlad	r4, r1, r2, r4
 800da50:	4823      	ldr	r0, [pc, #140]	; (800dae0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800da52:	fb23 ec00 	smlad	ip, r3, r0, lr
 800da56:	4823      	ldr	r0, [pc, #140]	; (800dae4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800da58:	fb21 cc00 	smlad	ip, r1, r0, ip
 800da5c:	2201      	movs	r2, #1
 800da5e:	fb23 f302 	smuad	r3, r3, r2
 800da62:	4821      	ldr	r0, [pc, #132]	; (800dae8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800da64:	fb21 3e00 	smlad	lr, r1, r0, r3
 800da68:	9b00      	ldr	r3, [sp, #0]
 800da6a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800da6e:	4423      	add	r3, r4
 800da70:	eba3 0209 	sub.w	r2, r3, r9
 800da74:	46a1      	mov	r9, r4
 800da76:	17d1      	asrs	r1, r2, #31
 800da78:	fba2 230a 	umull	r2, r3, r2, sl
 800da7c:	e9cd 2300 	strd	r2, r3, [sp]
 800da80:	fb0a 3301 	mla	r3, sl, r1, r3
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da8a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800da8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da92:	f143 0300 	adc.w	r3, r3, #0
 800da96:	0399      	lsls	r1, r3, #14
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	2300      	movs	r3, #0
 800da9e:	fbc8 2301 	smlal	r2, r3, r8, r1
 800daa2:	109b      	asrs	r3, r3, #2
 800daa4:	f303 030f 	ssat	r3, #16, r3
 800daa8:	f827 3b02 	strh.w	r3, [r7], #2
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	429f      	cmp	r7, r3
 800dab0:	d1a2      	bne.n	800d9f8 <D32_1CH_HTONS_VOL_HP+0x38>
 800dab2:	4673      	mov	r3, lr
 800dab4:	f8dd 8000 	ldr.w	r8, [sp]
 800dab8:	9a05      	ldr	r2, [sp, #20]
 800daba:	6093      	str	r3, [r2, #8]
 800dabc:	2000      	movs	r0, #0
 800dabe:	9b04      	ldr	r3, [sp, #16]
 800dac0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800dac4:	61d5      	str	r5, [r2, #28]
 800dac6:	6193      	str	r3, [r2, #24]
 800dac8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800dacc:	b007      	add	sp, #28
 800dace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad2:	4674      	mov	r4, lr
 800dad4:	e7f1      	b.n	800daba <D32_1CH_HTONS_VOL_HP+0xfa>
 800dad6:	bf00      	nop
 800dad8:	24000000 	.word	0x24000000
 800dadc:	00060003 	.word	0x00060003
 800dae0:	000a000c 	.word	0x000a000c
 800dae4:	000c000a 	.word	0x000c000a
 800dae8:	00030006 	.word	0x00030006

0800daec <D48_1CH_HTONS_VOL_HP>:
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800daf2:	b087      	sub	sp, #28
 800daf4:	6993      	ldr	r3, [r2, #24]
 800daf6:	9701      	str	r7, [sp, #4]
 800daf8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800dafa:	6a17      	ldr	r7, [r2, #32]
 800dafc:	9304      	str	r3, [sp, #16]
 800dafe:	69d6      	ldr	r6, [r2, #28]
 800db00:	9702      	str	r7, [sp, #8]
 800db02:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800db06:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800db0a:	2d00      	cmp	r5, #0
 800db0c:	f000 8093 	beq.w	800dc36 <D48_1CH_HTONS_VOL_HP+0x14a>
 800db10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db14:	f1a1 0b02 	sub.w	fp, r1, #2
 800db18:	46f2      	mov	sl, lr
 800db1a:	4f48      	ldr	r7, [pc, #288]	; (800dc3c <D48_1CH_HTONS_VOL_HP+0x150>)
 800db1c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800db20:	469e      	mov	lr, r3
 800db22:	9205      	str	r2, [sp, #20]
 800db24:	9103      	str	r1, [sp, #12]
 800db26:	e9d0 3200 	ldrd	r3, r2, [r0]
 800db2a:	3006      	adds	r0, #6
 800db2c:	ba5b      	rev16	r3, r3
 800db2e:	fa92 f992 	rev16.w	r9, r2
 800db32:	b2dd      	uxtb	r5, r3
 800db34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800db38:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800db3c:	0e1b      	lsrs	r3, r3, #24
 800db3e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800db42:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800db46:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800db4a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800db4e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800db52:	fa5f f289 	uxtb.w	r2, r9
 800db56:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800db5a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800db5e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800db62:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800db66:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800db6a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800db6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800db72:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800db76:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800db7a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800db7e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800db82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db86:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800db8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800db8e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800db92:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800db96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800db9a:	4b29      	ldr	r3, [pc, #164]	; (800dc40 <D48_1CH_HTONS_VOL_HP+0x154>)
 800db9c:	fb28 c103 	smlad	r1, r8, r3, ip
 800dba0:	4b28      	ldr	r3, [pc, #160]	; (800dc44 <D48_1CH_HTONS_VOL_HP+0x158>)
 800dba2:	fb25 1103 	smlad	r1, r5, r3, r1
 800dba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dbaa:	fb22 1903 	smlad	r9, r2, r3, r1
 800dbae:	4b26      	ldr	r3, [pc, #152]	; (800dc48 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800dbb0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800dbb4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800dbb8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800dbbc:	4b23      	ldr	r3, [pc, #140]	; (800dc4c <D48_1CH_HTONS_VOL_HP+0x160>)
 800dbbe:	fb22 cc03 	smlad	ip, r2, r3, ip
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	fb28 f801 	smuad	r8, r8, r1
 800dbc8:	4b21      	ldr	r3, [pc, #132]	; (800dc50 <D48_1CH_HTONS_VOL_HP+0x164>)
 800dbca:	fb25 8503 	smlad	r5, r5, r3, r8
 800dbce:	4b21      	ldr	r3, [pc, #132]	; (800dc54 <D48_1CH_HTONS_VOL_HP+0x168>)
 800dbd0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800dbd4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800dbd8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dbdc:	190a      	adds	r2, r1, r4
 800dbde:	9c02      	ldr	r4, [sp, #8]
 800dbe0:	eba2 020a 	sub.w	r2, r2, sl
 800dbe4:	468a      	mov	sl, r1
 800dbe6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800dbea:	fba2 2304 	umull	r2, r3, r2, r4
 800dbee:	fb04 3309 	mla	r3, r4, r9, r3
 800dbf2:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800dbf6:	f04f 0900 	mov.w	r9, #0
 800dbfa:	f143 0500 	adc.w	r5, r3, #0
 800dbfe:	9b01      	ldr	r3, [sp, #4]
 800dc00:	032a      	lsls	r2, r5, #12
 800dc02:	006c      	lsls	r4, r5, #1
 800dc04:	fbc3 8902 	smlal	r8, r9, r3, r2
 800dc08:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800dc0c:	f303 030f 	ssat	r3, #16, r3
 800dc10:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	4283      	cmp	r3, r0
 800dc18:	d185      	bne.n	800db26 <D48_1CH_HTONS_VOL_HP+0x3a>
 800dc1a:	4673      	mov	r3, lr
 800dc1c:	9a05      	ldr	r2, [sp, #20]
 800dc1e:	6093      	str	r3, [r2, #8]
 800dc20:	2000      	movs	r0, #0
 800dc22:	9b04      	ldr	r3, [sp, #16]
 800dc24:	f8c2 c00c 	str.w	ip, [r2, #12]
 800dc28:	61d6      	str	r6, [r2, #28]
 800dc2a:	6193      	str	r3, [r2, #24]
 800dc2c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800dc30:	b007      	add	sp, #28
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc36:	4671      	mov	r1, lr
 800dc38:	e7f1      	b.n	800dc1e <D48_1CH_HTONS_VOL_HP+0x132>
 800dc3a:	bf00      	nop
 800dc3c:	24000000 	.word	0x24000000
 800dc40:	000f000a 	.word	0x000f000a
 800dc44:	00060003 	.word	0x00060003
 800dc48:	00150019 	.word	0x00150019
 800dc4c:	00190015 	.word	0x00190015
 800dc50:	00030006 	.word	0x00030006
 800dc54:	000a000f 	.word	0x000a000f

0800dc58 <D64_1CH_HTONS_VOL_HP>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800dc5e:	b089      	sub	sp, #36	; 0x24
 800dc60:	6993      	ldr	r3, [r2, #24]
 800dc62:	4686      	mov	lr, r0
 800dc64:	9503      	str	r5, [sp, #12]
 800dc66:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800dc68:	6a15      	ldr	r5, [r2, #32]
 800dc6a:	9306      	str	r3, [sp, #24]
 800dc6c:	69d6      	ldr	r6, [r2, #28]
 800dc6e:	9504      	str	r5, [sp, #16]
 800dc70:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800dc74:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	f000 80a4 	beq.w	800ddc6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800dc7e:	460f      	mov	r7, r1
 800dc80:	46f1      	mov	r9, lr
 800dc82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800dc86:	4d56      	ldr	r5, [pc, #344]	; (800dde0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800dc88:	46a2      	mov	sl, r4
 800dc8a:	469e      	mov	lr, r3
 800dc8c:	9105      	str	r1, [sp, #20]
 800dc8e:	9207      	str	r2, [sp, #28]
 800dc90:	f859 1b08 	ldr.w	r1, [r9], #8
 800dc94:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800dc98:	ba49      	rev16	r1, r1
 800dc9a:	fa93 fb93 	rev16.w	fp, r3
 800dc9e:	b2cb      	uxtb	r3, r1
 800dca0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800dca4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800dca8:	0e09      	lsrs	r1, r1, #24
 800dcaa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800dcae:	fa5f f38b 	uxtb.w	r3, fp
 800dcb2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800dcb6:	4426      	add	r6, r4
 800dcb8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800dcbc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800dcc0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800dcc4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800dcc8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dccc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800dcd0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800dcd4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dcd8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800dcdc:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800dce0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dce4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800dce8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800dcec:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800dcf0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dcf4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800dcf8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800dcfc:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800dd00:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800dd04:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800dd08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dd0c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800dd10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd14:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800dd18:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800dd1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd20:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800dd24:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800dd28:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800dd2c:	482d      	ldr	r0, [pc, #180]	; (800dde4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800dd2e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800dd32:	482d      	ldr	r0, [pc, #180]	; (800dde8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800dd34:	fb21 cc00 	smlad	ip, r1, r0, ip
 800dd38:	482c      	ldr	r0, [pc, #176]	; (800ddec <D64_1CH_HTONS_VOL_HP+0x194>)
 800dd3a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800dd3e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800dd42:	fb2b c404 	smlad	r4, fp, r4, ip
 800dd46:	482a      	ldr	r0, [pc, #168]	; (800ddf0 <D64_1CH_HTONS_VOL_HP+0x198>)
 800dd48:	fb22 ec00 	smlad	ip, r2, r0, lr
 800dd4c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800dd50:	4828      	ldr	r0, [pc, #160]	; (800ddf4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800dd52:	fb21 cc00 	smlad	ip, r1, r0, ip
 800dd56:	fb23 cc10 	smladx	ip, r3, r0, ip
 800dd5a:	f04f 0e01 	mov.w	lr, #1
 800dd5e:	fb22 f20e 	smuad	r2, r2, lr
 800dd62:	4825      	ldr	r0, [pc, #148]	; (800ddf8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800dd64:	fb21 2100 	smlad	r1, r1, r0, r2
 800dd68:	4a24      	ldr	r2, [pc, #144]	; (800ddfc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800dd6a:	fb23 1302 	smlad	r3, r3, r2, r1
 800dd6e:	4a24      	ldr	r2, [pc, #144]	; (800de00 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800dd70:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800dd74:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800dd78:	eb04 0208 	add.w	r2, r4, r8
 800dd7c:	eba2 020a 	sub.w	r2, r2, sl
 800dd80:	46a2      	mov	sl, r4
 800dd82:	4610      	mov	r0, r2
 800dd84:	17d1      	asrs	r1, r2, #31
 800dd86:	e9cd 0100 	strd	r0, r1, [sp]
 800dd8a:	9904      	ldr	r1, [sp, #16]
 800dd8c:	9801      	ldr	r0, [sp, #4]
 800dd8e:	fba2 2301 	umull	r2, r3, r2, r1
 800dd92:	fb01 3300 	mla	r3, r1, r0, r3
 800dd96:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800dd9a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800dd9e:	f143 0100 	adc.w	r1, r3, #0
 800dda2:	9b03      	ldr	r3, [sp, #12]
 800dda4:	02ca      	lsls	r2, r1, #11
 800dda6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800ddaa:	2100      	movs	r1, #0
 800ddac:	fbc3 0102 	smlal	r0, r1, r3, r2
 800ddb0:	108b      	asrs	r3, r1, #2
 800ddb2:	f303 030f 	ssat	r3, #16, r3
 800ddb6:	f827 3b02 	strh.w	r3, [r7], #2
 800ddba:	9b05      	ldr	r3, [sp, #20]
 800ddbc:	429f      	cmp	r7, r3
 800ddbe:	f47f af67 	bne.w	800dc90 <D64_1CH_HTONS_VOL_HP+0x38>
 800ddc2:	4673      	mov	r3, lr
 800ddc4:	9a07      	ldr	r2, [sp, #28]
 800ddc6:	6093      	str	r3, [r2, #8]
 800ddc8:	2000      	movs	r0, #0
 800ddca:	9b06      	ldr	r3, [sp, #24]
 800ddcc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ddd0:	61d6      	str	r6, [r2, #28]
 800ddd2:	6193      	str	r3, [r2, #24]
 800ddd4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800ddd8:	b009      	add	sp, #36	; 0x24
 800ddda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddde:	bf00      	nop
 800dde0:	24000000 	.word	0x24000000
 800dde4:	001c0015 	.word	0x001c0015
 800dde8:	000f000a 	.word	0x000f000a
 800ddec:	00060003 	.word	0x00060003
 800ddf0:	0024002a 	.word	0x0024002a
 800ddf4:	002e0030 	.word	0x002e0030
 800ddf8:	00030006 	.word	0x00030006
 800ddfc:	000a000f 	.word	0x000a000f
 800de00:	0015001c 	.word	0x0015001c

0800de04 <D80_1CH_HTONS_VOL_HP>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	6913      	ldr	r3, [r2, #16]
 800de0a:	b089      	sub	sp, #36	; 0x24
 800de0c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	9603      	str	r6, [sp, #12]
 800de12:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800de14:	6a16      	ldr	r6, [r2, #32]
 800de16:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800de1a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800de1e:	9306      	str	r3, [sp, #24]
 800de20:	9604      	str	r6, [sp, #16]
 800de22:	69d3      	ldr	r3, [r2, #28]
 800de24:	2c00      	cmp	r4, #0
 800de26:	f000 80ce 	beq.w	800dfc6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800de2a:	3902      	subs	r1, #2
 800de2c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800de30:	4e66      	ldr	r6, [pc, #408]	; (800dfcc <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800de32:	469e      	mov	lr, r3
 800de34:	9102      	str	r1, [sp, #8]
 800de36:	46aa      	mov	sl, r5
 800de38:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800de3c:	9207      	str	r2, [sp, #28]
 800de3e:	9105      	str	r1, [sp, #20]
 800de40:	6883      	ldr	r3, [r0, #8]
 800de42:	e9d0 4200 	ldrd	r4, r2, [r0]
 800de46:	300a      	adds	r0, #10
 800de48:	ba64      	rev16	r4, r4
 800de4a:	ba52      	rev16	r2, r2
 800de4c:	fa93 fb93 	rev16.w	fp, r3
 800de50:	b2e5      	uxtb	r5, r4
 800de52:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800de56:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800de5a:	0e24      	lsrs	r4, r4, #24
 800de5c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800de60:	b2d5      	uxtb	r5, r2
 800de62:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800de66:	44c6      	add	lr, r8
 800de68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800de6c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800de70:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800de74:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800de78:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800de7c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800de80:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800de84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de88:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800de8c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800de90:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800de94:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800de98:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800de9c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800dea0:	0e12      	lsrs	r2, r2, #24
 800dea2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800dea6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800deaa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800deae:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800deb2:	fa5f fb8b 	uxtb.w	fp, fp
 800deb6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800deba:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800debe:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800dec2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dec6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800deca:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800dece:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ded2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800ded6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800deda:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dede:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dee2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800dee6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800deea:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800deee:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800def2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800def6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800defa:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800defe:	4934      	ldr	r1, [pc, #208]	; (800dfd0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800df00:	fb23 cc01 	smlad	ip, r3, r1, ip
 800df04:	4933      	ldr	r1, [pc, #204]	; (800dfd4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800df06:	fb24 cc01 	smlad	ip, r4, r1, ip
 800df0a:	4933      	ldr	r1, [pc, #204]	; (800dfd8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800df0c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800df10:	4932      	ldr	r1, [pc, #200]	; (800dfdc <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800df12:	fb22 cc01 	smlad	ip, r2, r1, ip
 800df16:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800df1a:	fb2b c901 	smlad	r9, fp, r1, ip
 800df1e:	4930      	ldr	r1, [pc, #192]	; (800dfe0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800df20:	fb23 7701 	smlad	r7, r3, r1, r7
 800df24:	492f      	ldr	r1, [pc, #188]	; (800dfe4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800df26:	fb24 7701 	smlad	r7, r4, r1, r7
 800df2a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800df2e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800df32:	492d      	ldr	r1, [pc, #180]	; (800dfe8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800df34:	fb22 cc01 	smlad	ip, r2, r1, ip
 800df38:	492c      	ldr	r1, [pc, #176]	; (800dfec <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800df3a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800df3e:	2101      	movs	r1, #1
 800df40:	fb23 f301 	smuad	r3, r3, r1
 800df44:	492a      	ldr	r1, [pc, #168]	; (800dff0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800df46:	fb24 3401 	smlad	r4, r4, r1, r3
 800df4a:	492a      	ldr	r1, [pc, #168]	; (800dff4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800df4c:	fb28 4101 	smlad	r1, r8, r1, r4
 800df50:	4f29      	ldr	r7, [pc, #164]	; (800dff8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800df52:	fb22 1207 	smlad	r2, r2, r7, r1
 800df56:	4f29      	ldr	r7, [pc, #164]	; (800dffc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800df58:	fb2b 2707 	smlad	r7, fp, r7, r2
 800df5c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800df60:	9b01      	ldr	r3, [sp, #4]
 800df62:	9c04      	ldr	r4, [sp, #16]
 800df64:	440b      	add	r3, r1
 800df66:	eba3 020a 	sub.w	r2, r3, sl
 800df6a:	468a      	mov	sl, r1
 800df6c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800df70:	fba2 2304 	umull	r2, r3, r2, r4
 800df74:	fb04 3309 	mla	r3, r4, r9, r3
 800df78:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800df7c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800df80:	f143 0500 	adc.w	r5, r3, #0
 800df84:	006b      	lsls	r3, r5, #1
 800df86:	02aa      	lsls	r2, r5, #10
 800df88:	2500      	movs	r5, #0
 800df8a:	9301      	str	r3, [sp, #4]
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800df92:	9a02      	ldr	r2, [sp, #8]
 800df94:	10ab      	asrs	r3, r5, #2
 800df96:	f303 030f 	ssat	r3, #16, r3
 800df9a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800df9e:	9b05      	ldr	r3, [sp, #20]
 800dfa0:	9202      	str	r2, [sp, #8]
 800dfa2:	4298      	cmp	r0, r3
 800dfa4:	f47f af4c 	bne.w	800de40 <D80_1CH_HTONS_VOL_HP+0x3c>
 800dfa8:	4673      	mov	r3, lr
 800dfaa:	9a07      	ldr	r2, [sp, #28]
 800dfac:	61d3      	str	r3, [r2, #28]
 800dfae:	2000      	movs	r0, #0
 800dfb0:	9b01      	ldr	r3, [sp, #4]
 800dfb2:	6097      	str	r7, [r2, #8]
 800dfb4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800dfb8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800dfbc:	9b06      	ldr	r3, [sp, #24]
 800dfbe:	6193      	str	r3, [r2, #24]
 800dfc0:	b009      	add	sp, #36	; 0x24
 800dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	e7f0      	b.n	800dfac <D80_1CH_HTONS_VOL_HP+0x1a8>
 800dfca:	bf00      	nop
 800dfcc:	24000000 	.word	0x24000000
 800dfd0:	002d0024 	.word	0x002d0024
 800dfd4:	001c0015 	.word	0x001c0015
 800dfd8:	000f000a 	.word	0x000f000a
 800dfdc:	00060003 	.word	0x00060003
 800dfe0:	0037003f 	.word	0x0037003f
 800dfe4:	00450049 	.word	0x00450049
 800dfe8:	00490045 	.word	0x00490045
 800dfec:	003f0037 	.word	0x003f0037
 800dff0:	00030006 	.word	0x00030006
 800dff4:	000a000f 	.word	0x000a000f
 800dff8:	0015001c 	.word	0x0015001c
 800dffc:	0024002d 	.word	0x0024002d

0800e000 <D128_1CH_HTONS_VOL_HP>:
 800e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e004:	6914      	ldr	r4, [r2, #16]
 800e006:	b08d      	sub	sp, #52	; 0x34
 800e008:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e00a:	9404      	str	r4, [sp, #16]
 800e00c:	6954      	ldr	r4, [r2, #20]
 800e00e:	920b      	str	r2, [sp, #44]	; 0x2c
 800e010:	9405      	str	r4, [sp, #20]
 800e012:	6994      	ldr	r4, [r2, #24]
 800e014:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800e018:	940a      	str	r4, [sp, #40]	; 0x28
 800e01a:	6894      	ldr	r4, [r2, #8]
 800e01c:	9403      	str	r4, [sp, #12]
 800e01e:	68d4      	ldr	r4, [r2, #12]
 800e020:	9402      	str	r4, [sp, #8]
 800e022:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e024:	6a12      	ldr	r2, [r2, #32]
 800e026:	9407      	str	r4, [sp, #28]
 800e028:	9208      	str	r2, [sp, #32]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 812e 	beq.w	800e28c <D128_1CH_HTONS_VOL_HP+0x28c>
 800e030:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e034:	f100 0b10 	add.w	fp, r0, #16
 800e038:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800e2cc <D128_1CH_HTONS_VOL_HP+0x2cc>
 800e03c:	9106      	str	r1, [sp, #24]
 800e03e:	9309      	str	r3, [sp, #36]	; 0x24
 800e040:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800e044:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800e048:	ba40      	rev16	r0, r0
 800e04a:	ba52      	rev16	r2, r2
 800e04c:	ba5b      	rev16	r3, r3
 800e04e:	ba76      	rev16	r6, r6
 800e050:	b2c5      	uxtb	r5, r0
 800e052:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800e056:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800e05a:	0e00      	lsrs	r0, r0, #24
 800e05c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800e060:	b2d5      	uxtb	r5, r2
 800e062:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800e066:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800e06a:	44bc      	add	ip, r7
 800e06c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e070:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800e074:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800e078:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800e07c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800e080:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800e084:	0e12      	lsrs	r2, r2, #24
 800e086:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800e08a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800e08e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e092:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e096:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800e09a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800e09e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800e0a8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e0ac:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800e0b0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800e0b4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800e0b8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e0bc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800e0c0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e0c4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800e0c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e0cc:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800e0d0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800e0d4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800e0d8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e0dc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800e0e0:	0e1b      	lsrs	r3, r3, #24
 800e0e2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e0e6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e0ea:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800e0ee:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800e0f2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800e0f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e0fa:	b2f3      	uxtb	r3, r6
 800e0fc:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800e100:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800e104:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e108:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800e10c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800e110:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800e114:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e118:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e11c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800e120:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800e124:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800e128:	0e36      	lsrs	r6, r6, #24
 800e12a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800e12e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e132:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800e136:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e13a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800e13e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e142:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800e146:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800e14a:	9101      	str	r1, [sp, #4]
 800e14c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800e156:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e15a:	4611      	mov	r1, r2
 800e15c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800e160:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800e164:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800e168:	4a49      	ldr	r2, [pc, #292]	; (800e290 <D128_1CH_HTONS_VOL_HP+0x290>)
 800e16a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800e16e:	4b49      	ldr	r3, [pc, #292]	; (800e294 <D128_1CH_HTONS_VOL_HP+0x294>)
 800e170:	fb27 2203 	smlad	r2, r7, r3, r2
 800e174:	4b48      	ldr	r3, [pc, #288]	; (800e298 <D128_1CH_HTONS_VOL_HP+0x298>)
 800e176:	fb25 2203 	smlad	r2, r5, r3, r2
 800e17a:	4b48      	ldr	r3, [pc, #288]	; (800e29c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800e17c:	fb24 2203 	smlad	r2, r4, r3, r2
 800e180:	4b47      	ldr	r3, [pc, #284]	; (800e2a0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800e182:	fb20 2803 	smlad	r8, r0, r3, r2
 800e186:	4b47      	ldr	r3, [pc, #284]	; (800e2a4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800e188:	9a01      	ldr	r2, [sp, #4]
 800e18a:	fb22 8203 	smlad	r2, r2, r3, r8
 800e18e:	4b46      	ldr	r3, [pc, #280]	; (800e2a8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800e190:	9102      	str	r1, [sp, #8]
 800e192:	fb21 2203 	smlad	r2, r1, r3, r2
 800e196:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800e19a:	fb26 2308 	smlad	r3, r6, r8, r2
 800e19e:	4619      	mov	r1, r3
 800e1a0:	9a03      	ldr	r2, [sp, #12]
 800e1a2:	4b42      	ldr	r3, [pc, #264]	; (800e2ac <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800e1a4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800e1a8:	4b41      	ldr	r3, [pc, #260]	; (800e2b0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800e1aa:	fb27 8a03 	smlad	sl, r7, r3, r8
 800e1ae:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800e2d0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800e1b2:	fb25 a808 	smlad	r8, r5, r8, sl
 800e1b6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800e2d4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800e1ba:	fb24 880a 	smlad	r8, r4, sl, r8
 800e1be:	f8df a118 	ldr.w	sl, [pc, #280]	; 800e2d8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800e1c2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800e1c6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800e2dc <D128_1CH_HTONS_VOL_HP+0x2dc>
 800e1ca:	9b01      	ldr	r3, [sp, #4]
 800e1cc:	fb23 aa08 	smlad	sl, r3, r8, sl
 800e1d0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800e2e0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800e1d4:	9a02      	ldr	r2, [sp, #8]
 800e1d6:	fb22 a808 	smlad	r8, r2, r8, sl
 800e1da:	f8df a108 	ldr.w	sl, [pc, #264]	; 800e2e4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800e1de:	fb26 830a 	smlad	r3, r6, sl, r8
 800e1e2:	f04f 0801 	mov.w	r8, #1
 800e1e6:	9302      	str	r3, [sp, #8]
 800e1e8:	fb2e fe08 	smuad	lr, lr, r8
 800e1ec:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800e2e8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800e1f0:	fb27 ee08 	smlad	lr, r7, r8, lr
 800e1f4:	4f2f      	ldr	r7, [pc, #188]	; (800e2b4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800e1f6:	fb25 ee07 	smlad	lr, r5, r7, lr
 800e1fa:	4f2f      	ldr	r7, [pc, #188]	; (800e2b8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800e1fc:	fb24 ee07 	smlad	lr, r4, r7, lr
 800e200:	4f2e      	ldr	r7, [pc, #184]	; (800e2bc <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800e202:	fb20 ee07 	smlad	lr, r0, r7, lr
 800e206:	4f2e      	ldr	r7, [pc, #184]	; (800e2c0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800e208:	9b01      	ldr	r3, [sp, #4]
 800e20a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800e20e:	4f2d      	ldr	r7, [pc, #180]	; (800e2c4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800e210:	fb22 e707 	smlad	r7, r2, r7, lr
 800e214:	4b2c      	ldr	r3, [pc, #176]	; (800e2c8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e216:	fb26 7303 	smlad	r3, r6, r3, r7
 800e21a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800e21e:	9303      	str	r3, [sp, #12]
 800e220:	9b04      	ldr	r3, [sp, #16]
 800e222:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e226:	9f08      	ldr	r7, [sp, #32]
 800e228:	2100      	movs	r1, #0
 800e22a:	4433      	add	r3, r6
 800e22c:	f10b 0b10 	add.w	fp, fp, #16
 800e230:	461a      	mov	r2, r3
 800e232:	9b05      	ldr	r3, [sp, #20]
 800e234:	9605      	str	r6, [sp, #20]
 800e236:	1ad2      	subs	r2, r2, r3
 800e238:	17d5      	asrs	r5, r2, #31
 800e23a:	fba2 2307 	umull	r2, r3, r2, r7
 800e23e:	1814      	adds	r4, r2, r0
 800e240:	fb07 3305 	mla	r3, r7, r5, r3
 800e244:	eb43 0501 	adc.w	r5, r3, r1
 800e248:	006b      	lsls	r3, r5, #1
 800e24a:	022a      	lsls	r2, r5, #8
 800e24c:	9304      	str	r3, [sp, #16]
 800e24e:	9b07      	ldr	r3, [sp, #28]
 800e250:	fbc3 0102 	smlal	r0, r1, r3, r2
 800e254:	9a06      	ldr	r2, [sp, #24]
 800e256:	108b      	asrs	r3, r1, #2
 800e258:	f303 030f 	ssat	r3, #16, r3
 800e25c:	f822 3b02 	strh.w	r3, [r2], #2
 800e260:	4613      	mov	r3, r2
 800e262:	9206      	str	r2, [sp, #24]
 800e264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e266:	4293      	cmp	r3, r2
 800e268:	f47f aeea 	bne.w	800e040 <D128_1CH_HTONS_VOL_HP+0x40>
 800e26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e26e:	2000      	movs	r0, #0
 800e270:	9903      	ldr	r1, [sp, #12]
 800e272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e274:	6099      	str	r1, [r3, #8]
 800e276:	9902      	ldr	r1, [sp, #8]
 800e278:	f8c3 c01c 	str.w	ip, [r3, #28]
 800e27c:	60d9      	str	r1, [r3, #12]
 800e27e:	9904      	ldr	r1, [sp, #16]
 800e280:	619a      	str	r2, [r3, #24]
 800e282:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800e286:	b00d      	add	sp, #52	; 0x34
 800e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	9e05      	ldr	r6, [sp, #20]
 800e28e:	e7ed      	b.n	800e26c <D128_1CH_HTONS_VOL_HP+0x26c>
 800e290:	00780069 	.word	0x00780069
 800e294:	005b004e 	.word	0x005b004e
 800e298:	00420037 	.word	0x00420037
 800e29c:	002d0024 	.word	0x002d0024
 800e2a0:	001c0015 	.word	0x001c0015
 800e2a4:	000f000a 	.word	0x000f000a
 800e2a8:	00060003 	.word	0x00060003
 800e2ac:	00880096 	.word	0x00880096
 800e2b0:	00a200ac 	.word	0x00a200ac
 800e2b4:	000a000f 	.word	0x000a000f
 800e2b8:	0015001c 	.word	0x0015001c
 800e2bc:	0024002d 	.word	0x0024002d
 800e2c0:	00370042 	.word	0x00370042
 800e2c4:	004e005b 	.word	0x004e005b
 800e2c8:	00690078 	.word	0x00690078
 800e2cc:	24000000 	.word	0x24000000
 800e2d0:	00b400ba 	.word	0x00b400ba
 800e2d4:	00be00c0 	.word	0x00be00c0
 800e2d8:	00c000be 	.word	0x00c000be
 800e2dc:	00ba00b4 	.word	0x00ba00b4
 800e2e0:	00ac00a2 	.word	0x00ac00a2
 800e2e4:	00960088 	.word	0x00960088
 800e2e8:	00030006 	.word	0x00030006

0800e2ec <PDM_Filter_Init>:
 800e2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ee:	2240      	movs	r2, #64	; 0x40
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	300c      	adds	r0, #12
 800e2f6:	f000 fa07 	bl	800e708 <memset>
 800e2fa:	4a56      	ldr	r2, [pc, #344]	; (800e454 <PDM_Filter_Init+0x168>)
 800e2fc:	4856      	ldr	r0, [pc, #344]	; (800e458 <PDM_Filter_Init+0x16c>)
 800e2fe:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800e302:	6813      	ldr	r3, [r2, #0]
 800e304:	f24c 2540 	movw	r5, #49728	; 0xc240
 800e308:	f023 0301 	bic.w	r3, r3, #1
 800e30c:	6013      	str	r3, [r2, #0]
 800e30e:	6803      	ldr	r3, [r0, #0]
 800e310:	400b      	ands	r3, r1
 800e312:	42ab      	cmp	r3, r5
 800e314:	d040      	beq.n	800e398 <PDM_Filter_Init+0xac>
 800e316:	6803      	ldr	r3, [r0, #0]
 800e318:	f24c 2270 	movw	r2, #49776	; 0xc270
 800e31c:	4019      	ands	r1, r3
 800e31e:	4291      	cmp	r1, r2
 800e320:	d03a      	beq.n	800e398 <PDM_Filter_Init+0xac>
 800e322:	4b4e      	ldr	r3, [pc, #312]	; (800e45c <PDM_Filter_Init+0x170>)
 800e324:	2101      	movs	r1, #1
 800e326:	461a      	mov	r2, r3
 800e328:	6019      	str	r1, [r3, #0]
 800e32a:	6813      	ldr	r3, [r2, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1fc      	bne.n	800e32a <PDM_Filter_Init+0x3e>
 800e330:	4b4b      	ldr	r3, [pc, #300]	; (800e460 <PDM_Filter_Init+0x174>)
 800e332:	494c      	ldr	r1, [pc, #304]	; (800e464 <PDM_Filter_Init+0x178>)
 800e334:	4a4c      	ldr	r2, [pc, #304]	; (800e468 <PDM_Filter_Init+0x17c>)
 800e336:	6019      	str	r1, [r3, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	8820      	ldrh	r0, [r4, #0]
 800e33c:	4293      	cmp	r3, r2
 800e33e:	8961      	ldrh	r1, [r4, #10]
 800e340:	f04f 0300 	mov.w	r3, #0
 800e344:	8922      	ldrh	r2, [r4, #8]
 800e346:	bf14      	ite	ne
 800e348:	2500      	movne	r5, #0
 800e34a:	4d47      	ldreq	r5, [pc, #284]	; (800e468 <PDM_Filter_Init+0x17c>)
 800e34c:	2801      	cmp	r0, #1
 800e34e:	61a3      	str	r3, [r4, #24]
 800e350:	6465      	str	r5, [r4, #68]	; 0x44
 800e352:	60e3      	str	r3, [r4, #12]
 800e354:	6263      	str	r3, [r4, #36]	; 0x24
 800e356:	6423      	str	r3, [r4, #64]	; 0x40
 800e358:	86a1      	strh	r1, [r4, #52]	; 0x34
 800e35a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800e35c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800e360:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e364:	d936      	bls.n	800e3d4 <PDM_Filter_Init+0xe8>
 800e366:	2003      	movs	r0, #3
 800e368:	2302      	movs	r3, #2
 800e36a:	8862      	ldrh	r2, [r4, #2]
 800e36c:	2a01      	cmp	r2, #1
 800e36e:	d92e      	bls.n	800e3ce <PDM_Filter_Init+0xe2>
 800e370:	2140      	movs	r1, #64	; 0x40
 800e372:	2300      	movs	r3, #0
 800e374:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e376:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e37a:	d101      	bne.n	800e380 <PDM_Filter_Init+0x94>
 800e37c:	460b      	mov	r3, r1
 800e37e:	6421      	str	r1, [r4, #64]	; 0x40
 800e380:	6862      	ldr	r2, [r4, #4]
 800e382:	b11a      	cbz	r2, 800e38c <PDM_Filter_Init+0xa0>
 800e384:	f043 0310 	orr.w	r3, r3, #16
 800e388:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e38a:	6423      	str	r3, [r4, #64]	; 0x40
 800e38c:	2200      	movs	r2, #0
 800e38e:	8722      	strh	r2, [r4, #56]	; 0x38
 800e390:	b908      	cbnz	r0, 800e396 <PDM_Filter_Init+0xaa>
 800e392:	3380      	adds	r3, #128	; 0x80
 800e394:	6423      	str	r3, [r4, #64]	; 0x40
 800e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e398:	4b34      	ldr	r3, [pc, #208]	; (800e46c <PDM_Filter_Init+0x180>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1c0      	bne.n	800e322 <PDM_Filter_Init+0x36>
 800e3a0:	4a33      	ldr	r2, [pc, #204]	; (800e470 <PDM_Filter_Init+0x184>)
 800e3a2:	6813      	ldr	r3, [r2, #0]
 800e3a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e3a8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e3ac:	d006      	beq.n	800e3bc <PDM_Filter_Init+0xd0>
 800e3ae:	6813      	ldr	r3, [r2, #0]
 800e3b0:	f240 4283 	movw	r2, #1155	; 0x483
 800e3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d1b2      	bne.n	800e322 <PDM_Filter_Init+0x36>
 800e3bc:	4b2d      	ldr	r3, [pc, #180]	; (800e474 <PDM_Filter_Init+0x188>)
 800e3be:	2101      	movs	r1, #1
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	6019      	str	r1, [r3, #0]
 800e3c4:	6813      	ldr	r3, [r2, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1fc      	bne.n	800e3c4 <PDM_Filter_Init+0xd8>
 800e3ca:	4b2b      	ldr	r3, [pc, #172]	; (800e478 <PDM_Filter_Init+0x18c>)
 800e3cc:	e7b1      	b.n	800e332 <PDM_Filter_Init+0x46>
 800e3ce:	d03a      	beq.n	800e446 <PDM_Filter_Init+0x15a>
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	e7cd      	b.n	800e370 <PDM_Filter_Init+0x84>
 800e3d4:	4d29      	ldr	r5, [pc, #164]	; (800e47c <PDM_Filter_Init+0x190>)
 800e3d6:	782a      	ldrb	r2, [r5, #0]
 800e3d8:	d01b      	beq.n	800e412 <PDM_Filter_Init+0x126>
 800e3da:	2a01      	cmp	r2, #1
 800e3dc:	d001      	beq.n	800e3e2 <PDM_Filter_Init+0xf6>
 800e3de:	2001      	movs	r0, #1
 800e3e0:	e7c3      	b.n	800e36a <PDM_Filter_Init+0x7e>
 800e3e2:	4927      	ldr	r1, [pc, #156]	; (800e480 <PDM_Filter_Init+0x194>)
 800e3e4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800e488 <PDM_Filter_Init+0x19c>
 800e3e8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800e3ec:	4e25      	ldr	r6, [pc, #148]	; (800e484 <PDM_Filter_Init+0x198>)
 800e3ee:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e3f2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800e3f6:	ea02 0006 	and.w	r0, r2, r6
 800e3fa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e3fe:	428f      	cmp	r7, r1
 800e400:	ea43 0300 	orr.w	r3, r3, r0
 800e404:	4413      	add	r3, r2
 800e406:	600b      	str	r3, [r1, #0]
 800e408:	d1f1      	bne.n	800e3ee <PDM_Filter_Init+0x102>
 800e40a:	2300      	movs	r3, #0
 800e40c:	2001      	movs	r0, #1
 800e40e:	702b      	strb	r3, [r5, #0]
 800e410:	e7ab      	b.n	800e36a <PDM_Filter_Init+0x7e>
 800e412:	2a00      	cmp	r2, #0
 800e414:	d1a9      	bne.n	800e36a <PDM_Filter_Init+0x7e>
 800e416:	491a      	ldr	r1, [pc, #104]	; (800e480 <PDM_Filter_Init+0x194>)
 800e418:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800e488 <PDM_Filter_Init+0x19c>
 800e41c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800e420:	4e18      	ldr	r6, [pc, #96]	; (800e484 <PDM_Filter_Init+0x198>)
 800e422:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e426:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800e42a:	ea02 0006 	and.w	r0, r2, r6
 800e42e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e432:	428f      	cmp	r7, r1
 800e434:	ea43 0300 	orr.w	r3, r3, r0
 800e438:	4413      	add	r3, r2
 800e43a:	600b      	str	r3, [r1, #0]
 800e43c:	d1f1      	bne.n	800e422 <PDM_Filter_Init+0x136>
 800e43e:	2001      	movs	r0, #1
 800e440:	2300      	movs	r3, #0
 800e442:	7028      	strb	r0, [r5, #0]
 800e444:	e791      	b.n	800e36a <PDM_Filter_Init+0x7e>
 800e446:	2220      	movs	r2, #32
 800e448:	4618      	mov	r0, r3
 800e44a:	2160      	movs	r1, #96	; 0x60
 800e44c:	6422      	str	r2, [r4, #64]	; 0x40
 800e44e:	4613      	mov	r3, r2
 800e450:	e790      	b.n	800e374 <PDM_Filter_Init+0x88>
 800e452:	bf00      	nop
 800e454:	e0002000 	.word	0xe0002000
 800e458:	e000ed00 	.word	0xe000ed00
 800e45c:	40023008 	.word	0x40023008
 800e460:	40023000 	.word	0x40023000
 800e464:	f407a5c2 	.word	0xf407a5c2
 800e468:	b5e8b5cd 	.word	0xb5e8b5cd
 800e46c:	e0042000 	.word	0xe0042000
 800e470:	5c001000 	.word	0x5c001000
 800e474:	58024c08 	.word	0x58024c08
 800e478:	58024c00 	.word	0x58024c00
 800e47c:	240004fc 	.word	0x240004fc
 800e480:	23fffffc 	.word	0x23fffffc
 800e484:	000ffc00 	.word	0x000ffc00
 800e488:	3ff00000 	.word	0x3ff00000

0800e48c <PDM_Filter_setConfig>:
 800e48c:	4b67      	ldr	r3, [pc, #412]	; (800e62c <PDM_Filter_setConfig+0x1a0>)
 800e48e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e490:	429a      	cmp	r2, r3
 800e492:	d128      	bne.n	800e4e6 <PDM_Filter_setConfig+0x5a>
 800e494:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e496:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e498:	880e      	ldrh	r6, [r1, #0]
 800e49a:	460d      	mov	r5, r1
 800e49c:	4604      	mov	r4, r0
 800e49e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800e4a2:	1e73      	subs	r3, r6, #1
 800e4a4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800e4a8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800e4ac:	2b06      	cmp	r3, #6
 800e4ae:	ed2d 8b02 	vpush	{d8}
 800e4b2:	6421      	str	r1, [r4, #64]	; 0x40
 800e4b4:	b083      	sub	sp, #12
 800e4b6:	d820      	bhi.n	800e4fa <PDM_Filter_setConfig+0x6e>
 800e4b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e4ba:	42b3      	cmp	r3, r6
 800e4bc:	d03d      	beq.n	800e53a <PDM_Filter_setConfig+0xae>
 800e4be:	4b5c      	ldr	r3, [pc, #368]	; (800e630 <PDM_Filter_setConfig+0x1a4>)
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	4333      	orrs	r3, r6
 800e4c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e4c8:	6423      	str	r3, [r4, #64]	; 0x40
 800e4ca:	f003 030f 	and.w	r3, r3, #15
 800e4ce:	2a70      	cmp	r2, #112	; 0x70
 800e4d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e4d4:	d009      	beq.n	800e4ea <PDM_Filter_setConfig+0x5e>
 800e4d6:	2b06      	cmp	r3, #6
 800e4d8:	d824      	bhi.n	800e524 <PDM_Filter_setConfig+0x98>
 800e4da:	e8df f003 	tbb	[pc, r3]
 800e4de:	878a      	.short	0x878a
 800e4e0:	7b7e8184 	.word	0x7b7e8184
 800e4e4:	78          	.byte	0x78
 800e4e5:	00          	.byte	0x00
 800e4e6:	2004      	movs	r0, #4
 800e4e8:	4770      	bx	lr
 800e4ea:	2b06      	cmp	r3, #6
 800e4ec:	d81a      	bhi.n	800e524 <PDM_Filter_setConfig+0x98>
 800e4ee:	e8df f003 	tbb	[pc, r3]
 800e4f2:	8f92      	.short	0x8f92
 800e4f4:	8617898c 	.word	0x8617898c
 800e4f8:	83          	.byte	0x83
 800e4f9:	00          	.byte	0x00
 800e4fa:	4287      	cmp	r7, r0
 800e4fc:	f000 808e 	beq.w	800e61c <PDM_Filter_setConfig+0x190>
 800e500:	f117 0f0c 	cmn.w	r7, #12
 800e504:	f04f 0008 	mov.w	r0, #8
 800e508:	da11      	bge.n	800e52e <PDM_Filter_setConfig+0xa2>
 800e50a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e50e:	3040      	adds	r0, #64	; 0x40
 800e510:	80ab      	strh	r3, [r5, #4]
 800e512:	886b      	ldrh	r3, [r5, #2]
 800e514:	8626      	strh	r6, [r4, #48]	; 0x30
 800e516:	8663      	strh	r3, [r4, #50]	; 0x32
 800e518:	b003      	add	sp, #12
 800e51a:	ecbd 8b02 	vpop	{d8}
 800e51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e520:	4b44      	ldr	r3, [pc, #272]	; (800e634 <PDM_Filter_setConfig+0x1a8>)
 800e522:	64a3      	str	r3, [r4, #72]	; 0x48
 800e524:	f117 0f0c 	cmn.w	r7, #12
 800e528:	f04f 0000 	mov.w	r0, #0
 800e52c:	dbed      	blt.n	800e50a <PDM_Filter_setConfig+0x7e>
 800e52e:	2f33      	cmp	r7, #51	; 0x33
 800e530:	dd10      	ble.n	800e554 <PDM_Filter_setConfig+0xc8>
 800e532:	2333      	movs	r3, #51	; 0x33
 800e534:	3040      	adds	r0, #64	; 0x40
 800e536:	80ab      	strh	r3, [r5, #4]
 800e538:	e7eb      	b.n	800e512 <PDM_Filter_setConfig+0x86>
 800e53a:	4287      	cmp	r7, r0
 800e53c:	d1f2      	bne.n	800e524 <PDM_Filter_setConfig+0x98>
 800e53e:	886b      	ldrh	r3, [r5, #2]
 800e540:	8663      	strh	r3, [r4, #50]	; 0x32
 800e542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e544:	2000      	movs	r0, #0
 800e546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e54a:	6423      	str	r3, [r4, #64]	; 0x40
 800e54c:	b003      	add	sp, #12
 800e54e:	ecbd 8b02 	vpop	{d8}
 800e552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e556:	f003 030f 	and.w	r3, r3, #15
 800e55a:	3b01      	subs	r3, #1
 800e55c:	2b06      	cmp	r3, #6
 800e55e:	d831      	bhi.n	800e5c4 <PDM_Filter_setConfig+0x138>
 800e560:	4a35      	ldr	r2, [pc, #212]	; (800e638 <PDM_Filter_setConfig+0x1ac>)
 800e562:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e566:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e63c <PDM_Filter_setConfig+0x1b0>
 800e56a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e56e:	9001      	str	r0, [sp, #4]
 800e570:	edd3 7a07 	vldr	s15, [r3, #28]
 800e574:	ed93 8a00 	vldr	s16, [r3]
 800e578:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e57c:	f000 f8e4 	bl	800e748 <powf>
 800e580:	eef0 8a40 	vmov.f32	s17, s0
 800e584:	9801      	ldr	r0, [sp, #4]
 800e586:	ee07 7a90 	vmov	s15, r7
 800e58a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e58e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e592:	9001      	str	r0, [sp, #4]
 800e594:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800e598:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e640 <PDM_Filter_setConfig+0x1b4>
 800e59c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e5a0:	f000 f8d2 	bl	800e748 <powf>
 800e5a4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800e5a8:	886b      	ldrh	r3, [r5, #2]
 800e5aa:	9801      	ldr	r0, [sp, #4]
 800e5ac:	feb8 8a48 	vrinta.f32	s16, s16
 800e5b0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800e5b4:	8727      	strh	r7, [r4, #56]	; 0x38
 800e5b6:	8663      	strh	r3, [r4, #50]	; 0x32
 800e5b8:	8626      	strh	r6, [r4, #48]	; 0x30
 800e5ba:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d0bf      	beq.n	800e542 <PDM_Filter_setConfig+0xb6>
 800e5c2:	e7a9      	b.n	800e518 <PDM_Filter_setConfig+0x8c>
 800e5c4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800e644 <PDM_Filter_setConfig+0x1b8>
 800e5c8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800e648 <PDM_Filter_setConfig+0x1bc>
 800e5cc:	e7db      	b.n	800e586 <PDM_Filter_setConfig+0xfa>
 800e5ce:	4b1f      	ldr	r3, [pc, #124]	; (800e64c <PDM_Filter_setConfig+0x1c0>)
 800e5d0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5d2:	e7a7      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5d4:	4b1e      	ldr	r3, [pc, #120]	; (800e650 <PDM_Filter_setConfig+0x1c4>)
 800e5d6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5d8:	e7a4      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5da:	4b1e      	ldr	r3, [pc, #120]	; (800e654 <PDM_Filter_setConfig+0x1c8>)
 800e5dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5de:	e7a1      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5e0:	4b1d      	ldr	r3, [pc, #116]	; (800e658 <PDM_Filter_setConfig+0x1cc>)
 800e5e2:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5e4:	e79e      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5e6:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <PDM_Filter_setConfig+0x1d0>)
 800e5e8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5ea:	e79b      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5ec:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <PDM_Filter_setConfig+0x1d4>)
 800e5ee:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5f0:	e798      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5f2:	4b1c      	ldr	r3, [pc, #112]	; (800e664 <PDM_Filter_setConfig+0x1d8>)
 800e5f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5f6:	e795      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5f8:	4b1b      	ldr	r3, [pc, #108]	; (800e668 <PDM_Filter_setConfig+0x1dc>)
 800e5fa:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5fc:	e792      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e5fe:	4b1b      	ldr	r3, [pc, #108]	; (800e66c <PDM_Filter_setConfig+0x1e0>)
 800e600:	64a3      	str	r3, [r4, #72]	; 0x48
 800e602:	e78f      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e604:	4b1a      	ldr	r3, [pc, #104]	; (800e670 <PDM_Filter_setConfig+0x1e4>)
 800e606:	64a3      	str	r3, [r4, #72]	; 0x48
 800e608:	e78c      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e60a:	4b1a      	ldr	r3, [pc, #104]	; (800e674 <PDM_Filter_setConfig+0x1e8>)
 800e60c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e60e:	e789      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e610:	4b19      	ldr	r3, [pc, #100]	; (800e678 <PDM_Filter_setConfig+0x1ec>)
 800e612:	64a3      	str	r3, [r4, #72]	; 0x48
 800e614:	e786      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e616:	4b19      	ldr	r3, [pc, #100]	; (800e67c <PDM_Filter_setConfig+0x1f0>)
 800e618:	64a3      	str	r3, [r4, #72]	; 0x48
 800e61a:	e783      	b.n	800e524 <PDM_Filter_setConfig+0x98>
 800e61c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e61e:	42b3      	cmp	r3, r6
 800e620:	f47f af6e 	bne.w	800e500 <PDM_Filter_setConfig+0x74>
 800e624:	886b      	ldrh	r3, [r5, #2]
 800e626:	2008      	movs	r0, #8
 800e628:	8663      	strh	r3, [r4, #50]	; 0x32
 800e62a:	e775      	b.n	800e518 <PDM_Filter_setConfig+0x8c>
 800e62c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e630:	fffffef0 	.word	0xfffffef0
 800e634:	0800d7a5 	.word	0x0800d7a5
 800e638:	0800eab8 	.word	0x0800eab8
 800e63c:	42000000 	.word	0x42000000
 800e640:	3d4ccccd 	.word	0x3d4ccccd
 800e644:	4f800000 	.word	0x4f800000
 800e648:	00000000 	.word	0x00000000
 800e64c:	0800cbb1 	.word	0x0800cbb1
 800e650:	0800ca39 	.word	0x0800ca39
 800e654:	0800c929 	.word	0x0800c929
 800e658:	0800d3ed 	.word	0x0800d3ed
 800e65c:	0800d155 	.word	0x0800d155
 800e660:	0800cf1d 	.word	0x0800cf1d
 800e664:	0800cd39 	.word	0x0800cd39
 800e668:	0800d9c1 	.word	0x0800d9c1
 800e66c:	0800d885 	.word	0x0800d885
 800e670:	0800e001 	.word	0x0800e001
 800e674:	0800de05 	.word	0x0800de05
 800e678:	0800dc59 	.word	0x0800dc59
 800e67c:	0800daed 	.word	0x0800daed

0800e680 <PDM_Filter>:
 800e680:	b410      	push	{r4}
 800e682:	4b0b      	ldr	r3, [pc, #44]	; (800e6b0 <PDM_Filter+0x30>)
 800e684:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800e686:	429c      	cmp	r4, r3
 800e688:	d107      	bne.n	800e69a <PDM_Filter+0x1a>
 800e68a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e68c:	05dc      	lsls	r4, r3, #23
 800e68e:	d508      	bpl.n	800e6a2 <PDM_Filter+0x22>
 800e690:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e692:	320c      	adds	r2, #12
 800e694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e698:	4718      	bx	r3
 800e69a:	2004      	movs	r0, #4
 800e69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e6a6:	bf14      	ite	ne
 800e6a8:	2020      	movne	r0, #32
 800e6aa:	2030      	moveq	r0, #48	; 0x30
 800e6ac:	e7f6      	b.n	800e69c <PDM_Filter+0x1c>
 800e6ae:	bf00      	nop
 800e6b0:	b5e8b5cd 	.word	0xb5e8b5cd

0800e6b4 <__errno>:
 800e6b4:	4b01      	ldr	r3, [pc, #4]	; (800e6bc <__errno+0x8>)
 800e6b6:	6818      	ldr	r0, [r3, #0]
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop
 800e6bc:	24000470 	.word	0x24000470

0800e6c0 <__libc_init_array>:
 800e6c0:	b570      	push	{r4, r5, r6, lr}
 800e6c2:	4d0d      	ldr	r5, [pc, #52]	; (800e6f8 <__libc_init_array+0x38>)
 800e6c4:	4c0d      	ldr	r4, [pc, #52]	; (800e6fc <__libc_init_array+0x3c>)
 800e6c6:	1b64      	subs	r4, r4, r5
 800e6c8:	10a4      	asrs	r4, r4, #2
 800e6ca:	2600      	movs	r6, #0
 800e6cc:	42a6      	cmp	r6, r4
 800e6ce:	d109      	bne.n	800e6e4 <__libc_init_array+0x24>
 800e6d0:	4d0b      	ldr	r5, [pc, #44]	; (800e700 <__libc_init_array+0x40>)
 800e6d2:	4c0c      	ldr	r4, [pc, #48]	; (800e704 <__libc_init_array+0x44>)
 800e6d4:	f000 f9e4 	bl	800eaa0 <_init>
 800e6d8:	1b64      	subs	r4, r4, r5
 800e6da:	10a4      	asrs	r4, r4, #2
 800e6dc:	2600      	movs	r6, #0
 800e6de:	42a6      	cmp	r6, r4
 800e6e0:	d105      	bne.n	800e6ee <__libc_init_array+0x2e>
 800e6e2:	bd70      	pop	{r4, r5, r6, pc}
 800e6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6e8:	4798      	blx	r3
 800e6ea:	3601      	adds	r6, #1
 800e6ec:	e7ee      	b.n	800e6cc <__libc_init_array+0xc>
 800e6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6f2:	4798      	blx	r3
 800e6f4:	3601      	adds	r6, #1
 800e6f6:	e7f2      	b.n	800e6de <__libc_init_array+0x1e>
 800e6f8:	0800ee08 	.word	0x0800ee08
 800e6fc:	0800ee08 	.word	0x0800ee08
 800e700:	0800ee08 	.word	0x0800ee08
 800e704:	0800ee0c 	.word	0x0800ee0c

0800e708 <memset>:
 800e708:	4402      	add	r2, r0
 800e70a:	4603      	mov	r3, r0
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d100      	bne.n	800e712 <memset+0xa>
 800e710:	4770      	bx	lr
 800e712:	f803 1b01 	strb.w	r1, [r3], #1
 800e716:	e7f9      	b.n	800e70c <memset+0x4>

0800e718 <checkint>:
 800e718:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e71c:	2b7e      	cmp	r3, #126	; 0x7e
 800e71e:	dd10      	ble.n	800e742 <checkint+0x2a>
 800e720:	2b96      	cmp	r3, #150	; 0x96
 800e722:	dc0c      	bgt.n	800e73e <checkint+0x26>
 800e724:	2201      	movs	r2, #1
 800e726:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e72a:	fa02 f303 	lsl.w	r3, r2, r3
 800e72e:	1e5a      	subs	r2, r3, #1
 800e730:	4202      	tst	r2, r0
 800e732:	d106      	bne.n	800e742 <checkint+0x2a>
 800e734:	4203      	tst	r3, r0
 800e736:	bf0c      	ite	eq
 800e738:	2002      	moveq	r0, #2
 800e73a:	2001      	movne	r0, #1
 800e73c:	4770      	bx	lr
 800e73e:	2002      	movs	r0, #2
 800e740:	4770      	bx	lr
 800e742:	2000      	movs	r0, #0
 800e744:	4770      	bx	lr
	...

0800e748 <powf>:
 800e748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74a:	ee10 1a10 	vmov	r1, s0
 800e74e:	ee10 6a90 	vmov	r6, s1
 800e752:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800e756:	0072      	lsls	r2, r6, #1
 800e758:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e75c:	b085      	sub	sp, #20
 800e75e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800e762:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800e766:	d256      	bcs.n	800e816 <powf+0xce>
 800e768:	4298      	cmp	r0, r3
 800e76a:	d256      	bcs.n	800e81a <powf+0xd2>
 800e76c:	2000      	movs	r0, #0
 800e76e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800e772:	4ea3      	ldr	r6, [pc, #652]	; (800ea00 <powf+0x2b8>)
 800e774:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e778:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800e77c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800e780:	0dd2      	lsrs	r2, r2, #23
 800e782:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800e786:	05d2      	lsls	r2, r2, #23
 800e788:	1a8b      	subs	r3, r1, r2
 800e78a:	ed97 5b00 	vldr	d5, [r7]
 800e78e:	ee07 3a90 	vmov	s15, r3
 800e792:	15d2      	asrs	r2, r2, #23
 800e794:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e798:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e79c:	ed97 5b02 	vldr	d5, [r7, #8]
 800e7a0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800e7a4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800e7a8:	ee07 2a90 	vmov	s15, r2
 800e7ac:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800e7b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e7b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e7b8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800e7bc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800e7c0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e7c4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800e7c8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e7cc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800e7d0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800e7d4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e7d8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e7dc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800e7e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e7e4:	ee10 1a90 	vmov	r1, s1
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	2700      	movs	r7, #0
 800e7ec:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800e7f0:	f248 06be 	movw	r6, #32958	; 0x80be
 800e7f4:	429f      	cmp	r7, r3
 800e7f6:	bf08      	it	eq
 800e7f8:	4296      	cmpeq	r6, r2
 800e7fa:	f080 80b1 	bcs.w	800e960 <powf+0x218>
 800e7fe:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800e9e0 <powf+0x298>
 800e802:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	dd79      	ble.n	800e900 <powf+0x1b8>
 800e80c:	b005      	add	sp, #20
 800e80e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e812:	f000 b91f 	b.w	800ea54 <__math_oflowf>
 800e816:	4298      	cmp	r0, r3
 800e818:	d32d      	bcc.n	800e876 <powf+0x12e>
 800e81a:	b952      	cbnz	r2, 800e832 <powf+0xea>
 800e81c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800e826:	f240 80cd 	bls.w	800e9c4 <powf+0x27c>
 800e82a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800e82e:	b005      	add	sp, #20
 800e830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e832:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800e836:	d105      	bne.n	800e844 <powf+0xfc>
 800e838:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800e83c:	0076      	lsls	r6, r6, #1
 800e83e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800e842:	e7f0      	b.n	800e826 <powf+0xde>
 800e844:	004b      	lsls	r3, r1, #1
 800e846:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e84a:	d8ee      	bhi.n	800e82a <powf+0xe2>
 800e84c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e850:	d1eb      	bne.n	800e82a <powf+0xe2>
 800e852:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e856:	f000 80b5 	beq.w	800e9c4 <powf+0x27c>
 800e85a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e85e:	ea6f 0606 	mvn.w	r6, r6
 800e862:	bf34      	ite	cc
 800e864:	2300      	movcc	r3, #0
 800e866:	2301      	movcs	r3, #1
 800e868:	0ff6      	lsrs	r6, r6, #31
 800e86a:	42b3      	cmp	r3, r6
 800e86c:	f040 80ad 	bne.w	800e9ca <powf+0x282>
 800e870:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800e874:	e7db      	b.n	800e82e <powf+0xe6>
 800e876:	004f      	lsls	r7, r1, #1
 800e878:	1e7a      	subs	r2, r7, #1
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d31c      	bcc.n	800e8b8 <powf+0x170>
 800e87e:	2900      	cmp	r1, #0
 800e880:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e884:	da0f      	bge.n	800e8a6 <powf+0x15e>
 800e886:	ee10 0a90 	vmov	r0, s1
 800e88a:	f7ff ff45 	bl	800e718 <checkint>
 800e88e:	2801      	cmp	r0, #1
 800e890:	d109      	bne.n	800e8a6 <powf+0x15e>
 800e892:	eeb1 0a40 	vneg.f32	s0, s0
 800e896:	b947      	cbnz	r7, 800e8aa <powf+0x162>
 800e898:	2e00      	cmp	r6, #0
 800e89a:	dac8      	bge.n	800e82e <powf+0xe6>
 800e89c:	b005      	add	sp, #20
 800e89e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8a2:	f000 b8dd 	b.w	800ea60 <__math_divzerof>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	e7f5      	b.n	800e896 <powf+0x14e>
 800e8aa:	2e00      	cmp	r6, #0
 800e8ac:	dabf      	bge.n	800e82e <powf+0xe6>
 800e8ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e8b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e8b6:	e7ba      	b.n	800e82e <powf+0xe6>
 800e8b8:	2900      	cmp	r1, #0
 800e8ba:	da1f      	bge.n	800e8fc <powf+0x1b4>
 800e8bc:	ee10 0a90 	vmov	r0, s1
 800e8c0:	f7ff ff2a 	bl	800e718 <checkint>
 800e8c4:	b920      	cbnz	r0, 800e8d0 <powf+0x188>
 800e8c6:	b005      	add	sp, #20
 800e8c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8cc:	f000 b8d8 	b.w	800ea80 <__math_invalidf>
 800e8d0:	2801      	cmp	r0, #1
 800e8d2:	bf14      	ite	ne
 800e8d4:	2000      	movne	r0, #0
 800e8d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800e8da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800e8e2:	f4bf af44 	bcs.w	800e76e <powf+0x26>
 800e8e6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ea04 <powf+0x2bc>
 800e8ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8ee:	ee10 3a10 	vmov	r3, s0
 800e8f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8f6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800e8fa:	e738      	b.n	800e76e <powf+0x26>
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e7ee      	b.n	800e8de <powf+0x196>
 800e900:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800e9e8 <powf+0x2a0>
 800e904:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90c:	dd10      	ble.n	800e930 <powf+0x1e8>
 800e90e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800e912:	2800      	cmp	r0, #0
 800e914:	d15c      	bne.n	800e9d0 <powf+0x288>
 800e916:	9302      	str	r3, [sp, #8]
 800e918:	eddd 7a02 	vldr	s15, [sp, #8]
 800e91c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e920:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e924:	eef4 7a47 	vcmp.f32	s15, s14
 800e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92c:	f47f af6e 	bne.w	800e80c <powf+0xc4>
 800e930:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e9f0 <powf+0x2a8>
 800e934:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93c:	d804      	bhi.n	800e948 <powf+0x200>
 800e93e:	b005      	add	sp, #20
 800e940:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e944:	f000 b87a 	b.w	800ea3c <__math_uflowf>
 800e948:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e9f8 <powf+0x2b0>
 800e94c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e954:	d504      	bpl.n	800e960 <powf+0x218>
 800e956:	b005      	add	sp, #20
 800e958:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e95c:	f000 b874 	b.w	800ea48 <__math_may_uflowf>
 800e960:	4b29      	ldr	r3, [pc, #164]	; (800ea08 <powf+0x2c0>)
 800e962:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800e966:	ee30 6b07 	vadd.f64	d6, d0, d7
 800e96a:	ed8d 6b00 	vstr	d6, [sp]
 800e96e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e972:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e976:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e97a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e97e:	f006 011f 	and.w	r1, r6, #31
 800e982:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e986:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800e98a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800e98e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800e992:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800e996:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e99a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800e99e:	1836      	adds	r6, r6, r0
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	eb13 040c 	adds.w	r4, r3, ip
 800e9a6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800e9aa:	eb41 050e 	adc.w	r5, r1, lr
 800e9ae:	eea7 0b04 	vfma.f64	d0, d7, d4
 800e9b2:	ec45 4b17 	vmov	d7, r4, r5
 800e9b6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800e9ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e9be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e9c2:	e734      	b.n	800e82e <powf+0xe6>
 800e9c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e9c8:	e731      	b.n	800e82e <powf+0xe6>
 800e9ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ea0c <powf+0x2c4>
 800e9ce:	e72e      	b.n	800e82e <powf+0xe6>
 800e9d0:	9303      	str	r3, [sp, #12]
 800e9d2:	eddd 7a03 	vldr	s15, [sp, #12]
 800e9d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e9da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9de:	e7a1      	b.n	800e924 <powf+0x1dc>
 800e9e0:	ffd1d571 	.word	0xffd1d571
 800e9e4:	405fffff 	.word	0x405fffff
 800e9e8:	ffa3aae2 	.word	0xffa3aae2
 800e9ec:	405fffff 	.word	0x405fffff
 800e9f0:	00000000 	.word	0x00000000
 800e9f4:	c062c000 	.word	0xc062c000
 800e9f8:	00000000 	.word	0x00000000
 800e9fc:	c062a000 	.word	0xc062a000
 800ea00:	0800eb98 	.word	0x0800eb98
 800ea04:	4b000000 	.word	0x4b000000
 800ea08:	0800ecc0 	.word	0x0800ecc0
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <with_errnof>:
 800ea10:	b513      	push	{r0, r1, r4, lr}
 800ea12:	4604      	mov	r4, r0
 800ea14:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ea18:	f7ff fe4c 	bl	800e6b4 <__errno>
 800ea1c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ea20:	6004      	str	r4, [r0, #0]
 800ea22:	b002      	add	sp, #8
 800ea24:	bd10      	pop	{r4, pc}

0800ea26 <xflowf>:
 800ea26:	b130      	cbz	r0, 800ea36 <xflowf+0x10>
 800ea28:	eef1 7a40 	vneg.f32	s15, s0
 800ea2c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea30:	2022      	movs	r0, #34	; 0x22
 800ea32:	f7ff bfed 	b.w	800ea10 <with_errnof>
 800ea36:	eef0 7a40 	vmov.f32	s15, s0
 800ea3a:	e7f7      	b.n	800ea2c <xflowf+0x6>

0800ea3c <__math_uflowf>:
 800ea3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea44 <__math_uflowf+0x8>
 800ea40:	f7ff bff1 	b.w	800ea26 <xflowf>
 800ea44:	10000000 	.word	0x10000000

0800ea48 <__math_may_uflowf>:
 800ea48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea50 <__math_may_uflowf+0x8>
 800ea4c:	f7ff bfeb 	b.w	800ea26 <xflowf>
 800ea50:	1a200000 	.word	0x1a200000

0800ea54 <__math_oflowf>:
 800ea54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea5c <__math_oflowf+0x8>
 800ea58:	f7ff bfe5 	b.w	800ea26 <xflowf>
 800ea5c:	70000000 	.word	0x70000000

0800ea60 <__math_divzerof>:
 800ea60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ea64:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800ea6e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ea7c <__math_divzerof+0x1c>
 800ea72:	2022      	movs	r0, #34	; 0x22
 800ea74:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ea78:	f7ff bfca 	b.w	800ea10 <with_errnof>
 800ea7c:	00000000 	.word	0x00000000

0800ea80 <__math_invalidf>:
 800ea80:	eef0 7a40 	vmov.f32	s15, s0
 800ea84:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ea88:	eef4 7a67 	vcmp.f32	s15, s15
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ea94:	d602      	bvs.n	800ea9c <__math_invalidf+0x1c>
 800ea96:	2021      	movs	r0, #33	; 0x21
 800ea98:	f7ff bfba 	b.w	800ea10 <with_errnof>
 800ea9c:	4770      	bx	lr
	...

0800eaa0 <_init>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	bf00      	nop
 800eaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa6:	bc08      	pop	{r3}
 800eaa8:	469e      	mov	lr, r3
 800eaaa:	4770      	bx	lr

0800eaac <_fini>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	bf00      	nop
 800eab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab2:	bc08      	pop	{r3}
 800eab4:	469e      	mov	lr, r3
 800eab6:	4770      	bx	lr
