
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f58  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a228  0800a228  0001a228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  24000000  0800a520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000318  24000474  0800a994  00020474  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400078c  0800a994  0002078c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021e02  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036bf  00000000  00000000  000422a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ff0  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f00  00000000  00000000  00046958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033937  00000000  00000000  00047858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001799a  00000000  00000000  0007b18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a963  00000000  00000000  00092b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001dd48c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004378  00000000  00000000  001dd560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a210 	.word	0x0800a210

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	0800a210 	.word	0x0800a210

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060e:	2003      	movs	r0, #3
 8000610:	f000 f95c 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000614:	f003 f8d4 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8000618:	4602      	mov	r2, r0
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_Init+0x68>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	f003 030f 	and.w	r3, r3, #15
 8000624:	4913      	ldr	r1, [pc, #76]	; (8000674 <HAL_Init+0x6c>)
 8000626:	5ccb      	ldrb	r3, [r1, r3]
 8000628:	f003 031f 	and.w	r3, r3, #31
 800062c:	fa22 f303 	lsr.w	r3, r2, r3
 8000630:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_Init+0x68>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_Init+0x6c>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	f003 031f 	and.w	r3, r3, #31
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	fa22 f303 	lsr.w	r3, r2, r3
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <HAL_Init+0x70>)
 800064a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_Init+0x74>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f814 	bl	8000680 <HAL_InitTick>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e002      	b.n	8000668 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000662:	f007 fa97 	bl	8007b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58024400 	.word	0x58024400
 8000674:	0800a290 	.word	0x0800a290
 8000678:	2400040c 	.word	0x2400040c
 800067c:	24000408 	.word	0x24000408

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_InitTick+0x60>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e021      	b.n	80006d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_InitTick+0x64>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_InitTick+0x60>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f941 	bl	8000932 <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c8:	f000 f90b 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x68>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	24000404 	.word	0x24000404
 80006e4:	24000408 	.word	0x24000408
 80006e8:	24000400 	.word	0x24000400

080006ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_IncTick+0x20>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_IncTick+0x24>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	24000404 	.word	0x24000404
 8000710:	240004c0 	.word	0x240004c0

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	240004c0 	.word	0x240004c0

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <__NVIC_SetPriorityGrouping+0x40>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000756:	4313      	orrs	r3, r2
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x40>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	05fa0000 	.word	0x05fa0000

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <__NVIC_EnableIRQ+0x38>)
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f1c3 0307 	rsb	r3, r3, #7
 800083a:	2b04      	cmp	r3, #4
 800083c:	bf28      	it	cs
 800083e:	2304      	movcs	r3, #4
 8000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	2b06      	cmp	r3, #6
 8000848:	d902      	bls.n	8000850 <NVIC_EncodePriority+0x30>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3b03      	subs	r3, #3
 800084e:	e000      	b.n	8000852 <NVIC_EncodePriority+0x32>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43da      	mvns	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43d9      	mvns	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	4313      	orrs	r3, r2
         );
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ac:	f7ff ff8e 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff29 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff40 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ff90 	bl	8000820 <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff5f 	bl	80007cc <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff33 	bl	8000790 <__NVIC_EnableIRQ>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffa4 	bl	8000888 <SysTick_Config>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e054      	b.n	8000a08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7f5b      	ldrb	r3, [r3, #29]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d105      	bne.n	8000974 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f007 f92a 	bl	8007bc8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2202      	movs	r2, #2
 8000978:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10c      	bne.n	800099c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_CRC_Init+0xc4>)
 8000988:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 0218 	bic.w	r2, r2, #24
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	e00c      	b.n	80009b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6899      	ldr	r1, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	461a      	mov	r2, r3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 f834 	bl	8000a14 <HAL_CRCEx_Polynomial_Set>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e028      	b.n	8000a08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	795b      	ldrb	r3, [r3, #5]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d105      	bne.n	80009ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	e004      	b.n	80009d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	6912      	ldr	r2, [r2, #16]
 80009d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	430a      	orrs	r2, r1
 80009e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	699a      	ldr	r2, [r3, #24]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	04c11db7 	.word	0x04c11db7

08000a14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a24:	231f      	movs	r3, #31
 8000a26:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000a28:	bf00      	nop
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	613a      	str	r2, [r7, #16]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d009      	beq.n	8000a48 <HAL_CRCEx_Polynomial_Set+0x34>
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	f003 031f 	and.w	r3, r3, #31
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f0      	beq.n	8000a2a <HAL_CRCEx_Polynomial_Set+0x16>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b18      	cmp	r3, #24
 8000a4c:	d846      	bhi.n	8000adc <HAL_CRCEx_Polynomial_Set+0xc8>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000ae3 	.word	0x08000ae3
 8000a58:	08000add 	.word	0x08000add
 8000a5c:	08000add 	.word	0x08000add
 8000a60:	08000add 	.word	0x08000add
 8000a64:	08000add 	.word	0x08000add
 8000a68:	08000add 	.word	0x08000add
 8000a6c:	08000add 	.word	0x08000add
 8000a70:	08000add 	.word	0x08000add
 8000a74:	08000ad1 	.word	0x08000ad1
 8000a78:	08000add 	.word	0x08000add
 8000a7c:	08000add 	.word	0x08000add
 8000a80:	08000add 	.word	0x08000add
 8000a84:	08000add 	.word	0x08000add
 8000a88:	08000add 	.word	0x08000add
 8000a8c:	08000add 	.word	0x08000add
 8000a90:	08000add 	.word	0x08000add
 8000a94:	08000ac5 	.word	0x08000ac5
 8000a98:	08000add 	.word	0x08000add
 8000a9c:	08000add 	.word	0x08000add
 8000aa0:	08000add 	.word	0x08000add
 8000aa4:	08000add 	.word	0x08000add
 8000aa8:	08000add 	.word	0x08000add
 8000aac:	08000add 	.word	0x08000add
 8000ab0:	08000add 	.word	0x08000add
 8000ab4:	08000ab9 	.word	0x08000ab9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d913      	bls.n	8000ae6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ac2:	e010      	b.n	8000ae6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b07      	cmp	r3, #7
 8000ac8:	d90f      	bls.n	8000aea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ace:	e00c      	b.n	8000aea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d90b      	bls.n	8000aee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ada:	e008      	b.n	8000aee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
      break;
 8000ae0:	e006      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ae2:	bf00      	nop
 8000ae4:	e004      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ae6:	bf00      	nop
 8000ae8:	e002      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000aee:	bf00      	nop
  }
  if (status == HAL_OK)
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10d      	bne.n	8000b12 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 0118 	bic.w	r1, r3, #24
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	371c      	adds	r7, #28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e0b4      	b.n	8000c9c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8000b32:	4b5c      	ldr	r3, [pc, #368]	; (8000ca4 <HAL_DFSDM_ChannelInit+0x184>)
 8000b34:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8000b36:	4b5c      	ldr	r3, [pc, #368]	; (8000ca8 <HAL_DFSDM_ChannelInit+0x188>)
 8000b38:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8000b3a:	4b5c      	ldr	r3, [pc, #368]	; (8000cac <HAL_DFSDM_ChannelInit+0x18c>)
 8000b3c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8b4 	bl	8000cb0 <DFSDM_GetChannelFromInstance>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4413      	add	r3, r2
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e0a0      	b.n	8000c9c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f007 f856 	bl	8007c0c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d125      	bne.n	8000bbe <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	431a      	orrs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	791b      	ldrb	r3, [r3, #4]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d108      	bne.n	8000bb2 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	041b      	lsls	r3, r3, #16
 8000bac:	431a      	orrs	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000bcc:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000bdc:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000be2:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 020f 	bic.w	r2, r2, #15
 8000bfa:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000c22:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6899      	ldr	r1, [r3, #8]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	3b01      	subs	r3, #1
 8000c34:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f002 0207 	and.w	r2, r2, #7
 8000c4e:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6859      	ldr	r1, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c7a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f811 	bl	8000cb0 <DFSDM_GetChannelFromInstance>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4413      	add	r3, r2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000494 	.word	0x24000494
 8000ca8:	24000498 	.word	0x24000498
 8000cac:	40017800 	.word	0x40017800

08000cb0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <DFSDM_GetChannelFromInstance+0x7c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d102      	bne.n	8000cc6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e02b      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <DFSDM_GetChannelFromInstance+0x80>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d102      	bne.n	8000cd4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e024      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <DFSDM_GetChannelFromInstance+0x84>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d102      	bne.n	8000ce2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e01d      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <DFSDM_GetChannelFromInstance+0x88>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d102      	bne.n	8000cf0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e016      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <DFSDM_GetChannelFromInstance+0x8c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d102      	bne.n	8000cfe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00f      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <DFSDM_GetChannelFromInstance+0x90>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d102      	bne.n	8000d0c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8000d06:	2305      	movs	r3, #5
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e008      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <DFSDM_GetChannelFromInstance+0x94>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d102      	bne.n	8000d1a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8000d14:	2306      	movs	r3, #6
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e001      	b.n	8000d1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40017800 	.word	0x40017800
 8000d30:	40017820 	.word	0x40017820
 8000d34:	40017840 	.word	0x40017840
 8000d38:	40017860 	.word	0x40017860
 8000d3c:	40017880 	.word	0x40017880
 8000d40:	400178a0 	.word	0x400178a0
 8000d44:	400178c0 	.word	0x400178c0

08000d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fce0 	bl	8000714 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e314      	b.n	800138a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a66      	ldr	r2, [pc, #408]	; (8000f00 <HAL_DMA_Init+0x1b8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d04a      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a65      	ldr	r2, [pc, #404]	; (8000f04 <HAL_DMA_Init+0x1bc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d045      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_DMA_Init+0x1c0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d040      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a62      	ldr	r2, [pc, #392]	; (8000f0c <HAL_DMA_Init+0x1c4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d03b      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <HAL_DMA_Init+0x1c8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d036      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a5f      	ldr	r2, [pc, #380]	; (8000f14 <HAL_DMA_Init+0x1cc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d031      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a5d      	ldr	r2, [pc, #372]	; (8000f18 <HAL_DMA_Init+0x1d0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d02c      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a5c      	ldr	r2, [pc, #368]	; (8000f1c <HAL_DMA_Init+0x1d4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d027      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a5a      	ldr	r2, [pc, #360]	; (8000f20 <HAL_DMA_Init+0x1d8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d022      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a59      	ldr	r2, [pc, #356]	; (8000f24 <HAL_DMA_Init+0x1dc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d01d      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a57      	ldr	r2, [pc, #348]	; (8000f28 <HAL_DMA_Init+0x1e0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d018      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a56      	ldr	r2, [pc, #344]	; (8000f2c <HAL_DMA_Init+0x1e4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d013      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <HAL_DMA_Init+0x1e8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00e      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a53      	ldr	r2, [pc, #332]	; (8000f34 <HAL_DMA_Init+0x1ec>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d009      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <HAL_DMA_Init+0x1f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d004      	beq.n	8000e00 <HAL_DMA_Init+0xb8>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a50      	ldr	r2, [pc, #320]	; (8000f3c <HAL_DMA_Init+0x1f4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d101      	bne.n	8000e04 <HAL_DMA_Init+0xbc>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <HAL_DMA_Init+0xbe>
 8000e04:	2300      	movs	r3, #0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 813c 	beq.w	8001084 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <HAL_DMA_Init+0x1b8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d04a      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a36      	ldr	r2, [pc, #216]	; (8000f04 <HAL_DMA_Init+0x1bc>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d045      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <HAL_DMA_Init+0x1c0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d040      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_DMA_Init+0x1c4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d03b      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_DMA_Init+0x1c8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d036      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <HAL_DMA_Init+0x1cc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d031      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <HAL_DMA_Init+0x1d0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d02c      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <HAL_DMA_Init+0x1d4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d027      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <HAL_DMA_Init+0x1d8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d022      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <HAL_DMA_Init+0x1dc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d01d      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <HAL_DMA_Init+0x1e0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d018      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <HAL_DMA_Init+0x1e4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_DMA_Init+0x1e8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00e      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <HAL_DMA_Init+0x1ec>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d009      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_DMA_Init+0x1f0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d004      	beq.n	8000ebc <HAL_DMA_Init+0x174>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <HAL_DMA_Init+0x1f4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d108      	bne.n	8000ece <HAL_DMA_Init+0x186>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_DMA_Init+0x196>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000ede:	e02f      	b.n	8000f40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee0:	f7ff fc18 	bl	8000714 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d928      	bls.n	8000f40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e244      	b.n	800138a <HAL_DMA_Init+0x642>
 8000f00:	40020010 	.word	0x40020010
 8000f04:	40020028 	.word	0x40020028
 8000f08:	40020040 	.word	0x40020040
 8000f0c:	40020058 	.word	0x40020058
 8000f10:	40020070 	.word	0x40020070
 8000f14:	40020088 	.word	0x40020088
 8000f18:	400200a0 	.word	0x400200a0
 8000f1c:	400200b8 	.word	0x400200b8
 8000f20:	40020410 	.word	0x40020410
 8000f24:	40020428 	.word	0x40020428
 8000f28:	40020440 	.word	0x40020440
 8000f2c:	40020458 	.word	0x40020458
 8000f30:	40020470 	.word	0x40020470
 8000f34:	40020488 	.word	0x40020488
 8000f38:	400204a0 	.word	0x400204a0
 8000f3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1c8      	bne.n	8000ee0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4b84      	ldr	r3, [pc, #528]	; (800116c <HAL_DMA_Init+0x424>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000f66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d107      	bne.n	8000fa4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b28      	cmp	r3, #40	; 0x28
 8000faa:	d903      	bls.n	8000fb4 <HAL_DMA_Init+0x26c>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8000fb2:	d91f      	bls.n	8000ff4 <HAL_DMA_Init+0x2ac>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8000fba:	d903      	bls.n	8000fc4 <HAL_DMA_Init+0x27c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b42      	cmp	r3, #66	; 0x42
 8000fc2:	d917      	bls.n	8000ff4 <HAL_DMA_Init+0x2ac>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b46      	cmp	r3, #70	; 0x46
 8000fca:	d903      	bls.n	8000fd4 <HAL_DMA_Init+0x28c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b48      	cmp	r3, #72	; 0x48
 8000fd2:	d90f      	bls.n	8000ff4 <HAL_DMA_Init+0x2ac>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b4e      	cmp	r3, #78	; 0x4e
 8000fda:	d903      	bls.n	8000fe4 <HAL_DMA_Init+0x29c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b52      	cmp	r3, #82	; 0x52
 8000fe2:	d907      	bls.n	8000ff4 <HAL_DMA_Init+0x2ac>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b73      	cmp	r3, #115	; 0x73
 8000fea:	d905      	bls.n	8000ff8 <HAL_DMA_Init+0x2b0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b77      	cmp	r3, #119	; 0x77
 8000ff2:	d801      	bhi.n	8000ff8 <HAL_DMA_Init+0x2b0>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_DMA_Init+0x2b2>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001004:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f023 0307 	bic.w	r3, r3, #7
 800101c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	2b04      	cmp	r3, #4
 800102e:	d117      	bne.n	8001060 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4313      	orrs	r3, r2
 8001038:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00e      	beq.n	8001060 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f001 f9b6 	bl	80023b4 <DMA_CheckFifoParam>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d008      	beq.n	8001060 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e194      	b.n	800138a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f001 f8f1 	bl	8002250 <DMA_CalcBaseAndBitshift>
 800106e:	4603      	mov	r3, r0
 8001070:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	223f      	movs	r2, #63	; 0x3f
 800107c:	409a      	lsls	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	e0ca      	b.n	800121a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a39      	ldr	r2, [pc, #228]	; (8001170 <HAL_DMA_Init+0x428>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d022      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a38      	ldr	r2, [pc, #224]	; (8001174 <HAL_DMA_Init+0x42c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d01d      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a36      	ldr	r2, [pc, #216]	; (8001178 <HAL_DMA_Init+0x430>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d018      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a35      	ldr	r2, [pc, #212]	; (800117c <HAL_DMA_Init+0x434>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d013      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a33      	ldr	r2, [pc, #204]	; (8001180 <HAL_DMA_Init+0x438>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00e      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <HAL_DMA_Init+0x43c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d009      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a30      	ldr	r2, [pc, #192]	; (8001188 <HAL_DMA_Init+0x440>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d004      	beq.n	80010d4 <HAL_DMA_Init+0x38c>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <HAL_DMA_Init+0x444>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_DMA_Init+0x390>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_DMA_Init+0x392>
 80010d8:	2300      	movs	r3, #0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8094 	beq.w	8001208 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a22      	ldr	r2, [pc, #136]	; (8001170 <HAL_DMA_Init+0x428>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d021      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_DMA_Init+0x42c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d01c      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_DMA_Init+0x430>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d017      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_DMA_Init+0x434>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d012      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <HAL_DMA_Init+0x438>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_DMA_Init+0x43c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d008      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_DMA_Init+0x440>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d003      	beq.n	800112e <HAL_DMA_Init+0x3e6>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_DMA_Init+0x444>)
 800112c:	4293      	cmp	r3, r2
 800112e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_DMA_Init+0x448>)
 800114c:	4013      	ands	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b40      	cmp	r3, #64	; 0x40
 8001156:	d01d      	beq.n	8001194 <HAL_DMA_Init+0x44c>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b80      	cmp	r3, #128	; 0x80
 800115e:	d102      	bne.n	8001166 <HAL_DMA_Init+0x41e>
 8001160:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001164:	e017      	b.n	8001196 <HAL_DMA_Init+0x44e>
 8001166:	2300      	movs	r3, #0
 8001168:	e015      	b.n	8001196 <HAL_DMA_Init+0x44e>
 800116a:	bf00      	nop
 800116c:	fe10803f 	.word	0xfe10803f
 8001170:	58025408 	.word	0x58025408
 8001174:	5802541c 	.word	0x5802541c
 8001178:	58025430 	.word	0x58025430
 800117c:	58025444 	.word	0x58025444
 8001180:	58025458 	.word	0x58025458
 8001184:	5802546c 	.word	0x5802546c
 8001188:	58025480 	.word	0x58025480
 800118c:	58025494 	.word	0x58025494
 8001190:	fffe000f 	.word	0xfffe000f
 8001194:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68d2      	ldr	r2, [r2, #12]
 800119a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800119c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80011a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80011ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80011b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80011bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80011c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b6e      	ldr	r3, [pc, #440]	; (8001394 <HAL_DMA_Init+0x64c>)
 80011dc:	4413      	add	r3, r2
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_DMA_Init+0x650>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	009a      	lsls	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f001 f82f 	bl	8002250 <DMA_CalcBaseAndBitshift>
 80011f2:	4603      	mov	r3, r0
 80011f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2201      	movs	r2, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	e008      	b.n	800121a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2203      	movs	r2, #3
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0b7      	b.n	800138a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5f      	ldr	r2, [pc, #380]	; (800139c <HAL_DMA_Init+0x654>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d072      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <HAL_DMA_Init+0x658>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d06d      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a5c      	ldr	r2, [pc, #368]	; (80013a4 <HAL_DMA_Init+0x65c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d068      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a5a      	ldr	r2, [pc, #360]	; (80013a8 <HAL_DMA_Init+0x660>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d063      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a59      	ldr	r2, [pc, #356]	; (80013ac <HAL_DMA_Init+0x664>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d05e      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <HAL_DMA_Init+0x668>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d059      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a56      	ldr	r2, [pc, #344]	; (80013b4 <HAL_DMA_Init+0x66c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d054      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a54      	ldr	r2, [pc, #336]	; (80013b8 <HAL_DMA_Init+0x670>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d04f      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a53      	ldr	r2, [pc, #332]	; (80013bc <HAL_DMA_Init+0x674>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d04a      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <HAL_DMA_Init+0x678>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d045      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_DMA_Init+0x67c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d040      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <HAL_DMA_Init+0x680>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d03b      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <HAL_DMA_Init+0x684>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d036      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_DMA_Init+0x688>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d031      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a4a      	ldr	r2, [pc, #296]	; (80013d4 <HAL_DMA_Init+0x68c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d02c      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_DMA_Init+0x690>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d027      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a47      	ldr	r2, [pc, #284]	; (80013dc <HAL_DMA_Init+0x694>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d022      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_DMA_Init+0x698>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01d      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_DMA_Init+0x69c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d018      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a42      	ldr	r2, [pc, #264]	; (80013e8 <HAL_DMA_Init+0x6a0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a41      	ldr	r2, [pc, #260]	; (80013ec <HAL_DMA_Init+0x6a4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00e      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <HAL_DMA_Init+0x6a8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d009      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <HAL_DMA_Init+0x6ac>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d004      	beq.n	800130a <HAL_DMA_Init+0x5c2>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <HAL_DMA_Init+0x6b0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_DMA_Init+0x5c6>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_DMA_Init+0x5c8>
 800130e:	2300      	movs	r3, #0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d032      	beq.n	800137a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f001 f8c9 	bl	80024ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b80      	cmp	r3, #128	; 0x80
 8001320:	d102      	bne.n	8001328 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800133c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d010      	beq.n	8001368 <HAL_DMA_Init+0x620>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b08      	cmp	r3, #8
 800134c:	d80c      	bhi.n	8001368 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f001 f946 	bl	80025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	e008      	b.n	800137a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	a7fdabf8 	.word	0xa7fdabf8
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	40020010 	.word	0x40020010
 80013a0:	40020028 	.word	0x40020028
 80013a4:	40020040 	.word	0x40020040
 80013a8:	40020058 	.word	0x40020058
 80013ac:	40020070 	.word	0x40020070
 80013b0:	40020088 	.word	0x40020088
 80013b4:	400200a0 	.word	0x400200a0
 80013b8:	400200b8 	.word	0x400200b8
 80013bc:	40020410 	.word	0x40020410
 80013c0:	40020428 	.word	0x40020428
 80013c4:	40020440 	.word	0x40020440
 80013c8:	40020458 	.word	0x40020458
 80013cc:	40020470 	.word	0x40020470
 80013d0:	40020488 	.word	0x40020488
 80013d4:	400204a0 	.word	0x400204a0
 80013d8:	400204b8 	.word	0x400204b8
 80013dc:	58025408 	.word	0x58025408
 80013e0:	5802541c 	.word	0x5802541c
 80013e4:	58025430 	.word	0x58025430
 80013e8:	58025444 	.word	0x58025444
 80013ec:	58025458 	.word	0x58025458
 80013f0:	5802546c 	.word	0x5802546c
 80013f4:	58025480 	.word	0x58025480
 80013f8:	58025494 	.word	0x58025494

080013fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_DMA_IRQHandler+0x1ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a67      	ldr	r2, [pc, #412]	; (80015ac <HAL_DMA_IRQHandler+0x1b0>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a5f      	ldr	r2, [pc, #380]	; (80015b0 <HAL_DMA_IRQHandler+0x1b4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d04a      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <HAL_DMA_IRQHandler+0x1b8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d045      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a5c      	ldr	r2, [pc, #368]	; (80015b8 <HAL_DMA_IRQHandler+0x1bc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d040      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <HAL_DMA_IRQHandler+0x1c0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d03b      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <HAL_DMA_IRQHandler+0x1c4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d036      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_DMA_IRQHandler+0x1c8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d031      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_DMA_IRQHandler+0x1cc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d02c      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a54      	ldr	r2, [pc, #336]	; (80015cc <HAL_DMA_IRQHandler+0x1d0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d027      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a53      	ldr	r2, [pc, #332]	; (80015d0 <HAL_DMA_IRQHandler+0x1d4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d022      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_DMA_IRQHandler+0x1d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01d      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <HAL_DMA_IRQHandler+0x1dc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d018      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	; (80015dc <HAL_DMA_IRQHandler+0x1e0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <HAL_DMA_IRQHandler+0x1e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00e      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <HAL_DMA_IRQHandler+0x1e8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d009      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <HAL_DMA_IRQHandler+0x1ec>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d004      	beq.n	80014ce <HAL_DMA_IRQHandler+0xd2>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_DMA_IRQHandler+0x1f0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_DMA_IRQHandler+0xd6>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_DMA_IRQHandler+0xd8>
 80014d2:	2300      	movs	r3, #0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 842b 	beq.w	8001d30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2208      	movs	r2, #8
 80014e4:	409a      	lsls	r2, r3
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80a2 	beq.w	8001634 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2e      	ldr	r2, [pc, #184]	; (80015b0 <HAL_DMA_IRQHandler+0x1b4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d04a      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <HAL_DMA_IRQHandler+0x1b8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d045      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <HAL_DMA_IRQHandler+0x1bc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d040      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2a      	ldr	r2, [pc, #168]	; (80015bc <HAL_DMA_IRQHandler+0x1c0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d03b      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_DMA_IRQHandler+0x1c4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d036      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_DMA_IRQHandler+0x1c8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d031      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <HAL_DMA_IRQHandler+0x1cc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02c      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a24      	ldr	r2, [pc, #144]	; (80015cc <HAL_DMA_IRQHandler+0x1d0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d027      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_DMA_IRQHandler+0x1d4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d022      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <HAL_DMA_IRQHandler+0x1d8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d01d      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_DMA_IRQHandler+0x1dc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d018      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_DMA_IRQHandler+0x1e0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d013      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <HAL_DMA_IRQHandler+0x1e4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00e      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_DMA_IRQHandler+0x1e8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d009      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_DMA_IRQHandler+0x1ec>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_DMA_IRQHandler+0x194>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_DMA_IRQHandler+0x1f0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d12f      	bne.n	80015f0 <HAL_DMA_IRQHandler+0x1f4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	e02e      	b.n	8001604 <HAL_DMA_IRQHandler+0x208>
 80015a6:	bf00      	nop
 80015a8:	24000408 	.word	0x24000408
 80015ac:	1b4e81b5 	.word	0x1b4e81b5
 80015b0:	40020010 	.word	0x40020010
 80015b4:	40020028 	.word	0x40020028
 80015b8:	40020040 	.word	0x40020040
 80015bc:	40020058 	.word	0x40020058
 80015c0:	40020070 	.word	0x40020070
 80015c4:	40020088 	.word	0x40020088
 80015c8:	400200a0 	.word	0x400200a0
 80015cc:	400200b8 	.word	0x400200b8
 80015d0:	40020410 	.word	0x40020410
 80015d4:	40020428 	.word	0x40020428
 80015d8:	40020440 	.word	0x40020440
 80015dc:	40020458 	.word	0x40020458
 80015e0:	40020470 	.word	0x40020470
 80015e4:	40020488 	.word	0x40020488
 80015e8:	400204a0 	.word	0x400204a0
 80015ec:	400204b8 	.word	0x400204b8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	2300      	moveq	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d015      	beq.n	8001634 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2208      	movs	r2, #8
 8001622:	409a      	lsls	r2, r3
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d06e      	beq.n	8001728 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a69      	ldr	r2, [pc, #420]	; (80017f4 <HAL_DMA_IRQHandler+0x3f8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d04a      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a67      	ldr	r2, [pc, #412]	; (80017f8 <HAL_DMA_IRQHandler+0x3fc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d045      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a66      	ldr	r2, [pc, #408]	; (80017fc <HAL_DMA_IRQHandler+0x400>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d040      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a64      	ldr	r2, [pc, #400]	; (8001800 <HAL_DMA_IRQHandler+0x404>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d03b      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a63      	ldr	r2, [pc, #396]	; (8001804 <HAL_DMA_IRQHandler+0x408>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d036      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a61      	ldr	r2, [pc, #388]	; (8001808 <HAL_DMA_IRQHandler+0x40c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d031      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a60      	ldr	r2, [pc, #384]	; (800180c <HAL_DMA_IRQHandler+0x410>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d02c      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a5e      	ldr	r2, [pc, #376]	; (8001810 <HAL_DMA_IRQHandler+0x414>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d027      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <HAL_DMA_IRQHandler+0x418>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_DMA_IRQHandler+0x41c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01d      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <HAL_DMA_IRQHandler+0x420>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d018      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_DMA_IRQHandler+0x424>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a57      	ldr	r2, [pc, #348]	; (8001824 <HAL_DMA_IRQHandler+0x428>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00e      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_DMA_IRQHandler+0x42c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d009      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a54      	ldr	r2, [pc, #336]	; (800182c <HAL_DMA_IRQHandler+0x430>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d004      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2ee>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_DMA_IRQHandler+0x434>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10a      	bne.n	8001700 <HAL_DMA_IRQHandler+0x304>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e003      	b.n	8001708 <HAL_DMA_IRQHandler+0x30c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00d      	beq.n	8001728 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	f043 0202 	orr.w	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2204      	movs	r2, #4
 8001732:	409a      	lsls	r2, r3
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 808f 	beq.w	800185c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <HAL_DMA_IRQHandler+0x3f8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d04a      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_DMA_IRQHandler+0x3fc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d045      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_DMA_IRQHandler+0x400>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d040      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_DMA_IRQHandler+0x404>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d03b      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_DMA_IRQHandler+0x408>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d036      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a24      	ldr	r2, [pc, #144]	; (8001808 <HAL_DMA_IRQHandler+0x40c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d031      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_DMA_IRQHandler+0x410>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d02c      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <HAL_DMA_IRQHandler+0x414>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d027      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_DMA_IRQHandler+0x418>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d022      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_DMA_IRQHandler+0x41c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01d      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_DMA_IRQHandler+0x420>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d018      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_DMA_IRQHandler+0x424>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <HAL_DMA_IRQHandler+0x428>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00e      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <HAL_DMA_IRQHandler+0x42c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d009      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_DMA_IRQHandler+0x430>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d004      	beq.n	80017de <HAL_DMA_IRQHandler+0x3e2>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <HAL_DMA_IRQHandler+0x434>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12a      	bne.n	8001834 <HAL_DMA_IRQHandler+0x438>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e023      	b.n	800183c <HAL_DMA_IRQHandler+0x440>
 80017f4:	40020010 	.word	0x40020010
 80017f8:	40020028 	.word	0x40020028
 80017fc:	40020040 	.word	0x40020040
 8001800:	40020058 	.word	0x40020058
 8001804:	40020070 	.word	0x40020070
 8001808:	40020088 	.word	0x40020088
 800180c:	400200a0 	.word	0x400200a0
 8001810:	400200b8 	.word	0x400200b8
 8001814:	40020410 	.word	0x40020410
 8001818:	40020428 	.word	0x40020428
 800181c:	40020440 	.word	0x40020440
 8001820:	40020458 	.word	0x40020458
 8001824:	40020470 	.word	0x40020470
 8001828:	40020488 	.word	0x40020488
 800182c:	400204a0 	.word	0x400204a0
 8001830:	400204b8 	.word	0x400204b8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00d      	beq.n	800185c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2204      	movs	r2, #4
 800184a:	409a      	lsls	r2, r3
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f043 0204 	orr.w	r2, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	2210      	movs	r2, #16
 8001866:	409a      	lsls	r2, r3
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a6 	beq.w	80019be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a85      	ldr	r2, [pc, #532]	; (8001a8c <HAL_DMA_IRQHandler+0x690>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d04a      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a83      	ldr	r2, [pc, #524]	; (8001a90 <HAL_DMA_IRQHandler+0x694>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d045      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_DMA_IRQHandler+0x698>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d040      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a80      	ldr	r2, [pc, #512]	; (8001a98 <HAL_DMA_IRQHandler+0x69c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d03b      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_DMA_IRQHandler+0x6a0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d036      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <HAL_DMA_IRQHandler+0x6a4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d031      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_DMA_IRQHandler+0x6a8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d02c      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_DMA_IRQHandler+0x6ac>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d027      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a79      	ldr	r2, [pc, #484]	; (8001aac <HAL_DMA_IRQHandler+0x6b0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d022      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <HAL_DMA_IRQHandler+0x6b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01d      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a76      	ldr	r2, [pc, #472]	; (8001ab4 <HAL_DMA_IRQHandler+0x6b8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d018      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a74      	ldr	r2, [pc, #464]	; (8001ab8 <HAL_DMA_IRQHandler+0x6bc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a73      	ldr	r2, [pc, #460]	; (8001abc <HAL_DMA_IRQHandler+0x6c0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00e      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_DMA_IRQHandler+0x6c4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d009      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a70      	ldr	r2, [pc, #448]	; (8001ac4 <HAL_DMA_IRQHandler+0x6c8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d004      	beq.n	8001912 <HAL_DMA_IRQHandler+0x516>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_DMA_IRQHandler+0x6cc>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d10a      	bne.n	8001928 <HAL_DMA_IRQHandler+0x52c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	e009      	b.n	800193c <HAL_DMA_IRQHandler+0x540>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03e      	beq.n	80019be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2210      	movs	r2, #16
 800194a:	409a      	lsls	r2, r3
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d018      	beq.n	8001990 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d108      	bne.n	800197e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d024      	beq.n	80019be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
 800197c:	e01f      	b.n	80019be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01b      	beq.n	80019be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	e016      	b.n	80019be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d107      	bne.n	80019ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0208 	bic.w	r2, r2, #8
 80019ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	2220      	movs	r2, #32
 80019c8:	409a      	lsls	r2, r3
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8110 	beq.w	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2c      	ldr	r2, [pc, #176]	; (8001a8c <HAL_DMA_IRQHandler+0x690>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d04a      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <HAL_DMA_IRQHandler+0x694>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d045      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_DMA_IRQHandler+0x698>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d040      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <HAL_DMA_IRQHandler+0x69c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d03b      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_DMA_IRQHandler+0x6a0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d036      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a25      	ldr	r2, [pc, #148]	; (8001aa0 <HAL_DMA_IRQHandler+0x6a4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d031      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <HAL_DMA_IRQHandler+0x6a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d02c      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_DMA_IRQHandler+0x6ac>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d027      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <HAL_DMA_IRQHandler+0x6b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d022      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <HAL_DMA_IRQHandler+0x6b4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d01d      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_DMA_IRQHandler+0x6b8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d018      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <HAL_DMA_IRQHandler+0x6bc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <HAL_DMA_IRQHandler+0x6c0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00e      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_DMA_IRQHandler+0x6c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d009      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_DMA_IRQHandler+0x6c8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d004      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x678>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <HAL_DMA_IRQHandler+0x6cc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d12b      	bne.n	8001acc <HAL_DMA_IRQHandler+0x6d0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	e02a      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x6e4>
 8001a8a:	bf00      	nop
 8001a8c:	40020010 	.word	0x40020010
 8001a90:	40020028 	.word	0x40020028
 8001a94:	40020040 	.word	0x40020040
 8001a98:	40020058 	.word	0x40020058
 8001a9c:	40020070 	.word	0x40020070
 8001aa0:	40020088 	.word	0x40020088
 8001aa4:	400200a0 	.word	0x400200a0
 8001aa8:	400200b8 	.word	0x400200b8
 8001aac:	40020410 	.word	0x40020410
 8001ab0:	40020428 	.word	0x40020428
 8001ab4:	40020440 	.word	0x40020440
 8001ab8:	40020458 	.word	0x40020458
 8001abc:	40020470 	.word	0x40020470
 8001ac0:	40020488 	.word	0x40020488
 8001ac4:	400204a0 	.word	0x400204a0
 8001ac8:	400204b8 	.word	0x400204b8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8087 	beq.w	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2220      	movs	r2, #32
 8001af0:	409a      	lsls	r2, r3
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d139      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0216 	bic.w	r2, r2, #22
 8001b10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <HAL_DMA_IRQHandler+0x736>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0208 	bic.w	r2, r2, #8
 8001b40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	223f      	movs	r2, #63	; 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 834a 	beq.w	8002200 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
          }
          return;
 8001b74:	e344      	b.n	8002200 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02c      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
 8001ba2:	e027      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d023      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
 8001bb4:	e01e      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10f      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0210 	bic.w	r2, r2, #16
 8001bd2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8306 	beq.w	800220a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8088 	beq.w	8001d1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_DMA_IRQHandler+0xa08>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a79      	ldr	r2, [pc, #484]	; (8001e08 <HAL_DMA_IRQHandler+0xa0c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d045      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <HAL_DMA_IRQHandler+0xa10>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d040      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a76      	ldr	r2, [pc, #472]	; (8001e10 <HAL_DMA_IRQHandler+0xa14>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d03b      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a74      	ldr	r2, [pc, #464]	; (8001e14 <HAL_DMA_IRQHandler+0xa18>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d036      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a73      	ldr	r2, [pc, #460]	; (8001e18 <HAL_DMA_IRQHandler+0xa1c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d031      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a71      	ldr	r2, [pc, #452]	; (8001e1c <HAL_DMA_IRQHandler+0xa20>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02c      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a70      	ldr	r2, [pc, #448]	; (8001e20 <HAL_DMA_IRQHandler+0xa24>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d027      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_DMA_IRQHandler+0xa28>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d022      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6d      	ldr	r2, [pc, #436]	; (8001e28 <HAL_DMA_IRQHandler+0xa2c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d01d      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6b      	ldr	r2, [pc, #428]	; (8001e2c <HAL_DMA_IRQHandler+0xa30>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d018      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_DMA_IRQHandler+0xa34>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a68      	ldr	r2, [pc, #416]	; (8001e34 <HAL_DMA_IRQHandler+0xa38>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00e      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_DMA_IRQHandler+0xa3c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_DMA_IRQHandler+0xa40>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x8b8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a64      	ldr	r2, [pc, #400]	; (8001e40 <HAL_DMA_IRQHandler+0xa44>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d108      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0x8ca>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x8da>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d307      	bcc.n	8001cf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f2      	bne.n	8001cd6 <HAL_DMA_IRQHandler+0x8da>
 8001cf0:	e000      	b.n	8001cf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001cf2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001d0a:	e003      	b.n	8001d14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8272 	beq.w	800220a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
 8001d2e:	e26c      	b.n	800220a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HAL_DMA_IRQHandler+0xa48>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d022      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a42      	ldr	r2, [pc, #264]	; (8001e48 <HAL_DMA_IRQHandler+0xa4c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d01d      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <HAL_DMA_IRQHandler+0xa50>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d018      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a3f      	ldr	r2, [pc, #252]	; (8001e50 <HAL_DMA_IRQHandler+0xa54>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <HAL_DMA_IRQHandler+0xa58>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <HAL_DMA_IRQHandler+0xa5c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a3a      	ldr	r2, [pc, #232]	; (8001e5c <HAL_DMA_IRQHandler+0xa60>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x984>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a39      	ldr	r2, [pc, #228]	; (8001e60 <HAL_DMA_IRQHandler+0xa64>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_IRQHandler+0x988>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_DMA_IRQHandler+0x98a>
 8001d84:	2300      	movs	r3, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 823f 	beq.w	800220a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80cd 	beq.w	8001f44 <HAL_DMA_IRQHandler+0xb48>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80c7 	beq.w	8001f44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d049      	beq.n	8001e64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8210 	beq.w	8002204 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001dec:	e20a      	b.n	8002204 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8206 	beq.w	8002204 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e00:	e200      	b.n	8002204 <HAL_DMA_IRQHandler+0xe08>
 8001e02:	bf00      	nop
 8001e04:	40020010 	.word	0x40020010
 8001e08:	40020028 	.word	0x40020028
 8001e0c:	40020040 	.word	0x40020040
 8001e10:	40020058 	.word	0x40020058
 8001e14:	40020070 	.word	0x40020070
 8001e18:	40020088 	.word	0x40020088
 8001e1c:	400200a0 	.word	0x400200a0
 8001e20:	400200b8 	.word	0x400200b8
 8001e24:	40020410 	.word	0x40020410
 8001e28:	40020428 	.word	0x40020428
 8001e2c:	40020440 	.word	0x40020440
 8001e30:	40020458 	.word	0x40020458
 8001e34:	40020470 	.word	0x40020470
 8001e38:	40020488 	.word	0x40020488
 8001e3c:	400204a0 	.word	0x400204a0
 8001e40:	400204b8 	.word	0x400204b8
 8001e44:	58025408 	.word	0x58025408
 8001e48:	5802541c 	.word	0x5802541c
 8001e4c:	58025430 	.word	0x58025430
 8001e50:	58025444 	.word	0x58025444
 8001e54:	58025458 	.word	0x58025458
 8001e58:	5802546c 	.word	0x5802546c
 8001e5c:	58025480 	.word	0x58025480
 8001e60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d160      	bne.n	8001f30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a8c      	ldr	r2, [pc, #560]	; (80020a4 <HAL_DMA_IRQHandler+0xca8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d04a      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a8a      	ldr	r2, [pc, #552]	; (80020a8 <HAL_DMA_IRQHandler+0xcac>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d045      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a89      	ldr	r2, [pc, #548]	; (80020ac <HAL_DMA_IRQHandler+0xcb0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d040      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a87      	ldr	r2, [pc, #540]	; (80020b0 <HAL_DMA_IRQHandler+0xcb4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d03b      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a86      	ldr	r2, [pc, #536]	; (80020b4 <HAL_DMA_IRQHandler+0xcb8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d036      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a84      	ldr	r2, [pc, #528]	; (80020b8 <HAL_DMA_IRQHandler+0xcbc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d031      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a83      	ldr	r2, [pc, #524]	; (80020bc <HAL_DMA_IRQHandler+0xcc0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d02c      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <HAL_DMA_IRQHandler+0xcc4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d027      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a80      	ldr	r2, [pc, #512]	; (80020c4 <HAL_DMA_IRQHandler+0xcc8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d022      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <HAL_DMA_IRQHandler+0xccc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01d      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7d      	ldr	r2, [pc, #500]	; (80020cc <HAL_DMA_IRQHandler+0xcd0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7b      	ldr	r2, [pc, #492]	; (80020d0 <HAL_DMA_IRQHandler+0xcd4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7a      	ldr	r2, [pc, #488]	; (80020d4 <HAL_DMA_IRQHandler+0xcd8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a78      	ldr	r2, [pc, #480]	; (80020d8 <HAL_DMA_IRQHandler+0xcdc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	; (80020dc <HAL_DMA_IRQHandler+0xce0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xb12>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_DMA_IRQHandler+0xce4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d108      	bne.n	8001f20 <HAL_DMA_IRQHandler+0xb24>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e007      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb34>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0204 	bic.w	r2, r2, #4
 8001f2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8165 	beq.w	8002204 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f42:	e15f      	b.n	8002204 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80c5 	beq.w	80020e4 <HAL_DMA_IRQHandler+0xce8>
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80bf 	beq.w	80020e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2202      	movs	r2, #2
 8001f70:	409a      	lsls	r2, r3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 813a 	beq.w	8002208 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f9c:	e134      	b.n	8002208 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8130 	beq.w	8002208 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fb0:	e12a      	b.n	8002208 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d168      	bne.n	800208e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a38      	ldr	r2, [pc, #224]	; (80020a4 <HAL_DMA_IRQHandler+0xca8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04a      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <HAL_DMA_IRQHandler+0xcac>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d045      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	; (80020ac <HAL_DMA_IRQHandler+0xcb0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a34      	ldr	r2, [pc, #208]	; (80020b0 <HAL_DMA_IRQHandler+0xcb4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d03b      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <HAL_DMA_IRQHandler+0xcb8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d036      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <HAL_DMA_IRQHandler+0xcbc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <HAL_DMA_IRQHandler+0xcc0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02c      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <HAL_DMA_IRQHandler+0xcc4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <HAL_DMA_IRQHandler+0xcc8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <HAL_DMA_IRQHandler+0xccc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_DMA_IRQHandler+0xcd0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_DMA_IRQHandler+0xcd4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <HAL_DMA_IRQHandler+0xcd8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_DMA_IRQHandler+0xcdc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_DMA_IRQHandler+0xce0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_IRQHandler+0xc60>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_DMA_IRQHandler+0xce4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d108      	bne.n	800206e <HAL_DMA_IRQHandler+0xc72>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0214 	bic.w	r2, r2, #20
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e007      	b.n	800207e <HAL_DMA_IRQHandler+0xc82>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 020a 	bic.w	r2, r2, #10
 800207c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80b8 	beq.w	8002208 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020a0:	e0b2      	b.n	8002208 <HAL_DMA_IRQHandler+0xe0c>
 80020a2:	bf00      	nop
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40020028 	.word	0x40020028
 80020ac:	40020040 	.word	0x40020040
 80020b0:	40020058 	.word	0x40020058
 80020b4:	40020070 	.word	0x40020070
 80020b8:	40020088 	.word	0x40020088
 80020bc:	400200a0 	.word	0x400200a0
 80020c0:	400200b8 	.word	0x400200b8
 80020c4:	40020410 	.word	0x40020410
 80020c8:	40020428 	.word	0x40020428
 80020cc:	40020440 	.word	0x40020440
 80020d0:	40020458 	.word	0x40020458
 80020d4:	40020470 	.word	0x40020470
 80020d8:	40020488 	.word	0x40020488
 80020dc:	400204a0 	.word	0x400204a0
 80020e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2208      	movs	r2, #8
 80020ee:	409a      	lsls	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8088 	beq.w	800220a <HAL_DMA_IRQHandler+0xe0e>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8082 	beq.w	800220a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a41      	ldr	r2, [pc, #260]	; (8002210 <HAL_DMA_IRQHandler+0xe14>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_DMA_IRQHandler+0xe18>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d045      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_DMA_IRQHandler+0xe1c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3c      	ldr	r2, [pc, #240]	; (800221c <HAL_DMA_IRQHandler+0xe20>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d03b      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <HAL_DMA_IRQHandler+0xe24>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d036      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a39      	ldr	r2, [pc, #228]	; (8002224 <HAL_DMA_IRQHandler+0xe28>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a38      	ldr	r2, [pc, #224]	; (8002228 <HAL_DMA_IRQHandler+0xe2c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02c      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a36      	ldr	r2, [pc, #216]	; (800222c <HAL_DMA_IRQHandler+0xe30>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d027      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a35      	ldr	r2, [pc, #212]	; (8002230 <HAL_DMA_IRQHandler+0xe34>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a33      	ldr	r2, [pc, #204]	; (8002234 <HAL_DMA_IRQHandler+0xe38>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a32      	ldr	r2, [pc, #200]	; (8002238 <HAL_DMA_IRQHandler+0xe3c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a30      	ldr	r2, [pc, #192]	; (800223c <HAL_DMA_IRQHandler+0xe40>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <HAL_DMA_IRQHandler+0xe44>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <HAL_DMA_IRQHandler+0xe48>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <HAL_DMA_IRQHandler+0xe4c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_IRQHandler+0xdaa>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2a      	ldr	r2, [pc, #168]	; (800224c <HAL_DMA_IRQHandler+0xe50>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <HAL_DMA_IRQHandler+0xdbc>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 021c 	bic.w	r2, r2, #28
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_DMA_IRQHandler+0xdcc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020e 	bic.w	r2, r2, #14
 80021c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2201      	movs	r2, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
 80021fe:	e004      	b.n	800220a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002200:	bf00      	nop
 8002202:	e002      	b.n	800220a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002208:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40020010 	.word	0x40020010
 8002214:	40020028 	.word	0x40020028
 8002218:	40020040 	.word	0x40020040
 800221c:	40020058 	.word	0x40020058
 8002220:	40020070 	.word	0x40020070
 8002224:	40020088 	.word	0x40020088
 8002228:	400200a0 	.word	0x400200a0
 800222c:	400200b8 	.word	0x400200b8
 8002230:	40020410 	.word	0x40020410
 8002234:	40020428 	.word	0x40020428
 8002238:	40020440 	.word	0x40020440
 800223c:	40020458 	.word	0x40020458
 8002240:	40020470 	.word	0x40020470
 8002244:	40020488 	.word	0x40020488
 8002248:	400204a0 	.word	0x400204a0
 800224c:	400204b8 	.word	0x400204b8

08002250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <DMA_CalcBaseAndBitshift+0x118>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04a      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a41      	ldr	r2, [pc, #260]	; (800236c <DMA_CalcBaseAndBitshift+0x11c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d045      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3f      	ldr	r2, [pc, #252]	; (8002370 <DMA_CalcBaseAndBitshift+0x120>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d040      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <DMA_CalcBaseAndBitshift+0x124>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d03b      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <DMA_CalcBaseAndBitshift+0x128>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d036      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <DMA_CalcBaseAndBitshift+0x12c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d031      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a39      	ldr	r2, [pc, #228]	; (8002380 <DMA_CalcBaseAndBitshift+0x130>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02c      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a38      	ldr	r2, [pc, #224]	; (8002384 <DMA_CalcBaseAndBitshift+0x134>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d027      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a36      	ldr	r2, [pc, #216]	; (8002388 <DMA_CalcBaseAndBitshift+0x138>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d022      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a35      	ldr	r2, [pc, #212]	; (800238c <DMA_CalcBaseAndBitshift+0x13c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d01d      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a33      	ldr	r2, [pc, #204]	; (8002390 <DMA_CalcBaseAndBitshift+0x140>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d018      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <DMA_CalcBaseAndBitshift+0x144>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <DMA_CalcBaseAndBitshift+0x148>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2f      	ldr	r2, [pc, #188]	; (800239c <DMA_CalcBaseAndBitshift+0x14c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d009      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <DMA_CalcBaseAndBitshift+0x150>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <DMA_CalcBaseAndBitshift+0xa8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <DMA_CalcBaseAndBitshift+0x154>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <DMA_CalcBaseAndBitshift+0xac>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <DMA_CalcBaseAndBitshift+0xae>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3b10      	subs	r3, #16
 800230a:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <DMA_CalcBaseAndBitshift+0x158>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <DMA_CalcBaseAndBitshift+0x15c>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d908      	bls.n	800233c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <DMA_CalcBaseAndBitshift+0x160>)
 8002332:	4013      	ands	r3, r2
 8002334:	1d1a      	adds	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	; 0x58
 800233a:	e00d      	b.n	8002358 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <DMA_CalcBaseAndBitshift+0x160>)
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
 800234a:	e005      	b.n	8002358 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
 80023a8:	aaaaaaab 	.word	0xaaaaaaab
 80023ac:	0800a260 	.word	0x0800a260
 80023b0:	fffffc00 	.word	0xfffffc00

080023b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d120      	bne.n	800240a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d858      	bhi.n	8002482 <DMA_CheckFifoParam+0xce>
 80023d0:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <DMA_CheckFifoParam+0x24>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023fb 	.word	0x080023fb
 80023e0:	080023e9 	.word	0x080023e9
 80023e4:	08002483 	.word	0x08002483
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d048      	beq.n	8002486 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80023f8:	e045      	b.n	8002486 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002402:	d142      	bne.n	800248a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002408:	e03f      	b.n	800248a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002412:	d123      	bne.n	800245c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	2b03      	cmp	r3, #3
 800241a:	d838      	bhi.n	800248e <DMA_CheckFifoParam+0xda>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <DMA_CheckFifoParam+0x70>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	0800243b 	.word	0x0800243b
 800242c:	08002435 	.word	0x08002435
 8002430:	0800244d 	.word	0x0800244d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
        break;
 8002438:	e030      	b.n	800249c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d025      	beq.n	8002492 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800244a:	e022      	b.n	8002492 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002454:	d11f      	bne.n	8002496 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800245a:	e01c      	b.n	8002496 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2b02      	cmp	r3, #2
 8002462:	d902      	bls.n	800246a <DMA_CheckFifoParam+0xb6>
 8002464:	2b03      	cmp	r3, #3
 8002466:	d003      	beq.n	8002470 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002468:	e018      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e015      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
    break;
 8002480:	e00b      	b.n	800249a <DMA_CheckFifoParam+0xe6>
        break;
 8002482:	bf00      	nop
 8002484:	e00a      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 8002486:	bf00      	nop
 8002488:	e008      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 800248a:	bf00      	nop
 800248c:	e006      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 800248e:	bf00      	nop
 8002490:	e004      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 8002492:	bf00      	nop
 8002494:	e002      	b.n	800249c <DMA_CheckFifoParam+0xe8>
        break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <DMA_CheckFifoParam+0xe8>
    break;
 800249a:	bf00      	nop
    }
  }

  return status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop

080024ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a35      	ldr	r2, [pc, #212]	; (80025a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a33      	ldr	r2, [pc, #204]	; (80025ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01a      	beq.n	800254a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3b08      	subs	r3, #8
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002538:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002548:	e024      	b.n	8002594 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3b10      	subs	r3, #16
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d806      	bhi.n	8002572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d902      	bls.n	8002572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3308      	adds	r3, #8
 8002570:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002584:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	58025408 	.word	0x58025408
 80025a4:	5802541c 	.word	0x5802541c
 80025a8:	58025430 	.word	0x58025430
 80025ac:	58025444 	.word	0x58025444
 80025b0:	58025458 	.word	0x58025458
 80025b4:	5802546c 	.word	0x5802546c
 80025b8:	58025480 	.word	0x58025480
 80025bc:	58025494 	.word	0x58025494
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	16009600 	.word	0x16009600
 80025c8:	58025880 	.word	0x58025880
 80025cc:	aaaaaaab 	.word	0xaaaaaaab
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	4002040f 	.word	0x4002040f
 80025d8:	10008200 	.word	0x10008200
 80025dc:	40020880 	.word	0x40020880

080025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d04a      	beq.n	800268c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d847      	bhi.n	800268c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d022      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01d      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d018      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a15      	ldr	r2, [pc, #84]	; (80026bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002668:	671a      	str	r2, [r3, #112]	; 0x70
 800266a:	e009      	b.n	8002680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800267e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	58025408 	.word	0x58025408
 800269c:	5802541c 	.word	0x5802541c
 80026a0:	58025430 	.word	0x58025430
 80026a4:	58025444 	.word	0x58025444
 80026a8:	58025458 	.word	0x58025458
 80026ac:	5802546c 	.word	0x5802546c
 80026b0:	58025480 	.word	0x58025480
 80026b4:	58025494 	.word	0x58025494
 80026b8:	1600963f 	.word	0x1600963f
 80026bc:	58025940 	.word	0x58025940
 80026c0:	1000823f 	.word	0x1000823f
 80026c4:	40020940 	.word	0x40020940

080026c8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	7a1b      	ldrb	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d155      	bne.n	800278e <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a4b      	ldr	r2, [pc, #300]	; (8002814 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d049      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a49      	ldr	r2, [pc, #292]	; (8002818 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d044      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a48      	ldr	r2, [pc, #288]	; (800281c <HAL_DMAEx_ConfigMuxSync+0x154>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d03f      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a46      	ldr	r2, [pc, #280]	; (8002820 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d03a      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a45      	ldr	r2, [pc, #276]	; (8002824 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d035      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a43      	ldr	r2, [pc, #268]	; (8002828 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d030      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d02b      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a40      	ldr	r2, [pc, #256]	; (8002830 <HAL_DMAEx_ConfigMuxSync+0x168>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d026      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3f      	ldr	r2, [pc, #252]	; (8002834 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d021      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3d      	ldr	r2, [pc, #244]	; (8002838 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01c      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_DMAEx_ConfigMuxSync+0x174>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d017      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d012      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a39      	ldr	r2, [pc, #228]	; (8002844 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00d      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_DMAEx_ConfigMuxSync+0x180>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d008      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_DMAEx_ConfigMuxSync+0x188>)
 800277e:	4293      	cmp	r3, r2
 8002780:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d131      	bne.n	80027fe <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_DMAEx_ConfigMuxSync+0xe0>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e02f      	b.n	8002808 <HAL_DMAEx_ConfigMuxSync+0x140>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80027be:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b2d9      	uxtb	r1, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	061a      	lsls	r2, r3, #24
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	04db      	lsls	r3, r3, #19
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	431a      	orrs	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7a1b      	ldrb	r3, [r3, #8]
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7a5b      	ldrb	r3, [r3, #9]
 80027e6:	025b      	lsls	r3, r3, #9
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e004      	b.n	8002808 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40020010 	.word	0x40020010
 8002818:	40020028 	.word	0x40020028
 800281c:	40020040 	.word	0x40020040
 8002820:	40020058 	.word	0x40020058
 8002824:	40020070 	.word	0x40020070
 8002828:	40020088 	.word	0x40020088
 800282c:	400200a0 	.word	0x400200a0
 8002830:	400200b8 	.word	0x400200b8
 8002834:	40020410 	.word	0x40020410
 8002838:	40020428 	.word	0x40020428
 800283c:	40020440 	.word	0x40020440
 8002840:	40020458 	.word	0x40020458
 8002844:	40020470 	.word	0x40020470
 8002848:	40020488 	.word	0x40020488
 800284c:	400204a0 	.word	0x400204a0
 8002850:	400204b8 	.word	0x400204b8

08002854 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01a      	beq.n	80028a2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002884:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d022      	beq.n	80028f0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01a      	beq.n	80028f0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
      }
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002906:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <HAL_GPIO_Init+0x228>)
 8002908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800290a:	e18c      	b.n	8002c26 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 817e 	beq.w	8002c20 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <HAL_GPIO_Init+0x44>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d130      	bne.n	800299e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002972:	2201      	movs	r2, #1
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0201 	and.w	r2, r3, #1
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d017      	beq.n	80029da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d123      	bne.n	8002a2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	69b9      	ldr	r1, [r7, #24]
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0203 	and.w	r2, r3, #3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d8 	beq.w	8002c20 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_GPIO_Init+0x22c>)
 8002a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a76:	4a2b      	ldr	r2, [pc, #172]	; (8002b24 <HAL_GPIO_Init+0x22c>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_GPIO_Init+0x22c>)
 8002a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8e:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_GPIO_Init+0x230>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_GPIO_Init+0x234>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d04a      	beq.n	8002b50 <HAL_GPIO_Init+0x258>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_GPIO_Init+0x238>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02b      	beq.n	8002b1a <HAL_GPIO_Init+0x222>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_GPIO_Init+0x23c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d025      	beq.n	8002b16 <HAL_GPIO_Init+0x21e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_GPIO_Init+0x240>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <HAL_GPIO_Init+0x244>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x216>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_GPIO_Init+0x248>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x212>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_GPIO_Init+0x24c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <HAL_GPIO_Init+0x250>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x20a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <HAL_GPIO_Init+0x254>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x206>
 8002afa:	2309      	movs	r3, #9
 8002afc:	e029      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002afe:	230a      	movs	r3, #10
 8002b00:	e027      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b02:	2307      	movs	r3, #7
 8002b04:	e025      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b06:	2306      	movs	r3, #6
 8002b08:	e023      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	e021      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	e01f      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b12:	2303      	movs	r3, #3
 8002b14:	e01d      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e01b      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e019      	b.n	8002b52 <HAL_GPIO_Init+0x25a>
 8002b1e:	bf00      	nop
 8002b20:	58000080 	.word	0x58000080
 8002b24:	58024400 	.word	0x58024400
 8002b28:	58000400 	.word	0x58000400
 8002b2c:	58020000 	.word	0x58020000
 8002b30:	58020400 	.word	0x58020400
 8002b34:	58020800 	.word	0x58020800
 8002b38:	58020c00 	.word	0x58020c00
 8002b3c:	58021000 	.word	0x58021000
 8002b40:	58021400 	.word	0x58021400
 8002b44:	58021800 	.word	0x58021800
 8002b48:	58021c00 	.word	0x58021c00
 8002b4c:	58022400 	.word	0x58022400
 8002b50:	2300      	movs	r3, #0
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	f002 0203 	and.w	r2, r2, #3
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	4093      	lsls	r3, r2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b62:	4938      	ldr	r1, [pc, #224]	; (8002c44 <HAL_GPIO_Init+0x34c>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3301      	adds	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f47f ae6b 	bne.w	800290c <HAL_GPIO_Init+0x14>
  }
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	3724      	adds	r7, #36	; 0x24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	58000400 	.word	0x58000400

08002c48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d00a      	beq.n	8002c72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e03f      	b.n	8002cee <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e03d      	b.n	8002cee <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c7a:	491f      	ldr	r1, [pc, #124]	; (8002cf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c82:	f7fd fd47 	bl	8000714 <HAL_GetTick>
 8002c86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c88:	e009      	b.n	8002c9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c8a:	f7fd fd43 	bl	8000714 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c98:	d901      	bls.n	8002c9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e027      	b.n	8002cee <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d1ee      	bne.n	8002c8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b1e      	cmp	r3, #30
 8002cb0:	d008      	beq.n	8002cc4 <HAL_PWREx_ConfigSupply+0x7c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002cb6:	d005      	beq.n	8002cc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b1d      	cmp	r3, #29
 8002cbc:	d002      	beq.n	8002cc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b2d      	cmp	r3, #45	; 0x2d
 8002cc2:	d113      	bne.n	8002cec <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002cc4:	f7fd fd26 	bl	8000714 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cca:	e009      	b.n	8002ce0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ccc:	f7fd fd22 	bl	8000714 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cda:	d901      	bls.n	8002ce0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e006      	b.n	8002cee <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0311 	and.w	r3, r3, #17
 8002ce8:	2b11      	cmp	r3, #17
 8002cea:	d1ef      	bne.n	8002ccc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	58024800 	.word	0x58024800

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	; 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e397      	b.n	800343e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8087 	beq.w	8002e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1c:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d26:	4b9c      	ldr	r3, [pc, #624]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d007      	beq.n	8002d42 <HAL_RCC_OscConfig+0x46>
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b18      	cmp	r3, #24
 8002d36:	d110      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5e>
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d42:	4b95      	ldr	r3, [pc, #596]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d06c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x12c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d168      	bne.n	8002e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e371      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x76>
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a8b      	ldr	r2, [pc, #556]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a86      	ldr	r2, [pc, #536]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a83      	ldr	r2, [pc, #524]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0xbc>
 8002d9e:	4b7e      	ldr	r3, [pc, #504]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7d      	ldr	r2, [pc, #500]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7a      	ldr	r2, [pc, #488]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002db8:	4b77      	ldr	r3, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a76      	ldr	r2, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b74      	ldr	r3, [pc, #464]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a73      	ldr	r2, [pc, #460]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fd fc9c 	bl	8000714 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fd fc98 	bl	8000714 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e325      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df2:	4b69      	ldr	r3, [pc, #420]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe4>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fd fc88 	bl	8000714 <HAL_GetTick>
 8002e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fd fc84 	bl	8000714 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e311      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x10c>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 808a 	beq.w	8002f4c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e38:	4b57      	ldr	r3, [pc, #348]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e42:	4b55      	ldr	r3, [pc, #340]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_RCC_OscConfig+0x162>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	d137      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c8>
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d132      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e2e3      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0219 	bic.w	r2, r3, #25
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4945      	ldr	r1, [pc, #276]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e88:	f7fd fc44 	bl	8000714 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fd fc40 	bl	8000714 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2cd      	b.n	800343e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	4936      	ldr	r1, [pc, #216]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec2:	e043      	b.n	8002f4c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d026      	beq.n	8002f1a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ecc:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 0219 	bic.w	r2, r3, #25
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	492f      	ldr	r1, [pc, #188]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fd fc19 	bl	8000714 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fd fc15 	bl	8000714 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2a2      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	4921      	ldr	r1, [pc, #132]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fd fbf5 	bl	8000714 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fd fbf1 	bl	8000714 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e27e      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d06d      	beq.n	8003034 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCC_OscConfig+0x282>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b18      	cmp	r3, #24
 8002f72:	d11e      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d119      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2a0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d004      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e253      	b.n	800343e <HAL_RCC_OscConfig+0x742>
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f9c:	4ba3      	ldr	r3, [pc, #652]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	49a0      	ldr	r1, [pc, #640]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb0:	e040      	b.n	8003034 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d023      	beq.n	8003002 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fba:	4b9c      	ldr	r3, [pc, #624]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a9b      	ldr	r2, [pc, #620]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fd fba5 	bl	8000714 <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fce:	f7fd fba1 	bl	8000714 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e22e      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe0:	4b92      	ldr	r3, [pc, #584]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fec:	4b8f      	ldr	r3, [pc, #572]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	498c      	ldr	r1, [pc, #560]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
 8003000:	e018      	b.n	8003034 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003002:	4b8a      	ldr	r3, [pc, #552]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a89      	ldr	r2, [pc, #548]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fd fb81 	bl	8000714 <HAL_GetTick>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003016:	f7fd fb7d 	bl	8000714 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e20a      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003028:	4b80      	ldr	r3, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x530>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d036      	beq.n	80030ae <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d019      	beq.n	800307c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003048:	4b78      	ldr	r3, [pc, #480]	; (800322c <HAL_RCC_OscConfig+0x530>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	4a77      	ldr	r2, [pc, #476]	; (800322c <HAL_RCC_OscConfig+0x530>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fd fb5e 	bl	8000714 <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fd fb5a 	bl	8000714 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1e7      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x360>
 800307a:	e018      	b.n	80030ae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b6b      	ldr	r3, [pc, #428]	; (800322c <HAL_RCC_OscConfig+0x530>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fd fb44 	bl	8000714 <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd fb40 	bl	8000714 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1cd      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c2:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a59      	ldr	r2, [pc, #356]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80030c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ce:	f7fd fb21 	bl	8000714 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030d6:	f7fd fb1d 	bl	8000714 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1aa      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3da>
 80030f4:	e018      	b.n	8003128 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f6:	4b4d      	ldr	r3, [pc, #308]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4c      	ldr	r2, [pc, #304]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80030fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003102:	f7fd fb07 	bl	8000714 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800310a:	f7fd fb03 	bl	8000714 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e190      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x530>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8085 	beq.w	8003240 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_RCC_OscConfig+0x534>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <HAL_RCC_OscConfig+0x534>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003142:	f7fd fae7 	bl	8000714 <HAL_GetTick>
 8003146:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fd fae3 	bl	8000714 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e170      	b.n	800343e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_OscConfig+0x534>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x482>
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a2d      	ldr	r2, [pc, #180]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e02d      	b.n	80031da <HAL_RCC_OscConfig+0x4de>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4a4>
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a28      	ldr	r2, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x530>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x4de>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4c6>
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x4de>
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_RCC_OscConfig+0x530>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fd fa97 	bl	8000714 <HAL_GetTick>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd fa93 	bl	8000714 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e11e      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_OscConfig+0x530>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x4ee>
 800320c:	e018      	b.n	8003240 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fd fa81 	bl	8000714 <HAL_GetTick>
 8003212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003214:	e00e      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fd fa7d 	bl	8000714 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d905      	bls.n	8003234 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e108      	b.n	800343e <HAL_RCC_OscConfig+0x742>
 800322c:	58024400 	.word	0x58024400
 8003230:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003234:	4b84      	ldr	r3, [pc, #528]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ea      	bne.n	8003216 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80f9 	beq.w	800343c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003252:	2b18      	cmp	r3, #24
 8003254:	f000 80b4 	beq.w	80033c0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b02      	cmp	r3, #2
 800325e:	f040 8095 	bne.w	800338c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b79      	ldr	r3, [pc, #484]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a78      	ldr	r2, [pc, #480]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fd fa51 	bl	8000714 <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fd fa4d 	bl	8000714 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0da      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003294:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003298:	4b6c      	ldr	r3, [pc, #432]	; (800344c <HAL_RCC_OscConfig+0x750>)
 800329a:	4013      	ands	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	430a      	orrs	r2, r1
 80032a8:	4967      	ldr	r1, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	628b      	str	r3, [r1, #40]	; 0x28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	3b01      	subs	r3, #1
 80032b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	3b01      	subs	r3, #1
 80032be:	025b      	lsls	r3, r3, #9
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	3b01      	subs	r3, #1
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	3b01      	subs	r3, #1
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032de:	495a      	ldr	r1, [pc, #360]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80032e4:	4b58      	ldr	r3, [pc, #352]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4a57      	ldr	r2, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032f0:	4b55      	ldr	r3, [pc, #340]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f4:	4b56      	ldr	r3, [pc, #344]	; (8003450 <HAL_RCC_OscConfig+0x754>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032fc:	00d2      	lsls	r2, r2, #3
 80032fe:	4952      	ldr	r1, [pc, #328]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003300:	4313      	orrs	r3, r2
 8003302:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	f023 020c 	bic.w	r2, r3, #12
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f023 0202 	bic.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	4949      	ldr	r1, [pc, #292]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003328:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	4a46      	ldr	r2, [pc, #280]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003334:	4b44      	ldr	r3, [pc, #272]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4a43      	ldr	r2, [pc, #268]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800333a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003340:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd f9d6 	bl	8000714 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd f9d2 	bl	8000714 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e05f      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x670>
 800338a:	e057      	b.n	800343c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd f9bc 	bl	8000714 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd f9b8 	bl	8000714 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e045      	b.n	800343e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033b2:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x6a4>
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_OscConfig+0x74c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d031      	beq.n	8003438 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d12a      	bne.n	8003438 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d122      	bne.n	8003438 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d11a      	bne.n	8003438 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	0a5b      	lsrs	r3, r3, #9
 8003406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d111      	bne.n	8003438 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0c1b      	lsrs	r3, r3, #16
 8003418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d108      	bne.n	8003438 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0e1b      	lsrs	r3, r3, #24
 800342a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400
 800344c:	fffffc0c 	.word	0xfffffc0c
 8003450:	ffff0007 	.word	0xffff0007

08003454 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e19c      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b8a      	ldr	r3, [pc, #552]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b87      	ldr	r3, [pc, #540]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	4985      	ldr	r1, [pc, #532]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b83      	ldr	r3, [pc, #524]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e184      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	4b7b      	ldr	r3, [pc, #492]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d908      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034b4:	4b78      	ldr	r3, [pc, #480]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	4975      	ldr	r1, [pc, #468]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	4b70      	ldr	r3, [pc, #448]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034de:	429a      	cmp	r2, r3
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	496a      	ldr	r1, [pc, #424]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	4b64      	ldr	r3, [pc, #400]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800350c:	429a      	cmp	r2, r3
 800350e:	d908      	bls.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	495e      	ldr	r1, [pc, #376]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 800351e:	4313      	orrs	r3, r2
 8003520:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800353a:	429a      	cmp	r2, r3
 800353c:	d908      	bls.n	8003550 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800353e:	4b56      	ldr	r3, [pc, #344]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4953      	ldr	r1, [pc, #332]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 800354c:	4313      	orrs	r3, r2
 800354e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	429a      	cmp	r2, r3
 800356a:	d908      	bls.n	800357e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f023 020f 	bic.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4947      	ldr	r1, [pc, #284]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 800357a:	4313      	orrs	r3, r2
 800357c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d055      	beq.n	8003636 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4940      	ldr	r1, [pc, #256]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003598:	4313      	orrs	r3, r2
 800359a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a4:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d121      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0f6      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d115      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0ea      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0de      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0d6      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f023 0207 	bic.w	r2, r3, #7
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4925      	ldr	r1, [pc, #148]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fd f885 	bl	8000714 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360c:	e00a      	b.n	8003624 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360e:	f7fd f881 	bl	8000714 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0be      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	429a      	cmp	r2, r3
 8003634:	d1eb      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d010      	beq.n	8003664 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	429a      	cmp	r2, r3
 8003650:	d208      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	490e      	ldr	r1, [pc, #56]	; (8003698 <HAL_RCC_ClockConfig+0x244>)
 8003660:	4313      	orrs	r3, r2
 8003662:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d214      	bcs.n	800369c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	4906      	ldr	r1, [pc, #24]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_RCC_ClockConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e086      	b.n	80037a2 <HAL_RCC_ClockConfig+0x34e>
 8003694:	52002000 	.word	0x52002000
 8003698:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d208      	bcs.n	80036ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b8:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4939      	ldr	r1, [pc, #228]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d208      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	492e      	ldr	r1, [pc, #184]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	4b28      	ldr	r3, [pc, #160]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003710:	429a      	cmp	r2, r3
 8003712:	d208      	bcs.n	8003726 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4922      	ldr	r1, [pc, #136]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003722:	4313      	orrs	r3, r2
 8003724:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800373e:	429a      	cmp	r2, r3
 8003740:	d208      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003742:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4917      	ldr	r1, [pc, #92]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003750:	4313      	orrs	r3, r2
 8003752:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003754:	f000 f834 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	4912      	ldr	r1, [pc, #72]	; (80037b0 <HAL_RCC_ClockConfig+0x35c>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCC_ClockConfig+0x358>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_RCC_ClockConfig+0x35c>)
 800377c:	5cd3      	ldrb	r3, [r2, r3]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x360>)
 800378a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800378c:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_RCC_ClockConfig+0x364>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x368>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc ff72 	bl	8000680 <HAL_InitTick>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
 80037b0:	0800a290 	.word	0x0800a290
 80037b4:	2400040c 	.word	0x2400040c
 80037b8:	24000408 	.word	0x24000408
 80037bc:	24000400 	.word	0x24000400

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c6:	4bb3      	ldr	r3, [pc, #716]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ce:	2b18      	cmp	r3, #24
 80037d0:	f200 8155 	bhi.w	8003a7e <HAL_RCC_GetSysClockFreq+0x2be>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003841 	.word	0x08003841
 80037e0:	08003a7f 	.word	0x08003a7f
 80037e4:	08003a7f 	.word	0x08003a7f
 80037e8:	08003a7f 	.word	0x08003a7f
 80037ec:	08003a7f 	.word	0x08003a7f
 80037f0:	08003a7f 	.word	0x08003a7f
 80037f4:	08003a7f 	.word	0x08003a7f
 80037f8:	08003a7f 	.word	0x08003a7f
 80037fc:	08003867 	.word	0x08003867
 8003800:	08003a7f 	.word	0x08003a7f
 8003804:	08003a7f 	.word	0x08003a7f
 8003808:	08003a7f 	.word	0x08003a7f
 800380c:	08003a7f 	.word	0x08003a7f
 8003810:	08003a7f 	.word	0x08003a7f
 8003814:	08003a7f 	.word	0x08003a7f
 8003818:	08003a7f 	.word	0x08003a7f
 800381c:	0800386d 	.word	0x0800386d
 8003820:	08003a7f 	.word	0x08003a7f
 8003824:	08003a7f 	.word	0x08003a7f
 8003828:	08003a7f 	.word	0x08003a7f
 800382c:	08003a7f 	.word	0x08003a7f
 8003830:	08003a7f 	.word	0x08003a7f
 8003834:	08003a7f 	.word	0x08003a7f
 8003838:	08003a7f 	.word	0x08003a7f
 800383c:	08003873 	.word	0x08003873
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003840:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800384c:	4b91      	ldr	r3, [pc, #580]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	4a90      	ldr	r2, [pc, #576]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800385e:	e111      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003860:	4b8d      	ldr	r3, [pc, #564]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003862:	61bb      	str	r3, [r7, #24]
    break;
 8003864:	e10e      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003866:	4b8d      	ldr	r3, [pc, #564]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003868:	61bb      	str	r3, [r7, #24]
    break;
 800386a:	e10b      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800386c:	4b8c      	ldr	r3, [pc, #560]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800386e:	61bb      	str	r3, [r7, #24]
    break;
 8003870:	e108      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003872:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800387c:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003886:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003888:	4b82      	ldr	r3, [pc, #520]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80e1 	beq.w	8003a78 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f000 8083 	beq.w	80039c4 <HAL_RCC_GetSysClockFreq+0x204>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f200 80a1 	bhi.w	8003a08 <HAL_RCC_GetSysClockFreq+0x248>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x114>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d056      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038d2:	e099      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d4:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02d      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038e0:	4b6c      	ldr	r3, [pc, #432]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	4a6b      	ldr	r2, [pc, #428]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b62      	ldr	r3, [pc, #392]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a02 	vldr	s12, [r7, #8]
 800391e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800393a:	e087      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003aa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003962:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800397e:	e065      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003aac <HAL_RCC_GetSysClockFreq+0x2ec>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c2:	e043      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ab0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a06:	e021      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003aac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a4a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	0a5b      	lsrs	r3, r3, #9
 8003a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a56:	3301      	adds	r3, #1
 8003a58:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a70:	ee17 3a90 	vmov	r3, s15
 8003a74:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a80:	61bb      	str	r3, [r7, #24]
    break;
 8003a82:	bf00      	nop
  }

  return sysclockfreq;
 8003a84:	69bb      	ldr	r3, [r7, #24]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
 8003a98:	03d09000 	.word	0x03d09000
 8003a9c:	003d0900 	.word	0x003d0900
 8003aa0:	017d7840 	.word	0x017d7840
 8003aa4:	46000000 	.word	0x46000000
 8003aa8:	4c742400 	.word	0x4c742400
 8003aac:	4a742400 	.word	0x4a742400
 8003ab0:	4bbebc20 	.word	0x4bbebc20

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003aba:	f7ff fe81 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490f      	ldr	r1, [pc, #60]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8003af0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003af2:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024400 	.word	0x58024400
 8003b08:	0800a290 	.word	0x0800a290
 8003b0c:	2400040c 	.word	0x2400040c
 8003b10:	24000408 	.word	0x24000408

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b18:	f7ff ffcc 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	0800a290 	.word	0x0800a290

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b44:	f7ff ffb6 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	58024400 	.word	0x58024400
 8003b68:	0800a290 	.word	0x0800a290

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03f      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b90:	d02a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b96:	d824      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9c:	d018      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba2:	d81e      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bae:	e018      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4bab      	ldr	r3, [pc, #684]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4aaa      	ldr	r2, [pc, #680]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bbc:	e015      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 feff 	bl	80059c8 <RCCEx_PLL2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bce:	e00c      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 ffa8 	bl	8005b2c <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
      break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bf0:	4b9b      	ldr	r3, [pc, #620]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfc:	4998      	ldr	r1, [pc, #608]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	650b      	str	r3, [r1, #80]	; 0x50
 8003c02:	e001      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d03d      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d826      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c39 	.word	0x08003c39
 8003c28:	08003c47 	.word	0x08003c47
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a88      	ldr	r2, [pc, #544]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 febb 	bl	80059c8 <RCCEx_PLL2_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c56:	e00c      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3324      	adds	r3, #36	; 0x24
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 ff64 	bl	8005b2c <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c78:	4b79      	ldr	r3, [pc, #484]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	f023 0207 	bic.w	r2, r3, #7
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	4976      	ldr	r1, [pc, #472]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	650b      	str	r3, [r1, #80]	; 0x50
 8003c8a:	e001      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d051      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003ca6:	d036      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ca8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003cac:	d830      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003cae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb2:	d032      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb8:	d82a      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003cba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cbe:	d02e      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003cc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cc4:	d824      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cca:	d018      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd0:	d81e      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cda:	d007      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003cdc:	e018      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cde:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	4a5f      	ldr	r2, [pc, #380]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cea:	e019      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fe68 	bl	80059c8 <RCCEx_PLL2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003cfc:	e010      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3324      	adds	r3, #36	; 0x24
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 ff11 	bl	8005b2c <RCCEx_PLL3_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d0e:	e007      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      break;
 8003d14:	e004      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d26:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d34:	494a      	ldr	r1, [pc, #296]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	658b      	str	r3, [r1, #88]	; 0x58
 8003d3a:	e001      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d051      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d52:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003d56:	d036      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003d58:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003d5c:	d830      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d62:	d032      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d68:	d82a      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d6e:	d02e      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003d70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d74:	d824      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d7a:	d018      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d80:	d81e      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d8a:	d007      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003d8c:	e018      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8e:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d9a:	e019      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fe10 	bl	80059c8 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003dac:	e010      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 feb9 	bl	8005b2c <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e007      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e002      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dd6:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003de4:	491e      	ldr	r1, [pc, #120]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	658b      	str	r3, [r1, #88]	; 0x58
 8003dea:	e001      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d035      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d01c      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d817      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d00c      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d813      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d10f      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003e24:	e00e      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 fdcb 	bl	80059c8 <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	4902      	ldr	r1, [pc, #8]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e5c:	e004      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d047      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7c:	d030      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e82:	d82a      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e88:	d02c      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e8e:	d824      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d018      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	d81e      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d007      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ea6:	e018      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4bac      	ldr	r3, [pc, #688]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4aab      	ldr	r2, [pc, #684]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003eb4:	e017      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fd83 	bl	80059c8 <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ec6:	e00e      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3324      	adds	r3, #36	; 0x24
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 fe2c 	bl	8005b2c <RCCEx_PLL3_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ed8:	e005      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003eec:	4b9b      	ldr	r3, [pc, #620]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	4998      	ldr	r1, [pc, #608]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	650b      	str	r3, [r1, #80]	; 0x50
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d049      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003f1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1e:	d828      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f24:	d02a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f2a:	d822      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f30:	d026      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f36:	d81c      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3c:	d010      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f42:	d816      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01d      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d111      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 fd37 	bl	80059c8 <RCCEx_PLL2_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e012      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fde0 	bl	8005b2c <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f70:	e009      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
      break;
 8003f76:	e006      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e004      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003f7c:	bf00      	nop
 8003f7e:	e002      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f8c:	4b73      	ldr	r3, [pc, #460]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	4970      	ldr	r1, [pc, #448]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d04b      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fba:	d02e      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fc0:	d828      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d02a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d822      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fd2:	d026      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fd8:	d81c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fde:	d010      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe4:	d816      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01d      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fee:	d111      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fce6 	bl	80059c8 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004000:	e012      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fd8f 	bl	8005b2c <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800402e:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800403c:	4947      	ldr	r1, [pc, #284]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	658b      	str	r3, [r1, #88]	; 0x58
 8004042:	e001      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800405c:	d00e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	d814      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406c:	d10f      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406e:	4b3b      	ldr	r3, [pc, #236]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	4a3a      	ldr	r2, [pc, #232]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800407a:	e00c      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fca0 	bl	80059c8 <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
      break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a8:	492c      	ldr	r1, [pc, #176]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	650b      	str	r3, [r1, #80]	; 0x50
 80040ae:	e001      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d032      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d81b      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	08004107 	.word	0x08004107
 80040d4:	080040e1 	.word	0x080040e1
 80040d8:	080040ef 	.word	0x080040ef
 80040dc:	08004107 	.word	0x08004107
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4a1d      	ldr	r2, [pc, #116]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040ec:	e00c      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fc67 	bl	80059c8 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	4910      	ldr	r1, [pc, #64]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004120:	e001      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 808a 	beq.w	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004140:	f7fc fae8 	bl	8000714 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004146:	e00d      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004148:	f7fc fae4 	bl	8000714 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d906      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	75fb      	strb	r3, [r7, #23]
        break;
 800415a:	e009      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800415c:	58024400 	.word	0x58024400
 8004160:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004164:	4bb9      	ldr	r3, [pc, #740]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0eb      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d166      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004176:	4bb6      	ldr	r3, [pc, #728]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004180:	4053      	eors	r3, r2
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418a:	4bb1      	ldr	r3, [pc, #708]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004192:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004194:	4bae      	ldr	r3, [pc, #696]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4aad      	ldr	r2, [pc, #692]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041a0:	4bab      	ldr	r3, [pc, #684]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4aaa      	ldr	r2, [pc, #680]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041ac:	4aa8      	ldr	r2, [pc, #672]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d115      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fc faa9 	bl	8000714 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c4:	e00b      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fc faa5 	bl	8000714 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d902      	bls.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	75fb      	strb	r3, [r7, #23]
            break;
 80041dc:	e005      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041de:	4b9c      	ldr	r3, [pc, #624]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ed      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d126      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041fe:	d10d      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004200:	4b93      	ldr	r3, [pc, #588]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800420e:	0919      	lsrs	r1, r3, #4
 8004210:	4b90      	ldr	r3, [pc, #576]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004212:	400b      	ands	r3, r1
 8004214:	498e      	ldr	r1, [pc, #568]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	610b      	str	r3, [r1, #16]
 800421a:	e005      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800421c:	4b8c      	ldr	r3, [pc, #560]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	4a8b      	ldr	r2, [pc, #556]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004222:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004226:	6113      	str	r3, [r2, #16]
 8004228:	4b89      	ldr	r3, [pc, #548]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800422a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004236:	4986      	ldr	r1, [pc, #536]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004238:	4313      	orrs	r3, r2
 800423a:	670b      	str	r3, [r1, #112]	; 0x70
 800423c:	e004      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	75bb      	strb	r3, [r7, #22]
 8004242:	e001      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	2b28      	cmp	r3, #40	; 0x28
 800425a:	d867      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004333 	.word	0x08004333
 8004268:	0800432d 	.word	0x0800432d
 800426c:	0800432d 	.word	0x0800432d
 8004270:	0800432d 	.word	0x0800432d
 8004274:	0800432d 	.word	0x0800432d
 8004278:	0800432d 	.word	0x0800432d
 800427c:	0800432d 	.word	0x0800432d
 8004280:	0800432d 	.word	0x0800432d
 8004284:	08004309 	.word	0x08004309
 8004288:	0800432d 	.word	0x0800432d
 800428c:	0800432d 	.word	0x0800432d
 8004290:	0800432d 	.word	0x0800432d
 8004294:	0800432d 	.word	0x0800432d
 8004298:	0800432d 	.word	0x0800432d
 800429c:	0800432d 	.word	0x0800432d
 80042a0:	0800432d 	.word	0x0800432d
 80042a4:	0800431b 	.word	0x0800431b
 80042a8:	0800432d 	.word	0x0800432d
 80042ac:	0800432d 	.word	0x0800432d
 80042b0:	0800432d 	.word	0x0800432d
 80042b4:	0800432d 	.word	0x0800432d
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	0800432d 	.word	0x0800432d
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	08004333 	.word	0x08004333
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800432d 	.word	0x0800432d
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	0800432d 	.word	0x0800432d
 80042e4:	08004333 	.word	0x08004333
 80042e8:	0800432d 	.word	0x0800432d
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800432d 	.word	0x0800432d
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004333 	.word	0x08004333
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fb5a 	bl	80059c8 <RCCEx_PLL2_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004318:	e00c      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3324      	adds	r3, #36	; 0x24
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f001 fc03 	bl	8005b2c <RCCEx_PLL3_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800432a:	e003      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800433a:	4b45      	ldr	r3, [pc, #276]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004346:	4942      	ldr	r1, [pc, #264]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	654b      	str	r3, [r1, #84]	; 0x54
 800434c:	e001      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d037      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	2b05      	cmp	r3, #5
 8004364:	d820      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043af 	.word	0x080043af
 8004370:	08004385 	.word	0x08004385
 8004374:	08004397 	.word	0x08004397
 8004378:	080043af 	.word	0x080043af
 800437c:	080043af 	.word	0x080043af
 8004380:	080043af 	.word	0x080043af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f001 fb1c 	bl	80059c8 <RCCEx_PLL2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004394:	e00c      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3324      	adds	r3, #36	; 0x24
 800439a:	2101      	movs	r1, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fbc5 	bl	8005b2c <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	75fb      	strb	r3, [r7, #23]
      break;
 80043ac:	e000      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80043ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f023 0207 	bic.w	r2, r3, #7
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4923      	ldr	r1, [pc, #140]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	654b      	str	r3, [r1, #84]	; 0x54
 80043c8:	e001      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d040      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	d821      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	0800442f 	.word	0x0800442f
 80043f0:	08004405 	.word	0x08004405
 80043f4:	08004417 	.word	0x08004417
 80043f8:	0800442f 	.word	0x0800442f
 80043fc:	0800442f 	.word	0x0800442f
 8004400:	0800442f 	.word	0x0800442f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fadc 	bl	80059c8 <RCCEx_PLL2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004414:	e00c      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fb85 	bl	8005b2c <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004426:	e003      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
      break;
 800442c:	e000      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800442e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d110      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004444:	4902      	ldr	r1, [pc, #8]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	658b      	str	r3, [r1, #88]	; 0x58
 800444a:	e007      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800444c:	58024800 	.word	0x58024800
 8004450:	58024400 	.word	0x58024400
 8004454:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d04b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004472:	d02e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004478:	d828      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d02a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d822      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800448a:	d026      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800448c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004490:	d81c      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004496:	d010      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449c:	d816      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01d      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x972>
 80044a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a6:	d111      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fa8a 	bl	80059c8 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044b8:	e012      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fb33 	bl	8005b2c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044ca:	e009      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e006      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80044de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044e6:	4bb2      	ldr	r3, [pc, #712]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	49ae      	ldr	r1, [pc, #696]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	654b      	str	r3, [r1, #84]	; 0x54
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d04b      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004512:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004516:	d02e      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004518:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800451c:	d828      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d02a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	d822      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800452a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800452e:	d026      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004534:	d81c      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453a:	d010      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004540:	d816      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01d      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d111      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fa38 	bl	80059c8 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800455c:	e012      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3324      	adds	r3, #36	; 0x24
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f001 fae1 	bl	8005b2c <RCCEx_PLL3_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800456e:	e009      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	75fb      	strb	r3, [r7, #23]
      break;
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004576:	bf00      	nop
 8004578:	e004      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800457a:	bf00      	nop
 800457c:	e002      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800458a:	4b89      	ldr	r3, [pc, #548]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004598:	4985      	ldr	r1, [pc, #532]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800459a:	4313      	orrs	r3, r2
 800459c:	658b      	str	r3, [r1, #88]	; 0x58
 800459e:	e001      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d04b      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045ba:	d02e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80045bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045c0:	d828      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c6:	d02a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80045c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045cc:	d822      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80045ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045d2:	d026      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80045d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045d8:	d81c      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045de:	d010      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80045e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e4:	d816      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01d      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80045ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ee:	d111      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 f9e6 	bl	80059c8 <RCCEx_PLL2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004600:	e012      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3324      	adds	r3, #36	; 0x24
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f001 fa8f 	bl	8005b2c <RCCEx_PLL3_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004612:	e009      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]
      break;
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800461a:	bf00      	nop
 800461c:	e004      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800462e:	4b60      	ldr	r3, [pc, #384]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463c:	495c      	ldr	r1, [pc, #368]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800463e:	4313      	orrs	r3, r2
 8004640:	658b      	str	r3, [r1, #88]	; 0x58
 8004642:	e001      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d018      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d10a      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3324      	adds	r3, #36	; 0x24
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f001 fa61 	bl	8005b2c <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004674:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004680:	494b      	ldr	r1, [pc, #300]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004682:	4313      	orrs	r3, r2
 8004684:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469c:	d10a      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 fa41 	bl	8005b2c <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046b4:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	493b      	ldr	r1, [pc, #236]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d034      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046de:	d01d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80046e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e4:	d817      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ee:	d009      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046f0:	e011      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 f965 	bl	80059c8 <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004702:	e00c      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fa0e 	bl	8005b2c <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
      break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800471c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004724:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004732:	491f      	ldr	r1, [pc, #124]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004734:	4313      	orrs	r3, r2
 8004736:	658b      	str	r3, [r1, #88]	; 0x58
 8004738:	e001      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004754:	d01c      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800475a:	d816      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800475c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004760:	d003      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004766:	d007      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004768:	e00f      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004776:	e00c      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f001 f9d4 	bl	8005b2c <RCCEx_PLL3_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
      break;
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10d      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a6:	4902      	ldr	r1, [pc, #8]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	654b      	str	r3, [r1, #84]	; 0x54
 80047ac:	e004      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d029      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d007      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80047d2:	e00f      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	4a60      	ldr	r2, [pc, #384]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047e0:	e00b      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f8ed 	bl	80059c8 <RCCEx_PLL2_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
      break;
 80047f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004800:	4b56      	ldr	r3, [pc, #344]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480c:	4953      	ldr	r1, [pc, #332]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004812:	e001      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f001 f97e 	bl	8005b2c <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d030      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800484e:	d017      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004854:	d811      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485a:	d013      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d80b      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486a:	d106      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	4a3a      	ldr	r2, [pc, #232]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004878:	e007      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
      break;
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004880:	bf00      	nop
 8004882:	e002      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004890:	4b32      	ldr	r3, [pc, #200]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489c:	492f      	ldr	r1, [pc, #188]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	654b      	str	r3, [r1, #84]	; 0x54
 80048a2:	e001      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c0:	4926      	ldr	r1, [pc, #152]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048de:	491f      	ldr	r1, [pc, #124]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048fa:	6113      	str	r3, [r2, #16]
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004906:	4915      	ldr	r1, [pc, #84]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	da08      	bge.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004940:	4906      	ldr	r1, [pc, #24]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004946:	7dbb      	ldrb	r3, [r7, #22]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400

08004960 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b090      	sub	sp, #64	; 0x40
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	f040 8089 	bne.w	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004972:	4b95      	ldr	r3, [pc, #596]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	2b04      	cmp	r3, #4
 8004980:	d87d      	bhi.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	0800499d 	.word	0x0800499d
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049e5 	.word	0x080049e5
 8004994:	08004a79 	.word	0x08004a79
 8004998:	08004a09 	.word	0x08004a09

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800499c:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049a8:	d107      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 feb8 	bl	8005724 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049b8:	e3ed      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049be:	e3ea      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049c0:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049cc:	d107      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ce:	f107 0318 	add.w	r3, r7, #24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fbfe 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049dc:	e3db      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049e2:	e3d8      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049e4:	4b78      	ldr	r3, [pc, #480]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f0:	d107      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049f2:	f107 030c 	add.w	r3, r7, #12
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fd40 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a00:	e3c9      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a06:	e3c6      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a08:	4b6f      	ldr	r3, [pc, #444]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a12:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a24:	4b68      	ldr	r3, [pc, #416]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	4a67      	ldr	r2, [pc, #412]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a36:	e01e      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a38:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a44:	d106      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4c:	d102      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a4e:	4b60      	ldr	r3, [pc, #384]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a52:	e010      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a54:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a60:	d106      	bne.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a68:	d102      	bne.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a6a:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a6e:	e002      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a74:	e38f      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004a76:	e38e      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a78:	4b57      	ldr	r3, [pc, #348]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a7c:	e38b      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a82:	e388      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	f040 80a7 	bne.w	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004a8e:	4b4e      	ldr	r3, [pc, #312]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a9e:	d054      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa6:	f200 808b 	bhi.w	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ab0:	f000 8083 	beq.w	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004aba:	f200 8081 	bhi.w	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac4:	d02f      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004acc:	d878      	bhi.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ada:	d012      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004adc:	e070      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ade:	4b3a      	ldr	r3, [pc, #232]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aea:	d107      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fe17 	bl	8005724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004afa:	e34c      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b00:	e349      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b02:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b10:	f107 0318 	add.w	r3, r7, #24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fb5d 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b1e:	e33a      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b24:	e337      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b26:	4b28      	ldr	r3, [pc, #160]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b32:	d107      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fc9f 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b42:	e328      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b48:	e325      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b54:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d10c      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	4a16      	ldr	r2, [pc, #88]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b78:	e01e      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	d106      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b94:	e010      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb0:	e002      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004bb6:	e2ee      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004bb8:	e2ed      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbe:	e2ea      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bc4:	e2e7      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	03d09000 	.word	0x03d09000
 8004bd0:	003d0900 	.word	0x003d0900
 8004bd4:	017d7840 	.word	0x017d7840
 8004bd8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be2:	f040 809c 	bne.w	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004be6:	4b9e      	ldr	r3, [pc, #632]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf6:	d054      	beq.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bfe:	f200 808b 	bhi.w	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c08:	f000 8083 	beq.w	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c12:	f200 8081 	bhi.w	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c1c:	d02f      	beq.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c24:	d878      	bhi.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c32:	d012      	beq.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004c34:	e070      	b.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c36:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c42:	d107      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fd6b 	bl	8005724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c52:	e2a0      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c58:	e29d      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c5a:	4b81      	ldr	r3, [pc, #516]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c66:	d107      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c68:	f107 0318 	add.w	r3, r7, #24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fab1 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004c76:	e28e      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c7c:	e28b      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c7e:	4b78      	ldr	r3, [pc, #480]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c8c:	f107 030c 	add.w	r3, r7, #12
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fbf3 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c9a:	e27c      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca0:	e279      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ca2:	4b6f      	ldr	r3, [pc, #444]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cac:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cbe:	4b68      	ldr	r3, [pc, #416]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	08db      	lsrs	r3, r3, #3
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	4a66      	ldr	r2, [pc, #408]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd0:	e01e      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cd2:	4b63      	ldr	r3, [pc, #396]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d106      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce6:	d102      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ce8:	4b5f      	ldr	r3, [pc, #380]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cec:	e010      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cee:	4b5c      	ldr	r3, [pc, #368]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d02:	d102      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d08:	e002      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d0e:	e242      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004d10:	e241      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d12:	4b57      	ldr	r3, [pc, #348]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d16:	e23e      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d1c:	e23b      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	f040 80a6 	bne.w	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004d28:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d38:	d054      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d40:	f200 808b 	bhi.w	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d4a:	f000 8083 	beq.w	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d54:	f200 8081 	bhi.w	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5e:	d02f      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	d878      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d012      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004d76:	e070      	b.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d84:	d107      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fcca 	bl	8005724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d94:	e1ff      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d9a:	e1fc      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d9c:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004da8:	d107      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004daa:	f107 0318 	add.w	r3, r7, #24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fa10 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004db8:	e1ed      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dbe:	e1ea      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dc0:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dcc:	d107      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fb52 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ddc:	e1db      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de2:	e1d8      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	e01e      	b.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e14:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e20:	d106      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e28:	d102      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2e:	e010      	b.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e44:	d102      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4a:	e002      	b.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e50:	e1a1      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004e52:	e1a0      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e58:	e19d      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e5e:	e19a      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004e60:	58024400 	.word	0x58024400
 8004e64:	03d09000 	.word	0x03d09000
 8004e68:	003d0900 	.word	0x003d0900
 8004e6c:	017d7840 	.word	0x017d7840
 8004e70:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e7a:	d173      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004e7c:	4b9a      	ldr	r3, [pc, #616]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e8c:	d02f      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e94:	d863      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea2:	d012      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8004ea4:	e05b      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ea6:	4b90      	ldr	r3, [pc, #576]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb4:	f107 0318 	add.w	r3, r7, #24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f98b 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ec2:	e168      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec8:	e165      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eca:	4b87      	ldr	r3, [pc, #540]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 facd 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ee6:	e156      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eec:	e153      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004eee:	4b7e      	ldr	r3, [pc, #504]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ef8:	4b7b      	ldr	r3, [pc, #492]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d10c      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f0a:	4b77      	ldr	r3, [pc, #476]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	4a75      	ldr	r2, [pc, #468]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1c:	e01e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f1e:	4b72      	ldr	r3, [pc, #456]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f32:	d102      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f34:	4b6e      	ldr	r3, [pc, #440]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f38:	e010      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f3a:	4b6b      	ldr	r3, [pc, #428]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f46:	d106      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4e:	d102      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f50:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f5a:	e11c      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f5c:	e11b      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f62:	e118      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6a:	d133      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004f6c:	4b5e      	ldr	r3, [pc, #376]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f82:	d012      	beq.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004f84:	e023      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f86:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fbc3 	bl	8005724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fa2:	e0f8      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa8:	e0f5      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004faa:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fb8:	f107 0318 	add.w	r3, r7, #24
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f909 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fc6:	e0e6      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fcc:	e0e3      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd2:	e0e0      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fda:	f040 808d 	bne.w	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004fde:	4b42      	ldr	r3, [pc, #264]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fee:	d06b      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff6:	d874      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d056      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005006:	d86c      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800500e:	d03b      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005016:	d864      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501e:	d021      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005026:	d85c      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005034:	d004      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005036:	e054      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005038:	f000 f8b6 	bl	80051a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800503c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800503e:	e0aa      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504c:	d107      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800504e:	f107 0318 	add.w	r3, r7, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f8be 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800505c:	e09b      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005062:	e098      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800506c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005070:	d107      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fa00 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005080:	e089      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005086:	e086      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d109      	bne.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	08db      	lsrs	r3, r3, #3
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	4a13      	ldr	r2, [pc, #76]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050a6:	e076      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ac:	e073      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d102      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050c0:	e069      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c6:	e066      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050d4:	d102      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050da:	e05c      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e0:	e059      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e6:	e056      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050e8:	58024400 	.word	0x58024400
 80050ec:	03d09000 	.word	0x03d09000
 80050f0:	003d0900 	.word	0x003d0900
 80050f4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fe:	d148      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005108:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005110:	d02a      	beq.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005118:	d838      	bhi.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005126:	d00d      	beq.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005128:	e030      	b.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005136:	d102      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800513c:	e02b      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005142:	e028      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005144:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005150:	d107      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fae4 	bl	8005724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005160:	e019      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005166:	e016      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005174:	d107      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f82a 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005184:	e007      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800518a:	e004      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005190:	e001      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005198:	4618      	mov	r0, r3
 800519a:	3740      	adds	r7, #64	; 0x40
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	58024400 	.word	0x58024400
 80051a4:	017d7840 	.word	0x017d7840

080051a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80051ac:	f7fe fc82 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4904      	ldr	r1, [pc, #16]	; (80051d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	58024400 	.word	0x58024400
 80051d0:	0800a290 	.word	0x0800a290

080051d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051dc:	4ba1      	ldr	r3, [pc, #644]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80051e6:	4b9f      	ldr	r3, [pc, #636]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	0b1b      	lsrs	r3, r3, #12
 80051ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051f2:	4b9c      	ldr	r3, [pc, #624]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80051fe:	4b99      	ldr	r3, [pc, #612]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	08db      	lsrs	r3, r3, #3
 8005204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8111 	beq.w	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b02      	cmp	r3, #2
 8005226:	f000 8083 	beq.w	8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f200 80a1 	bhi.w	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d056      	beq.n	80052ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800523e:	e099      	b.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005240:	4b88      	ldr	r3, [pc, #544]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02d      	beq.n	80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800524c:	4b85      	ldr	r3, [pc, #532]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	08db      	lsrs	r3, r3, #3
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	4a84      	ldr	r2, [pc, #528]	; (8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	ee07 3a90 	vmov	s15, r3
 8005264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b7b      	ldr	r3, [pc, #492]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a03 	vldr	s12, [r7, #12]
 800528a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800546c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80052a6:	e087      	b.n	80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800546c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ea:	e065      	b.n	80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800546c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800532e:	e043      	b.n	80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b48      	ldr	r3, [pc, #288]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a03 	vldr	s12, [r7, #12]
 8005356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800546c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005372:	e021      	b.n	80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a03 	vldr	s12, [r7, #12]
 800539a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800546c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80053b8:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	0a5b      	lsrs	r3, r3, #9
 80053be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053de:	ee17 2a90 	vmov	r2, s15
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80053e6:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005400:	edd7 6a07 	vldr	s13, [r7, #28]
 8005404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540c:	ee17 2a90 	vmov	r2, s15
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005414:	4b13      	ldr	r3, [pc, #76]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800542a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800542e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543a:	ee17 2a90 	vmov	r2, s15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005442:	e008      	b.n	8005456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
}
 8005456:	bf00      	nop
 8005458:	3724      	adds	r7, #36	; 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	58024400 	.word	0x58024400
 8005468:	03d09000 	.word	0x03d09000
 800546c:	46000000 	.word	0x46000000
 8005470:	4c742400 	.word	0x4c742400
 8005474:	4a742400 	.word	0x4a742400
 8005478:	4bbebc20 	.word	0x4bbebc20

0800547c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005484:	4ba1      	ldr	r3, [pc, #644]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800548e:	4b9f      	ldr	r3, [pc, #636]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	0d1b      	lsrs	r3, r3, #20
 8005494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800549a:	4b9c      	ldr	r3, [pc, #624]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80054a6:	4b99      	ldr	r3, [pc, #612]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	08db      	lsrs	r3, r3, #3
 80054ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8111 	beq.w	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	f000 8083 	beq.w	80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f200 80a1 	bhi.w	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d056      	beq.n	8005594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054e6:	e099      	b.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e8:	4b88      	ldr	r3, [pc, #544]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02d      	beq.n	8005550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054f4:	4b85      	ldr	r3, [pc, #532]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	08db      	lsrs	r3, r3, #3
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	4a84      	ldr	r2, [pc, #528]	; (8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
 8005504:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551e:	4b7b      	ldr	r3, [pc, #492]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005532:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800554e:	e087      	b.n	8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005562:	4b6a      	ldr	r3, [pc, #424]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005572:	ed97 6a03 	vldr	s12, [r7, #12]
 8005576:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800557a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005592:	e065      	b.n	8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a6:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d6:	e043      	b.n	8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	4b48      	ldr	r3, [pc, #288]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800561a:	e021      	b.n	8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800562a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005642:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005660:	4b2a      	ldr	r3, [pc, #168]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	0a5b      	lsrs	r3, r3, #9
 8005666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567a:	edd7 6a07 	vldr	s13, [r7, #28]
 800567e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005686:	ee17 2a90 	vmov	r2, s15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800568e:	4b1f      	ldr	r3, [pc, #124]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	0c1b      	lsrs	r3, r3, #16
 8005694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b4:	ee17 2a90 	vmov	r2, s15
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80056bc:	4b13      	ldr	r3, [pc, #76]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	0e1b      	lsrs	r3, r3, #24
 80056c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e2:	ee17 2a90 	vmov	r2, s15
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056ea:	e008      	b.n	80056fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
}
 80056fe:	bf00      	nop
 8005700:	3724      	adds	r7, #36	; 0x24
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	58024400 	.word	0x58024400
 8005710:	03d09000 	.word	0x03d09000
 8005714:	46000000 	.word	0x46000000
 8005718:	4c742400 	.word	0x4c742400
 800571c:	4a742400 	.word	0x4a742400
 8005720:	4bbebc20 	.word	0x4bbebc20

08005724 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800572c:	4ba0      	ldr	r3, [pc, #640]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005736:	4b9e      	ldr	r3, [pc, #632]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005740:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005742:	4b9b      	ldr	r3, [pc, #620]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800574c:	4b98      	ldr	r3, [pc, #608]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005764:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8111 	beq.w	8005992 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2b02      	cmp	r3, #2
 8005774:	f000 8083 	beq.w	800587e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b02      	cmp	r3, #2
 800577c:	f200 80a1 	bhi.w	80058c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d056      	beq.n	800583a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800578c:	e099      	b.n	80058c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578e:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d02d      	beq.n	80057f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800579a:	4b85      	ldr	r3, [pc, #532]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	08db      	lsrs	r3, r3, #3
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	4a83      	ldr	r2, [pc, #524]	; (80059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c4:	4b7a      	ldr	r3, [pc, #488]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057f4:	e087      	b.n	8005906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005800:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80059bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005808:	4b69      	ldr	r3, [pc, #420]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005818:	ed97 6a03 	vldr	s12, [r7, #12]
 800581c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005838:	e065      	b.n	8005906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005844:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80059c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584c:	4b58      	ldr	r3, [pc, #352]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005854:	ee07 3a90 	vmov	s15, r3
 8005858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005860:	eddf 5a55 	vldr	s11, [pc, #340]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005878:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587c:	e043      	b.n	8005906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005888:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800588c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005890:	4b47      	ldr	r3, [pc, #284]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c0:	e021      	b.n	8005906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80059bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80058d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058dc:	ee07 3a90 	vmov	s15, r3
 80058e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005900:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005904:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005906:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	0a5b      	lsrs	r3, r3, #9
 800590c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005920:	edd7 6a07 	vldr	s13, [r7, #28]
 8005924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592c:	ee17 2a90 	vmov	r2, s15
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005934:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800594a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800594e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800595a:	ee17 2a90 	vmov	r2, s15
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	0e1b      	lsrs	r3, r3, #24
 8005968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800597c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005988:	ee17 2a90 	vmov	r2, s15
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3724      	adds	r7, #36	; 0x24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	58024400 	.word	0x58024400
 80059b4:	03d09000 	.word	0x03d09000
 80059b8:	46000000 	.word	0x46000000
 80059bc:	4c742400 	.word	0x4c742400
 80059c0:	4a742400 	.word	0x4a742400
 80059c4:	4bbebc20 	.word	0x4bbebc20

080059c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059d6:	4b53      	ldr	r3, [pc, #332]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d101      	bne.n	80059e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e099      	b.n	8005b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059e6:	4b4f      	ldr	r3, [pc, #316]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4e      	ldr	r2, [pc, #312]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f2:	f7fa fe8f 	bl	8000714 <HAL_GetTick>
 80059f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059f8:	e008      	b.n	8005a0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059fa:	f7fa fe8b 	bl	8000714 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e086      	b.n	8005b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a0c:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a18:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	493f      	ldr	r1, [pc, #252]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	025b      	lsls	r3, r3, #9
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a5c:	4931      	ldr	r1, [pc, #196]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a62:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	492d      	ldr	r1, [pc, #180]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a74:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f023 0220 	bic.w	r2, r3, #32
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	4928      	ldr	r1, [pc, #160]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a86:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	f023 0310 	bic.w	r3, r3, #16
 8005a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <RCCEx_PLL2_Config+0x160>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	69d2      	ldr	r2, [r2, #28]
 8005a9e:	00d2      	lsls	r2, r2, #3
 8005aa0:	4920      	ldr	r1, [pc, #128]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005aa6:	4b1f      	ldr	r3, [pc, #124]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	f043 0310 	orr.w	r3, r3, #16
 8005ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ac4:	e00f      	b.n	8005ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005acc:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ad8:	e005      	b.n	8005ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af2:	f7fa fe0f 	bl	8000714 <HAL_GetTick>
 8005af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005af8:	e008      	b.n	8005b0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005afa:	f7fa fe0b 	bl	8000714 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e006      	b.n	8005b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <RCCEx_PLL2_Config+0x15c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	ffff0007 	.word	0xffff0007

08005b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d101      	bne.n	8005b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e099      	b.n	8005c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b4a:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b56:	f7fa fddd 	bl	8000714 <HAL_GetTick>
 8005b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b5e:	f7fa fdd9 	bl	8000714 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e086      	b.n	8005c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b70:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b7c:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	051b      	lsls	r3, r3, #20
 8005b8a:	493f      	ldr	r1, [pc, #252]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	025b      	lsls	r3, r3, #9
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bc0:	4931      	ldr	r1, [pc, #196]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bc6:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	492d      	ldr	r1, [pc, #180]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005bd8:	4b2b      	ldr	r3, [pc, #172]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4928      	ldr	r1, [pc, #160]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bea:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <RCCEx_PLL3_Config+0x160>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	69d2      	ldr	r2, [r2, #28]
 8005c02:	00d2      	lsls	r2, r2, #3
 8005c04:	4920      	ldr	r1, [pc, #128]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4a1e      	ldr	r2, [pc, #120]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c28:	e00f      	b.n	8005c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d106      	bne.n	8005c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c3c:	e005      	b.n	8005c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c56:	f7fa fd5d 	bl	8000714 <HAL_GetTick>
 8005c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c5e:	f7fa fd59 	bl	8000714 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e006      	b.n	8005c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <RCCEx_PLL3_Config+0x15c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	ffff0007 	.word	0xffff0007

08005c90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e1fb      	b.n	800609a <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d113      	bne.n	8005cd4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a96      	ldr	r2, [pc, #600]	; (8005f0c <HAL_SAI_Init+0x27c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_SAI_Init+0x30>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a95      	ldr	r2, [pc, #596]	; (8005f10 <HAL_SAI_Init+0x280>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d107      	bne.n	8005cd0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d103      	bne.n	8005cd0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e1e2      	b.n	800609a <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8c      	ldr	r2, [pc, #560]	; (8005f0c <HAL_SAI_Init+0x27c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_SAI_Init+0x58>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a8c      	ldr	r2, [pc, #560]	; (8005f14 <HAL_SAI_Init+0x284>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d102      	bne.n	8005cee <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8005ce8:	4b8b      	ldr	r3, [pc, #556]	; (8005f18 <HAL_SAI_Init+0x288>)
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e00e      	b.n	8005d0c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a87      	ldr	r2, [pc, #540]	; (8005f10 <HAL_SAI_Init+0x280>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d004      	beq.n	8005d02 <HAL_SAI_Init+0x72>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a87      	ldr	r2, [pc, #540]	; (8005f1c <HAL_SAI_Init+0x28c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d102      	bne.n	8005d08 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8005d02:	4b87      	ldr	r3, [pc, #540]	; (8005f20 <HAL_SAI_Init+0x290>)
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e001      	b.n	8005d0c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e1c6      	b.n	800609a <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f002 f813 	bl	8007d4c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fac8 	bl	80062bc <SAI_Disable>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e1b1      	b.n	800609a <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d00c      	beq.n	8005d60 <HAL_SAI_Init+0xd0>
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d80d      	bhi.n	8005d66 <HAL_SAI_Init+0xd6>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SAI_Init+0xc4>
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d003      	beq.n	8005d5a <HAL_SAI_Init+0xca>
 8005d52:	e008      	b.n	8005d66 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d58:	e008      	b.n	8005d6c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d5e:	e005      	b.n	8005d6c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005d60:	2320      	movs	r3, #32
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d64:	e002      	b.n	8005d6c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005d6a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d822      	bhi.n	8005dba <HAL_SAI_Init+0x12a>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_SAI_Init+0xec>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d95 	.word	0x08005d95
 8005d80:	08005d9b 	.word	0x08005d9b
 8005d84:	08005da3 	.word	0x08005da3
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005dab 	.word	0x08005dab
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
      break;
 8005d98:	e012      	b.n	8005dc0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9e:	61fb      	str	r3, [r7, #28]
      break;
 8005da0:	e00e      	b.n	8005dc0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005da6:	61fb      	str	r3, [r7, #28]
      break;
 8005da8:	e00a      	b.n	8005dc0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	f043 0303 	orr.w	r3, r3, #3
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005db8:	e002      	b.n	8005dc0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
      break;
 8005dbe:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8084 	beq.w	8005ed8 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a4c      	ldr	r2, [pc, #304]	; (8005f0c <HAL_SAI_Init+0x27c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_SAI_Init+0x158>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a4c      	ldr	r2, [pc, #304]	; (8005f14 <HAL_SAI_Init+0x284>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d104      	bne.n	8005df2 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005de8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005dec:	f7fe fdb8 	bl	8004960 <HAL_RCCEx_GetPeriphCLKFreq>
 8005df0:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a46      	ldr	r2, [pc, #280]	; (8005f10 <HAL_SAI_Init+0x280>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d104      	bne.n	8005e06 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8005dfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005e00:	f7fe fdae 	bl	8004960 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e04:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a44      	ldr	r2, [pc, #272]	; (8005f1c <HAL_SAI_Init+0x28c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d104      	bne.n	8005e1a <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8005e10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e14:	f7fe fda4 	bl	8004960 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e18:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e22:	d120      	bne.n	8005e66 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d102      	bne.n	8005e32 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e00a      	b.n	8005e48 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d103      	bne.n	8005e42 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8005e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e002      	b.n	8005e48 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4619      	mov	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e017      	b.n	8005e96 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e6e:	d101      	bne.n	8005e74 <HAL_SAI_Init+0x1e4>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e000      	b.n	8005e76 <HAL_SAI_Init+0x1e6>
 8005e74:	2301      	movs	r3, #1
 8005e76:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4619      	mov	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e94:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <HAL_SAI_Init+0x294>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	08da      	lsrs	r2, r3, #3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005ea4:	6939      	ldr	r1, [r7, #16]
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	; (8005f24 <HAL_SAI_Init+0x294>)
 8005ea8:	fba3 2301 	umull	r2, r3, r3, r1
 8005eac:	08da      	lsrs	r2, r3, #3
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	1aca      	subs	r2, r1, r3
 8005eb8:	2a08      	cmp	r2, #8
 8005eba:	d904      	bls.n	8005ec6 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d104      	bne.n	8005ed8 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	085a      	lsrs	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_SAI_Init+0x258>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d109      	bne.n	8005efc <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_SAI_Init+0x264>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e001      	b.n	8005ef8 <HAL_SAI_Init+0x268>
 8005ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	e017      	b.n	8005f2c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d111      	bne.n	8005f28 <HAL_SAI_Init+0x298>
 8005f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f08:	e00f      	b.n	8005f2a <HAL_SAI_Init+0x29a>
 8005f0a:	bf00      	nop
 8005f0c:	40015804 	.word	0x40015804
 8005f10:	58005404 	.word	0x58005404
 8005f14:	40015824 	.word	0x40015824
 8005f18:	40015800 	.word	0x40015800
 8005f1c:	58005424 	.word	0x58005424
 8005f20:	58005400 	.word	0x58005400
 8005f24:	cccccccd 	.word	0xcccccccd
 8005f28:	2300      	movs	r3, #0
 8005f2a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6819      	ldr	r1, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b5b      	ldr	r3, [pc, #364]	; (80060a4 <HAL_SAI_Init+0x414>)
 8005f38:	400b      	ands	r3, r1
 8005f3a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	431a      	orrs	r2, r3
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8005f64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	051b      	lsls	r3, r3, #20
 8005f78:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005f7e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6859      	ldr	r1, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <HAL_SAI_Init+0x418>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <HAL_SAI_Init+0x41c>)
 8005fc8:	400b      	ands	r3, r1
 8005fca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6899      	ldr	r1, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fdc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8005fe2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005fe8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005ff2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68d9      	ldr	r1, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	f24f 0320 	movw	r3, #61472	; 0xf020
 800600a:	400b      	ands	r3, r1
 800600c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68d9      	ldr	r1, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006024:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	3b01      	subs	r3, #1
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_SAI_Init+0x420>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_SAI_Init+0x3bc>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_SAI_Init+0x424>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d119      	bne.n	8006080 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	f023 0201 	bic.w	r2, r3, #1
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10e      	bne.n	8006080 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	3b01      	subs	r3, #1
 800606c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800606e:	431a      	orrs	r2, r3
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	f043 0201 	orr.w	r2, r3, #1
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3728      	adds	r7, #40	; 0x28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	f005c010 	.word	0xf005c010
 80060a8:	ffff1ff0 	.word	0xffff1ff0
 80060ac:	fff88000 	.word	0xfff88000
 80060b0:	40015804 	.word	0x40015804
 80060b4:	58005404 	.word	0x58005404

080060b8 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80060c8:	f7fa fb24 	bl	8000714 <HAL_GetTick>
 80060cc:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_SAI_Receive+0x22>
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0e9      	b.n	80062b2 <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	f040 80e2 	bne.w	80062b0 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_SAI_Receive+0x42>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0db      	b.n	80062b2 <HAL_SAI_Receive+0x1fa>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2222      	movs	r2, #34	; 0x22
 800611c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006132:	2b00      	cmp	r3, #0
 8006134:	f040 80ac 	bne.w	8006290 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006146:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 8006148:	e0a2      	b.n	8006290 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d06a      	beq.n	800622e <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d110      	bne.n	8006182 <HAL_SAI_Receive+0xca>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10c      	bne.n	8006182 <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	679a      	str	r2, [r3, #120]	; 0x78
 8006180:	e04c      	b.n	800621c <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006186:	2b80      	cmp	r3, #128	; 0x80
 8006188:	d819      	bhi.n	80061be <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	0a1a      	lsrs	r2, r3, #8
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	679a      	str	r2, [r3, #120]	; 0x78
 80061bc:	e02e      	b.n	800621c <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	0a1a      	lsrs	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	0c1a      	lsrs	r2, r3, #16
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	0e1a      	lsrs	r2, r3, #24
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	679a      	str	r2, [r3, #120]	; 0x78
        }
        hsai->XferCount--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800622c:	e030      	b.n	8006290 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800622e:	f7fa fa71 	bl	8000714 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <HAL_SAI_Receive+0x18c>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d125      	bne.n	8006290 <HAL_SAI_Receive+0x1d8>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800624a:	d021      	beq.n	8006290 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006264:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f828 	bl	80062bc <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0208 	orr.w	r2, r2, #8
 800627a:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e010      	b.n	80062b2 <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8006296:	2b00      	cmp	r3, #0
 8006298:	f47f af57 	bne.w	800614a <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e000      	b.n	80062b2 <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80062c4:	4b18      	ldr	r3, [pc, #96]	; (8006328 <SAI_Disable+0x6c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <SAI_Disable+0x70>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	0b1b      	lsrs	r3, r3, #12
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	72fb      	strb	r3, [r7, #11]
      break;
 8006302:	e009      	b.n	8006318 <SAI_Disable+0x5c>
    }
    count--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3b01      	subs	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e7      	bne.n	80062e8 <SAI_Disable+0x2c>

  return status;
 8006318:	7afb      	ldrb	r3, [r7, #11]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	24000408 	.word	0x24000408
 800632c:	95cbec1b 	.word	0x95cbec1b

08006330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e042      	b.n	80063c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fc93 	bl	8007c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2224      	movs	r2, #36	; 0x24
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f82c 	bl	80063d0 <UART_SetConfig>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e022      	b.n	80063c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fe7e 	bl	800708c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800639e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ff05 	bl	80071d0 <UART_CheckIdleState>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d0:	b5b0      	push	{r4, r5, r7, lr}
 80063d2:	b08e      	sub	sp, #56	; 0x38
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4bbf      	ldr	r3, [pc, #764]	; (80066fc <UART_SetConfig+0x32c>)
 80063fe:	4013      	ands	r3, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006406:	430b      	orrs	r3, r1
 8006408:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4ab5      	ldr	r2, [pc, #724]	; (8006700 <UART_SetConfig+0x330>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006436:	4313      	orrs	r3, r2
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	4bb0      	ldr	r3, [pc, #704]	; (8006704 <UART_SetConfig+0x334>)
 8006442:	4013      	ands	r3, r2
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800644a:	430b      	orrs	r3, r1
 800644c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	f023 010f 	bic.w	r1, r3, #15
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4aa7      	ldr	r2, [pc, #668]	; (8006708 <UART_SetConfig+0x338>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d176      	bne.n	800655c <UART_SetConfig+0x18c>
 800646e:	4ba7      	ldr	r3, [pc, #668]	; (800670c <UART_SetConfig+0x33c>)
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006476:	2b28      	cmp	r3, #40	; 0x28
 8006478:	d86c      	bhi.n	8006554 <UART_SetConfig+0x184>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <UART_SetConfig+0xb0>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006525 	.word	0x08006525
 8006484:	08006555 	.word	0x08006555
 8006488:	08006555 	.word	0x08006555
 800648c:	08006555 	.word	0x08006555
 8006490:	08006555 	.word	0x08006555
 8006494:	08006555 	.word	0x08006555
 8006498:	08006555 	.word	0x08006555
 800649c:	08006555 	.word	0x08006555
 80064a0:	0800652d 	.word	0x0800652d
 80064a4:	08006555 	.word	0x08006555
 80064a8:	08006555 	.word	0x08006555
 80064ac:	08006555 	.word	0x08006555
 80064b0:	08006555 	.word	0x08006555
 80064b4:	08006555 	.word	0x08006555
 80064b8:	08006555 	.word	0x08006555
 80064bc:	08006555 	.word	0x08006555
 80064c0:	08006535 	.word	0x08006535
 80064c4:	08006555 	.word	0x08006555
 80064c8:	08006555 	.word	0x08006555
 80064cc:	08006555 	.word	0x08006555
 80064d0:	08006555 	.word	0x08006555
 80064d4:	08006555 	.word	0x08006555
 80064d8:	08006555 	.word	0x08006555
 80064dc:	08006555 	.word	0x08006555
 80064e0:	0800653d 	.word	0x0800653d
 80064e4:	08006555 	.word	0x08006555
 80064e8:	08006555 	.word	0x08006555
 80064ec:	08006555 	.word	0x08006555
 80064f0:	08006555 	.word	0x08006555
 80064f4:	08006555 	.word	0x08006555
 80064f8:	08006555 	.word	0x08006555
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006545 	.word	0x08006545
 8006504:	08006555 	.word	0x08006555
 8006508:	08006555 	.word	0x08006555
 800650c:	08006555 	.word	0x08006555
 8006510:	08006555 	.word	0x08006555
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
 8006520:	0800654d 	.word	0x0800654d
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652a:	e326      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800652c:	2304      	movs	r3, #4
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006532:	e322      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006534:	2308      	movs	r3, #8
 8006536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653a:	e31e      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800653c:	2310      	movs	r3, #16
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e31a      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006544:	2320      	movs	r3, #32
 8006546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654a:	e316      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800654c:	2340      	movs	r3, #64	; 0x40
 800654e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006552:	e312      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655a:	e30e      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6b      	ldr	r2, [pc, #428]	; (8006710 <UART_SetConfig+0x340>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d130      	bne.n	80065c8 <UART_SetConfig+0x1f8>
 8006566:	4b69      	ldr	r3, [pc, #420]	; (800670c <UART_SetConfig+0x33c>)
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	2b05      	cmp	r3, #5
 8006570:	d826      	bhi.n	80065c0 <UART_SetConfig+0x1f0>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x1a8>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006591 	.word	0x08006591
 800657c:	08006599 	.word	0x08006599
 8006580:	080065a1 	.word	0x080065a1
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065b9 	.word	0x080065b9
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006596:	e2f0      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659e:	e2ec      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a6:	e2e8      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e2e4      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80065b0:	2320      	movs	r3, #32
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e2e0      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80065b8:	2340      	movs	r3, #64	; 0x40
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e2dc      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e2d8      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a51      	ldr	r2, [pc, #324]	; (8006714 <UART_SetConfig+0x344>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d130      	bne.n	8006634 <UART_SetConfig+0x264>
 80065d2:	4b4e      	ldr	r3, [pc, #312]	; (800670c <UART_SetConfig+0x33c>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d826      	bhi.n	800662c <UART_SetConfig+0x25c>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x214>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006605 	.word	0x08006605
 80065ec:	0800660d 	.word	0x0800660d
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e2ba      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e2b6      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e2b2      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e2ae      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800661c:	2320      	movs	r3, #32
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e2aa      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006624:	2340      	movs	r3, #64	; 0x40
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e2a6      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e2a2      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a37      	ldr	r2, [pc, #220]	; (8006718 <UART_SetConfig+0x348>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d130      	bne.n	80066a0 <UART_SetConfig+0x2d0>
 800663e:	4b33      	ldr	r3, [pc, #204]	; (800670c <UART_SetConfig+0x33c>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b05      	cmp	r3, #5
 8006648:	d826      	bhi.n	8006698 <UART_SetConfig+0x2c8>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x280>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006669 	.word	0x08006669
 8006654:	08006671 	.word	0x08006671
 8006658:	08006679 	.word	0x08006679
 800665c:	08006681 	.word	0x08006681
 8006660:	08006689 	.word	0x08006689
 8006664:	08006691 	.word	0x08006691
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e284      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006676:	e280      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667e:	e27c      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e278      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006688:	2320      	movs	r3, #32
 800668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668e:	e274      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e270      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669e:	e26c      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <UART_SetConfig+0x34c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d142      	bne.n	8006730 <UART_SetConfig+0x360>
 80066aa:	4b18      	ldr	r3, [pc, #96]	; (800670c <UART_SetConfig+0x33c>)
 80066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d838      	bhi.n	8006728 <UART_SetConfig+0x358>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x2ec>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066d5 	.word	0x080066d5
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	08006721 	.word	0x08006721
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e24e      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e2:	e24a      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ea:	e246      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e242      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80066f4:	2320      	movs	r3, #32
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e23e      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80066fc:	cfff69f3 	.word	0xcfff69f3
 8006700:	58000c00 	.word	0x58000c00
 8006704:	11fff4ff 	.word	0x11fff4ff
 8006708:	40011000 	.word	0x40011000
 800670c:	58024400 	.word	0x58024400
 8006710:	40004400 	.word	0x40004400
 8006714:	40004800 	.word	0x40004800
 8006718:	40004c00 	.word	0x40004c00
 800671c:	40005000 	.word	0x40005000
 8006720:	2340      	movs	r3, #64	; 0x40
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e228      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006728:	2380      	movs	r3, #128	; 0x80
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e224      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4ab1      	ldr	r2, [pc, #708]	; (80069fc <UART_SetConfig+0x62c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d176      	bne.n	8006828 <UART_SetConfig+0x458>
 800673a:	4bb1      	ldr	r3, [pc, #708]	; (8006a00 <UART_SetConfig+0x630>)
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006742:	2b28      	cmp	r3, #40	; 0x28
 8006744:	d86c      	bhi.n	8006820 <UART_SetConfig+0x450>
 8006746:	a201      	add	r2, pc, #4	; (adr r2, 800674c <UART_SetConfig+0x37c>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	080067f1 	.word	0x080067f1
 8006750:	08006821 	.word	0x08006821
 8006754:	08006821 	.word	0x08006821
 8006758:	08006821 	.word	0x08006821
 800675c:	08006821 	.word	0x08006821
 8006760:	08006821 	.word	0x08006821
 8006764:	08006821 	.word	0x08006821
 8006768:	08006821 	.word	0x08006821
 800676c:	080067f9 	.word	0x080067f9
 8006770:	08006821 	.word	0x08006821
 8006774:	08006821 	.word	0x08006821
 8006778:	08006821 	.word	0x08006821
 800677c:	08006821 	.word	0x08006821
 8006780:	08006821 	.word	0x08006821
 8006784:	08006821 	.word	0x08006821
 8006788:	08006821 	.word	0x08006821
 800678c:	08006801 	.word	0x08006801
 8006790:	08006821 	.word	0x08006821
 8006794:	08006821 	.word	0x08006821
 8006798:	08006821 	.word	0x08006821
 800679c:	08006821 	.word	0x08006821
 80067a0:	08006821 	.word	0x08006821
 80067a4:	08006821 	.word	0x08006821
 80067a8:	08006821 	.word	0x08006821
 80067ac:	08006809 	.word	0x08006809
 80067b0:	08006821 	.word	0x08006821
 80067b4:	08006821 	.word	0x08006821
 80067b8:	08006821 	.word	0x08006821
 80067bc:	08006821 	.word	0x08006821
 80067c0:	08006821 	.word	0x08006821
 80067c4:	08006821 	.word	0x08006821
 80067c8:	08006821 	.word	0x08006821
 80067cc:	08006811 	.word	0x08006811
 80067d0:	08006821 	.word	0x08006821
 80067d4:	08006821 	.word	0x08006821
 80067d8:	08006821 	.word	0x08006821
 80067dc:	08006821 	.word	0x08006821
 80067e0:	08006821 	.word	0x08006821
 80067e4:	08006821 	.word	0x08006821
 80067e8:	08006821 	.word	0x08006821
 80067ec:	08006819 	.word	0x08006819
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f6:	e1c0      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fe:	e1bc      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e1b8      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e1b4      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006810:	2320      	movs	r3, #32
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	e1b0      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006818:	2340      	movs	r3, #64	; 0x40
 800681a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681e:	e1ac      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006826:	e1a8      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a75      	ldr	r2, [pc, #468]	; (8006a04 <UART_SetConfig+0x634>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d130      	bne.n	8006894 <UART_SetConfig+0x4c4>
 8006832:	4b73      	ldr	r3, [pc, #460]	; (8006a00 <UART_SetConfig+0x630>)
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b05      	cmp	r3, #5
 800683c:	d826      	bhi.n	800688c <UART_SetConfig+0x4bc>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0x474>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	0800685d 	.word	0x0800685d
 8006848:	08006865 	.word	0x08006865
 800684c:	0800686d 	.word	0x0800686d
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006862:	e18a      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686a:	e186      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006872:	e182      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e17e      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800687c:	2320      	movs	r3, #32
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006882:	e17a      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688a:	e176      	b.n	8006b7a <UART_SetConfig+0x7aa>
 800688c:	2380      	movs	r3, #128	; 0x80
 800688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006892:	e172      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a5b      	ldr	r2, [pc, #364]	; (8006a08 <UART_SetConfig+0x638>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d130      	bne.n	8006900 <UART_SetConfig+0x530>
 800689e:	4b58      	ldr	r3, [pc, #352]	; (8006a00 <UART_SetConfig+0x630>)
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d826      	bhi.n	80068f8 <UART_SetConfig+0x528>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x4e0>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068c9 	.word	0x080068c9
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	080068d9 	.word	0x080068d9
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068e9 	.word	0x080068e9
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e154      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e150      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068de:	e14c      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e148      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80068e8:	2320      	movs	r3, #32
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e144      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80068f0:	2340      	movs	r3, #64	; 0x40
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e140      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e13c      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a41      	ldr	r2, [pc, #260]	; (8006a0c <UART_SetConfig+0x63c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	f040 8082 	bne.w	8006a10 <UART_SetConfig+0x640>
 800690c:	4b3c      	ldr	r3, [pc, #240]	; (8006a00 <UART_SetConfig+0x630>)
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006914:	2b28      	cmp	r3, #40	; 0x28
 8006916:	d86d      	bhi.n	80069f4 <UART_SetConfig+0x624>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0x550>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	080069c5 	.word	0x080069c5
 8006924:	080069f5 	.word	0x080069f5
 8006928:	080069f5 	.word	0x080069f5
 800692c:	080069f5 	.word	0x080069f5
 8006930:	080069f5 	.word	0x080069f5
 8006934:	080069f5 	.word	0x080069f5
 8006938:	080069f5 	.word	0x080069f5
 800693c:	080069f5 	.word	0x080069f5
 8006940:	080069cd 	.word	0x080069cd
 8006944:	080069f5 	.word	0x080069f5
 8006948:	080069f5 	.word	0x080069f5
 800694c:	080069f5 	.word	0x080069f5
 8006950:	080069f5 	.word	0x080069f5
 8006954:	080069f5 	.word	0x080069f5
 8006958:	080069f5 	.word	0x080069f5
 800695c:	080069f5 	.word	0x080069f5
 8006960:	080069d5 	.word	0x080069d5
 8006964:	080069f5 	.word	0x080069f5
 8006968:	080069f5 	.word	0x080069f5
 800696c:	080069f5 	.word	0x080069f5
 8006970:	080069f5 	.word	0x080069f5
 8006974:	080069f5 	.word	0x080069f5
 8006978:	080069f5 	.word	0x080069f5
 800697c:	080069f5 	.word	0x080069f5
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069f5 	.word	0x080069f5
 8006988:	080069f5 	.word	0x080069f5
 800698c:	080069f5 	.word	0x080069f5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069f5 	.word	0x080069f5
 8006998:	080069f5 	.word	0x080069f5
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069e5 	.word	0x080069e5
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069f5 	.word	0x080069f5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ca:	e0d6      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d2:	e0d2      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069d4:	2308      	movs	r3, #8
 80069d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069da:	e0ce      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069dc:	2310      	movs	r3, #16
 80069de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e2:	e0ca      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069e4:	2320      	movs	r3, #32
 80069e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ea:	e0c6      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069ec:	2340      	movs	r3, #64	; 0x40
 80069ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f2:	e0c2      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069f4:	2380      	movs	r3, #128	; 0x80
 80069f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fa:	e0be      	b.n	8006b7a <UART_SetConfig+0x7aa>
 80069fc:	40011400 	.word	0x40011400
 8006a00:	58024400 	.word	0x58024400
 8006a04:	40007800 	.word	0x40007800
 8006a08:	40007c00 	.word	0x40007c00
 8006a0c:	40011800 	.word	0x40011800
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4aad      	ldr	r2, [pc, #692]	; (8006ccc <UART_SetConfig+0x8fc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d176      	bne.n	8006b08 <UART_SetConfig+0x738>
 8006a1a:	4bad      	ldr	r3, [pc, #692]	; (8006cd0 <UART_SetConfig+0x900>)
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a22:	2b28      	cmp	r3, #40	; 0x28
 8006a24:	d86c      	bhi.n	8006b00 <UART_SetConfig+0x730>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <UART_SetConfig+0x65c>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006ad1 	.word	0x08006ad1
 8006a30:	08006b01 	.word	0x08006b01
 8006a34:	08006b01 	.word	0x08006b01
 8006a38:	08006b01 	.word	0x08006b01
 8006a3c:	08006b01 	.word	0x08006b01
 8006a40:	08006b01 	.word	0x08006b01
 8006a44:	08006b01 	.word	0x08006b01
 8006a48:	08006b01 	.word	0x08006b01
 8006a4c:	08006ad9 	.word	0x08006ad9
 8006a50:	08006b01 	.word	0x08006b01
 8006a54:	08006b01 	.word	0x08006b01
 8006a58:	08006b01 	.word	0x08006b01
 8006a5c:	08006b01 	.word	0x08006b01
 8006a60:	08006b01 	.word	0x08006b01
 8006a64:	08006b01 	.word	0x08006b01
 8006a68:	08006b01 	.word	0x08006b01
 8006a6c:	08006ae1 	.word	0x08006ae1
 8006a70:	08006b01 	.word	0x08006b01
 8006a74:	08006b01 	.word	0x08006b01
 8006a78:	08006b01 	.word	0x08006b01
 8006a7c:	08006b01 	.word	0x08006b01
 8006a80:	08006b01 	.word	0x08006b01
 8006a84:	08006b01 	.word	0x08006b01
 8006a88:	08006b01 	.word	0x08006b01
 8006a8c:	08006ae9 	.word	0x08006ae9
 8006a90:	08006b01 	.word	0x08006b01
 8006a94:	08006b01 	.word	0x08006b01
 8006a98:	08006b01 	.word	0x08006b01
 8006a9c:	08006b01 	.word	0x08006b01
 8006aa0:	08006b01 	.word	0x08006b01
 8006aa4:	08006b01 	.word	0x08006b01
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006af1 	.word	0x08006af1
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	08006b01 	.word	0x08006b01
 8006ab8:	08006b01 	.word	0x08006b01
 8006abc:	08006b01 	.word	0x08006b01
 8006ac0:	08006b01 	.word	0x08006b01
 8006ac4:	08006b01 	.word	0x08006b01
 8006ac8:	08006b01 	.word	0x08006b01
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad6:	e050      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006ad8:	2304      	movs	r3, #4
 8006ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ade:	e04c      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e048      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e044      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006af0:	2320      	movs	r3, #32
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	e040      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afe:	e03c      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b06:	e038      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a71      	ldr	r2, [pc, #452]	; (8006cd4 <UART_SetConfig+0x904>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d130      	bne.n	8006b74 <UART_SetConfig+0x7a4>
 8006b12:	4b6f      	ldr	r3, [pc, #444]	; (8006cd0 <UART_SetConfig+0x900>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d826      	bhi.n	8006b6c <UART_SetConfig+0x79c>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x754>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b45 	.word	0x08006b45
 8006b2c:	08006b4d 	.word	0x08006b4d
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e01a      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b44:	2304      	movs	r3, #4
 8006b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4a:	e016      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b52:	e012      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b54:	2310      	movs	r3, #16
 8006b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5a:	e00e      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b62:	e00a      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b64:	2340      	movs	r3, #64	; 0x40
 8006b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6a:	e006      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b72:	e002      	b.n	8006b7a <UART_SetConfig+0x7aa>
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a55      	ldr	r2, [pc, #340]	; (8006cd4 <UART_SetConfig+0x904>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	f040 80f0 	bne.w	8006d66 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	dc46      	bgt.n	8006c1c <UART_SetConfig+0x84c>
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	db75      	blt.n	8006c7e <UART_SetConfig+0x8ae>
 8006b92:	3b02      	subs	r3, #2
 8006b94:	2b1e      	cmp	r3, #30
 8006b96:	d872      	bhi.n	8006c7e <UART_SetConfig+0x8ae>
 8006b98:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0x7d0>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006c23 	.word	0x08006c23
 8006ba4:	08006c7f 	.word	0x08006c7f
 8006ba8:	08006c2b 	.word	0x08006c2b
 8006bac:	08006c7f 	.word	0x08006c7f
 8006bb0:	08006c7f 	.word	0x08006c7f
 8006bb4:	08006c7f 	.word	0x08006c7f
 8006bb8:	08006c3b 	.word	0x08006c3b
 8006bbc:	08006c7f 	.word	0x08006c7f
 8006bc0:	08006c7f 	.word	0x08006c7f
 8006bc4:	08006c7f 	.word	0x08006c7f
 8006bc8:	08006c7f 	.word	0x08006c7f
 8006bcc:	08006c7f 	.word	0x08006c7f
 8006bd0:	08006c7f 	.word	0x08006c7f
 8006bd4:	08006c7f 	.word	0x08006c7f
 8006bd8:	08006c4b 	.word	0x08006c4b
 8006bdc:	08006c7f 	.word	0x08006c7f
 8006be0:	08006c7f 	.word	0x08006c7f
 8006be4:	08006c7f 	.word	0x08006c7f
 8006be8:	08006c7f 	.word	0x08006c7f
 8006bec:	08006c7f 	.word	0x08006c7f
 8006bf0:	08006c7f 	.word	0x08006c7f
 8006bf4:	08006c7f 	.word	0x08006c7f
 8006bf8:	08006c7f 	.word	0x08006c7f
 8006bfc:	08006c7f 	.word	0x08006c7f
 8006c00:	08006c7f 	.word	0x08006c7f
 8006c04:	08006c7f 	.word	0x08006c7f
 8006c08:	08006c7f 	.word	0x08006c7f
 8006c0c:	08006c7f 	.word	0x08006c7f
 8006c10:	08006c7f 	.word	0x08006c7f
 8006c14:	08006c7f 	.word	0x08006c7f
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d02a      	beq.n	8006c76 <UART_SetConfig+0x8a6>
 8006c20:	e02d      	b.n	8006c7e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c22:	f7fe fac1 	bl	80051a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c28:	e02f      	b.n	8006c8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fad0 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c38:	e027      	b.n	8006c8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fc1c 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c48:	e01f      	b.n	8006c8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c4a:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <UART_SetConfig+0x900>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c56:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <UART_SetConfig+0x900>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	08db      	lsrs	r3, r3, #3
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	4a1d      	ldr	r2, [pc, #116]	; (8006cd8 <UART_SetConfig+0x908>)
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c68:	e00f      	b.n	8006c8a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <UART_SetConfig+0x908>)
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c6e:	e00c      	b.n	8006c8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c70:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <UART_SetConfig+0x90c>)
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c74:	e009      	b.n	8006c8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c7c:	e005      	b.n	8006c8a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 81e6 	beq.w	800705e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <UART_SetConfig+0x910>)
 8006c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	6a3a      	ldr	r2, [r7, #32]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d305      	bcc.n	8006cc2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cbc:	6a3a      	ldr	r2, [r7, #32]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d910      	bls.n	8006ce4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cc8:	e1c9      	b.n	800705e <UART_SetConfig+0xc8e>
 8006cca:	bf00      	nop
 8006ccc:	40011c00 	.word	0x40011c00
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	58000c00 	.word	0x58000c00
 8006cd8:	03d09000 	.word	0x03d09000
 8006cdc:	003d0900 	.word	0x003d0900
 8006ce0:	0800a268 	.word	0x0800a268
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f04f 0100 	mov.w	r1, #0
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	4ac1      	ldr	r2, [pc, #772]	; (8006ff8 <UART_SetConfig+0xc28>)
 8006cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	f7f9 fb08 	bl	8000310 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	020b      	lsls	r3, r1, #8
 8006d12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d16:	0202      	lsls	r2, r0, #8
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	6849      	ldr	r1, [r1, #4]
 8006d1c:	0849      	lsrs	r1, r1, #1
 8006d1e:	4608      	mov	r0, r1
 8006d20:	f04f 0100 	mov.w	r1, #0
 8006d24:	1814      	adds	r4, r2, r0
 8006d26:	eb43 0501 	adc.w	r5, r3, r1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 faea 	bl	8000310 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4613      	mov	r3, r2
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d4a:	d308      	bcc.n	8006d5e <UART_SetConfig+0x98e>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d52:	d204      	bcs.n	8006d5e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	e17f      	b.n	800705e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d64:	e17b      	b.n	800705e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6e:	f040 80bd 	bne.w	8006eec <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	dc48      	bgt.n	8006e0c <UART_SetConfig+0xa3c>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	db7b      	blt.n	8006e76 <UART_SetConfig+0xaa6>
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d879      	bhi.n	8006e76 <UART_SetConfig+0xaa6>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0x9b8>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006e13 	.word	0x08006e13
 8006d8c:	08006e1b 	.word	0x08006e1b
 8006d90:	08006e77 	.word	0x08006e77
 8006d94:	08006e77 	.word	0x08006e77
 8006d98:	08006e23 	.word	0x08006e23
 8006d9c:	08006e77 	.word	0x08006e77
 8006da0:	08006e77 	.word	0x08006e77
 8006da4:	08006e77 	.word	0x08006e77
 8006da8:	08006e33 	.word	0x08006e33
 8006dac:	08006e77 	.word	0x08006e77
 8006db0:	08006e77 	.word	0x08006e77
 8006db4:	08006e77 	.word	0x08006e77
 8006db8:	08006e77 	.word	0x08006e77
 8006dbc:	08006e77 	.word	0x08006e77
 8006dc0:	08006e77 	.word	0x08006e77
 8006dc4:	08006e77 	.word	0x08006e77
 8006dc8:	08006e43 	.word	0x08006e43
 8006dcc:	08006e77 	.word	0x08006e77
 8006dd0:	08006e77 	.word	0x08006e77
 8006dd4:	08006e77 	.word	0x08006e77
 8006dd8:	08006e77 	.word	0x08006e77
 8006ddc:	08006e77 	.word	0x08006e77
 8006de0:	08006e77 	.word	0x08006e77
 8006de4:	08006e77 	.word	0x08006e77
 8006de8:	08006e77 	.word	0x08006e77
 8006dec:	08006e77 	.word	0x08006e77
 8006df0:	08006e77 	.word	0x08006e77
 8006df4:	08006e77 	.word	0x08006e77
 8006df8:	08006e77 	.word	0x08006e77
 8006dfc:	08006e77 	.word	0x08006e77
 8006e00:	08006e77 	.word	0x08006e77
 8006e04:	08006e77 	.word	0x08006e77
 8006e08:	08006e69 	.word	0x08006e69
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	d02e      	beq.n	8006e6e <UART_SetConfig+0xa9e>
 8006e10:	e031      	b.n	8006e76 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e12:	f7fc fe7f 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8006e16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e18:	e033      	b.n	8006e82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e1a:	f7fc fe91 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8006e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e20:	e02f      	b.n	8006e82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e22:	f107 0314 	add.w	r3, r7, #20
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe f9d4 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e30:	e027      	b.n	8006e82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe fb20 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e40:	e01f      	b.n	8006e82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e42:	4b6e      	ldr	r3, [pc, #440]	; (8006ffc <UART_SetConfig+0xc2c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e4e:	4b6b      	ldr	r3, [pc, #428]	; (8006ffc <UART_SetConfig+0xc2c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	08db      	lsrs	r3, r3, #3
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	4a69      	ldr	r2, [pc, #420]	; (8007000 <UART_SetConfig+0xc30>)
 8006e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e60:	e00f      	b.n	8006e82 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006e62:	4b67      	ldr	r3, [pc, #412]	; (8007000 <UART_SetConfig+0xc30>)
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e66:	e00c      	b.n	8006e82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e68:	4b66      	ldr	r3, [pc, #408]	; (8007004 <UART_SetConfig+0xc34>)
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e6c:	e009      	b.n	8006e82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e74:	e005      	b.n	8006e82 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80ea 	beq.w	800705e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	4a5a      	ldr	r2, [pc, #360]	; (8006ff8 <UART_SetConfig+0xc28>)
 8006e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e9c:	005a      	lsls	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	085b      	lsrs	r3, r3, #1
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d916      	bls.n	8006ee4 <UART_SetConfig+0xb14>
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d212      	bcs.n	8006ee4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f023 030f 	bic.w	r3, r3, #15
 8006ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	e0bc      	b.n	800705e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006eea:	e0b8      	b.n	800705e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	dc4b      	bgt.n	8006f8c <UART_SetConfig+0xbbc>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f2c0 8087 	blt.w	8007008 <UART_SetConfig+0xc38>
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	f200 8084 	bhi.w	8007008 <UART_SetConfig+0xc38>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0xb38>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f93 	.word	0x08006f93
 8006f0c:	08006f9b 	.word	0x08006f9b
 8006f10:	08007009 	.word	0x08007009
 8006f14:	08007009 	.word	0x08007009
 8006f18:	08006fa3 	.word	0x08006fa3
 8006f1c:	08007009 	.word	0x08007009
 8006f20:	08007009 	.word	0x08007009
 8006f24:	08007009 	.word	0x08007009
 8006f28:	08006fb3 	.word	0x08006fb3
 8006f2c:	08007009 	.word	0x08007009
 8006f30:	08007009 	.word	0x08007009
 8006f34:	08007009 	.word	0x08007009
 8006f38:	08007009 	.word	0x08007009
 8006f3c:	08007009 	.word	0x08007009
 8006f40:	08007009 	.word	0x08007009
 8006f44:	08007009 	.word	0x08007009
 8006f48:	08006fc3 	.word	0x08006fc3
 8006f4c:	08007009 	.word	0x08007009
 8006f50:	08007009 	.word	0x08007009
 8006f54:	08007009 	.word	0x08007009
 8006f58:	08007009 	.word	0x08007009
 8006f5c:	08007009 	.word	0x08007009
 8006f60:	08007009 	.word	0x08007009
 8006f64:	08007009 	.word	0x08007009
 8006f68:	08007009 	.word	0x08007009
 8006f6c:	08007009 	.word	0x08007009
 8006f70:	08007009 	.word	0x08007009
 8006f74:	08007009 	.word	0x08007009
 8006f78:	08007009 	.word	0x08007009
 8006f7c:	08007009 	.word	0x08007009
 8006f80:	08007009 	.word	0x08007009
 8006f84:	08007009 	.word	0x08007009
 8006f88:	08006fe9 	.word	0x08006fe9
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d02e      	beq.n	8006fee <UART_SetConfig+0xc1e>
 8006f90:	e03a      	b.n	8007008 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f92:	f7fc fdbf 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8006f96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f98:	e03c      	b.n	8007014 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9a:	f7fc fdd1 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8006f9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fa0:	e038      	b.n	8007014 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa2:	f107 0314 	add.w	r3, r7, #20
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe f914 	bl	80051d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb0:	e030      	b.n	8007014 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fa60 	bl	800547c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fc0:	e028      	b.n	8007014 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <UART_SetConfig+0xc2c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <UART_SetConfig+0xc2c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	4a09      	ldr	r2, [pc, #36]	; (8007000 <UART_SetConfig+0xc30>)
 8006fda:	fa22 f303 	lsr.w	r3, r2, r3
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fe0:	e018      	b.n	8007014 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006fe2:	4b07      	ldr	r3, [pc, #28]	; (8007000 <UART_SetConfig+0xc30>)
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fe6:	e015      	b.n	8007014 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <UART_SetConfig+0xc34>)
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fec:	e012      	b.n	8007014 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ff4:	e00e      	b.n	8007014 <UART_SetConfig+0xc44>
 8006ff6:	bf00      	nop
 8006ff8:	0800a268 	.word	0x0800a268
 8006ffc:	58024400 	.word	0x58024400
 8007000:	03d09000 	.word	0x03d09000
 8007004:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007012:	bf00      	nop
    }

    if (pclk != 0U)
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d021      	beq.n	800705e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <UART_SetConfig+0xcb8>)
 8007020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007024:	461a      	mov	r2, r3
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	fbb3 f2f2 	udiv	r2, r3, r2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	441a      	add	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	2b0f      	cmp	r3, #15
 8007042:	d909      	bls.n	8007058 <UART_SetConfig+0xc88>
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704a:	d205      	bcs.n	8007058 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	e002      	b.n	800705e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800707a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800707e:	4618      	mov	r0, r3
 8007080:	3738      	adds	r7, #56	; 0x38
 8007082:	46bd      	mov	sp, r7
 8007084:	bdb0      	pop	{r4, r5, r7, pc}
 8007086:	bf00      	nop
 8007088:	0800a268 	.word	0x0800a268

0800708c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718a:	d10a      	bne.n	80071a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071e0:	f7f9 fa98 	bl	8000714 <HAL_GetTick>
 80071e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d10e      	bne.n	8007212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f82f 	bl	8007266 <UART_WaitOnFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e025      	b.n	800725e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d10e      	bne.n	800723e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f819 	bl	8007266 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e00f      	b.n	800725e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b09c      	sub	sp, #112	; 0x70
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007276:	e0a9      	b.n	80073cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727e:	f000 80a5 	beq.w	80073cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007282:	f7f9 fa47 	bl	8000714 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800728e:	429a      	cmp	r2, r3
 8007290:	d302      	bcc.n	8007298 <UART_WaitOnFlagUntilTimeout+0x32>
 8007292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007294:	2b00      	cmp	r3, #0
 8007296:	d140      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ac:	667b      	str	r3, [r7, #100]	; 0x64
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e6      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	663b      	str	r3, [r7, #96]	; 0x60
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80072ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e5      	bne.n	80072ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e069      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d051      	beq.n	80073cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007336:	d149      	bne.n	80073cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007340:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	613b      	str	r3, [r7, #16]
   return(result);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	66bb      	str	r3, [r7, #104]	; 0x68
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007394:	623a      	str	r2, [r7, #32]
 8007396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	69f9      	ldr	r1, [r7, #28]
 800739a:	6a3a      	ldr	r2, [r7, #32]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e010      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69da      	ldr	r2, [r3, #28]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4013      	ands	r3, r2
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f43f af46 	beq.w	8007278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3770      	adds	r7, #112	; 0x70
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_UARTEx_DisableFifoMode+0x16>
 8007408:	2302      	movs	r3, #2
 800740a:	e027      	b.n	800745c <HAL_UARTEx_DisableFifoMode+0x66>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2224      	movs	r2, #36	; 0x24
 8007418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800743a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800747c:	2302      	movs	r3, #2
 800747e:	e02d      	b.n	80074dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2224      	movs	r2, #36	; 0x24
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f84f 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e02d      	b.n	8007558 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2224      	movs	r2, #36	; 0x24
 8007508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f811 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007580:	e031      	b.n	80075e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007582:	2310      	movs	r3, #16
 8007584:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007586:	2310      	movs	r3, #16
 8007588:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	0e5b      	lsrs	r3, r3, #25
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0f5b      	lsrs	r3, r3, #29
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	7b3a      	ldrb	r2, [r7, #12]
 80075ae:	4911      	ldr	r1, [pc, #68]	; (80075f4 <UARTEx_SetNbDataToProcess+0x94>)
 80075b0:	5c8a      	ldrb	r2, [r1, r2]
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075b6:	7b3a      	ldrb	r2, [r7, #12]
 80075b8:	490f      	ldr	r1, [pc, #60]	; (80075f8 <UARTEx_SetNbDataToProcess+0x98>)
 80075ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	7b7a      	ldrb	r2, [r7, #13]
 80075cc:	4909      	ldr	r1, [pc, #36]	; (80075f4 <UARTEx_SetNbDataToProcess+0x94>)
 80075ce:	5c8a      	ldrb	r2, [r1, r2]
 80075d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075d4:	7b7a      	ldrb	r2, [r7, #13]
 80075d6:	4908      	ldr	r1, [pc, #32]	; (80075f8 <UARTEx_SetNbDataToProcess+0x98>)
 80075d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075da:	fb93 f3f2 	sdiv	r3, r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	0800a280 	.word	0x0800a280
 80075f8:	0800a288 	.word	0x0800a288

080075fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007604:	f7f9 f800 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007608:	f000 f840 	bl	800768c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800760c:	f000 fa4a 	bl	8007aa4 <MX_GPIO_Init>
  MX_BDMA_Init();
 8007610:	f000 f9d0 	bl	80079b4 <MX_BDMA_Init>
  MX_SAI4_Init();
 8007614:	f000 f922 	bl	800785c <MX_SAI4_Init>
  MX_CRC_Init();
 8007618:	f000 f8a6 	bl	8007768 <MX_CRC_Init>
  MX_USART3_UART_Init();
 800761c:	f000 f97e 	bl	800791c <MX_USART3_UART_Init>
  MX_DMA_Init();
 8007620:	f000 f9f0 	bl	8007a04 <MX_DMA_Init>
  MX_PDM2PCM_Init();
 8007624:	f000 fa8c 	bl	8007b40 <MX_PDM2PCM_Init>
  MX_DFSDM1_Init();
 8007628:	f000 f8e0 	bl	80077ec <MX_DFSDM1_Init>
  // output freq (pcm freq) = 48kHz
  // decimiation factor = 64

  // for pdm: input buffer is uint8
  // with length >= (48 * 64 * 1/8) = 384
  uint8_t pdm_buffer[400] = {0};
 800762c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	3304      	adds	r3, #4
 8007636:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f002 fc1b 	bl	8009e78 <memset>

  // for pdm: output buffer is uint16
  // with length >= 48
  uint16_t pcm_buffer[400] = {0};
 8007642:	1d3b      	adds	r3, r7, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f44f 7348 	mov.w	r3, #800	; 0x320
 800764a:	461a      	mov	r2, r3
 800764c:	2100      	movs	r1, #0
 800764e:	f002 fc13 	bl	8009e78 <memset>

  /* INITIALIZE */
  HAL_SAI_MspInit(&hsai_BlockA4);
 8007652:	480c      	ldr	r0, [pc, #48]	; (8007684 <main+0x88>)
 8007654:	f000 fb7a 	bl	8007d4c <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 8007658:	480a      	ldr	r0, [pc, #40]	; (8007684 <main+0x88>)
 800765a:	f7fe fb19 	bl	8005c90 <HAL_SAI_Init>

  // polling mode - SIZE = # BYTES
  HAL_SAI_Receive(&hsai_BlockA4, pdm_buffer, 64, 1000);
 800765e:	f507 7149 	add.w	r1, r7, #804	; 0x324
 8007662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007666:	2240      	movs	r2, #64	; 0x40
 8007668:	4806      	ldr	r0, [pc, #24]	; (8007684 <main+0x88>)
 800766a:	f7fe fd25 	bl	80060b8 <HAL_SAI_Receive>
  uint32_t pdm_status = PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 800766e:	1d39      	adds	r1, r7, #4
 8007670:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8007674:	4a04      	ldr	r2, [pc, #16]	; (8007688 <main+0x8c>)
 8007676:	4618      	mov	r0, r3
 8007678:	f002 fbba 	bl	8009df0 <PDM_Filter>
 800767c:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8007680:	e7fe      	b.n	8007680 <main+0x84>
 8007682:	bf00      	nop
 8007684:	240005f0 	.word	0x240005f0
 8007688:	24000740 	.word	0x24000740

0800768c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b09c      	sub	sp, #112	; 0x70
 8007690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007696:	224c      	movs	r2, #76	; 0x4c
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f002 fbec 	bl	8009e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	2220      	movs	r2, #32
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f002 fbe6 	bl	8009e78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80076ac:	2004      	movs	r0, #4
 80076ae:	f7fb facb 	bl	8002c48 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80076b2:	2300      	movs	r3, #0
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <SystemClock_Config+0xd8>)
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <SystemClock_Config+0xd8>)
 80076bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076c0:	6193      	str	r3, [r2, #24]
 80076c2:	4b28      	ldr	r3, [pc, #160]	; (8007764 <SystemClock_Config+0xd8>)
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80076ce:	bf00      	nop
 80076d0:	4b24      	ldr	r3, [pc, #144]	; (8007764 <SystemClock_Config+0xd8>)
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076dc:	d1f8      	bne.n	80076d0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80076de:	2302      	movs	r3, #2
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80076e2:	2301      	movs	r3, #1
 80076e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076ea:	2302      	movs	r3, #2
 80076ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80076ee:	2300      	movs	r3, #0
 80076f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80076f2:	2304      	movs	r3, #4
 80076f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80076f6:	2318      	movs	r3, #24
 80076f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80076fa:	2301      	movs	r3, #1
 80076fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 80076fe:	237d      	movs	r3, #125	; 0x7d
 8007700:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007702:	2302      	movs	r3, #2
 8007704:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007706:	230c      	movs	r3, #12
 8007708:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800770a:	2300      	movs	r3, #0
 800770c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007716:	4618      	mov	r0, r3
 8007718:	f7fb faf0 	bl	8002cfc <HAL_RCC_OscConfig>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007722:	f000 fa07 	bl	8007b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007726:	233f      	movs	r3, #63	; 0x3f
 8007728:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800772a:	2303      	movs	r3, #3
 800772c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007732:	2308      	movs	r3, #8
 8007734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007736:	2340      	movs	r3, #64	; 0x40
 8007738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800773e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007742:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	2102      	movs	r1, #2
 800774c:	4618      	mov	r0, r3
 800774e:	f7fb fe81 	bl	8003454 <HAL_RCC_ClockConfig>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007758:	f000 f9ec 	bl	8007b34 <Error_Handler>
  }
}
 800775c:	bf00      	nop
 800775e:	3770      	adds	r7, #112	; 0x70
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	58024800 	.word	0x58024800

08007768 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800776e:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <MX_CRC_Init+0x78>)
 8007770:	4a1c      	ldr	r2, [pc, #112]	; (80077e4 <MX_CRC_Init+0x7c>)
 8007772:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <MX_CRC_Init+0x78>)
 8007776:	2200      	movs	r2, #0
 8007778:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800777a:	4b19      	ldr	r3, [pc, #100]	; (80077e0 <MX_CRC_Init+0x78>)
 800777c:	2200      	movs	r2, #0
 800777e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <MX_CRC_Init+0x78>)
 8007782:	2200      	movs	r2, #0
 8007784:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007786:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <MX_CRC_Init+0x78>)
 8007788:	2200      	movs	r2, #0
 800778a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800778c:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <MX_CRC_Init+0x78>)
 800778e:	2201      	movs	r2, #1
 8007790:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007792:	4813      	ldr	r0, [pc, #76]	; (80077e0 <MX_CRC_Init+0x78>)
 8007794:	f7f9 f8da 	bl	800094c <HAL_CRC_Init>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800779e:	f000 f9c9 	bl	8007b34 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <MX_CRC_Init+0x78>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <MX_CRC_Init+0x78>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <MX_CRC_Init+0x80>)
 80077b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077b8:	4a0b      	ldr	r2, [pc, #44]	; (80077e8 <MX_CRC_Init+0x80>)
 80077ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <MX_CRC_Init+0x80>)
 80077c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 80077d0:	4803      	ldr	r0, [pc, #12]	; (80077e0 <MX_CRC_Init+0x78>)
 80077d2:	f000 f9f9 	bl	8007bc8 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	240005cc 	.word	0x240005cc
 80077e4:	58024c00 	.word	0x58024c00
 80077e8:	58024400 	.word	0x58024400

080077ec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80077f0:	4b18      	ldr	r3, [pc, #96]	; (8007854 <MX_DFSDM1_Init+0x68>)
 80077f2:	4a19      	ldr	r2, [pc, #100]	; (8007858 <MX_DFSDM1_Init+0x6c>)
 80077f4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80077f6:	4b17      	ldr	r3, [pc, #92]	; (8007854 <MX_DFSDM1_Init+0x68>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80077fc:	4b15      	ldr	r3, [pc, #84]	; (8007854 <MX_DFSDM1_Init+0x68>)
 80077fe:	2200      	movs	r2, #0
 8007800:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007804:	2202      	movs	r2, #2
 8007806:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8007808:	4b12      	ldr	r3, [pc, #72]	; (8007854 <MX_DFSDM1_Init+0x68>)
 800780a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800780e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007810:	4b10      	ldr	r3, [pc, #64]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007812:	2200      	movs	r2, #0
 8007814:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007818:	2200      	movs	r2, #0
 800781a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <MX_DFSDM1_Init+0x68>)
 800781e:	2200      	movs	r2, #0
 8007820:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007824:	2200      	movs	r2, #0
 8007826:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <MX_DFSDM1_Init+0x68>)
 800782a:	2200      	movs	r2, #0
 800782c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007830:	2201      	movs	r2, #1
 8007832:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007836:	2200      	movs	r2, #0
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <MX_DFSDM1_Init+0x68>)
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8007840:	4804      	ldr	r0, [pc, #16]	; (8007854 <MX_DFSDM1_Init+0x68>)
 8007842:	f7f9 f96d 	bl	8000b20 <HAL_DFSDM_ChannelInit>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800784c:	f000 f972 	bl	8007b34 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8007850:	bf00      	nop
 8007852:	bd80      	pop	{r7, pc}
 8007854:	24000700 	.word	0x24000700
 8007858:	40017800 	.word	0x40017800

0800785c <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8007860:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007862:	4a2d      	ldr	r2, [pc, #180]	; (8007918 <MX_SAI4_Init+0xbc>)
 8007864:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8007866:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007868:	2200      	movs	r2, #0
 800786a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800786c:	4b29      	ldr	r3, [pc, #164]	; (8007914 <MX_SAI4_Init+0xb8>)
 800786e:	2201      	movs	r2, #1
 8007870:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8007872:	4b28      	ldr	r3, [pc, #160]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007874:	2280      	movs	r2, #128	; 0x80
 8007876:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8007878:	4b26      	ldr	r3, [pc, #152]	; (8007914 <MX_SAI4_Init+0xb8>)
 800787a:	2200      	movs	r2, #0
 800787c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800787e:	4b25      	ldr	r3, [pc, #148]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007880:	2200      	movs	r2, #0
 8007882:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8007884:	4b23      	ldr	r3, [pc, #140]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007886:	2200      	movs	r2, #0
 8007888:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800788a:	4b22      	ldr	r3, [pc, #136]	; (8007914 <MX_SAI4_Init+0xb8>)
 800788c:	2200      	movs	r2, #0
 800788e:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007890:	4b20      	ldr	r3, [pc, #128]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007892:	2200      	movs	r2, #0
 8007894:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007896:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007898:	2200      	movs	r2, #0
 800789a:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800789c:	4b1d      	ldr	r3, [pc, #116]	; (8007914 <MX_SAI4_Init+0xb8>)
 800789e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80078a2:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 80078a4:	4b1b      	ldr	r3, [pc, #108]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 80078aa:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 80078b0:	4b18      	ldr	r3, [pc, #96]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 80078b8:	4b16      	ldr	r3, [pc, #88]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078ba:	2202      	movs	r2, #2
 80078bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 80078c6:	4b13      	ldr	r3, [pc, #76]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078c8:	2210      	movs	r2, #16
 80078ca:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 80078cc:	4b11      	ldr	r3, [pc, #68]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80078d2:	4b10      	ldr	r3, [pc, #64]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80078d8:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078da:	2200      	movs	r2, #0
 80078dc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80078ea:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 80078f0:	4b08      	ldr	r3, [pc, #32]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <MX_SAI4_Init+0xb8>)
 80078f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078fc:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 80078fe:	4805      	ldr	r0, [pc, #20]	; (8007914 <MX_SAI4_Init+0xb8>)
 8007900:	f7fe f9c6 	bl	8005c90 <HAL_SAI_Init>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 800790a:	f000 f913 	bl	8007b34 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 800790e:	bf00      	nop
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	240005f0 	.word	0x240005f0
 8007918:	58005404 	.word	0x58005404

0800791c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007920:	4b22      	ldr	r3, [pc, #136]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007922:	4a23      	ldr	r2, [pc, #140]	; (80079b0 <MX_USART3_UART_Init+0x94>)
 8007924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007926:	4b21      	ldr	r3, [pc, #132]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800792c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800792e:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007930:	2200      	movs	r2, #0
 8007932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007934:	4b1d      	ldr	r3, [pc, #116]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007936:	2200      	movs	r2, #0
 8007938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800793a:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <MX_USART3_UART_Init+0x90>)
 800793c:	2200      	movs	r2, #0
 800793e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007940:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007942:	220c      	movs	r2, #12
 8007944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007946:	4b19      	ldr	r3, [pc, #100]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007948:	2200      	movs	r2, #0
 800794a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800794c:	4b17      	ldr	r3, [pc, #92]	; (80079ac <MX_USART3_UART_Init+0x90>)
 800794e:	2200      	movs	r2, #0
 8007950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007952:	4b16      	ldr	r3, [pc, #88]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007954:	2200      	movs	r2, #0
 8007956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007958:	4b14      	ldr	r3, [pc, #80]	; (80079ac <MX_USART3_UART_Init+0x90>)
 800795a:	2200      	movs	r2, #0
 800795c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007960:	2200      	movs	r2, #0
 8007962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007964:	4811      	ldr	r0, [pc, #68]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007966:	f7fe fce3 	bl	8006330 <HAL_UART_Init>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007970:	f000 f8e0 	bl	8007b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007974:	2100      	movs	r1, #0
 8007976:	480d      	ldr	r0, [pc, #52]	; (80079ac <MX_USART3_UART_Init+0x90>)
 8007978:	f7ff fd76 	bl	8007468 <HAL_UARTEx_SetTxFifoThreshold>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007982:	f000 f8d7 	bl	8007b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007986:	2100      	movs	r1, #0
 8007988:	4808      	ldr	r0, [pc, #32]	; (80079ac <MX_USART3_UART_Init+0x90>)
 800798a:	f7ff fdab 	bl	80074e4 <HAL_UARTEx_SetRxFifoThreshold>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007994:	f000 f8ce 	bl	8007b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007998:	4804      	ldr	r0, [pc, #16]	; (80079ac <MX_USART3_UART_Init+0x90>)
 800799a:	f7ff fd2c 	bl	80073f6 <HAL_UARTEx_DisableFifoMode>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80079a4:	f000 f8c6 	bl	8007b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80079a8:	bf00      	nop
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2400053c 	.word	0x2400053c
 80079b0:	40004800 	.word	0x40004800

080079b4 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80079ba:	4b11      	ldr	r3, [pc, #68]	; (8007a00 <MX_BDMA_Init+0x4c>)
 80079bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079c0:	4a0f      	ldr	r2, [pc, #60]	; (8007a00 <MX_BDMA_Init+0x4c>)
 80079c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079ca:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <MX_BDMA_Init+0x4c>)
 80079cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80079d8:	2200      	movs	r2, #0
 80079da:	2100      	movs	r1, #0
 80079dc:	2080      	movs	r0, #128	; 0x80
 80079de:	f7f8 ff80 	bl	80008e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80079e2:	2080      	movs	r0, #128	; 0x80
 80079e4:	f7f8 ff97 	bl	8000916 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80079e8:	2200      	movs	r2, #0
 80079ea:	2100      	movs	r1, #0
 80079ec:	2081      	movs	r0, #129	; 0x81
 80079ee:	f7f8 ff78 	bl	80008e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80079f2:	2081      	movs	r0, #129	; 0x81
 80079f4:	f7f8 ff8f 	bl	8000916 <HAL_NVIC_EnableIRQ>

}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	58024400 	.word	0x58024400

08007a04 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007a0a:	4b23      	ldr	r3, [pc, #140]	; (8007a98 <MX_DMA_Init+0x94>)
 8007a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a10:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <MX_DMA_Init+0x94>)
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <MX_DMA_Init+0x94>)
 8007a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	607b      	str	r3, [r7, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8007a28:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <MX_DMA_Init+0x9c>)
 8007a2c:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8007a2e:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8007a40:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a46:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007a48:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a4e:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007a50:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a56:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_CIRCULAR;
 8007a58:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a5e:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a68:	2204      	movs	r2, #4
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a6e:	2203      	movs	r2, #3
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007a78:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8007a7e:	4807      	ldr	r0, [pc, #28]	; (8007a9c <MX_DMA_Init+0x98>)
 8007a80:	f7f9 f962 	bl	8000d48 <HAL_DMA_Init>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8007a8a:	f000 f853 	bl	8007b34 <Error_Handler>
  }

}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	240004c4 	.word	0x240004c4
 8007aa0:	40020010 	.word	0x40020010

08007aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aaa:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007aba:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ac8:	4b19      	ldr	r3, [pc, #100]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ace:	4a18      	ldr	r2, [pc, #96]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007ad0:	f043 0310 	orr.w	r3, r3, #16
 8007ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ad8:	4b15      	ldr	r3, [pc, #84]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	60bb      	str	r3, [r7, #8]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aec:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007aee:	f043 0304 	orr.w	r3, r3, #4
 8007af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007b0c:	f043 0308 	orr.w	r3, r3, #8
 8007b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <MX_GPIO_Init+0x8c>)
 8007b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]

}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	58024400 	.word	0x58024400

08007b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b38:	b672      	cpsid	i
}
 8007b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b3c:	e7fe      	b.n	8007b3c <Error_Handler+0x8>
	...

08007b40 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007b50:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b52:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <MX_PDM2PCM_Init+0x4c>)
 8007b54:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b58:	2202      	movs	r2, #2
 8007b5a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b5e:	2202      	movs	r2, #2
 8007b60:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007b62:	4809      	ldr	r0, [pc, #36]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b64:	f001 ff7a 	bl	8009a5c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <MX_PDM2PCM_Init+0x50>)
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007b6e:	4b08      	ldr	r3, [pc, #32]	; (8007b90 <MX_PDM2PCM_Init+0x50>)
 8007b70:	2210      	movs	r2, #16
 8007b72:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <MX_PDM2PCM_Init+0x50>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007b7a:	4905      	ldr	r1, [pc, #20]	; (8007b90 <MX_PDM2PCM_Init+0x50>)
 8007b7c:	4802      	ldr	r0, [pc, #8]	; (8007b88 <MX_PDM2PCM_Init+0x48>)
 8007b7e:	f002 f83d 	bl	8009bfc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007b82:	bf00      	nop
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	24000740 	.word	0x24000740
 8007b8c:	7d70a3d6 	.word	0x7d70a3d6
 8007b90:	24000738 	.word	0x24000738

08007b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <HAL_MspInit+0x30>)
 8007b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ba0:	4a08      	ldr	r2, [pc, #32]	; (8007bc4 <HAL_MspInit+0x30>)
 8007ba2:	f043 0302 	orr.w	r3, r3, #2
 8007ba6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <HAL_MspInit+0x30>)
 8007bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	58024400 	.word	0x58024400

08007bc8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <HAL_CRC_MspInit+0x3c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <HAL_CRC_MspInit+0x40>)
 8007bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007be0:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <HAL_CRC_MspInit+0x40>)
 8007be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <HAL_CRC_MspInit+0x40>)
 8007bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	58024c00 	.word	0x58024c00
 8007c08:	58024400 	.word	0x58024400

08007c0c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b0b0      	sub	sp, #192	; 0xc0
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c14:	f107 030c 	add.w	r3, r7, #12
 8007c18:	22b4      	movs	r2, #180	; 0xb4
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f002 f92b 	bl	8009e78 <memset>
  if(DFSDM1_Init == 0)
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d122      	bne.n	8007c70 <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8007c2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8007c30:	2300      	movs	r3, #0
 8007c32:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fb ff97 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 8007c44:	f7ff ff76 	bl	8007b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_DFSDM_ChannelMspInit+0x70>)
 8007c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c4e:	4a0b      	ldr	r2, [pc, #44]	; (8007c7c <HAL_DFSDM_ChannelMspInit+0x70>)
 8007c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c58:	4b08      	ldr	r3, [pc, #32]	; (8007c7c <HAL_DFSDM_ChannelMspInit+0x70>)
 8007c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c62:	60bb      	str	r3, [r7, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8007c66:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a02      	ldr	r2, [pc, #8]	; (8007c78 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8007c6e:	6013      	str	r3, [r2, #0]
  }

}
 8007c70:	bf00      	nop
 8007c72:	37c0      	adds	r7, #192	; 0xc0
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	240004b8 	.word	0x240004b8
 8007c7c:	58024400 	.word	0x58024400

08007c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b0b6      	sub	sp, #216	; 0xd8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	22b4      	movs	r2, #180	; 0xb4
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f002 f8e9 	bl	8009e78 <memset>
  if(huart->Instance==USART3)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a25      	ldr	r2, [pc, #148]	; (8007d40 <HAL_UART_MspInit+0xc0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d142      	bne.n	8007d36 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cba:	f107 0310 	add.w	r3, r7, #16
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fb ff54 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007cca:	f7ff ff33 	bl	8007b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007cce:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <HAL_UART_MspInit+0xc4>)
 8007cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	; (8007d44 <HAL_UART_MspInit+0xc4>)
 8007cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <HAL_UART_MspInit+0xc4>)
 8007ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <HAL_UART_MspInit+0xc4>)
 8007cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cf2:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <HAL_UART_MspInit+0xc4>)
 8007cf4:	f043 0304 	orr.w	r3, r3, #4
 8007cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007cfc:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <HAL_UART_MspInit+0xc4>)
 8007cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	60bb      	str	r3, [r7, #8]
 8007d08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8007d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d12:	2302      	movs	r3, #2
 8007d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007d24:	2307      	movs	r3, #7
 8007d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d2a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4805      	ldr	r0, [pc, #20]	; (8007d48 <HAL_UART_MspInit+0xc8>)
 8007d32:	f7fa fde1 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007d36:	bf00      	nop
 8007d38:	37d8      	adds	r7, #216	; 0xd8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40004800 	.word	0x40004800
 8007d44:	58024400 	.word	0x58024400
 8007d48:	58020800 	.word	0x58020800

08007d4c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b0ba      	sub	sp, #232	; 0xe8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d54:	f107 0310 	add.w	r3, r7, #16
 8007d58:	22b4      	movs	r2, #180	; 0xb4
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f002 f88b 	bl	8009e78 <memset>
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a55      	ldr	r2, [pc, #340]	; (8007ebc <HAL_SAI_MspInit+0x170>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	f040 80a2 	bne.w	8007eb2 <HAL_SAI_MspInit+0x166>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8007d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d7a:	f107 0310 	add.w	r3, r7, #16
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fb fef4 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <HAL_SAI_MspInit+0x42>
    {
      Error_Handler();
 8007d8a:	f7ff fed3 	bl	8007b34 <Error_Handler>
    }

    if (SAI4_client == 0)
 8007d8e:	4b4c      	ldr	r3, [pc, #304]	; (8007ec0 <HAL_SAI_MspInit+0x174>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10e      	bne.n	8007db4 <HAL_SAI_MspInit+0x68>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8007d96:	4b4b      	ldr	r3, [pc, #300]	; (8007ec4 <HAL_SAI_MspInit+0x178>)
 8007d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d9c:	4a49      	ldr	r2, [pc, #292]	; (8007ec4 <HAL_SAI_MspInit+0x178>)
 8007d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007da2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <HAL_SAI_MspInit+0x178>)
 8007da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	68fb      	ldr	r3, [r7, #12]
    }
    SAI4_client ++;
 8007db4:	4b42      	ldr	r3, [pc, #264]	; (8007ec0 <HAL_SAI_MspInit+0x174>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a41      	ldr	r2, [pc, #260]	; (8007ec0 <HAL_SAI_MspInit+0x174>)
 8007dbc:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007dbe:	2330      	movs	r3, #48	; 0x30
 8007dc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007dd6:	230a      	movs	r3, #10
 8007dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ddc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4839      	ldr	r0, [pc, #228]	; (8007ec8 <HAL_SAI_MspInit+0x17c>)
 8007de4:	f7fa fd88 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007de8:	2340      	movs	r3, #64	; 0x40
 8007dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dee:	2302      	movs	r3, #2
 8007df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	482f      	ldr	r0, [pc, #188]	; (8007ecc <HAL_SAI_MspInit+0x180>)
 8007e0e:	f7fa fd73 	bl	80028f8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8007e12:	4b2f      	ldr	r3, [pc, #188]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e14:	4a2f      	ldr	r2, [pc, #188]	; (8007ed4 <HAL_SAI_MspInit+0x188>)
 8007e16:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8007e18:	4b2d      	ldr	r3, [pc, #180]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e1a:	220f      	movs	r2, #15
 8007e1c:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e1e:	4b2c      	ldr	r3, [pc, #176]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e24:	4b2a      	ldr	r3, [pc, #168]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8007e2a:	4b29      	ldr	r3, [pc, #164]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e30:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e32:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e38:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007e3a:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e40:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8007e42:	4b23      	ldr	r3, [pc, #140]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e48:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8007e4a:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8007e52:	481f      	ldr	r0, [pc, #124]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e54:	f7f8 ff78 	bl	8000d48 <HAL_DMA_Init>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8007e5e:	f7ff fe69 	bl	8007b34 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8007e62:	230e      	movs	r3, #14
 8007e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8007e80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4812      	ldr	r0, [pc, #72]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e88:	f7fa fc1e 	bl	80026c8 <HAL_DMAEx_ConfigMuxSync>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_SAI_MspInit+0x14a>
    {
      Error_Handler();
 8007e92:	f7ff fe4f 	bl	8007b34 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a0d      	ldr	r2, [pc, #52]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007e9e:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <HAL_SAI_MspInit+0x184>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8007eb2:	bf00      	nop
 8007eb4:	37e8      	adds	r7, #232	; 0xe8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	58005404 	.word	0x58005404
 8007ec0:	240004bc 	.word	0x240004bc
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	58021000 	.word	0x58021000
 8007ecc:	58020c00 	.word	0x58020c00
 8007ed0:	24000688 	.word	0x24000688
 8007ed4:	58025408 	.word	0x58025408

08007ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007edc:	e7fe      	b.n	8007edc <NMI_Handler+0x4>

08007ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ee2:	e7fe      	b.n	8007ee2 <HardFault_Handler+0x4>

08007ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ee8:	e7fe      	b.n	8007ee8 <MemManage_Handler+0x4>

08007eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007eea:	b480      	push	{r7}
 8007eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007eee:	e7fe      	b.n	8007eee <BusFault_Handler+0x4>

08007ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ef4:	e7fe      	b.n	8007ef4 <UsageFault_Handler+0x4>

08007ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007efa:	bf00      	nop
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f08:	bf00      	nop
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f12:	b480      	push	{r7}
 8007f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f24:	f7f8 fbe2 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8007f30:	4802      	ldr	r0, [pc, #8]	; (8007f3c <DMAMUX2_OVR_IRQHandler+0x10>)
 8007f32:	f7fa fc8f 	bl	8002854 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	24000688 	.word	0x24000688

08007f40 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8007f44:	4802      	ldr	r0, [pc, #8]	; (8007f50 <BDMA_Channel0_IRQHandler+0x10>)
 8007f46:	f7f9 fa59 	bl	80013fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	24000688 	.word	0x24000688

08007f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f58:	4b32      	ldr	r3, [pc, #200]	; (8008024 <SystemInit+0xd0>)
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5e:	4a31      	ldr	r2, [pc, #196]	; (8008024 <SystemInit+0xd0>)
 8007f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007f68:	4b2f      	ldr	r3, [pc, #188]	; (8008028 <SystemInit+0xd4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	2b06      	cmp	r3, #6
 8007f72:	d807      	bhi.n	8007f84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <SystemInit+0xd4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f023 030f 	bic.w	r3, r3, #15
 8007f7c:	4a2a      	ldr	r2, [pc, #168]	; (8008028 <SystemInit+0xd4>)
 8007f7e:	f043 0307 	orr.w	r3, r3, #7
 8007f82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007f84:	4b29      	ldr	r3, [pc, #164]	; (800802c <SystemInit+0xd8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a28      	ldr	r2, [pc, #160]	; (800802c <SystemInit+0xd8>)
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f90:	4b26      	ldr	r3, [pc, #152]	; (800802c <SystemInit+0xd8>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007f96:	4b25      	ldr	r3, [pc, #148]	; (800802c <SystemInit+0xd8>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4924      	ldr	r1, [pc, #144]	; (800802c <SystemInit+0xd8>)
 8007f9c:	4b24      	ldr	r3, [pc, #144]	; (8008030 <SystemInit+0xdc>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007fa2:	4b21      	ldr	r3, [pc, #132]	; (8008028 <SystemInit+0xd4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007fae:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <SystemInit+0xd4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 030f 	bic.w	r3, r3, #15
 8007fb6:	4a1c      	ldr	r2, [pc, #112]	; (8008028 <SystemInit+0xd4>)
 8007fb8:	f043 0307 	orr.w	r3, r3, #7
 8007fbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <SystemInit+0xd8>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007fc4:	4b19      	ldr	r3, [pc, #100]	; (800802c <SystemInit+0xd8>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007fca:	4b18      	ldr	r3, [pc, #96]	; (800802c <SystemInit+0xd8>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007fd0:	4b16      	ldr	r3, [pc, #88]	; (800802c <SystemInit+0xd8>)
 8007fd2:	4a18      	ldr	r2, [pc, #96]	; (8008034 <SystemInit+0xe0>)
 8007fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <SystemInit+0xd8>)
 8007fd8:	4a17      	ldr	r2, [pc, #92]	; (8008038 <SystemInit+0xe4>)
 8007fda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <SystemInit+0xd8>)
 8007fde:	4a17      	ldr	r2, [pc, #92]	; (800803c <SystemInit+0xe8>)
 8007fe0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007fe2:	4b12      	ldr	r3, [pc, #72]	; (800802c <SystemInit+0xd8>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007fe8:	4b10      	ldr	r3, [pc, #64]	; (800802c <SystemInit+0xd8>)
 8007fea:	4a14      	ldr	r2, [pc, #80]	; (800803c <SystemInit+0xe8>)
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <SystemInit+0xd8>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <SystemInit+0xd8>)
 8007ff6:	4a11      	ldr	r2, [pc, #68]	; (800803c <SystemInit+0xe8>)
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <SystemInit+0xd8>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <SystemInit+0xd8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a09      	ldr	r2, [pc, #36]	; (800802c <SystemInit+0xd8>)
 8008006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800800a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800800c:	4b07      	ldr	r3, [pc, #28]	; (800802c <SystemInit+0xd8>)
 800800e:	2200      	movs	r2, #0
 8008010:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008012:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <SystemInit+0xec>)
 8008014:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008018:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	e000ed00 	.word	0xe000ed00
 8008028:	52002000 	.word	0x52002000
 800802c:	58024400 	.word	0x58024400
 8008030:	eaf6ed7f 	.word	0xeaf6ed7f
 8008034:	02020200 	.word	0x02020200
 8008038:	01ff0000 	.word	0x01ff0000
 800803c:	01010280 	.word	0x01010280
 8008040:	52004000 	.word	0x52004000

08008044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800807c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008048:	f7ff ff84 	bl	8007f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800804c:	480c      	ldr	r0, [pc, #48]	; (8008080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800804e:	490d      	ldr	r1, [pc, #52]	; (8008084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008050:	4a0d      	ldr	r2, [pc, #52]	; (8008088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008054:	e002      	b.n	800805c <LoopCopyDataInit>

08008056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800805a:	3304      	adds	r3, #4

0800805c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800805c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800805e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008060:	d3f9      	bcc.n	8008056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008064:	4c0a      	ldr	r4, [pc, #40]	; (8008090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008068:	e001      	b.n	800806e <LoopFillZerobss>

0800806a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800806a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800806c:	3204      	adds	r2, #4

0800806e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800806e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008070:	d3fb      	bcc.n	800806a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008072:	f001 fedd 	bl	8009e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008076:	f7ff fac1 	bl	80075fc <main>
  bx  lr
 800807a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800807c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008080:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008084:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8008088:	0800a520 	.word	0x0800a520
  ldr r2, =_sbss
 800808c:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8008090:	2400078c 	.word	0x2400078c

08008094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008094:	e7fe      	b.n	8008094 <ADC3_IRQHandler>
	...

08008098 <D16_GENERIC>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	b089      	sub	sp, #36	; 0x24
 800809e:	6993      	ldr	r3, [r2, #24]
 80080a0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80080a2:	9103      	str	r1, [sp, #12]
 80080a4:	9307      	str	r3, [sp, #28]
 80080a6:	69d3      	ldr	r3, [r2, #28]
 80080a8:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80080ac:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80080b0:	9106      	str	r1, [sp, #24]
 80080b2:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	d063      	beq.n	8008182 <D16_GENERIC+0xea>
 80080ba:	f001 0520 	and.w	r5, r1, #32
 80080be:	f001 0110 	and.w	r1, r1, #16
 80080c2:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 80081a4 <D16_GENERIC+0x10c>
 80080c6:	46c1      	mov	r9, r8
 80080c8:	9104      	str	r1, [sp, #16]
 80080ca:	2100      	movs	r1, #0
 80080cc:	9505      	str	r5, [sp, #20]
 80080ce:	e04d      	b.n	800816c <D16_GENERIC+0xd4>
 80080d0:	5d87      	ldrb	r7, [r0, r6]
 80080d2:	7805      	ldrb	r5, [r0, #0]
 80080d4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80080d8:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80080dc:	b2fe      	uxtb	r6, r7
 80080de:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80080e2:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80080e6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80080ea:	441d      	add	r5, r3
 80080ec:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80080f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80080f4:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80080f8:	0a9b      	lsrs	r3, r3, #10
 80080fa:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80080fe:	4d27      	ldr	r5, [pc, #156]	; (800819c <D16_GENERIC+0x104>)
 8008100:	fb26 c505 	smlad	r5, r6, r5, ip
 8008104:	4f26      	ldr	r7, [pc, #152]	; (80081a0 <D16_GENERIC+0x108>)
 8008106:	fb26 fc07 	smuad	ip, r6, r7
 800810a:	9e04      	ldr	r6, [sp, #16]
 800810c:	f101 0801 	add.w	r8, r1, #1
 8008110:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008114:	b1ae      	cbz	r6, 8008142 <D16_GENERIC+0xaa>
 8008116:	442c      	add	r4, r5
 8008118:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800811c:	eba4 040a 	sub.w	r4, r4, sl
 8008120:	46aa      	mov	sl, r5
 8008122:	17e7      	asrs	r7, r4, #31
 8008124:	fba4 450b 	umull	r4, r5, r4, fp
 8008128:	e9cd 4500 	strd	r4, r5, [sp]
 800812c:	fb0b 5407 	mla	r4, fp, r7, r5
 8008130:	9401      	str	r4, [sp, #4]
 8008132:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008136:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800813a:	f145 0500 	adc.w	r5, r5, #0
 800813e:	006c      	lsls	r4, r5, #1
 8008140:	4625      	mov	r5, r4
 8008142:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008146:	042d      	lsls	r5, r5, #16
 8008148:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800814c:	2700      	movs	r7, #0
 800814e:	fb01 fb0b 	mul.w	fp, r1, fp
 8008152:	fa1f f188 	uxth.w	r1, r8
 8008156:	fbc9 6705 	smlal	r6, r7, r9, r5
 800815a:	9e03      	ldr	r6, [sp, #12]
 800815c:	10bd      	asrs	r5, r7, #2
 800815e:	f305 050f 	ssat	r5, #16, r5
 8008162:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008166:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008168:	428d      	cmp	r5, r1
 800816a:	d90a      	bls.n	8008182 <D16_GENERIC+0xea>
 800816c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800816e:	2d01      	cmp	r5, #1
 8008170:	b2ee      	uxtb	r6, r5
 8008172:	d1ad      	bne.n	80080d0 <D16_GENERIC+0x38>
 8008174:	9d05      	ldr	r5, [sp, #20]
 8008176:	f850 7b02 	ldr.w	r7, [r0], #2
 800817a:	2d00      	cmp	r5, #0
 800817c:	d0ae      	beq.n	80080dc <D16_GENERIC+0x44>
 800817e:	ba7f      	rev16	r7, r7
 8008180:	e7ac      	b.n	80080dc <D16_GENERIC+0x44>
 8008182:	2000      	movs	r0, #0
 8008184:	9906      	ldr	r1, [sp, #24]
 8008186:	61d3      	str	r3, [r2, #28]
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	f8c2 c008 	str.w	ip, [r2, #8]
 800818e:	60d1      	str	r1, [r2, #12]
 8008190:	6193      	str	r3, [r2, #24]
 8008192:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008196:	b009      	add	sp, #36	; 0x24
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819c:	00030001 	.word	0x00030001
 80081a0:	00010003 	.word	0x00010003
 80081a4:	24000000 	.word	0x24000000

080081a8 <D24_GENERIC>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80081b0:	b089      	sub	sp, #36	; 0x24
 80081b2:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	6993      	ldr	r3, [r2, #24]
 80081b8:	9104      	str	r1, [sp, #16]
 80081ba:	9307      	str	r3, [sp, #28]
 80081bc:	69d1      	ldr	r1, [r2, #28]
 80081be:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80081c2:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	f000 8088 	beq.w	80082dc <D24_GENERIC+0x134>
 80081cc:	f005 0620 	and.w	r6, r5, #32
 80081d0:	f005 0510 	and.w	r5, r5, #16
 80081d4:	f04f 0c00 	mov.w	ip, #0
 80081d8:	f8df e140 	ldr.w	lr, [pc, #320]	; 800831c <D24_GENERIC+0x174>
 80081dc:	9606      	str	r6, [sp, #24]
 80081de:	9505      	str	r5, [sp, #20]
 80081e0:	e064      	b.n	80082ac <D24_GENERIC+0x104>
 80081e2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80081e6:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80081ea:	f810 b007 	ldrb.w	fp, [r0, r7]
 80081ee:	042d      	lsls	r5, r5, #16
 80081f0:	19f0      	adds	r0, r6, r7
 80081f2:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80081f6:	44a9      	add	r9, r5
 80081f8:	fa5f f689 	uxtb.w	r6, r9
 80081fc:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8008200:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8008204:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8008208:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800820c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008210:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8008214:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008218:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800821c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8008220:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008224:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008228:	4d3a      	ldr	r5, [pc, #232]	; (8008314 <D24_GENERIC+0x16c>)
 800822a:	fb26 8705 	smlad	r7, r6, r5, r8
 800822e:	4d3a      	ldr	r5, [pc, #232]	; (8008318 <D24_GENERIC+0x170>)
 8008230:	fb26 3805 	smlad	r8, r6, r5, r3
 8008234:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008238:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800823c:	2301      	movs	r3, #1
 800823e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8008242:	fb26 f603 	smuad	r6, r6, r3
 8008246:	eb0c 0903 	add.w	r9, ip, r3
 800824a:	eb0b 0306 	add.w	r3, fp, r6
 800824e:	9e05      	ldr	r6, [sp, #20]
 8008250:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8008254:	b1ae      	cbz	r6, 8008282 <D24_GENERIC+0xda>
 8008256:	442c      	add	r4, r5
 8008258:	9e03      	ldr	r6, [sp, #12]
 800825a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800825e:	1ba4      	subs	r4, r4, r6
 8008260:	9503      	str	r5, [sp, #12]
 8008262:	17e7      	asrs	r7, r4, #31
 8008264:	fba4 450b 	umull	r4, r5, r4, fp
 8008268:	e9cd 4500 	strd	r4, r5, [sp]
 800826c:	fb0b 5407 	mla	r4, fp, r7, r5
 8008270:	9401      	str	r4, [sp, #4]
 8008272:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008276:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800827a:	f145 0500 	adc.w	r5, r5, #0
 800827e:	006c      	lsls	r4, r5, #1
 8008280:	4625      	mov	r5, r4
 8008282:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008286:	03ad      	lsls	r5, r5, #14
 8008288:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800828c:	2700      	movs	r7, #0
 800828e:	fb0c fb0b 	mul.w	fp, ip, fp
 8008292:	fa1f fc89 	uxth.w	ip, r9
 8008296:	fbca 6705 	smlal	r6, r7, sl, r5
 800829a:	9e04      	ldr	r6, [sp, #16]
 800829c:	10bd      	asrs	r5, r7, #2
 800829e:	f305 050f 	ssat	r5, #16, r5
 80082a2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80082a6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80082a8:	4565      	cmp	r5, ip
 80082aa:	d917      	bls.n	80082dc <D24_GENERIC+0x134>
 80082ac:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80082ae:	f890 9000 	ldrb.w	r9, [r0]
 80082b2:	b2ef      	uxtb	r7, r5
 80082b4:	2d01      	cmp	r5, #1
 80082b6:	b23e      	sxth	r6, r7
 80082b8:	d193      	bne.n	80081e2 <D24_GENERIC+0x3a>
 80082ba:	9d06      	ldr	r5, [sp, #24]
 80082bc:	b1dd      	cbz	r5, 80082f6 <D24_GENERIC+0x14e>
 80082be:	78c7      	ldrb	r7, [r0, #3]
 80082c0:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80082c4:	f01c 0f01 	tst.w	ip, #1
 80082c8:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80082cc:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80082d0:	d11a      	bne.n	8008308 <D24_GENERIC+0x160>
 80082d2:	f890 9001 	ldrb.w	r9, [r0, #1]
 80082d6:	3002      	adds	r0, #2
 80082d8:	44b1      	add	r9, r6
 80082da:	e78d      	b.n	80081f8 <D24_GENERIC+0x50>
 80082dc:	6093      	str	r3, [r2, #8]
 80082de:	2000      	movs	r0, #0
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	f8c2 800c 	str.w	r8, [r2, #12]
 80082e6:	6153      	str	r3, [r2, #20]
 80082e8:	9b07      	ldr	r3, [sp, #28]
 80082ea:	61d1      	str	r1, [r2, #28]
 80082ec:	6114      	str	r4, [r2, #16]
 80082ee:	6193      	str	r3, [r2, #24]
 80082f0:	b009      	add	sp, #36	; 0x24
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	7845      	ldrb	r5, [r0, #1]
 80082f8:	3003      	adds	r0, #3
 80082fa:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80082fe:	022d      	lsls	r5, r5, #8
 8008300:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8008304:	44a9      	add	r9, r5
 8008306:	e777      	b.n	80081f8 <D24_GENERIC+0x50>
 8008308:	7886      	ldrb	r6, [r0, #2]
 800830a:	3004      	adds	r0, #4
 800830c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8008310:	44a9      	add	r9, r5
 8008312:	e771      	b.n	80081f8 <D24_GENERIC+0x50>
 8008314:	00030001 	.word	0x00030001
 8008318:	00060007 	.word	0x00060007
 800831c:	24000000 	.word	0x24000000

08008320 <D32_GENERIC>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008328:	b089      	sub	sp, #36	; 0x24
 800832a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800832c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	6993      	ldr	r3, [r2, #24]
 8008332:	9104      	str	r1, [sp, #16]
 8008334:	9307      	str	r3, [sp, #28]
 8008336:	9503      	str	r5, [sp, #12]
 8008338:	69d1      	ldr	r1, [r2, #28]
 800833a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800833c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008340:	2e00      	cmp	r6, #0
 8008342:	f000 8097 	beq.w	8008474 <D32_GENERIC+0x154>
 8008346:	f005 0620 	and.w	r6, r5, #32
 800834a:	f005 0510 	and.w	r5, r5, #16
 800834e:	f04f 0e00 	mov.w	lr, #0
 8008352:	f8df c150 	ldr.w	ip, [pc, #336]	; 80084a4 <D32_GENERIC+0x184>
 8008356:	9606      	str	r6, [sp, #24]
 8008358:	9505      	str	r5, [sp, #20]
 800835a:	e079      	b.n	8008450 <D32_GENERIC+0x130>
 800835c:	783d      	ldrb	r5, [r7, #0]
 800835e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8008362:	042d      	lsls	r5, r5, #16
 8008364:	f810 a006 	ldrb.w	sl, [r0, r6]
 8008368:	f890 9000 	ldrb.w	r9, [r0]
 800836c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8008370:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8008374:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8008378:	44a9      	add	r9, r5
 800837a:	fa5f f789 	uxtb.w	r7, r9
 800837e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8008382:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8008386:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800838a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800838e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008392:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8008396:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800839a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800839e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80083a2:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80083a6:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80083aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80083ae:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80083b2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80083b6:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80083ba:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80083be:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80083c2:	4d34      	ldr	r5, [pc, #208]	; (8008494 <D32_GENERIC+0x174>)
 80083c4:	fb29 8805 	smlad	r8, r9, r5, r8
 80083c8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80083cc:	fb26 8705 	smlad	r7, r6, r5, r8
 80083d0:	4d31      	ldr	r5, [pc, #196]	; (8008498 <D32_GENERIC+0x178>)
 80083d2:	fb29 3305 	smlad	r3, r9, r5, r3
 80083d6:	4d31      	ldr	r5, [pc, #196]	; (800849c <D32_GENERIC+0x17c>)
 80083d8:	fb26 3805 	smlad	r8, r6, r5, r3
 80083dc:	2301      	movs	r3, #1
 80083de:	fb29 f903 	smuad	r9, r9, r3
 80083e2:	4b2f      	ldr	r3, [pc, #188]	; (80084a0 <D32_GENERIC+0x180>)
 80083e4:	fb26 9303 	smlad	r3, r6, r3, r9
 80083e8:	9e05      	ldr	r6, [sp, #20]
 80083ea:	f10e 0901 	add.w	r9, lr, #1
 80083ee:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80083f2:	b1ae      	cbz	r6, 8008420 <D32_GENERIC+0x100>
 80083f4:	442c      	add	r4, r5
 80083f6:	9e02      	ldr	r6, [sp, #8]
 80083f8:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80083fc:	1ba4      	subs	r4, r4, r6
 80083fe:	9502      	str	r5, [sp, #8]
 8008400:	17e7      	asrs	r7, r4, #31
 8008402:	fba4 450a 	umull	r4, r5, r4, sl
 8008406:	e9cd 4500 	strd	r4, r5, [sp]
 800840a:	fb0a 5407 	mla	r4, sl, r7, r5
 800840e:	9401      	str	r4, [sp, #4]
 8008410:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008414:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008418:	f145 0500 	adc.w	r5, r5, #0
 800841c:	006c      	lsls	r4, r5, #1
 800841e:	4625      	mov	r5, r4
 8008420:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8008424:	036d      	lsls	r5, r5, #13
 8008426:	9f03      	ldr	r7, [sp, #12]
 8008428:	fb0e fb0a 	mul.w	fp, lr, sl
 800842c:	fa1f fe89 	uxth.w	lr, r9
 8008430:	f04f 0a00 	mov.w	sl, #0
 8008434:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008438:	9e04      	ldr	r6, [sp, #16]
 800843a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800843e:	4657      	mov	r7, sl
 8008440:	10bd      	asrs	r5, r7, #2
 8008442:	f305 050f 	ssat	r5, #16, r5
 8008446:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800844a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800844c:	4575      	cmp	r5, lr
 800844e:	d911      	bls.n	8008474 <D32_GENERIC+0x154>
 8008450:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008452:	b2ee      	uxtb	r6, r5
 8008454:	2d01      	cmp	r5, #1
 8008456:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800845a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800845e:	f47f af7d 	bne.w	800835c <D32_GENERIC+0x3c>
 8008462:	1d05      	adds	r5, r0, #4
 8008464:	f8d0 9000 	ldr.w	r9, [r0]
 8008468:	9806      	ldr	r0, [sp, #24]
 800846a:	b180      	cbz	r0, 800848e <D32_GENERIC+0x16e>
 800846c:	fa99 f999 	rev16.w	r9, r9
 8008470:	4628      	mov	r0, r5
 8008472:	e782      	b.n	800837a <D32_GENERIC+0x5a>
 8008474:	6093      	str	r3, [r2, #8]
 8008476:	2000      	movs	r0, #0
 8008478:	9b02      	ldr	r3, [sp, #8]
 800847a:	f8c2 800c 	str.w	r8, [r2, #12]
 800847e:	6153      	str	r3, [r2, #20]
 8008480:	9b07      	ldr	r3, [sp, #28]
 8008482:	61d1      	str	r1, [r2, #28]
 8008484:	6114      	str	r4, [r2, #16]
 8008486:	6193      	str	r3, [r2, #24]
 8008488:	b009      	add	sp, #36	; 0x24
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	4628      	mov	r0, r5
 8008490:	e773      	b.n	800837a <D32_GENERIC+0x5a>
 8008492:	bf00      	nop
 8008494:	00060003 	.word	0x00060003
 8008498:	000a000c 	.word	0x000a000c
 800849c:	000c000a 	.word	0x000c000a
 80084a0:	00030006 	.word	0x00030006
 80084a4:	24000000 	.word	0x24000000

080084a8 <D48_GENERIC>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	6913      	ldr	r3, [r2, #16]
 80084ae:	b089      	sub	sp, #36	; 0x24
 80084b0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	6953      	ldr	r3, [r2, #20]
 80084b6:	9104      	str	r1, [sp, #16]
 80084b8:	9302      	str	r3, [sp, #8]
 80084ba:	6993      	ldr	r3, [r2, #24]
 80084bc:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80084c6:	9100      	str	r1, [sp, #0]
 80084c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80084ca:	9103      	str	r1, [sp, #12]
 80084cc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	f000 80be 	beq.w	8008650 <D48_GENERIC+0x1a8>
 80084d4:	f001 0420 	and.w	r4, r1, #32
 80084d8:	f001 0110 	and.w	r1, r1, #16
 80084dc:	f04f 0e00 	mov.w	lr, #0
 80084e0:	9105      	str	r1, [sp, #20]
 80084e2:	9406      	str	r4, [sp, #24]
 80084e4:	4962      	ldr	r1, [pc, #392]	; (8008670 <D48_GENERIC+0x1c8>)
 80084e6:	e0a0      	b.n	800862a <D48_GENERIC+0x182>
 80084e8:	eb00 0608 	add.w	r6, r0, r8
 80084ec:	f810 a008 	ldrb.w	sl, [r0, r8]
 80084f0:	f810 9005 	ldrb.w	r9, [r0, r5]
 80084f4:	5df4      	ldrb	r4, [r6, r7]
 80084f6:	443e      	add	r6, r7
 80084f8:	f890 b000 	ldrb.w	fp, [r0]
 80084fc:	0420      	lsls	r0, r4, #16
 80084fe:	eb06 0408 	add.w	r4, r6, r8
 8008502:	f816 6008 	ldrb.w	r6, [r6, r8]
 8008506:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800850a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800850e:	4427      	add	r7, r4
 8008510:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8008514:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8008518:	eb0a 040b 	add.w	r4, sl, fp
 800851c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8008520:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008524:	b2f7      	uxtb	r7, r6
 8008526:	b2e6      	uxtb	r6, r4
 8008528:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800852c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8008530:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8008534:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008538:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800853c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8008540:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8008544:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8008548:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800854c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008550:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8008554:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008558:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800855c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008560:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008564:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008568:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800856c:	9d00      	ldr	r5, [sp, #0]
 800856e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008572:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008576:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800857a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800857e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8008582:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008586:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800858a:	4c3a      	ldr	r4, [pc, #232]	; (8008674 <D48_GENERIC+0x1cc>)
 800858c:	fb26 5a04 	smlad	sl, r6, r4, r5
 8008590:	4c39      	ldr	r4, [pc, #228]	; (8008678 <D48_GENERIC+0x1d0>)
 8008592:	fb29 aa04 	smlad	sl, r9, r4, sl
 8008596:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800859a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800859e:	4c37      	ldr	r4, [pc, #220]	; (800867c <D48_GENERIC+0x1d4>)
 80085a0:	fb26 3304 	smlad	r3, r6, r4, r3
 80085a4:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80085a8:	fb29 3304 	smlad	r3, r9, r4, r3
 80085ac:	4c34      	ldr	r4, [pc, #208]	; (8008680 <D48_GENERIC+0x1d8>)
 80085ae:	fb27 3304 	smlad	r3, r7, r4, r3
 80085b2:	2501      	movs	r5, #1
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	fb26 f605 	smuad	r6, r6, r5
 80085ba:	4b32      	ldr	r3, [pc, #200]	; (8008684 <D48_GENERIC+0x1dc>)
 80085bc:	fb29 6903 	smlad	r9, r9, r3, r6
 80085c0:	4b31      	ldr	r3, [pc, #196]	; (8008688 <D48_GENERIC+0x1e0>)
 80085c2:	fb27 9303 	smlad	r3, r7, r3, r9
 80085c6:	9c05      	ldr	r4, [sp, #20]
 80085c8:	eb0e 0805 	add.w	r8, lr, r5
 80085cc:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 80085d0:	b19c      	cbz	r4, 80085fa <D48_GENERIC+0x152>
 80085d2:	9c01      	ldr	r4, [sp, #4]
 80085d4:	9d02      	ldr	r5, [sp, #8]
 80085d6:	4454      	add	r4, sl
 80085d8:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80085dc:	f8cd a008 	str.w	sl, [sp, #8]
 80085e0:	1b64      	subs	r4, r4, r5
 80085e2:	fba4 ab09 	umull	sl, fp, r4, r9
 80085e6:	17e7      	asrs	r7, r4, #31
 80085e8:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 80085ec:	fb09 bb07 	mla	fp, r9, r7, fp
 80085f0:	f14b 0500 	adc.w	r5, fp, #0
 80085f4:	006c      	lsls	r4, r5, #1
 80085f6:	46a2      	mov	sl, r4
 80085f8:	9401      	str	r4, [sp, #4]
 80085fa:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80085fc:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8008600:	9d03      	ldr	r5, [sp, #12]
 8008602:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008606:	fb0e f606 	mul.w	r6, lr, r6
 800860a:	fa1f fe88 	uxth.w	lr, r8
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	fbc5 780a 	smlal	r7, r8, r5, sl
 8008616:	4645      	mov	r5, r8
 8008618:	10ac      	asrs	r4, r5, #2
 800861a:	9d04      	ldr	r5, [sp, #16]
 800861c:	f304 040f 	ssat	r4, #16, r4
 8008620:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8008624:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008626:	4574      	cmp	r4, lr
 8008628:	d912      	bls.n	8008650 <D48_GENERIC+0x1a8>
 800862a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800862c:	b2e5      	uxtb	r5, r4
 800862e:	2c01      	cmp	r4, #1
 8008630:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8008634:	f1c5 0700 	rsb	r7, r5, #0
 8008638:	f47f af56 	bne.w	80084e8 <D48_GENERIC+0x40>
 800863c:	9d06      	ldr	r5, [sp, #24]
 800863e:	e9d0 4600 	ldrd	r4, r6, [r0]
 8008642:	3006      	adds	r0, #6
 8008644:	2d00      	cmp	r5, #0
 8008646:	f43f af6b 	beq.w	8008520 <D48_GENERIC+0x78>
 800864a:	ba64      	rev16	r4, r4
 800864c:	ba76      	rev16	r6, r6
 800864e:	e767      	b.n	8008520 <D48_GENERIC+0x78>
 8008650:	6093      	str	r3, [r2, #8]
 8008652:	2000      	movs	r0, #0
 8008654:	9b00      	ldr	r3, [sp, #0]
 8008656:	f8c2 c01c 	str.w	ip, [r2, #28]
 800865a:	60d3      	str	r3, [r2, #12]
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	6113      	str	r3, [r2, #16]
 8008660:	9b02      	ldr	r3, [sp, #8]
 8008662:	6153      	str	r3, [r2, #20]
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	6193      	str	r3, [r2, #24]
 8008668:	b009      	add	sp, #36	; 0x24
 800866a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866e:	bf00      	nop
 8008670:	24000000 	.word	0x24000000
 8008674:	000f000a 	.word	0x000f000a
 8008678:	00060003 	.word	0x00060003
 800867c:	00150019 	.word	0x00150019
 8008680:	00190015 	.word	0x00190015
 8008684:	00030006 	.word	0x00030006
 8008688:	000a000f 	.word	0x000a000f

0800868c <D64_GENERIC>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	6913      	ldr	r3, [r2, #16]
 8008692:	b089      	sub	sp, #36	; 0x24
 8008694:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	6953      	ldr	r3, [r2, #20]
 800869a:	9105      	str	r1, [sp, #20]
 800869c:	9303      	str	r3, [sp, #12]
 800869e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80086a0:	6993      	ldr	r3, [r2, #24]
 80086a2:	69d4      	ldr	r4, [r2, #28]
 80086a4:	9307      	str	r3, [sp, #28]
 80086a6:	9504      	str	r5, [sp, #16]
 80086a8:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80086ac:	2900      	cmp	r1, #0
 80086ae:	f000 80e8 	beq.w	8008882 <D64_GENERIC+0x1f6>
 80086b2:	6a11      	ldr	r1, [r2, #32]
 80086b4:	2500      	movs	r5, #0
 80086b6:	46b3      	mov	fp, r6
 80086b8:	9302      	str	r3, [sp, #8]
 80086ba:	9106      	str	r1, [sp, #24]
 80086bc:	4978      	ldr	r1, [pc, #480]	; (80088a0 <D64_GENERIC+0x214>)
 80086be:	e0cc      	b.n	800885a <D64_GENERIC+0x1ce>
 80086c0:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 80086c4:	f1ce 0c00 	rsb	ip, lr, #0
 80086c8:	f890 9000 	ldrb.w	r9, [r0]
 80086cc:	eb00 0708 	add.w	r7, r0, r8
 80086d0:	f810 6008 	ldrb.w	r6, [r0, r8]
 80086d4:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 80086d8:	f817 000c 	ldrb.w	r0, [r7, ip]
 80086dc:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 80086e0:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80086e4:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80086e8:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80086ec:	f817 000c 	ldrb.w	r0, [r7, ip]
 80086f0:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80086f4:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 80086f8:	0400      	lsls	r0, r0, #16
 80086fa:	4467      	add	r7, ip
 80086fc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8008700:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008704:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8008708:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800870c:	444e      	add	r6, r9
 800870e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8008712:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8008716:	44c2      	add	sl, r8
 8008718:	b2f7      	uxtb	r7, r6
 800871a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800871e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8008722:	0e36      	lsrs	r6, r6, #24
 8008724:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008728:	fa5f fc8a 	uxtb.w	ip, sl
 800872c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8008730:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8008734:	443c      	add	r4, r7
 8008736:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800873a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800873e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8008742:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8008746:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800874a:	4b56      	ldr	r3, [pc, #344]	; (80088a4 <D64_GENERIC+0x218>)
 800874c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8008750:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008754:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8008758:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800875c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008760:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8008764:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8008768:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800876c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008770:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008774:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008778:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800877c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008780:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8008784:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8008788:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800878c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008790:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8008794:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008798:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800879c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80087a0:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80087a4:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80087a8:	fb28 b903 	smlad	r9, r8, r3, fp
 80087ac:	4b3e      	ldr	r3, [pc, #248]	; (80088a8 <D64_GENERIC+0x21c>)
 80087ae:	fb26 9903 	smlad	r9, r6, r3, r9
 80087b2:	4b3e      	ldr	r3, [pc, #248]	; (80088ac <D64_GENERIC+0x220>)
 80087b4:	fb2c 9703 	smlad	r7, ip, r3, r9
 80087b8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 80087bc:	fb2a 7909 	smlad	r9, sl, r9, r7
 80087c0:	4f3b      	ldr	r7, [pc, #236]	; (80088b0 <D64_GENERIC+0x224>)
 80087c2:	9b02      	ldr	r3, [sp, #8]
 80087c4:	fb28 3307 	smlad	r3, r8, r7, r3
 80087c8:	fb2a 3317 	smladx	r3, sl, r7, r3
 80087cc:	4f39      	ldr	r7, [pc, #228]	; (80088b4 <D64_GENERIC+0x228>)
 80087ce:	fb26 3307 	smlad	r3, r6, r7, r3
 80087d2:	fb2c 3b17 	smladx	fp, ip, r7, r3
 80087d6:	f04f 0e01 	mov.w	lr, #1
 80087da:	fb28 f80e 	smuad	r8, r8, lr
 80087de:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <D64_GENERIC+0x22c>)
 80087e0:	fb26 8603 	smlad	r6, r6, r3, r8
 80087e4:	4b35      	ldr	r3, [pc, #212]	; (80088bc <D64_GENERIC+0x230>)
 80087e6:	fb2c 6c03 	smlad	ip, ip, r3, r6
 80087ea:	4b35      	ldr	r3, [pc, #212]	; (80088c0 <D64_GENERIC+0x234>)
 80087ec:	fb2a c303 	smlad	r3, sl, r3, ip
 80087f0:	9f06      	ldr	r7, [sp, #24]
 80087f2:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	b1cf      	cbz	r7, 800882e <D64_GENERIC+0x1a2>
 80087fa:	9b00      	ldr	r3, [sp, #0]
 80087fc:	444b      	add	r3, r9
 80087fe:	461e      	mov	r6, r3
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	f8cd 900c 	str.w	r9, [sp, #12]
 8008806:	1af6      	subs	r6, r6, r3
 8008808:	46b0      	mov	r8, r6
 800880a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800880e:	e9cd 8900 	strd	r8, r9, [sp]
 8008812:	fba6 8907 	umull	r8, r9, r6, r7
 8008816:	9e01      	ldr	r6, [sp, #4]
 8008818:	fb07 9306 	mla	r3, r7, r6, r9
 800881c:	4646      	mov	r6, r8
 800881e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8008822:	f143 0700 	adc.w	r7, r3, #0
 8008826:	fa07 f30e 	lsl.w	r3, r7, lr
 800882a:	4699      	mov	r9, r3
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8008832:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800883c:	2700      	movs	r7, #0
 800883e:	fb05 fc0c 	mul.w	ip, r5, ip
 8008842:	3501      	adds	r5, #1
 8008844:	fbc3 6709 	smlal	r6, r7, r3, r9
 8008848:	9b05      	ldr	r3, [sp, #20]
 800884a:	10be      	asrs	r6, r7, #2
 800884c:	f306 060f 	ssat	r6, #16, r6
 8008850:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8008854:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008856:	42ae      	cmp	r6, r5
 8008858:	dd11      	ble.n	800887e <D64_GENERIC+0x1f2>
 800885a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800885e:	f1be 0f01 	cmp.w	lr, #1
 8008862:	f47f af2d 	bne.w	80086c0 <D64_GENERIC+0x34>
 8008866:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8008868:	f100 0c08 	add.w	ip, r0, #8
 800886c:	06bb      	lsls	r3, r7, #26
 800886e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8008872:	d513      	bpl.n	800889c <D64_GENERIC+0x210>
 8008874:	ba76      	rev16	r6, r6
 8008876:	fa9a fa9a 	rev16.w	sl, sl
 800887a:	4660      	mov	r0, ip
 800887c:	e74c      	b.n	8008718 <D64_GENERIC+0x8c>
 800887e:	465e      	mov	r6, fp
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	6093      	str	r3, [r2, #8]
 8008884:	2000      	movs	r0, #0
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	60d6      	str	r6, [r2, #12]
 800888a:	6113      	str	r3, [r2, #16]
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	61d4      	str	r4, [r2, #28]
 8008890:	6153      	str	r3, [r2, #20]
 8008892:	9b07      	ldr	r3, [sp, #28]
 8008894:	6193      	str	r3, [r2, #24]
 8008896:	b009      	add	sp, #36	; 0x24
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	4660      	mov	r0, ip
 800889e:	e73b      	b.n	8008718 <D64_GENERIC+0x8c>
 80088a0:	24000000 	.word	0x24000000
 80088a4:	001c0015 	.word	0x001c0015
 80088a8:	000f000a 	.word	0x000f000a
 80088ac:	00060003 	.word	0x00060003
 80088b0:	0024002a 	.word	0x0024002a
 80088b4:	002e0030 	.word	0x002e0030
 80088b8:	00030006 	.word	0x00030006
 80088bc:	000a000f 	.word	0x000a000f
 80088c0:	0015001c 	.word	0x0015001c

080088c4 <D80_GENERIC>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	b08b      	sub	sp, #44	; 0x2c
 80088ca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80088cc:	9107      	str	r1, [sp, #28]
 80088ce:	6911      	ldr	r1, [r2, #16]
 80088d0:	9104      	str	r1, [sp, #16]
 80088d2:	6951      	ldr	r1, [r2, #20]
 80088d4:	9105      	str	r1, [sp, #20]
 80088d6:	6991      	ldr	r1, [r2, #24]
 80088d8:	9109      	str	r1, [sp, #36]	; 0x24
 80088da:	69d1      	ldr	r1, [r2, #28]
 80088dc:	9102      	str	r1, [sp, #8]
 80088de:	6891      	ldr	r1, [r2, #8]
 80088e0:	9103      	str	r1, [sp, #12]
 80088e2:	68d1      	ldr	r1, [r2, #12]
 80088e4:	9101      	str	r1, [sp, #4]
 80088e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80088e8:	9106      	str	r1, [sp, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 810b 	beq.w	8008b06 <D80_GENERIC+0x242>
 80088f0:	6a13      	ldr	r3, [r2, #32]
 80088f2:	f04f 0800 	mov.w	r8, #0
 80088f6:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008b58 <D80_GENERIC+0x294>
 80088fa:	9308      	str	r3, [sp, #32]
 80088fc:	9200      	str	r2, [sp, #0]
 80088fe:	e0ee      	b.n	8008ade <D80_GENERIC+0x21a>
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f890 e000 	ldrb.w	lr, [r0]
 8008906:	b219      	sxth	r1, r3
 8008908:	425c      	negs	r4, r3
 800890a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800890e:	004e      	lsls	r6, r1, #1
 8008910:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008914:	4431      	add	r1, r6
 8008916:	1843      	adds	r3, r0, r1
 8008918:	f810 b001 	ldrb.w	fp, [r0, r1]
 800891c:	1919      	adds	r1, r3, r4
 800891e:	5d1b      	ldrb	r3, [r3, r4]
 8008920:	1948      	adds	r0, r1, r5
 8008922:	f811 a005 	ldrb.w	sl, [r1, r5]
 8008926:	041b      	lsls	r3, r3, #16
 8008928:	1907      	adds	r7, r0, r4
 800892a:	5d01      	ldrb	r1, [r0, r4]
 800892c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008930:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8008934:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8008938:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800893c:	0409      	lsls	r1, r1, #16
 800893e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8008942:	eb0b 0905 	add.w	r9, fp, r5
 8008946:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800894a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800894e:	eb09 0b04 	add.w	fp, r9, r4
 8008952:	f819 4004 	ldrb.w	r4, [r9, r4]
 8008956:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800895a:	4473      	add	r3, lr
 800895c:	eb0b 0006 	add.w	r0, fp, r6
 8008960:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8008964:	4439      	add	r1, r7
 8008966:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800896a:	b2df      	uxtb	r7, r3
 800896c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8008970:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8008974:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8008978:	fa5f fa81 	uxtb.w	sl, r1
 800897c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008980:	9c02      	ldr	r4, [sp, #8]
 8008982:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8008986:	441c      	add	r4, r3
 8008988:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800898c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8008990:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008994:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008998:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800899c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80089a0:	b2ed      	uxtb	r5, r5
 80089a2:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 80089a6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80089aa:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80089ae:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80089b2:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80089b6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80089ba:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80089be:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80089c2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80089c6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80089ca:	0e09      	lsrs	r1, r1, #24
 80089cc:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80089d0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80089d4:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80089d8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80089dc:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80089e0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80089e4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80089e8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80089ec:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80089f0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80089f4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80089f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80089fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008a00:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008a04:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008a08:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8008a0c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8008a10:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8008a14:	9202      	str	r2, [sp, #8]
 8008a16:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008a1a:	4a43      	ldr	r2, [pc, #268]	; (8008b28 <D80_GENERIC+0x264>)
 8008a1c:	9f01      	ldr	r7, [sp, #4]
 8008a1e:	fb23 7a02 	smlad	sl, r3, r2, r7
 8008a22:	4a42      	ldr	r2, [pc, #264]	; (8008b2c <D80_GENERIC+0x268>)
 8008a24:	fb26 aa02 	smlad	sl, r6, r2, sl
 8008a28:	4a41      	ldr	r2, [pc, #260]	; (8008b30 <D80_GENERIC+0x26c>)
 8008a2a:	fb24 aa02 	smlad	sl, r4, r2, sl
 8008a2e:	4a41      	ldr	r2, [pc, #260]	; (8008b34 <D80_GENERIC+0x270>)
 8008a30:	fb21 a702 	smlad	r7, r1, r2, sl
 8008a34:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008a38:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8008a3c:	4a3e      	ldr	r2, [pc, #248]	; (8008b38 <D80_GENERIC+0x274>)
 8008a3e:	9f03      	ldr	r7, [sp, #12]
 8008a40:	fb23 7e02 	smlad	lr, r3, r2, r7
 8008a44:	4a3d      	ldr	r2, [pc, #244]	; (8008b3c <D80_GENERIC+0x278>)
 8008a46:	fb26 ee02 	smlad	lr, r6, r2, lr
 8008a4a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8008a4e:	fb24 e707 	smlad	r7, r4, r7, lr
 8008a52:	4a3b      	ldr	r2, [pc, #236]	; (8008b40 <D80_GENERIC+0x27c>)
 8008a54:	fb21 7702 	smlad	r7, r1, r2, r7
 8008a58:	4a3a      	ldr	r2, [pc, #232]	; (8008b44 <D80_GENERIC+0x280>)
 8008a5a:	fb25 7202 	smlad	r2, r5, r2, r7
 8008a5e:	f04f 0901 	mov.w	r9, #1
 8008a62:	9201      	str	r2, [sp, #4]
 8008a64:	fb23 f909 	smuad	r9, r3, r9
 8008a68:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <D80_GENERIC+0x284>)
 8008a6a:	fb26 9603 	smlad	r6, r6, r3, r9
 8008a6e:	4f37      	ldr	r7, [pc, #220]	; (8008b4c <D80_GENERIC+0x288>)
 8008a70:	fb24 6407 	smlad	r4, r4, r7, r6
 8008a74:	4f36      	ldr	r7, [pc, #216]	; (8008b50 <D80_GENERIC+0x28c>)
 8008a76:	fb21 4707 	smlad	r7, r1, r7, r4
 8008a7a:	4936      	ldr	r1, [pc, #216]	; (8008b54 <D80_GENERIC+0x290>)
 8008a7c:	fb25 7301 	smlad	r3, r5, r1, r7
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	b193      	cbz	r3, 8008ab0 <D80_GENERIC+0x1ec>
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	4452      	add	r2, sl
 8008a8e:	4614      	mov	r4, r2
 8008a90:	9a05      	ldr	r2, [sp, #20]
 8008a92:	f8cd a014 	str.w	sl, [sp, #20]
 8008a96:	1aa4      	subs	r4, r4, r2
 8008a98:	fba4 1203 	umull	r1, r2, r4, r3
 8008a9c:	17e7      	asrs	r7, r4, #31
 8008a9e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8008aa2:	fb03 2207 	mla	r2, r3, r7, r2
 8008aa6:	f142 0500 	adc.w	r5, r2, #0
 8008aaa:	006b      	lsls	r3, r5, #1
 8008aac:	469a      	mov	sl, r3
 8008aae:	9304      	str	r3, [sp, #16]
 8008ab0:	9e00      	ldr	r6, [sp, #0]
 8008ab2:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8008ab6:	9a06      	ldr	r2, [sp, #24]
 8008ab8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008abc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8008abe:	2500      	movs	r5, #0
 8008ac0:	fb08 f303 	mul.w	r3, r8, r3
 8008ac4:	fbc2 450a 	smlal	r4, r5, r2, sl
 8008ac8:	9a07      	ldr	r2, [sp, #28]
 8008aca:	f108 0801 	add.w	r8, r8, #1
 8008ace:	10a9      	asrs	r1, r5, #2
 8008ad0:	f301 010f 	ssat	r1, #16, r1
 8008ad4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008ad8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8008ada:	4543      	cmp	r3, r8
 8008adc:	dd12      	ble.n	8008b04 <D80_GENERIC+0x240>
 8008ade:	9b00      	ldr	r3, [sp, #0]
 8008ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	f47f af0c 	bne.w	8008900 <D80_GENERIC+0x3c>
 8008ae8:	9b00      	ldr	r3, [sp, #0]
 8008aea:	6885      	ldr	r5, [r0, #8]
 8008aec:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008aee:	06b2      	lsls	r2, r6, #26
 8008af0:	e9d0 3100 	ldrd	r3, r1, [r0]
 8008af4:	f100 000a 	add.w	r0, r0, #10
 8008af8:	f57f af35 	bpl.w	8008966 <D80_GENERIC+0xa2>
 8008afc:	ba5b      	rev16	r3, r3
 8008afe:	ba49      	rev16	r1, r1
 8008b00:	ba6d      	rev16	r5, r5
 8008b02:	e730      	b.n	8008966 <D80_GENERIC+0xa2>
 8008b04:	4632      	mov	r2, r6
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	6093      	str	r3, [r2, #8]
 8008b0c:	9b01      	ldr	r3, [sp, #4]
 8008b0e:	60d3      	str	r3, [r2, #12]
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	61d3      	str	r3, [r2, #28]
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	6113      	str	r3, [r2, #16]
 8008b18:	9b05      	ldr	r3, [sp, #20]
 8008b1a:	6153      	str	r3, [r2, #20]
 8008b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1e:	6193      	str	r3, [r2, #24]
 8008b20:	b00b      	add	sp, #44	; 0x2c
 8008b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b26:	bf00      	nop
 8008b28:	002d0024 	.word	0x002d0024
 8008b2c:	001c0015 	.word	0x001c0015
 8008b30:	000f000a 	.word	0x000f000a
 8008b34:	00060003 	.word	0x00060003
 8008b38:	0037003f 	.word	0x0037003f
 8008b3c:	00450049 	.word	0x00450049
 8008b40:	00490045 	.word	0x00490045
 8008b44:	003f0037 	.word	0x003f0037
 8008b48:	00030006 	.word	0x00030006
 8008b4c:	000a000f 	.word	0x000a000f
 8008b50:	0015001c 	.word	0x0015001c
 8008b54:	0024002d 	.word	0x0024002d
 8008b58:	24000000 	.word	0x24000000

08008b5c <D128_GENERIC>:
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b60:	b08d      	sub	sp, #52	; 0x34
 8008b62:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008b64:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008b68:	9109      	str	r1, [sp, #36]	; 0x24
 8008b6a:	6911      	ldr	r1, [r2, #16]
 8008b6c:	9201      	str	r2, [sp, #4]
 8008b6e:	9106      	str	r1, [sp, #24]
 8008b70:	6951      	ldr	r1, [r2, #20]
 8008b72:	9107      	str	r1, [sp, #28]
 8008b74:	6991      	ldr	r1, [r2, #24]
 8008b76:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b78:	6891      	ldr	r1, [r2, #8]
 8008b7a:	9103      	str	r1, [sp, #12]
 8008b7c:	68d1      	ldr	r1, [r2, #12]
 8008b7e:	9102      	str	r1, [sp, #8]
 8008b80:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008b82:	9108      	str	r1, [sp, #32]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8183 	beq.w	8008e90 <D128_GENERIC+0x334>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6a12      	ldr	r2, [r2, #32]
 8008b8e:	4681      	mov	r9, r0
 8008b90:	920a      	str	r2, [sp, #40]	; 0x28
 8008b92:	e9cd a304 	strd	sl, r3, [sp, #16]
 8008b96:	e165      	b.n	8008e64 <D128_GENERIC+0x308>
 8008b98:	b2d2      	uxtb	r2, r2
 8008b9a:	f899 b000 	ldrb.w	fp, [r9]
 8008b9e:	b213      	sxth	r3, r2
 8008ba0:	4255      	negs	r5, r2
 8008ba2:	f819 0002 	ldrb.w	r0, [r9, r2]
 8008ba6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008baa:	009f      	lsls	r7, r3, #2
 8008bac:	eb09 0402 	add.w	r4, r9, r2
 8008bb0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8008bb4:	f819 8002 	ldrb.w	r8, [r9, r2]
 8008bb8:	443b      	add	r3, r7
 8008bba:	1962      	adds	r2, r4, r5
 8008bbc:	5d64      	ldrb	r4, [r4, r5]
 8008bbe:	eb02 0c03 	add.w	ip, r2, r3
 8008bc2:	0424      	lsls	r4, r4, #16
 8008bc4:	5cd3      	ldrb	r3, [r2, r3]
 8008bc6:	eb0c 0e05 	add.w	lr, ip, r5
 8008bca:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8008bce:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8008bd2:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8008bd6:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8008bda:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8008bde:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8008be2:	eb0c 0e06 	add.w	lr, ip, r6
 8008be6:	f81c a006 	ldrb.w	sl, [ip, r6]
 8008bea:	0412      	lsls	r2, r2, #16
 8008bec:	445c      	add	r4, fp
 8008bee:	eb0e 0c05 	add.w	ip, lr, r5
 8008bf2:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8008bf6:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8008bfa:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8008bfe:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008c08:	eb00 0b06 	add.w	fp, r0, r6
 8008c0c:	5d80      	ldrb	r0, [r0, r6]
 8008c0e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8008c12:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8008c16:	eb0b 0a05 	add.w	sl, fp, r5
 8008c1a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8008c1e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8008c22:	0436      	lsls	r6, r6, #16
 8008c24:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008c28:	4442      	add	r2, r8
 8008c2a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8008c2e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8008c32:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008c36:	44b9      	add	r9, r7
 8008c38:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008c3c:	4463      	add	r3, ip
 8008c3e:	eb06 0508 	add.w	r5, r6, r8
 8008c42:	b2e7      	uxtb	r7, r4
 8008c44:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008c48:	499b      	ldr	r1, [pc, #620]	; (8008eb8 <D128_GENERIC+0x35c>)
 8008c4a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8008c4e:	0e24      	lsrs	r4, r4, #24
 8008c50:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008c54:	b2d7      	uxtb	r7, r2
 8008c56:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8008c5a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008c5e:	9904      	ldr	r1, [sp, #16]
 8008c60:	4461      	add	r1, ip
 8008c62:	468c      	mov	ip, r1
 8008c64:	4994      	ldr	r1, [pc, #592]	; (8008eb8 <D128_GENERIC+0x35c>)
 8008c66:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8008c6a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008c6e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8008c72:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008c76:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8008c7a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8008c7e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8008c82:	0e12      	lsrs	r2, r2, #24
 8008c84:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8008c88:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008c8c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008c90:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008c94:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8008c98:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008ca2:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8008ca6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008caa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008cae:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8008cb2:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008cb6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008cba:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8008cbe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008cc2:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8008cc6:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8008cca:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008cce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008cd2:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008cd6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008cda:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8008cde:	0e1b      	lsrs	r3, r3, #24
 8008ce0:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8008ce4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008ce8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8008cec:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8008cf0:	b2eb      	uxtb	r3, r5
 8008cf2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008cf6:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8008cfa:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d02:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8008d06:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8008d0a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008d0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d12:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008d16:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8008d1a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8008d1e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8008d22:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008d26:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008d2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008d2e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8008d32:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008d36:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8008d3a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8008d3e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8008d42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008d46:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008d4a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008d4e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8008d52:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8008d56:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008d5a:	9104      	str	r1, [sp, #16]
 8008d5c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008d60:	9902      	ldr	r1, [sp, #8]
 8008d62:	4a56      	ldr	r2, [pc, #344]	; (8008ebc <D128_GENERIC+0x360>)
 8008d64:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008d68:	4955      	ldr	r1, [pc, #340]	; (8008ec0 <D128_GENERIC+0x364>)
 8008d6a:	fb28 2201 	smlad	r2, r8, r1, r2
 8008d6e:	4955      	ldr	r1, [pc, #340]	; (8008ec4 <D128_GENERIC+0x368>)
 8008d70:	fb27 2201 	smlad	r2, r7, r1, r2
 8008d74:	4954      	ldr	r1, [pc, #336]	; (8008ec8 <D128_GENERIC+0x36c>)
 8008d76:	fb26 2201 	smlad	r2, r6, r1, r2
 8008d7a:	4954      	ldr	r1, [pc, #336]	; (8008ecc <D128_GENERIC+0x370>)
 8008d7c:	fb24 2201 	smlad	r2, r4, r1, r2
 8008d80:	4953      	ldr	r1, [pc, #332]	; (8008ed0 <D128_GENERIC+0x374>)
 8008d82:	fb20 2201 	smlad	r2, r0, r1, r2
 8008d86:	4953      	ldr	r1, [pc, #332]	; (8008ed4 <D128_GENERIC+0x378>)
 8008d88:	fb23 2201 	smlad	r2, r3, r1, r2
 8008d8c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8008d90:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8008d94:	4950      	ldr	r1, [pc, #320]	; (8008ed8 <D128_GENERIC+0x37c>)
 8008d96:	9a03      	ldr	r2, [sp, #12]
 8008d98:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008d9c:	4a4f      	ldr	r2, [pc, #316]	; (8008edc <D128_GENERIC+0x380>)
 8008d9e:	fb28 ce02 	smlad	lr, r8, r2, ip
 8008da2:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008ef4 <D128_GENERIC+0x398>
 8008da6:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8008daa:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8008ef8 <D128_GENERIC+0x39c>
 8008dae:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8008db2:	f8df e148 	ldr.w	lr, [pc, #328]	; 8008efc <D128_GENERIC+0x3a0>
 8008db6:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8008dba:	f8df c144 	ldr.w	ip, [pc, #324]	; 8008f00 <D128_GENERIC+0x3a4>
 8008dbe:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8008dc2:	f8df c140 	ldr.w	ip, [pc, #320]	; 8008f04 <D128_GENERIC+0x3a8>
 8008dc6:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008dca:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008f08 <D128_GENERIC+0x3ac>
 8008dce:	fb25 c20e 	smlad	r2, r5, lr, ip
 8008dd2:	f04f 0c01 	mov.w	ip, #1
 8008dd6:	9202      	str	r2, [sp, #8]
 8008dd8:	fb2b fb0c 	smuad	fp, fp, ip
 8008ddc:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8008f0c <D128_GENERIC+0x3b0>
 8008de0:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8008de4:	f8df c128 	ldr.w	ip, [pc, #296]	; 8008f10 <D128_GENERIC+0x3b4>
 8008de8:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8008dec:	4f3c      	ldr	r7, [pc, #240]	; (8008ee0 <D128_GENERIC+0x384>)
 8008dee:	fb26 bb07 	smlad	fp, r6, r7, fp
 8008df2:	4f3c      	ldr	r7, [pc, #240]	; (8008ee4 <D128_GENERIC+0x388>)
 8008df4:	fb24 bb07 	smlad	fp, r4, r7, fp
 8008df8:	4f3b      	ldr	r7, [pc, #236]	; (8008ee8 <D128_GENERIC+0x38c>)
 8008dfa:	fb20 bb07 	smlad	fp, r0, r7, fp
 8008dfe:	4f3b      	ldr	r7, [pc, #236]	; (8008eec <D128_GENERIC+0x390>)
 8008e00:	fb23 bb07 	smlad	fp, r3, r7, fp
 8008e04:	4b3a      	ldr	r3, [pc, #232]	; (8008ef0 <D128_GENERIC+0x394>)
 8008e06:	fb25 b303 	smlad	r3, r5, r3, fp
 8008e0a:	9303      	str	r3, [sp, #12]
 8008e0c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8008e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e12:	b183      	cbz	r3, 8008e36 <D128_GENERIC+0x2da>
 8008e14:	9a06      	ldr	r2, [sp, #24]
 8008e16:	9907      	ldr	r1, [sp, #28]
 8008e18:	4422      	add	r2, r4
 8008e1a:	9407      	str	r4, [sp, #28]
 8008e1c:	1a52      	subs	r2, r2, r1
 8008e1e:	fba2 0103 	umull	r0, r1, r2, r3
 8008e22:	17d5      	asrs	r5, r2, #31
 8008e24:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8008e28:	fb03 1105 	mla	r1, r3, r5, r1
 8008e2c:	f141 0300 	adc.w	r3, r1, #0
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	461c      	mov	r4, r3
 8008e34:	9306      	str	r3, [sp, #24]
 8008e36:	9d01      	ldr	r5, [sp, #4]
 8008e38:	01e4      	lsls	r4, r4, #7
 8008e3a:	9e05      	ldr	r6, [sp, #20]
 8008e3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e40:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8008e42:	2300      	movs	r3, #0
 8008e44:	9908      	ldr	r1, [sp, #32]
 8008e46:	fb06 f000 	mul.w	r0, r6, r0
 8008e4a:	3601      	adds	r6, #1
 8008e4c:	fbc1 2304 	smlal	r2, r3, r1, r4
 8008e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e52:	109b      	asrs	r3, r3, #2
 8008e54:	9605      	str	r6, [sp, #20]
 8008e56:	f303 030f 	ssat	r3, #16, r3
 8008e5a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8008e5e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8008e60:	42b3      	cmp	r3, r6
 8008e62:	dd13      	ble.n	8008e8c <D128_GENERIC+0x330>
 8008e64:	9b01      	ldr	r3, [sp, #4]
 8008e66:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008e68:	2a01      	cmp	r2, #1
 8008e6a:	f47f ae95 	bne.w	8008b98 <D128_GENERIC+0x3c>
 8008e6e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008e70:	f109 0610 	add.w	r6, r9, #16
 8008e74:	0681      	lsls	r1, r0, #26
 8008e76:	e9d9 4200 	ldrd	r4, r2, [r9]
 8008e7a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8008e7e:	d518      	bpl.n	8008eb2 <D128_GENERIC+0x356>
 8008e80:	ba64      	rev16	r4, r4
 8008e82:	ba52      	rev16	r2, r2
 8008e84:	ba5b      	rev16	r3, r3
 8008e86:	ba6d      	rev16	r5, r5
 8008e88:	46b1      	mov	r9, r6
 8008e8a:	e6da      	b.n	8008c42 <D128_GENERIC+0xe6>
 8008e8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	2000      	movs	r0, #0
 8008e94:	9903      	ldr	r1, [sp, #12]
 8008e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e98:	6099      	str	r1, [r3, #8]
 8008e9a:	9902      	ldr	r1, [sp, #8]
 8008e9c:	f8c3 a01c 	str.w	sl, [r3, #28]
 8008ea0:	60d9      	str	r1, [r3, #12]
 8008ea2:	9906      	ldr	r1, [sp, #24]
 8008ea4:	619a      	str	r2, [r3, #24]
 8008ea6:	6119      	str	r1, [r3, #16]
 8008ea8:	9907      	ldr	r1, [sp, #28]
 8008eaa:	6159      	str	r1, [r3, #20]
 8008eac:	b00d      	add	sp, #52	; 0x34
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	46b1      	mov	r9, r6
 8008eb4:	e6c5      	b.n	8008c42 <D128_GENERIC+0xe6>
 8008eb6:	bf00      	nop
 8008eb8:	24000000 	.word	0x24000000
 8008ebc:	00780069 	.word	0x00780069
 8008ec0:	005b004e 	.word	0x005b004e
 8008ec4:	00420037 	.word	0x00420037
 8008ec8:	002d0024 	.word	0x002d0024
 8008ecc:	001c0015 	.word	0x001c0015
 8008ed0:	000f000a 	.word	0x000f000a
 8008ed4:	00060003 	.word	0x00060003
 8008ed8:	00880096 	.word	0x00880096
 8008edc:	00a200ac 	.word	0x00a200ac
 8008ee0:	0015001c 	.word	0x0015001c
 8008ee4:	0024002d 	.word	0x0024002d
 8008ee8:	00370042 	.word	0x00370042
 8008eec:	004e005b 	.word	0x004e005b
 8008ef0:	00690078 	.word	0x00690078
 8008ef4:	00b400ba 	.word	0x00b400ba
 8008ef8:	00be00c0 	.word	0x00be00c0
 8008efc:	00c000be 	.word	0x00c000be
 8008f00:	00ba00b4 	.word	0x00ba00b4
 8008f04:	00ac00a2 	.word	0x00ac00a2
 8008f08:	00960088 	.word	0x00960088
 8008f0c:	00030006 	.word	0x00030006
 8008f10:	000a000f 	.word	0x000a000f

08008f14 <D16_1CH_HTONS_VOL_HP>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	6993      	ldr	r3, [r2, #24]
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8008f26:	69d3      	ldr	r3, [r2, #28]
 8008f28:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008f2c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008f30:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8008f34:	9403      	str	r4, [sp, #12]
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d054      	beq.n	8008fe4 <D16_1CH_HTONS_VOL_HP+0xd0>
 8008f3a:	f1a1 0902 	sub.w	r9, r1, #2
 8008f3e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8008f42:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008ff0 <D16_1CH_HTONS_VOL_HP+0xdc>
 8008f46:	4650      	mov	r0, sl
 8008f48:	9101      	str	r1, [sp, #4]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	f8cd b008 	str.w	fp, [sp, #8]
 8008f50:	9205      	str	r2, [sp, #20]
 8008f52:	f850 3b02 	ldr.w	r3, [r0], #2
 8008f56:	ba5b      	rev16	r3, r3
 8008f58:	b2dc      	uxtb	r4, r3
 8008f5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008f5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f62:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008f66:	4419      	add	r1, r3
 8008f68:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008f6c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008f70:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8008f74:	0aa1      	lsrs	r1, r4, #10
 8008f76:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008f7c:	fb23 5402 	smlad	r4, r3, r2, r5
 8008f80:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <D16_1CH_HTONS_VOL_HP+0xd8>)
 8008f82:	fb23 f502 	smuad	r5, r3, r2
 8008f86:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008f8a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8008f8e:	f04f 0b00 	mov.w	fp, #0
 8008f92:	19a2      	adds	r2, r4, r6
 8008f94:	eba2 020c 	sub.w	r2, r2, ip
 8008f98:	46a4      	mov	ip, r4
 8008f9a:	17d7      	asrs	r7, r2, #31
 8008f9c:	fba2 230e 	umull	r2, r3, r2, lr
 8008fa0:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8008fa4:	fb0e 3307 	mla	r3, lr, r7, r3
 8008fa8:	f143 0700 	adc.w	r7, r3, #0
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	047a      	lsls	r2, r7, #17
 8008fb0:	007e      	lsls	r6, r7, #1
 8008fb2:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8008fb6:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8008fba:	f303 030f 	ssat	r3, #16, r3
 8008fbe:	f829 3f02 	strh.w	r3, [r9, #2]!
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	4298      	cmp	r0, r3
 8008fc6:	d1c4      	bne.n	8008f52 <D16_1CH_HTONS_VOL_HP+0x3e>
 8008fc8:	460b      	mov	r3, r1
 8008fca:	9a05      	ldr	r2, [sp, #20]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	9903      	ldr	r1, [sp, #12]
 8008fd0:	61d3      	str	r3, [r2, #28]
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	6095      	str	r5, [r2, #8]
 8008fd6:	60d1      	str	r1, [r2, #12]
 8008fd8:	6193      	str	r3, [r2, #24]
 8008fda:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008fde:	b007      	add	sp, #28
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	4664      	mov	r4, ip
 8008fe6:	e7f1      	b.n	8008fcc <D16_1CH_HTONS_VOL_HP+0xb8>
 8008fe8:	00030001 	.word	0x00030001
 8008fec:	00010003 	.word	0x00010003
 8008ff0:	24000000 	.word	0x24000000

08008ff4 <D24_1CH_HTONS_VOL_HP>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008ffa:	b089      	sub	sp, #36	; 0x24
 8008ffc:	6993      	ldr	r3, [r2, #24]
 8008ffe:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009000:	9604      	str	r6, [sp, #16]
 8009002:	6a16      	ldr	r6, [r2, #32]
 8009004:	9306      	str	r3, [sp, #24]
 8009006:	9505      	str	r5, [sp, #20]
 8009008:	69d3      	ldr	r3, [r2, #28]
 800900a:	9600      	str	r6, [sp, #0]
 800900c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009010:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009014:	2d00      	cmp	r5, #0
 8009016:	f000 8083 	beq.w	8009120 <D24_1CH_HTONS_VOL_HP+0x12c>
 800901a:	9207      	str	r2, [sp, #28]
 800901c:	2600      	movs	r6, #0
 800901e:	4622      	mov	r2, r4
 8009020:	f1a1 0b02 	sub.w	fp, r1, #2
 8009024:	4f3f      	ldr	r7, [pc, #252]	; (8009124 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009026:	461d      	mov	r5, r3
 8009028:	f8cd a00c 	str.w	sl, [sp, #12]
 800902c:	9c00      	ldr	r4, [sp, #0]
 800902e:	e056      	b.n	80090de <D24_1CH_HTONS_VOL_HP+0xea>
 8009030:	7841      	ldrb	r1, [r0, #1]
 8009032:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009036:	3002      	adds	r0, #2
 8009038:	4488      	add	r8, r1
 800903a:	fa5f f388 	uxtb.w	r3, r8
 800903e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009042:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009046:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800904a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800904e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009052:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009056:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800905a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800905e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009062:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009066:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800906a:	492f      	ldr	r1, [pc, #188]	; (8009128 <D24_1CH_HTONS_VOL_HP+0x134>)
 800906c:	fb23 e901 	smlad	r9, r3, r1, lr
 8009070:	492e      	ldr	r1, [pc, #184]	; (800912c <D24_1CH_HTONS_VOL_HP+0x138>)
 8009072:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009076:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800907a:	2101      	movs	r1, #1
 800907c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009080:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009084:	fb23 f301 	smuad	r3, r3, r1
 8009088:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800908c:	eb08 0c03 	add.w	ip, r8, r3
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	f04f 0a00 	mov.w	sl, #0
 8009096:	440a      	add	r2, r1
 8009098:	3601      	adds	r6, #1
 800909a:	9103      	str	r1, [sp, #12]
 800909c:	1ad2      	subs	r2, r2, r3
 800909e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80090a2:	fba2 2304 	umull	r2, r3, r2, r4
 80090a6:	e9cd 2300 	strd	r2, r3, [sp]
 80090aa:	fb04 3309 	mla	r3, r4, r9, r3
 80090ae:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090b8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80090bc:	f143 0300 	adc.w	r3, r3, #0
 80090c0:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 80090c4:	005a      	lsls	r2, r3, #1
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	fbc3 9a08 	smlal	r9, sl, r3, r8
 80090cc:	ea4f 03aa 	mov.w	r3, sl, asr #2
 80090d0:	f303 030f 	ssat	r3, #16, r3
 80090d4:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80090d8:	9b05      	ldr	r3, [sp, #20]
 80090da:	429e      	cmp	r6, r3
 80090dc:	d010      	beq.n	8009100 <D24_1CH_HTONS_VOL_HP+0x10c>
 80090de:	f890 9003 	ldrb.w	r9, [r0, #3]
 80090e2:	f016 0f01 	tst.w	r6, #1
 80090e6:	7801      	ldrb	r1, [r0, #0]
 80090e8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80090ec:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80090f0:	d09e      	beq.n	8009030 <D24_1CH_HTONS_VOL_HP+0x3c>
 80090f2:	f890 8002 	ldrb.w	r8, [r0, #2]
 80090f6:	3004      	adds	r0, #4
 80090f8:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80090fc:	4488      	add	r8, r1
 80090fe:	e79c      	b.n	800903a <D24_1CH_HTONS_VOL_HP+0x46>
 8009100:	4614      	mov	r4, r2
 8009102:	462b      	mov	r3, r5
 8009104:	9a07      	ldr	r2, [sp, #28]
 8009106:	2000      	movs	r0, #0
 8009108:	61d3      	str	r3, [r2, #28]
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	f8c2 c008 	str.w	ip, [r2, #8]
 8009110:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009114:	6193      	str	r3, [r2, #24]
 8009116:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800911a:	b009      	add	sp, #36	; 0x24
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	4651      	mov	r1, sl
 8009122:	e7f0      	b.n	8009106 <D24_1CH_HTONS_VOL_HP+0x112>
 8009124:	24000000 	.word	0x24000000
 8009128:	00030001 	.word	0x00030001
 800912c:	00060007 	.word	0x00060007

08009130 <D32_1CH_HTONS_VOL_HP>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	6993      	ldr	r3, [r2, #24]
 8009136:	b087      	sub	sp, #28
 8009138:	4683      	mov	fp, r0
 800913a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	69d5      	ldr	r5, [r2, #28]
 8009140:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009142:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009146:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800914a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800914e:	2800      	cmp	r0, #0
 8009150:	d077      	beq.n	8009242 <D32_1CH_HTONS_VOL_HP+0x112>
 8009152:	460f      	mov	r7, r1
 8009154:	46f1      	mov	r9, lr
 8009156:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800915a:	f8cd 8000 	str.w	r8, [sp]
 800915e:	4e3a      	ldr	r6, [pc, #232]	; (8009248 <D32_1CH_HTONS_VOL_HP+0x118>)
 8009160:	469e      	mov	lr, r3
 8009162:	46a0      	mov	r8, r4
 8009164:	9103      	str	r1, [sp, #12]
 8009166:	9205      	str	r2, [sp, #20]
 8009168:	f85b 4b04 	ldr.w	r4, [fp], #4
 800916c:	ba64      	rev16	r4, r4
 800916e:	b2e0      	uxtb	r0, r4
 8009170:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009174:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009178:	0e24      	lsrs	r4, r4, #24
 800917a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800917e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009182:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009186:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800918a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800918e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009192:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009196:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800919a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800919e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80091a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80091a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091aa:	f3c5 0009 	ubfx	r0, r5, #0, #10
 80091ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80091b2:	4826      	ldr	r0, [pc, #152]	; (800924c <D32_1CH_HTONS_VOL_HP+0x11c>)
 80091b4:	fb23 c400 	smlad	r4, r3, r0, ip
 80091b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80091bc:	fb21 4402 	smlad	r4, r1, r2, r4
 80091c0:	4823      	ldr	r0, [pc, #140]	; (8009250 <D32_1CH_HTONS_VOL_HP+0x120>)
 80091c2:	fb23 ec00 	smlad	ip, r3, r0, lr
 80091c6:	4823      	ldr	r0, [pc, #140]	; (8009254 <D32_1CH_HTONS_VOL_HP+0x124>)
 80091c8:	fb21 cc00 	smlad	ip, r1, r0, ip
 80091cc:	2201      	movs	r2, #1
 80091ce:	fb23 f302 	smuad	r3, r3, r2
 80091d2:	4821      	ldr	r0, [pc, #132]	; (8009258 <D32_1CH_HTONS_VOL_HP+0x128>)
 80091d4:	fb21 3e00 	smlad	lr, r1, r0, r3
 80091d8:	9b00      	ldr	r3, [sp, #0]
 80091da:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 80091de:	4423      	add	r3, r4
 80091e0:	eba3 0209 	sub.w	r2, r3, r9
 80091e4:	46a1      	mov	r9, r4
 80091e6:	17d1      	asrs	r1, r2, #31
 80091e8:	fba2 230a 	umull	r2, r3, r2, sl
 80091ec:	e9cd 2300 	strd	r2, r3, [sp]
 80091f0:	fb0a 3301 	mla	r3, sl, r1, r3
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091fa:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80091fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009202:	f143 0300 	adc.w	r3, r3, #0
 8009206:	0399      	lsls	r1, r3, #14
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	2300      	movs	r3, #0
 800920e:	fbc8 2301 	smlal	r2, r3, r8, r1
 8009212:	109b      	asrs	r3, r3, #2
 8009214:	f303 030f 	ssat	r3, #16, r3
 8009218:	f827 3b02 	strh.w	r3, [r7], #2
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	429f      	cmp	r7, r3
 8009220:	d1a2      	bne.n	8009168 <D32_1CH_HTONS_VOL_HP+0x38>
 8009222:	4673      	mov	r3, lr
 8009224:	f8dd 8000 	ldr.w	r8, [sp]
 8009228:	9a05      	ldr	r2, [sp, #20]
 800922a:	6093      	str	r3, [r2, #8]
 800922c:	2000      	movs	r0, #0
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009234:	61d5      	str	r5, [r2, #28]
 8009236:	6193      	str	r3, [r2, #24]
 8009238:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800923c:	b007      	add	sp, #28
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009242:	4674      	mov	r4, lr
 8009244:	e7f1      	b.n	800922a <D32_1CH_HTONS_VOL_HP+0xfa>
 8009246:	bf00      	nop
 8009248:	24000000 	.word	0x24000000
 800924c:	00060003 	.word	0x00060003
 8009250:	000a000c 	.word	0x000a000c
 8009254:	000c000a 	.word	0x000c000a
 8009258:	00030006 	.word	0x00030006

0800925c <D48_1CH_HTONS_VOL_HP>:
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8009262:	b087      	sub	sp, #28
 8009264:	6993      	ldr	r3, [r2, #24]
 8009266:	9701      	str	r7, [sp, #4]
 8009268:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800926a:	6a17      	ldr	r7, [r2, #32]
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	69d6      	ldr	r6, [r2, #28]
 8009270:	9702      	str	r7, [sp, #8]
 8009272:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8009276:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800927a:	2d00      	cmp	r5, #0
 800927c:	f000 8093 	beq.w	80093a6 <D48_1CH_HTONS_VOL_HP+0x14a>
 8009280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009284:	f1a1 0b02 	sub.w	fp, r1, #2
 8009288:	46f2      	mov	sl, lr
 800928a:	4f48      	ldr	r7, [pc, #288]	; (80093ac <D48_1CH_HTONS_VOL_HP+0x150>)
 800928c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8009290:	469e      	mov	lr, r3
 8009292:	9205      	str	r2, [sp, #20]
 8009294:	9103      	str	r1, [sp, #12]
 8009296:	e9d0 3200 	ldrd	r3, r2, [r0]
 800929a:	3006      	adds	r0, #6
 800929c:	ba5b      	rev16	r3, r3
 800929e:	fa92 f992 	rev16.w	r9, r2
 80092a2:	b2dd      	uxtb	r5, r3
 80092a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80092a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80092ac:	0e1b      	lsrs	r3, r3, #24
 80092ae:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80092b2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80092b6:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 80092ba:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 80092be:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80092c2:	fa5f f289 	uxtb.w	r2, r9
 80092c6:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80092ca:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80092ce:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80092d2:	f3c6 0809 	ubfx	r8, r6, #0, #10
 80092d6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80092da:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80092de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80092e2:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80092e6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80092ea:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80092ee:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80092f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092f6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80092fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80092fe:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8009302:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009306:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800930a:	4b29      	ldr	r3, [pc, #164]	; (80093b0 <D48_1CH_HTONS_VOL_HP+0x154>)
 800930c:	fb28 c103 	smlad	r1, r8, r3, ip
 8009310:	4b28      	ldr	r3, [pc, #160]	; (80093b4 <D48_1CH_HTONS_VOL_HP+0x158>)
 8009312:	fb25 1103 	smlad	r1, r5, r3, r1
 8009316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800931a:	fb22 1903 	smlad	r9, r2, r3, r1
 800931e:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8009320:	fb28 ec03 	smlad	ip, r8, r3, lr
 8009324:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8009328:	fb25 cc03 	smlad	ip, r5, r3, ip
 800932c:	4b23      	ldr	r3, [pc, #140]	; (80093bc <D48_1CH_HTONS_VOL_HP+0x160>)
 800932e:	fb22 cc03 	smlad	ip, r2, r3, ip
 8009332:	2101      	movs	r1, #1
 8009334:	fb28 f801 	smuad	r8, r8, r1
 8009338:	4b21      	ldr	r3, [pc, #132]	; (80093c0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800933a:	fb25 8503 	smlad	r5, r5, r3, r8
 800933e:	4b21      	ldr	r3, [pc, #132]	; (80093c4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8009340:	fb22 5e03 	smlad	lr, r2, r3, r5
 8009344:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8009348:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800934c:	190a      	adds	r2, r1, r4
 800934e:	9c02      	ldr	r4, [sp, #8]
 8009350:	eba2 020a 	sub.w	r2, r2, sl
 8009354:	468a      	mov	sl, r1
 8009356:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800935a:	fba2 2304 	umull	r2, r3, r2, r4
 800935e:	fb04 3309 	mla	r3, r4, r9, r3
 8009362:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009366:	f04f 0900 	mov.w	r9, #0
 800936a:	f143 0500 	adc.w	r5, r3, #0
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	032a      	lsls	r2, r5, #12
 8009372:	006c      	lsls	r4, r5, #1
 8009374:	fbc3 8902 	smlal	r8, r9, r3, r2
 8009378:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800937c:	f303 030f 	ssat	r3, #16, r3
 8009380:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	4283      	cmp	r3, r0
 8009388:	d185      	bne.n	8009296 <D48_1CH_HTONS_VOL_HP+0x3a>
 800938a:	4673      	mov	r3, lr
 800938c:	9a05      	ldr	r2, [sp, #20]
 800938e:	6093      	str	r3, [r2, #8]
 8009390:	2000      	movs	r0, #0
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009398:	61d6      	str	r6, [r2, #28]
 800939a:	6193      	str	r3, [r2, #24]
 800939c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80093a0:	b007      	add	sp, #28
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	4671      	mov	r1, lr
 80093a8:	e7f1      	b.n	800938e <D48_1CH_HTONS_VOL_HP+0x132>
 80093aa:	bf00      	nop
 80093ac:	24000000 	.word	0x24000000
 80093b0:	000f000a 	.word	0x000f000a
 80093b4:	00060003 	.word	0x00060003
 80093b8:	00150019 	.word	0x00150019
 80093bc:	00190015 	.word	0x00190015
 80093c0:	00030006 	.word	0x00030006
 80093c4:	000a000f 	.word	0x000a000f

080093c8 <D64_1CH_HTONS_VOL_HP>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80093ce:	b089      	sub	sp, #36	; 0x24
 80093d0:	6993      	ldr	r3, [r2, #24]
 80093d2:	4686      	mov	lr, r0
 80093d4:	9503      	str	r5, [sp, #12]
 80093d6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80093d8:	6a15      	ldr	r5, [r2, #32]
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	69d6      	ldr	r6, [r2, #28]
 80093de:	9504      	str	r5, [sp, #16]
 80093e0:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80093e4:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f000 80a4 	beq.w	8009536 <D64_1CH_HTONS_VOL_HP+0x16e>
 80093ee:	460f      	mov	r7, r1
 80093f0:	46f1      	mov	r9, lr
 80093f2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80093f6:	4d56      	ldr	r5, [pc, #344]	; (8009550 <D64_1CH_HTONS_VOL_HP+0x188>)
 80093f8:	46a2      	mov	sl, r4
 80093fa:	469e      	mov	lr, r3
 80093fc:	9105      	str	r1, [sp, #20]
 80093fe:	9207      	str	r2, [sp, #28]
 8009400:	f859 1b08 	ldr.w	r1, [r9], #8
 8009404:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009408:	ba49      	rev16	r1, r1
 800940a:	fa93 fb93 	rev16.w	fp, r3
 800940e:	b2cb      	uxtb	r3, r1
 8009410:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8009414:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009418:	0e09      	lsrs	r1, r1, #24
 800941a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800941e:	fa5f f38b 	uxtb.w	r3, fp
 8009422:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009426:	4426      	add	r6, r4
 8009428:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800942c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8009430:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009434:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009438:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800943c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8009440:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8009444:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009448:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800944c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8009450:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009454:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8009458:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800945c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8009460:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009464:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8009468:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800946c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009470:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009474:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8009478:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800947c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009484:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8009488:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800948c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009490:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8009494:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8009498:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800949c:	482d      	ldr	r0, [pc, #180]	; (8009554 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800949e:	fb22 cc00 	smlad	ip, r2, r0, ip
 80094a2:	482d      	ldr	r0, [pc, #180]	; (8009558 <D64_1CH_HTONS_VOL_HP+0x190>)
 80094a4:	fb21 cc00 	smlad	ip, r1, r0, ip
 80094a8:	482c      	ldr	r0, [pc, #176]	; (800955c <D64_1CH_HTONS_VOL_HP+0x194>)
 80094aa:	fb23 cc00 	smlad	ip, r3, r0, ip
 80094ae:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80094b2:	fb2b c404 	smlad	r4, fp, r4, ip
 80094b6:	482a      	ldr	r0, [pc, #168]	; (8009560 <D64_1CH_HTONS_VOL_HP+0x198>)
 80094b8:	fb22 ec00 	smlad	ip, r2, r0, lr
 80094bc:	fb2b cc10 	smladx	ip, fp, r0, ip
 80094c0:	4828      	ldr	r0, [pc, #160]	; (8009564 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80094c2:	fb21 cc00 	smlad	ip, r1, r0, ip
 80094c6:	fb23 cc10 	smladx	ip, r3, r0, ip
 80094ca:	f04f 0e01 	mov.w	lr, #1
 80094ce:	fb22 f20e 	smuad	r2, r2, lr
 80094d2:	4825      	ldr	r0, [pc, #148]	; (8009568 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80094d4:	fb21 2100 	smlad	r1, r1, r0, r2
 80094d8:	4a24      	ldr	r2, [pc, #144]	; (800956c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80094da:	fb23 1302 	smlad	r3, r3, r2, r1
 80094de:	4a24      	ldr	r2, [pc, #144]	; (8009570 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80094e0:	fb2b 3e02 	smlad	lr, fp, r2, r3
 80094e4:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 80094e8:	eb04 0208 	add.w	r2, r4, r8
 80094ec:	eba2 020a 	sub.w	r2, r2, sl
 80094f0:	46a2      	mov	sl, r4
 80094f2:	4610      	mov	r0, r2
 80094f4:	17d1      	asrs	r1, r2, #31
 80094f6:	e9cd 0100 	strd	r0, r1, [sp]
 80094fa:	9904      	ldr	r1, [sp, #16]
 80094fc:	9801      	ldr	r0, [sp, #4]
 80094fe:	fba2 2301 	umull	r2, r3, r2, r1
 8009502:	fb01 3300 	mla	r3, r1, r0, r3
 8009506:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800950a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800950e:	f143 0100 	adc.w	r1, r3, #0
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	02ca      	lsls	r2, r1, #11
 8009516:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800951a:	2100      	movs	r1, #0
 800951c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009520:	108b      	asrs	r3, r1, #2
 8009522:	f303 030f 	ssat	r3, #16, r3
 8009526:	f827 3b02 	strh.w	r3, [r7], #2
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	429f      	cmp	r7, r3
 800952e:	f47f af67 	bne.w	8009400 <D64_1CH_HTONS_VOL_HP+0x38>
 8009532:	4673      	mov	r3, lr
 8009534:	9a07      	ldr	r2, [sp, #28]
 8009536:	6093      	str	r3, [r2, #8]
 8009538:	2000      	movs	r0, #0
 800953a:	9b06      	ldr	r3, [sp, #24]
 800953c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009540:	61d6      	str	r6, [r2, #28]
 8009542:	6193      	str	r3, [r2, #24]
 8009544:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009548:	b009      	add	sp, #36	; 0x24
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	bf00      	nop
 8009550:	24000000 	.word	0x24000000
 8009554:	001c0015 	.word	0x001c0015
 8009558:	000f000a 	.word	0x000f000a
 800955c:	00060003 	.word	0x00060003
 8009560:	0024002a 	.word	0x0024002a
 8009564:	002e0030 	.word	0x002e0030
 8009568:	00030006 	.word	0x00030006
 800956c:	000a000f 	.word	0x000a000f
 8009570:	0015001c 	.word	0x0015001c

08009574 <D80_1CH_HTONS_VOL_HP>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	6913      	ldr	r3, [r2, #16]
 800957a:	b089      	sub	sp, #36	; 0x24
 800957c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	9603      	str	r6, [sp, #12]
 8009582:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009584:	6a16      	ldr	r6, [r2, #32]
 8009586:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800958a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800958e:	9306      	str	r3, [sp, #24]
 8009590:	9604      	str	r6, [sp, #16]
 8009592:	69d3      	ldr	r3, [r2, #28]
 8009594:	2c00      	cmp	r4, #0
 8009596:	f000 80ce 	beq.w	8009736 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800959a:	3902      	subs	r1, #2
 800959c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80095a0:	4e66      	ldr	r6, [pc, #408]	; (800973c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80095a2:	469e      	mov	lr, r3
 80095a4:	9102      	str	r1, [sp, #8]
 80095a6:	46aa      	mov	sl, r5
 80095a8:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 80095ac:	9207      	str	r2, [sp, #28]
 80095ae:	9105      	str	r1, [sp, #20]
 80095b0:	6883      	ldr	r3, [r0, #8]
 80095b2:	e9d0 4200 	ldrd	r4, r2, [r0]
 80095b6:	300a      	adds	r0, #10
 80095b8:	ba64      	rev16	r4, r4
 80095ba:	ba52      	rev16	r2, r2
 80095bc:	fa93 fb93 	rev16.w	fp, r3
 80095c0:	b2e5      	uxtb	r5, r4
 80095c2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80095c6:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80095ca:	0e24      	lsrs	r4, r4, #24
 80095cc:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 80095d0:	b2d5      	uxtb	r5, r2
 80095d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80095d6:	44c6      	add	lr, r8
 80095d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80095dc:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80095e0:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 80095e4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80095e8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80095ec:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 80095f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80095f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095f8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80095fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009600:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8009604:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8009608:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800960c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8009610:	0e12      	lsrs	r2, r2, #24
 8009612:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8009616:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800961a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800961e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009622:	fa5f fb8b 	uxtb.w	fp, fp
 8009626:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800962a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800962e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8009632:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009636:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800963a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800963e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009642:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009646:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800964a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800964e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009652:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8009656:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800965a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800965e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8009662:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009666:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800966a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800966e:	4934      	ldr	r1, [pc, #208]	; (8009740 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8009670:	fb23 cc01 	smlad	ip, r3, r1, ip
 8009674:	4933      	ldr	r1, [pc, #204]	; (8009744 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8009676:	fb24 cc01 	smlad	ip, r4, r1, ip
 800967a:	4933      	ldr	r1, [pc, #204]	; (8009748 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800967c:	fb28 cc01 	smlad	ip, r8, r1, ip
 8009680:	4932      	ldr	r1, [pc, #200]	; (800974c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8009682:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009686:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800968a:	fb2b c901 	smlad	r9, fp, r1, ip
 800968e:	4930      	ldr	r1, [pc, #192]	; (8009750 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8009690:	fb23 7701 	smlad	r7, r3, r1, r7
 8009694:	492f      	ldr	r1, [pc, #188]	; (8009754 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8009696:	fb24 7701 	smlad	r7, r4, r1, r7
 800969a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800969e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 80096a2:	492d      	ldr	r1, [pc, #180]	; (8009758 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80096a4:	fb22 cc01 	smlad	ip, r2, r1, ip
 80096a8:	492c      	ldr	r1, [pc, #176]	; (800975c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80096aa:	fb2b cc01 	smlad	ip, fp, r1, ip
 80096ae:	2101      	movs	r1, #1
 80096b0:	fb23 f301 	smuad	r3, r3, r1
 80096b4:	492a      	ldr	r1, [pc, #168]	; (8009760 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80096b6:	fb24 3401 	smlad	r4, r4, r1, r3
 80096ba:	492a      	ldr	r1, [pc, #168]	; (8009764 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80096bc:	fb28 4101 	smlad	r1, r8, r1, r4
 80096c0:	4f29      	ldr	r7, [pc, #164]	; (8009768 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80096c2:	fb22 1207 	smlad	r2, r2, r7, r1
 80096c6:	4f29      	ldr	r7, [pc, #164]	; (800976c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80096c8:	fb2b 2707 	smlad	r7, fp, r7, r2
 80096cc:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 80096d0:	9b01      	ldr	r3, [sp, #4]
 80096d2:	9c04      	ldr	r4, [sp, #16]
 80096d4:	440b      	add	r3, r1
 80096d6:	eba3 020a 	sub.w	r2, r3, sl
 80096da:	468a      	mov	sl, r1
 80096dc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80096e0:	fba2 2304 	umull	r2, r3, r2, r4
 80096e4:	fb04 3309 	mla	r3, r4, r9, r3
 80096e8:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 80096ec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80096f0:	f143 0500 	adc.w	r5, r3, #0
 80096f4:	006b      	lsls	r3, r5, #1
 80096f6:	02aa      	lsls	r2, r5, #10
 80096f8:	2500      	movs	r5, #0
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	fbc3 4502 	smlal	r4, r5, r3, r2
 8009702:	9a02      	ldr	r2, [sp, #8]
 8009704:	10ab      	asrs	r3, r5, #2
 8009706:	f303 030f 	ssat	r3, #16, r3
 800970a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800970e:	9b05      	ldr	r3, [sp, #20]
 8009710:	9202      	str	r2, [sp, #8]
 8009712:	4298      	cmp	r0, r3
 8009714:	f47f af4c 	bne.w	80095b0 <D80_1CH_HTONS_VOL_HP+0x3c>
 8009718:	4673      	mov	r3, lr
 800971a:	9a07      	ldr	r2, [sp, #28]
 800971c:	61d3      	str	r3, [r2, #28]
 800971e:	2000      	movs	r0, #0
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	6097      	str	r7, [r2, #8]
 8009724:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009728:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800972c:	9b06      	ldr	r3, [sp, #24]
 800972e:	6193      	str	r3, [r2, #24]
 8009730:	b009      	add	sp, #36	; 0x24
 8009732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009736:	4629      	mov	r1, r5
 8009738:	e7f0      	b.n	800971c <D80_1CH_HTONS_VOL_HP+0x1a8>
 800973a:	bf00      	nop
 800973c:	24000000 	.word	0x24000000
 8009740:	002d0024 	.word	0x002d0024
 8009744:	001c0015 	.word	0x001c0015
 8009748:	000f000a 	.word	0x000f000a
 800974c:	00060003 	.word	0x00060003
 8009750:	0037003f 	.word	0x0037003f
 8009754:	00450049 	.word	0x00450049
 8009758:	00490045 	.word	0x00490045
 800975c:	003f0037 	.word	0x003f0037
 8009760:	00030006 	.word	0x00030006
 8009764:	000a000f 	.word	0x000a000f
 8009768:	0015001c 	.word	0x0015001c
 800976c:	0024002d 	.word	0x0024002d

08009770 <D128_1CH_HTONS_VOL_HP>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	6914      	ldr	r4, [r2, #16]
 8009776:	b08d      	sub	sp, #52	; 0x34
 8009778:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800977a:	9404      	str	r4, [sp, #16]
 800977c:	6954      	ldr	r4, [r2, #20]
 800977e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009780:	9405      	str	r4, [sp, #20]
 8009782:	6994      	ldr	r4, [r2, #24]
 8009784:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009788:	940a      	str	r4, [sp, #40]	; 0x28
 800978a:	6894      	ldr	r4, [r2, #8]
 800978c:	9403      	str	r4, [sp, #12]
 800978e:	68d4      	ldr	r4, [r2, #12]
 8009790:	9402      	str	r4, [sp, #8]
 8009792:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009794:	6a12      	ldr	r2, [r2, #32]
 8009796:	9407      	str	r4, [sp, #28]
 8009798:	9208      	str	r2, [sp, #32]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 812e 	beq.w	80099fc <D128_1CH_HTONS_VOL_HP+0x28c>
 80097a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80097a4:	f100 0b10 	add.w	fp, r0, #16
 80097a8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8009a3c <D128_1CH_HTONS_VOL_HP+0x2cc>
 80097ac:	9106      	str	r1, [sp, #24]
 80097ae:	9309      	str	r3, [sp, #36]	; 0x24
 80097b0:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 80097b4:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 80097b8:	ba40      	rev16	r0, r0
 80097ba:	ba52      	rev16	r2, r2
 80097bc:	ba5b      	rev16	r3, r3
 80097be:	ba76      	rev16	r6, r6
 80097c0:	b2c5      	uxtb	r5, r0
 80097c2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80097c6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80097ca:	0e00      	lsrs	r0, r0, #24
 80097cc:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 80097d0:	b2d5      	uxtb	r5, r2
 80097d2:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 80097d6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80097da:	44bc      	add	ip, r7
 80097dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80097e0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 80097e4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80097e8:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 80097ec:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 80097f0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80097f4:	0e12      	lsrs	r2, r2, #24
 80097f6:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 80097fa:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80097fe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009802:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009806:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800980a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800980e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009812:	b2da      	uxtb	r2, r3
 8009814:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8009818:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800981c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8009820:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009824:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8009828:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800982c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8009830:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009834:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8009838:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800983c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8009840:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8009844:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009848:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800984c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8009850:	0e1b      	lsrs	r3, r3, #24
 8009852:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009856:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800985a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800985e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8009862:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8009866:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800986a:	b2f3      	uxtb	r3, r6
 800986c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8009870:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8009874:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009878:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800987c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009880:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8009884:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009888:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800988c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009890:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8009894:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8009898:	0e36      	lsrs	r6, r6, #24
 800989a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800989e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80098a2:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 80098a6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80098aa:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 80098ae:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098b2:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 80098b6:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80098ba:	9101      	str	r1, [sp, #4]
 80098bc:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 80098c0:	9b02      	ldr	r3, [sp, #8]
 80098c2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80098c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80098ca:	4611      	mov	r1, r2
 80098cc:	f3cc 0209 	ubfx	r2, ip, #0, #10
 80098d0:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 80098d4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80098d8:	4a49      	ldr	r2, [pc, #292]	; (8009a00 <D128_1CH_HTONS_VOL_HP+0x290>)
 80098da:	fb2e 3202 	smlad	r2, lr, r2, r3
 80098de:	4b49      	ldr	r3, [pc, #292]	; (8009a04 <D128_1CH_HTONS_VOL_HP+0x294>)
 80098e0:	fb27 2203 	smlad	r2, r7, r3, r2
 80098e4:	4b48      	ldr	r3, [pc, #288]	; (8009a08 <D128_1CH_HTONS_VOL_HP+0x298>)
 80098e6:	fb25 2203 	smlad	r2, r5, r3, r2
 80098ea:	4b48      	ldr	r3, [pc, #288]	; (8009a0c <D128_1CH_HTONS_VOL_HP+0x29c>)
 80098ec:	fb24 2203 	smlad	r2, r4, r3, r2
 80098f0:	4b47      	ldr	r3, [pc, #284]	; (8009a10 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 80098f2:	fb20 2803 	smlad	r8, r0, r3, r2
 80098f6:	4b47      	ldr	r3, [pc, #284]	; (8009a14 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 80098f8:	9a01      	ldr	r2, [sp, #4]
 80098fa:	fb22 8203 	smlad	r2, r2, r3, r8
 80098fe:	4b46      	ldr	r3, [pc, #280]	; (8009a18 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8009900:	9102      	str	r1, [sp, #8]
 8009902:	fb21 2203 	smlad	r2, r1, r3, r2
 8009906:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800990a:	fb26 2308 	smlad	r3, r6, r8, r2
 800990e:	4619      	mov	r1, r3
 8009910:	9a03      	ldr	r2, [sp, #12]
 8009912:	4b42      	ldr	r3, [pc, #264]	; (8009a1c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8009914:	fb2e 2803 	smlad	r8, lr, r3, r2
 8009918:	4b41      	ldr	r3, [pc, #260]	; (8009a20 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800991a:	fb27 8a03 	smlad	sl, r7, r3, r8
 800991e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8009a40 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8009922:	fb25 a808 	smlad	r8, r5, r8, sl
 8009926:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8009a44 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800992a:	fb24 880a 	smlad	r8, r4, sl, r8
 800992e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8009a48 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8009932:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8009936:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009a4c <D128_1CH_HTONS_VOL_HP+0x2dc>
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	fb23 aa08 	smlad	sl, r3, r8, sl
 8009940:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009a50 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	fb22 a808 	smlad	r8, r2, r8, sl
 800994a:	f8df a108 	ldr.w	sl, [pc, #264]	; 8009a54 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800994e:	fb26 830a 	smlad	r3, r6, sl, r8
 8009952:	f04f 0801 	mov.w	r8, #1
 8009956:	9302      	str	r3, [sp, #8]
 8009958:	fb2e fe08 	smuad	lr, lr, r8
 800995c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009a58 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8009960:	fb27 ee08 	smlad	lr, r7, r8, lr
 8009964:	4f2f      	ldr	r7, [pc, #188]	; (8009a24 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8009966:	fb25 ee07 	smlad	lr, r5, r7, lr
 800996a:	4f2f      	ldr	r7, [pc, #188]	; (8009a28 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800996c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8009970:	4f2e      	ldr	r7, [pc, #184]	; (8009a2c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8009972:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009976:	4f2e      	ldr	r7, [pc, #184]	; (8009a30 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800997e:	4f2d      	ldr	r7, [pc, #180]	; (8009a34 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8009980:	fb22 e707 	smlad	r7, r2, r7, lr
 8009984:	4b2c      	ldr	r3, [pc, #176]	; (8009a38 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009986:	fb26 7303 	smlad	r3, r6, r3, r7
 800998a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009996:	9f08      	ldr	r7, [sp, #32]
 8009998:	2100      	movs	r1, #0
 800999a:	4433      	add	r3, r6
 800999c:	f10b 0b10 	add.w	fp, fp, #16
 80099a0:	461a      	mov	r2, r3
 80099a2:	9b05      	ldr	r3, [sp, #20]
 80099a4:	9605      	str	r6, [sp, #20]
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	17d5      	asrs	r5, r2, #31
 80099aa:	fba2 2307 	umull	r2, r3, r2, r7
 80099ae:	1814      	adds	r4, r2, r0
 80099b0:	fb07 3305 	mla	r3, r7, r5, r3
 80099b4:	eb43 0501 	adc.w	r5, r3, r1
 80099b8:	006b      	lsls	r3, r5, #1
 80099ba:	022a      	lsls	r2, r5, #8
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	9b07      	ldr	r3, [sp, #28]
 80099c0:	fbc3 0102 	smlal	r0, r1, r3, r2
 80099c4:	9a06      	ldr	r2, [sp, #24]
 80099c6:	108b      	asrs	r3, r1, #2
 80099c8:	f303 030f 	ssat	r3, #16, r3
 80099cc:	f822 3b02 	strh.w	r3, [r2], #2
 80099d0:	4613      	mov	r3, r2
 80099d2:	9206      	str	r2, [sp, #24]
 80099d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f47f aeea 	bne.w	80097b0 <D128_1CH_HTONS_VOL_HP+0x40>
 80099dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099de:	2000      	movs	r0, #0
 80099e0:	9903      	ldr	r1, [sp, #12]
 80099e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e4:	6099      	str	r1, [r3, #8]
 80099e6:	9902      	ldr	r1, [sp, #8]
 80099e8:	f8c3 c01c 	str.w	ip, [r3, #28]
 80099ec:	60d9      	str	r1, [r3, #12]
 80099ee:	9904      	ldr	r1, [sp, #16]
 80099f0:	619a      	str	r2, [r3, #24]
 80099f2:	e9c3 1604 	strd	r1, r6, [r3, #16]
 80099f6:	b00d      	add	sp, #52	; 0x34
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	9e05      	ldr	r6, [sp, #20]
 80099fe:	e7ed      	b.n	80099dc <D128_1CH_HTONS_VOL_HP+0x26c>
 8009a00:	00780069 	.word	0x00780069
 8009a04:	005b004e 	.word	0x005b004e
 8009a08:	00420037 	.word	0x00420037
 8009a0c:	002d0024 	.word	0x002d0024
 8009a10:	001c0015 	.word	0x001c0015
 8009a14:	000f000a 	.word	0x000f000a
 8009a18:	00060003 	.word	0x00060003
 8009a1c:	00880096 	.word	0x00880096
 8009a20:	00a200ac 	.word	0x00a200ac
 8009a24:	000a000f 	.word	0x000a000f
 8009a28:	0015001c 	.word	0x0015001c
 8009a2c:	0024002d 	.word	0x0024002d
 8009a30:	00370042 	.word	0x00370042
 8009a34:	004e005b 	.word	0x004e005b
 8009a38:	00690078 	.word	0x00690078
 8009a3c:	24000000 	.word	0x24000000
 8009a40:	00b400ba 	.word	0x00b400ba
 8009a44:	00be00c0 	.word	0x00be00c0
 8009a48:	00c000be 	.word	0x00c000be
 8009a4c:	00ba00b4 	.word	0x00ba00b4
 8009a50:	00ac00a2 	.word	0x00ac00a2
 8009a54:	00960088 	.word	0x00960088
 8009a58:	00030006 	.word	0x00030006

08009a5c <PDM_Filter_Init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	2240      	movs	r2, #64	; 0x40
 8009a60:	2100      	movs	r1, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	300c      	adds	r0, #12
 8009a66:	f000 fa07 	bl	8009e78 <memset>
 8009a6a:	4a56      	ldr	r2, [pc, #344]	; (8009bc4 <PDM_Filter_Init+0x168>)
 8009a6c:	4856      	ldr	r0, [pc, #344]	; (8009bc8 <PDM_Filter_Init+0x16c>)
 8009a6e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	f24c 2540 	movw	r5, #49728	; 0xc240
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	6803      	ldr	r3, [r0, #0]
 8009a80:	400b      	ands	r3, r1
 8009a82:	42ab      	cmp	r3, r5
 8009a84:	d040      	beq.n	8009b08 <PDM_Filter_Init+0xac>
 8009a86:	6803      	ldr	r3, [r0, #0]
 8009a88:	f24c 2270 	movw	r2, #49776	; 0xc270
 8009a8c:	4019      	ands	r1, r3
 8009a8e:	4291      	cmp	r1, r2
 8009a90:	d03a      	beq.n	8009b08 <PDM_Filter_Init+0xac>
 8009a92:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <PDM_Filter_Init+0x170>)
 8009a94:	2101      	movs	r1, #1
 8009a96:	461a      	mov	r2, r3
 8009a98:	6019      	str	r1, [r3, #0]
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1fc      	bne.n	8009a9a <PDM_Filter_Init+0x3e>
 8009aa0:	4b4b      	ldr	r3, [pc, #300]	; (8009bd0 <PDM_Filter_Init+0x174>)
 8009aa2:	494c      	ldr	r1, [pc, #304]	; (8009bd4 <PDM_Filter_Init+0x178>)
 8009aa4:	4a4c      	ldr	r2, [pc, #304]	; (8009bd8 <PDM_Filter_Init+0x17c>)
 8009aa6:	6019      	str	r1, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	8820      	ldrh	r0, [r4, #0]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	8961      	ldrh	r1, [r4, #10]
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	8922      	ldrh	r2, [r4, #8]
 8009ab6:	bf14      	ite	ne
 8009ab8:	2500      	movne	r5, #0
 8009aba:	4d47      	ldreq	r5, [pc, #284]	; (8009bd8 <PDM_Filter_Init+0x17c>)
 8009abc:	2801      	cmp	r0, #1
 8009abe:	61a3      	str	r3, [r4, #24]
 8009ac0:	6465      	str	r5, [r4, #68]	; 0x44
 8009ac2:	60e3      	str	r3, [r4, #12]
 8009ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ac6:	6423      	str	r3, [r4, #64]	; 0x40
 8009ac8:	86a1      	strh	r1, [r4, #52]	; 0x34
 8009aca:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009acc:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009ad0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009ad4:	d936      	bls.n	8009b44 <PDM_Filter_Init+0xe8>
 8009ad6:	2003      	movs	r0, #3
 8009ad8:	2302      	movs	r3, #2
 8009ada:	8862      	ldrh	r2, [r4, #2]
 8009adc:	2a01      	cmp	r2, #1
 8009ade:	d92e      	bls.n	8009b3e <PDM_Filter_Init+0xe2>
 8009ae0:	2140      	movs	r1, #64	; 0x40
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009ae6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8009aea:	d101      	bne.n	8009af0 <PDM_Filter_Init+0x94>
 8009aec:	460b      	mov	r3, r1
 8009aee:	6421      	str	r1, [r4, #64]	; 0x40
 8009af0:	6862      	ldr	r2, [r4, #4]
 8009af2:	b11a      	cbz	r2, 8009afc <PDM_Filter_Init+0xa0>
 8009af4:	f043 0310 	orr.w	r3, r3, #16
 8009af8:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009afa:	6423      	str	r3, [r4, #64]	; 0x40
 8009afc:	2200      	movs	r2, #0
 8009afe:	8722      	strh	r2, [r4, #56]	; 0x38
 8009b00:	b908      	cbnz	r0, 8009b06 <PDM_Filter_Init+0xaa>
 8009b02:	3380      	adds	r3, #128	; 0x80
 8009b04:	6423      	str	r3, [r4, #64]	; 0x40
 8009b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b08:	4b34      	ldr	r3, [pc, #208]	; (8009bdc <PDM_Filter_Init+0x180>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1c0      	bne.n	8009a92 <PDM_Filter_Init+0x36>
 8009b10:	4a33      	ldr	r2, [pc, #204]	; (8009be0 <PDM_Filter_Init+0x184>)
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b18:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009b1c:	d006      	beq.n	8009b2c <PDM_Filter_Init+0xd0>
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	f240 4283 	movw	r2, #1155	; 0x483
 8009b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d1b2      	bne.n	8009a92 <PDM_Filter_Init+0x36>
 8009b2c:	4b2d      	ldr	r3, [pc, #180]	; (8009be4 <PDM_Filter_Init+0x188>)
 8009b2e:	2101      	movs	r1, #1
 8009b30:	461a      	mov	r2, r3
 8009b32:	6019      	str	r1, [r3, #0]
 8009b34:	6813      	ldr	r3, [r2, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1fc      	bne.n	8009b34 <PDM_Filter_Init+0xd8>
 8009b3a:	4b2b      	ldr	r3, [pc, #172]	; (8009be8 <PDM_Filter_Init+0x18c>)
 8009b3c:	e7b1      	b.n	8009aa2 <PDM_Filter_Init+0x46>
 8009b3e:	d03a      	beq.n	8009bb6 <PDM_Filter_Init+0x15a>
 8009b40:	4618      	mov	r0, r3
 8009b42:	e7cd      	b.n	8009ae0 <PDM_Filter_Init+0x84>
 8009b44:	4d29      	ldr	r5, [pc, #164]	; (8009bec <PDM_Filter_Init+0x190>)
 8009b46:	782a      	ldrb	r2, [r5, #0]
 8009b48:	d01b      	beq.n	8009b82 <PDM_Filter_Init+0x126>
 8009b4a:	2a01      	cmp	r2, #1
 8009b4c:	d001      	beq.n	8009b52 <PDM_Filter_Init+0xf6>
 8009b4e:	2001      	movs	r0, #1
 8009b50:	e7c3      	b.n	8009ada <PDM_Filter_Init+0x7e>
 8009b52:	4927      	ldr	r1, [pc, #156]	; (8009bf0 <PDM_Filter_Init+0x194>)
 8009b54:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8009bf8 <PDM_Filter_Init+0x19c>
 8009b58:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009b5c:	4e25      	ldr	r6, [pc, #148]	; (8009bf4 <PDM_Filter_Init+0x198>)
 8009b5e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009b62:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009b66:	ea02 0006 	and.w	r0, r2, r6
 8009b6a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009b6e:	428f      	cmp	r7, r1
 8009b70:	ea43 0300 	orr.w	r3, r3, r0
 8009b74:	4413      	add	r3, r2
 8009b76:	600b      	str	r3, [r1, #0]
 8009b78:	d1f1      	bne.n	8009b5e <PDM_Filter_Init+0x102>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	702b      	strb	r3, [r5, #0]
 8009b80:	e7ab      	b.n	8009ada <PDM_Filter_Init+0x7e>
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	d1a9      	bne.n	8009ada <PDM_Filter_Init+0x7e>
 8009b86:	491a      	ldr	r1, [pc, #104]	; (8009bf0 <PDM_Filter_Init+0x194>)
 8009b88:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8009bf8 <PDM_Filter_Init+0x19c>
 8009b8c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009b90:	4e18      	ldr	r6, [pc, #96]	; (8009bf4 <PDM_Filter_Init+0x198>)
 8009b92:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009b96:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009b9a:	ea02 0006 	and.w	r0, r2, r6
 8009b9e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009ba2:	428f      	cmp	r7, r1
 8009ba4:	ea43 0300 	orr.w	r3, r3, r0
 8009ba8:	4413      	add	r3, r2
 8009baa:	600b      	str	r3, [r1, #0]
 8009bac:	d1f1      	bne.n	8009b92 <PDM_Filter_Init+0x136>
 8009bae:	2001      	movs	r0, #1
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	7028      	strb	r0, [r5, #0]
 8009bb4:	e791      	b.n	8009ada <PDM_Filter_Init+0x7e>
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	4618      	mov	r0, r3
 8009bba:	2160      	movs	r1, #96	; 0x60
 8009bbc:	6422      	str	r2, [r4, #64]	; 0x40
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	e790      	b.n	8009ae4 <PDM_Filter_Init+0x88>
 8009bc2:	bf00      	nop
 8009bc4:	e0002000 	.word	0xe0002000
 8009bc8:	e000ed00 	.word	0xe000ed00
 8009bcc:	40023008 	.word	0x40023008
 8009bd0:	40023000 	.word	0x40023000
 8009bd4:	f407a5c2 	.word	0xf407a5c2
 8009bd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8009bdc:	e0042000 	.word	0xe0042000
 8009be0:	5c001000 	.word	0x5c001000
 8009be4:	58024c08 	.word	0x58024c08
 8009be8:	58024c00 	.word	0x58024c00
 8009bec:	24000490 	.word	0x24000490
 8009bf0:	23fffffc 	.word	0x23fffffc
 8009bf4:	000ffc00 	.word	0x000ffc00
 8009bf8:	3ff00000 	.word	0x3ff00000

08009bfc <PDM_Filter_setConfig>:
 8009bfc:	4b67      	ldr	r3, [pc, #412]	; (8009d9c <PDM_Filter_setConfig+0x1a0>)
 8009bfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d128      	bne.n	8009c56 <PDM_Filter_setConfig+0x5a>
 8009c04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c08:	880e      	ldrh	r6, [r1, #0]
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009c12:	1e73      	subs	r3, r6, #1
 8009c14:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8009c18:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8009c1c:	2b06      	cmp	r3, #6
 8009c1e:	ed2d 8b02 	vpush	{d8}
 8009c22:	6421      	str	r1, [r4, #64]	; 0x40
 8009c24:	b083      	sub	sp, #12
 8009c26:	d820      	bhi.n	8009c6a <PDM_Filter_setConfig+0x6e>
 8009c28:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009c2a:	42b3      	cmp	r3, r6
 8009c2c:	d03d      	beq.n	8009caa <PDM_Filter_setConfig+0xae>
 8009c2e:	4b5c      	ldr	r3, [pc, #368]	; (8009da0 <PDM_Filter_setConfig+0x1a4>)
 8009c30:	4013      	ands	r3, r2
 8009c32:	4333      	orrs	r3, r6
 8009c34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c38:	6423      	str	r3, [r4, #64]	; 0x40
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	2a70      	cmp	r2, #112	; 0x70
 8009c40:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009c44:	d009      	beq.n	8009c5a <PDM_Filter_setConfig+0x5e>
 8009c46:	2b06      	cmp	r3, #6
 8009c48:	d824      	bhi.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009c4a:	e8df f003 	tbb	[pc, r3]
 8009c4e:	878a      	.short	0x878a
 8009c50:	7b7e8184 	.word	0x7b7e8184
 8009c54:	78          	.byte	0x78
 8009c55:	00          	.byte	0x00
 8009c56:	2004      	movs	r0, #4
 8009c58:	4770      	bx	lr
 8009c5a:	2b06      	cmp	r3, #6
 8009c5c:	d81a      	bhi.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009c5e:	e8df f003 	tbb	[pc, r3]
 8009c62:	8f92      	.short	0x8f92
 8009c64:	8617898c 	.word	0x8617898c
 8009c68:	83          	.byte	0x83
 8009c69:	00          	.byte	0x00
 8009c6a:	4287      	cmp	r7, r0
 8009c6c:	f000 808e 	beq.w	8009d8c <PDM_Filter_setConfig+0x190>
 8009c70:	f117 0f0c 	cmn.w	r7, #12
 8009c74:	f04f 0008 	mov.w	r0, #8
 8009c78:	da11      	bge.n	8009c9e <PDM_Filter_setConfig+0xa2>
 8009c7a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009c7e:	3040      	adds	r0, #64	; 0x40
 8009c80:	80ab      	strh	r3, [r5, #4]
 8009c82:	886b      	ldrh	r3, [r5, #2]
 8009c84:	8626      	strh	r6, [r4, #48]	; 0x30
 8009c86:	8663      	strh	r3, [r4, #50]	; 0x32
 8009c88:	b003      	add	sp, #12
 8009c8a:	ecbd 8b02 	vpop	{d8}
 8009c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c90:	4b44      	ldr	r3, [pc, #272]	; (8009da4 <PDM_Filter_setConfig+0x1a8>)
 8009c92:	64a3      	str	r3, [r4, #72]	; 0x48
 8009c94:	f117 0f0c 	cmn.w	r7, #12
 8009c98:	f04f 0000 	mov.w	r0, #0
 8009c9c:	dbed      	blt.n	8009c7a <PDM_Filter_setConfig+0x7e>
 8009c9e:	2f33      	cmp	r7, #51	; 0x33
 8009ca0:	dd10      	ble.n	8009cc4 <PDM_Filter_setConfig+0xc8>
 8009ca2:	2333      	movs	r3, #51	; 0x33
 8009ca4:	3040      	adds	r0, #64	; 0x40
 8009ca6:	80ab      	strh	r3, [r5, #4]
 8009ca8:	e7eb      	b.n	8009c82 <PDM_Filter_setConfig+0x86>
 8009caa:	4287      	cmp	r7, r0
 8009cac:	d1f2      	bne.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009cae:	886b      	ldrh	r3, [r5, #2]
 8009cb0:	8663      	strh	r3, [r4, #50]	; 0x32
 8009cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cba:	6423      	str	r3, [r4, #64]	; 0x40
 8009cbc:	b003      	add	sp, #12
 8009cbe:	ecbd 8b02 	vpop	{d8}
 8009cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	2b06      	cmp	r3, #6
 8009cce:	d831      	bhi.n	8009d34 <PDM_Filter_setConfig+0x138>
 8009cd0:	4a35      	ldr	r2, [pc, #212]	; (8009da8 <PDM_Filter_setConfig+0x1ac>)
 8009cd2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009cd6:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009dac <PDM_Filter_setConfig+0x1b0>
 8009cda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cde:	9001      	str	r0, [sp, #4]
 8009ce0:	edd3 7a07 	vldr	s15, [r3, #28]
 8009ce4:	ed93 8a00 	vldr	s16, [r3]
 8009ce8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009cec:	f000 f8e4 	bl	8009eb8 <powf>
 8009cf0:	eef0 8a40 	vmov.f32	s17, s0
 8009cf4:	9801      	ldr	r0, [sp, #4]
 8009cf6:	ee07 7a90 	vmov	s15, r7
 8009cfa:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009cfe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009d02:	9001      	str	r0, [sp, #4]
 8009d04:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009d08:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009db0 <PDM_Filter_setConfig+0x1b4>
 8009d0c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009d10:	f000 f8d2 	bl	8009eb8 <powf>
 8009d14:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009d18:	886b      	ldrh	r3, [r5, #2]
 8009d1a:	9801      	ldr	r0, [sp, #4]
 8009d1c:	feb8 8a48 	vrinta.f32	s16, s16
 8009d20:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009d24:	8727      	strh	r7, [r4, #56]	; 0x38
 8009d26:	8663      	strh	r3, [r4, #50]	; 0x32
 8009d28:	8626      	strh	r6, [r4, #48]	; 0x30
 8009d2a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d0bf      	beq.n	8009cb2 <PDM_Filter_setConfig+0xb6>
 8009d32:	e7a9      	b.n	8009c88 <PDM_Filter_setConfig+0x8c>
 8009d34:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8009db4 <PDM_Filter_setConfig+0x1b8>
 8009d38:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8009db8 <PDM_Filter_setConfig+0x1bc>
 8009d3c:	e7db      	b.n	8009cf6 <PDM_Filter_setConfig+0xfa>
 8009d3e:	4b1f      	ldr	r3, [pc, #124]	; (8009dbc <PDM_Filter_setConfig+0x1c0>)
 8009d40:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d42:	e7a7      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d44:	4b1e      	ldr	r3, [pc, #120]	; (8009dc0 <PDM_Filter_setConfig+0x1c4>)
 8009d46:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d48:	e7a4      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d4a:	4b1e      	ldr	r3, [pc, #120]	; (8009dc4 <PDM_Filter_setConfig+0x1c8>)
 8009d4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d4e:	e7a1      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d50:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <PDM_Filter_setConfig+0x1cc>)
 8009d52:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d54:	e79e      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d56:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <PDM_Filter_setConfig+0x1d0>)
 8009d58:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d5a:	e79b      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d5c:	4b1c      	ldr	r3, [pc, #112]	; (8009dd0 <PDM_Filter_setConfig+0x1d4>)
 8009d5e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d60:	e798      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d62:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <PDM_Filter_setConfig+0x1d8>)
 8009d64:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d66:	e795      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d68:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <PDM_Filter_setConfig+0x1dc>)
 8009d6a:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d6c:	e792      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d6e:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <PDM_Filter_setConfig+0x1e0>)
 8009d70:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d72:	e78f      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d74:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <PDM_Filter_setConfig+0x1e4>)
 8009d76:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d78:	e78c      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d7a:	4b1a      	ldr	r3, [pc, #104]	; (8009de4 <PDM_Filter_setConfig+0x1e8>)
 8009d7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d7e:	e789      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <PDM_Filter_setConfig+0x1ec>)
 8009d82:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d84:	e786      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d86:	4b19      	ldr	r3, [pc, #100]	; (8009dec <PDM_Filter_setConfig+0x1f0>)
 8009d88:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d8a:	e783      	b.n	8009c94 <PDM_Filter_setConfig+0x98>
 8009d8c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009d8e:	42b3      	cmp	r3, r6
 8009d90:	f47f af6e 	bne.w	8009c70 <PDM_Filter_setConfig+0x74>
 8009d94:	886b      	ldrh	r3, [r5, #2]
 8009d96:	2008      	movs	r0, #8
 8009d98:	8663      	strh	r3, [r4, #50]	; 0x32
 8009d9a:	e775      	b.n	8009c88 <PDM_Filter_setConfig+0x8c>
 8009d9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009da0:	fffffef0 	.word	0xfffffef0
 8009da4:	08008f15 	.word	0x08008f15
 8009da8:	0800a228 	.word	0x0800a228
 8009dac:	42000000 	.word	0x42000000
 8009db0:	3d4ccccd 	.word	0x3d4ccccd
 8009db4:	4f800000 	.word	0x4f800000
 8009db8:	00000000 	.word	0x00000000
 8009dbc:	08008321 	.word	0x08008321
 8009dc0:	080081a9 	.word	0x080081a9
 8009dc4:	08008099 	.word	0x08008099
 8009dc8:	08008b5d 	.word	0x08008b5d
 8009dcc:	080088c5 	.word	0x080088c5
 8009dd0:	0800868d 	.word	0x0800868d
 8009dd4:	080084a9 	.word	0x080084a9
 8009dd8:	08009131 	.word	0x08009131
 8009ddc:	08008ff5 	.word	0x08008ff5
 8009de0:	08009771 	.word	0x08009771
 8009de4:	08009575 	.word	0x08009575
 8009de8:	080093c9 	.word	0x080093c9
 8009dec:	0800925d 	.word	0x0800925d

08009df0 <PDM_Filter>:
 8009df0:	b410      	push	{r4}
 8009df2:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <PDM_Filter+0x30>)
 8009df4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d107      	bne.n	8009e0a <PDM_Filter+0x1a>
 8009dfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009dfc:	05dc      	lsls	r4, r3, #23
 8009dfe:	d508      	bpl.n	8009e12 <PDM_Filter+0x22>
 8009e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009e02:	320c      	adds	r2, #12
 8009e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e08:	4718      	bx	r3
 8009e0a:	2004      	movs	r0, #4
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e16:	bf14      	ite	ne
 8009e18:	2020      	movne	r0, #32
 8009e1a:	2030      	moveq	r0, #48	; 0x30
 8009e1c:	e7f6      	b.n	8009e0c <PDM_Filter+0x1c>
 8009e1e:	bf00      	nop
 8009e20:	b5e8b5cd 	.word	0xb5e8b5cd

08009e24 <__errno>:
 8009e24:	4b01      	ldr	r3, [pc, #4]	; (8009e2c <__errno+0x8>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	24000410 	.word	0x24000410

08009e30 <__libc_init_array>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	4d0d      	ldr	r5, [pc, #52]	; (8009e68 <__libc_init_array+0x38>)
 8009e34:	4c0d      	ldr	r4, [pc, #52]	; (8009e6c <__libc_init_array+0x3c>)
 8009e36:	1b64      	subs	r4, r4, r5
 8009e38:	10a4      	asrs	r4, r4, #2
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	42a6      	cmp	r6, r4
 8009e3e:	d109      	bne.n	8009e54 <__libc_init_array+0x24>
 8009e40:	4d0b      	ldr	r5, [pc, #44]	; (8009e70 <__libc_init_array+0x40>)
 8009e42:	4c0c      	ldr	r4, [pc, #48]	; (8009e74 <__libc_init_array+0x44>)
 8009e44:	f000 f9e4 	bl	800a210 <_init>
 8009e48:	1b64      	subs	r4, r4, r5
 8009e4a:	10a4      	asrs	r4, r4, #2
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	42a6      	cmp	r6, r4
 8009e50:	d105      	bne.n	8009e5e <__libc_init_array+0x2e>
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e58:	4798      	blx	r3
 8009e5a:	3601      	adds	r6, #1
 8009e5c:	e7ee      	b.n	8009e3c <__libc_init_array+0xc>
 8009e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e62:	4798      	blx	r3
 8009e64:	3601      	adds	r6, #1
 8009e66:	e7f2      	b.n	8009e4e <__libc_init_array+0x1e>
 8009e68:	0800a518 	.word	0x0800a518
 8009e6c:	0800a518 	.word	0x0800a518
 8009e70:	0800a518 	.word	0x0800a518
 8009e74:	0800a51c 	.word	0x0800a51c

08009e78 <memset>:
 8009e78:	4402      	add	r2, r0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d100      	bne.n	8009e82 <memset+0xa>
 8009e80:	4770      	bx	lr
 8009e82:	f803 1b01 	strb.w	r1, [r3], #1
 8009e86:	e7f9      	b.n	8009e7c <memset+0x4>

08009e88 <checkint>:
 8009e88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009e8c:	2b7e      	cmp	r3, #126	; 0x7e
 8009e8e:	dd10      	ble.n	8009eb2 <checkint+0x2a>
 8009e90:	2b96      	cmp	r3, #150	; 0x96
 8009e92:	dc0c      	bgt.n	8009eae <checkint+0x26>
 8009e94:	2201      	movs	r2, #1
 8009e96:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9e:	1e5a      	subs	r2, r3, #1
 8009ea0:	4202      	tst	r2, r0
 8009ea2:	d106      	bne.n	8009eb2 <checkint+0x2a>
 8009ea4:	4203      	tst	r3, r0
 8009ea6:	bf0c      	ite	eq
 8009ea8:	2002      	moveq	r0, #2
 8009eaa:	2001      	movne	r0, #1
 8009eac:	4770      	bx	lr
 8009eae:	2002      	movs	r0, #2
 8009eb0:	4770      	bx	lr
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	4770      	bx	lr
	...

08009eb8 <powf>:
 8009eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eba:	ee10 1a10 	vmov	r1, s0
 8009ebe:	ee10 6a90 	vmov	r6, s1
 8009ec2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8009ec6:	0072      	lsls	r2, r6, #1
 8009ec8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009ecc:	b085      	sub	sp, #20
 8009ece:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8009ed2:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8009ed6:	d256      	bcs.n	8009f86 <powf+0xce>
 8009ed8:	4298      	cmp	r0, r3
 8009eda:	d256      	bcs.n	8009f8a <powf+0xd2>
 8009edc:	2000      	movs	r0, #0
 8009ede:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8009ee2:	4ea3      	ldr	r6, [pc, #652]	; (800a170 <powf+0x2b8>)
 8009ee4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009ee8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009eec:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009ef0:	0dd2      	lsrs	r2, r2, #23
 8009ef2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8009ef6:	05d2      	lsls	r2, r2, #23
 8009ef8:	1a8b      	subs	r3, r1, r2
 8009efa:	ed97 5b00 	vldr	d5, [r7]
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	15d2      	asrs	r2, r2, #23
 8009f04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009f08:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009f0c:	ed97 5b02 	vldr	d5, [r7, #8]
 8009f10:	ee26 2b06 	vmul.f64	d2, d6, d6
 8009f14:	ee22 1b02 	vmul.f64	d1, d2, d2
 8009f18:	ee07 2a90 	vmov	s15, r2
 8009f1c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8009f20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009f24:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f28:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8009f2c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8009f30:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009f34:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8009f38:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009f3c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8009f40:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8009f44:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009f48:	eea2 7b04 	vfma.f64	d7, d2, d4
 8009f4c:	eea5 7b01 	vfma.f64	d7, d5, d1
 8009f50:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009f54:	ee10 1a90 	vmov	r1, s1
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2700      	movs	r7, #0
 8009f5c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009f60:	f248 06be 	movw	r6, #32958	; 0x80be
 8009f64:	429f      	cmp	r7, r3
 8009f66:	bf08      	it	eq
 8009f68:	4296      	cmpeq	r6, r2
 8009f6a:	f080 80b1 	bcs.w	800a0d0 <powf+0x218>
 8009f6e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800a150 <powf+0x298>
 8009f72:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7a:	dd79      	ble.n	800a070 <powf+0x1b8>
 8009f7c:	b005      	add	sp, #20
 8009f7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009f82:	f000 b91f 	b.w	800a1c4 <__math_oflowf>
 8009f86:	4298      	cmp	r0, r3
 8009f88:	d32d      	bcc.n	8009fe6 <powf+0x12e>
 8009f8a:	b952      	cbnz	r2, 8009fa2 <powf+0xea>
 8009f8c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8009f96:	f240 80cd 	bls.w	800a134 <powf+0x27c>
 8009f9a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009f9e:	b005      	add	sp, #20
 8009fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009fa6:	d105      	bne.n	8009fb4 <powf+0xfc>
 8009fa8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009fac:	0076      	lsls	r6, r6, #1
 8009fae:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8009fb2:	e7f0      	b.n	8009f96 <powf+0xde>
 8009fb4:	004b      	lsls	r3, r1, #1
 8009fb6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8009fba:	d8ee      	bhi.n	8009f9a <powf+0xe2>
 8009fbc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009fc0:	d1eb      	bne.n	8009f9a <powf+0xe2>
 8009fc2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009fc6:	f000 80b5 	beq.w	800a134 <powf+0x27c>
 8009fca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009fce:	ea6f 0606 	mvn.w	r6, r6
 8009fd2:	bf34      	ite	cc
 8009fd4:	2300      	movcc	r3, #0
 8009fd6:	2301      	movcs	r3, #1
 8009fd8:	0ff6      	lsrs	r6, r6, #31
 8009fda:	42b3      	cmp	r3, r6
 8009fdc:	f040 80ad 	bne.w	800a13a <powf+0x282>
 8009fe0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8009fe4:	e7db      	b.n	8009f9e <powf+0xe6>
 8009fe6:	004f      	lsls	r7, r1, #1
 8009fe8:	1e7a      	subs	r2, r7, #1
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d31c      	bcc.n	800a028 <powf+0x170>
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ff4:	da0f      	bge.n	800a016 <powf+0x15e>
 8009ff6:	ee10 0a90 	vmov	r0, s1
 8009ffa:	f7ff ff45 	bl	8009e88 <checkint>
 8009ffe:	2801      	cmp	r0, #1
 800a000:	d109      	bne.n	800a016 <powf+0x15e>
 800a002:	eeb1 0a40 	vneg.f32	s0, s0
 800a006:	b947      	cbnz	r7, 800a01a <powf+0x162>
 800a008:	2e00      	cmp	r6, #0
 800a00a:	dac8      	bge.n	8009f9e <powf+0xe6>
 800a00c:	b005      	add	sp, #20
 800a00e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a012:	f000 b8dd 	b.w	800a1d0 <__math_divzerof>
 800a016:	2000      	movs	r0, #0
 800a018:	e7f5      	b.n	800a006 <powf+0x14e>
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	dabf      	bge.n	8009f9e <powf+0xe6>
 800a01e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a022:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a026:	e7ba      	b.n	8009f9e <powf+0xe6>
 800a028:	2900      	cmp	r1, #0
 800a02a:	da1f      	bge.n	800a06c <powf+0x1b4>
 800a02c:	ee10 0a90 	vmov	r0, s1
 800a030:	f7ff ff2a 	bl	8009e88 <checkint>
 800a034:	b920      	cbnz	r0, 800a040 <powf+0x188>
 800a036:	b005      	add	sp, #20
 800a038:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a03c:	f000 b8d8 	b.w	800a1f0 <__math_invalidf>
 800a040:	2801      	cmp	r0, #1
 800a042:	bf14      	ite	ne
 800a044:	2000      	movne	r0, #0
 800a046:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a04a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a04e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a052:	f4bf af44 	bcs.w	8009ede <powf+0x26>
 800a056:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a174 <powf+0x2bc>
 800a05a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a05e:	ee10 3a10 	vmov	r3, s0
 800a062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a066:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800a06a:	e738      	b.n	8009ede <powf+0x26>
 800a06c:	2000      	movs	r0, #0
 800a06e:	e7ee      	b.n	800a04e <powf+0x196>
 800a070:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a158 <powf+0x2a0>
 800a074:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07c:	dd10      	ble.n	800a0a0 <powf+0x1e8>
 800a07e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800a082:	2800      	cmp	r0, #0
 800a084:	d15c      	bne.n	800a140 <powf+0x288>
 800a086:	9302      	str	r3, [sp, #8]
 800a088:	eddd 7a02 	vldr	s15, [sp, #8]
 800a08c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a090:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a094:	eef4 7a47 	vcmp.f32	s15, s14
 800a098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09c:	f47f af6e 	bne.w	8009f7c <powf+0xc4>
 800a0a0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a160 <powf+0x2a8>
 800a0a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ac:	d804      	bhi.n	800a0b8 <powf+0x200>
 800a0ae:	b005      	add	sp, #20
 800a0b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a0b4:	f000 b87a 	b.w	800a1ac <__math_uflowf>
 800a0b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a168 <powf+0x2b0>
 800a0bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c4:	d504      	bpl.n	800a0d0 <powf+0x218>
 800a0c6:	b005      	add	sp, #20
 800a0c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a0cc:	f000 b874 	b.w	800a1b8 <__math_may_uflowf>
 800a0d0:	4b29      	ldr	r3, [pc, #164]	; (800a178 <powf+0x2c0>)
 800a0d2:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800a0d6:	ee30 6b07 	vadd.f64	d6, d0, d7
 800a0da:	ed8d 6b00 	vstr	d6, [sp]
 800a0de:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a0e2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a0e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a0ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a0ee:	f006 011f 	and.w	r1, r6, #31
 800a0f2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a0f6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800a0fa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800a0fe:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800a102:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800a106:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a10a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a10e:	1836      	adds	r6, r6, r0
 800a110:	2300      	movs	r3, #0
 800a112:	eb13 040c 	adds.w	r4, r3, ip
 800a116:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800a11a:	eb41 050e 	adc.w	r5, r1, lr
 800a11e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800a122:	ec45 4b17 	vmov	d7, r4, r5
 800a126:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a12a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a12e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a132:	e734      	b.n	8009f9e <powf+0xe6>
 800a134:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a138:	e731      	b.n	8009f9e <powf+0xe6>
 800a13a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a17c <powf+0x2c4>
 800a13e:	e72e      	b.n	8009f9e <powf+0xe6>
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	eddd 7a03 	vldr	s15, [sp, #12]
 800a146:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a14a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a14e:	e7a1      	b.n	800a094 <powf+0x1dc>
 800a150:	ffd1d571 	.word	0xffd1d571
 800a154:	405fffff 	.word	0x405fffff
 800a158:	ffa3aae2 	.word	0xffa3aae2
 800a15c:	405fffff 	.word	0x405fffff
 800a160:	00000000 	.word	0x00000000
 800a164:	c062c000 	.word	0xc062c000
 800a168:	00000000 	.word	0x00000000
 800a16c:	c062a000 	.word	0xc062a000
 800a170:	0800a2a0 	.word	0x0800a2a0
 800a174:	4b000000 	.word	0x4b000000
 800a178:	0800a3c8 	.word	0x0800a3c8
 800a17c:	00000000 	.word	0x00000000

0800a180 <with_errnof>:
 800a180:	b513      	push	{r0, r1, r4, lr}
 800a182:	4604      	mov	r4, r0
 800a184:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a188:	f7ff fe4c 	bl	8009e24 <__errno>
 800a18c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a190:	6004      	str	r4, [r0, #0]
 800a192:	b002      	add	sp, #8
 800a194:	bd10      	pop	{r4, pc}

0800a196 <xflowf>:
 800a196:	b130      	cbz	r0, 800a1a6 <xflowf+0x10>
 800a198:	eef1 7a40 	vneg.f32	s15, s0
 800a19c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a1a0:	2022      	movs	r0, #34	; 0x22
 800a1a2:	f7ff bfed 	b.w	800a180 <with_errnof>
 800a1a6:	eef0 7a40 	vmov.f32	s15, s0
 800a1aa:	e7f7      	b.n	800a19c <xflowf+0x6>

0800a1ac <__math_uflowf>:
 800a1ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a1b4 <__math_uflowf+0x8>
 800a1b0:	f7ff bff1 	b.w	800a196 <xflowf>
 800a1b4:	10000000 	.word	0x10000000

0800a1b8 <__math_may_uflowf>:
 800a1b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a1c0 <__math_may_uflowf+0x8>
 800a1bc:	f7ff bfeb 	b.w	800a196 <xflowf>
 800a1c0:	1a200000 	.word	0x1a200000

0800a1c4 <__math_oflowf>:
 800a1c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a1cc <__math_oflowf+0x8>
 800a1c8:	f7ff bfe5 	b.w	800a196 <xflowf>
 800a1cc:	70000000 	.word	0x70000000

0800a1d0 <__math_divzerof>:
 800a1d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a1d4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800a1de:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a1ec <__math_divzerof+0x1c>
 800a1e2:	2022      	movs	r0, #34	; 0x22
 800a1e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a1e8:	f7ff bfca 	b.w	800a180 <with_errnof>
 800a1ec:	00000000 	.word	0x00000000

0800a1f0 <__math_invalidf>:
 800a1f0:	eef0 7a40 	vmov.f32	s15, s0
 800a1f4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a1f8:	eef4 7a67 	vcmp.f32	s15, s15
 800a1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a200:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a204:	d602      	bvs.n	800a20c <__math_invalidf+0x1c>
 800a206:	2021      	movs	r0, #33	; 0x21
 800a208:	f7ff bfba 	b.w	800a180 <with_errnof>
 800a20c:	4770      	bx	lr
	...

0800a210 <_init>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	bf00      	nop
 800a214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a216:	bc08      	pop	{r3}
 800a218:	469e      	mov	lr, r3
 800a21a:	4770      	bx	lr

0800a21c <_fini>:
 800a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21e:	bf00      	nop
 800a220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a222:	bc08      	pop	{r3}
 800a224:	469e      	mov	lr, r3
 800a226:	4770      	bx	lr
