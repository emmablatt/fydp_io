
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009370  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08009640  08009640  00019640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  08009910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c4  2400047c  08009d8c  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000740  08009d8c  00020740  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019207  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003046  00000000  00000000  000396b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b28  00000000  00000000  0003c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a28  00000000  00000000  0003d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000318dd  00000000  00000000  0003dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000111cf  00000000  00000000  0006f525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001412b5  00000000  00000000  000806f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001c19a9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cdc  00000000  00000000  001c1a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009628 	.word	0x08009628

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	08009628 	.word	0x08009628

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fcdb 	bl	8002d50 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f002 fe76 	bl	80030a0 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	08009678 	.word	0x08009678
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f002 fe56 	bl	80030a0 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	08009678 	.word	0x08009678

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f002 fe38 	bl	80030a0 <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	08009678 	.word	0x08009678

08000444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800044a:	2003      	movs	r0, #3
 800044c:	f000 f95c 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000450:	f003 fbfc 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8000454:	4602      	mov	r2, r0
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_Init+0x68>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	4913      	ldr	r1, [pc, #76]	; (80004b0 <HAL_Init+0x6c>)
 8000462:	5ccb      	ldrb	r3, [r1, r3]
 8000464:	f003 031f 	and.w	r3, r3, #31
 8000468:	fa22 f303 	lsr.w	r3, r2, r3
 800046c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_Init+0x68>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 030f 	and.w	r3, r3, #15
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_Init+0x6c>)
 8000478:	5cd3      	ldrb	r3, [r2, r3]
 800047a:	f003 031f 	and.w	r3, r3, #31
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_Init+0x70>)
 8000486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000488:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <HAL_Init+0x74>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f814 	bl	80004bc <HAL_InitTick>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e002      	b.n	80004a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800049e:	f006 fd73 	bl	8006f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	58024400 	.word	0x58024400
 80004b0:	08009688 	.word	0x08009688
 80004b4:	24000414 	.word	0x24000414
 80004b8:	24000410 	.word	0x24000410

080004bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_InitTick+0x60>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d101      	bne.n	80004d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e021      	b.n	8000514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <HAL_InitTick+0x64>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <HAL_InitTick+0x60>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f941 	bl	800076e <HAL_SYSTICK_Config>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00e      	b.n	8000514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d80a      	bhi.n	8000512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f000 f90b 	bl	800071e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_InitTick+0x68>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2400040c 	.word	0x2400040c
 8000520:	24000410 	.word	0x24000410
 8000524:	24000408 	.word	0x24000408

08000528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x20>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x24>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_IncTick+0x24>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2400040c 	.word	0x2400040c
 800054c:	240004a4 	.word	0x240004a4

08000550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HAL_GetTick+0x14>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	240004a4 	.word	0x240004a4

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <__NVIC_SetPriorityGrouping+0x40>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	4313      	orrs	r3, r2
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	05fa0000 	.word	0x05fa0000

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <__NVIC_EnableIRQ+0x38>)
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	; (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d4:	d301      	bcc.n	80006da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00f      	b.n	80006fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <SysTick_Config+0x40>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e2:	210f      	movs	r1, #15
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f7ff ff8e 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SysTick_Config+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SysTick_Config+0x40>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff29 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff40 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff90 	bl	800065c <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff33 	bl	80005cc <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa4 	bl	80006c4 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e054      	b.n	8000844 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7f5b      	ldrb	r3, [r3, #29]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f006 fc06 	bl	8006fbc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2202      	movs	r2, #2
 80007b4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10c      	bne.n	80007d8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <HAL_CRC_Init+0xc4>)
 80007c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0218 	bic.w	r2, r2, #24
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	e00c      	b.n	80007f2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6899      	ldr	r1, [r3, #8]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	461a      	mov	r2, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f834 	bl	8000850 <HAL_CRCEx_Polynomial_Set>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e028      	b.n	8000844 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	795b      	ldrb	r3, [r3, #5]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d105      	bne.n	8000806 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	e004      	b.n	8000810 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6912      	ldr	r2, [r2, #16]
 800080e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	430a      	orrs	r2, r1
 8000824:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	430a      	orrs	r2, r1
 800083a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2201      	movs	r2, #1
 8000840:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	04c11db7 	.word	0x04c11db7

08000850 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000860:	231f      	movs	r3, #31
 8000862:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000864:	bf00      	nop
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	613a      	str	r2, [r7, #16]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d009      	beq.n	8000884 <HAL_CRCEx_Polynomial_Set+0x34>
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	f003 031f 	and.w	r3, r3, #31
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	fa22 f303 	lsr.w	r3, r2, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f0      	beq.n	8000866 <HAL_CRCEx_Polynomial_Set+0x16>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b18      	cmp	r3, #24
 8000888:	d846      	bhi.n	8000918 <HAL_CRCEx_Polynomial_Set+0xc8>
 800088a:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <HAL_CRCEx_Polynomial_Set+0x40>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	0800091f 	.word	0x0800091f
 8000894:	08000919 	.word	0x08000919
 8000898:	08000919 	.word	0x08000919
 800089c:	08000919 	.word	0x08000919
 80008a0:	08000919 	.word	0x08000919
 80008a4:	08000919 	.word	0x08000919
 80008a8:	08000919 	.word	0x08000919
 80008ac:	08000919 	.word	0x08000919
 80008b0:	0800090d 	.word	0x0800090d
 80008b4:	08000919 	.word	0x08000919
 80008b8:	08000919 	.word	0x08000919
 80008bc:	08000919 	.word	0x08000919
 80008c0:	08000919 	.word	0x08000919
 80008c4:	08000919 	.word	0x08000919
 80008c8:	08000919 	.word	0x08000919
 80008cc:	08000919 	.word	0x08000919
 80008d0:	08000901 	.word	0x08000901
 80008d4:	08000919 	.word	0x08000919
 80008d8:	08000919 	.word	0x08000919
 80008dc:	08000919 	.word	0x08000919
 80008e0:	08000919 	.word	0x08000919
 80008e4:	08000919 	.word	0x08000919
 80008e8:	08000919 	.word	0x08000919
 80008ec:	08000919 	.word	0x08000919
 80008f0:	080008f5 	.word	0x080008f5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d913      	bls.n	8000922 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80008fe:	e010      	b.n	8000922 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d90f      	bls.n	8000926 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800090a:	e00c      	b.n	8000926 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	2b0f      	cmp	r3, #15
 8000910:	d90b      	bls.n	800092a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000916:	e008      	b.n	800092a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	75fb      	strb	r3, [r7, #23]
      break;
 800091c:	e006      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800091e:	bf00      	nop
 8000920:	e004      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000922:	bf00      	nop
 8000924:	e002      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800092a:	bf00      	nop
  }
  if (status == HAL_OK)
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10d      	bne.n	800094e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f023 0118 	bic.w	r1, r3, #24
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800094e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000950:	4618      	mov	r0, r3
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fdf4 	bl	8000550 <HAL_GetTick>
 8000968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e314      	b.n	8000f9e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a66      	ldr	r2, [pc, #408]	; (8000b14 <HAL_DMA_Init+0x1b8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d04a      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a65      	ldr	r2, [pc, #404]	; (8000b18 <HAL_DMA_Init+0x1bc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d045      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a63      	ldr	r2, [pc, #396]	; (8000b1c <HAL_DMA_Init+0x1c0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d040      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a62      	ldr	r2, [pc, #392]	; (8000b20 <HAL_DMA_Init+0x1c4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d03b      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a60      	ldr	r2, [pc, #384]	; (8000b24 <HAL_DMA_Init+0x1c8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d036      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a5f      	ldr	r2, [pc, #380]	; (8000b28 <HAL_DMA_Init+0x1cc>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d031      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a5d      	ldr	r2, [pc, #372]	; (8000b2c <HAL_DMA_Init+0x1d0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d02c      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a5c      	ldr	r2, [pc, #368]	; (8000b30 <HAL_DMA_Init+0x1d4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d027      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a5a      	ldr	r2, [pc, #360]	; (8000b34 <HAL_DMA_Init+0x1d8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d022      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a59      	ldr	r2, [pc, #356]	; (8000b38 <HAL_DMA_Init+0x1dc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d01d      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a57      	ldr	r2, [pc, #348]	; (8000b3c <HAL_DMA_Init+0x1e0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d018      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a56      	ldr	r2, [pc, #344]	; (8000b40 <HAL_DMA_Init+0x1e4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <HAL_DMA_Init+0x1e8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00e      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a53      	ldr	r2, [pc, #332]	; (8000b48 <HAL_DMA_Init+0x1ec>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d009      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a51      	ldr	r2, [pc, #324]	; (8000b4c <HAL_DMA_Init+0x1f0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d004      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <HAL_DMA_Init+0x1f4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_DMA_Init+0xbc>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_DMA_Init+0xbe>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 813c 	beq.w	8000c98 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2202      	movs	r2, #2
 8000a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a37      	ldr	r2, [pc, #220]	; (8000b14 <HAL_DMA_Init+0x1b8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d04a      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <HAL_DMA_Init+0x1bc>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d045      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a34      	ldr	r2, [pc, #208]	; (8000b1c <HAL_DMA_Init+0x1c0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d040      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_DMA_Init+0x1c4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d03b      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <HAL_DMA_Init+0x1c8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d036      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <HAL_DMA_Init+0x1cc>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d031      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <HAL_DMA_Init+0x1d0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d02c      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <HAL_DMA_Init+0x1d4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d027      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2b      	ldr	r2, [pc, #172]	; (8000b34 <HAL_DMA_Init+0x1d8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d022      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <HAL_DMA_Init+0x1dc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d01d      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_DMA_Init+0x1e0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d018      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <HAL_DMA_Init+0x1e4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <HAL_DMA_Init+0x1e8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00e      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <HAL_DMA_Init+0x1ec>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d009      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_DMA_Init+0x1f0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d004      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_DMA_Init+0x1f4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d108      	bne.n	8000ae2 <HAL_DMA_Init+0x186>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 0201 	bic.w	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e007      	b.n	8000af2 <HAL_DMA_Init+0x196>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000af2:	e02f      	b.n	8000b54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000af4:	f7ff fd2c 	bl	8000550 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d928      	bls.n	8000b54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2220      	movs	r2, #32
 8000b06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e244      	b.n	8000f9e <HAL_DMA_Init+0x642>
 8000b14:	40020010 	.word	0x40020010
 8000b18:	40020028 	.word	0x40020028
 8000b1c:	40020040 	.word	0x40020040
 8000b20:	40020058 	.word	0x40020058
 8000b24:	40020070 	.word	0x40020070
 8000b28:	40020088 	.word	0x40020088
 8000b2c:	400200a0 	.word	0x400200a0
 8000b30:	400200b8 	.word	0x400200b8
 8000b34:	40020410 	.word	0x40020410
 8000b38:	40020428 	.word	0x40020428
 8000b3c:	40020440 	.word	0x40020440
 8000b40:	40020458 	.word	0x40020458
 8000b44:	40020470 	.word	0x40020470
 8000b48:	40020488 	.word	0x40020488
 8000b4c:	400204a0 	.word	0x400204a0
 8000b50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1c8      	bne.n	8000af4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <HAL_DMA_Init+0x424>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000b7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d107      	bne.n	8000bb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b28      	cmp	r3, #40	; 0x28
 8000bbe:	d903      	bls.n	8000bc8 <HAL_DMA_Init+0x26c>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8000bc6:	d91f      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8000bce:	d903      	bls.n	8000bd8 <HAL_DMA_Init+0x27c>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b42      	cmp	r3, #66	; 0x42
 8000bd6:	d917      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b46      	cmp	r3, #70	; 0x46
 8000bde:	d903      	bls.n	8000be8 <HAL_DMA_Init+0x28c>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b48      	cmp	r3, #72	; 0x48
 8000be6:	d90f      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b4e      	cmp	r3, #78	; 0x4e
 8000bee:	d903      	bls.n	8000bf8 <HAL_DMA_Init+0x29c>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b52      	cmp	r3, #82	; 0x52
 8000bf6:	d907      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b73      	cmp	r3, #115	; 0x73
 8000bfe:	d905      	bls.n	8000c0c <HAL_DMA_Init+0x2b0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b77      	cmp	r3, #119	; 0x77
 8000c06:	d801      	bhi.n	8000c0c <HAL_DMA_Init+0x2b0>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_DMA_Init+0x2b2>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c18:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f023 0307 	bic.w	r3, r3, #7
 8000c30:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d117      	bne.n	8000c74 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00e      	beq.n	8000c74 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f001 fdd8 	bl	800280c <DMA_CheckFifoParam>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2240      	movs	r2, #64	; 0x40
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e194      	b.n	8000f9e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f001 fd13 	bl	80026a8 <DMA_CalcBaseAndBitshift>
 8000c82:	4603      	mov	r3, r0
 8000c84:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8a:	f003 031f 	and.w	r3, r3, #31
 8000c8e:	223f      	movs	r2, #63	; 0x3f
 8000c90:	409a      	lsls	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	e0ca      	b.n	8000e2e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <HAL_DMA_Init+0x428>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d022      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <HAL_DMA_Init+0x42c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d01d      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a36      	ldr	r2, [pc, #216]	; (8000d8c <HAL_DMA_Init+0x430>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d018      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a35      	ldr	r2, [pc, #212]	; (8000d90 <HAL_DMA_Init+0x434>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <HAL_DMA_Init+0x438>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00e      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_DMA_Init+0x43c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d009      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <HAL_DMA_Init+0x440>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d004      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <HAL_DMA_Init+0x444>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_DMA_Init+0x390>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <HAL_DMA_Init+0x392>
 8000cec:	2300      	movs	r3, #0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8094 	beq.w	8000e1c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <HAL_DMA_Init+0x428>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d021      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <HAL_DMA_Init+0x42c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d01c      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_DMA_Init+0x430>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d017      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <HAL_DMA_Init+0x434>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d012      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_DMA_Init+0x438>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <HAL_DMA_Init+0x43c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d008      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_DMA_Init+0x440>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d003      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_DMA_Init+0x444>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2202      	movs	r2, #2
 8000d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_DMA_Init+0x448>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b40      	cmp	r3, #64	; 0x40
 8000d6a:	d01d      	beq.n	8000da8 <HAL_DMA_Init+0x44c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b80      	cmp	r3, #128	; 0x80
 8000d72:	d102      	bne.n	8000d7a <HAL_DMA_Init+0x41e>
 8000d74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d78:	e017      	b.n	8000daa <HAL_DMA_Init+0x44e>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e015      	b.n	8000daa <HAL_DMA_Init+0x44e>
 8000d7e:	bf00      	nop
 8000d80:	fe10803f 	.word	0xfe10803f
 8000d84:	58025408 	.word	0x58025408
 8000d88:	5802541c 	.word	0x5802541c
 8000d8c:	58025430 	.word	0x58025430
 8000d90:	58025444 	.word	0x58025444
 8000d94:	58025458 	.word	0x58025458
 8000d98:	5802546c 	.word	0x5802546c
 8000d9c:	58025480 	.word	0x58025480
 8000da0:	58025494 	.word	0x58025494
 8000da4:	fffe000f 	.word	0xfffe000f
 8000da8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68d2      	ldr	r2, [r2, #12]
 8000dae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000dd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <HAL_DMA_Init+0x64c>)
 8000df0:	4413      	add	r3, r2
 8000df2:	4a6e      	ldr	r2, [pc, #440]	; (8000fac <HAL_DMA_Init+0x650>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	009a      	lsls	r2, r3, #2
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 fc51 	bl	80026a8 <DMA_CalcBaseAndBitshift>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2201      	movs	r2, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	e008      	b.n	8000e2e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0b7      	b.n	8000f9e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_DMA_Init+0x654>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d072      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a5d      	ldr	r2, [pc, #372]	; (8000fb4 <HAL_DMA_Init+0x658>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d06d      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <HAL_DMA_Init+0x65c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d068      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a5a      	ldr	r2, [pc, #360]	; (8000fbc <HAL_DMA_Init+0x660>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d063      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <HAL_DMA_Init+0x664>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d05e      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_DMA_Init+0x668>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d059      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <HAL_DMA_Init+0x66c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d054      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <HAL_DMA_Init+0x670>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d04f      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a53      	ldr	r2, [pc, #332]	; (8000fd0 <HAL_DMA_Init+0x674>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04a      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <HAL_DMA_Init+0x678>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d045      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <HAL_DMA_Init+0x67c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d040      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <HAL_DMA_Init+0x680>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d03b      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <HAL_DMA_Init+0x684>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d036      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_DMA_Init+0x688>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d031      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <HAL_DMA_Init+0x68c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d02c      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a48      	ldr	r2, [pc, #288]	; (8000fec <HAL_DMA_Init+0x690>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d027      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <HAL_DMA_Init+0x694>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d022      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <HAL_DMA_Init+0x698>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01d      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <HAL_DMA_Init+0x69c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d018      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a42      	ldr	r2, [pc, #264]	; (8000ffc <HAL_DMA_Init+0x6a0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a41      	ldr	r2, [pc, #260]	; (8001000 <HAL_DMA_Init+0x6a4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00e      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3f      	ldr	r2, [pc, #252]	; (8001004 <HAL_DMA_Init+0x6a8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d009      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <HAL_DMA_Init+0x6ac>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d004      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <HAL_DMA_Init+0x6b0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_DMA_Init+0x5c6>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_DMA_Init+0x5c8>
 8000f22:	2300      	movs	r3, #0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d032      	beq.n	8000f8e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fceb 	bl	8002904 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b80      	cmp	r3, #128	; 0x80
 8000f34:	d102      	bne.n	8000f3c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000f50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d010      	beq.n	8000f7c <HAL_DMA_Init+0x620>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d80c      	bhi.n	8000f7c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 fd68 	bl	8002a38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	e008      	b.n	8000f8e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	a7fdabf8 	.word	0xa7fdabf8
 8000fac:	cccccccd 	.word	0xcccccccd
 8000fb0:	40020010 	.word	0x40020010
 8000fb4:	40020028 	.word	0x40020028
 8000fb8:	40020040 	.word	0x40020040
 8000fbc:	40020058 	.word	0x40020058
 8000fc0:	40020070 	.word	0x40020070
 8000fc4:	40020088 	.word	0x40020088
 8000fc8:	400200a0 	.word	0x400200a0
 8000fcc:	400200b8 	.word	0x400200b8
 8000fd0:	40020410 	.word	0x40020410
 8000fd4:	40020428 	.word	0x40020428
 8000fd8:	40020440 	.word	0x40020440
 8000fdc:	40020458 	.word	0x40020458
 8000fe0:	40020470 	.word	0x40020470
 8000fe4:	40020488 	.word	0x40020488
 8000fe8:	400204a0 	.word	0x400204a0
 8000fec:	400204b8 	.word	0x400204b8
 8000ff0:	58025408 	.word	0x58025408
 8000ff4:	5802541c 	.word	0x5802541c
 8000ff8:	58025430 	.word	0x58025430
 8000ffc:	58025444 	.word	0x58025444
 8001000:	58025458 	.word	0x58025458
 8001004:	5802546c 	.word	0x5802546c
 8001008:	58025480 	.word	0x58025480
 800100c:	58025494 	.word	0x58025494

08001010 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e226      	b.n	800147a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_DMA_Start_IT+0x2a>
 8001036:	2302      	movs	r3, #2
 8001038:	e21f      	b.n	800147a <HAL_DMA_Start_IT+0x46a>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	f040 820a 	bne.w	8001464 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_DMA_Start_IT+0x1f4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04a      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a66      	ldr	r2, [pc, #408]	; (8001208 <HAL_DMA_Start_IT+0x1f8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d045      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a65      	ldr	r2, [pc, #404]	; (800120c <HAL_DMA_Start_IT+0x1fc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d040      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a63      	ldr	r2, [pc, #396]	; (8001210 <HAL_DMA_Start_IT+0x200>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d03b      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a62      	ldr	r2, [pc, #392]	; (8001214 <HAL_DMA_Start_IT+0x204>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d036      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <HAL_DMA_Start_IT+0x208>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d031      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_DMA_Start_IT+0x20c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d02c      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a5d      	ldr	r2, [pc, #372]	; (8001220 <HAL_DMA_Start_IT+0x210>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d027      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <HAL_DMA_Start_IT+0x214>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d022      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <HAL_DMA_Start_IT+0x218>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01d      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a59      	ldr	r2, [pc, #356]	; (800122c <HAL_DMA_Start_IT+0x21c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d018      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a57      	ldr	r2, [pc, #348]	; (8001230 <HAL_DMA_Start_IT+0x220>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a56      	ldr	r2, [pc, #344]	; (8001234 <HAL_DMA_Start_IT+0x224>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d00e      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a54      	ldr	r2, [pc, #336]	; (8001238 <HAL_DMA_Start_IT+0x228>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d009      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a53      	ldr	r2, [pc, #332]	; (800123c <HAL_DMA_Start_IT+0x22c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d004      	beq.n	80010fe <HAL_DMA_Start_IT+0xee>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_DMA_Start_IT+0x230>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d108      	bne.n	8001110 <HAL_DMA_Start_IT+0x100>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e007      	b.n	8001120 <HAL_DMA_Start_IT+0x110>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f001 f912 	bl	8002350 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a34      	ldr	r2, [pc, #208]	; (8001204 <HAL_DMA_Start_IT+0x1f4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d04a      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a33      	ldr	r2, [pc, #204]	; (8001208 <HAL_DMA_Start_IT+0x1f8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d045      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <HAL_DMA_Start_IT+0x1fc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d040      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a30      	ldr	r2, [pc, #192]	; (8001210 <HAL_DMA_Start_IT+0x200>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d03b      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <HAL_DMA_Start_IT+0x204>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d036      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <HAL_DMA_Start_IT+0x208>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d031      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a2b      	ldr	r2, [pc, #172]	; (800121c <HAL_DMA_Start_IT+0x20c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02c      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <HAL_DMA_Start_IT+0x210>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d027      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a28      	ldr	r2, [pc, #160]	; (8001224 <HAL_DMA_Start_IT+0x214>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d022      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_DMA_Start_IT+0x218>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d01d      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <HAL_DMA_Start_IT+0x21c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d018      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_DMA_Start_IT+0x220>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_DMA_Start_IT+0x224>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00e      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_DMA_Start_IT+0x228>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d009      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_DMA_Start_IT+0x22c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d004      	beq.n	80011cc <HAL_DMA_Start_IT+0x1bc>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <HAL_DMA_Start_IT+0x230>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_DMA_Start_IT+0x1c0>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_DMA_Start_IT+0x1c2>
 80011d0:	2300      	movs	r3, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d036      	beq.n	8001244 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 021e 	bic.w	r2, r3, #30
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0216 	orr.w	r2, r2, #22
 80011e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03e      	beq.n	8001270 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0208 	orr.w	r2, r2, #8
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e035      	b.n	8001270 <HAL_DMA_Start_IT+0x260>
 8001204:	40020010 	.word	0x40020010
 8001208:	40020028 	.word	0x40020028
 800120c:	40020040 	.word	0x40020040
 8001210:	40020058 	.word	0x40020058
 8001214:	40020070 	.word	0x40020070
 8001218:	40020088 	.word	0x40020088
 800121c:	400200a0 	.word	0x400200a0
 8001220:	400200b8 	.word	0x400200b8
 8001224:	40020410 	.word	0x40020410
 8001228:	40020428 	.word	0x40020428
 800122c:	40020440 	.word	0x40020440
 8001230:	40020458 	.word	0x40020458
 8001234:	40020470 	.word	0x40020470
 8001238:	40020488 	.word	0x40020488
 800123c:	400204a0 	.word	0x400204a0
 8001240:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 020e 	bic.w	r2, r3, #14
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 020a 	orr.w	r2, r2, #10
 8001256:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0204 	orr.w	r2, r2, #4
 800126e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a83      	ldr	r2, [pc, #524]	; (8001484 <HAL_DMA_Start_IT+0x474>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d072      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a82      	ldr	r2, [pc, #520]	; (8001488 <HAL_DMA_Start_IT+0x478>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d06d      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a80      	ldr	r2, [pc, #512]	; (800148c <HAL_DMA_Start_IT+0x47c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d068      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7f      	ldr	r2, [pc, #508]	; (8001490 <HAL_DMA_Start_IT+0x480>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d063      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a7d      	ldr	r2, [pc, #500]	; (8001494 <HAL_DMA_Start_IT+0x484>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d05e      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a7c      	ldr	r2, [pc, #496]	; (8001498 <HAL_DMA_Start_IT+0x488>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d059      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a7a      	ldr	r2, [pc, #488]	; (800149c <HAL_DMA_Start_IT+0x48c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d054      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a79      	ldr	r2, [pc, #484]	; (80014a0 <HAL_DMA_Start_IT+0x490>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d04f      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a77      	ldr	r2, [pc, #476]	; (80014a4 <HAL_DMA_Start_IT+0x494>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d04a      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a76      	ldr	r2, [pc, #472]	; (80014a8 <HAL_DMA_Start_IT+0x498>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d045      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a74      	ldr	r2, [pc, #464]	; (80014ac <HAL_DMA_Start_IT+0x49c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d040      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a73      	ldr	r2, [pc, #460]	; (80014b0 <HAL_DMA_Start_IT+0x4a0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d03b      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a71      	ldr	r2, [pc, #452]	; (80014b4 <HAL_DMA_Start_IT+0x4a4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d036      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a70      	ldr	r2, [pc, #448]	; (80014b8 <HAL_DMA_Start_IT+0x4a8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d031      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_DMA_Start_IT+0x4ac>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02c      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6d      	ldr	r2, [pc, #436]	; (80014c0 <HAL_DMA_Start_IT+0x4b0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d027      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a6b      	ldr	r2, [pc, #428]	; (80014c4 <HAL_DMA_Start_IT+0x4b4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d022      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_DMA_Start_IT+0x4b8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d01d      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a68      	ldr	r2, [pc, #416]	; (80014cc <HAL_DMA_Start_IT+0x4bc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d018      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <HAL_DMA_Start_IT+0x4c0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d013      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a65      	ldr	r2, [pc, #404]	; (80014d4 <HAL_DMA_Start_IT+0x4c4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00e      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a64      	ldr	r2, [pc, #400]	; (80014d8 <HAL_DMA_Start_IT+0x4c8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d009      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a62      	ldr	r2, [pc, #392]	; (80014dc <HAL_DMA_Start_IT+0x4cc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d004      	beq.n	8001360 <HAL_DMA_Start_IT+0x350>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a61      	ldr	r2, [pc, #388]	; (80014e0 <HAL_DMA_Start_IT+0x4d0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_DMA_Start_IT+0x354>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_DMA_Start_IT+0x356>
 8001364:	2300      	movs	r3, #0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01a      	beq.n	80013a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001386:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800139a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800139e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a37      	ldr	r2, [pc, #220]	; (8001484 <HAL_DMA_Start_IT+0x474>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d04a      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a36      	ldr	r2, [pc, #216]	; (8001488 <HAL_DMA_Start_IT+0x478>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d045      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a34      	ldr	r2, [pc, #208]	; (800148c <HAL_DMA_Start_IT+0x47c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d040      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a33      	ldr	r2, [pc, #204]	; (8001490 <HAL_DMA_Start_IT+0x480>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d03b      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a31      	ldr	r2, [pc, #196]	; (8001494 <HAL_DMA_Start_IT+0x484>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d036      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <HAL_DMA_Start_IT+0x488>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d031      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2e      	ldr	r2, [pc, #184]	; (800149c <HAL_DMA_Start_IT+0x48c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02c      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <HAL_DMA_Start_IT+0x490>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d027      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <HAL_DMA_Start_IT+0x494>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d022      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <HAL_DMA_Start_IT+0x498>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d01d      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_DMA_Start_IT+0x49c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d018      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_DMA_Start_IT+0x4a0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <HAL_DMA_Start_IT+0x4a4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00e      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_DMA_Start_IT+0x4a8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d009      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_DMA_Start_IT+0x4ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_DMA_Start_IT+0x430>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_DMA_Start_IT+0x4b0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d108      	bne.n	8001452 <HAL_DMA_Start_IT+0x442>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e012      	b.n	8001478 <HAL_DMA_Start_IT+0x468>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e009      	b.n	8001478 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800146a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001478:	7dfb      	ldrb	r3, [r7, #23]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020010 	.word	0x40020010
 8001488:	40020028 	.word	0x40020028
 800148c:	40020040 	.word	0x40020040
 8001490:	40020058 	.word	0x40020058
 8001494:	40020070 	.word	0x40020070
 8001498:	40020088 	.word	0x40020088
 800149c:	400200a0 	.word	0x400200a0
 80014a0:	400200b8 	.word	0x400200b8
 80014a4:	40020410 	.word	0x40020410
 80014a8:	40020428 	.word	0x40020428
 80014ac:	40020440 	.word	0x40020440
 80014b0:	40020458 	.word	0x40020458
 80014b4:	40020470 	.word	0x40020470
 80014b8:	40020488 	.word	0x40020488
 80014bc:	400204a0 	.word	0x400204a0
 80014c0:	400204b8 	.word	0x400204b8
 80014c4:	58025408 	.word	0x58025408
 80014c8:	5802541c 	.word	0x5802541c
 80014cc:	58025430 	.word	0x58025430
 80014d0:	58025444 	.word	0x58025444
 80014d4:	58025458 	.word	0x58025458
 80014d8:	5802546c 	.word	0x5802546c
 80014dc:	58025480 	.word	0x58025480
 80014e0:	58025494 	.word	0x58025494

080014e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f0:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_DMA_IRQHandler+0x1ac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a67      	ldr	r2, [pc, #412]	; (8001694 <HAL_DMA_IRQHandler+0x1b0>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a9b      	lsrs	r3, r3, #10
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <HAL_DMA_IRQHandler+0x1b4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d04a      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_DMA_IRQHandler+0x1b8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d045      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <HAL_DMA_IRQHandler+0x1bc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d040      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <HAL_DMA_IRQHandler+0x1c0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d03b      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a59      	ldr	r2, [pc, #356]	; (80016a8 <HAL_DMA_IRQHandler+0x1c4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d036      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_DMA_IRQHandler+0x1c8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d031      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_DMA_IRQHandler+0x1cc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d02c      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_DMA_IRQHandler+0x1d0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d027      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a53      	ldr	r2, [pc, #332]	; (80016b8 <HAL_DMA_IRQHandler+0x1d4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d022      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a51      	ldr	r2, [pc, #324]	; (80016bc <HAL_DMA_IRQHandler+0x1d8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01d      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <HAL_DMA_IRQHandler+0x1dc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d018      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_DMA_IRQHandler+0x1e0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_DMA_IRQHandler+0x1e4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00e      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_DMA_IRQHandler+0x1e8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d009      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_DMA_IRQHandler+0x1ec>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d004      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xd2>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_DMA_IRQHandler+0x1f0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_DMA_IRQHandler+0xd6>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_DMA_IRQHandler+0xd8>
 80015ba:	2300      	movs	r3, #0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 842b 	beq.w	8001e18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2208      	movs	r2, #8
 80015cc:	409a      	lsls	r2, r3
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80a2 	beq.w	800171c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <HAL_DMA_IRQHandler+0x1b4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d04a      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2d      	ldr	r2, [pc, #180]	; (800169c <HAL_DMA_IRQHandler+0x1b8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d045      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <HAL_DMA_IRQHandler+0x1bc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d040      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <HAL_DMA_IRQHandler+0x1c0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d03b      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <HAL_DMA_IRQHandler+0x1c4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d036      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_DMA_IRQHandler+0x1c8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d031      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <HAL_DMA_IRQHandler+0x1cc>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02c      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <HAL_DMA_IRQHandler+0x1d0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d027      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_DMA_IRQHandler+0x1d4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d022      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a21      	ldr	r2, [pc, #132]	; (80016bc <HAL_DMA_IRQHandler+0x1d8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d01d      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <HAL_DMA_IRQHandler+0x1dc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d018      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <HAL_DMA_IRQHandler+0x1e0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_DMA_IRQHandler+0x1e4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00e      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_DMA_IRQHandler+0x1e8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_DMA_IRQHandler+0x1ec>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d004      	beq.n	8001678 <HAL_DMA_IRQHandler+0x194>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_DMA_IRQHandler+0x1f0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d12f      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x1f4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	e02e      	b.n	80016ec <HAL_DMA_IRQHandler+0x208>
 800168e:	bf00      	nop
 8001690:	24000410 	.word	0x24000410
 8001694:	1b4e81b5 	.word	0x1b4e81b5
 8001698:	40020010 	.word	0x40020010
 800169c:	40020028 	.word	0x40020028
 80016a0:	40020040 	.word	0x40020040
 80016a4:	40020058 	.word	0x40020058
 80016a8:	40020070 	.word	0x40020070
 80016ac:	40020088 	.word	0x40020088
 80016b0:	400200a0 	.word	0x400200a0
 80016b4:	400200b8 	.word	0x400200b8
 80016b8:	40020410 	.word	0x40020410
 80016bc:	40020428 	.word	0x40020428
 80016c0:	40020440 	.word	0x40020440
 80016c4:	40020458 	.word	0x40020458
 80016c8:	40020470 	.word	0x40020470
 80016cc:	40020488 	.word	0x40020488
 80016d0:	400204a0 	.word	0x400204a0
 80016d4:	400204b8 	.word	0x400204b8
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bf14      	ite	ne
 80016e6:	2301      	movne	r3, #1
 80016e8:	2300      	moveq	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d015      	beq.n	800171c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0204 	bic.w	r2, r2, #4
 80016fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2208      	movs	r2, #8
 800170a:	409a      	lsls	r2, r3
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06e      	beq.n	8001810 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_DMA_IRQHandler+0x3f8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04a      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_DMA_IRQHandler+0x3fc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d045      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a66      	ldr	r2, [pc, #408]	; (80018e4 <HAL_DMA_IRQHandler+0x400>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d040      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a64      	ldr	r2, [pc, #400]	; (80018e8 <HAL_DMA_IRQHandler+0x404>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d03b      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a63      	ldr	r2, [pc, #396]	; (80018ec <HAL_DMA_IRQHandler+0x408>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d036      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a61      	ldr	r2, [pc, #388]	; (80018f0 <HAL_DMA_IRQHandler+0x40c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d031      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a60      	ldr	r2, [pc, #384]	; (80018f4 <HAL_DMA_IRQHandler+0x410>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d02c      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a5e      	ldr	r2, [pc, #376]	; (80018f8 <HAL_DMA_IRQHandler+0x414>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d027      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <HAL_DMA_IRQHandler+0x418>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d022      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5b      	ldr	r2, [pc, #364]	; (8001900 <HAL_DMA_IRQHandler+0x41c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01d      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a5a      	ldr	r2, [pc, #360]	; (8001904 <HAL_DMA_IRQHandler+0x420>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d018      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_DMA_IRQHandler+0x424>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a57      	ldr	r2, [pc, #348]	; (800190c <HAL_DMA_IRQHandler+0x428>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00e      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a55      	ldr	r2, [pc, #340]	; (8001910 <HAL_DMA_IRQHandler+0x42c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d009      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a54      	ldr	r2, [pc, #336]	; (8001914 <HAL_DMA_IRQHandler+0x430>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d004      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2ee>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_DMA_IRQHandler+0x434>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10a      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x304>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e003      	b.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2201      	movs	r2, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f043 0202 	orr.w	r2, r3, #2
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2204      	movs	r2, #4
 800181a:	409a      	lsls	r2, r3
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 808f 	beq.w	8001944 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <HAL_DMA_IRQHandler+0x3f8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d04a      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_DMA_IRQHandler+0x3fc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d045      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <HAL_DMA_IRQHandler+0x400>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d040      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <HAL_DMA_IRQHandler+0x404>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d03b      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_DMA_IRQHandler+0x408>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d036      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_DMA_IRQHandler+0x40c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d031      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <HAL_DMA_IRQHandler+0x410>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d02c      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_DMA_IRQHandler+0x414>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d027      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_DMA_IRQHandler+0x418>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <HAL_DMA_IRQHandler+0x41c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01d      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_DMA_IRQHandler+0x420>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d018      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_DMA_IRQHandler+0x424>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_DMA_IRQHandler+0x428>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00e      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_DMA_IRQHandler+0x42c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d009      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_DMA_IRQHandler+0x430>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x3e2>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_DMA_IRQHandler+0x434>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12a      	bne.n	800191c <HAL_DMA_IRQHandler+0x438>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e023      	b.n	8001924 <HAL_DMA_IRQHandler+0x440>
 80018dc:	40020010 	.word	0x40020010
 80018e0:	40020028 	.word	0x40020028
 80018e4:	40020040 	.word	0x40020040
 80018e8:	40020058 	.word	0x40020058
 80018ec:	40020070 	.word	0x40020070
 80018f0:	40020088 	.word	0x40020088
 80018f4:	400200a0 	.word	0x400200a0
 80018f8:	400200b8 	.word	0x400200b8
 80018fc:	40020410 	.word	0x40020410
 8001900:	40020428 	.word	0x40020428
 8001904:	40020440 	.word	0x40020440
 8001908:	40020458 	.word	0x40020458
 800190c:	40020470 	.word	0x40020470
 8001910:	40020488 	.word	0x40020488
 8001914:	400204a0 	.word	0x400204a0
 8001918:	400204b8 	.word	0x400204b8
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00d      	beq.n	8001944 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2204      	movs	r2, #4
 8001932:	409a      	lsls	r2, r3
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f043 0204 	orr.w	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2210      	movs	r2, #16
 800194e:	409a      	lsls	r2, r3
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a6 	beq.w	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a85      	ldr	r2, [pc, #532]	; (8001b74 <HAL_DMA_IRQHandler+0x690>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d04a      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a83      	ldr	r2, [pc, #524]	; (8001b78 <HAL_DMA_IRQHandler+0x694>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d045      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a82      	ldr	r2, [pc, #520]	; (8001b7c <HAL_DMA_IRQHandler+0x698>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d040      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a80      	ldr	r2, [pc, #512]	; (8001b80 <HAL_DMA_IRQHandler+0x69c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d03b      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <HAL_DMA_IRQHandler+0x6a0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d036      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a7d      	ldr	r2, [pc, #500]	; (8001b88 <HAL_DMA_IRQHandler+0x6a4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d031      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7c      	ldr	r2, [pc, #496]	; (8001b8c <HAL_DMA_IRQHandler+0x6a8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d02c      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a7a      	ldr	r2, [pc, #488]	; (8001b90 <HAL_DMA_IRQHandler+0x6ac>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d027      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a79      	ldr	r2, [pc, #484]	; (8001b94 <HAL_DMA_IRQHandler+0x6b0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a77      	ldr	r2, [pc, #476]	; (8001b98 <HAL_DMA_IRQHandler+0x6b4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01d      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a76      	ldr	r2, [pc, #472]	; (8001b9c <HAL_DMA_IRQHandler+0x6b8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d018      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a74      	ldr	r2, [pc, #464]	; (8001ba0 <HAL_DMA_IRQHandler+0x6bc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a73      	ldr	r2, [pc, #460]	; (8001ba4 <HAL_DMA_IRQHandler+0x6c0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00e      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a71      	ldr	r2, [pc, #452]	; (8001ba8 <HAL_DMA_IRQHandler+0x6c4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d009      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a70      	ldr	r2, [pc, #448]	; (8001bac <HAL_DMA_IRQHandler+0x6c8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d004      	beq.n	80019fa <HAL_DMA_IRQHandler+0x516>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_DMA_IRQHandler+0x6cc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10a      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x52c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e009      	b.n	8001a24 <HAL_DMA_IRQHandler+0x540>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d03e      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	2210      	movs	r2, #16
 8001a32:	409a      	lsls	r2, r3
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d018      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d108      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d024      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
 8001a64:	e01f      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01b      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
 8001a76:	e016      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d107      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0208 	bic.w	r2, r2, #8
 8001a94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2220      	movs	r2, #32
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8110 	beq.w	8001cdc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_DMA_IRQHandler+0x690>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <HAL_DMA_IRQHandler+0x694>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HAL_DMA_IRQHandler+0x698>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_DMA_IRQHandler+0x69c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_DMA_IRQHandler+0x6a0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <HAL_DMA_IRQHandler+0x6a4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <HAL_DMA_IRQHandler+0x6a8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_DMA_IRQHandler+0x6ac>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_DMA_IRQHandler+0x6b0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_DMA_IRQHandler+0x6b4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_DMA_IRQHandler+0x6b8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <HAL_DMA_IRQHandler+0x6bc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_DMA_IRQHandler+0x6c0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_DMA_IRQHandler+0x6c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_DMA_IRQHandler+0x6c8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x678>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_DMA_IRQHandler+0x6cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d12b      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x6d0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e02a      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x6e4>
 8001b72:	bf00      	nop
 8001b74:	40020010 	.word	0x40020010
 8001b78:	40020028 	.word	0x40020028
 8001b7c:	40020040 	.word	0x40020040
 8001b80:	40020058 	.word	0x40020058
 8001b84:	40020070 	.word	0x40020070
 8001b88:	40020088 	.word	0x40020088
 8001b8c:	400200a0 	.word	0x400200a0
 8001b90:	400200b8 	.word	0x400200b8
 8001b94:	40020410 	.word	0x40020410
 8001b98:	40020428 	.word	0x40020428
 8001b9c:	40020440 	.word	0x40020440
 8001ba0:	40020458 	.word	0x40020458
 8001ba4:	40020470 	.word	0x40020470
 8001ba8:	40020488 	.word	0x40020488
 8001bac:	400204a0 	.word	0x400204a0
 8001bb0:	400204b8 	.word	0x400204b8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8087 	beq.w	8001cdc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d139      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0216 	bic.w	r2, r2, #22
 8001bf8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x736>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0208 	bic.w	r2, r2, #8
 8001c28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	223f      	movs	r2, #63	; 0x3f
 8001c34:	409a      	lsls	r2, r3
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 834a 	beq.w	80022e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
          }
          return;
 8001c5c:	e344      	b.n	80022e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d018      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d02c      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
 8001c8a:	e027      	b.n	8001cdc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d023      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
 8001c9c:	e01e      	b.n	8001cdc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10f      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0210 	bic.w	r2, r2, #16
 8001cba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8306 	beq.w	80022f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8088 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7a      	ldr	r2, [pc, #488]	; (8001eec <HAL_DMA_IRQHandler+0xa08>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d04a      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a79      	ldr	r2, [pc, #484]	; (8001ef0 <HAL_DMA_IRQHandler+0xa0c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d045      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_DMA_IRQHandler+0xa10>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d040      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a76      	ldr	r2, [pc, #472]	; (8001ef8 <HAL_DMA_IRQHandler+0xa14>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d03b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a74      	ldr	r2, [pc, #464]	; (8001efc <HAL_DMA_IRQHandler+0xa18>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d036      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a73      	ldr	r2, [pc, #460]	; (8001f00 <HAL_DMA_IRQHandler+0xa1c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d031      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a71      	ldr	r2, [pc, #452]	; (8001f04 <HAL_DMA_IRQHandler+0xa20>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02c      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a70      	ldr	r2, [pc, #448]	; (8001f08 <HAL_DMA_IRQHandler+0xa24>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d027      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_DMA_IRQHandler+0xa28>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d022      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6d      	ldr	r2, [pc, #436]	; (8001f10 <HAL_DMA_IRQHandler+0xa2c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01d      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6b      	ldr	r2, [pc, #428]	; (8001f14 <HAL_DMA_IRQHandler+0xa30>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d018      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_DMA_IRQHandler+0xa34>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a68      	ldr	r2, [pc, #416]	; (8001f1c <HAL_DMA_IRQHandler+0xa38>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a67      	ldr	r2, [pc, #412]	; (8001f20 <HAL_DMA_IRQHandler+0xa3c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a65      	ldr	r2, [pc, #404]	; (8001f24 <HAL_DMA_IRQHandler+0xa40>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x8b8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a64      	ldr	r2, [pc, #400]	; (8001f28 <HAL_DMA_IRQHandler+0xa44>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d108      	bne.n	8001dae <HAL_DMA_IRQHandler+0x8ca>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e007      	b.n	8001dbe <HAL_DMA_IRQHandler+0x8da>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d307      	bcc.n	8001dda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f2      	bne.n	8001dbe <HAL_DMA_IRQHandler+0x8da>
 8001dd8:	e000      	b.n	8001ddc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001dda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001df2:	e003      	b.n	8001dfc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8272 	beq.w	80022f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
 8001e16:	e26c      	b.n	80022f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_DMA_IRQHandler+0xa48>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d022      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <HAL_DMA_IRQHandler+0xa4c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d01d      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <HAL_DMA_IRQHandler+0xa50>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d018      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <HAL_DMA_IRQHandler+0xa54>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3d      	ldr	r2, [pc, #244]	; (8001f3c <HAL_DMA_IRQHandler+0xa58>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_DMA_IRQHandler+0xa5c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a3a      	ldr	r2, [pc, #232]	; (8001f44 <HAL_DMA_IRQHandler+0xa60>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x984>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a39      	ldr	r2, [pc, #228]	; (8001f48 <HAL_DMA_IRQHandler+0xa64>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x988>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_IRQHandler+0x98a>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 823f 	beq.w	80022f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2204      	movs	r2, #4
 8001e86:	409a      	lsls	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80cd 	beq.w	800202c <HAL_DMA_IRQHandler+0xb48>
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80c7 	beq.w	800202c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d049      	beq.n	8001f4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8210 	beq.w	80022ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ed4:	e20a      	b.n	80022ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8206 	beq.w	80022ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ee8:	e200      	b.n	80022ec <HAL_DMA_IRQHandler+0xe08>
 8001eea:	bf00      	nop
 8001eec:	40020010 	.word	0x40020010
 8001ef0:	40020028 	.word	0x40020028
 8001ef4:	40020040 	.word	0x40020040
 8001ef8:	40020058 	.word	0x40020058
 8001efc:	40020070 	.word	0x40020070
 8001f00:	40020088 	.word	0x40020088
 8001f04:	400200a0 	.word	0x400200a0
 8001f08:	400200b8 	.word	0x400200b8
 8001f0c:	40020410 	.word	0x40020410
 8001f10:	40020428 	.word	0x40020428
 8001f14:	40020440 	.word	0x40020440
 8001f18:	40020458 	.word	0x40020458
 8001f1c:	40020470 	.word	0x40020470
 8001f20:	40020488 	.word	0x40020488
 8001f24:	400204a0 	.word	0x400204a0
 8001f28:	400204b8 	.word	0x400204b8
 8001f2c:	58025408 	.word	0x58025408
 8001f30:	5802541c 	.word	0x5802541c
 8001f34:	58025430 	.word	0x58025430
 8001f38:	58025444 	.word	0x58025444
 8001f3c:	58025458 	.word	0x58025458
 8001f40:	5802546c 	.word	0x5802546c
 8001f44:	58025480 	.word	0x58025480
 8001f48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d160      	bne.n	8002018 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a8c      	ldr	r2, [pc, #560]	; (800218c <HAL_DMA_IRQHandler+0xca8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a8a      	ldr	r2, [pc, #552]	; (8002190 <HAL_DMA_IRQHandler+0xcac>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a89      	ldr	r2, [pc, #548]	; (8002194 <HAL_DMA_IRQHandler+0xcb0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a87      	ldr	r2, [pc, #540]	; (8002198 <HAL_DMA_IRQHandler+0xcb4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a86      	ldr	r2, [pc, #536]	; (800219c <HAL_DMA_IRQHandler+0xcb8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a84      	ldr	r2, [pc, #528]	; (80021a0 <HAL_DMA_IRQHandler+0xcbc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a83      	ldr	r2, [pc, #524]	; (80021a4 <HAL_DMA_IRQHandler+0xcc0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a81      	ldr	r2, [pc, #516]	; (80021a8 <HAL_DMA_IRQHandler+0xcc4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a80      	ldr	r2, [pc, #512]	; (80021ac <HAL_DMA_IRQHandler+0xcc8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <HAL_DMA_IRQHandler+0xccc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7d      	ldr	r2, [pc, #500]	; (80021b4 <HAL_DMA_IRQHandler+0xcd0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7b      	ldr	r2, [pc, #492]	; (80021b8 <HAL_DMA_IRQHandler+0xcd4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <HAL_DMA_IRQHandler+0xcd8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a78      	ldr	r2, [pc, #480]	; (80021c0 <HAL_DMA_IRQHandler+0xcdc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a77      	ldr	r2, [pc, #476]	; (80021c4 <HAL_DMA_IRQHandler+0xce0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xb12>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_DMA_IRQHandler+0xce4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0xb24>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e007      	b.n	8002018 <HAL_DMA_IRQHandler+0xb34>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0204 	bic.w	r2, r2, #4
 8002016:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8165 	beq.w	80022ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800202a:	e15f      	b.n	80022ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2202      	movs	r2, #2
 8002036:	409a      	lsls	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80c5 	beq.w	80021cc <HAL_DMA_IRQHandler+0xce8>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80bf 	beq.w	80021cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2202      	movs	r2, #2
 8002058:	409a      	lsls	r2, r3
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 813a 	beq.w	80022f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002084:	e134      	b.n	80022f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8130 	beq.w	80022f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002098:	e12a      	b.n	80022f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d168      	bne.n	8002176 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a38      	ldr	r2, [pc, #224]	; (800218c <HAL_DMA_IRQHandler+0xca8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d04a      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a37      	ldr	r2, [pc, #220]	; (8002190 <HAL_DMA_IRQHandler+0xcac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d045      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a35      	ldr	r2, [pc, #212]	; (8002194 <HAL_DMA_IRQHandler+0xcb0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d040      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <HAL_DMA_IRQHandler+0xcb4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d03b      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_DMA_IRQHandler+0xcb8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d036      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_DMA_IRQHandler+0xcbc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d031      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_DMA_IRQHandler+0xcc0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02c      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <HAL_DMA_IRQHandler+0xcc4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d027      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <HAL_DMA_IRQHandler+0xcc8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d022      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_DMA_IRQHandler+0xccc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d01d      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <HAL_DMA_IRQHandler+0xcd0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d018      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <HAL_DMA_IRQHandler+0xcd4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_DMA_IRQHandler+0xcd8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00e      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <HAL_DMA_IRQHandler+0xcdc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <HAL_DMA_IRQHandler+0xce0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc60>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_DMA_IRQHandler+0xce4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d108      	bne.n	8002156 <HAL_DMA_IRQHandler+0xc72>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0214 	bic.w	r2, r2, #20
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_DMA_IRQHandler+0xc82>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 020a 	bic.w	r2, r2, #10
 8002164:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80b8 	beq.w	80022f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002188:	e0b2      	b.n	80022f0 <HAL_DMA_IRQHandler+0xe0c>
 800218a:	bf00      	nop
 800218c:	40020010 	.word	0x40020010
 8002190:	40020028 	.word	0x40020028
 8002194:	40020040 	.word	0x40020040
 8002198:	40020058 	.word	0x40020058
 800219c:	40020070 	.word	0x40020070
 80021a0:	40020088 	.word	0x40020088
 80021a4:	400200a0 	.word	0x400200a0
 80021a8:	400200b8 	.word	0x400200b8
 80021ac:	40020410 	.word	0x40020410
 80021b0:	40020428 	.word	0x40020428
 80021b4:	40020440 	.word	0x40020440
 80021b8:	40020458 	.word	0x40020458
 80021bc:	40020470 	.word	0x40020470
 80021c0:	40020488 	.word	0x40020488
 80021c4:	400204a0 	.word	0x400204a0
 80021c8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2208      	movs	r2, #8
 80021d6:	409a      	lsls	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8088 	beq.w	80022f2 <HAL_DMA_IRQHandler+0xe0e>
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8082 	beq.w	80022f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a41      	ldr	r2, [pc, #260]	; (80022f8 <HAL_DMA_IRQHandler+0xe14>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04a      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <HAL_DMA_IRQHandler+0xe18>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d045      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <HAL_DMA_IRQHandler+0xe1c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d040      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a3c      	ldr	r2, [pc, #240]	; (8002304 <HAL_DMA_IRQHandler+0xe20>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d03b      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_DMA_IRQHandler+0xe24>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d036      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a39      	ldr	r2, [pc, #228]	; (800230c <HAL_DMA_IRQHandler+0xe28>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a38      	ldr	r2, [pc, #224]	; (8002310 <HAL_DMA_IRQHandler+0xe2c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d02c      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a36      	ldr	r2, [pc, #216]	; (8002314 <HAL_DMA_IRQHandler+0xe30>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d027      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a35      	ldr	r2, [pc, #212]	; (8002318 <HAL_DMA_IRQHandler+0xe34>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d022      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a33      	ldr	r2, [pc, #204]	; (800231c <HAL_DMA_IRQHandler+0xe38>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01d      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a32      	ldr	r2, [pc, #200]	; (8002320 <HAL_DMA_IRQHandler+0xe3c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d018      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a30      	ldr	r2, [pc, #192]	; (8002324 <HAL_DMA_IRQHandler+0xe40>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <HAL_DMA_IRQHandler+0xe44>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00e      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2d      	ldr	r2, [pc, #180]	; (800232c <HAL_DMA_IRQHandler+0xe48>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <HAL_DMA_IRQHandler+0xe4c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_DMA_IRQHandler+0xdaa>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_DMA_IRQHandler+0xe50>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <HAL_DMA_IRQHandler+0xdbc>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 021c 	bic.w	r2, r2, #28
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <HAL_DMA_IRQHandler+0xdcc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 020e 	bic.w	r2, r2, #14
 80022ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e004      	b.n	80022f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80022e8:	bf00      	nop
 80022ea:	e002      	b.n	80022f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022ec:	bf00      	nop
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40020010 	.word	0x40020010
 80022fc:	40020028 	.word	0x40020028
 8002300:	40020040 	.word	0x40020040
 8002304:	40020058 	.word	0x40020058
 8002308:	40020070 	.word	0x40020070
 800230c:	40020088 	.word	0x40020088
 8002310:	400200a0 	.word	0x400200a0
 8002314:	400200b8 	.word	0x400200b8
 8002318:	40020410 	.word	0x40020410
 800231c:	40020428 	.word	0x40020428
 8002320:	40020440 	.word	0x40020440
 8002324:	40020458 	.word	0x40020458
 8002328:	40020470 	.word	0x40020470
 800232c:	40020488 	.word	0x40020488
 8002330:	400204a0 	.word	0x400204a0
 8002334:	400204b8 	.word	0x400204b8

08002338 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a84      	ldr	r2, [pc, #528]	; (8002580 <DMA_SetConfig+0x230>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d072      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a82      	ldr	r2, [pc, #520]	; (8002584 <DMA_SetConfig+0x234>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d06d      	beq.n	800245a <DMA_SetConfig+0x10a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a81      	ldr	r2, [pc, #516]	; (8002588 <DMA_SetConfig+0x238>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d068      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7f      	ldr	r2, [pc, #508]	; (800258c <DMA_SetConfig+0x23c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d063      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7e      	ldr	r2, [pc, #504]	; (8002590 <DMA_SetConfig+0x240>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d05e      	beq.n	800245a <DMA_SetConfig+0x10a>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7c      	ldr	r2, [pc, #496]	; (8002594 <DMA_SetConfig+0x244>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d059      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7b      	ldr	r2, [pc, #492]	; (8002598 <DMA_SetConfig+0x248>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d054      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a79      	ldr	r2, [pc, #484]	; (800259c <DMA_SetConfig+0x24c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04f      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a78      	ldr	r2, [pc, #480]	; (80025a0 <DMA_SetConfig+0x250>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d04a      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a76      	ldr	r2, [pc, #472]	; (80025a4 <DMA_SetConfig+0x254>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d045      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <DMA_SetConfig+0x258>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d040      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a73      	ldr	r2, [pc, #460]	; (80025ac <DMA_SetConfig+0x25c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d03b      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a72      	ldr	r2, [pc, #456]	; (80025b0 <DMA_SetConfig+0x260>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d036      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a70      	ldr	r2, [pc, #448]	; (80025b4 <DMA_SetConfig+0x264>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d031      	beq.n	800245a <DMA_SetConfig+0x10a>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <DMA_SetConfig+0x268>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d02c      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <DMA_SetConfig+0x26c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d027      	beq.n	800245a <DMA_SetConfig+0x10a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <DMA_SetConfig+0x270>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d022      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6a      	ldr	r2, [pc, #424]	; (80025c4 <DMA_SetConfig+0x274>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01d      	beq.n	800245a <DMA_SetConfig+0x10a>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a69      	ldr	r2, [pc, #420]	; (80025c8 <DMA_SetConfig+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d018      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a67      	ldr	r2, [pc, #412]	; (80025cc <DMA_SetConfig+0x27c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a66      	ldr	r2, [pc, #408]	; (80025d0 <DMA_SetConfig+0x280>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00e      	beq.n	800245a <DMA_SetConfig+0x10a>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a64      	ldr	r2, [pc, #400]	; (80025d4 <DMA_SetConfig+0x284>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d009      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a63      	ldr	r2, [pc, #396]	; (80025d8 <DMA_SetConfig+0x288>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <DMA_SetConfig+0x10a>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a61      	ldr	r2, [pc, #388]	; (80025dc <DMA_SetConfig+0x28c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <DMA_SetConfig+0x10e>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <DMA_SetConfig+0x110>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800246c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800247e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3e      	ldr	r2, [pc, #248]	; (8002580 <DMA_SetConfig+0x230>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d04a      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <DMA_SetConfig+0x234>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d045      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <DMA_SetConfig+0x238>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d040      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <DMA_SetConfig+0x23c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d03b      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a38      	ldr	r2, [pc, #224]	; (8002590 <DMA_SetConfig+0x240>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d036      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a37      	ldr	r2, [pc, #220]	; (8002594 <DMA_SetConfig+0x244>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d031      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a35      	ldr	r2, [pc, #212]	; (8002598 <DMA_SetConfig+0x248>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02c      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a34      	ldr	r2, [pc, #208]	; (800259c <DMA_SetConfig+0x24c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d027      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <DMA_SetConfig+0x250>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <DMA_SetConfig+0x254>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01d      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <DMA_SetConfig+0x258>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <DMA_SetConfig+0x25c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <DMA_SetConfig+0x260>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2b      	ldr	r2, [pc, #172]	; (80025b4 <DMA_SetConfig+0x264>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a29      	ldr	r2, [pc, #164]	; (80025b8 <DMA_SetConfig+0x268>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <DMA_SetConfig+0x1d0>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a28      	ldr	r2, [pc, #160]	; (80025bc <DMA_SetConfig+0x26c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <DMA_SetConfig+0x1d4>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <DMA_SetConfig+0x1d6>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d05a      	beq.n	80025e0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	223f      	movs	r2, #63	; 0x3f
 8002534:	409a      	lsls	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002548:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d108      	bne.n	800256c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800256a:	e087      	b.n	800267c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
}
 800257c:	e07e      	b.n	800267c <DMA_SetConfig+0x32c>
 800257e:	bf00      	nop
 8002580:	40020010 	.word	0x40020010
 8002584:	40020028 	.word	0x40020028
 8002588:	40020040 	.word	0x40020040
 800258c:	40020058 	.word	0x40020058
 8002590:	40020070 	.word	0x40020070
 8002594:	40020088 	.word	0x40020088
 8002598:	400200a0 	.word	0x400200a0
 800259c:	400200b8 	.word	0x400200b8
 80025a0:	40020410 	.word	0x40020410
 80025a4:	40020428 	.word	0x40020428
 80025a8:	40020440 	.word	0x40020440
 80025ac:	40020458 	.word	0x40020458
 80025b0:	40020470 	.word	0x40020470
 80025b4:	40020488 	.word	0x40020488
 80025b8:	400204a0 	.word	0x400204a0
 80025bc:	400204b8 	.word	0x400204b8
 80025c0:	58025408 	.word	0x58025408
 80025c4:	5802541c 	.word	0x5802541c
 80025c8:	58025430 	.word	0x58025430
 80025cc:	58025444 	.word	0x58025444
 80025d0:	58025458 	.word	0x58025458
 80025d4:	5802546c 	.word	0x5802546c
 80025d8:	58025480 	.word	0x58025480
 80025dc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <DMA_SetConfig+0x338>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a27      	ldr	r2, [pc, #156]	; (800268c <DMA_SetConfig+0x33c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01d      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <DMA_SetConfig+0x340>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <DMA_SetConfig+0x344>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <DMA_SetConfig+0x348>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <DMA_SetConfig+0x34c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <DMA_SetConfig+0x350>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <DMA_SetConfig+0x2e0>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <DMA_SetConfig+0x354>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <DMA_SetConfig+0x2e4>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <DMA_SetConfig+0x2e6>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d108      	bne.n	800266c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	60da      	str	r2, [r3, #12]
}
 800266a:	e007      	b.n	800267c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	58025408 	.word	0x58025408
 800268c:	5802541c 	.word	0x5802541c
 8002690:	58025430 	.word	0x58025430
 8002694:	58025444 	.word	0x58025444
 8002698:	58025458 	.word	0x58025458
 800269c:	5802546c 	.word	0x5802546c
 80026a0:	58025480 	.word	0x58025480
 80026a4:	58025494 	.word	0x58025494

080026a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a42      	ldr	r2, [pc, #264]	; (80027c0 <DMA_CalcBaseAndBitshift+0x118>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d04a      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a41      	ldr	r2, [pc, #260]	; (80027c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d045      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <DMA_CalcBaseAndBitshift+0x120>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d040      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a3e      	ldr	r2, [pc, #248]	; (80027cc <DMA_CalcBaseAndBitshift+0x124>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <DMA_CalcBaseAndBitshift+0x128>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d036      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d031      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <DMA_CalcBaseAndBitshift+0x130>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02c      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a38      	ldr	r2, [pc, #224]	; (80027dc <DMA_CalcBaseAndBitshift+0x134>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d027      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a36      	ldr	r2, [pc, #216]	; (80027e0 <DMA_CalcBaseAndBitshift+0x138>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a35      	ldr	r2, [pc, #212]	; (80027e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a33      	ldr	r2, [pc, #204]	; (80027e8 <DMA_CalcBaseAndBitshift+0x140>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a32      	ldr	r2, [pc, #200]	; (80027ec <DMA_CalcBaseAndBitshift+0x144>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <DMA_CalcBaseAndBitshift+0x148>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <DMA_CalcBaseAndBitshift+0x150>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <DMA_CalcBaseAndBitshift+0xa8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <DMA_CalcBaseAndBitshift+0x154>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <DMA_CalcBaseAndBitshift+0xac>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <DMA_CalcBaseAndBitshift+0xae>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d024      	beq.n	80027a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3b10      	subs	r3, #16
 8002762:	4a27      	ldr	r2, [pc, #156]	; (8002800 <DMA_CalcBaseAndBitshift+0x158>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	4a24      	ldr	r2, [pc, #144]	; (8002804 <DMA_CalcBaseAndBitshift+0x15c>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d908      	bls.n	8002794 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <DMA_CalcBaseAndBitshift+0x160>)
 800278a:	4013      	ands	r3, r2
 800278c:	1d1a      	adds	r2, r3, #4
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58
 8002792:	e00d      	b.n	80027b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <DMA_CalcBaseAndBitshift+0x160>)
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
 80027a2:	e005      	b.n	80027b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40020010 	.word	0x40020010
 80027c4:	40020028 	.word	0x40020028
 80027c8:	40020040 	.word	0x40020040
 80027cc:	40020058 	.word	0x40020058
 80027d0:	40020070 	.word	0x40020070
 80027d4:	40020088 	.word	0x40020088
 80027d8:	400200a0 	.word	0x400200a0
 80027dc:	400200b8 	.word	0x400200b8
 80027e0:	40020410 	.word	0x40020410
 80027e4:	40020428 	.word	0x40020428
 80027e8:	40020440 	.word	0x40020440
 80027ec:	40020458 	.word	0x40020458
 80027f0:	40020470 	.word	0x40020470
 80027f4:	40020488 	.word	0x40020488
 80027f8:	400204a0 	.word	0x400204a0
 80027fc:	400204b8 	.word	0x400204b8
 8002800:	aaaaaaab 	.word	0xaaaaaaab
 8002804:	08009680 	.word	0x08009680
 8002808:	fffffc00 	.word	0xfffffc00

0800280c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d120      	bne.n	8002862 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	2b03      	cmp	r3, #3
 8002826:	d858      	bhi.n	80028da <DMA_CheckFifoParam+0xce>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x24>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002841 	.word	0x08002841
 8002834:	08002853 	.word	0x08002853
 8002838:	08002841 	.word	0x08002841
 800283c:	080028db 	.word	0x080028db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d048      	beq.n	80028de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002850:	e045      	b.n	80028de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285a:	d142      	bne.n	80028e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002860:	e03f      	b.n	80028e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d123      	bne.n	80028b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	2b03      	cmp	r3, #3
 8002872:	d838      	bhi.n	80028e6 <DMA_CheckFifoParam+0xda>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x70>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002893 	.word	0x08002893
 8002884:	0800288d 	.word	0x0800288d
 8002888:	080028a5 	.word	0x080028a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
        break;
 8002890:	e030      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d025      	beq.n	80028ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028a2:	e022      	b.n	80028ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028b2:	e01c      	b.n	80028ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d902      	bls.n	80028c2 <DMA_CheckFifoParam+0xb6>
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d003      	beq.n	80028c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80028c0:	e018      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
        break;
 80028c6:	e015      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
    break;
 80028d8:	e00b      	b.n	80028f2 <DMA_CheckFifoParam+0xe6>
        break;
 80028da:	bf00      	nop
 80028dc:	e00a      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        break;
 80028de:	bf00      	nop
 80028e0:	e008      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        break;
 80028e2:	bf00      	nop
 80028e4:	e006      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        break;
 80028e6:	bf00      	nop
 80028e8:	e004      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        break;
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
        break;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
    break;
 80028f2:	bf00      	nop
    }
  }

  return status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop

08002904 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a36      	ldr	r2, [pc, #216]	; (80029fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01d      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a30      	ldr	r2, [pc, #192]	; (8002a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01a      	beq.n	80029a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3b08      	subs	r3, #8
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002990:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80029a0:	e024      	b.n	80029ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3b10      	subs	r3, #16
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d806      	bhi.n	80029ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d902      	bls.n	80029ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3308      	adds	r3, #8
 80029c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80029dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	58025408 	.word	0x58025408
 80029fc:	5802541c 	.word	0x5802541c
 8002a00:	58025430 	.word	0x58025430
 8002a04:	58025444 	.word	0x58025444
 8002a08:	58025458 	.word	0x58025458
 8002a0c:	5802546c 	.word	0x5802546c
 8002a10:	58025480 	.word	0x58025480
 8002a14:	58025494 	.word	0x58025494
 8002a18:	cccccccd 	.word	0xcccccccd
 8002a1c:	16009600 	.word	0x16009600
 8002a20:	58025880 	.word	0x58025880
 8002a24:	aaaaaaab 	.word	0xaaaaaaab
 8002a28:	400204b8 	.word	0x400204b8
 8002a2c:	4002040f 	.word	0x4002040f
 8002a30:	10008200 	.word	0x10008200
 8002a34:	40020880 	.word	0x40020880

08002a38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d04a      	beq.n	8002ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d847      	bhi.n	8002ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01d      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a21      	ldr	r2, [pc, #132]	; (8002afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002ac0:	671a      	str	r2, [r3, #112]	; 0x70
 8002ac2:	e009      	b.n	8002ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002ad6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	58025408 	.word	0x58025408
 8002af4:	5802541c 	.word	0x5802541c
 8002af8:	58025430 	.word	0x58025430
 8002afc:	58025444 	.word	0x58025444
 8002b00:	58025458 	.word	0x58025458
 8002b04:	5802546c 	.word	0x5802546c
 8002b08:	58025480 	.word	0x58025480
 8002b0c:	58025494 	.word	0x58025494
 8002b10:	1600963f 	.word	0x1600963f
 8002b14:	58025940 	.word	0x58025940
 8002b18:	1000823f 	.word	0x1000823f
 8002b1c:	40020940 	.word	0x40020940

08002b20 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7a1b      	ldrb	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d155      	bne.n	8002be6 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d049      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a49      	ldr	r2, [pc, #292]	; (8002c70 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d044      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a48      	ldr	r2, [pc, #288]	; (8002c74 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d03f      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03a      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d035      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a43      	ldr	r2, [pc, #268]	; (8002c80 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d030      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a42      	ldr	r2, [pc, #264]	; (8002c84 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02b      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d026      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d021      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3d      	ldr	r2, [pc, #244]	; (8002c90 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01c      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d017      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d012      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00d      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d008      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a36      	ldr	r2, [pc, #216]	; (8002ca4 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d131      	bne.n	8002c56 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e02f      	b.n	8002c60 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c12:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002c16:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	061a      	lsls	r2, r3, #24
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	04db      	lsls	r3, r3, #19
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	7a1b      	ldrb	r3, [r3, #8]
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7a5b      	ldrb	r3, [r3, #9]
 8002c3e:	025b      	lsls	r3, r3, #9
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e004      	b.n	8002c60 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40020010 	.word	0x40020010
 8002c70:	40020028 	.word	0x40020028
 8002c74:	40020040 	.word	0x40020040
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	40020070 	.word	0x40020070
 8002c80:	40020088 	.word	0x40020088
 8002c84:	400200a0 	.word	0x400200a0
 8002c88:	400200b8 	.word	0x400200b8
 8002c8c:	40020410 	.word	0x40020410
 8002c90:	40020428 	.word	0x40020428
 8002c94:	40020440 	.word	0x40020440
 8002c98:	40020458 	.word	0x40020458
 8002c9c:	40020470 	.word	0x40020470
 8002ca0:	40020488 	.word	0x40020488
 8002ca4:	400204a0 	.word	0x400204a0
 8002ca8:	400204b8 	.word	0x400204b8

08002cac <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01a      	beq.n	8002cfa <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d022      	beq.n	8002d48 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01a      	beq.n	8002d48 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d5e:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <HAL_GPIO_Init+0x228>)
 8002d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d62:	e18c      	b.n	800307e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 817e 	beq.w	8003078 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d005      	beq.n	8002d94 <HAL_GPIO_Init+0x44>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d130      	bne.n	8002df6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dca:	2201      	movs	r2, #1
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0201 	and.w	r2, r3, #1
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d017      	beq.n	8002e32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d123      	bne.n	8002e86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80d8 	beq.w	8003078 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_GPIO_Init+0x22c>)
 8002eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ece:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_GPIO_Init+0x22c>)
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ed8:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_GPIO_Init+0x22c>)
 8002eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee6:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_GPIO_Init+0x230>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_GPIO_Init+0x234>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d04a      	beq.n	8002fa8 <HAL_GPIO_Init+0x258>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_GPIO_Init+0x238>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02b      	beq.n	8002f72 <HAL_GPIO_Init+0x222>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <HAL_GPIO_Init+0x23c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d025      	beq.n	8002f6e <HAL_GPIO_Init+0x21e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_GPIO_Init+0x240>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <HAL_GPIO_Init+0x21a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_GPIO_Init+0x244>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0x216>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_GPIO_Init+0x248>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x212>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_GPIO_Init+0x24c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <HAL_GPIO_Init+0x250>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x20a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_GPIO_Init+0x254>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x206>
 8002f52:	2309      	movs	r3, #9
 8002f54:	e029      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f56:	230a      	movs	r3, #10
 8002f58:	e027      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e025      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e023      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e021      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e01f      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e01d      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e01b      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e019      	b.n	8002faa <HAL_GPIO_Init+0x25a>
 8002f76:	bf00      	nop
 8002f78:	58000080 	.word	0x58000080
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58000400 	.word	0x58000400
 8002f84:	58020000 	.word	0x58020000
 8002f88:	58020400 	.word	0x58020400
 8002f8c:	58020800 	.word	0x58020800
 8002f90:	58020c00 	.word	0x58020c00
 8002f94:	58021000 	.word	0x58021000
 8002f98:	58021400 	.word	0x58021400
 8002f9c:	58021800 	.word	0x58021800
 8002fa0:	58021c00 	.word	0x58021c00
 8002fa4:	58022400 	.word	0x58022400
 8002fa8:	2300      	movs	r3, #0
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f002 0203 	and.w	r2, r2, #3
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fba:	4938      	ldr	r1, [pc, #224]	; (800309c <HAL_GPIO_Init+0x34c>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800301c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f ae6b 	bne.w	8002d64 <HAL_GPIO_Init+0x14>
  }
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	3724      	adds	r7, #36	; 0x24
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	58000400 	.word	0x58000400

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030dc:	4b29      	ldr	r3, [pc, #164]	; (8003184 <HAL_PWREx_ConfigSupply+0xb0>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d00a      	beq.n	80030fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030e8:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d001      	beq.n	80030fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03f      	b.n	800317a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e03d      	b.n	800317a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_PWREx_ConfigSupply+0xb0>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003106:	491f      	ldr	r1, [pc, #124]	; (8003184 <HAL_PWREx_ConfigSupply+0xb0>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800310e:	f7fd fa1f 	bl	8000550 <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003114:	e009      	b.n	800312a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003116:	f7fd fa1b 	bl	8000550 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003124:	d901      	bls.n	800312a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e027      	b.n	800317a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_PWREx_ConfigSupply+0xb0>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	d1ee      	bne.n	8003116 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b1e      	cmp	r3, #30
 800313c:	d008      	beq.n	8003150 <HAL_PWREx_ConfigSupply+0x7c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b2e      	cmp	r3, #46	; 0x2e
 8003142:	d005      	beq.n	8003150 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b1d      	cmp	r3, #29
 8003148:	d002      	beq.n	8003150 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b2d      	cmp	r3, #45	; 0x2d
 800314e:	d113      	bne.n	8003178 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003150:	f7fd f9fe 	bl	8000550 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003156:	e009      	b.n	800316c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003158:	f7fd f9fa 	bl	8000550 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003166:	d901      	bls.n	800316c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e006      	b.n	800317a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_PWREx_ConfigSupply+0xb0>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0311 	and.w	r3, r3, #17
 8003174:	2b11      	cmp	r3, #17
 8003176:	d1ef      	bne.n	8003158 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	58024800 	.word	0x58024800

08003188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e397      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a8:	4b9e      	ldr	r3, [pc, #632]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b2:	4b9c      	ldr	r3, [pc, #624]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d007      	beq.n	80031ce <HAL_RCC_OscConfig+0x46>
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	2b18      	cmp	r3, #24
 80031c2:	d110      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	4b95      	ldr	r3, [pc, #596]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x12c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e371      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x76>
 80031f0:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a8b      	ldr	r2, [pc, #556]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e02e      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b87      	ldr	r3, [pc, #540]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a86      	ldr	r2, [pc, #536]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b84      	ldr	r3, [pc, #528]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xbc>
 800322a:	4b7e      	ldr	r3, [pc, #504]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7d      	ldr	r2, [pc, #500]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b7b      	ldr	r3, [pc, #492]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7a      	ldr	r2, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003244:	4b77      	ldr	r3, [pc, #476]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a76      	ldr	r2, [pc, #472]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a73      	ldr	r2, [pc, #460]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd f974 	bl	8000550 <HAL_GetTick>
 8003268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fd f970 	bl	8000550 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e325      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327e:	4b69      	ldr	r3, [pc, #420]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xe4>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd f960 	bl	8000550 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fd f95c 	bl	8000550 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e311      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x10c>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808a 	beq.w	80033d8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c4:	4b57      	ldr	r3, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032ce:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_RCC_OscConfig+0x162>
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b18      	cmp	r3, #24
 80032de:	d137      	bne.n	8003350 <HAL_RCC_OscConfig+0x1c8>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d132      	bne.n	8003350 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x17a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e2e3      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003302:	4b48      	ldr	r3, [pc, #288]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0219 	bic.w	r2, r3, #25
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4945      	ldr	r1, [pc, #276]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003314:	f7fd f91c 	bl	8000550 <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331c:	f7fd f918 	bl	8000550 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e2cd      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	4936      	ldr	r1, [pc, #216]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334e:	e043      	b.n	80033d8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d026      	beq.n	80033a6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 0219 	bic.w	r2, r3, #25
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	492f      	ldr	r1, [pc, #188]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fd f8f1 	bl	8000550 <HAL_GetTick>
 800336e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003372:	f7fd f8ed 	bl	8000550 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e2a2      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	4921      	ldr	r1, [pc, #132]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	e018      	b.n	80033d8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fd f8cd 	bl	8000550 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fd f8c9 	bl	8000550 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e27e      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d06d      	beq.n	80034c0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d007      	beq.n	800340a <HAL_RCC_OscConfig+0x282>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b18      	cmp	r3, #24
 80033fe:	d11e      	bne.n	800343e <HAL_RCC_OscConfig+0x2b6>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d119      	bne.n	800343e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_OscConfig+0x29c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_RCC_OscConfig+0x2a0>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d004      	beq.n	8003428 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e253      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
 8003422:	bf00      	nop
 8003424:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003428:	4ba3      	ldr	r3, [pc, #652]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	49a0      	ldr	r1, [pc, #640]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003438:	4313      	orrs	r3, r2
 800343a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800343c:	e040      	b.n	80034c0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d023      	beq.n	800348e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003446:	4b9c      	ldr	r3, [pc, #624]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a9b      	ldr	r2, [pc, #620]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003452:	f7fd f87d 	bl	8000550 <HAL_GetTick>
 8003456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800345a:	f7fd f879 	bl	8000550 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e22e      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800346c:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003478:	4b8f      	ldr	r3, [pc, #572]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	498c      	ldr	r1, [pc, #560]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003488:	4313      	orrs	r3, r2
 800348a:	60cb      	str	r3, [r1, #12]
 800348c:	e018      	b.n	80034c0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800348e:	4b8a      	ldr	r3, [pc, #552]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a89      	ldr	r2, [pc, #548]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd f859 	bl	8000550 <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034a2:	f7fd f855 	bl	8000550 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e20a      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034b4:	4b80      	ldr	r3, [pc, #512]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d036      	beq.n	800353a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d019      	beq.n	8003508 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d4:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	4a77      	ldr	r2, [pc, #476]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fd f836 	bl	8000550 <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fd f832 	bl	8000550 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1e7      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034fa:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x360>
 8003506:	e018      	b.n	800353a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003508:	4b6b      	ldr	r3, [pc, #428]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	4a6a      	ldr	r2, [pc, #424]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fd f81c 	bl	8000550 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351c:	f7fd f818 	bl	8000550 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1cd      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800352e:	4b62      	ldr	r3, [pc, #392]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d036      	beq.n	80035b4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d019      	beq.n	8003582 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800354e:	4b5a      	ldr	r3, [pc, #360]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a59      	ldr	r2, [pc, #356]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003558:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800355a:	f7fc fff9 	bl	8000550 <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003562:	f7fc fff5 	bl	8000550 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1aa      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x3da>
 8003580:	e018      	b.n	80035b4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003582:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a4c      	ldr	r2, [pc, #304]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800358c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800358e:	f7fc ffdf 	bl	8000550 <HAL_GetTick>
 8003592:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003596:	f7fc ffdb 	bl	8000550 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e190      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035a8:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8085 	beq.w	80036cc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035c2:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <HAL_RCC_OscConfig+0x534>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3d      	ldr	r2, [pc, #244]	; (80036bc <HAL_RCC_OscConfig+0x534>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ce:	f7fc ffbf 	bl	8000550 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fc ffbb 	bl	8000550 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e170      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCC_OscConfig+0x534>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x482>
 80035fc:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
 8003608:	e02d      	b.n	8003666 <HAL_RCC_OscConfig+0x4de>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x4a4>
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	e01c      	b.n	8003666 <HAL_RCC_OscConfig+0x4de>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b05      	cmp	r3, #5
 8003632:	d10c      	bne.n	800364e <HAL_RCC_OscConfig+0x4c6>
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	e00b      	b.n	8003666 <HAL_RCC_OscConfig+0x4de>
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d015      	beq.n	800369a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fc ff6f 	bl	8000550 <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fc ff6b 	bl	8000550 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e11e      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_RCC_OscConfig+0x530>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ee      	beq.n	8003676 <HAL_RCC_OscConfig+0x4ee>
 8003698:	e018      	b.n	80036cc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fc ff59 	bl	8000550 <HAL_GetTick>
 800369e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036a0:	e00e      	b.n	80036c0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fc ff55 	bl	8000550 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d905      	bls.n	80036c0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e108      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
 80036b8:	58024400 	.word	0x58024400
 80036bc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c0:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ea      	bne.n	80036a2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80f9 	beq.w	80038c8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036de:	2b18      	cmp	r3, #24
 80036e0:	f000 80b4 	beq.w	800384c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	f040 8095 	bne.w	8003818 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b79      	ldr	r3, [pc, #484]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a78      	ldr	r2, [pc, #480]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80036f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fc ff29 	bl	8000550 <HAL_GetTick>
 80036fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003702:	f7fc ff25 	bl	8000550 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0da      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003714:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003720:	4b6c      	ldr	r3, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003724:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x750>)
 8003726:	4013      	ands	r3, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	430a      	orrs	r2, r1
 8003734:	4967      	ldr	r1, [pc, #412]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	628b      	str	r3, [r1, #40]	; 0x28
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	3b01      	subs	r3, #1
 8003740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	3b01      	subs	r3, #1
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	b29b      	uxth	r3, r3
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	3b01      	subs	r3, #1
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	3b01      	subs	r3, #1
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800376a:	495a      	ldr	r1, [pc, #360]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003770:	4b58      	ldr	r3, [pc, #352]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a57      	ldr	r2, [pc, #348]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800377c:	4b55      	ldr	r3, [pc, #340]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800377e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003780:	4b56      	ldr	r3, [pc, #344]	; (80038dc <HAL_RCC_OscConfig+0x754>)
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003788:	00d2      	lsls	r2, r2, #3
 800378a:	4952      	ldr	r1, [pc, #328]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f023 020c 	bic.w	r2, r3, #12
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037a2:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	f023 0202 	bic.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4949      	ldr	r1, [pc, #292]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037b4:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4a46      	ldr	r2, [pc, #280]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a43      	ldr	r2, [pc, #268]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037cc:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4a40      	ldr	r2, [pc, #256]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fc feae 	bl	8000550 <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fc feaa 	bl	8000550 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e05f      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800380a:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x670>
 8003816:	e057      	b.n	80038c8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fc fe94 	bl	8000550 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fc fe90 	bl	8000550 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e045      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x6a4>
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_OscConfig+0x74c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b01      	cmp	r3, #1
 800385e:	d031      	beq.n	80038c4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0203 	and.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d12a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d122      	bne.n	80038c4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	0a5b      	lsrs	r3, r3, #9
 8003892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d111      	bne.n	80038c4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d108      	bne.n	80038c4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0e1b      	lsrs	r3, r3, #24
 80038b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3730      	adds	r7, #48	; 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
 80038d8:	fffffc0c 	.word	0xfffffc0c
 80038dc:	ffff0007 	.word	0xffff0007

080038e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e19c      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b87      	ldr	r3, [pc, #540]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 020f 	bic.w	r2, r3, #15
 800390a:	4985      	ldr	r1, [pc, #532]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b83      	ldr	r3, [pc, #524]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e184      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d010      	beq.n	8003952 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	4b7b      	ldr	r3, [pc, #492]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393c:	429a      	cmp	r2, r3
 800393e:	d908      	bls.n	8003952 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003940:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	4975      	ldr	r1, [pc, #468]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 800394e:	4313      	orrs	r3, r2
 8003950:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d010      	beq.n	8003980 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800396a:	429a      	cmp	r2, r3
 800396c:	d908      	bls.n	8003980 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800396e:	4b6d      	ldr	r3, [pc, #436]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	496a      	ldr	r1, [pc, #424]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 800397c:	4313      	orrs	r3, r2
 800397e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	4b64      	ldr	r3, [pc, #400]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003998:	429a      	cmp	r2, r3
 800399a:	d908      	bls.n	80039ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800399c:	4b61      	ldr	r3, [pc, #388]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	495e      	ldr	r1, [pc, #376]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d908      	bls.n	80039dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4953      	ldr	r1, [pc, #332]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b4d      	ldr	r3, [pc, #308]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d908      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f023 020f 	bic.w	r2, r3, #15
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4947      	ldr	r1, [pc, #284]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d055      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a16:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4940      	ldr	r1, [pc, #256]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a30:	4b3c      	ldr	r3, [pc, #240]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d121      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0f6      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a48:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d115      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0ea      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a60:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0de      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0d6      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f023 0207 	bic.w	r2, r3, #7
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4925      	ldr	r1, [pc, #148]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fc fd5d 	bl	8000550 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9a:	f7fc fd59 	bl	8000550 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0be      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d1eb      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d010      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d208      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f023 020f 	bic.w	r2, r3, #15
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d214      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 020f 	bic.w	r2, r3, #15
 8003b06:	4906      	ldr	r1, [pc, #24]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e086      	b.n	8003c2e <HAL_RCC_ClockConfig+0x34e>
 8003b20:	52002000 	.word	0x52002000
 8003b24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d208      	bcs.n	8003b56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	4939      	ldr	r1, [pc, #228]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d208      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	492e      	ldr	r1, [pc, #184]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d208      	bcs.n	8003bb2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	4922      	ldr	r1, [pc, #136]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d208      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4917      	ldr	r1, [pc, #92]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003be0:	f000 f834 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	4912      	ldr	r1, [pc, #72]	; (8003c3c <HAL_RCC_ClockConfig+0x35c>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x358>)
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <HAL_RCC_ClockConfig+0x35c>)
 8003c08:	5cd3      	ldrb	r3, [r2, r3]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_RCC_ClockConfig+0x360>)
 8003c16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <HAL_RCC_ClockConfig+0x364>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_RCC_ClockConfig+0x368>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fc4a 	bl	80004bc <HAL_InitTick>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	58024400 	.word	0x58024400
 8003c3c:	08009688 	.word	0x08009688
 8003c40:	24000414 	.word	0x24000414
 8003c44:	24000410 	.word	0x24000410
 8003c48:	24000408 	.word	0x24000408

08003c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c52:	4bb3      	ldr	r3, [pc, #716]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c5a:	2b18      	cmp	r3, #24
 8003c5c:	f200 8155 	bhi.w	8003f0a <HAL_RCC_GetSysClockFreq+0x2be>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003ccd 	.word	0x08003ccd
 8003c6c:	08003f0b 	.word	0x08003f0b
 8003c70:	08003f0b 	.word	0x08003f0b
 8003c74:	08003f0b 	.word	0x08003f0b
 8003c78:	08003f0b 	.word	0x08003f0b
 8003c7c:	08003f0b 	.word	0x08003f0b
 8003c80:	08003f0b 	.word	0x08003f0b
 8003c84:	08003f0b 	.word	0x08003f0b
 8003c88:	08003cf3 	.word	0x08003cf3
 8003c8c:	08003f0b 	.word	0x08003f0b
 8003c90:	08003f0b 	.word	0x08003f0b
 8003c94:	08003f0b 	.word	0x08003f0b
 8003c98:	08003f0b 	.word	0x08003f0b
 8003c9c:	08003f0b 	.word	0x08003f0b
 8003ca0:	08003f0b 	.word	0x08003f0b
 8003ca4:	08003f0b 	.word	0x08003f0b
 8003ca8:	08003cf9 	.word	0x08003cf9
 8003cac:	08003f0b 	.word	0x08003f0b
 8003cb0:	08003f0b 	.word	0x08003f0b
 8003cb4:	08003f0b 	.word	0x08003f0b
 8003cb8:	08003f0b 	.word	0x08003f0b
 8003cbc:	08003f0b 	.word	0x08003f0b
 8003cc0:	08003f0b 	.word	0x08003f0b
 8003cc4:	08003f0b 	.word	0x08003f0b
 8003cc8:	08003cff 	.word	0x08003cff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ccc:	4b94      	ldr	r3, [pc, #592]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cd8:	4b91      	ldr	r3, [pc, #580]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	4a90      	ldr	r2, [pc, #576]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003cea:	e111      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cec:	4b8d      	ldr	r3, [pc, #564]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cee:	61bb      	str	r3, [r7, #24]
    break;
 8003cf0:	e10e      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003cf2:	4b8d      	ldr	r3, [pc, #564]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cf4:	61bb      	str	r3, [r7, #24]
    break;
 8003cf6:	e10b      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003cf8:	4b8c      	ldr	r3, [pc, #560]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cfa:	61bb      	str	r3, [r7, #24]
    break;
 8003cfc:	e108      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cfe:	4b88      	ldr	r3, [pc, #544]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d08:	4b85      	ldr	r3, [pc, #532]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d14:	4b82      	ldr	r3, [pc, #520]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d1e:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80e1 	beq.w	8003f04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	f000 8083 	beq.w	8003e50 <HAL_RCC_GetSysClockFreq+0x204>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f200 80a1 	bhi.w	8003e94 <HAL_RCC_GetSysClockFreq+0x248>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x114>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d056      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d5e:	e099      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d60:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02d      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d6c:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	08db      	lsrs	r3, r3, #3
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	4a6b      	ldr	r2, [pc, #428]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003daa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003dc6:	e087      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0a:	e065      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1e:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e4e:	e043      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e92:	e021      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ed6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efc:	ee17 3a90 	vmov	r3, s15
 8003f00:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f02:	e005      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
    break;
 8003f08:	e002      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f0c:	61bb      	str	r3, [r7, #24]
    break;
 8003f0e:	bf00      	nop
  }

  return sysclockfreq;
 8003f10:	69bb      	ldr	r3, [r7, #24]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3724      	adds	r7, #36	; 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400
 8003f24:	03d09000 	.word	0x03d09000
 8003f28:	003d0900 	.word	0x003d0900
 8003f2c:	017d7840 	.word	0x017d7840
 8003f30:	46000000 	.word	0x46000000
 8003f34:	4c742400 	.word	0x4c742400
 8003f38:	4a742400 	.word	0x4a742400
 8003f3c:	4bbebc20 	.word	0x4bbebc20

08003f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f46:	f7ff fe81 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	490f      	ldr	r1, [pc, #60]	; (8003f94 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	58024400 	.word	0x58024400
 8003f94:	08009688 	.word	0x08009688
 8003f98:	24000414 	.word	0x24000414
 8003f9c:	24000410 	.word	0x24000410

08003fa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fac:	2300      	movs	r3, #0
 8003fae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d03f      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fc4:	d02a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fca:	d824      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd0:	d018      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd6:	d81e      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe0:	d007      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fe2:	e018      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe4:	4bab      	ldr	r3, [pc, #684]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4aaa      	ldr	r2, [pc, #680]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ff0:	e015      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 feff 	bl	8005dfc <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004002:	e00c      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f001 ffa8 	bl	8005f60 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
      break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004024:	4b9b      	ldr	r3, [pc, #620]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004030:	4998      	ldr	r1, [pc, #608]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	650b      	str	r3, [r1, #80]	; 0x50
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	2b04      	cmp	r3, #4
 800404e:	d826      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800406d 	.word	0x0800406d
 800405c:	0800407b 	.word	0x0800407b
 8004060:	0800408d 	.word	0x0800408d
 8004064:	080040a5 	.word	0x080040a5
 8004068:	080040a5 	.word	0x080040a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b89      	ldr	r3, [pc, #548]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a88      	ldr	r2, [pc, #544]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004078:	e015      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f001 febb 	bl	8005dfc <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800408a:	e00c      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 ff64 	bl	8005f60 <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
      break;
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80040a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ac:	4b79      	ldr	r3, [pc, #484]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	f023 0207 	bic.w	r2, r3, #7
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	4976      	ldr	r1, [pc, #472]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	650b      	str	r3, [r1, #80]	; 0x50
 80040be:	e001      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d051      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80040da:	d036      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040dc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80040e0:	d830      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80040e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040e6:	d032      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80040e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ec:	d82a      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80040ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040f2:	d02e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80040f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040f8:	d824      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80040fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040fe:	d018      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004104:	d81e      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800410a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800410e:	d007      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004110:	e018      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004112:	4b60      	ldr	r3, [pc, #384]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a5f      	ldr	r2, [pc, #380]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800411e:	e019      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f001 fe68 	bl	8005dfc <RCCEx_PLL2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004130:	e010      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3324      	adds	r3, #36	; 0x24
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f001 ff11 	bl	8005f60 <RCCEx_PLL3_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004142:	e007      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75fb      	strb	r3, [r7, #23]
      break;
 8004148:	e004      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800415a:	4b4e      	ldr	r3, [pc, #312]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004168:	494a      	ldr	r1, [pc, #296]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416a:	4313      	orrs	r3, r2
 800416c:	658b      	str	r3, [r1, #88]	; 0x58
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417c:	2b00      	cmp	r3, #0
 800417e:	d051      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004186:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800418a:	d036      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800418c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004190:	d830      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004196:	d032      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419c:	d82a      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800419e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041a2:	d02e      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80041a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041a8:	d824      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ae:	d018      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80041b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b4:	d81e      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80041ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041be:	d007      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80041c0:	e018      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c2:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4a33      	ldr	r2, [pc, #204]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041ce:	e019      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 fe10 	bl	8005dfc <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80041e0:	e010      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3324      	adds	r3, #36	; 0x24
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 feb9 	bl	8005f60 <RCCEx_PLL3_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041f2:	e007      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
      break;
 80041f8:	e004      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004218:	491e      	ldr	r1, [pc, #120]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	658b      	str	r3, [r1, #88]	; 0x58
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d035      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	2b30      	cmp	r3, #48	; 0x30
 8004236:	d01c      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d817      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d00c      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d813      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004248:	2b10      	cmp	r3, #16
 800424a:	d10f      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4a10      	ldr	r2, [pc, #64]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004258:	e00e      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f001 fdcb 	bl	8005dfc <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800426a:	e005      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428a:	4902      	ldr	r1, [pc, #8]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004290:	e004      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004292:	bf00      	nop
 8004294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d047      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b0:	d030      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80042b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b6:	d82a      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80042b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042bc:	d02c      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80042be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042c2:	d824      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c8:	d018      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	d81e      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d007      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80042da:	e018      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4bac      	ldr	r3, [pc, #688]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	4aab      	ldr	r2, [pc, #684]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042e8:	e017      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3304      	adds	r3, #4
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fd83 	bl	8005dfc <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042fa:	e00e      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3324      	adds	r3, #36	; 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fe2c 	bl	8005f60 <RCCEx_PLL3_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800430c:	e005      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
      break;
 8004312:	e002      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004320:	4b9b      	ldr	r3, [pc, #620]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4998      	ldr	r1, [pc, #608]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800432e:	4313      	orrs	r3, r2
 8004330:	650b      	str	r3, [r1, #80]	; 0x50
 8004332:	e001      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d049      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800434c:	d02e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800434e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004352:	d828      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004358:	d02a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800435a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800435e:	d822      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004360:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004364:	d026      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800436a:	d81c      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800436c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004370:	d010      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004376:	d816      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d111      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fd37 	bl	8005dfc <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004392:	e012      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3324      	adds	r3, #36	; 0x24
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fde0 	bl	8005f60 <RCCEx_PLL3_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043a4:	e009      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
      break;
 80043aa:	e006      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80043ac:	bf00      	nop
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80043b0:	bf00      	nop
 80043b2:	e002      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80043b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80043c0:	4b73      	ldr	r3, [pc, #460]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	4970      	ldr	r1, [pc, #448]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	650b      	str	r3, [r1, #80]	; 0x50
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d04b      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ee:	d02e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80043f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f4:	d828      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d02a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d822      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004406:	d026      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004408:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800440c:	d81c      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800440e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004412:	d010      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d816      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01d      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004422:	d111      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	2101      	movs	r1, #1
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fce6 	bl	8005dfc <RCCEx_PLL2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004434:	e012      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3324      	adds	r3, #36	; 0x24
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f001 fd8f 	bl	8005f60 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004446:	e009      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
      break;
 800444c:	e006      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800444e:	bf00      	nop
 8004450:	e004      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004452:	bf00      	nop
 8004454:	e002      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004456:	bf00      	nop
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800445a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004462:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004470:	4947      	ldr	r1, [pc, #284]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	658b      	str	r3, [r1, #88]	; 0x58
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800448c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004490:	d00e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004496:	d814      	bhi.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800449c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a0:	d10f      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a2:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80044ae:	e00c      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fca0 	bl	8005dfc <RCCEx_PLL2_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80044c0:	e003      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
      break;
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80044c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044dc:	492c      	ldr	r1, [pc, #176]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	650b      	str	r3, [r1, #80]	; 0x50
 80044e2:	e001      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d032      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d81b      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	0800453b 	.word	0x0800453b
 8004508:	08004515 	.word	0x08004515
 800450c:	08004523 	.word	0x08004523
 8004510:	0800453b 	.word	0x0800453b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004520:	e00c      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fc67 	bl	8005dfc <RCCEx_PLL2_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	e000      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800453a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	4910      	ldr	r1, [pc, #64]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004554:	e001      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 808a 	beq.w	800467c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800456e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004572:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004574:	f7fb ffec 	bl	8000550 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457a:	e00d      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457c:	f7fb ffe8 	bl	8000550 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d906      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	75fb      	strb	r3, [r7, #23]
        break;
 800458e:	e009      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004590:	58024400 	.word	0x58024400
 8004594:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004598:	4bb9      	ldr	r3, [pc, #740]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0eb      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d166      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045aa:	4bb6      	ldr	r3, [pc, #728]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045b4:	4053      	eors	r3, r2
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d013      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045be:	4bb1      	ldr	r3, [pc, #708]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c8:	4bae      	ldr	r3, [pc, #696]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4aad      	ldr	r2, [pc, #692]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d4:	4bab      	ldr	r3, [pc, #684]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4aaa      	ldr	r2, [pc, #680]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045e0:	4aa8      	ldr	r2, [pc, #672]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f0:	d115      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fb ffad 	bl	8000550 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045f8:	e00b      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fb ffa9 	bl	8000550 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4293      	cmp	r3, r2
 800460a:	d902      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	75fb      	strb	r3, [r7, #23]
            break;
 8004610:	e005      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004612:	4b9c      	ldr	r3, [pc, #624]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0ed      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d126      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d10d      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004634:	4b93      	ldr	r3, [pc, #588]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004642:	0919      	lsrs	r1, r3, #4
 8004644:	4b90      	ldr	r3, [pc, #576]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004646:	400b      	ands	r3, r1
 8004648:	498e      	ldr	r1, [pc, #568]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]
 800464e:	e005      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004650:	4b8c      	ldr	r3, [pc, #560]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4a8b      	ldr	r2, [pc, #556]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004656:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800465a:	6113      	str	r3, [r2, #16]
 800465c:	4b89      	ldr	r3, [pc, #548]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800465e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466a:	4986      	ldr	r1, [pc, #536]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	670b      	str	r3, [r1, #112]	; 0x70
 8004670:	e004      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	75bb      	strb	r3, [r7, #22]
 8004676:	e001      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d07e      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	2b28      	cmp	r3, #40	; 0x28
 800468e:	d867      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	08004767 	.word	0x08004767
 800469c:	08004761 	.word	0x08004761
 80046a0:	08004761 	.word	0x08004761
 80046a4:	08004761 	.word	0x08004761
 80046a8:	08004761 	.word	0x08004761
 80046ac:	08004761 	.word	0x08004761
 80046b0:	08004761 	.word	0x08004761
 80046b4:	08004761 	.word	0x08004761
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	08004761 	.word	0x08004761
 80046c0:	08004761 	.word	0x08004761
 80046c4:	08004761 	.word	0x08004761
 80046c8:	08004761 	.word	0x08004761
 80046cc:	08004761 	.word	0x08004761
 80046d0:	08004761 	.word	0x08004761
 80046d4:	08004761 	.word	0x08004761
 80046d8:	0800474f 	.word	0x0800474f
 80046dc:	08004761 	.word	0x08004761
 80046e0:	08004761 	.word	0x08004761
 80046e4:	08004761 	.word	0x08004761
 80046e8:	08004761 	.word	0x08004761
 80046ec:	08004761 	.word	0x08004761
 80046f0:	08004761 	.word	0x08004761
 80046f4:	08004761 	.word	0x08004761
 80046f8:	08004767 	.word	0x08004767
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004761 	.word	0x08004761
 8004704:	08004761 	.word	0x08004761
 8004708:	08004761 	.word	0x08004761
 800470c:	08004761 	.word	0x08004761
 8004710:	08004761 	.word	0x08004761
 8004714:	08004761 	.word	0x08004761
 8004718:	08004767 	.word	0x08004767
 800471c:	08004761 	.word	0x08004761
 8004720:	08004761 	.word	0x08004761
 8004724:	08004761 	.word	0x08004761
 8004728:	08004761 	.word	0x08004761
 800472c:	08004761 	.word	0x08004761
 8004730:	08004761 	.word	0x08004761
 8004734:	08004761 	.word	0x08004761
 8004738:	08004767 	.word	0x08004767
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	2101      	movs	r1, #1
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fb5a 	bl	8005dfc <RCCEx_PLL2_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800474c:	e00c      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3324      	adds	r3, #36	; 0x24
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fc03 	bl	8005f60 <RCCEx_PLL3_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
      break;
 8004764:	e000      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800476e:	4b45      	ldr	r3, [pc, #276]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	4942      	ldr	r1, [pc, #264]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800477c:	4313      	orrs	r3, r2
 800477e:	654b      	str	r3, [r1, #84]	; 0x54
 8004780:	e001      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d037      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	2b05      	cmp	r3, #5
 8004798:	d820      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047e3 	.word	0x080047e3
 80047a4:	080047b9 	.word	0x080047b9
 80047a8:	080047cb 	.word	0x080047cb
 80047ac:	080047e3 	.word	0x080047e3
 80047b0:	080047e3 	.word	0x080047e3
 80047b4:	080047e3 	.word	0x080047e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	2101      	movs	r1, #1
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fb1c 	bl	8005dfc <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80047c8:	e00c      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3324      	adds	r3, #36	; 0x24
 80047ce:	2101      	movs	r1, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 fbc5 	bl	8005f60 <RCCEx_PLL3_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80047da:	e003      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
      break;
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80047e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	4923      	ldr	r1, [pc, #140]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	654b      	str	r3, [r1, #84]	; 0x54
 80047fc:	e001      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d040      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004814:	2b05      	cmp	r3, #5
 8004816:	d821      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004863 	.word	0x08004863
 8004824:	08004839 	.word	0x08004839
 8004828:	0800484b 	.word	0x0800484b
 800482c:	08004863 	.word	0x08004863
 8004830:	08004863 	.word	0x08004863
 8004834:	08004863 	.word	0x08004863
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	2101      	movs	r1, #1
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fadc 	bl	8005dfc <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004848:	e00c      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3324      	adds	r3, #36	; 0x24
 800484e:	2101      	movs	r1, #1
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fb85 	bl	8005f60 <RCCEx_PLL3_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800485a:	e003      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
      break;
 8004860:	e000      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d110      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f023 0207 	bic.w	r2, r3, #7
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004878:	4902      	ldr	r1, [pc, #8]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	658b      	str	r3, [r1, #88]	; 0x58
 800487e:	e007      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004880:	58024800 	.word	0x58024800
 8004884:	58024400 	.word	0x58024400
 8004888:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d04b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a6:	d02e      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80048a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ac:	d828      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d02a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d822      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80048ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048be:	d026      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048c4:	d81c      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80048c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ca:	d010      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80048cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d0:	d816      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01d      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048da:	d111      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fa8a 	bl	8005dfc <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048ec:	e012      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	2102      	movs	r1, #2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 fb33 	bl	8005f60 <RCCEx_PLL3_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048fe:	e009      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
      break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004906:	bf00      	nop
 8004908:	e004      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800490a:	bf00      	nop
 800490c:	e002      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800491a:	4bb2      	ldr	r3, [pc, #712]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	49ae      	ldr	r1, [pc, #696]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800492a:	4313      	orrs	r3, r2
 800492c:	654b      	str	r3, [r1, #84]	; 0x54
 800492e:	e001      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d04b      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004946:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800494a:	d02e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800494c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004950:	d828      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d02a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d822      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800495e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004962:	d026      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004968:	d81c      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496e:	d010      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004974:	d816      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01d      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d111      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fa38 	bl	8005dfc <RCCEx_PLL2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004990:	e012      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3324      	adds	r3, #36	; 0x24
 8004996:	2102      	movs	r1, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f001 fae1 	bl	8005f60 <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049a2:	e009      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	e006      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049aa:	bf00      	nop
 80049ac:	e004      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049be:	4b89      	ldr	r3, [pc, #548]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049cc:	4985      	ldr	r1, [pc, #532]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	658b      	str	r3, [r1, #88]	; 0x58
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d04b      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049ee:	d02e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80049f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049f4:	d828      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fa:	d02a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80049fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a00:	d822      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a06:	d026      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004a08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a0c:	d81c      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a12:	d010      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a18:	d816      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01d      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	d111      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 f9e6 	bl	8005dfc <RCCEx_PLL2_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a34:	e012      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3324      	adds	r3, #36	; 0x24
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fa8f 	bl	8005f60 <RCCEx_PLL3_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a46:	e009      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e004      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a62:	4b60      	ldr	r3, [pc, #384]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a70:	495c      	ldr	r1, [pc, #368]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	658b      	str	r3, [r1, #88]	; 0x58
 8004a76:	e001      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d018      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d10a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3324      	adds	r3, #36	; 0x24
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fa61 	bl	8005f60 <RCCEx_PLL3_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004aa8:	4b4e      	ldr	r3, [pc, #312]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab4:	494b      	ldr	r1, [pc, #300]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3324      	adds	r3, #36	; 0x24
 8004ad6:	2102      	movs	r1, #2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fa41 	bl	8005f60 <RCCEx_PLL3_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ae8:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	493b      	ldr	r1, [pc, #236]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d034      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b12:	d01d      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b18:	d817      	bhi.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b22:	d009      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b24:	e011      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 f965 	bl	8005dfc <RCCEx_PLL2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b36:	e00c      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3324      	adds	r3, #36	; 0x24
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fa0e 	bl	8005f60 <RCCEx_PLL3_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b48:	e003      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4e:	e000      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b58:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b66:	491f      	ldr	r1, [pc, #124]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b6c:	e001      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d036      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b88:	d01c      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004b8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b8e:	d816      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b94:	d003      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b9a:	d007      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004b9c:	e00f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004baa:	e00c      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3324      	adds	r3, #36	; 0x24
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 f9d4 	bl	8005f60 <RCCEx_PLL3_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10d      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bda:	4902      	ldr	r1, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	654b      	str	r3, [r1, #84]	; 0x54
 8004be0:	e004      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d029      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d007      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004c06:	e00f      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c08:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a60      	ldr	r2, [pc, #384]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c14:	e00b      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f8ed 	bl	8005dfc <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c34:	4b56      	ldr	r3, [pc, #344]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	4953      	ldr	r1, [pc, #332]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c46:	e001      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3324      	adds	r3, #36	; 0x24
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f97e 	bl	8005f60 <RCCEx_PLL3_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d030      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c82:	d017      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c88:	d811      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8e:	d013      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d80b      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d010      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9e:	d106      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca0:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004cac:	e007      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc4:	4b32      	ldr	r3, [pc, #200]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd0:	492f      	ldr	r1, [pc, #188]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	654b      	str	r3, [r1, #84]	; 0x54
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ce8:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf4:	4926      	ldr	r1, [pc, #152]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d06:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d12:	491f      	ldr	r1, [pc, #124]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d24:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d2e:	6113      	str	r3, [r2, #16]
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d3a:	4915      	ldr	r1, [pc, #84]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da08      	bge.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	490e      	ldr	r1, [pc, #56]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d74:	4906      	ldr	r1, [pc, #24]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d7a:	7dbb      	ldrb	r3, [r7, #22]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e000      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	58024400 	.word	0x58024400

08004d94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b090      	sub	sp, #64	; 0x40
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	f040 8089 	bne.w	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004da6:	4b95      	ldr	r3, [pc, #596]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d87d      	bhi.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004dd1 	.word	0x08004dd1
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004e19 	.word	0x08004e19
 8004dc8:	08004ead 	.word	0x08004ead
 8004dcc:	08004e3d 	.word	0x08004e3d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ddc:	d107      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 feb8 	bl	8005b58 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dec:	e3ed      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df2:	e3ea      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004df4:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e00:	d107      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e02:	f107 0318 	add.w	r3, r7, #24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbfe 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e10:	e3db      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e16:	e3d8      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e18:	4b78      	ldr	r3, [pc, #480]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e24:	d107      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fd40 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e34:	e3c9      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3a:	e3c6      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e3c:	4b6f      	ldr	r3, [pc, #444]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e46:	4b6d      	ldr	r3, [pc, #436]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e58:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	4a67      	ldr	r2, [pc, #412]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6a:	e01e      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e6c:	4b63      	ldr	r3, [pc, #396]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d106      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e80:	d102      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e82:	4b60      	ldr	r3, [pc, #384]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e86:	e010      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e88:	4b5c      	ldr	r3, [pc, #368]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d102      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e9e:	4b5a      	ldr	r3, [pc, #360]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea2:	e002      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ea8:	e38f      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004eaa:	e38e      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004eac:	4b57      	ldr	r3, [pc, #348]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb0:	e38b      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb6:	e388      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebe:	f040 80a7 	bne.w	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004ec2:	4b4e      	ldr	r3, [pc, #312]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ed2:	d054      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eda:	f200 808b 	bhi.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ee4:	f000 8083 	beq.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004eee:	f200 8081 	bhi.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef8:	d02f      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f00:	d878      	bhi.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d004      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f0e:	d012      	beq.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004f10:	e070      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f12:	4b3a      	ldr	r3, [pc, #232]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fe17 	bl	8005b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f2e:	e34c      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f34:	e349      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f42:	d107      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f44:	f107 0318 	add.w	r3, r7, #24
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fb5d 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f52:	e33a      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f58:	e337      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f5a:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f66:	d107      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f68:	f107 030c 	add.w	r3, r7, #12
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fc9f 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f76:	e328      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f7c:	e325      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f7e:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f88:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d10c      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	08db      	lsrs	r3, r3, #3
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fac:	e01e      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fba:	d106      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc2:	d102      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc8:	e010      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fea:	e2ee      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004fec:	e2ed      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff2:	e2ea      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff8:	e2e7      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
 8005000:	03d09000 	.word	0x03d09000
 8005004:	003d0900 	.word	0x003d0900
 8005008:	017d7840 	.word	0x017d7840
 800500c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	f040 809c 	bne.w	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800501a:	4b9e      	ldr	r3, [pc, #632]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005022:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800502a:	d054      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005032:	f200 808b 	bhi.w	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800503c:	f000 8083 	beq.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005046:	f200 8081 	bhi.w	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005050:	d02f      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005058:	d878      	bhi.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005066:	d012      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005068:	e070      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800506a:	4b8a      	ldr	r3, [pc, #552]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005076:	d107      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fd6b 	bl	8005b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005086:	e2a0      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800508c:	e29d      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800508e:	4b81      	ldr	r3, [pc, #516]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800509a:	d107      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800509c:	f107 0318 	add.w	r3, r7, #24
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fab1 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80050aa:	e28e      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050b0:	e28b      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050b2:	4b78      	ldr	r3, [pc, #480]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050be:	d107      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fbf3 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050ce:	e27c      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050d4:	e279      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050d6:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050e0:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d10c      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050f2:	4b68      	ldr	r3, [pc, #416]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	08db      	lsrs	r3, r3, #3
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	4a66      	ldr	r2, [pc, #408]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005104:	e01e      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005106:	4b63      	ldr	r3, [pc, #396]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	d106      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511a:	d102      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800511c:	4b5f      	ldr	r3, [pc, #380]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	e010      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005122:	4b5c      	ldr	r3, [pc, #368]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512e:	d106      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005136:	d102      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005138:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513c:	e002      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005142:	e242      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005144:	e241      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005146:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800514a:	e23e      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005150:	e23b      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	f040 80a6 	bne.w	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800515c:	4b4d      	ldr	r3, [pc, #308]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800516c:	d054      	beq.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005174:	f200 808b 	bhi.w	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800517e:	f000 8083 	beq.w	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005188:	f200 8081 	bhi.w	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	d02f      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519a:	d878      	bhi.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	d012      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80051aa:	e070      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b8:	d107      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fcca 	bl	8005b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051c8:	e1ff      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ce:	e1fc      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051dc:	d107      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051de:	f107 0318 	add.w	r3, r7, #24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fa10 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051ec:	e1ed      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f2:	e1ea      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005200:	d107      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005202:	f107 030c 	add.w	r3, r7, #12
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb52 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005210:	e1db      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005216:	e1d8      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005220:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005234:	4b17      	ldr	r3, [pc, #92]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005246:	e01e      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005254:	d106      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525c:	d102      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005262:	e010      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005270:	d106      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005278:	d102      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	e002      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005284:	e1a1      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005286:	e1a0      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005288:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800528c:	e19d      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005292:	e19a      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005294:	58024400 	.word	0x58024400
 8005298:	03d09000 	.word	0x03d09000
 800529c:	003d0900 	.word	0x003d0900
 80052a0:	017d7840 	.word	0x017d7840
 80052a4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052ae:	d173      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80052b0:	4b9a      	ldr	r3, [pc, #616]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c0:	d02f      	beq.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c8:	d863      	bhi.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d012      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80052d8:	e05b      	b.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052da:	4b90      	ldr	r3, [pc, #576]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e6:	d107      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e8:	f107 0318 	add.w	r3, r7, #24
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f98b 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052f6:	e168      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052fc:	e165      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052fe:	4b87      	ldr	r3, [pc, #540]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530a:	d107      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530c:	f107 030c 	add.w	r3, r7, #12
 8005310:	4618      	mov	r0, r3
 8005312:	f000 facd 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800531a:	e156      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005320:	e153      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005322:	4b7e      	ldr	r3, [pc, #504]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800532a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800532c:	4b7b      	ldr	r3, [pc, #492]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b04      	cmp	r3, #4
 8005336:	d10c      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800533e:	4b77      	ldr	r3, [pc, #476]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	08db      	lsrs	r3, r3, #3
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005350:	e01e      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005352:	4b72      	ldr	r3, [pc, #456]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535e:	d106      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005366:	d102      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005368:	4b6e      	ldr	r3, [pc, #440]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800536c:	e010      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800536e:	4b6b      	ldr	r3, [pc, #428]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800537a:	d106      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005382:	d102      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005384:	4b68      	ldr	r3, [pc, #416]	; (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005388:	e002      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800538e:	e11c      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005390:	e11b      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005396:	e118      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539e:	d133      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80053a0:	4b5e      	ldr	r3, [pc, #376]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b6:	d012      	beq.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80053b8:	e023      	b.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053ba:	4b58      	ldr	r3, [pc, #352]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053c6:	d107      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fbc3 	bl	8005b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053d6:	e0f8      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053dc:	e0f5      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053de:	4b4f      	ldr	r3, [pc, #316]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ea:	d107      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ec:	f107 0318 	add.w	r3, r7, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f909 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053fa:	e0e6      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005400:	e0e3      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005406:	e0e0      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800540e:	f040 808d 	bne.w	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005412:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800541a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005422:	d06b      	beq.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800542a:	d874      	bhi.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d056      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d86c      	bhi.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005442:	d03b      	beq.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800544a:	d864      	bhi.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005452:	d021      	beq.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545a:	d85c      	bhi.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005468:	d004      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800546a:	e054      	b.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800546c:	f000 f8b6 	bl	80055dc <HAL_RCCEx_GetD3PCLK1Freq>
 8005470:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005472:	e0aa      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005474:	4b29      	ldr	r3, [pc, #164]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005480:	d107      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005482:	f107 0318 	add.w	r3, r7, #24
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f8be 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005490:	e09b      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005496:	e098      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d107      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fa00 	bl	80058b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054b4:	e089      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ba:	e086      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d109      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054da:	e076      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e0:	e073      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ee:	d102      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054f4:	e069      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054fa:	e066      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054fc:	4b07      	ldr	r3, [pc, #28]	; (800551c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005508:	d102      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800550e:	e05c      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005514:	e059      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800551a:	e056      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800551c:	58024400 	.word	0x58024400
 8005520:	03d09000 	.word	0x03d09000
 8005524:	003d0900 	.word	0x003d0900
 8005528:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005532:	d148      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d02a      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554c:	d838      	bhi.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555a:	d00d      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800555c:	e030      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800555e:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800556a:	d102      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800556c:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005570:	e02b      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005576:	e028      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005578:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005584:	d107      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fae4 	bl	8005b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005594:	e019      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800559a:	e016      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a8:	d107      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055aa:	f107 0318 	add.w	r3, r7, #24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f82a 	bl	8005608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055b8:	e007      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055be:	e004      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055c4:	e001      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80055ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3740      	adds	r7, #64	; 0x40
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	58024400 	.word	0x58024400
 80055d8:	017d7840 	.word	0x017d7840

080055dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80055e0:	f7fe fcae 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4904      	ldr	r1, [pc, #16]	; (8005604 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	58024400 	.word	0x58024400
 8005604:	08009688 	.word	0x08009688

08005608 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005610:	4ba1      	ldr	r3, [pc, #644]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800561a:	4b9f      	ldr	r3, [pc, #636]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	0b1b      	lsrs	r3, r3, #12
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005626:	4b9c      	ldr	r3, [pc, #624]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005632:	4b99      	ldr	r3, [pc, #612]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8111 	beq.w	8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b02      	cmp	r3, #2
 800565a:	f000 8083 	beq.w	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b02      	cmp	r3, #2
 8005662:	f200 80a1 	bhi.w	80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d056      	beq.n	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005672:	e099      	b.n	80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005674:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02d      	beq.n	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005680:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	08db      	lsrs	r3, r3, #3
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	4a84      	ldr	r2, [pc, #528]	; (800589c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b7b      	ldr	r3, [pc, #492]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80056be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056da:	e087      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005702:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571e:	e065      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800572e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005732:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a03 	vldr	s12, [r7, #12]
 8005746:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005762:	e043      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005776:	4b48      	ldr	r3, [pc, #288]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	ed97 6a03 	vldr	s12, [r7, #12]
 800578a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800578e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057a6:	e021      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80057ec:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	0a5b      	lsrs	r3, r3, #9
 80057f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005806:	edd7 6a07 	vldr	s13, [r7, #28]
 800580a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005812:	ee17 2a90 	vmov	r2, s15
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800581a:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005834:	edd7 6a07 	vldr	s13, [r7, #28]
 8005838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005840:	ee17 2a90 	vmov	r2, s15
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	0e1b      	lsrs	r3, r3, #24
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800585e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005862:	edd7 6a07 	vldr	s13, [r7, #28]
 8005866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586e:	ee17 2a90 	vmov	r2, s15
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005876:	e008      	b.n	800588a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
}
 800588a:	bf00      	nop
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	46000000 	.word	0x46000000
 80058a4:	4c742400 	.word	0x4c742400
 80058a8:	4a742400 	.word	0x4a742400
 80058ac:	4bbebc20 	.word	0x4bbebc20

080058b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058b8:	4ba1      	ldr	r3, [pc, #644]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80058c2:	4b9f      	ldr	r3, [pc, #636]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	0d1b      	lsrs	r3, r3, #20
 80058c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058ce:	4b9c      	ldr	r3, [pc, #624]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80058da:	4b99      	ldr	r3, [pc, #612]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	08db      	lsrs	r3, r3, #3
 80058e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8111 	beq.w	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b02      	cmp	r3, #2
 8005902:	f000 8083 	beq.w	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b02      	cmp	r3, #2
 800590a:	f200 80a1 	bhi.w	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d056      	beq.n	80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800591a:	e099      	b.n	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800591c:	4b88      	ldr	r3, [pc, #544]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02d      	beq.n	8005984 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005928:	4b85      	ldr	r3, [pc, #532]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	4a84      	ldr	r2, [pc, #528]	; (8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b7b      	ldr	r3, [pc, #492]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a03 	vldr	s12, [r7, #12]
 8005966:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005982:	e087      	b.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b6a      	ldr	r3, [pc, #424]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059c6:	e065      	b.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b59      	ldr	r3, [pc, #356]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a0a:	e043      	b.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b48      	ldr	r3, [pc, #288]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a4e:	e021      	b.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a62:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	0a5b      	lsrs	r3, r3, #9
 8005a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aba:	ee17 2a90 	vmov	r2, s15
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae8:	ee17 2a90 	vmov	r2, s15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	0e1b      	lsrs	r3, r3, #24
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	ee17 2a90 	vmov	r2, s15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b1e:	e008      	b.n	8005b32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
}
 8005b32:	bf00      	nop
 8005b34:	3724      	adds	r7, #36	; 0x24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
 8005b44:	03d09000 	.word	0x03d09000
 8005b48:	46000000 	.word	0x46000000
 8005b4c:	4c742400 	.word	0x4c742400
 8005b50:	4a742400 	.word	0x4a742400
 8005b54:	4bbebc20 	.word	0x4bbebc20

08005b58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b60:	4ba0      	ldr	r3, [pc, #640]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005b6a:	4b9e      	ldr	r3, [pc, #632]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005b76:	4b9b      	ldr	r3, [pc, #620]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b80:	4b98      	ldr	r3, [pc, #608]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	08db      	lsrs	r3, r3, #3
 8005b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8111 	beq.w	8005dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	f000 8083 	beq.w	8005cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f200 80a1 	bhi.w	8005cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d056      	beq.n	8005c6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005bc0:	e099      	b.n	8005cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc2:	4b88      	ldr	r3, [pc, #544]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02d      	beq.n	8005c2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bce:	4b85      	ldr	r3, [pc, #532]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	08db      	lsrs	r3, r3, #3
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	4a83      	ldr	r2, [pc, #524]	; (8005de8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf8:	4b7a      	ldr	r3, [pc, #488]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c28:	e087      	b.n	8005d3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c34:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005df0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3c:	4b69      	ldr	r3, [pc, #420]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c50:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c6c:	e065      	b.n	8005d3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c78:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005df4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c80:	4b58      	ldr	r3, [pc, #352]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c90:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c94:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb0:	e043      	b.n	8005d3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc4:	4b47      	ldr	r3, [pc, #284]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf4:	e021      	b.n	8005d3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d00:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005df0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d08:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d18:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	0a5b      	lsrs	r3, r3, #9
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d60:	ee17 2a90 	vmov	r2, s15
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005d68:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8e:	ee17 2a90 	vmov	r2, s15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005d96:	4b13      	ldr	r3, [pc, #76]	; (8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	0e1b      	lsrs	r3, r3, #24
 8005d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbc:	ee17 2a90 	vmov	r2, s15
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	3724      	adds	r7, #36	; 0x24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	58024400 	.word	0x58024400
 8005de8:	03d09000 	.word	0x03d09000
 8005dec:	46000000 	.word	0x46000000
 8005df0:	4c742400 	.word	0x4c742400
 8005df4:	4a742400 	.word	0x4a742400
 8005df8:	4bbebc20 	.word	0x4bbebc20

08005dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e0a:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d101      	bne.n	8005e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e099      	b.n	8005f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e1a:	4b4f      	ldr	r3, [pc, #316]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a4e      	ldr	r2, [pc, #312]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e26:	f7fa fb93 	bl	8000550 <HAL_GetTick>
 8005e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e2c:	e008      	b.n	8005e40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e2e:	f7fa fb8f 	bl	8000550 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e086      	b.n	8005f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e40:	4b45      	ldr	r3, [pc, #276]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e4c:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	493f      	ldr	r1, [pc, #252]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	025b      	lsls	r3, r3, #9
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	061b      	lsls	r3, r3, #24
 8005e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e90:	4931      	ldr	r1, [pc, #196]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e96:	4b30      	ldr	r3, [pc, #192]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	492d      	ldr	r1, [pc, #180]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ea8:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	f023 0220 	bic.w	r2, r3, #32
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	4928      	ldr	r1, [pc, #160]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005eba:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	4a26      	ldr	r2, [pc, #152]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	f023 0310 	bic.w	r3, r3, #16
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ec6:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <RCCEx_PLL2_Config+0x160>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	69d2      	ldr	r2, [r2, #28]
 8005ed2:	00d2      	lsls	r2, r2, #3
 8005ed4:	4920      	ldr	r1, [pc, #128]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ee0:	f043 0310 	orr.w	r3, r3, #16
 8005ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	4a19      	ldr	r2, [pc, #100]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ef8:	e00f      	b.n	8005f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d106      	bne.n	8005f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f00:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f0c:	e005      	b.n	8005f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a0e      	ldr	r2, [pc, #56]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f26:	f7fa fb13 	bl	8000550 <HAL_GetTick>
 8005f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f2c:	e008      	b.n	8005f40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f2e:	f7fa fb0f 	bl	8000550 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e006      	b.n	8005f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <RCCEx_PLL2_Config+0x15c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	ffff0007 	.word	0xffff0007

08005f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f6e:	4b53      	ldr	r3, [pc, #332]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d101      	bne.n	8005f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e099      	b.n	80060b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f7e:	4b4f      	ldr	r3, [pc, #316]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a4e      	ldr	r2, [pc, #312]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f8a:	f7fa fae1 	bl	8000550 <HAL_GetTick>
 8005f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f90:	e008      	b.n	8005fa4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f92:	f7fa fadd 	bl	8000550 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e086      	b.n	80060b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fa4:	4b45      	ldr	r3, [pc, #276]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f0      	bne.n	8005f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fb0:	4b42      	ldr	r3, [pc, #264]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	051b      	lsls	r3, r3, #20
 8005fbe:	493f      	ldr	r1, [pc, #252]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	025b      	lsls	r3, r3, #9
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ff4:	4931      	ldr	r1, [pc, #196]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ffa:	4b30      	ldr	r3, [pc, #192]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	492d      	ldr	r1, [pc, #180]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006008:	4313      	orrs	r3, r2
 800600a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800600c:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	4928      	ldr	r1, [pc, #160]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 800601a:	4313      	orrs	r3, r2
 800601c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800601e:	4b27      	ldr	r3, [pc, #156]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4a26      	ldr	r2, [pc, #152]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <RCCEx_PLL3_Config+0x160>)
 8006030:	4013      	ands	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	69d2      	ldr	r2, [r2, #28]
 8006036:	00d2      	lsls	r2, r2, #3
 8006038:	4920      	ldr	r1, [pc, #128]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 800603a:	4313      	orrs	r3, r2
 800603c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800603e:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800605a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800605c:	e00f      	b.n	800607e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d106      	bne.n	8006072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006064:	4b15      	ldr	r3, [pc, #84]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4a14      	ldr	r2, [pc, #80]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 800606a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800606e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006070:	e005      	b.n	800607e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4a11      	ldr	r2, [pc, #68]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a0e      	ldr	r2, [pc, #56]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608a:	f7fa fa61 	bl	8000550 <HAL_GetTick>
 800608e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006090:	e008      	b.n	80060a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006092:	f7fa fa5d 	bl	8000550 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e006      	b.n	80060b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <RCCEx_PLL3_Config+0x15c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	58024400 	.word	0x58024400
 80060c0:	ffff0007 	.word	0xffff0007

080060c4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d904      	bls.n	80060e2 <HAL_SAI_InitProtocol+0x1e>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3b03      	subs	r3, #3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d812      	bhi.n	8006106 <HAL_SAI_InitProtocol+0x42>
 80060e0:	e008      	b.n	80060f4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fae3 	bl	80066b4 <SAI_InitI2S>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]
      break;
 80060f2:	e00b      	b.n	800610c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fb8c 	bl	8006818 <SAI_InitPCM>
 8006100:	4603      	mov	r3, r0
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	e002      	b.n	800610c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
      break;
 800610a:	bf00      	nop
  }

  if (status == HAL_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d104      	bne.n	800611c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f808 	bl	8006128 <HAL_SAI_Init>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1fb      	b.n	8006532 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006140:	2b01      	cmp	r3, #1
 8006142:	d113      	bne.n	800616c <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a96      	ldr	r2, [pc, #600]	; (80063a4 <HAL_SAI_Init+0x27c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_SAI_Init+0x30>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a95      	ldr	r2, [pc, #596]	; (80063a8 <HAL_SAI_Init+0x280>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d107      	bne.n	8006168 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800615c:	2b01      	cmp	r3, #1
 800615e:	d103      	bne.n	8006168 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e1e2      	b.n	8006532 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a8c      	ldr	r2, [pc, #560]	; (80063a4 <HAL_SAI_Init+0x27c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_SAI_Init+0x58>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a8c      	ldr	r2, [pc, #560]	; (80063ac <HAL_SAI_Init+0x284>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d102      	bne.n	8006186 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006180:	4b8b      	ldr	r3, [pc, #556]	; (80063b0 <HAL_SAI_Init+0x288>)
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e00e      	b.n	80061a4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a87      	ldr	r2, [pc, #540]	; (80063a8 <HAL_SAI_Init+0x280>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_SAI_Init+0x72>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a87      	ldr	r2, [pc, #540]	; (80063b4 <HAL_SAI_Init+0x28c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d102      	bne.n	80061a0 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800619a:	4b87      	ldr	r3, [pc, #540]	; (80063b8 <HAL_SAI_Init+0x290>)
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e001      	b.n	80061a4 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e1c6      	b.n	8006532 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 ff21 	bl	8007000 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fbe4 	bl	800698c <SAI_Disable>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e1b1      	b.n	8006532 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d00c      	beq.n	80061f8 <HAL_SAI_Init+0xd0>
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d80d      	bhi.n	80061fe <HAL_SAI_Init+0xd6>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_SAI_Init+0xc4>
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d003      	beq.n	80061f2 <HAL_SAI_Init+0xca>
 80061ea:	e008      	b.n	80061fe <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80061f0:	e008      	b.n	8006204 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80061f2:	2310      	movs	r3, #16
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80061f6:	e005      	b.n	8006204 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80061f8:	2320      	movs	r3, #32
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80061fc:	e002      	b.n	8006204 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006202:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b05      	cmp	r3, #5
 800620a:	d822      	bhi.n	8006252 <HAL_SAI_Init+0x12a>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <HAL_SAI_Init+0xec>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006233 	.word	0x08006233
 800621c:	0800623b 	.word	0x0800623b
 8006220:	08006253 	.word	0x08006253
 8006224:	08006253 	.word	0x08006253
 8006228:	08006243 	.word	0x08006243
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
      break;
 8006230:	e012      	b.n	8006258 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006236:	61fb      	str	r3, [r7, #28]
      break;
 8006238:	e00e      	b.n	8006258 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800623a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623e:	61fb      	str	r3, [r7, #28]
      break;
 8006240:	e00a      	b.n	8006258 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006246:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	f043 0303 	orr.w	r3, r3, #3
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006250:	e002      	b.n	8006258 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
      break;
 8006256:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8084 	beq.w	8006370 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a4c      	ldr	r2, [pc, #304]	; (80063a4 <HAL_SAI_Init+0x27c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_SAI_Init+0x158>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a4c      	ldr	r2, [pc, #304]	; (80063ac <HAL_SAI_Init+0x284>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d104      	bne.n	800628a <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006280:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006284:	f7fe fd86 	bl	8004d94 <HAL_RCCEx_GetPeriphCLKFreq>
 8006288:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a46      	ldr	r2, [pc, #280]	; (80063a8 <HAL_SAI_Init+0x280>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d104      	bne.n	800629e <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006294:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006298:	f7fe fd7c 	bl	8004d94 <HAL_RCCEx_GetPeriphCLKFreq>
 800629c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a44      	ldr	r2, [pc, #272]	; (80063b4 <HAL_SAI_Init+0x28c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d104      	bne.n	80062b2 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80062a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80062ac:	f7fe fd72 	bl	8004d94 <HAL_RCCEx_GetPeriphCLKFreq>
 80062b0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062ba:	d120      	bne.n	80062fe <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d102      	bne.n	80062ca <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e00a      	b.n	80062e0 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d103      	bne.n	80062da <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80062d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e002      	b.n	80062e0 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4619      	mov	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	e017      	b.n	800632e <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006306:	d101      	bne.n	800630c <HAL_SAI_Init+0x1e4>
 8006308:	2302      	movs	r3, #2
 800630a:	e000      	b.n	800630e <HAL_SAI_Init+0x1e6>
 800630c:	2301      	movs	r3, #1
 800630e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4619      	mov	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	fb02 f303 	mul.w	r3, r2, r3
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	fbb1 f3f3 	udiv	r3, r1, r3
 800632c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <HAL_SAI_Init+0x294>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	08da      	lsrs	r2, r3, #3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800633c:	6939      	ldr	r1, [r7, #16]
 800633e:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <HAL_SAI_Init+0x294>)
 8006340:	fba3 2301 	umull	r2, r3, r3, r1
 8006344:	08da      	lsrs	r2, r3, #3
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	1aca      	subs	r2, r1, r3
 8006350:	2a08      	cmp	r2, #8
 8006352:	d904      	bls.n	800635e <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	2b04      	cmp	r3, #4
 8006364:	d104      	bne.n	8006370 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	085a      	lsrs	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_SAI_Init+0x258>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d109      	bne.n	8006394 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_SAI_Init+0x264>
 8006388:	2300      	movs	r3, #0
 800638a:	e001      	b.n	8006390 <HAL_SAI_Init+0x268>
 800638c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	e017      	b.n	80063c4 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	2b01      	cmp	r3, #1
 800639a:	d111      	bne.n	80063c0 <HAL_SAI_Init+0x298>
 800639c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a0:	e00f      	b.n	80063c2 <HAL_SAI_Init+0x29a>
 80063a2:	bf00      	nop
 80063a4:	40015804 	.word	0x40015804
 80063a8:	58005404 	.word	0x58005404
 80063ac:	40015824 	.word	0x40015824
 80063b0:	40015800 	.word	0x40015800
 80063b4:	58005424 	.word	0x58005424
 80063b8:	58005400 	.word	0x58005400
 80063bc:	cccccccd 	.word	0xcccccccd
 80063c0:	2300      	movs	r3, #0
 80063c2:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b5b      	ldr	r3, [pc, #364]	; (800653c <HAL_SAI_Init+0x414>)
 80063d0:	400b      	ands	r3, r1
 80063d2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063e8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	431a      	orrs	r2, r3
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80063fc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006408:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	051b      	lsls	r3, r3, #20
 8006410:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006416:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6859      	ldr	r1, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4b43      	ldr	r3, [pc, #268]	; (8006540 <HAL_SAI_Init+0x418>)
 8006432:	400b      	ands	r3, r1
 8006434:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6859      	ldr	r1, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6899      	ldr	r1, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b39      	ldr	r3, [pc, #228]	; (8006544 <HAL_SAI_Init+0x41c>)
 8006460:	400b      	ands	r3, r1
 8006462:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6899      	ldr	r1, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006474:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800647a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006480:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	3b01      	subs	r3, #1
 8006488:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800648a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f24f 0320 	movw	r3, #61472	; 0xf020
 80064a2:	400b      	ands	r3, r1
 80064a4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68d9      	ldr	r1, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ba:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064bc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	3b01      	subs	r3, #1
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_SAI_Init+0x420>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_SAI_Init+0x3bc>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1b      	ldr	r2, [pc, #108]	; (800654c <HAL_SAI_Init+0x424>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d119      	bne.n	8006518 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	f023 0201 	bic.w	r2, r3, #1
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d10e      	bne.n	8006518 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	3b01      	subs	r3, #1
 8006504:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006506:	431a      	orrs	r2, r3
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3728      	adds	r7, #40	; 0x28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	f005c010 	.word	0xf005c010
 8006540:	ffff1ff0 	.word	0xffff1ff0
 8006544:	fff88000 	.word	0xfff88000
 8006548:	40015804 	.word	0x40015804
 800654c:	58005404 	.word	0x58005404

08006550 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_SAI_Receive_DMA+0x1a>
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e079      	b.n	8006662 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b01      	cmp	r3, #1
 8006578:	d172      	bne.n	8006660 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_SAI_Receive_DMA+0x38>
 8006584:	2302      	movs	r3, #2
 8006586:	e06c      	b.n	8006662 <HAL_SAI_Receive_DMA+0x112>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2222      	movs	r2, #34	; 0x22
 80065b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065bc:	4a2b      	ldr	r2, [pc, #172]	; (800666c <HAL_SAI_Receive_DMA+0x11c>)
 80065be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <HAL_SAI_Receive_DMA+0x120>)
 80065c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	4a28      	ldr	r2, [pc, #160]	; (8006674 <HAL_SAI_Receive_DMA+0x124>)
 80065d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065da:	2200      	movs	r2, #0
 80065dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	331c      	adds	r3, #28
 80065ea:	4619      	mov	r1, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f0:	461a      	mov	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80065f8:	f7fa fd0a 	bl	8001010 <HAL_DMA_Start_IT>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e029      	b.n	8006662 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800660e:	2100      	movs	r1, #0
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f983 	bl	800691c <SAI_InterruptFlag>
 8006616:	4601      	mov	r1, r0
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006634:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d107      	bne.n	8006654 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006652:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e000      	b.n	8006662 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	08006a61 	.word	0x08006a61
 8006670:	08006a01 	.word	0x08006a01
 8006674:	08006a7d 	.word	0x08006a7d

08006678 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <SAI_InitI2S+0x2e>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d103      	bne.n	80066ea <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	651a      	str	r2, [r3, #80]	; 0x50
 80066e8:	e002      	b.n	80066f0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80066f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066fe:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e077      	b.n	800680a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800672c:	665a      	str	r2, [r3, #100]	; 0x64
 800672e:	e006      	b.n	800673e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006736:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	665a      	str	r2, [r3, #100]	; 0x64
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d84f      	bhi.n	80067e4 <SAI_InitI2S+0x130>
 8006744:	a201      	add	r2, pc, #4	; (adr r2, 800674c <SAI_InitI2S+0x98>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	0800675d 	.word	0x0800675d
 8006750:	0800677f 	.word	0x0800677f
 8006754:	080067a1 	.word	0x080067a1
 8006758:	080067c3 	.word	0x080067c3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2280      	movs	r2, #128	; 0x80
 8006760:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	085b      	lsrs	r3, r3, #1
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800677c:	e035      	b.n	80067ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2280      	movs	r2, #128	; 0x80
 8006782:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	019a      	lsls	r2, r3, #6
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2280      	movs	r2, #128	; 0x80
 800679c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800679e:	e024      	b.n	80067ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	22c0      	movs	r2, #192	; 0xc0
 80067a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	019a      	lsls	r2, r3, #6
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2280      	movs	r2, #128	; 0x80
 80067be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80067c0:	e013      	b.n	80067ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	22e0      	movs	r2, #224	; 0xe0
 80067c6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	019a      	lsls	r2, r3, #6
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2280      	movs	r2, #128	; 0x80
 80067e0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80067e2:	e002      	b.n	80067ea <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
      break;
 80067e8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d10b      	bne.n	8006808 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d102      	bne.n	80067fc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2210      	movs	r2, #16
 80067fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d102      	bne.n	8006808 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2208      	movs	r2, #8
 8006806:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <SAI_InitPCM+0x2e>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d103      	bne.n	800684e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
 800684c:	e002      	b.n	8006854 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006860:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006868:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800687c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b04      	cmp	r3, #4
 8006882:	d103      	bne.n	800688c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	659a      	str	r2, [r3, #88]	; 0x58
 800688a:	e002      	b.n	8006892 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	220d      	movs	r2, #13
 8006890:	659a      	str	r2, [r3, #88]	; 0x58
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d837      	bhi.n	8006908 <SAI_InitPCM+0xf0>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <SAI_InitPCM+0x88>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068c7 	.word	0x080068c7
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080068f3 	.word	0x080068f3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2240      	movs	r2, #64	; 0x40
 80068c2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80068c4:	e023      	b.n	800690e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2280      	movs	r2, #128	; 0x80
 80068ca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2280      	movs	r2, #128	; 0x80
 80068d8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80068da:	e018      	b.n	800690e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	22c0      	movs	r2, #192	; 0xc0
 80068e0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2280      	movs	r2, #128	; 0x80
 80068ee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80068f0:	e00d      	b.n	800690e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	22e0      	movs	r2, #224	; 0xe0
 80068f6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006906:	e002      	b.n	800690e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
      break;
 800690c:	bf00      	nop
  }

  return status;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006928:	2301      	movs	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d103      	bne.n	800693a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f043 0308 	orr.w	r3, r3, #8
 8006938:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	2b08      	cmp	r3, #8
 8006940:	d10b      	bne.n	800695a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006946:	2b03      	cmp	r3, #3
 8006948:	d003      	beq.n	8006952 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d103      	bne.n	800695a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f043 0310 	orr.w	r3, r3, #16
 8006958:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d003      	beq.n	800696a <SAI_InterruptFlag+0x4e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d104      	bne.n	8006974 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e003      	b.n	800697c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f043 0304 	orr.w	r3, r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800697c:	68fb      	ldr	r3, [r7, #12]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006994:	4b18      	ldr	r3, [pc, #96]	; (80069f8 <SAI_Disable+0x6c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <SAI_Disable+0x70>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	0b1b      	lsrs	r3, r3, #12
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80069b6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	72fb      	strb	r3, [r7, #11]
      break;
 80069d2:	e009      	b.n	80069e8 <SAI_Disable+0x5c>
    }
    count--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e7      	bne.n	80069b8 <SAI_Disable+0x2c>

  return status;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	24000410 	.word	0x24000410
 80069fc:	95cbec1b 	.word	0x95cbec1b

08006a00 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a16:	d01c      	beq.n	8006a52 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006a26:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006a30:	2100      	movs	r1, #0
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff ff72 	bl	800691c <SAI_InterruptFlag>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	43d9      	mvns	r1, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	400a      	ands	r2, r1
 8006a48:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff fe10 	bl	8006678 <HAL_SAI_RxCpltCallback>
#endif
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fe0c 	bl	800668c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fb fc54 	bl	8002338 <HAL_DMA_GetError>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d01d      	beq.n	8006ad2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006ab4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7ff ff68 	bl	800698c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fde7 	bl	80066a0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ae6:	f7f9 fcad 	bl	8000444 <HAL_Init>
  BSP_LED_Init(LED1);
 8006aea:	2000      	movs	r0, #0
 8006aec:	f7f9 fc10 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8006af0:	2000      	movs	r0, #0
 8006af2:	f7f9 fc89 	bl	8000408 <BSP_LED_Off>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006af6:	f000 f83d 	bl	8006b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006afa:	f000 f9cd 	bl	8006e98 <MX_GPIO_Init>
  MX_BDMA_Init();
 8006afe:	f000 f97b 	bl	8006df8 <MX_BDMA_Init>
  MX_SAI4_Init();
 8006b02:	f000 f91b 	bl	8006d3c <MX_SAI4_Init>

  MX_CRC_Init();
 8006b06:	f000 f8a3 	bl	8006c50 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8006b0a:	f000 fa13 	bl	8006f34 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8006b0e:	f000 f99b 	bl	8006e48 <MX_DMA_Init>
  MX_SAI1_Init();
 8006b12:	f000 f8df 	bl	8006cd4 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */

  // for pdm: input buffer is uint8
  // with length >= (48 * 64 * 1/8) = 384
//  uint8_t pdm_buffer[4096] = {0};
  *(volatile uint8_t *)DMA_LOC = 'A';
 8006b16:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8006b1a:	2241      	movs	r2, #65	; 0x41
 8006b1c:	701a      	strb	r2, [r3, #0]
  uint8_t *pdm_buffer = (uint8_t*)DMA_LOC;
 8006b1e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8006b22:	f242 0204 	movw	r2, #8196	; 0x2004
 8006b26:	443a      	add	r2, r7
 8006b28:	6013      	str	r3, [r2, #0]

  // for pdm: output buffer is uint16
  // with length >= 48
  uint16_t pcm_buffer[4096] = {0};
 8006b2a:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <main+0x90>)
 8006b2c:	f242 0208 	movw	r2, #8200	; 0x2008
 8006b30:	443a      	add	r2, r7
 8006b32:	4413      	add	r3, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	f002 fba5 	bl	800928c <memset>

  /* INITIALIZE */
  HAL_SAI_MspInit(&hsai_BlockA4);
 8006b42:	480b      	ldr	r0, [pc, #44]	; (8006b70 <main+0x94>)
 8006b44:	f000 fa5c 	bl	8007000 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 8006b48:	4809      	ldr	r0, [pc, #36]	; (8006b70 <main+0x94>)
 8006b4a:	f7ff faed 	bl	8006128 <HAL_SAI_Init>

  // polling mode - SIZE = # BYTES
//  HAL_SAI_Receive(&hsai_BlockA4, pdm_buffer, 64, 1000);
//  uint32_t pdm_status = PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);

  HAL_StatusTypeDef dma_status = HAL_SAI_Receive_DMA(&hsai_BlockA4, pdm_buffer, 64);
 8006b4e:	2240      	movs	r2, #64	; 0x40
 8006b50:	f242 0304 	movw	r3, #8196	; 0x2004
 8006b54:	443b      	add	r3, r7
 8006b56:	6819      	ldr	r1, [r3, #0]
 8006b58:	4805      	ldr	r0, [pc, #20]	; (8006b70 <main+0x94>)
 8006b5a:	f7ff fcf9 	bl	8006550 <HAL_SAI_Receive_DMA>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f242 0203 	movw	r2, #8195	; 0x2003
 8006b64:	443a      	add	r2, r7
 8006b66:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8006b68:	e7fe      	b.n	8006b68 <main+0x8c>
 8006b6a:	bf00      	nop
 8006b6c:	ffffdff8 	.word	0xffffdff8
 8006b70:	24000564 	.word	0x24000564

08006b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b09c      	sub	sp, #112	; 0x70
 8006b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7e:	224c      	movs	r2, #76	; 0x4c
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f002 fb82 	bl	800928c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b88:	1d3b      	adds	r3, r7, #4
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 fb7c 	bl	800928c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006b94:	2004      	movs	r0, #4
 8006b96:	f7fc fa9d 	bl	80030d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	603b      	str	r3, [r7, #0]
 8006b9e:	4b2b      	ldr	r3, [pc, #172]	; (8006c4c <SystemClock_Config+0xd8>)
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <SystemClock_Config+0xd8>)
 8006ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ba8:	6193      	str	r3, [r2, #24]
 8006baa:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <SystemClock_Config+0xd8>)
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006bb6:	bf00      	nop
 8006bb8:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <SystemClock_Config+0xd8>)
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc4:	d1f8      	bne.n	8006bb8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006bce:	2340      	movs	r3, #64	; 0x40
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006bda:	2304      	movs	r3, #4
 8006bdc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006bde:	2318      	movs	r3, #24
 8006be0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006be2:	2301      	movs	r3, #1
 8006be4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8006be6:	237d      	movs	r3, #125	; 0x7d
 8006be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006bea:	2302      	movs	r3, #2
 8006bec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006bee:	230c      	movs	r3, #12
 8006bf0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fc fac2 	bl	8003188 <HAL_RCC_OscConfig>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006c0a:	f000 f98d 	bl	8006f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c0e:	233f      	movs	r3, #63	; 0x3f
 8006c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c12:	2303      	movs	r3, #3
 8006c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c30:	1d3b      	adds	r3, r7, #4
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fc fe53 	bl	80038e0 <HAL_RCC_ClockConfig>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006c40:	f000 f972 	bl	8006f28 <Error_Handler>
  }
}
 8006c44:	bf00      	nop
 8006c46:	3770      	adds	r7, #112	; 0x70
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	58024800 	.word	0x58024800

08006c50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c58:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <MX_CRC_Init+0x7c>)
 8006c5a:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006c74:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006c7a:	4813      	ldr	r0, [pc, #76]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c7c:	f7f9 fd84 	bl	8000788 <HAL_CRC_Init>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8006c86:	f000 f94f 	bl	8006f28 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <MX_CRC_Init+0x80>)
 8006c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ca0:	4a0b      	ldr	r2, [pc, #44]	; (8006cd0 <MX_CRC_Init+0x80>)
 8006ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <MX_CRC_Init+0x80>)
 8006cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006cb8:	4803      	ldr	r0, [pc, #12]	; (8006cc8 <MX_CRC_Init+0x78>)
 8006cba:	f000 f97f 	bl	8006fbc <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	240004a8 	.word	0x240004a8
 8006ccc:	58024c00 	.word	0x58024c00
 8006cd0:	58024400 	.word	0x58024400

08006cd4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006cd8:	4b16      	ldr	r3, [pc, #88]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006cda:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <MX_SAI1_Init+0x64>)
 8006cdc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006ce4:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8006cf0:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006cf2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006cf6:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006d18:	2302      	movs	r3, #2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4805      	ldr	r0, [pc, #20]	; (8006d34 <MX_SAI1_Init+0x60>)
 8006d20:	f7ff f9d0 	bl	80060c4 <HAL_SAI_InitProtocol>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <MX_SAI1_Init+0x5a>
  {
    Error_Handler();
 8006d2a:	f000 f8fd 	bl	8006f28 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	240004cc 	.word	0x240004cc
 8006d38:	40015824 	.word	0x40015824

08006d3c <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8006d40:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d42:	4a2c      	ldr	r2, [pc, #176]	; (8006df4 <MX_SAI4_Init+0xb8>)
 8006d44:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8006d46:	4b2a      	ldr	r3, [pc, #168]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 8006d52:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d54:	2240      	movs	r2, #64	; 0x40
 8006d56:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006d5e:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8006d64:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8006d70:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d76:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006d98:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006da2:	2208      	movs	r2, #8
 8006da4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006db4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8006dcc:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dd8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8006dda:	4805      	ldr	r0, [pc, #20]	; (8006df0 <MX_SAI4_Init+0xb4>)
 8006ddc:	f7ff f9a4 	bl	8006128 <HAL_SAI_Init>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 8006de6:	f000 f89f 	bl	8006f28 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8006dea:	bf00      	nop
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	24000564 	.word	0x24000564
 8006df4:	58005404 	.word	0x58005404

08006df8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006dfe:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <MX_BDMA_Init+0x4c>)
 8006e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e04:	4a0f      	ldr	r2, [pc, #60]	; (8006e44 <MX_BDMA_Init+0x4c>)
 8006e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <MX_BDMA_Init+0x4c>)
 8006e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
  //(+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.


  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	2080      	movs	r0, #128	; 0x80
 8006e22:	f7f9 fc7c 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006e26:	2080      	movs	r0, #128	; 0x80
 8006e28:	f7f9 fc93 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	2082      	movs	r0, #130	; 0x82
 8006e32:	f7f9 fc74 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8006e36:	2082      	movs	r0, #130	; 0x82
 8006e38:	f7f9 fc8b 	bl	8000752 <HAL_NVIC_EnableIRQ>

}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58024400 	.word	0x58024400

08006e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <MX_DMA_Init+0x4c>)
 8006e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e54:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <MX_DMA_Init+0x4c>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <MX_DMA_Init+0x4c>)
 8006e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	607b      	str	r3, [r7, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	200c      	movs	r0, #12
 8006e72:	f7f9 fc54 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006e76:	200c      	movs	r0, #12
 8006e78:	f7f9 fc6b 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	2066      	movs	r0, #102	; 0x66
 8006e82:	f7f9 fc4c 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8006e86:	2066      	movs	r0, #102	; 0x66
 8006e88:	f7f9 fc63 	bl	8000752 <HAL_NVIC_EnableIRQ>

}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	58024400 	.word	0x58024400

08006e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e9e:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ea4:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eae:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ec2:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006ec4:	f043 0310 	orr.w	r3, r3, #16
 8006ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ecc:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ee0:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006ee2:	f043 0308 	orr.w	r3, r3, #8
 8006ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006f00:	f043 0320 	orr.w	r3, r3, #32
 8006f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <MX_GPIO_Init+0x8c>)
 8006f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]

}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	58024400 	.word	0x58024400

08006f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f2c:	b672      	cpsid	i
}
 8006f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f30:	e7fe      	b.n	8006f30 <Error_Handler+0x8>
	...

08006f34 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8006f38:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8006f44:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f46:	4a0e      	ldr	r2, [pc, #56]	; (8006f80 <MX_PDM2PCM_Init+0x4c>)
 8006f48:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8006f56:	4809      	ldr	r0, [pc, #36]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f58:	f001 ffa4 	bl	8008ea4 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <MX_PDM2PCM_Init+0x50>)
 8006f5e:	2202      	movs	r2, #2
 8006f60:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <MX_PDM2PCM_Init+0x50>)
 8006f64:	2210      	movs	r2, #16
 8006f66:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <MX_PDM2PCM_Init+0x50>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8006f6e:	4905      	ldr	r1, [pc, #20]	; (8006f84 <MX_PDM2PCM_Init+0x50>)
 8006f70:	4802      	ldr	r0, [pc, #8]	; (8006f7c <MX_PDM2PCM_Init+0x48>)
 8006f72:	f002 f867 	bl	8009044 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	24000674 	.word	0x24000674
 8006f80:	7d70a3d6 	.word	0x7d70a3d6
 8006f84:	24000738 	.word	0x24000738

08006f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <HAL_MspInit+0x30>)
 8006f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f94:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <HAL_MspInit+0x30>)
 8006f96:	f043 0302 	orr.w	r3, r3, #2
 8006f9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f9e:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_MspInit+0x30>)
 8006fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	58024400 	.word	0x58024400

08006fbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a0b      	ldr	r2, [pc, #44]	; (8006ff8 <HAL_CRC_MspInit+0x3c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d10e      	bne.n	8006fec <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <HAL_CRC_MspInit+0x40>)
 8006fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <HAL_CRC_MspInit+0x40>)
 8006fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fde:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <HAL_CRC_MspInit+0x40>)
 8006fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	58024c00 	.word	0x58024c00
 8006ffc:	58024400 	.word	0x58024400

08007000 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b0ba      	sub	sp, #232	; 0xe8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007008:	f107 0310 	add.w	r3, r7, #16
 800700c:	22b4      	movs	r2, #180	; 0xb4
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f002 f93b 	bl	800928c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4aaa      	ldr	r2, [pc, #680]	; (80072c4 <HAL_SAI_MspInit+0x2c4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	f040 80a5 	bne.w	800716c <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8007022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007026:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8007028:	2300      	movs	r3, #0
 800702a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800702c:	f107 0310 	add.w	r3, r7, #16
 8007030:	4618      	mov	r0, r3
 8007032:	f7fc ffb5 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800703c:	f7ff ff74 	bl	8006f28 <Error_Handler>
    }

      if (SAI1_client == 0)
 8007040:	4ba1      	ldr	r3, [pc, #644]	; (80072c8 <HAL_SAI_MspInit+0x2c8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10e      	bne.n	8007066 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007048:	4ba0      	ldr	r3, [pc, #640]	; (80072cc <HAL_SAI_MspInit+0x2cc>)
 800704a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800704e:	4a9f      	ldr	r2, [pc, #636]	; (80072cc <HAL_SAI_MspInit+0x2cc>)
 8007050:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007054:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007058:	4b9c      	ldr	r3, [pc, #624]	; (80072cc <HAL_SAI_MspInit+0x2cc>)
 800705a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800705e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8007066:	4b98      	ldr	r3, [pc, #608]	; (80072c8 <HAL_SAI_MspInit+0x2c8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	4a96      	ldr	r2, [pc, #600]	; (80072c8 <HAL_SAI_MspInit+0x2c8>)
 800706e:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007070:	2308      	movs	r3, #8
 8007072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007076:	2302      	movs	r3, #2
 8007078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007082:	2300      	movs	r3, #0
 8007084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007088:	2306      	movs	r3, #6
 800708a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800708e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007092:	4619      	mov	r1, r3
 8007094:	488e      	ldr	r0, [pc, #568]	; (80072d0 <HAL_SAI_MspInit+0x2d0>)
 8007096:	f7fb fe5b 	bl	8002d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 800709a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800709e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a2:	2302      	movs	r3, #2
 80070a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80070b4:	2306      	movs	r3, #6
 80070b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80070ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80070be:	4619      	mov	r1, r3
 80070c0:	4884      	ldr	r0, [pc, #528]	; (80072d4 <HAL_SAI_MspInit+0x2d4>)
 80070c2:	f7fb fe45 	bl	8002d50 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 80070c6:	4b84      	ldr	r3, [pc, #528]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070c8:	4a84      	ldr	r2, [pc, #528]	; (80072dc <HAL_SAI_MspInit+0x2dc>)
 80070ca:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80070cc:	4b82      	ldr	r3, [pc, #520]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070ce:	2258      	movs	r2, #88	; 0x58
 80070d0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070d2:	4b81      	ldr	r3, [pc, #516]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070d4:	2240      	movs	r2, #64	; 0x40
 80070d6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80070d8:	4b7f      	ldr	r3, [pc, #508]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070da:	2200      	movs	r2, #0
 80070dc:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80070de:	4b7e      	ldr	r3, [pc, #504]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070e4:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80070e6:	4b7c      	ldr	r3, [pc, #496]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ec:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80070ee:	4b7a      	ldr	r3, [pc, #488]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070f4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80070f6:	4b78      	ldr	r3, [pc, #480]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 80070f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070fc:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80070fe:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 8007100:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007104:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007106:	4b74      	ldr	r3, [pc, #464]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 8007108:	2200      	movs	r2, #0
 800710a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800710c:	4872      	ldr	r0, [pc, #456]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 800710e:	f7f9 fc25 	bl	800095c <HAL_DMA_Init>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8007118:	f7ff ff06 	bl	8006f28 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800711c:	2306      	movs	r3, #6
 800711e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007122:	2300      	movs	r3, #0
 8007124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007128:	2300      	movs	r3, #0
 800712a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007134:	2301      	movs	r3, #1
 8007136:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800713a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800713e:	4619      	mov	r1, r3
 8007140:	4865      	ldr	r0, [pc, #404]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 8007142:	f7fb fced 	bl	8002b20 <HAL_DMAEx_ConfigMuxSync>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 800714c:	f7ff feec 	bl	8006f28 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a61      	ldr	r2, [pc, #388]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 8007154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007158:	4a5f      	ldr	r2, [pc, #380]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a5d      	ldr	r2, [pc, #372]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 8007162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007166:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <HAL_SAI_MspInit+0x2d8>)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5b      	ldr	r2, [pc, #364]	; (80072e0 <HAL_SAI_MspInit+0x2e0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	f040 80a1 	bne.w	80072ba <HAL_SAI_MspInit+0x2ba>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8007178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800717e:	2300      	movs	r3, #0
 8007180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007184:	f107 0310 	add.w	r3, r7, #16
 8007188:	4618      	mov	r0, r3
 800718a:	f7fc ff09 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8007194:	f7ff fec8 	bl	8006f28 <Error_Handler>
    }

    if (SAI4_client == 0)
 8007198:	4b52      	ldr	r3, [pc, #328]	; (80072e4 <HAL_SAI_MspInit+0x2e4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10e      	bne.n	80071be <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80071a0:	4b4a      	ldr	r3, [pc, #296]	; (80072cc <HAL_SAI_MspInit+0x2cc>)
 80071a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a6:	4a49      	ldr	r2, [pc, #292]	; (80072cc <HAL_SAI_MspInit+0x2cc>)
 80071a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071b0:	4b46      	ldr	r3, [pc, #280]	; (80072cc <HAL_SAI_MspInit+0x2cc>)
 80071b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 80071be:	4b49      	ldr	r3, [pc, #292]	; (80072e4 <HAL_SAI_MspInit+0x2e4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	4a47      	ldr	r2, [pc, #284]	; (80072e4 <HAL_SAI_MspInit+0x2e4>)
 80071c6:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80071c8:	2330      	movs	r3, #48	; 0x30
 80071ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071ce:	2312      	movs	r3, #18
 80071d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071da:	2300      	movs	r3, #0
 80071dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80071e0:	230a      	movs	r3, #10
 80071e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4838      	ldr	r0, [pc, #224]	; (80072d0 <HAL_SAI_MspInit+0x2d0>)
 80071ee:	f7fb fdaf 	bl	8002d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80071f2:	2340      	movs	r3, #64	; 0x40
 80071f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071f8:	2312      	movs	r3, #18
 80071fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800720a:	2301      	movs	r3, #1
 800720c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007210:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007214:	4619      	mov	r1, r3
 8007216:	4834      	ldr	r0, [pc, #208]	; (80072e8 <HAL_SAI_MspInit+0x2e8>)
 8007218:	f7fb fd9a 	bl	8002d50 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800721c:	4b33      	ldr	r3, [pc, #204]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 800721e:	4a34      	ldr	r2, [pc, #208]	; (80072f0 <HAL_SAI_MspInit+0x2f0>)
 8007220:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8007222:	4b32      	ldr	r3, [pc, #200]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 8007224:	220f      	movs	r2, #15
 8007226:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007228:	4b30      	ldr	r3, [pc, #192]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800722e:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 8007230:	2200      	movs	r2, #0
 8007232:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8007234:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 8007236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800723a:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800723c:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 800723e:	2200      	movs	r2, #0
 8007240:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007242:	4b2a      	ldr	r3, [pc, #168]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 8007244:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007248:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800724a:	4b28      	ldr	r3, [pc, #160]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 800724c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007250:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 8007254:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007258:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800725a:	4824      	ldr	r0, [pc, #144]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 800725c:	f7f9 fb7e 	bl	800095c <HAL_DMA_Init>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_SAI_MspInit+0x26a>
    {
      Error_Handler();
 8007266:	f7ff fe5f 	bl	8006f28 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800726a:	230e      	movs	r3, #14
 800726c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007276:	2300      	movs	r3, #0
 8007278:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8007288:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800728c:	4619      	mov	r1, r3
 800728e:	4817      	ldr	r0, [pc, #92]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 8007290:	f7fb fc46 	bl	8002b20 <HAL_DMAEx_ConfigMuxSync>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 800729a:	f7ff fe45 	bl	8006f28 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a12      	ldr	r2, [pc, #72]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 80072a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80072a6:	4a11      	ldr	r2, [pc, #68]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a0f      	ldr	r2, [pc, #60]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 80072b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80072b4:	4a0d      	ldr	r2, [pc, #52]	; (80072ec <HAL_SAI_MspInit+0x2ec>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80072ba:	bf00      	nop
 80072bc:	37e8      	adds	r7, #232	; 0xe8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40015824 	.word	0x40015824
 80072c8:	2400049c 	.word	0x2400049c
 80072cc:	58024400 	.word	0x58024400
 80072d0:	58021000 	.word	0x58021000
 80072d4:	58021400 	.word	0x58021400
 80072d8:	240006c0 	.word	0x240006c0
 80072dc:	40020028 	.word	0x40020028
 80072e0:	58005404 	.word	0x58005404
 80072e4:	240004a0 	.word	0x240004a0
 80072e8:	58020c00 	.word	0x58020c00
 80072ec:	240005fc 	.word	0x240005fc
 80072f0:	5802541c 	.word	0x5802541c

080072f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072f8:	e7fe      	b.n	80072f8 <NMI_Handler+0x4>

080072fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072fa:	b480      	push	{r7}
 80072fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072fe:	e7fe      	b.n	80072fe <HardFault_Handler+0x4>

08007300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007304:	e7fe      	b.n	8007304 <MemManage_Handler+0x4>

08007306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007306:	b480      	push	{r7}
 8007308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800730a:	e7fe      	b.n	800730a <BusFault_Handler+0x4>

0800730c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007310:	e7fe      	b.n	8007310 <UsageFault_Handler+0x4>

08007312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007312:	b480      	push	{r7}
 8007314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007316:	bf00      	nop
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800732e:	b480      	push	{r7}
 8007330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007332:	bf00      	nop
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007340:	f7f9 f8f2 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007344:	bf00      	nop
 8007346:	bd80      	pop	{r7, pc}

08007348 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800734c:	4802      	ldr	r0, [pc, #8]	; (8007358 <DMA1_Stream1_IRQHandler+0x10>)
 800734e:	f7fa f8c9 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007352:	bf00      	nop
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	240006c0 	.word	0x240006c0

0800735c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8007360:	4802      	ldr	r0, [pc, #8]	; (800736c <DMAMUX1_OVR_IRQHandler+0x10>)
 8007362:	f7fb fca3 	bl	8002cac <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	240006c0 	.word	0x240006c0

08007370 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8007374:	4802      	ldr	r0, [pc, #8]	; (8007380 <DMAMUX2_OVR_IRQHandler+0x10>)
 8007376:	f7fb fc99 	bl	8002cac <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2ri_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800737a:	bf00      	nop
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	240005fc 	.word	0x240005fc

08007384 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8007388:	4803      	ldr	r0, [pc, #12]	; (8007398 <BDMA_Channel1_IRQHandler+0x14>)
 800738a:	f7fa f8ab 	bl	80014e4 <HAL_DMA_IRQHandler>
  BSP_LED_On(LED1);
 800738e:	2000      	movs	r0, #0
 8007390:	f7f9 f81c 	bl	80003cc <BSP_LED_On>

  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8007394:	bf00      	nop
 8007396:	bd80      	pop	{r7, pc}
 8007398:	240005fc 	.word	0x240005fc

0800739c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80073a0:	4b32      	ldr	r3, [pc, #200]	; (800746c <SystemInit+0xd0>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a6:	4a31      	ldr	r2, [pc, #196]	; (800746c <SystemInit+0xd0>)
 80073a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80073b0:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <SystemInit+0xd4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d807      	bhi.n	80073cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80073bc:	4b2c      	ldr	r3, [pc, #176]	; (8007470 <SystemInit+0xd4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f023 030f 	bic.w	r3, r3, #15
 80073c4:	4a2a      	ldr	r2, [pc, #168]	; (8007470 <SystemInit+0xd4>)
 80073c6:	f043 0307 	orr.w	r3, r3, #7
 80073ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80073cc:	4b29      	ldr	r3, [pc, #164]	; (8007474 <SystemInit+0xd8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a28      	ldr	r2, [pc, #160]	; (8007474 <SystemInit+0xd8>)
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80073d8:	4b26      	ldr	r3, [pc, #152]	; (8007474 <SystemInit+0xd8>)
 80073da:	2200      	movs	r2, #0
 80073dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80073de:	4b25      	ldr	r3, [pc, #148]	; (8007474 <SystemInit+0xd8>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4924      	ldr	r1, [pc, #144]	; (8007474 <SystemInit+0xd8>)
 80073e4:	4b24      	ldr	r3, [pc, #144]	; (8007478 <SystemInit+0xdc>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80073ea:	4b21      	ldr	r3, [pc, #132]	; (8007470 <SystemInit+0xd4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80073f6:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <SystemInit+0xd4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 030f 	bic.w	r3, r3, #15
 80073fe:	4a1c      	ldr	r2, [pc, #112]	; (8007470 <SystemInit+0xd4>)
 8007400:	f043 0307 	orr.w	r3, r3, #7
 8007404:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <SystemInit+0xd8>)
 8007408:	2200      	movs	r2, #0
 800740a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800740c:	4b19      	ldr	r3, [pc, #100]	; (8007474 <SystemInit+0xd8>)
 800740e:	2200      	movs	r2, #0
 8007410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007412:	4b18      	ldr	r3, [pc, #96]	; (8007474 <SystemInit+0xd8>)
 8007414:	2200      	movs	r2, #0
 8007416:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007418:	4b16      	ldr	r3, [pc, #88]	; (8007474 <SystemInit+0xd8>)
 800741a:	4a18      	ldr	r2, [pc, #96]	; (800747c <SystemInit+0xe0>)
 800741c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800741e:	4b15      	ldr	r3, [pc, #84]	; (8007474 <SystemInit+0xd8>)
 8007420:	4a17      	ldr	r2, [pc, #92]	; (8007480 <SystemInit+0xe4>)
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007424:	4b13      	ldr	r3, [pc, #76]	; (8007474 <SystemInit+0xd8>)
 8007426:	4a17      	ldr	r2, [pc, #92]	; (8007484 <SystemInit+0xe8>)
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <SystemInit+0xd8>)
 800742c:	2200      	movs	r2, #0
 800742e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007430:	4b10      	ldr	r3, [pc, #64]	; (8007474 <SystemInit+0xd8>)
 8007432:	4a14      	ldr	r2, [pc, #80]	; (8007484 <SystemInit+0xe8>)
 8007434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007436:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <SystemInit+0xd8>)
 8007438:	2200      	movs	r2, #0
 800743a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <SystemInit+0xd8>)
 800743e:	4a11      	ldr	r2, [pc, #68]	; (8007484 <SystemInit+0xe8>)
 8007440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007442:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <SystemInit+0xd8>)
 8007444:	2200      	movs	r2, #0
 8007446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <SystemInit+0xd8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a09      	ldr	r2, [pc, #36]	; (8007474 <SystemInit+0xd8>)
 800744e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <SystemInit+0xd8>)
 8007456:	2200      	movs	r2, #0
 8007458:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <SystemInit+0xec>)
 800745c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007460:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	e000ed00 	.word	0xe000ed00
 8007470:	52002000 	.word	0x52002000
 8007474:	58024400 	.word	0x58024400
 8007478:	eaf6ed7f 	.word	0xeaf6ed7f
 800747c:	02020200 	.word	0x02020200
 8007480:	01ff0000 	.word	0x01ff0000
 8007484:	01010280 	.word	0x01010280
 8007488:	52004000 	.word	0x52004000

0800748c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800748c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007490:	f7ff ff84 	bl	800739c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007494:	480c      	ldr	r0, [pc, #48]	; (80074c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007496:	490d      	ldr	r1, [pc, #52]	; (80074cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007498:	4a0d      	ldr	r2, [pc, #52]	; (80074d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800749a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800749c:	e002      	b.n	80074a4 <LoopCopyDataInit>

0800749e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800749e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074a2:	3304      	adds	r3, #4

080074a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074a8:	d3f9      	bcc.n	800749e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074aa:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80074ac:	4c0a      	ldr	r4, [pc, #40]	; (80074d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80074ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074b0:	e001      	b.n	80074b6 <LoopFillZerobss>

080074b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074b4:	3204      	adds	r2, #4

080074b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074b8:	d3fb      	bcc.n	80074b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80074ba:	f001 fec3 	bl	8009244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074be:	f7ff fb0d 	bl	8006adc <main>
  bx  lr
 80074c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80074c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80074c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80074cc:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 80074d0:	08009910 	.word	0x08009910
  ldr r2, =_sbss
 80074d4:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 80074d8:	24000740 	.word	0x24000740

080074dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074dc:	e7fe      	b.n	80074dc <ADC3_IRQHandler>
	...

080074e0 <D16_GENERIC>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	b089      	sub	sp, #36	; 0x24
 80074e6:	6993      	ldr	r3, [r2, #24]
 80074e8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80074ea:	9103      	str	r1, [sp, #12]
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	69d3      	ldr	r3, [r2, #28]
 80074f0:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80074f4:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80074f8:	9106      	str	r1, [sp, #24]
 80074fa:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 80074fe:	2d00      	cmp	r5, #0
 8007500:	d063      	beq.n	80075ca <D16_GENERIC+0xea>
 8007502:	f001 0520 	and.w	r5, r1, #32
 8007506:	f001 0110 	and.w	r1, r1, #16
 800750a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 80075ec <D16_GENERIC+0x10c>
 800750e:	46c1      	mov	r9, r8
 8007510:	9104      	str	r1, [sp, #16]
 8007512:	2100      	movs	r1, #0
 8007514:	9505      	str	r5, [sp, #20]
 8007516:	e04d      	b.n	80075b4 <D16_GENERIC+0xd4>
 8007518:	5d87      	ldrb	r7, [r0, r6]
 800751a:	7805      	ldrb	r5, [r0, #0]
 800751c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007520:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8007524:	b2fe      	uxtb	r6, r7
 8007526:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800752a:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800752e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8007532:	441d      	add	r5, r3
 8007534:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8007538:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800753c:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8007540:	0a9b      	lsrs	r3, r3, #10
 8007542:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8007546:	4d27      	ldr	r5, [pc, #156]	; (80075e4 <D16_GENERIC+0x104>)
 8007548:	fb26 c505 	smlad	r5, r6, r5, ip
 800754c:	4f26      	ldr	r7, [pc, #152]	; (80075e8 <D16_GENERIC+0x108>)
 800754e:	fb26 fc07 	smuad	ip, r6, r7
 8007552:	9e04      	ldr	r6, [sp, #16]
 8007554:	f101 0801 	add.w	r8, r1, #1
 8007558:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800755c:	b1ae      	cbz	r6, 800758a <D16_GENERIC+0xaa>
 800755e:	442c      	add	r4, r5
 8007560:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007564:	eba4 040a 	sub.w	r4, r4, sl
 8007568:	46aa      	mov	sl, r5
 800756a:	17e7      	asrs	r7, r4, #31
 800756c:	fba4 450b 	umull	r4, r5, r4, fp
 8007570:	e9cd 4500 	strd	r4, r5, [sp]
 8007574:	fb0b 5407 	mla	r4, fp, r7, r5
 8007578:	9401      	str	r4, [sp, #4]
 800757a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800757e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007582:	f145 0500 	adc.w	r5, r5, #0
 8007586:	006c      	lsls	r4, r5, #1
 8007588:	4625      	mov	r5, r4
 800758a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800758e:	042d      	lsls	r5, r5, #16
 8007590:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007594:	2700      	movs	r7, #0
 8007596:	fb01 fb0b 	mul.w	fp, r1, fp
 800759a:	fa1f f188 	uxth.w	r1, r8
 800759e:	fbc9 6705 	smlal	r6, r7, r9, r5
 80075a2:	9e03      	ldr	r6, [sp, #12]
 80075a4:	10bd      	asrs	r5, r7, #2
 80075a6:	f305 050f 	ssat	r5, #16, r5
 80075aa:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80075ae:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80075b0:	428d      	cmp	r5, r1
 80075b2:	d90a      	bls.n	80075ca <D16_GENERIC+0xea>
 80075b4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80075b6:	2d01      	cmp	r5, #1
 80075b8:	b2ee      	uxtb	r6, r5
 80075ba:	d1ad      	bne.n	8007518 <D16_GENERIC+0x38>
 80075bc:	9d05      	ldr	r5, [sp, #20]
 80075be:	f850 7b02 	ldr.w	r7, [r0], #2
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	d0ae      	beq.n	8007524 <D16_GENERIC+0x44>
 80075c6:	ba7f      	rev16	r7, r7
 80075c8:	e7ac      	b.n	8007524 <D16_GENERIC+0x44>
 80075ca:	2000      	movs	r0, #0
 80075cc:	9906      	ldr	r1, [sp, #24]
 80075ce:	61d3      	str	r3, [r2, #28]
 80075d0:	9b07      	ldr	r3, [sp, #28]
 80075d2:	f8c2 c008 	str.w	ip, [r2, #8]
 80075d6:	60d1      	str	r1, [r2, #12]
 80075d8:	6193      	str	r3, [r2, #24]
 80075da:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 80075de:	b009      	add	sp, #36	; 0x24
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	00030001 	.word	0x00030001
 80075e8:	00010003 	.word	0x00010003
 80075ec:	24000000 	.word	0x24000000

080075f0 <D24_GENERIC>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80075f8:	b089      	sub	sp, #36	; 0x24
 80075fa:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80075fc:	9303      	str	r3, [sp, #12]
 80075fe:	6993      	ldr	r3, [r2, #24]
 8007600:	9104      	str	r1, [sp, #16]
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	69d1      	ldr	r1, [r2, #28]
 8007606:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800760a:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800760e:	2e00      	cmp	r6, #0
 8007610:	f000 8088 	beq.w	8007724 <D24_GENERIC+0x134>
 8007614:	f005 0620 	and.w	r6, r5, #32
 8007618:	f005 0510 	and.w	r5, r5, #16
 800761c:	f04f 0c00 	mov.w	ip, #0
 8007620:	f8df e140 	ldr.w	lr, [pc, #320]	; 8007764 <D24_GENERIC+0x174>
 8007624:	9606      	str	r6, [sp, #24]
 8007626:	9505      	str	r5, [sp, #20]
 8007628:	e064      	b.n	80076f4 <D24_GENERIC+0x104>
 800762a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800762e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8007632:	f810 b007 	ldrb.w	fp, [r0, r7]
 8007636:	042d      	lsls	r5, r5, #16
 8007638:	19f0      	adds	r0, r6, r7
 800763a:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800763e:	44a9      	add	r9, r5
 8007640:	fa5f f689 	uxtb.w	r6, r9
 8007644:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8007648:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800764c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8007650:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8007654:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8007658:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800765c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007660:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007664:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007668:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800766c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007670:	4d3a      	ldr	r5, [pc, #232]	; (800775c <D24_GENERIC+0x16c>)
 8007672:	fb26 8705 	smlad	r7, r6, r5, r8
 8007676:	4d3a      	ldr	r5, [pc, #232]	; (8007760 <D24_GENERIC+0x170>)
 8007678:	fb26 3805 	smlad	r8, r6, r5, r3
 800767c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8007680:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8007684:	2301      	movs	r3, #1
 8007686:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800768a:	fb26 f603 	smuad	r6, r6, r3
 800768e:	eb0c 0903 	add.w	r9, ip, r3
 8007692:	eb0b 0306 	add.w	r3, fp, r6
 8007696:	9e05      	ldr	r6, [sp, #20]
 8007698:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800769c:	b1ae      	cbz	r6, 80076ca <D24_GENERIC+0xda>
 800769e:	442c      	add	r4, r5
 80076a0:	9e03      	ldr	r6, [sp, #12]
 80076a2:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80076a6:	1ba4      	subs	r4, r4, r6
 80076a8:	9503      	str	r5, [sp, #12]
 80076aa:	17e7      	asrs	r7, r4, #31
 80076ac:	fba4 450b 	umull	r4, r5, r4, fp
 80076b0:	e9cd 4500 	strd	r4, r5, [sp]
 80076b4:	fb0b 5407 	mla	r4, fp, r7, r5
 80076b8:	9401      	str	r4, [sp, #4]
 80076ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 80076be:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80076c2:	f145 0500 	adc.w	r5, r5, #0
 80076c6:	006c      	lsls	r4, r5, #1
 80076c8:	4625      	mov	r5, r4
 80076ca:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80076ce:	03ad      	lsls	r5, r5, #14
 80076d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80076d4:	2700      	movs	r7, #0
 80076d6:	fb0c fb0b 	mul.w	fp, ip, fp
 80076da:	fa1f fc89 	uxth.w	ip, r9
 80076de:	fbca 6705 	smlal	r6, r7, sl, r5
 80076e2:	9e04      	ldr	r6, [sp, #16]
 80076e4:	10bd      	asrs	r5, r7, #2
 80076e6:	f305 050f 	ssat	r5, #16, r5
 80076ea:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80076ee:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80076f0:	4565      	cmp	r5, ip
 80076f2:	d917      	bls.n	8007724 <D24_GENERIC+0x134>
 80076f4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80076f6:	f890 9000 	ldrb.w	r9, [r0]
 80076fa:	b2ef      	uxtb	r7, r5
 80076fc:	2d01      	cmp	r5, #1
 80076fe:	b23e      	sxth	r6, r7
 8007700:	d193      	bne.n	800762a <D24_GENERIC+0x3a>
 8007702:	9d06      	ldr	r5, [sp, #24]
 8007704:	b1dd      	cbz	r5, 800773e <D24_GENERIC+0x14e>
 8007706:	78c7      	ldrb	r7, [r0, #3]
 8007708:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800770c:	f01c 0f01 	tst.w	ip, #1
 8007710:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8007714:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8007718:	d11a      	bne.n	8007750 <D24_GENERIC+0x160>
 800771a:	f890 9001 	ldrb.w	r9, [r0, #1]
 800771e:	3002      	adds	r0, #2
 8007720:	44b1      	add	r9, r6
 8007722:	e78d      	b.n	8007640 <D24_GENERIC+0x50>
 8007724:	6093      	str	r3, [r2, #8]
 8007726:	2000      	movs	r0, #0
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	f8c2 800c 	str.w	r8, [r2, #12]
 800772e:	6153      	str	r3, [r2, #20]
 8007730:	9b07      	ldr	r3, [sp, #28]
 8007732:	61d1      	str	r1, [r2, #28]
 8007734:	6114      	str	r4, [r2, #16]
 8007736:	6193      	str	r3, [r2, #24]
 8007738:	b009      	add	sp, #36	; 0x24
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	7845      	ldrb	r5, [r0, #1]
 8007740:	3003      	adds	r0, #3
 8007742:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8007746:	022d      	lsls	r5, r5, #8
 8007748:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800774c:	44a9      	add	r9, r5
 800774e:	e777      	b.n	8007640 <D24_GENERIC+0x50>
 8007750:	7886      	ldrb	r6, [r0, #2]
 8007752:	3004      	adds	r0, #4
 8007754:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8007758:	44a9      	add	r9, r5
 800775a:	e771      	b.n	8007640 <D24_GENERIC+0x50>
 800775c:	00030001 	.word	0x00030001
 8007760:	00060007 	.word	0x00060007
 8007764:	24000000 	.word	0x24000000

08007768 <D32_GENERIC>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007770:	b089      	sub	sp, #36	; 0x24
 8007772:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007774:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007776:	9302      	str	r3, [sp, #8]
 8007778:	6993      	ldr	r3, [r2, #24]
 800777a:	9104      	str	r1, [sp, #16]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	9503      	str	r5, [sp, #12]
 8007780:	69d1      	ldr	r1, [r2, #28]
 8007782:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007784:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8007788:	2e00      	cmp	r6, #0
 800778a:	f000 8097 	beq.w	80078bc <D32_GENERIC+0x154>
 800778e:	f005 0620 	and.w	r6, r5, #32
 8007792:	f005 0510 	and.w	r5, r5, #16
 8007796:	f04f 0e00 	mov.w	lr, #0
 800779a:	f8df c150 	ldr.w	ip, [pc, #336]	; 80078ec <D32_GENERIC+0x184>
 800779e:	9606      	str	r6, [sp, #24]
 80077a0:	9505      	str	r5, [sp, #20]
 80077a2:	e079      	b.n	8007898 <D32_GENERIC+0x130>
 80077a4:	783d      	ldrb	r5, [r7, #0]
 80077a6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80077aa:	042d      	lsls	r5, r5, #16
 80077ac:	f810 a006 	ldrb.w	sl, [r0, r6]
 80077b0:	f890 9000 	ldrb.w	r9, [r0]
 80077b4:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80077b8:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80077bc:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 80077c0:	44a9      	add	r9, r5
 80077c2:	fa5f f789 	uxtb.w	r7, r9
 80077c6:	f3c9 2507 	ubfx	r5, r9, #8, #8
 80077ca:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80077ce:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80077d2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80077d6:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80077da:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80077de:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80077e2:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80077e6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80077ea:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80077ee:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80077f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80077f6:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80077fa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80077fe:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8007802:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8007806:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800780a:	4d34      	ldr	r5, [pc, #208]	; (80078dc <D32_GENERIC+0x174>)
 800780c:	fb29 8805 	smlad	r8, r9, r5, r8
 8007810:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8007814:	fb26 8705 	smlad	r7, r6, r5, r8
 8007818:	4d31      	ldr	r5, [pc, #196]	; (80078e0 <D32_GENERIC+0x178>)
 800781a:	fb29 3305 	smlad	r3, r9, r5, r3
 800781e:	4d31      	ldr	r5, [pc, #196]	; (80078e4 <D32_GENERIC+0x17c>)
 8007820:	fb26 3805 	smlad	r8, r6, r5, r3
 8007824:	2301      	movs	r3, #1
 8007826:	fb29 f903 	smuad	r9, r9, r3
 800782a:	4b2f      	ldr	r3, [pc, #188]	; (80078e8 <D32_GENERIC+0x180>)
 800782c:	fb26 9303 	smlad	r3, r6, r3, r9
 8007830:	9e05      	ldr	r6, [sp, #20]
 8007832:	f10e 0901 	add.w	r9, lr, #1
 8007836:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800783a:	b1ae      	cbz	r6, 8007868 <D32_GENERIC+0x100>
 800783c:	442c      	add	r4, r5
 800783e:	9e02      	ldr	r6, [sp, #8]
 8007840:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8007844:	1ba4      	subs	r4, r4, r6
 8007846:	9502      	str	r5, [sp, #8]
 8007848:	17e7      	asrs	r7, r4, #31
 800784a:	fba4 450a 	umull	r4, r5, r4, sl
 800784e:	e9cd 4500 	strd	r4, r5, [sp]
 8007852:	fb0a 5407 	mla	r4, sl, r7, r5
 8007856:	9401      	str	r4, [sp, #4]
 8007858:	e9dd 4500 	ldrd	r4, r5, [sp]
 800785c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007860:	f145 0500 	adc.w	r5, r5, #0
 8007864:	006c      	lsls	r4, r5, #1
 8007866:	4625      	mov	r5, r4
 8007868:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800786c:	036d      	lsls	r5, r5, #13
 800786e:	9f03      	ldr	r7, [sp, #12]
 8007870:	fb0e fb0a 	mul.w	fp, lr, sl
 8007874:	fa1f fe89 	uxth.w	lr, r9
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8007880:	9e04      	ldr	r6, [sp, #16]
 8007882:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8007886:	4657      	mov	r7, sl
 8007888:	10bd      	asrs	r5, r7, #2
 800788a:	f305 050f 	ssat	r5, #16, r5
 800788e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007892:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007894:	4575      	cmp	r5, lr
 8007896:	d911      	bls.n	80078bc <D32_GENERIC+0x154>
 8007898:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800789a:	b2ee      	uxtb	r6, r5
 800789c:	2d01      	cmp	r5, #1
 800789e:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80078a2:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80078a6:	f47f af7d 	bne.w	80077a4 <D32_GENERIC+0x3c>
 80078aa:	1d05      	adds	r5, r0, #4
 80078ac:	f8d0 9000 	ldr.w	r9, [r0]
 80078b0:	9806      	ldr	r0, [sp, #24]
 80078b2:	b180      	cbz	r0, 80078d6 <D32_GENERIC+0x16e>
 80078b4:	fa99 f999 	rev16.w	r9, r9
 80078b8:	4628      	mov	r0, r5
 80078ba:	e782      	b.n	80077c2 <D32_GENERIC+0x5a>
 80078bc:	6093      	str	r3, [r2, #8]
 80078be:	2000      	movs	r0, #0
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	f8c2 800c 	str.w	r8, [r2, #12]
 80078c6:	6153      	str	r3, [r2, #20]
 80078c8:	9b07      	ldr	r3, [sp, #28]
 80078ca:	61d1      	str	r1, [r2, #28]
 80078cc:	6114      	str	r4, [r2, #16]
 80078ce:	6193      	str	r3, [r2, #24]
 80078d0:	b009      	add	sp, #36	; 0x24
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	4628      	mov	r0, r5
 80078d8:	e773      	b.n	80077c2 <D32_GENERIC+0x5a>
 80078da:	bf00      	nop
 80078dc:	00060003 	.word	0x00060003
 80078e0:	000a000c 	.word	0x000a000c
 80078e4:	000c000a 	.word	0x000c000a
 80078e8:	00030006 	.word	0x00030006
 80078ec:	24000000 	.word	0x24000000

080078f0 <D48_GENERIC>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	6913      	ldr	r3, [r2, #16]
 80078f6:	b089      	sub	sp, #36	; 0x24
 80078f8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	6953      	ldr	r3, [r2, #20]
 80078fe:	9104      	str	r1, [sp, #16]
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	6993      	ldr	r3, [r2, #24]
 8007904:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007908:	9307      	str	r3, [sp, #28]
 800790a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800790e:	9100      	str	r1, [sp, #0]
 8007910:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007912:	9103      	str	r1, [sp, #12]
 8007914:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007916:	2c00      	cmp	r4, #0
 8007918:	f000 80be 	beq.w	8007a98 <D48_GENERIC+0x1a8>
 800791c:	f001 0420 	and.w	r4, r1, #32
 8007920:	f001 0110 	and.w	r1, r1, #16
 8007924:	f04f 0e00 	mov.w	lr, #0
 8007928:	9105      	str	r1, [sp, #20]
 800792a:	9406      	str	r4, [sp, #24]
 800792c:	4962      	ldr	r1, [pc, #392]	; (8007ab8 <D48_GENERIC+0x1c8>)
 800792e:	e0a0      	b.n	8007a72 <D48_GENERIC+0x182>
 8007930:	eb00 0608 	add.w	r6, r0, r8
 8007934:	f810 a008 	ldrb.w	sl, [r0, r8]
 8007938:	f810 9005 	ldrb.w	r9, [r0, r5]
 800793c:	5df4      	ldrb	r4, [r6, r7]
 800793e:	443e      	add	r6, r7
 8007940:	f890 b000 	ldrb.w	fp, [r0]
 8007944:	0420      	lsls	r0, r4, #16
 8007946:	eb06 0408 	add.w	r4, r6, r8
 800794a:	f816 6008 	ldrb.w	r6, [r6, r8]
 800794e:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8007952:	f814 8007 	ldrb.w	r8, [r4, r7]
 8007956:	4427      	add	r7, r4
 8007958:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800795c:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8007960:	eb0a 040b 	add.w	r4, sl, fp
 8007964:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8007968:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800796c:	b2f7      	uxtb	r7, r6
 800796e:	b2e6      	uxtb	r6, r4
 8007970:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8007974:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8007978:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800797c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007980:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8007984:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8007988:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800798c:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8007990:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8007994:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007998:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800799c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80079a0:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80079a4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80079a8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80079ac:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80079b0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80079b4:	9d00      	ldr	r5, [sp, #0]
 80079b6:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80079ba:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80079be:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80079c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80079c6:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80079ca:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80079ce:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80079d2:	4c3a      	ldr	r4, [pc, #232]	; (8007abc <D48_GENERIC+0x1cc>)
 80079d4:	fb26 5a04 	smlad	sl, r6, r4, r5
 80079d8:	4c39      	ldr	r4, [pc, #228]	; (8007ac0 <D48_GENERIC+0x1d0>)
 80079da:	fb29 aa04 	smlad	sl, r9, r4, sl
 80079de:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80079e2:	fb27 aa04 	smlad	sl, r7, r4, sl
 80079e6:	4c37      	ldr	r4, [pc, #220]	; (8007ac4 <D48_GENERIC+0x1d4>)
 80079e8:	fb26 3304 	smlad	r3, r6, r4, r3
 80079ec:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80079f0:	fb29 3304 	smlad	r3, r9, r4, r3
 80079f4:	4c34      	ldr	r4, [pc, #208]	; (8007ac8 <D48_GENERIC+0x1d8>)
 80079f6:	fb27 3304 	smlad	r3, r7, r4, r3
 80079fa:	2501      	movs	r5, #1
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	fb26 f605 	smuad	r6, r6, r5
 8007a02:	4b32      	ldr	r3, [pc, #200]	; (8007acc <D48_GENERIC+0x1dc>)
 8007a04:	fb29 6903 	smlad	r9, r9, r3, r6
 8007a08:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <D48_GENERIC+0x1e0>)
 8007a0a:	fb27 9303 	smlad	r3, r7, r3, r9
 8007a0e:	9c05      	ldr	r4, [sp, #20]
 8007a10:	eb0e 0805 	add.w	r8, lr, r5
 8007a14:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8007a18:	b19c      	cbz	r4, 8007a42 <D48_GENERIC+0x152>
 8007a1a:	9c01      	ldr	r4, [sp, #4]
 8007a1c:	9d02      	ldr	r5, [sp, #8]
 8007a1e:	4454      	add	r4, sl
 8007a20:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8007a24:	f8cd a008 	str.w	sl, [sp, #8]
 8007a28:	1b64      	subs	r4, r4, r5
 8007a2a:	fba4 ab09 	umull	sl, fp, r4, r9
 8007a2e:	17e7      	asrs	r7, r4, #31
 8007a30:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8007a34:	fb09 bb07 	mla	fp, r9, r7, fp
 8007a38:	f14b 0500 	adc.w	r5, fp, #0
 8007a3c:	006c      	lsls	r4, r5, #1
 8007a3e:	46a2      	mov	sl, r4
 8007a40:	9401      	str	r4, [sp, #4]
 8007a42:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007a44:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8007a48:	9d03      	ldr	r5, [sp, #12]
 8007a4a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007a4e:	fb0e f606 	mul.w	r6, lr, r6
 8007a52:	fa1f fe88 	uxth.w	lr, r8
 8007a56:	f04f 0800 	mov.w	r8, #0
 8007a5a:	fbc5 780a 	smlal	r7, r8, r5, sl
 8007a5e:	4645      	mov	r5, r8
 8007a60:	10ac      	asrs	r4, r5, #2
 8007a62:	9d04      	ldr	r5, [sp, #16]
 8007a64:	f304 040f 	ssat	r4, #16, r4
 8007a68:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007a6c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007a6e:	4574      	cmp	r4, lr
 8007a70:	d912      	bls.n	8007a98 <D48_GENERIC+0x1a8>
 8007a72:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007a74:	b2e5      	uxtb	r5, r4
 8007a76:	2c01      	cmp	r4, #1
 8007a78:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007a7c:	f1c5 0700 	rsb	r7, r5, #0
 8007a80:	f47f af56 	bne.w	8007930 <D48_GENERIC+0x40>
 8007a84:	9d06      	ldr	r5, [sp, #24]
 8007a86:	e9d0 4600 	ldrd	r4, r6, [r0]
 8007a8a:	3006      	adds	r0, #6
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	f43f af6b 	beq.w	8007968 <D48_GENERIC+0x78>
 8007a92:	ba64      	rev16	r4, r4
 8007a94:	ba76      	rev16	r6, r6
 8007a96:	e767      	b.n	8007968 <D48_GENERIC+0x78>
 8007a98:	6093      	str	r3, [r2, #8]
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	9b00      	ldr	r3, [sp, #0]
 8007a9e:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007aa2:	60d3      	str	r3, [r2, #12]
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	6113      	str	r3, [r2, #16]
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	6153      	str	r3, [r2, #20]
 8007aac:	9b07      	ldr	r3, [sp, #28]
 8007aae:	6193      	str	r3, [r2, #24]
 8007ab0:	b009      	add	sp, #36	; 0x24
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	bf00      	nop
 8007ab8:	24000000 	.word	0x24000000
 8007abc:	000f000a 	.word	0x000f000a
 8007ac0:	00060003 	.word	0x00060003
 8007ac4:	00150019 	.word	0x00150019
 8007ac8:	00190015 	.word	0x00190015
 8007acc:	00030006 	.word	0x00030006
 8007ad0:	000a000f 	.word	0x000a000f

08007ad4 <D64_GENERIC>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	6913      	ldr	r3, [r2, #16]
 8007ada:	b089      	sub	sp, #36	; 0x24
 8007adc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	6953      	ldr	r3, [r2, #20]
 8007ae2:	9105      	str	r1, [sp, #20]
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007ae8:	6993      	ldr	r3, [r2, #24]
 8007aea:	69d4      	ldr	r4, [r2, #28]
 8007aec:	9307      	str	r3, [sp, #28]
 8007aee:	9504      	str	r5, [sp, #16]
 8007af0:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8007af4:	2900      	cmp	r1, #0
 8007af6:	f000 80e8 	beq.w	8007cca <D64_GENERIC+0x1f6>
 8007afa:	6a11      	ldr	r1, [r2, #32]
 8007afc:	2500      	movs	r5, #0
 8007afe:	46b3      	mov	fp, r6
 8007b00:	9302      	str	r3, [sp, #8]
 8007b02:	9106      	str	r1, [sp, #24]
 8007b04:	4978      	ldr	r1, [pc, #480]	; (8007ce8 <D64_GENERIC+0x214>)
 8007b06:	e0cc      	b.n	8007ca2 <D64_GENERIC+0x1ce>
 8007b08:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8007b0c:	f1ce 0c00 	rsb	ip, lr, #0
 8007b10:	f890 9000 	ldrb.w	r9, [r0]
 8007b14:	eb00 0708 	add.w	r7, r0, r8
 8007b18:	f810 6008 	ldrb.w	r6, [r0, r8]
 8007b1c:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8007b20:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007b24:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8007b28:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8007b2c:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8007b30:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8007b34:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007b38:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8007b3c:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8007b40:	0400      	lsls	r0, r0, #16
 8007b42:	4467      	add	r7, ip
 8007b44:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8007b48:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007b4c:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8007b50:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8007b54:	444e      	add	r6, r9
 8007b56:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8007b5a:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8007b5e:	44c2      	add	sl, r8
 8007b60:	b2f7      	uxtb	r7, r6
 8007b62:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007b66:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8007b6a:	0e36      	lsrs	r6, r6, #24
 8007b6c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007b70:	fa5f fc8a 	uxtb.w	ip, sl
 8007b74:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8007b78:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8007b7c:	443c      	add	r4, r7
 8007b7e:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8007b82:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007b86:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8007b8a:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8007b8e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007b92:	4b56      	ldr	r3, [pc, #344]	; (8007cec <D64_GENERIC+0x218>)
 8007b94:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8007b98:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007b9c:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8007ba0:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8007ba4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007ba8:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8007bac:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8007bb0:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007bb4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007bb8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007bbc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007bc0:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8007bc4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007bc8:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8007bcc:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8007bd0:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007bd4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007bd8:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8007bdc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007be0:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8007be4:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007be8:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8007bec:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8007bf0:	fb28 b903 	smlad	r9, r8, r3, fp
 8007bf4:	4b3e      	ldr	r3, [pc, #248]	; (8007cf0 <D64_GENERIC+0x21c>)
 8007bf6:	fb26 9903 	smlad	r9, r6, r3, r9
 8007bfa:	4b3e      	ldr	r3, [pc, #248]	; (8007cf4 <D64_GENERIC+0x220>)
 8007bfc:	fb2c 9703 	smlad	r7, ip, r3, r9
 8007c00:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8007c04:	fb2a 7909 	smlad	r9, sl, r9, r7
 8007c08:	4f3b      	ldr	r7, [pc, #236]	; (8007cf8 <D64_GENERIC+0x224>)
 8007c0a:	9b02      	ldr	r3, [sp, #8]
 8007c0c:	fb28 3307 	smlad	r3, r8, r7, r3
 8007c10:	fb2a 3317 	smladx	r3, sl, r7, r3
 8007c14:	4f39      	ldr	r7, [pc, #228]	; (8007cfc <D64_GENERIC+0x228>)
 8007c16:	fb26 3307 	smlad	r3, r6, r7, r3
 8007c1a:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8007c1e:	f04f 0e01 	mov.w	lr, #1
 8007c22:	fb28 f80e 	smuad	r8, r8, lr
 8007c26:	4b36      	ldr	r3, [pc, #216]	; (8007d00 <D64_GENERIC+0x22c>)
 8007c28:	fb26 8603 	smlad	r6, r6, r3, r8
 8007c2c:	4b35      	ldr	r3, [pc, #212]	; (8007d04 <D64_GENERIC+0x230>)
 8007c2e:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8007c32:	4b35      	ldr	r3, [pc, #212]	; (8007d08 <D64_GENERIC+0x234>)
 8007c34:	fb2a c303 	smlad	r3, sl, r3, ip
 8007c38:	9f06      	ldr	r7, [sp, #24]
 8007c3a:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8007c3e:	9302      	str	r3, [sp, #8]
 8007c40:	b1cf      	cbz	r7, 8007c76 <D64_GENERIC+0x1a2>
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	444b      	add	r3, r9
 8007c46:	461e      	mov	r6, r3
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c4e:	1af6      	subs	r6, r6, r3
 8007c50:	46b0      	mov	r8, r6
 8007c52:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007c56:	e9cd 8900 	strd	r8, r9, [sp]
 8007c5a:	fba6 8907 	umull	r8, r9, r6, r7
 8007c5e:	9e01      	ldr	r6, [sp, #4]
 8007c60:	fb07 9306 	mla	r3, r7, r6, r9
 8007c64:	4646      	mov	r6, r8
 8007c66:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8007c6a:	f143 0700 	adc.w	r7, r3, #0
 8007c6e:	fa07 f30e 	lsl.w	r3, r7, lr
 8007c72:	4699      	mov	r9, r3
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8007c7a:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007c84:	2700      	movs	r7, #0
 8007c86:	fb05 fc0c 	mul.w	ip, r5, ip
 8007c8a:	3501      	adds	r5, #1
 8007c8c:	fbc3 6709 	smlal	r6, r7, r3, r9
 8007c90:	9b05      	ldr	r3, [sp, #20]
 8007c92:	10be      	asrs	r6, r7, #2
 8007c94:	f306 060f 	ssat	r6, #16, r6
 8007c98:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8007c9c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007c9e:	42ae      	cmp	r6, r5
 8007ca0:	dd11      	ble.n	8007cc6 <D64_GENERIC+0x1f2>
 8007ca2:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8007ca6:	f1be 0f01 	cmp.w	lr, #1
 8007caa:	f47f af2d 	bne.w	8007b08 <D64_GENERIC+0x34>
 8007cae:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8007cb0:	f100 0c08 	add.w	ip, r0, #8
 8007cb4:	06bb      	lsls	r3, r7, #26
 8007cb6:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8007cba:	d513      	bpl.n	8007ce4 <D64_GENERIC+0x210>
 8007cbc:	ba76      	rev16	r6, r6
 8007cbe:	fa9a fa9a 	rev16.w	sl, sl
 8007cc2:	4660      	mov	r0, ip
 8007cc4:	e74c      	b.n	8007b60 <D64_GENERIC+0x8c>
 8007cc6:	465e      	mov	r6, fp
 8007cc8:	9b02      	ldr	r3, [sp, #8]
 8007cca:	6093      	str	r3, [r2, #8]
 8007ccc:	2000      	movs	r0, #0
 8007cce:	9b00      	ldr	r3, [sp, #0]
 8007cd0:	60d6      	str	r6, [r2, #12]
 8007cd2:	6113      	str	r3, [r2, #16]
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	61d4      	str	r4, [r2, #28]
 8007cd8:	6153      	str	r3, [r2, #20]
 8007cda:	9b07      	ldr	r3, [sp, #28]
 8007cdc:	6193      	str	r3, [r2, #24]
 8007cde:	b009      	add	sp, #36	; 0x24
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	4660      	mov	r0, ip
 8007ce6:	e73b      	b.n	8007b60 <D64_GENERIC+0x8c>
 8007ce8:	24000000 	.word	0x24000000
 8007cec:	001c0015 	.word	0x001c0015
 8007cf0:	000f000a 	.word	0x000f000a
 8007cf4:	00060003 	.word	0x00060003
 8007cf8:	0024002a 	.word	0x0024002a
 8007cfc:	002e0030 	.word	0x002e0030
 8007d00:	00030006 	.word	0x00030006
 8007d04:	000a000f 	.word	0x000a000f
 8007d08:	0015001c 	.word	0x0015001c

08007d0c <D80_GENERIC>:
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	b08b      	sub	sp, #44	; 0x2c
 8007d12:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007d14:	9107      	str	r1, [sp, #28]
 8007d16:	6911      	ldr	r1, [r2, #16]
 8007d18:	9104      	str	r1, [sp, #16]
 8007d1a:	6951      	ldr	r1, [r2, #20]
 8007d1c:	9105      	str	r1, [sp, #20]
 8007d1e:	6991      	ldr	r1, [r2, #24]
 8007d20:	9109      	str	r1, [sp, #36]	; 0x24
 8007d22:	69d1      	ldr	r1, [r2, #28]
 8007d24:	9102      	str	r1, [sp, #8]
 8007d26:	6891      	ldr	r1, [r2, #8]
 8007d28:	9103      	str	r1, [sp, #12]
 8007d2a:	68d1      	ldr	r1, [r2, #12]
 8007d2c:	9101      	str	r1, [sp, #4]
 8007d2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007d30:	9106      	str	r1, [sp, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 810b 	beq.w	8007f4e <D80_GENERIC+0x242>
 8007d38:	6a13      	ldr	r3, [r2, #32]
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	f8df c260 	ldr.w	ip, [pc, #608]	; 8007fa0 <D80_GENERIC+0x294>
 8007d42:	9308      	str	r3, [sp, #32]
 8007d44:	9200      	str	r2, [sp, #0]
 8007d46:	e0ee      	b.n	8007f26 <D80_GENERIC+0x21a>
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f890 e000 	ldrb.w	lr, [r0]
 8007d4e:	b219      	sxth	r1, r3
 8007d50:	425c      	negs	r4, r3
 8007d52:	f810 9003 	ldrb.w	r9, [r0, r3]
 8007d56:	004e      	lsls	r6, r1, #1
 8007d58:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007d5c:	4431      	add	r1, r6
 8007d5e:	1843      	adds	r3, r0, r1
 8007d60:	f810 b001 	ldrb.w	fp, [r0, r1]
 8007d64:	1919      	adds	r1, r3, r4
 8007d66:	5d1b      	ldrb	r3, [r3, r4]
 8007d68:	1948      	adds	r0, r1, r5
 8007d6a:	f811 a005 	ldrb.w	sl, [r1, r5]
 8007d6e:	041b      	lsls	r3, r3, #16
 8007d70:	1907      	adds	r7, r0, r4
 8007d72:	5d01      	ldrb	r1, [r0, r4]
 8007d74:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007d78:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8007d7c:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8007d80:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8007d84:	0409      	lsls	r1, r1, #16
 8007d86:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8007d8a:	eb0b 0905 	add.w	r9, fp, r5
 8007d8e:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007d92:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8007d96:	eb09 0b04 	add.w	fp, r9, r4
 8007d9a:	f819 4004 	ldrb.w	r4, [r9, r4]
 8007d9e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007da2:	4473      	add	r3, lr
 8007da4:	eb0b 0006 	add.w	r0, fp, r6
 8007da8:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8007dac:	4439      	add	r1, r7
 8007dae:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007db2:	b2df      	uxtb	r7, r3
 8007db4:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007db8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8007dbc:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8007dc0:	fa5f fa81 	uxtb.w	sl, r1
 8007dc4:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007dc8:	9c02      	ldr	r4, [sp, #8]
 8007dca:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8007dce:	441c      	add	r4, r3
 8007dd0:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8007dd4:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8007dd8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007ddc:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007de0:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8007de4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007de8:	b2ed      	uxtb	r5, r5
 8007dea:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8007dee:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007df2:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8007df6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007dfa:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007dfe:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007e02:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007e06:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007e0a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8007e0e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007e12:	0e09      	lsrs	r1, r1, #24
 8007e14:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007e18:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007e1c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007e20:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007e24:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007e28:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007e2c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007e30:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007e34:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007e38:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8007e3c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007e40:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8007e48:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007e4c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007e50:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8007e54:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8007e58:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8007e5c:	9202      	str	r2, [sp, #8]
 8007e5e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8007e62:	4a43      	ldr	r2, [pc, #268]	; (8007f70 <D80_GENERIC+0x264>)
 8007e64:	9f01      	ldr	r7, [sp, #4]
 8007e66:	fb23 7a02 	smlad	sl, r3, r2, r7
 8007e6a:	4a42      	ldr	r2, [pc, #264]	; (8007f74 <D80_GENERIC+0x268>)
 8007e6c:	fb26 aa02 	smlad	sl, r6, r2, sl
 8007e70:	4a41      	ldr	r2, [pc, #260]	; (8007f78 <D80_GENERIC+0x26c>)
 8007e72:	fb24 aa02 	smlad	sl, r4, r2, sl
 8007e76:	4a41      	ldr	r2, [pc, #260]	; (8007f7c <D80_GENERIC+0x270>)
 8007e78:	fb21 a702 	smlad	r7, r1, r2, sl
 8007e7c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007e80:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8007e84:	4a3e      	ldr	r2, [pc, #248]	; (8007f80 <D80_GENERIC+0x274>)
 8007e86:	9f03      	ldr	r7, [sp, #12]
 8007e88:	fb23 7e02 	smlad	lr, r3, r2, r7
 8007e8c:	4a3d      	ldr	r2, [pc, #244]	; (8007f84 <D80_GENERIC+0x278>)
 8007e8e:	fb26 ee02 	smlad	lr, r6, r2, lr
 8007e92:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8007e96:	fb24 e707 	smlad	r7, r4, r7, lr
 8007e9a:	4a3b      	ldr	r2, [pc, #236]	; (8007f88 <D80_GENERIC+0x27c>)
 8007e9c:	fb21 7702 	smlad	r7, r1, r2, r7
 8007ea0:	4a3a      	ldr	r2, [pc, #232]	; (8007f8c <D80_GENERIC+0x280>)
 8007ea2:	fb25 7202 	smlad	r2, r5, r2, r7
 8007ea6:	f04f 0901 	mov.w	r9, #1
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	fb23 f909 	smuad	r9, r3, r9
 8007eb0:	4b37      	ldr	r3, [pc, #220]	; (8007f90 <D80_GENERIC+0x284>)
 8007eb2:	fb26 9603 	smlad	r6, r6, r3, r9
 8007eb6:	4f37      	ldr	r7, [pc, #220]	; (8007f94 <D80_GENERIC+0x288>)
 8007eb8:	fb24 6407 	smlad	r4, r4, r7, r6
 8007ebc:	4f36      	ldr	r7, [pc, #216]	; (8007f98 <D80_GENERIC+0x28c>)
 8007ebe:	fb21 4707 	smlad	r7, r1, r7, r4
 8007ec2:	4936      	ldr	r1, [pc, #216]	; (8007f9c <D80_GENERIC+0x290>)
 8007ec4:	fb25 7301 	smlad	r3, r5, r1, r7
 8007ec8:	9303      	str	r3, [sp, #12]
 8007eca:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8007ece:	9b08      	ldr	r3, [sp, #32]
 8007ed0:	b193      	cbz	r3, 8007ef8 <D80_GENERIC+0x1ec>
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	4452      	add	r2, sl
 8007ed6:	4614      	mov	r4, r2
 8007ed8:	9a05      	ldr	r2, [sp, #20]
 8007eda:	f8cd a014 	str.w	sl, [sp, #20]
 8007ede:	1aa4      	subs	r4, r4, r2
 8007ee0:	fba4 1203 	umull	r1, r2, r4, r3
 8007ee4:	17e7      	asrs	r7, r4, #31
 8007ee6:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8007eea:	fb03 2207 	mla	r2, r3, r7, r2
 8007eee:	f142 0500 	adc.w	r5, r2, #0
 8007ef2:	006b      	lsls	r3, r5, #1
 8007ef4:	469a      	mov	sl, r3
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	9e00      	ldr	r6, [sp, #0]
 8007efa:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8007efe:	9a06      	ldr	r2, [sp, #24]
 8007f00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f04:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007f06:	2500      	movs	r5, #0
 8007f08:	fb08 f303 	mul.w	r3, r8, r3
 8007f0c:	fbc2 450a 	smlal	r4, r5, r2, sl
 8007f10:	9a07      	ldr	r2, [sp, #28]
 8007f12:	f108 0801 	add.w	r8, r8, #1
 8007f16:	10a9      	asrs	r1, r5, #2
 8007f18:	f301 010f 	ssat	r1, #16, r1
 8007f1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007f20:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007f22:	4543      	cmp	r3, r8
 8007f24:	dd12      	ble.n	8007f4c <D80_GENERIC+0x240>
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	f47f af0c 	bne.w	8007d48 <D80_GENERIC+0x3c>
 8007f30:	9b00      	ldr	r3, [sp, #0]
 8007f32:	6885      	ldr	r5, [r0, #8]
 8007f34:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007f36:	06b2      	lsls	r2, r6, #26
 8007f38:	e9d0 3100 	ldrd	r3, r1, [r0]
 8007f3c:	f100 000a 	add.w	r0, r0, #10
 8007f40:	f57f af35 	bpl.w	8007dae <D80_GENERIC+0xa2>
 8007f44:	ba5b      	rev16	r3, r3
 8007f46:	ba49      	rev16	r1, r1
 8007f48:	ba6d      	rev16	r5, r5
 8007f4a:	e730      	b.n	8007dae <D80_GENERIC+0xa2>
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	2000      	movs	r0, #0
 8007f52:	6093      	str	r3, [r2, #8]
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	60d3      	str	r3, [r2, #12]
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	61d3      	str	r3, [r2, #28]
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	6113      	str	r3, [r2, #16]
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	6153      	str	r3, [r2, #20]
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	6193      	str	r3, [r2, #24]
 8007f68:	b00b      	add	sp, #44	; 0x2c
 8007f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6e:	bf00      	nop
 8007f70:	002d0024 	.word	0x002d0024
 8007f74:	001c0015 	.word	0x001c0015
 8007f78:	000f000a 	.word	0x000f000a
 8007f7c:	00060003 	.word	0x00060003
 8007f80:	0037003f 	.word	0x0037003f
 8007f84:	00450049 	.word	0x00450049
 8007f88:	00490045 	.word	0x00490045
 8007f8c:	003f0037 	.word	0x003f0037
 8007f90:	00030006 	.word	0x00030006
 8007f94:	000a000f 	.word	0x000a000f
 8007f98:	0015001c 	.word	0x0015001c
 8007f9c:	0024002d 	.word	0x0024002d
 8007fa0:	24000000 	.word	0x24000000

08007fa4 <D128_GENERIC>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	b08d      	sub	sp, #52	; 0x34
 8007faa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007fac:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8007fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8007fb2:	6911      	ldr	r1, [r2, #16]
 8007fb4:	9201      	str	r2, [sp, #4]
 8007fb6:	9106      	str	r1, [sp, #24]
 8007fb8:	6951      	ldr	r1, [r2, #20]
 8007fba:	9107      	str	r1, [sp, #28]
 8007fbc:	6991      	ldr	r1, [r2, #24]
 8007fbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8007fc0:	6891      	ldr	r1, [r2, #8]
 8007fc2:	9103      	str	r1, [sp, #12]
 8007fc4:	68d1      	ldr	r1, [r2, #12]
 8007fc6:	9102      	str	r1, [sp, #8]
 8007fc8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007fca:	9108      	str	r1, [sp, #32]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8183 	beq.w	80082d8 <D128_GENERIC+0x334>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6a12      	ldr	r2, [r2, #32]
 8007fd6:	4681      	mov	r9, r0
 8007fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8007fda:	e9cd a304 	strd	sl, r3, [sp, #16]
 8007fde:	e165      	b.n	80082ac <D128_GENERIC+0x308>
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	f899 b000 	ldrb.w	fp, [r9]
 8007fe6:	b213      	sxth	r3, r2
 8007fe8:	4255      	negs	r5, r2
 8007fea:	f819 0002 	ldrb.w	r0, [r9, r2]
 8007fee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ff2:	009f      	lsls	r7, r3, #2
 8007ff4:	eb09 0402 	add.w	r4, r9, r2
 8007ff8:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8007ffc:	f819 8002 	ldrb.w	r8, [r9, r2]
 8008000:	443b      	add	r3, r7
 8008002:	1962      	adds	r2, r4, r5
 8008004:	5d64      	ldrb	r4, [r4, r5]
 8008006:	eb02 0c03 	add.w	ip, r2, r3
 800800a:	0424      	lsls	r4, r4, #16
 800800c:	5cd3      	ldrb	r3, [r2, r3]
 800800e:	eb0c 0e05 	add.w	lr, ip, r5
 8008012:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8008016:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800801a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800801e:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8008022:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8008026:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800802a:	eb0c 0e06 	add.w	lr, ip, r6
 800802e:	f81c a006 	ldrb.w	sl, [ip, r6]
 8008032:	0412      	lsls	r2, r2, #16
 8008034:	445c      	add	r4, fp
 8008036:	eb0e 0c05 	add.w	ip, lr, r5
 800803a:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800803e:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8008042:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8008046:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008050:	eb00 0b06 	add.w	fp, r0, r6
 8008054:	5d80      	ldrb	r0, [r0, r6]
 8008056:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800805a:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800805e:	eb0b 0a05 	add.w	sl, fp, r5
 8008062:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8008066:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800806a:	0436      	lsls	r6, r6, #16
 800806c:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008070:	4442      	add	r2, r8
 8008072:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8008076:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800807a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800807e:	44b9      	add	r9, r7
 8008080:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008084:	4463      	add	r3, ip
 8008086:	eb06 0508 	add.w	r5, r6, r8
 800808a:	b2e7      	uxtb	r7, r4
 800808c:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008090:	499b      	ldr	r1, [pc, #620]	; (8008300 <D128_GENERIC+0x35c>)
 8008092:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8008096:	0e24      	lsrs	r4, r4, #24
 8008098:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800809c:	b2d7      	uxtb	r7, r2
 800809e:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 80080a2:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80080a6:	9904      	ldr	r1, [sp, #16]
 80080a8:	4461      	add	r1, ip
 80080aa:	468c      	mov	ip, r1
 80080ac:	4994      	ldr	r1, [pc, #592]	; (8008300 <D128_GENERIC+0x35c>)
 80080ae:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 80080b2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80080b6:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 80080ba:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80080be:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 80080c2:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80080c6:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 80080ca:	0e12      	lsrs	r2, r2, #24
 80080cc:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 80080d0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80080d4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80080d8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80080dc:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 80080e0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80080ea:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 80080ee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80080f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080f6:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 80080fa:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80080fe:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008102:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8008106:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800810a:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800810e:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8008112:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008116:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800811a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800811e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008122:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8008126:	0e1b      	lsrs	r3, r3, #24
 8008128:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800812c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008130:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8008134:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8008138:	b2eb      	uxtb	r3, r5
 800813a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800813e:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8008142:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800814a:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800814e:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8008152:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008156:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800815a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800815e:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8008162:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8008166:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800816a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800816e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008172:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008176:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800817a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800817e:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8008182:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8008186:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800818a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800818e:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008192:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008196:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800819a:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800819e:	f3ce 0209 	ubfx	r2, lr, #0, #10
 80081a2:	9104      	str	r1, [sp, #16]
 80081a4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80081a8:	9902      	ldr	r1, [sp, #8]
 80081aa:	4a56      	ldr	r2, [pc, #344]	; (8008304 <D128_GENERIC+0x360>)
 80081ac:	fb2b 1202 	smlad	r2, fp, r2, r1
 80081b0:	4955      	ldr	r1, [pc, #340]	; (8008308 <D128_GENERIC+0x364>)
 80081b2:	fb28 2201 	smlad	r2, r8, r1, r2
 80081b6:	4955      	ldr	r1, [pc, #340]	; (800830c <D128_GENERIC+0x368>)
 80081b8:	fb27 2201 	smlad	r2, r7, r1, r2
 80081bc:	4954      	ldr	r1, [pc, #336]	; (8008310 <D128_GENERIC+0x36c>)
 80081be:	fb26 2201 	smlad	r2, r6, r1, r2
 80081c2:	4954      	ldr	r1, [pc, #336]	; (8008314 <D128_GENERIC+0x370>)
 80081c4:	fb24 2201 	smlad	r2, r4, r1, r2
 80081c8:	4953      	ldr	r1, [pc, #332]	; (8008318 <D128_GENERIC+0x374>)
 80081ca:	fb20 2201 	smlad	r2, r0, r1, r2
 80081ce:	4953      	ldr	r1, [pc, #332]	; (800831c <D128_GENERIC+0x378>)
 80081d0:	fb23 2201 	smlad	r2, r3, r1, r2
 80081d4:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80081d8:	fb25 2a0c 	smlad	sl, r5, ip, r2
 80081dc:	4950      	ldr	r1, [pc, #320]	; (8008320 <D128_GENERIC+0x37c>)
 80081de:	9a03      	ldr	r2, [sp, #12]
 80081e0:	fb2b 2c01 	smlad	ip, fp, r1, r2
 80081e4:	4a4f      	ldr	r2, [pc, #316]	; (8008324 <D128_GENERIC+0x380>)
 80081e6:	fb28 ce02 	smlad	lr, r8, r2, ip
 80081ea:	f8df c150 	ldr.w	ip, [pc, #336]	; 800833c <D128_GENERIC+0x398>
 80081ee:	fb27 ec0c 	smlad	ip, r7, ip, lr
 80081f2:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8008340 <D128_GENERIC+0x39c>
 80081f6:	fb26 cc0e 	smlad	ip, r6, lr, ip
 80081fa:	f8df e148 	ldr.w	lr, [pc, #328]	; 8008344 <D128_GENERIC+0x3a0>
 80081fe:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8008202:	f8df c144 	ldr.w	ip, [pc, #324]	; 8008348 <D128_GENERIC+0x3a4>
 8008206:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800820a:	f8df c140 	ldr.w	ip, [pc, #320]	; 800834c <D128_GENERIC+0x3a8>
 800820e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008212:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008350 <D128_GENERIC+0x3ac>
 8008216:	fb25 c20e 	smlad	r2, r5, lr, ip
 800821a:	f04f 0c01 	mov.w	ip, #1
 800821e:	9202      	str	r2, [sp, #8]
 8008220:	fb2b fb0c 	smuad	fp, fp, ip
 8008224:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8008354 <D128_GENERIC+0x3b0>
 8008228:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800822c:	f8df c128 	ldr.w	ip, [pc, #296]	; 8008358 <D128_GENERIC+0x3b4>
 8008230:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8008234:	4f3c      	ldr	r7, [pc, #240]	; (8008328 <D128_GENERIC+0x384>)
 8008236:	fb26 bb07 	smlad	fp, r6, r7, fp
 800823a:	4f3c      	ldr	r7, [pc, #240]	; (800832c <D128_GENERIC+0x388>)
 800823c:	fb24 bb07 	smlad	fp, r4, r7, fp
 8008240:	4f3b      	ldr	r7, [pc, #236]	; (8008330 <D128_GENERIC+0x38c>)
 8008242:	fb20 bb07 	smlad	fp, r0, r7, fp
 8008246:	4f3b      	ldr	r7, [pc, #236]	; (8008334 <D128_GENERIC+0x390>)
 8008248:	fb23 bb07 	smlad	fp, r3, r7, fp
 800824c:	4b3a      	ldr	r3, [pc, #232]	; (8008338 <D128_GENERIC+0x394>)
 800824e:	fb25 b303 	smlad	r3, r5, r3, fp
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8008258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825a:	b183      	cbz	r3, 800827e <D128_GENERIC+0x2da>
 800825c:	9a06      	ldr	r2, [sp, #24]
 800825e:	9907      	ldr	r1, [sp, #28]
 8008260:	4422      	add	r2, r4
 8008262:	9407      	str	r4, [sp, #28]
 8008264:	1a52      	subs	r2, r2, r1
 8008266:	fba2 0103 	umull	r0, r1, r2, r3
 800826a:	17d5      	asrs	r5, r2, #31
 800826c:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8008270:	fb03 1105 	mla	r1, r3, r5, r1
 8008274:	f141 0300 	adc.w	r3, r1, #0
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	461c      	mov	r4, r3
 800827c:	9306      	str	r3, [sp, #24]
 800827e:	9d01      	ldr	r5, [sp, #4]
 8008280:	01e4      	lsls	r4, r4, #7
 8008282:	9e05      	ldr	r6, [sp, #20]
 8008284:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008288:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800828a:	2300      	movs	r3, #0
 800828c:	9908      	ldr	r1, [sp, #32]
 800828e:	fb06 f000 	mul.w	r0, r6, r0
 8008292:	3601      	adds	r6, #1
 8008294:	fbc1 2304 	smlal	r2, r3, r1, r4
 8008298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829a:	109b      	asrs	r3, r3, #2
 800829c:	9605      	str	r6, [sp, #20]
 800829e:	f303 030f 	ssat	r3, #16, r3
 80082a2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 80082a6:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80082a8:	42b3      	cmp	r3, r6
 80082aa:	dd13      	ble.n	80082d4 <D128_GENERIC+0x330>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80082b0:	2a01      	cmp	r2, #1
 80082b2:	f47f ae95 	bne.w	8007fe0 <D128_GENERIC+0x3c>
 80082b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80082b8:	f109 0610 	add.w	r6, r9, #16
 80082bc:	0681      	lsls	r1, r0, #26
 80082be:	e9d9 4200 	ldrd	r4, r2, [r9]
 80082c2:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 80082c6:	d518      	bpl.n	80082fa <D128_GENERIC+0x356>
 80082c8:	ba64      	rev16	r4, r4
 80082ca:	ba52      	rev16	r2, r2
 80082cc:	ba5b      	rev16	r3, r3
 80082ce:	ba6d      	rev16	r5, r5
 80082d0:	46b1      	mov	r9, r6
 80082d2:	e6da      	b.n	800808a <D128_GENERIC+0xe6>
 80082d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	2000      	movs	r0, #0
 80082dc:	9903      	ldr	r1, [sp, #12]
 80082de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082e0:	6099      	str	r1, [r3, #8]
 80082e2:	9902      	ldr	r1, [sp, #8]
 80082e4:	f8c3 a01c 	str.w	sl, [r3, #28]
 80082e8:	60d9      	str	r1, [r3, #12]
 80082ea:	9906      	ldr	r1, [sp, #24]
 80082ec:	619a      	str	r2, [r3, #24]
 80082ee:	6119      	str	r1, [r3, #16]
 80082f0:	9907      	ldr	r1, [sp, #28]
 80082f2:	6159      	str	r1, [r3, #20]
 80082f4:	b00d      	add	sp, #52	; 0x34
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	46b1      	mov	r9, r6
 80082fc:	e6c5      	b.n	800808a <D128_GENERIC+0xe6>
 80082fe:	bf00      	nop
 8008300:	24000000 	.word	0x24000000
 8008304:	00780069 	.word	0x00780069
 8008308:	005b004e 	.word	0x005b004e
 800830c:	00420037 	.word	0x00420037
 8008310:	002d0024 	.word	0x002d0024
 8008314:	001c0015 	.word	0x001c0015
 8008318:	000f000a 	.word	0x000f000a
 800831c:	00060003 	.word	0x00060003
 8008320:	00880096 	.word	0x00880096
 8008324:	00a200ac 	.word	0x00a200ac
 8008328:	0015001c 	.word	0x0015001c
 800832c:	0024002d 	.word	0x0024002d
 8008330:	00370042 	.word	0x00370042
 8008334:	004e005b 	.word	0x004e005b
 8008338:	00690078 	.word	0x00690078
 800833c:	00b400ba 	.word	0x00b400ba
 8008340:	00be00c0 	.word	0x00be00c0
 8008344:	00c000be 	.word	0x00c000be
 8008348:	00ba00b4 	.word	0x00ba00b4
 800834c:	00ac00a2 	.word	0x00ac00a2
 8008350:	00960088 	.word	0x00960088
 8008354:	00030006 	.word	0x00030006
 8008358:	000a000f 	.word	0x000a000f

0800835c <D16_1CH_HTONS_VOL_HP>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	6993      	ldr	r3, [r2, #24]
 8008362:	b087      	sub	sp, #28
 8008364:	4682      	mov	sl, r0
 8008366:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800836e:	69d3      	ldr	r3, [r2, #28]
 8008370:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008374:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008378:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800837c:	9403      	str	r4, [sp, #12]
 800837e:	2800      	cmp	r0, #0
 8008380:	d054      	beq.n	800842c <D16_1CH_HTONS_VOL_HP+0xd0>
 8008382:	f1a1 0902 	sub.w	r9, r1, #2
 8008386:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800838a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008438 <D16_1CH_HTONS_VOL_HP+0xdc>
 800838e:	4650      	mov	r0, sl
 8008390:	9101      	str	r1, [sp, #4]
 8008392:	4619      	mov	r1, r3
 8008394:	f8cd b008 	str.w	fp, [sp, #8]
 8008398:	9205      	str	r2, [sp, #20]
 800839a:	f850 3b02 	ldr.w	r3, [r0], #2
 800839e:	ba5b      	rev16	r3, r3
 80083a0:	b2dc      	uxtb	r4, r3
 80083a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083aa:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80083ae:	4419      	add	r1, r3
 80083b0:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 80083b4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80083b8:	f3c4 0209 	ubfx	r2, r4, #0, #10
 80083bc:	0aa1      	lsrs	r1, r4, #10
 80083be:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80083c2:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <D16_1CH_HTONS_VOL_HP+0xd4>)
 80083c4:	fb23 5402 	smlad	r4, r3, r2, r5
 80083c8:	4a1a      	ldr	r2, [pc, #104]	; (8008434 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80083ca:	fb23 f502 	smuad	r5, r3, r2
 80083ce:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80083d2:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80083d6:	f04f 0b00 	mov.w	fp, #0
 80083da:	19a2      	adds	r2, r4, r6
 80083dc:	eba2 020c 	sub.w	r2, r2, ip
 80083e0:	46a4      	mov	ip, r4
 80083e2:	17d7      	asrs	r7, r2, #31
 80083e4:	fba2 230e 	umull	r2, r3, r2, lr
 80083e8:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 80083ec:	fb0e 3307 	mla	r3, lr, r7, r3
 80083f0:	f143 0700 	adc.w	r7, r3, #0
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	047a      	lsls	r2, r7, #17
 80083f8:	007e      	lsls	r6, r7, #1
 80083fa:	fbc3 ab02 	smlal	sl, fp, r3, r2
 80083fe:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8008402:	f303 030f 	ssat	r3, #16, r3
 8008406:	f829 3f02 	strh.w	r3, [r9, #2]!
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	4298      	cmp	r0, r3
 800840e:	d1c4      	bne.n	800839a <D16_1CH_HTONS_VOL_HP+0x3e>
 8008410:	460b      	mov	r3, r1
 8008412:	9a05      	ldr	r2, [sp, #20]
 8008414:	2000      	movs	r0, #0
 8008416:	9903      	ldr	r1, [sp, #12]
 8008418:	61d3      	str	r3, [r2, #28]
 800841a:	9b04      	ldr	r3, [sp, #16]
 800841c:	6095      	str	r5, [r2, #8]
 800841e:	60d1      	str	r1, [r2, #12]
 8008420:	6193      	str	r3, [r2, #24]
 8008422:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008426:	b007      	add	sp, #28
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	4664      	mov	r4, ip
 800842e:	e7f1      	b.n	8008414 <D16_1CH_HTONS_VOL_HP+0xb8>
 8008430:	00030001 	.word	0x00030001
 8008434:	00010003 	.word	0x00010003
 8008438:	24000000 	.word	0x24000000

0800843c <D24_1CH_HTONS_VOL_HP>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008442:	b089      	sub	sp, #36	; 0x24
 8008444:	6993      	ldr	r3, [r2, #24]
 8008446:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008448:	9604      	str	r6, [sp, #16]
 800844a:	6a16      	ldr	r6, [r2, #32]
 800844c:	9306      	str	r3, [sp, #24]
 800844e:	9505      	str	r5, [sp, #20]
 8008450:	69d3      	ldr	r3, [r2, #28]
 8008452:	9600      	str	r6, [sp, #0]
 8008454:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008458:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800845c:	2d00      	cmp	r5, #0
 800845e:	f000 8083 	beq.w	8008568 <D24_1CH_HTONS_VOL_HP+0x12c>
 8008462:	9207      	str	r2, [sp, #28]
 8008464:	2600      	movs	r6, #0
 8008466:	4622      	mov	r2, r4
 8008468:	f1a1 0b02 	sub.w	fp, r1, #2
 800846c:	4f3f      	ldr	r7, [pc, #252]	; (800856c <D24_1CH_HTONS_VOL_HP+0x130>)
 800846e:	461d      	mov	r5, r3
 8008470:	f8cd a00c 	str.w	sl, [sp, #12]
 8008474:	9c00      	ldr	r4, [sp, #0]
 8008476:	e056      	b.n	8008526 <D24_1CH_HTONS_VOL_HP+0xea>
 8008478:	7841      	ldrb	r1, [r0, #1]
 800847a:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800847e:	3002      	adds	r0, #2
 8008480:	4488      	add	r8, r1
 8008482:	fa5f f388 	uxtb.w	r3, r8
 8008486:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800848a:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800848e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8008492:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8008496:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800849a:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800849e:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80084a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80084a6:	f3c8 0309 	ubfx	r3, r8, #0, #10
 80084aa:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80084ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80084b2:	492f      	ldr	r1, [pc, #188]	; (8008570 <D24_1CH_HTONS_VOL_HP+0x134>)
 80084b4:	fb23 e901 	smlad	r9, r3, r1, lr
 80084b8:	492e      	ldr	r1, [pc, #184]	; (8008574 <D24_1CH_HTONS_VOL_HP+0x138>)
 80084ba:	fb23 ce01 	smlad	lr, r3, r1, ip
 80084be:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 80084c2:	2101      	movs	r1, #1
 80084c4:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 80084c8:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 80084cc:	fb23 f301 	smuad	r3, r3, r1
 80084d0:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 80084d4:	eb08 0c03 	add.w	ip, r8, r3
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	f04f 0a00 	mov.w	sl, #0
 80084de:	440a      	add	r2, r1
 80084e0:	3601      	adds	r6, #1
 80084e2:	9103      	str	r1, [sp, #12]
 80084e4:	1ad2      	subs	r2, r2, r3
 80084e6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80084ea:	fba2 2304 	umull	r2, r3, r2, r4
 80084ee:	e9cd 2300 	strd	r2, r3, [sp]
 80084f2:	fb04 3309 	mla	r3, r4, r9, r3
 80084f6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008500:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008504:	f143 0300 	adc.w	r3, r3, #0
 8008508:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800850c:	005a      	lsls	r2, r3, #1
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8008514:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8008518:	f303 030f 	ssat	r3, #16, r3
 800851c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	429e      	cmp	r6, r3
 8008524:	d010      	beq.n	8008548 <D24_1CH_HTONS_VOL_HP+0x10c>
 8008526:	f890 9003 	ldrb.w	r9, [r0, #3]
 800852a:	f016 0f01 	tst.w	r6, #1
 800852e:	7801      	ldrb	r1, [r0, #0]
 8008530:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008534:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8008538:	d09e      	beq.n	8008478 <D24_1CH_HTONS_VOL_HP+0x3c>
 800853a:	f890 8002 	ldrb.w	r8, [r0, #2]
 800853e:	3004      	adds	r0, #4
 8008540:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8008544:	4488      	add	r8, r1
 8008546:	e79c      	b.n	8008482 <D24_1CH_HTONS_VOL_HP+0x46>
 8008548:	4614      	mov	r4, r2
 800854a:	462b      	mov	r3, r5
 800854c:	9a07      	ldr	r2, [sp, #28]
 800854e:	2000      	movs	r0, #0
 8008550:	61d3      	str	r3, [r2, #28]
 8008552:	9b06      	ldr	r3, [sp, #24]
 8008554:	f8c2 c008 	str.w	ip, [r2, #8]
 8008558:	f8c2 e00c 	str.w	lr, [r2, #12]
 800855c:	6193      	str	r3, [r2, #24]
 800855e:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008562:	b009      	add	sp, #36	; 0x24
 8008564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	4651      	mov	r1, sl
 800856a:	e7f0      	b.n	800854e <D24_1CH_HTONS_VOL_HP+0x112>
 800856c:	24000000 	.word	0x24000000
 8008570:	00030001 	.word	0x00030001
 8008574:	00060007 	.word	0x00060007

08008578 <D32_1CH_HTONS_VOL_HP>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	6993      	ldr	r3, [r2, #24]
 800857e:	b087      	sub	sp, #28
 8008580:	4683      	mov	fp, r0
 8008582:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	69d5      	ldr	r5, [r2, #28]
 8008588:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800858a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800858e:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8008592:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008596:	2800      	cmp	r0, #0
 8008598:	d077      	beq.n	800868a <D32_1CH_HTONS_VOL_HP+0x112>
 800859a:	460f      	mov	r7, r1
 800859c:	46f1      	mov	r9, lr
 800859e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80085a2:	f8cd 8000 	str.w	r8, [sp]
 80085a6:	4e3a      	ldr	r6, [pc, #232]	; (8008690 <D32_1CH_HTONS_VOL_HP+0x118>)
 80085a8:	469e      	mov	lr, r3
 80085aa:	46a0      	mov	r8, r4
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	f85b 4b04 	ldr.w	r4, [fp], #4
 80085b4:	ba64      	rev16	r4, r4
 80085b6:	b2e0      	uxtb	r0, r4
 80085b8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80085bc:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80085c0:	0e24      	lsrs	r4, r4, #24
 80085c2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80085c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80085ca:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 80085ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80085d2:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80085d6:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80085da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80085de:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80085e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80085ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80085ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085f2:	f3c5 0009 	ubfx	r0, r5, #0, #10
 80085f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80085fa:	4826      	ldr	r0, [pc, #152]	; (8008694 <D32_1CH_HTONS_VOL_HP+0x11c>)
 80085fc:	fb23 c400 	smlad	r4, r3, r0, ip
 8008600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008604:	fb21 4402 	smlad	r4, r1, r2, r4
 8008608:	4823      	ldr	r0, [pc, #140]	; (8008698 <D32_1CH_HTONS_VOL_HP+0x120>)
 800860a:	fb23 ec00 	smlad	ip, r3, r0, lr
 800860e:	4823      	ldr	r0, [pc, #140]	; (800869c <D32_1CH_HTONS_VOL_HP+0x124>)
 8008610:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008614:	2201      	movs	r2, #1
 8008616:	fb23 f302 	smuad	r3, r3, r2
 800861a:	4821      	ldr	r0, [pc, #132]	; (80086a0 <D32_1CH_HTONS_VOL_HP+0x128>)
 800861c:	fb21 3e00 	smlad	lr, r1, r0, r3
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8008626:	4423      	add	r3, r4
 8008628:	eba3 0209 	sub.w	r2, r3, r9
 800862c:	46a1      	mov	r9, r4
 800862e:	17d1      	asrs	r1, r2, #31
 8008630:	fba2 230a 	umull	r2, r3, r2, sl
 8008634:	e9cd 2300 	strd	r2, r3, [sp]
 8008638:	fb0a 3301 	mla	r3, sl, r1, r3
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008642:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008646:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800864a:	f143 0300 	adc.w	r3, r3, #0
 800864e:	0399      	lsls	r1, r3, #14
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	fbc8 2301 	smlal	r2, r3, r8, r1
 800865a:	109b      	asrs	r3, r3, #2
 800865c:	f303 030f 	ssat	r3, #16, r3
 8008660:	f827 3b02 	strh.w	r3, [r7], #2
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	429f      	cmp	r7, r3
 8008668:	d1a2      	bne.n	80085b0 <D32_1CH_HTONS_VOL_HP+0x38>
 800866a:	4673      	mov	r3, lr
 800866c:	f8dd 8000 	ldr.w	r8, [sp]
 8008670:	9a05      	ldr	r2, [sp, #20]
 8008672:	6093      	str	r3, [r2, #8]
 8008674:	2000      	movs	r0, #0
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	f8c2 c00c 	str.w	ip, [r2, #12]
 800867c:	61d5      	str	r5, [r2, #28]
 800867e:	6193      	str	r3, [r2, #24]
 8008680:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008684:	b007      	add	sp, #28
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	4674      	mov	r4, lr
 800868c:	e7f1      	b.n	8008672 <D32_1CH_HTONS_VOL_HP+0xfa>
 800868e:	bf00      	nop
 8008690:	24000000 	.word	0x24000000
 8008694:	00060003 	.word	0x00060003
 8008698:	000a000c 	.word	0x000a000c
 800869c:	000c000a 	.word	0x000c000a
 80086a0:	00030006 	.word	0x00030006

080086a4 <D48_1CH_HTONS_VOL_HP>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80086aa:	b087      	sub	sp, #28
 80086ac:	6993      	ldr	r3, [r2, #24]
 80086ae:	9701      	str	r7, [sp, #4]
 80086b0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80086b2:	6a17      	ldr	r7, [r2, #32]
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	69d6      	ldr	r6, [r2, #28]
 80086b8:	9702      	str	r7, [sp, #8]
 80086ba:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 80086be:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	f000 8093 	beq.w	80087ee <D48_1CH_HTONS_VOL_HP+0x14a>
 80086c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086cc:	f1a1 0b02 	sub.w	fp, r1, #2
 80086d0:	46f2      	mov	sl, lr
 80086d2:	4f48      	ldr	r7, [pc, #288]	; (80087f4 <D48_1CH_HTONS_VOL_HP+0x150>)
 80086d4:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 80086d8:	469e      	mov	lr, r3
 80086da:	9205      	str	r2, [sp, #20]
 80086dc:	9103      	str	r1, [sp, #12]
 80086de:	e9d0 3200 	ldrd	r3, r2, [r0]
 80086e2:	3006      	adds	r0, #6
 80086e4:	ba5b      	rev16	r3, r3
 80086e6:	fa92 f992 	rev16.w	r9, r2
 80086ea:	b2dd      	uxtb	r5, r3
 80086ec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80086f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80086fa:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80086fe:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8008702:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8008706:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800870a:	fa5f f289 	uxtb.w	r2, r9
 800870e:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8008712:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8008716:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800871a:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800871e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008722:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8008726:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800872a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800872e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008732:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008736:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800873a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800873e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8008742:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008746:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800874a:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800874e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008752:	4b29      	ldr	r3, [pc, #164]	; (80087f8 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008754:	fb28 c103 	smlad	r1, r8, r3, ip
 8008758:	4b28      	ldr	r3, [pc, #160]	; (80087fc <D48_1CH_HTONS_VOL_HP+0x158>)
 800875a:	fb25 1103 	smlad	r1, r5, r3, r1
 800875e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008762:	fb22 1903 	smlad	r9, r2, r3, r1
 8008766:	4b26      	ldr	r3, [pc, #152]	; (8008800 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008768:	fb28 ec03 	smlad	ip, r8, r3, lr
 800876c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008770:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008774:	4b23      	ldr	r3, [pc, #140]	; (8008804 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008776:	fb22 cc03 	smlad	ip, r2, r3, ip
 800877a:	2101      	movs	r1, #1
 800877c:	fb28 f801 	smuad	r8, r8, r1
 8008780:	4b21      	ldr	r3, [pc, #132]	; (8008808 <D48_1CH_HTONS_VOL_HP+0x164>)
 8008782:	fb25 8503 	smlad	r5, r5, r3, r8
 8008786:	4b21      	ldr	r3, [pc, #132]	; (800880c <D48_1CH_HTONS_VOL_HP+0x168>)
 8008788:	fb22 5e03 	smlad	lr, r2, r3, r5
 800878c:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8008790:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008794:	190a      	adds	r2, r1, r4
 8008796:	9c02      	ldr	r4, [sp, #8]
 8008798:	eba2 020a 	sub.w	r2, r2, sl
 800879c:	468a      	mov	sl, r1
 800879e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80087a2:	fba2 2304 	umull	r2, r3, r2, r4
 80087a6:	fb04 3309 	mla	r3, r4, r9, r3
 80087aa:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 80087ae:	f04f 0900 	mov.w	r9, #0
 80087b2:	f143 0500 	adc.w	r5, r3, #0
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	032a      	lsls	r2, r5, #12
 80087ba:	006c      	lsls	r4, r5, #1
 80087bc:	fbc3 8902 	smlal	r8, r9, r3, r2
 80087c0:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80087c4:	f303 030f 	ssat	r3, #16, r3
 80087c8:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	4283      	cmp	r3, r0
 80087d0:	d185      	bne.n	80086de <D48_1CH_HTONS_VOL_HP+0x3a>
 80087d2:	4673      	mov	r3, lr
 80087d4:	9a05      	ldr	r2, [sp, #20]
 80087d6:	6093      	str	r3, [r2, #8]
 80087d8:	2000      	movs	r0, #0
 80087da:	9b04      	ldr	r3, [sp, #16]
 80087dc:	f8c2 c00c 	str.w	ip, [r2, #12]
 80087e0:	61d6      	str	r6, [r2, #28]
 80087e2:	6193      	str	r3, [r2, #24]
 80087e4:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80087e8:	b007      	add	sp, #28
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ee:	4671      	mov	r1, lr
 80087f0:	e7f1      	b.n	80087d6 <D48_1CH_HTONS_VOL_HP+0x132>
 80087f2:	bf00      	nop
 80087f4:	24000000 	.word	0x24000000
 80087f8:	000f000a 	.word	0x000f000a
 80087fc:	00060003 	.word	0x00060003
 8008800:	00150019 	.word	0x00150019
 8008804:	00190015 	.word	0x00190015
 8008808:	00030006 	.word	0x00030006
 800880c:	000a000f 	.word	0x000a000f

08008810 <D64_1CH_HTONS_VOL_HP>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	6993      	ldr	r3, [r2, #24]
 800881a:	4686      	mov	lr, r0
 800881c:	9503      	str	r5, [sp, #12]
 800881e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008820:	6a15      	ldr	r5, [r2, #32]
 8008822:	9306      	str	r3, [sp, #24]
 8008824:	69d6      	ldr	r6, [r2, #28]
 8008826:	9504      	str	r5, [sp, #16]
 8008828:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800882c:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008830:	2800      	cmp	r0, #0
 8008832:	f000 80a4 	beq.w	800897e <D64_1CH_HTONS_VOL_HP+0x16e>
 8008836:	460f      	mov	r7, r1
 8008838:	46f1      	mov	r9, lr
 800883a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800883e:	4d56      	ldr	r5, [pc, #344]	; (8008998 <D64_1CH_HTONS_VOL_HP+0x188>)
 8008840:	46a2      	mov	sl, r4
 8008842:	469e      	mov	lr, r3
 8008844:	9105      	str	r1, [sp, #20]
 8008846:	9207      	str	r2, [sp, #28]
 8008848:	f859 1b08 	ldr.w	r1, [r9], #8
 800884c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008850:	ba49      	rev16	r1, r1
 8008852:	fa93 fb93 	rev16.w	fp, r3
 8008856:	b2cb      	uxtb	r3, r1
 8008858:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800885c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008860:	0e09      	lsrs	r1, r1, #24
 8008862:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8008866:	fa5f f38b 	uxtb.w	r3, fp
 800886a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800886e:	4426      	add	r6, r4
 8008870:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8008874:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8008878:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800887c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008880:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008884:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8008888:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800888c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008890:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008894:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8008898:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800889c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80088a0:	f3cb 4607 	ubfx	r6, fp, #16, #8
 80088a4:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80088a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80088ac:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80088b0:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 80088b4:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80088b8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80088bc:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 80088c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80088c4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80088c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088cc:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 80088d0:	f3c6 0409 	ubfx	r4, r6, #0, #10
 80088d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80088d8:	f3cb 0009 	ubfx	r0, fp, #0, #10
 80088dc:	ea4f 269b 	mov.w	r6, fp, lsr #10
 80088e0:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 80088e4:	482d      	ldr	r0, [pc, #180]	; (800899c <D64_1CH_HTONS_VOL_HP+0x18c>)
 80088e6:	fb22 cc00 	smlad	ip, r2, r0, ip
 80088ea:	482d      	ldr	r0, [pc, #180]	; (80089a0 <D64_1CH_HTONS_VOL_HP+0x190>)
 80088ec:	fb21 cc00 	smlad	ip, r1, r0, ip
 80088f0:	482c      	ldr	r0, [pc, #176]	; (80089a4 <D64_1CH_HTONS_VOL_HP+0x194>)
 80088f2:	fb23 cc00 	smlad	ip, r3, r0, ip
 80088f6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80088fa:	fb2b c404 	smlad	r4, fp, r4, ip
 80088fe:	482a      	ldr	r0, [pc, #168]	; (80089a8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008900:	fb22 ec00 	smlad	ip, r2, r0, lr
 8008904:	fb2b cc10 	smladx	ip, fp, r0, ip
 8008908:	4828      	ldr	r0, [pc, #160]	; (80089ac <D64_1CH_HTONS_VOL_HP+0x19c>)
 800890a:	fb21 cc00 	smlad	ip, r1, r0, ip
 800890e:	fb23 cc10 	smladx	ip, r3, r0, ip
 8008912:	f04f 0e01 	mov.w	lr, #1
 8008916:	fb22 f20e 	smuad	r2, r2, lr
 800891a:	4825      	ldr	r0, [pc, #148]	; (80089b0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800891c:	fb21 2100 	smlad	r1, r1, r0, r2
 8008920:	4a24      	ldr	r2, [pc, #144]	; (80089b4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8008922:	fb23 1302 	smlad	r3, r3, r2, r1
 8008926:	4a24      	ldr	r2, [pc, #144]	; (80089b8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8008928:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800892c:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8008930:	eb04 0208 	add.w	r2, r4, r8
 8008934:	eba2 020a 	sub.w	r2, r2, sl
 8008938:	46a2      	mov	sl, r4
 800893a:	4610      	mov	r0, r2
 800893c:	17d1      	asrs	r1, r2, #31
 800893e:	e9cd 0100 	strd	r0, r1, [sp]
 8008942:	9904      	ldr	r1, [sp, #16]
 8008944:	9801      	ldr	r0, [sp, #4]
 8008946:	fba2 2301 	umull	r2, r3, r2, r1
 800894a:	fb01 3300 	mla	r3, r1, r0, r3
 800894e:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8008952:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008956:	f143 0100 	adc.w	r1, r3, #0
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	02ca      	lsls	r2, r1, #11
 800895e:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8008962:	2100      	movs	r1, #0
 8008964:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008968:	108b      	asrs	r3, r1, #2
 800896a:	f303 030f 	ssat	r3, #16, r3
 800896e:	f827 3b02 	strh.w	r3, [r7], #2
 8008972:	9b05      	ldr	r3, [sp, #20]
 8008974:	429f      	cmp	r7, r3
 8008976:	f47f af67 	bne.w	8008848 <D64_1CH_HTONS_VOL_HP+0x38>
 800897a:	4673      	mov	r3, lr
 800897c:	9a07      	ldr	r2, [sp, #28]
 800897e:	6093      	str	r3, [r2, #8]
 8008980:	2000      	movs	r0, #0
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008988:	61d6      	str	r6, [r2, #28]
 800898a:	6193      	str	r3, [r2, #24]
 800898c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008990:	b009      	add	sp, #36	; 0x24
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	bf00      	nop
 8008998:	24000000 	.word	0x24000000
 800899c:	001c0015 	.word	0x001c0015
 80089a0:	000f000a 	.word	0x000f000a
 80089a4:	00060003 	.word	0x00060003
 80089a8:	0024002a 	.word	0x0024002a
 80089ac:	002e0030 	.word	0x002e0030
 80089b0:	00030006 	.word	0x00030006
 80089b4:	000a000f 	.word	0x000a000f
 80089b8:	0015001c 	.word	0x0015001c

080089bc <D80_1CH_HTONS_VOL_HP>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	6913      	ldr	r3, [r2, #16]
 80089c2:	b089      	sub	sp, #36	; 0x24
 80089c4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	9603      	str	r6, [sp, #12]
 80089ca:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80089cc:	6a16      	ldr	r6, [r2, #32]
 80089ce:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 80089d2:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 80089d6:	9306      	str	r3, [sp, #24]
 80089d8:	9604      	str	r6, [sp, #16]
 80089da:	69d3      	ldr	r3, [r2, #28]
 80089dc:	2c00      	cmp	r4, #0
 80089de:	f000 80ce 	beq.w	8008b7e <D80_1CH_HTONS_VOL_HP+0x1c2>
 80089e2:	3902      	subs	r1, #2
 80089e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80089e8:	4e66      	ldr	r6, [pc, #408]	; (8008b84 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80089ea:	469e      	mov	lr, r3
 80089ec:	9102      	str	r1, [sp, #8]
 80089ee:	46aa      	mov	sl, r5
 80089f0:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 80089f4:	9207      	str	r2, [sp, #28]
 80089f6:	9105      	str	r1, [sp, #20]
 80089f8:	6883      	ldr	r3, [r0, #8]
 80089fa:	e9d0 4200 	ldrd	r4, r2, [r0]
 80089fe:	300a      	adds	r0, #10
 8008a00:	ba64      	rev16	r4, r4
 8008a02:	ba52      	rev16	r2, r2
 8008a04:	fa93 fb93 	rev16.w	fp, r3
 8008a08:	b2e5      	uxtb	r5, r4
 8008a0a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008a0e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008a12:	0e24      	lsrs	r4, r4, #24
 8008a14:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8008a18:	b2d5      	uxtb	r5, r2
 8008a1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008a1e:	44c6      	add	lr, r8
 8008a20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008a24:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8008a28:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008a2c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008a30:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008a34:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8008a38:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a40:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008a44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008a48:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008a4c:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8008a50:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8008a54:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8008a58:	0e12      	lsrs	r2, r2, #24
 8008a5a:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8008a5e:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008a62:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008a66:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8008a6e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008a72:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008a76:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8008a7a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008a7e:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8008a82:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008a86:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008a8a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008a8e:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8008a92:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a96:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008a9a:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8008a9e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008aa2:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8008aa6:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8008aaa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008aae:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8008ab2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008ab6:	4934      	ldr	r1, [pc, #208]	; (8008b88 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8008ab8:	fb23 cc01 	smlad	ip, r3, r1, ip
 8008abc:	4933      	ldr	r1, [pc, #204]	; (8008b8c <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8008abe:	fb24 cc01 	smlad	ip, r4, r1, ip
 8008ac2:	4933      	ldr	r1, [pc, #204]	; (8008b90 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008ac4:	fb28 cc01 	smlad	ip, r8, r1, ip
 8008ac8:	4932      	ldr	r1, [pc, #200]	; (8008b94 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008aca:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008ace:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008ad2:	fb2b c901 	smlad	r9, fp, r1, ip
 8008ad6:	4930      	ldr	r1, [pc, #192]	; (8008b98 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008ad8:	fb23 7701 	smlad	r7, r3, r1, r7
 8008adc:	492f      	ldr	r1, [pc, #188]	; (8008b9c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008ade:	fb24 7701 	smlad	r7, r4, r1, r7
 8008ae2:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8008ae6:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8008aea:	492d      	ldr	r1, [pc, #180]	; (8008ba0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008aec:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008af0:	492c      	ldr	r1, [pc, #176]	; (8008ba4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008af2:	fb2b cc01 	smlad	ip, fp, r1, ip
 8008af6:	2101      	movs	r1, #1
 8008af8:	fb23 f301 	smuad	r3, r3, r1
 8008afc:	492a      	ldr	r1, [pc, #168]	; (8008ba8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008afe:	fb24 3401 	smlad	r4, r4, r1, r3
 8008b02:	492a      	ldr	r1, [pc, #168]	; (8008bac <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008b04:	fb28 4101 	smlad	r1, r8, r1, r4
 8008b08:	4f29      	ldr	r7, [pc, #164]	; (8008bb0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008b0a:	fb22 1207 	smlad	r2, r2, r7, r1
 8008b0e:	4f29      	ldr	r7, [pc, #164]	; (8008bb4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008b10:	fb2b 2707 	smlad	r7, fp, r7, r2
 8008b14:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	9c04      	ldr	r4, [sp, #16]
 8008b1c:	440b      	add	r3, r1
 8008b1e:	eba3 020a 	sub.w	r2, r3, sl
 8008b22:	468a      	mov	sl, r1
 8008b24:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008b28:	fba2 2304 	umull	r2, r3, r2, r4
 8008b2c:	fb04 3309 	mla	r3, r4, r9, r3
 8008b30:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008b34:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b38:	f143 0500 	adc.w	r5, r3, #0
 8008b3c:	006b      	lsls	r3, r5, #1
 8008b3e:	02aa      	lsls	r2, r5, #10
 8008b40:	2500      	movs	r5, #0
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008b4a:	9a02      	ldr	r2, [sp, #8]
 8008b4c:	10ab      	asrs	r3, r5, #2
 8008b4e:	f303 030f 	ssat	r3, #16, r3
 8008b52:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008b56:	9b05      	ldr	r3, [sp, #20]
 8008b58:	9202      	str	r2, [sp, #8]
 8008b5a:	4298      	cmp	r0, r3
 8008b5c:	f47f af4c 	bne.w	80089f8 <D80_1CH_HTONS_VOL_HP+0x3c>
 8008b60:	4673      	mov	r3, lr
 8008b62:	9a07      	ldr	r2, [sp, #28]
 8008b64:	61d3      	str	r3, [r2, #28]
 8008b66:	2000      	movs	r0, #0
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	6097      	str	r7, [r2, #8]
 8008b6c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008b70:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8008b74:	9b06      	ldr	r3, [sp, #24]
 8008b76:	6193      	str	r3, [r2, #24]
 8008b78:	b009      	add	sp, #36	; 0x24
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	4629      	mov	r1, r5
 8008b80:	e7f0      	b.n	8008b64 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8008b82:	bf00      	nop
 8008b84:	24000000 	.word	0x24000000
 8008b88:	002d0024 	.word	0x002d0024
 8008b8c:	001c0015 	.word	0x001c0015
 8008b90:	000f000a 	.word	0x000f000a
 8008b94:	00060003 	.word	0x00060003
 8008b98:	0037003f 	.word	0x0037003f
 8008b9c:	00450049 	.word	0x00450049
 8008ba0:	00490045 	.word	0x00490045
 8008ba4:	003f0037 	.word	0x003f0037
 8008ba8:	00030006 	.word	0x00030006
 8008bac:	000a000f 	.word	0x000a000f
 8008bb0:	0015001c 	.word	0x0015001c
 8008bb4:	0024002d 	.word	0x0024002d

08008bb8 <D128_1CH_HTONS_VOL_HP>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	6914      	ldr	r4, [r2, #16]
 8008bbe:	b08d      	sub	sp, #52	; 0x34
 8008bc0:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008bc2:	9404      	str	r4, [sp, #16]
 8008bc4:	6954      	ldr	r4, [r2, #20]
 8008bc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008bc8:	9405      	str	r4, [sp, #20]
 8008bca:	6994      	ldr	r4, [r2, #24]
 8008bcc:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008bd0:	940a      	str	r4, [sp, #40]	; 0x28
 8008bd2:	6894      	ldr	r4, [r2, #8]
 8008bd4:	9403      	str	r4, [sp, #12]
 8008bd6:	68d4      	ldr	r4, [r2, #12]
 8008bd8:	9402      	str	r4, [sp, #8]
 8008bda:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008bdc:	6a12      	ldr	r2, [r2, #32]
 8008bde:	9407      	str	r4, [sp, #28]
 8008be0:	9208      	str	r2, [sp, #32]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 812e 	beq.w	8008e44 <D128_1CH_HTONS_VOL_HP+0x28c>
 8008be8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008bec:	f100 0b10 	add.w	fp, r0, #16
 8008bf0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8008e84 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8008bf4:	9106      	str	r1, [sp, #24]
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8008bfc:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8008c00:	ba40      	rev16	r0, r0
 8008c02:	ba52      	rev16	r2, r2
 8008c04:	ba5b      	rev16	r3, r3
 8008c06:	ba76      	rev16	r6, r6
 8008c08:	b2c5      	uxtb	r5, r0
 8008c0a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008c0e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008c12:	0e00      	lsrs	r0, r0, #24
 8008c14:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8008c18:	b2d5      	uxtb	r5, r2
 8008c1a:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8008c1e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008c22:	44bc      	add	ip, r7
 8008c24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c28:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8008c2c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008c30:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8008c34:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8008c38:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008c3c:	0e12      	lsrs	r2, r2, #24
 8008c3e:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8008c42:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008c46:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008c4a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c4e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008c52:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008c56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8008c60:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c64:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8008c68:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008c6c:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8008c70:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008c74:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008c78:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008c7c:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8008c80:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008c84:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8008c88:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008c8c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008c90:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008c94:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008c9e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008ca2:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008ca6:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008caa:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8008cae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008cb2:	b2f3      	uxtb	r3, r6
 8008cb4:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8008cb8:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8008cbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008cc0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008cc4:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008cc8:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008ccc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008cd0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008cd4:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008cd8:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8008cdc:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008ce0:	0e36      	lsrs	r6, r6, #24
 8008ce2:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008ce6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008cea:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8008cee:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008cf2:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8008cf6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008cfa:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8008cfe:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008d02:	9101      	str	r1, [sp, #4]
 8008d04:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008d0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008d12:	4611      	mov	r1, r2
 8008d14:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8008d18:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8008d1c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008d20:	4a49      	ldr	r2, [pc, #292]	; (8008e48 <D128_1CH_HTONS_VOL_HP+0x290>)
 8008d22:	fb2e 3202 	smlad	r2, lr, r2, r3
 8008d26:	4b49      	ldr	r3, [pc, #292]	; (8008e4c <D128_1CH_HTONS_VOL_HP+0x294>)
 8008d28:	fb27 2203 	smlad	r2, r7, r3, r2
 8008d2c:	4b48      	ldr	r3, [pc, #288]	; (8008e50 <D128_1CH_HTONS_VOL_HP+0x298>)
 8008d2e:	fb25 2203 	smlad	r2, r5, r3, r2
 8008d32:	4b48      	ldr	r3, [pc, #288]	; (8008e54 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8008d34:	fb24 2203 	smlad	r2, r4, r3, r2
 8008d38:	4b47      	ldr	r3, [pc, #284]	; (8008e58 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8008d3a:	fb20 2803 	smlad	r8, r0, r3, r2
 8008d3e:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8008d40:	9a01      	ldr	r2, [sp, #4]
 8008d42:	fb22 8203 	smlad	r2, r2, r3, r8
 8008d46:	4b46      	ldr	r3, [pc, #280]	; (8008e60 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8008d48:	9102      	str	r1, [sp, #8]
 8008d4a:	fb21 2203 	smlad	r2, r1, r3, r2
 8008d4e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008d52:	fb26 2308 	smlad	r3, r6, r8, r2
 8008d56:	4619      	mov	r1, r3
 8008d58:	9a03      	ldr	r2, [sp, #12]
 8008d5a:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8008d5c:	fb2e 2803 	smlad	r8, lr, r3, r2
 8008d60:	4b41      	ldr	r3, [pc, #260]	; (8008e68 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8008d62:	fb27 8a03 	smlad	sl, r7, r3, r8
 8008d66:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008e88 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8008d6a:	fb25 a808 	smlad	r8, r5, r8, sl
 8008d6e:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008e8c <D128_1CH_HTONS_VOL_HP+0x2d4>
 8008d72:	fb24 880a 	smlad	r8, r4, sl, r8
 8008d76:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008e90 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8008d7a:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8008d7e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8008e94 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8008d82:	9b01      	ldr	r3, [sp, #4]
 8008d84:	fb23 aa08 	smlad	sl, r3, r8, sl
 8008d88:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008e98 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8008d8c:	9a02      	ldr	r2, [sp, #8]
 8008d8e:	fb22 a808 	smlad	r8, r2, r8, sl
 8008d92:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008e9c <D128_1CH_HTONS_VOL_HP+0x2e4>
 8008d96:	fb26 830a 	smlad	r3, r6, sl, r8
 8008d9a:	f04f 0801 	mov.w	r8, #1
 8008d9e:	9302      	str	r3, [sp, #8]
 8008da0:	fb2e fe08 	smuad	lr, lr, r8
 8008da4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008ea0 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8008da8:	fb27 ee08 	smlad	lr, r7, r8, lr
 8008dac:	4f2f      	ldr	r7, [pc, #188]	; (8008e6c <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8008dae:	fb25 ee07 	smlad	lr, r5, r7, lr
 8008db2:	4f2f      	ldr	r7, [pc, #188]	; (8008e70 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8008db4:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008db8:	4f2e      	ldr	r7, [pc, #184]	; (8008e74 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8008dba:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008dbe:	4f2e      	ldr	r7, [pc, #184]	; (8008e78 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8008dc0:	9b01      	ldr	r3, [sp, #4]
 8008dc2:	fb23 ee07 	smlad	lr, r3, r7, lr
 8008dc6:	4f2d      	ldr	r7, [pc, #180]	; (8008e7c <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8008dc8:	fb22 e707 	smlad	r7, r2, r7, lr
 8008dcc:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008dce:	fb26 7303 	smlad	r3, r6, r3, r7
 8008dd2:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008dde:	9f08      	ldr	r7, [sp, #32]
 8008de0:	2100      	movs	r1, #0
 8008de2:	4433      	add	r3, r6
 8008de4:	f10b 0b10 	add.w	fp, fp, #16
 8008de8:	461a      	mov	r2, r3
 8008dea:	9b05      	ldr	r3, [sp, #20]
 8008dec:	9605      	str	r6, [sp, #20]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	17d5      	asrs	r5, r2, #31
 8008df2:	fba2 2307 	umull	r2, r3, r2, r7
 8008df6:	1814      	adds	r4, r2, r0
 8008df8:	fb07 3305 	mla	r3, r7, r5, r3
 8008dfc:	eb43 0501 	adc.w	r5, r3, r1
 8008e00:	006b      	lsls	r3, r5, #1
 8008e02:	022a      	lsls	r2, r5, #8
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	9b07      	ldr	r3, [sp, #28]
 8008e08:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008e0c:	9a06      	ldr	r2, [sp, #24]
 8008e0e:	108b      	asrs	r3, r1, #2
 8008e10:	f303 030f 	ssat	r3, #16, r3
 8008e14:	f822 3b02 	strh.w	r3, [r2], #2
 8008e18:	4613      	mov	r3, r2
 8008e1a:	9206      	str	r2, [sp, #24]
 8008e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	f47f aeea 	bne.w	8008bf8 <D128_1CH_HTONS_VOL_HP+0x40>
 8008e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e26:	2000      	movs	r0, #0
 8008e28:	9903      	ldr	r1, [sp, #12]
 8008e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e2c:	6099      	str	r1, [r3, #8]
 8008e2e:	9902      	ldr	r1, [sp, #8]
 8008e30:	f8c3 c01c 	str.w	ip, [r3, #28]
 8008e34:	60d9      	str	r1, [r3, #12]
 8008e36:	9904      	ldr	r1, [sp, #16]
 8008e38:	619a      	str	r2, [r3, #24]
 8008e3a:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8008e3e:	b00d      	add	sp, #52	; 0x34
 8008e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e44:	9e05      	ldr	r6, [sp, #20]
 8008e46:	e7ed      	b.n	8008e24 <D128_1CH_HTONS_VOL_HP+0x26c>
 8008e48:	00780069 	.word	0x00780069
 8008e4c:	005b004e 	.word	0x005b004e
 8008e50:	00420037 	.word	0x00420037
 8008e54:	002d0024 	.word	0x002d0024
 8008e58:	001c0015 	.word	0x001c0015
 8008e5c:	000f000a 	.word	0x000f000a
 8008e60:	00060003 	.word	0x00060003
 8008e64:	00880096 	.word	0x00880096
 8008e68:	00a200ac 	.word	0x00a200ac
 8008e6c:	000a000f 	.word	0x000a000f
 8008e70:	0015001c 	.word	0x0015001c
 8008e74:	0024002d 	.word	0x0024002d
 8008e78:	00370042 	.word	0x00370042
 8008e7c:	004e005b 	.word	0x004e005b
 8008e80:	00690078 	.word	0x00690078
 8008e84:	24000000 	.word	0x24000000
 8008e88:	00b400ba 	.word	0x00b400ba
 8008e8c:	00be00c0 	.word	0x00be00c0
 8008e90:	00c000be 	.word	0x00c000be
 8008e94:	00ba00b4 	.word	0x00ba00b4
 8008e98:	00ac00a2 	.word	0x00ac00a2
 8008e9c:	00960088 	.word	0x00960088
 8008ea0:	00030006 	.word	0x00030006

08008ea4 <PDM_Filter_Init>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	2240      	movs	r2, #64	; 0x40
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	300c      	adds	r0, #12
 8008eae:	f000 f9ed 	bl	800928c <memset>
 8008eb2:	4a56      	ldr	r2, [pc, #344]	; (800900c <PDM_Filter_Init+0x168>)
 8008eb4:	4856      	ldr	r0, [pc, #344]	; (8009010 <PDM_Filter_Init+0x16c>)
 8008eb6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008eba:	6813      	ldr	r3, [r2, #0]
 8008ebc:	f24c 2540 	movw	r5, #49728	; 0xc240
 8008ec0:	f023 0301 	bic.w	r3, r3, #1
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	6803      	ldr	r3, [r0, #0]
 8008ec8:	400b      	ands	r3, r1
 8008eca:	42ab      	cmp	r3, r5
 8008ecc:	d040      	beq.n	8008f50 <PDM_Filter_Init+0xac>
 8008ece:	6803      	ldr	r3, [r0, #0]
 8008ed0:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008ed4:	4019      	ands	r1, r3
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	d03a      	beq.n	8008f50 <PDM_Filter_Init+0xac>
 8008eda:	4b4e      	ldr	r3, [pc, #312]	; (8009014 <PDM_Filter_Init+0x170>)
 8008edc:	2101      	movs	r1, #1
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6019      	str	r1, [r3, #0]
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1fc      	bne.n	8008ee2 <PDM_Filter_Init+0x3e>
 8008ee8:	4b4b      	ldr	r3, [pc, #300]	; (8009018 <PDM_Filter_Init+0x174>)
 8008eea:	494c      	ldr	r1, [pc, #304]	; (800901c <PDM_Filter_Init+0x178>)
 8008eec:	4a4c      	ldr	r2, [pc, #304]	; (8009020 <PDM_Filter_Init+0x17c>)
 8008eee:	6019      	str	r1, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	8820      	ldrh	r0, [r4, #0]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	8961      	ldrh	r1, [r4, #10]
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	8922      	ldrh	r2, [r4, #8]
 8008efe:	bf14      	ite	ne
 8008f00:	2500      	movne	r5, #0
 8008f02:	4d47      	ldreq	r5, [pc, #284]	; (8009020 <PDM_Filter_Init+0x17c>)
 8008f04:	2801      	cmp	r0, #1
 8008f06:	61a3      	str	r3, [r4, #24]
 8008f08:	6465      	str	r5, [r4, #68]	; 0x44
 8008f0a:	60e3      	str	r3, [r4, #12]
 8008f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f0e:	6423      	str	r3, [r4, #64]	; 0x40
 8008f10:	86a1      	strh	r1, [r4, #52]	; 0x34
 8008f12:	86e2      	strh	r2, [r4, #54]	; 0x36
 8008f14:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008f18:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008f1c:	d936      	bls.n	8008f8c <PDM_Filter_Init+0xe8>
 8008f1e:	2003      	movs	r0, #3
 8008f20:	2302      	movs	r3, #2
 8008f22:	8862      	ldrh	r2, [r4, #2]
 8008f24:	2a01      	cmp	r2, #1
 8008f26:	d92e      	bls.n	8008f86 <PDM_Filter_Init+0xe2>
 8008f28:	2140      	movs	r1, #64	; 0x40
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008f2e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008f32:	d101      	bne.n	8008f38 <PDM_Filter_Init+0x94>
 8008f34:	460b      	mov	r3, r1
 8008f36:	6421      	str	r1, [r4, #64]	; 0x40
 8008f38:	6862      	ldr	r2, [r4, #4]
 8008f3a:	b11a      	cbz	r2, 8008f44 <PDM_Filter_Init+0xa0>
 8008f3c:	f043 0310 	orr.w	r3, r3, #16
 8008f40:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008f42:	6423      	str	r3, [r4, #64]	; 0x40
 8008f44:	2200      	movs	r2, #0
 8008f46:	8722      	strh	r2, [r4, #56]	; 0x38
 8008f48:	b908      	cbnz	r0, 8008f4e <PDM_Filter_Init+0xaa>
 8008f4a:	3380      	adds	r3, #128	; 0x80
 8008f4c:	6423      	str	r3, [r4, #64]	; 0x40
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f50:	4b34      	ldr	r3, [pc, #208]	; (8009024 <PDM_Filter_Init+0x180>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1c0      	bne.n	8008eda <PDM_Filter_Init+0x36>
 8008f58:	4a33      	ldr	r2, [pc, #204]	; (8009028 <PDM_Filter_Init+0x184>)
 8008f5a:	6813      	ldr	r3, [r2, #0]
 8008f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f60:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008f64:	d006      	beq.n	8008f74 <PDM_Filter_Init+0xd0>
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	f240 4283 	movw	r2, #1155	; 0x483
 8008f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d1b2      	bne.n	8008eda <PDM_Filter_Init+0x36>
 8008f74:	4b2d      	ldr	r3, [pc, #180]	; (800902c <PDM_Filter_Init+0x188>)
 8008f76:	2101      	movs	r1, #1
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6019      	str	r1, [r3, #0]
 8008f7c:	6813      	ldr	r3, [r2, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1fc      	bne.n	8008f7c <PDM_Filter_Init+0xd8>
 8008f82:	4b2b      	ldr	r3, [pc, #172]	; (8009030 <PDM_Filter_Init+0x18c>)
 8008f84:	e7b1      	b.n	8008eea <PDM_Filter_Init+0x46>
 8008f86:	d03a      	beq.n	8008ffe <PDM_Filter_Init+0x15a>
 8008f88:	4618      	mov	r0, r3
 8008f8a:	e7cd      	b.n	8008f28 <PDM_Filter_Init+0x84>
 8008f8c:	4d29      	ldr	r5, [pc, #164]	; (8009034 <PDM_Filter_Init+0x190>)
 8008f8e:	782a      	ldrb	r2, [r5, #0]
 8008f90:	d01b      	beq.n	8008fca <PDM_Filter_Init+0x126>
 8008f92:	2a01      	cmp	r2, #1
 8008f94:	d001      	beq.n	8008f9a <PDM_Filter_Init+0xf6>
 8008f96:	2001      	movs	r0, #1
 8008f98:	e7c3      	b.n	8008f22 <PDM_Filter_Init+0x7e>
 8008f9a:	4927      	ldr	r1, [pc, #156]	; (8009038 <PDM_Filter_Init+0x194>)
 8008f9c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8009040 <PDM_Filter_Init+0x19c>
 8008fa0:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8008fa4:	4e25      	ldr	r6, [pc, #148]	; (800903c <PDM_Filter_Init+0x198>)
 8008fa6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008faa:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8008fae:	ea02 0006 	and.w	r0, r2, r6
 8008fb2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008fb6:	428f      	cmp	r7, r1
 8008fb8:	ea43 0300 	orr.w	r3, r3, r0
 8008fbc:	4413      	add	r3, r2
 8008fbe:	600b      	str	r3, [r1, #0]
 8008fc0:	d1f1      	bne.n	8008fa6 <PDM_Filter_Init+0x102>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	702b      	strb	r3, [r5, #0]
 8008fc8:	e7ab      	b.n	8008f22 <PDM_Filter_Init+0x7e>
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	d1a9      	bne.n	8008f22 <PDM_Filter_Init+0x7e>
 8008fce:	491a      	ldr	r1, [pc, #104]	; (8009038 <PDM_Filter_Init+0x194>)
 8008fd0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8009040 <PDM_Filter_Init+0x19c>
 8008fd4:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8008fd8:	4e18      	ldr	r6, [pc, #96]	; (800903c <PDM_Filter_Init+0x198>)
 8008fda:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008fde:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8008fe2:	ea02 0006 	and.w	r0, r2, r6
 8008fe6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008fea:	428f      	cmp	r7, r1
 8008fec:	ea43 0300 	orr.w	r3, r3, r0
 8008ff0:	4413      	add	r3, r2
 8008ff2:	600b      	str	r3, [r1, #0]
 8008ff4:	d1f1      	bne.n	8008fda <PDM_Filter_Init+0x136>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	7028      	strb	r0, [r5, #0]
 8008ffc:	e791      	b.n	8008f22 <PDM_Filter_Init+0x7e>
 8008ffe:	2220      	movs	r2, #32
 8009000:	4618      	mov	r0, r3
 8009002:	2160      	movs	r1, #96	; 0x60
 8009004:	6422      	str	r2, [r4, #64]	; 0x40
 8009006:	4613      	mov	r3, r2
 8009008:	e790      	b.n	8008f2c <PDM_Filter_Init+0x88>
 800900a:	bf00      	nop
 800900c:	e0002000 	.word	0xe0002000
 8009010:	e000ed00 	.word	0xe000ed00
 8009014:	40023008 	.word	0x40023008
 8009018:	40023000 	.word	0x40023000
 800901c:	f407a5c2 	.word	0xf407a5c2
 8009020:	b5e8b5cd 	.word	0xb5e8b5cd
 8009024:	e0042000 	.word	0xe0042000
 8009028:	5c001000 	.word	0x5c001000
 800902c:	58024c08 	.word	0x58024c08
 8009030:	58024c00 	.word	0x58024c00
 8009034:	24000498 	.word	0x24000498
 8009038:	23fffffc 	.word	0x23fffffc
 800903c:	000ffc00 	.word	0x000ffc00
 8009040:	3ff00000 	.word	0x3ff00000

08009044 <PDM_Filter_setConfig>:
 8009044:	4b67      	ldr	r3, [pc, #412]	; (80091e4 <PDM_Filter_setConfig+0x1a0>)
 8009046:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009048:	429a      	cmp	r2, r3
 800904a:	d128      	bne.n	800909e <PDM_Filter_setConfig+0x5a>
 800904c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800904e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009050:	880e      	ldrh	r6, [r1, #0]
 8009052:	460d      	mov	r5, r1
 8009054:	4604      	mov	r4, r0
 8009056:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800905a:	1e73      	subs	r3, r6, #1
 800905c:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8009060:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8009064:	2b06      	cmp	r3, #6
 8009066:	ed2d 8b02 	vpush	{d8}
 800906a:	6421      	str	r1, [r4, #64]	; 0x40
 800906c:	b083      	sub	sp, #12
 800906e:	d820      	bhi.n	80090b2 <PDM_Filter_setConfig+0x6e>
 8009070:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009072:	42b3      	cmp	r3, r6
 8009074:	d03d      	beq.n	80090f2 <PDM_Filter_setConfig+0xae>
 8009076:	4b5c      	ldr	r3, [pc, #368]	; (80091e8 <PDM_Filter_setConfig+0x1a4>)
 8009078:	4013      	ands	r3, r2
 800907a:	4333      	orrs	r3, r6
 800907c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009080:	6423      	str	r3, [r4, #64]	; 0x40
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	2a70      	cmp	r2, #112	; 0x70
 8009088:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800908c:	d009      	beq.n	80090a2 <PDM_Filter_setConfig+0x5e>
 800908e:	2b06      	cmp	r3, #6
 8009090:	d824      	bhi.n	80090dc <PDM_Filter_setConfig+0x98>
 8009092:	e8df f003 	tbb	[pc, r3]
 8009096:	878a      	.short	0x878a
 8009098:	7b7e8184 	.word	0x7b7e8184
 800909c:	78          	.byte	0x78
 800909d:	00          	.byte	0x00
 800909e:	2004      	movs	r0, #4
 80090a0:	4770      	bx	lr
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d81a      	bhi.n	80090dc <PDM_Filter_setConfig+0x98>
 80090a6:	e8df f003 	tbb	[pc, r3]
 80090aa:	8f92      	.short	0x8f92
 80090ac:	8617898c 	.word	0x8617898c
 80090b0:	83          	.byte	0x83
 80090b1:	00          	.byte	0x00
 80090b2:	4287      	cmp	r7, r0
 80090b4:	f000 808e 	beq.w	80091d4 <PDM_Filter_setConfig+0x190>
 80090b8:	f117 0f0c 	cmn.w	r7, #12
 80090bc:	f04f 0008 	mov.w	r0, #8
 80090c0:	da11      	bge.n	80090e6 <PDM_Filter_setConfig+0xa2>
 80090c2:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80090c6:	3040      	adds	r0, #64	; 0x40
 80090c8:	80ab      	strh	r3, [r5, #4]
 80090ca:	886b      	ldrh	r3, [r5, #2]
 80090cc:	8626      	strh	r6, [r4, #48]	; 0x30
 80090ce:	8663      	strh	r3, [r4, #50]	; 0x32
 80090d0:	b003      	add	sp, #12
 80090d2:	ecbd 8b02 	vpop	{d8}
 80090d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d8:	4b44      	ldr	r3, [pc, #272]	; (80091ec <PDM_Filter_setConfig+0x1a8>)
 80090da:	64a3      	str	r3, [r4, #72]	; 0x48
 80090dc:	f117 0f0c 	cmn.w	r7, #12
 80090e0:	f04f 0000 	mov.w	r0, #0
 80090e4:	dbed      	blt.n	80090c2 <PDM_Filter_setConfig+0x7e>
 80090e6:	2f33      	cmp	r7, #51	; 0x33
 80090e8:	dd10      	ble.n	800910c <PDM_Filter_setConfig+0xc8>
 80090ea:	2333      	movs	r3, #51	; 0x33
 80090ec:	3040      	adds	r0, #64	; 0x40
 80090ee:	80ab      	strh	r3, [r5, #4]
 80090f0:	e7eb      	b.n	80090ca <PDM_Filter_setConfig+0x86>
 80090f2:	4287      	cmp	r7, r0
 80090f4:	d1f2      	bne.n	80090dc <PDM_Filter_setConfig+0x98>
 80090f6:	886b      	ldrh	r3, [r5, #2]
 80090f8:	8663      	strh	r3, [r4, #50]	; 0x32
 80090fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090fc:	2000      	movs	r0, #0
 80090fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009102:	6423      	str	r3, [r4, #64]	; 0x40
 8009104:	b003      	add	sp, #12
 8009106:	ecbd 8b02 	vpop	{d8}
 800910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800910e:	f003 030f 	and.w	r3, r3, #15
 8009112:	3b01      	subs	r3, #1
 8009114:	2b06      	cmp	r3, #6
 8009116:	d831      	bhi.n	800917c <PDM_Filter_setConfig+0x138>
 8009118:	4a35      	ldr	r2, [pc, #212]	; (80091f0 <PDM_Filter_setConfig+0x1ac>)
 800911a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800911e:	eddf 0a35 	vldr	s1, [pc, #212]	; 80091f4 <PDM_Filter_setConfig+0x1b0>
 8009122:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009126:	9001      	str	r0, [sp, #4]
 8009128:	edd3 7a07 	vldr	s15, [r3, #28]
 800912c:	ed93 8a00 	vldr	s16, [r3]
 8009130:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009134:	f000 f8cc 	bl	80092d0 <powf>
 8009138:	eef0 8a40 	vmov.f32	s17, s0
 800913c:	9801      	ldr	r0, [sp, #4]
 800913e:	ee07 7a90 	vmov	s15, r7
 8009142:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009146:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800914a:	9001      	str	r0, [sp, #4]
 800914c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009150:	eddf 7a29 	vldr	s15, [pc, #164]	; 80091f8 <PDM_Filter_setConfig+0x1b4>
 8009154:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009158:	f000 f8ba 	bl	80092d0 <powf>
 800915c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009160:	886b      	ldrh	r3, [r5, #2]
 8009162:	9801      	ldr	r0, [sp, #4]
 8009164:	feb8 8a48 	vrinta.f32	s16, s16
 8009168:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800916c:	8727      	strh	r7, [r4, #56]	; 0x38
 800916e:	8663      	strh	r3, [r4, #50]	; 0x32
 8009170:	8626      	strh	r6, [r4, #48]	; 0x30
 8009172:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 8009176:	2800      	cmp	r0, #0
 8009178:	d0bf      	beq.n	80090fa <PDM_Filter_setConfig+0xb6>
 800917a:	e7a9      	b.n	80090d0 <PDM_Filter_setConfig+0x8c>
 800917c:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80091fc <PDM_Filter_setConfig+0x1b8>
 8009180:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8009200 <PDM_Filter_setConfig+0x1bc>
 8009184:	e7db      	b.n	800913e <PDM_Filter_setConfig+0xfa>
 8009186:	4b1f      	ldr	r3, [pc, #124]	; (8009204 <PDM_Filter_setConfig+0x1c0>)
 8009188:	64a3      	str	r3, [r4, #72]	; 0x48
 800918a:	e7a7      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 800918c:	4b1e      	ldr	r3, [pc, #120]	; (8009208 <PDM_Filter_setConfig+0x1c4>)
 800918e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009190:	e7a4      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 8009192:	4b1e      	ldr	r3, [pc, #120]	; (800920c <PDM_Filter_setConfig+0x1c8>)
 8009194:	64a3      	str	r3, [r4, #72]	; 0x48
 8009196:	e7a1      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 8009198:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <PDM_Filter_setConfig+0x1cc>)
 800919a:	64a3      	str	r3, [r4, #72]	; 0x48
 800919c:	e79e      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 800919e:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <PDM_Filter_setConfig+0x1d0>)
 80091a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80091a2:	e79b      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091a4:	4b1c      	ldr	r3, [pc, #112]	; (8009218 <PDM_Filter_setConfig+0x1d4>)
 80091a6:	64a3      	str	r3, [r4, #72]	; 0x48
 80091a8:	e798      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091aa:	4b1c      	ldr	r3, [pc, #112]	; (800921c <PDM_Filter_setConfig+0x1d8>)
 80091ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80091ae:	e795      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091b0:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <PDM_Filter_setConfig+0x1dc>)
 80091b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80091b4:	e792      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091b6:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <PDM_Filter_setConfig+0x1e0>)
 80091b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80091ba:	e78f      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091bc:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <PDM_Filter_setConfig+0x1e4>)
 80091be:	64a3      	str	r3, [r4, #72]	; 0x48
 80091c0:	e78c      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091c2:	4b1a      	ldr	r3, [pc, #104]	; (800922c <PDM_Filter_setConfig+0x1e8>)
 80091c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80091c6:	e789      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <PDM_Filter_setConfig+0x1ec>)
 80091ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80091cc:	e786      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091ce:	4b19      	ldr	r3, [pc, #100]	; (8009234 <PDM_Filter_setConfig+0x1f0>)
 80091d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80091d2:	e783      	b.n	80090dc <PDM_Filter_setConfig+0x98>
 80091d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80091d6:	42b3      	cmp	r3, r6
 80091d8:	f47f af6e 	bne.w	80090b8 <PDM_Filter_setConfig+0x74>
 80091dc:	886b      	ldrh	r3, [r5, #2]
 80091de:	2008      	movs	r0, #8
 80091e0:	8663      	strh	r3, [r4, #50]	; 0x32
 80091e2:	e775      	b.n	80090d0 <PDM_Filter_setConfig+0x8c>
 80091e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80091e8:	fffffef0 	.word	0xfffffef0
 80091ec:	0800835d 	.word	0x0800835d
 80091f0:	08009640 	.word	0x08009640
 80091f4:	42000000 	.word	0x42000000
 80091f8:	3d4ccccd 	.word	0x3d4ccccd
 80091fc:	4f800000 	.word	0x4f800000
 8009200:	00000000 	.word	0x00000000
 8009204:	08007769 	.word	0x08007769
 8009208:	080075f1 	.word	0x080075f1
 800920c:	080074e1 	.word	0x080074e1
 8009210:	08007fa5 	.word	0x08007fa5
 8009214:	08007d0d 	.word	0x08007d0d
 8009218:	08007ad5 	.word	0x08007ad5
 800921c:	080078f1 	.word	0x080078f1
 8009220:	08008579 	.word	0x08008579
 8009224:	0800843d 	.word	0x0800843d
 8009228:	08008bb9 	.word	0x08008bb9
 800922c:	080089bd 	.word	0x080089bd
 8009230:	08008811 	.word	0x08008811
 8009234:	080086a5 	.word	0x080086a5

08009238 <__errno>:
 8009238:	4b01      	ldr	r3, [pc, #4]	; (8009240 <__errno+0x8>)
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	24000418 	.word	0x24000418

08009244 <__libc_init_array>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4d0d      	ldr	r5, [pc, #52]	; (800927c <__libc_init_array+0x38>)
 8009248:	4c0d      	ldr	r4, [pc, #52]	; (8009280 <__libc_init_array+0x3c>)
 800924a:	1b64      	subs	r4, r4, r5
 800924c:	10a4      	asrs	r4, r4, #2
 800924e:	2600      	movs	r6, #0
 8009250:	42a6      	cmp	r6, r4
 8009252:	d109      	bne.n	8009268 <__libc_init_array+0x24>
 8009254:	4d0b      	ldr	r5, [pc, #44]	; (8009284 <__libc_init_array+0x40>)
 8009256:	4c0c      	ldr	r4, [pc, #48]	; (8009288 <__libc_init_array+0x44>)
 8009258:	f000 f9e6 	bl	8009628 <_init>
 800925c:	1b64      	subs	r4, r4, r5
 800925e:	10a4      	asrs	r4, r4, #2
 8009260:	2600      	movs	r6, #0
 8009262:	42a6      	cmp	r6, r4
 8009264:	d105      	bne.n	8009272 <__libc_init_array+0x2e>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	f855 3b04 	ldr.w	r3, [r5], #4
 800926c:	4798      	blx	r3
 800926e:	3601      	adds	r6, #1
 8009270:	e7ee      	b.n	8009250 <__libc_init_array+0xc>
 8009272:	f855 3b04 	ldr.w	r3, [r5], #4
 8009276:	4798      	blx	r3
 8009278:	3601      	adds	r6, #1
 800927a:	e7f2      	b.n	8009262 <__libc_init_array+0x1e>
 800927c:	08009908 	.word	0x08009908
 8009280:	08009908 	.word	0x08009908
 8009284:	08009908 	.word	0x08009908
 8009288:	0800990c 	.word	0x0800990c

0800928c <memset>:
 800928c:	4402      	add	r2, r0
 800928e:	4603      	mov	r3, r0
 8009290:	4293      	cmp	r3, r2
 8009292:	d100      	bne.n	8009296 <memset+0xa>
 8009294:	4770      	bx	lr
 8009296:	f803 1b01 	strb.w	r1, [r3], #1
 800929a:	e7f9      	b.n	8009290 <memset+0x4>

0800929c <checkint>:
 800929c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80092a0:	2b7e      	cmp	r3, #126	; 0x7e
 80092a2:	dd10      	ble.n	80092c6 <checkint+0x2a>
 80092a4:	2b96      	cmp	r3, #150	; 0x96
 80092a6:	dc0c      	bgt.n	80092c2 <checkint+0x26>
 80092a8:	2201      	movs	r2, #1
 80092aa:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	1e5a      	subs	r2, r3, #1
 80092b4:	4202      	tst	r2, r0
 80092b6:	d106      	bne.n	80092c6 <checkint+0x2a>
 80092b8:	4203      	tst	r3, r0
 80092ba:	bf0c      	ite	eq
 80092bc:	2002      	moveq	r0, #2
 80092be:	2001      	movne	r0, #1
 80092c0:	4770      	bx	lr
 80092c2:	2002      	movs	r0, #2
 80092c4:	4770      	bx	lr
 80092c6:	2000      	movs	r0, #0
 80092c8:	4770      	bx	lr
 80092ca:	0000      	movs	r0, r0
 80092cc:	0000      	movs	r0, r0
	...

080092d0 <powf>:
 80092d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d2:	ee10 1a10 	vmov	r1, s0
 80092d6:	ee10 6a90 	vmov	r6, s1
 80092da:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80092de:	0072      	lsls	r2, r6, #1
 80092e0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80092e4:	b085      	sub	sp, #20
 80092e6:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80092ea:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80092ee:	d256      	bcs.n	800939e <powf+0xce>
 80092f0:	4298      	cmp	r0, r3
 80092f2:	d256      	bcs.n	80093a2 <powf+0xd2>
 80092f4:	2000      	movs	r0, #0
 80092f6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80092fa:	4ea3      	ldr	r6, [pc, #652]	; (8009588 <powf+0x2b8>)
 80092fc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009300:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009304:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009308:	0dd2      	lsrs	r2, r2, #23
 800930a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800930e:	05d2      	lsls	r2, r2, #23
 8009310:	1a8b      	subs	r3, r1, r2
 8009312:	ed97 5b00 	vldr	d5, [r7]
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	15d2      	asrs	r2, r2, #23
 800931c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009320:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009324:	ed97 5b02 	vldr	d5, [r7, #8]
 8009328:	ee26 2b06 	vmul.f64	d2, d6, d6
 800932c:	ee22 1b02 	vmul.f64	d1, d2, d2
 8009330:	ee07 2a90 	vmov	s15, r2
 8009334:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8009338:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800933c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009340:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8009344:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8009348:	eea6 5b04 	vfma.f64	d5, d6, d4
 800934c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8009350:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009354:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8009358:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800935c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009360:	eea2 7b04 	vfma.f64	d7, d2, d4
 8009364:	eea5 7b01 	vfma.f64	d7, d5, d1
 8009368:	ee20 0b07 	vmul.f64	d0, d0, d7
 800936c:	ee10 1a90 	vmov	r1, s1
 8009370:	2300      	movs	r3, #0
 8009372:	2700      	movs	r7, #0
 8009374:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009378:	f248 06be 	movw	r6, #32958	; 0x80be
 800937c:	429f      	cmp	r7, r3
 800937e:	bf08      	it	eq
 8009380:	4296      	cmpeq	r6, r2
 8009382:	f080 80b1 	bcs.w	80094e8 <powf+0x218>
 8009386:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8009568 <powf+0x298>
 800938a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800938e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009392:	dd79      	ble.n	8009488 <powf+0x1b8>
 8009394:	b005      	add	sp, #20
 8009396:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800939a:	f000 b91f 	b.w	80095dc <__math_oflowf>
 800939e:	4298      	cmp	r0, r3
 80093a0:	d32d      	bcc.n	80093fe <powf+0x12e>
 80093a2:	b952      	cbnz	r2, 80093ba <powf+0xea>
 80093a4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80093ae:	f240 80cd 	bls.w	800954c <powf+0x27c>
 80093b2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80093b6:	b005      	add	sp, #20
 80093b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ba:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80093be:	d105      	bne.n	80093cc <powf+0xfc>
 80093c0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80093c4:	0076      	lsls	r6, r6, #1
 80093c6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80093ca:	e7f0      	b.n	80093ae <powf+0xde>
 80093cc:	004b      	lsls	r3, r1, #1
 80093ce:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80093d2:	d8ee      	bhi.n	80093b2 <powf+0xe2>
 80093d4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80093d8:	d1eb      	bne.n	80093b2 <powf+0xe2>
 80093da:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80093de:	f000 80b5 	beq.w	800954c <powf+0x27c>
 80093e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80093e6:	ea6f 0606 	mvn.w	r6, r6
 80093ea:	bf34      	ite	cc
 80093ec:	2300      	movcc	r3, #0
 80093ee:	2301      	movcs	r3, #1
 80093f0:	0ff6      	lsrs	r6, r6, #31
 80093f2:	42b3      	cmp	r3, r6
 80093f4:	f040 80ad 	bne.w	8009552 <powf+0x282>
 80093f8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80093fc:	e7db      	b.n	80093b6 <powf+0xe6>
 80093fe:	004f      	lsls	r7, r1, #1
 8009400:	1e7a      	subs	r2, r7, #1
 8009402:	429a      	cmp	r2, r3
 8009404:	d31c      	bcc.n	8009440 <powf+0x170>
 8009406:	2900      	cmp	r1, #0
 8009408:	ee20 0a00 	vmul.f32	s0, s0, s0
 800940c:	da0f      	bge.n	800942e <powf+0x15e>
 800940e:	ee10 0a90 	vmov	r0, s1
 8009412:	f7ff ff43 	bl	800929c <checkint>
 8009416:	2801      	cmp	r0, #1
 8009418:	d109      	bne.n	800942e <powf+0x15e>
 800941a:	eeb1 0a40 	vneg.f32	s0, s0
 800941e:	b947      	cbnz	r7, 8009432 <powf+0x162>
 8009420:	2e00      	cmp	r6, #0
 8009422:	dac8      	bge.n	80093b6 <powf+0xe6>
 8009424:	b005      	add	sp, #20
 8009426:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800942a:	f000 b8dd 	b.w	80095e8 <__math_divzerof>
 800942e:	2000      	movs	r0, #0
 8009430:	e7f5      	b.n	800941e <powf+0x14e>
 8009432:	2e00      	cmp	r6, #0
 8009434:	dabf      	bge.n	80093b6 <powf+0xe6>
 8009436:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800943a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800943e:	e7ba      	b.n	80093b6 <powf+0xe6>
 8009440:	2900      	cmp	r1, #0
 8009442:	da1f      	bge.n	8009484 <powf+0x1b4>
 8009444:	ee10 0a90 	vmov	r0, s1
 8009448:	f7ff ff28 	bl	800929c <checkint>
 800944c:	b920      	cbnz	r0, 8009458 <powf+0x188>
 800944e:	b005      	add	sp, #20
 8009450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009454:	f000 b8d8 	b.w	8009608 <__math_invalidf>
 8009458:	2801      	cmp	r0, #1
 800945a:	bf14      	ite	ne
 800945c:	2000      	movne	r0, #0
 800945e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009462:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009466:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800946a:	f4bf af44 	bcs.w	80092f6 <powf+0x26>
 800946e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800958c <powf+0x2bc>
 8009472:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009476:	ee10 3a10 	vmov	r3, s0
 800947a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800947e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8009482:	e738      	b.n	80092f6 <powf+0x26>
 8009484:	2000      	movs	r0, #0
 8009486:	e7ee      	b.n	8009466 <powf+0x196>
 8009488:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8009570 <powf+0x2a0>
 800948c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009494:	dd10      	ble.n	80094b8 <powf+0x1e8>
 8009496:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800949a:	2800      	cmp	r0, #0
 800949c:	d15c      	bne.n	8009558 <powf+0x288>
 800949e:	9302      	str	r3, [sp, #8]
 80094a0:	eddd 7a02 	vldr	s15, [sp, #8]
 80094a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094ac:	eef4 7a47 	vcmp.f32	s15, s14
 80094b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b4:	f47f af6e 	bne.w	8009394 <powf+0xc4>
 80094b8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009578 <powf+0x2a8>
 80094bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d804      	bhi.n	80094d0 <powf+0x200>
 80094c6:	b005      	add	sp, #20
 80094c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094cc:	f000 b87a 	b.w	80095c4 <__math_uflowf>
 80094d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009580 <powf+0x2b0>
 80094d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80094d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094dc:	d504      	bpl.n	80094e8 <powf+0x218>
 80094de:	b005      	add	sp, #20
 80094e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094e4:	f000 b874 	b.w	80095d0 <__math_may_uflowf>
 80094e8:	4b29      	ldr	r3, [pc, #164]	; (8009590 <powf+0x2c0>)
 80094ea:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80094ee:	ee30 6b07 	vadd.f64	d6, d0, d7
 80094f2:	ed8d 6b00 	vstr	d6, [sp]
 80094f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80094fa:	ee30 7b47 	vsub.f64	d7, d0, d7
 80094fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009502:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009506:	f006 011f 	and.w	r1, r6, #31
 800950a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800950e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8009512:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8009516:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800951a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800951e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009522:	ee27 5b07 	vmul.f64	d5, d7, d7
 8009526:	1836      	adds	r6, r6, r0
 8009528:	2300      	movs	r3, #0
 800952a:	eb13 040c 	adds.w	r4, r3, ip
 800952e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 8009532:	eb41 050e 	adc.w	r5, r1, lr
 8009536:	eea7 0b04 	vfma.f64	d0, d7, d4
 800953a:	ec45 4b17 	vmov	d7, r4, r5
 800953e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8009542:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009546:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800954a:	e734      	b.n	80093b6 <powf+0xe6>
 800954c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009550:	e731      	b.n	80093b6 <powf+0xe6>
 8009552:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009594 <powf+0x2c4>
 8009556:	e72e      	b.n	80093b6 <powf+0xe6>
 8009558:	9303      	str	r3, [sp, #12]
 800955a:	eddd 7a03 	vldr	s15, [sp, #12]
 800955e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009566:	e7a1      	b.n	80094ac <powf+0x1dc>
 8009568:	ffd1d571 	.word	0xffd1d571
 800956c:	405fffff 	.word	0x405fffff
 8009570:	ffa3aae2 	.word	0xffa3aae2
 8009574:	405fffff 	.word	0x405fffff
 8009578:	00000000 	.word	0x00000000
 800957c:	c062c000 	.word	0xc062c000
 8009580:	00000000 	.word	0x00000000
 8009584:	c062a000 	.word	0xc062a000
 8009588:	08009698 	.word	0x08009698
 800958c:	4b000000 	.word	0x4b000000
 8009590:	080097c0 	.word	0x080097c0
 8009594:	00000000 	.word	0x00000000

08009598 <with_errnof>:
 8009598:	b513      	push	{r0, r1, r4, lr}
 800959a:	4604      	mov	r4, r0
 800959c:	ed8d 0a01 	vstr	s0, [sp, #4]
 80095a0:	f7ff fe4a 	bl	8009238 <__errno>
 80095a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80095a8:	6004      	str	r4, [r0, #0]
 80095aa:	b002      	add	sp, #8
 80095ac:	bd10      	pop	{r4, pc}

080095ae <xflowf>:
 80095ae:	b130      	cbz	r0, 80095be <xflowf+0x10>
 80095b0:	eef1 7a40 	vneg.f32	s15, s0
 80095b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80095b8:	2022      	movs	r0, #34	; 0x22
 80095ba:	f7ff bfed 	b.w	8009598 <with_errnof>
 80095be:	eef0 7a40 	vmov.f32	s15, s0
 80095c2:	e7f7      	b.n	80095b4 <xflowf+0x6>

080095c4 <__math_uflowf>:
 80095c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095cc <__math_uflowf+0x8>
 80095c8:	f7ff bff1 	b.w	80095ae <xflowf>
 80095cc:	10000000 	.word	0x10000000

080095d0 <__math_may_uflowf>:
 80095d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095d8 <__math_may_uflowf+0x8>
 80095d4:	f7ff bfeb 	b.w	80095ae <xflowf>
 80095d8:	1a200000 	.word	0x1a200000

080095dc <__math_oflowf>:
 80095dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095e4 <__math_oflowf+0x8>
 80095e0:	f7ff bfe5 	b.w	80095ae <xflowf>
 80095e4:	70000000 	.word	0x70000000

080095e8 <__math_divzerof>:
 80095e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095ec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80095f0:	2800      	cmp	r0, #0
 80095f2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80095f6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8009604 <__math_divzerof+0x1c>
 80095fa:	2022      	movs	r0, #34	; 0x22
 80095fc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009600:	f7ff bfca 	b.w	8009598 <with_errnof>
 8009604:	00000000 	.word	0x00000000

08009608 <__math_invalidf>:
 8009608:	eef0 7a40 	vmov.f32	s15, s0
 800960c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009610:	eef4 7a67 	vcmp.f32	s15, s15
 8009614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009618:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800961c:	d602      	bvs.n	8009624 <__math_invalidf+0x1c>
 800961e:	2021      	movs	r0, #33	; 0x21
 8009620:	f7ff bfba 	b.w	8009598 <with_errnof>
 8009624:	4770      	bx	lr
	...

08009628 <_init>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr

08009634 <_fini>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr
