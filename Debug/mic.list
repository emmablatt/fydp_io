
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a7b8  0800a7b8  0001a7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  24000000  0800aab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b8  24000474  0800af24  00020474  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400072c  0800af24  0002072c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f111  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033cc  00000000  00000000  0003f5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d90  00000000  00000000  00042980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cb0  00000000  00000000  00043710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000332ba  00000000  00000000  000443c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015678  00000000  00000000  0007767a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147a3b  00000000  00000000  0008ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001d472d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003898  00000000  00000000  001d4800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a7a0 	.word	0x0800a7a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	0800a7a0 	.word	0x0800a7a0

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060e:	2003      	movs	r0, #3
 8000610:	f000 f95c 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000614:	f003 fbe2 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8000618:	4602      	mov	r2, r0
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_Init+0x68>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	f003 030f 	and.w	r3, r3, #15
 8000624:	4913      	ldr	r1, [pc, #76]	; (8000674 <HAL_Init+0x6c>)
 8000626:	5ccb      	ldrb	r3, [r1, r3]
 8000628:	f003 031f 	and.w	r3, r3, #31
 800062c:	fa22 f303 	lsr.w	r3, r2, r3
 8000630:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_Init+0x68>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_Init+0x6c>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	f003 031f 	and.w	r3, r3, #31
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	fa22 f303 	lsr.w	r3, r2, r3
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <HAL_Init+0x70>)
 800064a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_Init+0x74>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f814 	bl	8000680 <HAL_InitTick>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e002      	b.n	8000668 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000662:	f007 fdb3 	bl	80081cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58024400 	.word	0x58024400
 8000674:	0800a820 	.word	0x0800a820
 8000678:	2400040c 	.word	0x2400040c
 800067c:	24000408 	.word	0x24000408

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_InitTick+0x60>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e021      	b.n	80006d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_InitTick+0x64>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_InitTick+0x60>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f941 	bl	8000932 <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c8:	f000 f90b 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x68>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	24000404 	.word	0x24000404
 80006e4:	24000408 	.word	0x24000408
 80006e8:	24000400 	.word	0x24000400

080006ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_IncTick+0x20>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_IncTick+0x24>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	24000404 	.word	0x24000404
 8000710:	24000498 	.word	0x24000498

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000498 	.word	0x24000498

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <__NVIC_SetPriorityGrouping+0x40>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000756:	4313      	orrs	r3, r2
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x40>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	05fa0000 	.word	0x05fa0000

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <__NVIC_EnableIRQ+0x38>)
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f1c3 0307 	rsb	r3, r3, #7
 800083a:	2b04      	cmp	r3, #4
 800083c:	bf28      	it	cs
 800083e:	2304      	movcs	r3, #4
 8000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	2b06      	cmp	r3, #6
 8000848:	d902      	bls.n	8000850 <NVIC_EncodePriority+0x30>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3b03      	subs	r3, #3
 800084e:	e000      	b.n	8000852 <NVIC_EncodePriority+0x32>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43da      	mvns	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43d9      	mvns	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	4313      	orrs	r3, r2
         );
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ac:	f7ff ff8e 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff29 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff40 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ff90 	bl	8000820 <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff5f 	bl	80007cc <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff33 	bl	8000790 <__NVIC_EnableIRQ>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffa4 	bl	8000888 <SysTick_Config>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e054      	b.n	8000a08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7f5b      	ldrb	r3, [r3, #29]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d105      	bne.n	8000974 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f007 fc46 	bl	8008200 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2202      	movs	r2, #2
 8000978:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10c      	bne.n	800099c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_CRC_Init+0xc4>)
 8000988:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 0218 	bic.w	r2, r2, #24
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	e00c      	b.n	80009b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6899      	ldr	r1, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	461a      	mov	r2, r3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 f834 	bl	8000a14 <HAL_CRCEx_Polynomial_Set>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e028      	b.n	8000a08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	795b      	ldrb	r3, [r3, #5]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d105      	bne.n	80009ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	e004      	b.n	80009d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	6912      	ldr	r2, [r2, #16]
 80009d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	430a      	orrs	r2, r1
 80009e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	699a      	ldr	r2, [r3, #24]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	04c11db7 	.word	0x04c11db7

08000a14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a24:	231f      	movs	r3, #31
 8000a26:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000a28:	bf00      	nop
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	613a      	str	r2, [r7, #16]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d009      	beq.n	8000a48 <HAL_CRCEx_Polynomial_Set+0x34>
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	f003 031f 	and.w	r3, r3, #31
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f0      	beq.n	8000a2a <HAL_CRCEx_Polynomial_Set+0x16>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b18      	cmp	r3, #24
 8000a4c:	d846      	bhi.n	8000adc <HAL_CRCEx_Polynomial_Set+0xc8>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000ae3 	.word	0x08000ae3
 8000a58:	08000add 	.word	0x08000add
 8000a5c:	08000add 	.word	0x08000add
 8000a60:	08000add 	.word	0x08000add
 8000a64:	08000add 	.word	0x08000add
 8000a68:	08000add 	.word	0x08000add
 8000a6c:	08000add 	.word	0x08000add
 8000a70:	08000add 	.word	0x08000add
 8000a74:	08000ad1 	.word	0x08000ad1
 8000a78:	08000add 	.word	0x08000add
 8000a7c:	08000add 	.word	0x08000add
 8000a80:	08000add 	.word	0x08000add
 8000a84:	08000add 	.word	0x08000add
 8000a88:	08000add 	.word	0x08000add
 8000a8c:	08000add 	.word	0x08000add
 8000a90:	08000add 	.word	0x08000add
 8000a94:	08000ac5 	.word	0x08000ac5
 8000a98:	08000add 	.word	0x08000add
 8000a9c:	08000add 	.word	0x08000add
 8000aa0:	08000add 	.word	0x08000add
 8000aa4:	08000add 	.word	0x08000add
 8000aa8:	08000add 	.word	0x08000add
 8000aac:	08000add 	.word	0x08000add
 8000ab0:	08000add 	.word	0x08000add
 8000ab4:	08000ab9 	.word	0x08000ab9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d913      	bls.n	8000ae6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ac2:	e010      	b.n	8000ae6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b07      	cmp	r3, #7
 8000ac8:	d90f      	bls.n	8000aea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ace:	e00c      	b.n	8000aea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d90b      	bls.n	8000aee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ada:	e008      	b.n	8000aee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
      break;
 8000ae0:	e006      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ae2:	bf00      	nop
 8000ae4:	e004      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ae6:	bf00      	nop
 8000ae8:	e002      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000aee:	bf00      	nop
  }
  if (status == HAL_OK)
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10d      	bne.n	8000b12 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 0118 	bic.w	r1, r3, #24
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	371c      	adds	r7, #28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fdf4 	bl	8000714 <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e314      	b.n	8001162 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a66      	ldr	r2, [pc, #408]	; (8000cd8 <HAL_DMA_Init+0x1b8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d04a      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a65      	ldr	r2, [pc, #404]	; (8000cdc <HAL_DMA_Init+0x1bc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d045      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a63      	ldr	r2, [pc, #396]	; (8000ce0 <HAL_DMA_Init+0x1c0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d040      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a62      	ldr	r2, [pc, #392]	; (8000ce4 <HAL_DMA_Init+0x1c4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d03b      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a60      	ldr	r2, [pc, #384]	; (8000ce8 <HAL_DMA_Init+0x1c8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d036      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a5f      	ldr	r2, [pc, #380]	; (8000cec <HAL_DMA_Init+0x1cc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d031      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a5d      	ldr	r2, [pc, #372]	; (8000cf0 <HAL_DMA_Init+0x1d0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d02c      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a5c      	ldr	r2, [pc, #368]	; (8000cf4 <HAL_DMA_Init+0x1d4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d027      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a5a      	ldr	r2, [pc, #360]	; (8000cf8 <HAL_DMA_Init+0x1d8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d022      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a59      	ldr	r2, [pc, #356]	; (8000cfc <HAL_DMA_Init+0x1dc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d01d      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a57      	ldr	r2, [pc, #348]	; (8000d00 <HAL_DMA_Init+0x1e0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d018      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a56      	ldr	r2, [pc, #344]	; (8000d04 <HAL_DMA_Init+0x1e4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d013      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a54      	ldr	r2, [pc, #336]	; (8000d08 <HAL_DMA_Init+0x1e8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d00e      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <HAL_DMA_Init+0x1ec>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d009      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a51      	ldr	r2, [pc, #324]	; (8000d10 <HAL_DMA_Init+0x1f0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d004      	beq.n	8000bd8 <HAL_DMA_Init+0xb8>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a50      	ldr	r2, [pc, #320]	; (8000d14 <HAL_DMA_Init+0x1f4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d101      	bne.n	8000bdc <HAL_DMA_Init+0xbc>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <HAL_DMA_Init+0xbe>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 813c 	beq.w	8000e5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2202      	movs	r2, #2
 8000be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a37      	ldr	r2, [pc, #220]	; (8000cd8 <HAL_DMA_Init+0x1b8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d04a      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <HAL_DMA_Init+0x1bc>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d045      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a34      	ldr	r2, [pc, #208]	; (8000ce0 <HAL_DMA_Init+0x1c0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d040      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a33      	ldr	r2, [pc, #204]	; (8000ce4 <HAL_DMA_Init+0x1c4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d03b      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_DMA_Init+0x1c8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d036      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a30      	ldr	r2, [pc, #192]	; (8000cec <HAL_DMA_Init+0x1cc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d031      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <HAL_DMA_Init+0x1d0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d02c      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <HAL_DMA_Init+0x1d4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d027      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a2b      	ldr	r2, [pc, #172]	; (8000cf8 <HAL_DMA_Init+0x1d8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d022      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <HAL_DMA_Init+0x1dc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d01d      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <HAL_DMA_Init+0x1e0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d018      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <HAL_DMA_Init+0x1e4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d013      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_DMA_Init+0x1e8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00e      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <HAL_DMA_Init+0x1ec>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d009      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <HAL_DMA_Init+0x1f0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d004      	beq.n	8000c94 <HAL_DMA_Init+0x174>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <HAL_DMA_Init+0x1f4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d108      	bne.n	8000ca6 <HAL_DMA_Init+0x186>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0201 	bic.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_DMA_Init+0x196>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000cb6:	e02f      	b.n	8000d18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cb8:	f7ff fd2c 	bl	8000714 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d928      	bls.n	8000d18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2220      	movs	r2, #32
 8000cca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e244      	b.n	8001162 <HAL_DMA_Init+0x642>
 8000cd8:	40020010 	.word	0x40020010
 8000cdc:	40020028 	.word	0x40020028
 8000ce0:	40020040 	.word	0x40020040
 8000ce4:	40020058 	.word	0x40020058
 8000ce8:	40020070 	.word	0x40020070
 8000cec:	40020088 	.word	0x40020088
 8000cf0:	400200a0 	.word	0x400200a0
 8000cf4:	400200b8 	.word	0x400200b8
 8000cf8:	40020410 	.word	0x40020410
 8000cfc:	40020428 	.word	0x40020428
 8000d00:	40020440 	.word	0x40020440
 8000d04:	40020458 	.word	0x40020458
 8000d08:	40020470 	.word	0x40020470
 8000d0c:	40020488 	.word	0x40020488
 8000d10:	400204a0 	.word	0x400204a0
 8000d14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1c8      	bne.n	8000cb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <HAL_DMA_Init+0x424>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d107      	bne.n	8000d7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4313      	orrs	r3, r2
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b28      	cmp	r3, #40	; 0x28
 8000d82:	d903      	bls.n	8000d8c <HAL_DMA_Init+0x26c>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b2e      	cmp	r3, #46	; 0x2e
 8000d8a:	d91f      	bls.n	8000dcc <HAL_DMA_Init+0x2ac>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b3e      	cmp	r3, #62	; 0x3e
 8000d92:	d903      	bls.n	8000d9c <HAL_DMA_Init+0x27c>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b42      	cmp	r3, #66	; 0x42
 8000d9a:	d917      	bls.n	8000dcc <HAL_DMA_Init+0x2ac>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b46      	cmp	r3, #70	; 0x46
 8000da2:	d903      	bls.n	8000dac <HAL_DMA_Init+0x28c>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b48      	cmp	r3, #72	; 0x48
 8000daa:	d90f      	bls.n	8000dcc <HAL_DMA_Init+0x2ac>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b4e      	cmp	r3, #78	; 0x4e
 8000db2:	d903      	bls.n	8000dbc <HAL_DMA_Init+0x29c>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b52      	cmp	r3, #82	; 0x52
 8000dba:	d907      	bls.n	8000dcc <HAL_DMA_Init+0x2ac>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b73      	cmp	r3, #115	; 0x73
 8000dc2:	d905      	bls.n	8000dd0 <HAL_DMA_Init+0x2b0>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b77      	cmp	r3, #119	; 0x77
 8000dca:	d801      	bhi.n	8000dd0 <HAL_DMA_Init+0x2b0>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <HAL_DMA_Init+0x2b2>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ddc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d117      	bne.n	8000e38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00e      	beq.n	8000e38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f001 fdd8 	bl	80029d0 <DMA_CheckFifoParam>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d008      	beq.n	8000e38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2240      	movs	r2, #64	; 0x40
 8000e2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e194      	b.n	8001162 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f001 fd13 	bl	800286c <DMA_CalcBaseAndBitshift>
 8000e46:	4603      	mov	r3, r0
 8000e48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	223f      	movs	r2, #63	; 0x3f
 8000e54:	409a      	lsls	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	e0ca      	b.n	8000ff2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <HAL_DMA_Init+0x428>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d022      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <HAL_DMA_Init+0x42c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d01d      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a36      	ldr	r2, [pc, #216]	; (8000f50 <HAL_DMA_Init+0x430>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d018      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a35      	ldr	r2, [pc, #212]	; (8000f54 <HAL_DMA_Init+0x434>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a33      	ldr	r2, [pc, #204]	; (8000f58 <HAL_DMA_Init+0x438>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00e      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_DMA_Init+0x43c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d009      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <HAL_DMA_Init+0x440>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d004      	beq.n	8000eac <HAL_DMA_Init+0x38c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_DMA_Init+0x444>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_DMA_Init+0x390>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_DMA_Init+0x392>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8094 	beq.w	8000fe0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <HAL_DMA_Init+0x428>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d021      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <HAL_DMA_Init+0x42c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d01c      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_DMA_Init+0x430>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d017      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <HAL_DMA_Init+0x434>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d012      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_DMA_Init+0x438>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <HAL_DMA_Init+0x43c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d008      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_DMA_Init+0x440>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d003      	beq.n	8000f06 <HAL_DMA_Init+0x3e6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_DMA_Init+0x444>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_DMA_Init+0x448>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b40      	cmp	r3, #64	; 0x40
 8000f2e:	d01d      	beq.n	8000f6c <HAL_DMA_Init+0x44c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b80      	cmp	r3, #128	; 0x80
 8000f36:	d102      	bne.n	8000f3e <HAL_DMA_Init+0x41e>
 8000f38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3c:	e017      	b.n	8000f6e <HAL_DMA_Init+0x44e>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e015      	b.n	8000f6e <HAL_DMA_Init+0x44e>
 8000f42:	bf00      	nop
 8000f44:	fe10803f 	.word	0xfe10803f
 8000f48:	58025408 	.word	0x58025408
 8000f4c:	5802541c 	.word	0x5802541c
 8000f50:	58025430 	.word	0x58025430
 8000f54:	58025444 	.word	0x58025444
 8000f58:	58025458 	.word	0x58025458
 8000f5c:	5802546c 	.word	0x5802546c
 8000f60:	58025480 	.word	0x58025480
 8000f64:	58025494 	.word	0x58025494
 8000f68:	fffe000f 	.word	0xfffe000f
 8000f6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68d2      	ldr	r2, [r2, #12]
 8000f72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000f94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000f9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b6e      	ldr	r3, [pc, #440]	; (800116c <HAL_DMA_Init+0x64c>)
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_DMA_Init+0x650>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	009a      	lsls	r2, r3, #2
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f001 fc51 	bl	800286c <DMA_CalcBaseAndBitshift>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	e008      	b.n	8000ff2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0b7      	b.n	8001162 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <HAL_DMA_Init+0x654>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d072      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a5d      	ldr	r2, [pc, #372]	; (8001178 <HAL_DMA_Init+0x658>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d06d      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a5c      	ldr	r2, [pc, #368]	; (800117c <HAL_DMA_Init+0x65c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d068      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a5a      	ldr	r2, [pc, #360]	; (8001180 <HAL_DMA_Init+0x660>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d063      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a59      	ldr	r2, [pc, #356]	; (8001184 <HAL_DMA_Init+0x664>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d05e      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_DMA_Init+0x668>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d059      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a56      	ldr	r2, [pc, #344]	; (800118c <HAL_DMA_Init+0x66c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d054      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a54      	ldr	r2, [pc, #336]	; (8001190 <HAL_DMA_Init+0x670>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d04f      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_DMA_Init+0x674>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d04a      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a51      	ldr	r2, [pc, #324]	; (8001198 <HAL_DMA_Init+0x678>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d045      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_DMA_Init+0x67c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d040      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_DMA_Init+0x680>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d03b      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_DMA_Init+0x684>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d036      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a4b      	ldr	r2, [pc, #300]	; (80011a8 <HAL_DMA_Init+0x688>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d031      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a4a      	ldr	r2, [pc, #296]	; (80011ac <HAL_DMA_Init+0x68c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d02c      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_DMA_Init+0x690>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d027      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_DMA_Init+0x694>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d022      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <HAL_DMA_Init+0x698>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01d      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a44      	ldr	r2, [pc, #272]	; (80011bc <HAL_DMA_Init+0x69c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d018      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a42      	ldr	r2, [pc, #264]	; (80011c0 <HAL_DMA_Init+0x6a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a41      	ldr	r2, [pc, #260]	; (80011c4 <HAL_DMA_Init+0x6a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d00e      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_DMA_Init+0x6a8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d009      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <HAL_DMA_Init+0x6ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d004      	beq.n	80010e2 <HAL_DMA_Init+0x5c2>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a3c      	ldr	r2, [pc, #240]	; (80011d0 <HAL_DMA_Init+0x6b0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_DMA_Init+0x5c6>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_DMA_Init+0x5c8>
 80010e6:	2300      	movs	r3, #0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d032      	beq.n	8001152 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 fceb 	bl	8002ac8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b80      	cmp	r3, #128	; 0x80
 80010f8:	d102      	bne.n	8001100 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001114:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d010      	beq.n	8001140 <HAL_DMA_Init+0x620>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b08      	cmp	r3, #8
 8001124:	d80c      	bhi.n	8001140 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fd68 	bl	8002bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	e008      	b.n	8001152 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	a7fdabf8 	.word	0xa7fdabf8
 8001170:	cccccccd 	.word	0xcccccccd
 8001174:	40020010 	.word	0x40020010
 8001178:	40020028 	.word	0x40020028
 800117c:	40020040 	.word	0x40020040
 8001180:	40020058 	.word	0x40020058
 8001184:	40020070 	.word	0x40020070
 8001188:	40020088 	.word	0x40020088
 800118c:	400200a0 	.word	0x400200a0
 8001190:	400200b8 	.word	0x400200b8
 8001194:	40020410 	.word	0x40020410
 8001198:	40020428 	.word	0x40020428
 800119c:	40020440 	.word	0x40020440
 80011a0:	40020458 	.word	0x40020458
 80011a4:	40020470 	.word	0x40020470
 80011a8:	40020488 	.word	0x40020488
 80011ac:	400204a0 	.word	0x400204a0
 80011b0:	400204b8 	.word	0x400204b8
 80011b4:	58025408 	.word	0x58025408
 80011b8:	5802541c 	.word	0x5802541c
 80011bc:	58025430 	.word	0x58025430
 80011c0:	58025444 	.word	0x58025444
 80011c4:	58025458 	.word	0x58025458
 80011c8:	5802546c 	.word	0x5802546c
 80011cc:	58025480 	.word	0x58025480
 80011d0:	58025494 	.word	0x58025494

080011d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e226      	b.n	800163e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_DMA_Start_IT+0x2a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e21f      	b.n	800163e <HAL_DMA_Start_IT+0x46a>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	f040 820a 	bne.w	8001628 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a68      	ldr	r2, [pc, #416]	; (80013c8 <HAL_DMA_Start_IT+0x1f4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d04a      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a66      	ldr	r2, [pc, #408]	; (80013cc <HAL_DMA_Start_IT+0x1f8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d045      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_DMA_Start_IT+0x1fc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d040      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a63      	ldr	r2, [pc, #396]	; (80013d4 <HAL_DMA_Start_IT+0x200>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d03b      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a62      	ldr	r2, [pc, #392]	; (80013d8 <HAL_DMA_Start_IT+0x204>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d036      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a60      	ldr	r2, [pc, #384]	; (80013dc <HAL_DMA_Start_IT+0x208>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d031      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a5f      	ldr	r2, [pc, #380]	; (80013e0 <HAL_DMA_Start_IT+0x20c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d02c      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <HAL_DMA_Start_IT+0x210>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d027      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5c      	ldr	r2, [pc, #368]	; (80013e8 <HAL_DMA_Start_IT+0x214>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d022      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <HAL_DMA_Start_IT+0x218>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01d      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a59      	ldr	r2, [pc, #356]	; (80013f0 <HAL_DMA_Start_IT+0x21c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d018      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_DMA_Start_IT+0x220>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a56      	ldr	r2, [pc, #344]	; (80013f8 <HAL_DMA_Start_IT+0x224>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00e      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a54      	ldr	r2, [pc, #336]	; (80013fc <HAL_DMA_Start_IT+0x228>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d009      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a53      	ldr	r2, [pc, #332]	; (8001400 <HAL_DMA_Start_IT+0x22c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d004      	beq.n	80012c2 <HAL_DMA_Start_IT+0xee>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_DMA_Start_IT+0x230>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d108      	bne.n	80012d4 <HAL_DMA_Start_IT+0x100>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0201 	bic.w	r2, r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e007      	b.n	80012e4 <HAL_DMA_Start_IT+0x110>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f001 f912 	bl	8002514 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <HAL_DMA_Start_IT+0x1f4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d04a      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a33      	ldr	r2, [pc, #204]	; (80013cc <HAL_DMA_Start_IT+0x1f8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d045      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_DMA_Start_IT+0x1fc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d040      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <HAL_DMA_Start_IT+0x200>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d03b      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <HAL_DMA_Start_IT+0x204>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d036      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_DMA_Start_IT+0x208>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d031      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <HAL_DMA_Start_IT+0x20c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02c      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <HAL_DMA_Start_IT+0x210>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d027      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <HAL_DMA_Start_IT+0x214>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d022      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_DMA_Start_IT+0x218>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d01d      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <HAL_DMA_Start_IT+0x21c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d018      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <HAL_DMA_Start_IT+0x220>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d013      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <HAL_DMA_Start_IT+0x224>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00e      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <HAL_DMA_Start_IT+0x228>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d009      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_DMA_Start_IT+0x22c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d004      	beq.n	8001390 <HAL_DMA_Start_IT+0x1bc>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <HAL_DMA_Start_IT+0x230>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Start_IT+0x1c0>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_DMA_Start_IT+0x1c2>
 8001394:	2300      	movs	r3, #0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d036      	beq.n	8001408 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 021e 	bic.w	r2, r3, #30
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0216 	orr.w	r2, r2, #22
 80013ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03e      	beq.n	8001434 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0208 	orr.w	r2, r2, #8
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e035      	b.n	8001434 <HAL_DMA_Start_IT+0x260>
 80013c8:	40020010 	.word	0x40020010
 80013cc:	40020028 	.word	0x40020028
 80013d0:	40020040 	.word	0x40020040
 80013d4:	40020058 	.word	0x40020058
 80013d8:	40020070 	.word	0x40020070
 80013dc:	40020088 	.word	0x40020088
 80013e0:	400200a0 	.word	0x400200a0
 80013e4:	400200b8 	.word	0x400200b8
 80013e8:	40020410 	.word	0x40020410
 80013ec:	40020428 	.word	0x40020428
 80013f0:	40020440 	.word	0x40020440
 80013f4:	40020458 	.word	0x40020458
 80013f8:	40020470 	.word	0x40020470
 80013fc:	40020488 	.word	0x40020488
 8001400:	400204a0 	.word	0x400204a0
 8001404:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 020e 	bic.w	r2, r3, #14
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 020a 	orr.w	r2, r2, #10
 800141a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0204 	orr.w	r2, r2, #4
 8001432:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a83      	ldr	r2, [pc, #524]	; (8001648 <HAL_DMA_Start_IT+0x474>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d072      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a82      	ldr	r2, [pc, #520]	; (800164c <HAL_DMA_Start_IT+0x478>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d06d      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a80      	ldr	r2, [pc, #512]	; (8001650 <HAL_DMA_Start_IT+0x47c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d068      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7f      	ldr	r2, [pc, #508]	; (8001654 <HAL_DMA_Start_IT+0x480>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d063      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a7d      	ldr	r2, [pc, #500]	; (8001658 <HAL_DMA_Start_IT+0x484>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d05e      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7c      	ldr	r2, [pc, #496]	; (800165c <HAL_DMA_Start_IT+0x488>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d059      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a7a      	ldr	r2, [pc, #488]	; (8001660 <HAL_DMA_Start_IT+0x48c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d054      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a79      	ldr	r2, [pc, #484]	; (8001664 <HAL_DMA_Start_IT+0x490>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d04f      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a77      	ldr	r2, [pc, #476]	; (8001668 <HAL_DMA_Start_IT+0x494>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d04a      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a76      	ldr	r2, [pc, #472]	; (800166c <HAL_DMA_Start_IT+0x498>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d045      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a74      	ldr	r2, [pc, #464]	; (8001670 <HAL_DMA_Start_IT+0x49c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d040      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_DMA_Start_IT+0x4a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d03b      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a71      	ldr	r2, [pc, #452]	; (8001678 <HAL_DMA_Start_IT+0x4a4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d036      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a70      	ldr	r2, [pc, #448]	; (800167c <HAL_DMA_Start_IT+0x4a8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d031      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_DMA_Start_IT+0x4ac>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02c      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6d      	ldr	r2, [pc, #436]	; (8001684 <HAL_DMA_Start_IT+0x4b0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d027      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6b      	ldr	r2, [pc, #428]	; (8001688 <HAL_DMA_Start_IT+0x4b4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d022      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6a      	ldr	r2, [pc, #424]	; (800168c <HAL_DMA_Start_IT+0x4b8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d01d      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a68      	ldr	r2, [pc, #416]	; (8001690 <HAL_DMA_Start_IT+0x4bc>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d018      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a67      	ldr	r2, [pc, #412]	; (8001694 <HAL_DMA_Start_IT+0x4c0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_DMA_Start_IT+0x4c4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00e      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a64      	ldr	r2, [pc, #400]	; (800169c <HAL_DMA_Start_IT+0x4c8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d009      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <HAL_DMA_Start_IT+0x4cc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d004      	beq.n	8001524 <HAL_DMA_Start_IT+0x350>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <HAL_DMA_Start_IT+0x4d0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_DMA_Start_IT+0x354>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_DMA_Start_IT+0x356>
 8001528:	2300      	movs	r3, #0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01a      	beq.n	8001564 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800155e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001562:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a37      	ldr	r2, [pc, #220]	; (8001648 <HAL_DMA_Start_IT+0x474>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d04a      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a36      	ldr	r2, [pc, #216]	; (800164c <HAL_DMA_Start_IT+0x478>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d045      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a34      	ldr	r2, [pc, #208]	; (8001650 <HAL_DMA_Start_IT+0x47c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d040      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a33      	ldr	r2, [pc, #204]	; (8001654 <HAL_DMA_Start_IT+0x480>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d03b      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <HAL_DMA_Start_IT+0x484>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d036      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <HAL_DMA_Start_IT+0x488>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d031      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2e      	ldr	r2, [pc, #184]	; (8001660 <HAL_DMA_Start_IT+0x48c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02c      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <HAL_DMA_Start_IT+0x490>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d027      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2b      	ldr	r2, [pc, #172]	; (8001668 <HAL_DMA_Start_IT+0x494>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d022      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <HAL_DMA_Start_IT+0x498>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d01d      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HAL_DMA_Start_IT+0x49c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d018      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <HAL_DMA_Start_IT+0x4a0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a25      	ldr	r2, [pc, #148]	; (8001678 <HAL_DMA_Start_IT+0x4a4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00e      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a24      	ldr	r2, [pc, #144]	; (800167c <HAL_DMA_Start_IT+0x4a8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_DMA_Start_IT+0x4ac>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Start_IT+0x430>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a21      	ldr	r2, [pc, #132]	; (8001684 <HAL_DMA_Start_IT+0x4b0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d108      	bne.n	8001616 <HAL_DMA_Start_IT+0x442>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e012      	b.n	800163c <HAL_DMA_Start_IT+0x468>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e009      	b.n	800163c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020010 	.word	0x40020010
 800164c:	40020028 	.word	0x40020028
 8001650:	40020040 	.word	0x40020040
 8001654:	40020058 	.word	0x40020058
 8001658:	40020070 	.word	0x40020070
 800165c:	40020088 	.word	0x40020088
 8001660:	400200a0 	.word	0x400200a0
 8001664:	400200b8 	.word	0x400200b8
 8001668:	40020410 	.word	0x40020410
 800166c:	40020428 	.word	0x40020428
 8001670:	40020440 	.word	0x40020440
 8001674:	40020458 	.word	0x40020458
 8001678:	40020470 	.word	0x40020470
 800167c:	40020488 	.word	0x40020488
 8001680:	400204a0 	.word	0x400204a0
 8001684:	400204b8 	.word	0x400204b8
 8001688:	58025408 	.word	0x58025408
 800168c:	5802541c 	.word	0x5802541c
 8001690:	58025430 	.word	0x58025430
 8001694:	58025444 	.word	0x58025444
 8001698:	58025458 	.word	0x58025458
 800169c:	5802546c 	.word	0x5802546c
 80016a0:	58025480 	.word	0x58025480
 80016a4:	58025494 	.word	0x58025494

080016a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016b4:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_DMA_IRQHandler+0x1ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a67      	ldr	r2, [pc, #412]	; (8001858 <HAL_DMA_IRQHandler+0x1b0>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0a9b      	lsrs	r3, r3, #10
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_DMA_IRQHandler+0x1b4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04a      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_DMA_IRQHandler+0x1b8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d045      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_DMA_IRQHandler+0x1bc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d040      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5a      	ldr	r2, [pc, #360]	; (8001868 <HAL_DMA_IRQHandler+0x1c0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d03b      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a59      	ldr	r2, [pc, #356]	; (800186c <HAL_DMA_IRQHandler+0x1c4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d036      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_DMA_IRQHandler+0x1c8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d031      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_DMA_IRQHandler+0x1cc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d02c      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a54      	ldr	r2, [pc, #336]	; (8001878 <HAL_DMA_IRQHandler+0x1d0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d027      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a53      	ldr	r2, [pc, #332]	; (800187c <HAL_DMA_IRQHandler+0x1d4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_DMA_IRQHandler+0x1d8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01d      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_DMA_IRQHandler+0x1dc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d018      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4e      	ldr	r2, [pc, #312]	; (8001888 <HAL_DMA_IRQHandler+0x1e0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a4d      	ldr	r2, [pc, #308]	; (800188c <HAL_DMA_IRQHandler+0x1e4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00e      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_DMA_IRQHandler+0x1e8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d009      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_DMA_IRQHandler+0x1ec>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_DMA_IRQHandler+0xd2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a48      	ldr	r2, [pc, #288]	; (8001898 <HAL_DMA_IRQHandler+0x1f0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_DMA_IRQHandler+0xd6>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_DMA_IRQHandler+0xd8>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 842b 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a2 	beq.w	80018e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2e      	ldr	r2, [pc, #184]	; (800185c <HAL_DMA_IRQHandler+0x1b4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d04a      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2d      	ldr	r2, [pc, #180]	; (8001860 <HAL_DMA_IRQHandler+0x1b8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d045      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <HAL_DMA_IRQHandler+0x1bc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d040      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <HAL_DMA_IRQHandler+0x1c0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d03b      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_DMA_IRQHandler+0x1c4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d036      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a27      	ldr	r2, [pc, #156]	; (8001870 <HAL_DMA_IRQHandler+0x1c8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d031      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_DMA_IRQHandler+0x1cc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d02c      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_DMA_IRQHandler+0x1d0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d027      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_DMA_IRQHandler+0x1d4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d022      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_DMA_IRQHandler+0x1d8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d01d      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_DMA_IRQHandler+0x1dc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d018      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_DMA_IRQHandler+0x1e0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d013      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_DMA_IRQHandler+0x1e4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00e      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_DMA_IRQHandler+0x1e8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d009      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_DMA_IRQHandler+0x1ec>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d004      	beq.n	800183c <HAL_DMA_IRQHandler+0x194>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_DMA_IRQHandler+0x1f0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d12f      	bne.n	800189c <HAL_DMA_IRQHandler+0x1f4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	e02e      	b.n	80018b0 <HAL_DMA_IRQHandler+0x208>
 8001852:	bf00      	nop
 8001854:	24000408 	.word	0x24000408
 8001858:	1b4e81b5 	.word	0x1b4e81b5
 800185c:	40020010 	.word	0x40020010
 8001860:	40020028 	.word	0x40020028
 8001864:	40020040 	.word	0x40020040
 8001868:	40020058 	.word	0x40020058
 800186c:	40020070 	.word	0x40020070
 8001870:	40020088 	.word	0x40020088
 8001874:	400200a0 	.word	0x400200a0
 8001878:	400200b8 	.word	0x400200b8
 800187c:	40020410 	.word	0x40020410
 8001880:	40020428 	.word	0x40020428
 8001884:	40020440 	.word	0x40020440
 8001888:	40020458 	.word	0x40020458
 800188c:	40020470 	.word	0x40020470
 8001890:	40020488 	.word	0x40020488
 8001894:	400204a0 	.word	0x400204a0
 8001898:	400204b8 	.word	0x400204b8
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d015      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0204 	bic.w	r2, r2, #4
 80018c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2208      	movs	r2, #8
 80018ce:	409a      	lsls	r2, r3
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d06e      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a69      	ldr	r2, [pc, #420]	; (8001aa0 <HAL_DMA_IRQHandler+0x3f8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04a      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a67      	ldr	r2, [pc, #412]	; (8001aa4 <HAL_DMA_IRQHandler+0x3fc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d045      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_DMA_IRQHandler+0x400>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d040      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a64      	ldr	r2, [pc, #400]	; (8001aac <HAL_DMA_IRQHandler+0x404>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d03b      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_DMA_IRQHandler+0x408>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d036      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a61      	ldr	r2, [pc, #388]	; (8001ab4 <HAL_DMA_IRQHandler+0x40c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d031      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a60      	ldr	r2, [pc, #384]	; (8001ab8 <HAL_DMA_IRQHandler+0x410>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d02c      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <HAL_DMA_IRQHandler+0x414>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d027      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_DMA_IRQHandler+0x418>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a5b      	ldr	r2, [pc, #364]	; (8001ac4 <HAL_DMA_IRQHandler+0x41c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01d      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a5a      	ldr	r2, [pc, #360]	; (8001ac8 <HAL_DMA_IRQHandler+0x420>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d018      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_DMA_IRQHandler+0x424>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a57      	ldr	r2, [pc, #348]	; (8001ad0 <HAL_DMA_IRQHandler+0x428>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a55      	ldr	r2, [pc, #340]	; (8001ad4 <HAL_DMA_IRQHandler+0x42c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d009      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a54      	ldr	r2, [pc, #336]	; (8001ad8 <HAL_DMA_IRQHandler+0x430>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2ee>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_DMA_IRQHandler+0x434>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10a      	bne.n	80019ac <HAL_DMA_IRQHandler+0x304>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e003      	b.n	80019b4 <HAL_DMA_IRQHandler+0x30c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2300      	movs	r3, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2201      	movs	r2, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f043 0202 	orr.w	r2, r3, #2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2204      	movs	r2, #4
 80019de:	409a      	lsls	r2, r3
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 808f 	beq.w	8001b08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a2c      	ldr	r2, [pc, #176]	; (8001aa0 <HAL_DMA_IRQHandler+0x3f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04a      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_DMA_IRQHandler+0x3fc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d045      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <HAL_DMA_IRQHandler+0x400>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d040      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_DMA_IRQHandler+0x404>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d03b      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_DMA_IRQHandler+0x408>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d036      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <HAL_DMA_IRQHandler+0x40c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_DMA_IRQHandler+0x410>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d02c      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a21      	ldr	r2, [pc, #132]	; (8001abc <HAL_DMA_IRQHandler+0x414>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d027      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <HAL_DMA_IRQHandler+0x418>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d022      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_DMA_IRQHandler+0x41c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01d      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_DMA_IRQHandler+0x420>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d018      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_DMA_IRQHandler+0x424>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <HAL_DMA_IRQHandler+0x428>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_DMA_IRQHandler+0x42c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_DMA_IRQHandler+0x430>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x3e2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_DMA_IRQHandler+0x434>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12a      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x438>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e023      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x440>
 8001aa0:	40020010 	.word	0x40020010
 8001aa4:	40020028 	.word	0x40020028
 8001aa8:	40020040 	.word	0x40020040
 8001aac:	40020058 	.word	0x40020058
 8001ab0:	40020070 	.word	0x40020070
 8001ab4:	40020088 	.word	0x40020088
 8001ab8:	400200a0 	.word	0x400200a0
 8001abc:	400200b8 	.word	0x400200b8
 8001ac0:	40020410 	.word	0x40020410
 8001ac4:	40020428 	.word	0x40020428
 8001ac8:	40020440 	.word	0x40020440
 8001acc:	40020458 	.word	0x40020458
 8001ad0:	40020470 	.word	0x40020470
 8001ad4:	40020488 	.word	0x40020488
 8001ad8:	400204a0 	.word	0x400204a0
 8001adc:	400204b8 	.word	0x400204b8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00d      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2204      	movs	r2, #4
 8001af6:	409a      	lsls	r2, r3
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f043 0204 	orr.w	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2210      	movs	r2, #16
 8001b12:	409a      	lsls	r2, r3
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a6 	beq.w	8001c6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a85      	ldr	r2, [pc, #532]	; (8001d38 <HAL_DMA_IRQHandler+0x690>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d04a      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a83      	ldr	r2, [pc, #524]	; (8001d3c <HAL_DMA_IRQHandler+0x694>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d045      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a82      	ldr	r2, [pc, #520]	; (8001d40 <HAL_DMA_IRQHandler+0x698>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d040      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a80      	ldr	r2, [pc, #512]	; (8001d44 <HAL_DMA_IRQHandler+0x69c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d03b      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_DMA_IRQHandler+0x6a0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d036      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a7d      	ldr	r2, [pc, #500]	; (8001d4c <HAL_DMA_IRQHandler+0x6a4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d031      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <HAL_DMA_IRQHandler+0x6a8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d02c      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_DMA_IRQHandler+0x6ac>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d027      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a79      	ldr	r2, [pc, #484]	; (8001d58 <HAL_DMA_IRQHandler+0x6b0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d022      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a77      	ldr	r2, [pc, #476]	; (8001d5c <HAL_DMA_IRQHandler+0x6b4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a76      	ldr	r2, [pc, #472]	; (8001d60 <HAL_DMA_IRQHandler+0x6b8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d018      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a74      	ldr	r2, [pc, #464]	; (8001d64 <HAL_DMA_IRQHandler+0x6bc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a73      	ldr	r2, [pc, #460]	; (8001d68 <HAL_DMA_IRQHandler+0x6c0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_DMA_IRQHandler+0x6c4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d009      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a70      	ldr	r2, [pc, #448]	; (8001d70 <HAL_DMA_IRQHandler+0x6c8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x516>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_DMA_IRQHandler+0x6cc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10a      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x52c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e009      	b.n	8001be8 <HAL_DMA_IRQHandler+0x540>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03e      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d018      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d108      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d024      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e01f      	b.n	8001c6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01b      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
 8001c3a:	e016      	b.n	8001c6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0208 	bic.w	r2, r2, #8
 8001c58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2220      	movs	r2, #32
 8001c74:	409a      	lsls	r2, r3
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8110 	beq.w	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <HAL_DMA_IRQHandler+0x690>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d04a      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <HAL_DMA_IRQHandler+0x694>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d045      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_DMA_IRQHandler+0x698>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d040      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a28      	ldr	r2, [pc, #160]	; (8001d44 <HAL_DMA_IRQHandler+0x69c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d03b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_DMA_IRQHandler+0x6a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d036      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <HAL_DMA_IRQHandler+0x6a4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d031      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_DMA_IRQHandler+0x6a8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02c      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <HAL_DMA_IRQHandler+0x6ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d027      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <HAL_DMA_IRQHandler+0x6b0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_DMA_IRQHandler+0x6b4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_DMA_IRQHandler+0x6b8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_DMA_IRQHandler+0x6bc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_DMA_IRQHandler+0x6c0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_DMA_IRQHandler+0x6c4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_DMA_IRQHandler+0x6c8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x678>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <HAL_DMA_IRQHandler+0x6cc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d12b      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x6d0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	e02a      	b.n	8001d8c <HAL_DMA_IRQHandler+0x6e4>
 8001d36:	bf00      	nop
 8001d38:	40020010 	.word	0x40020010
 8001d3c:	40020028 	.word	0x40020028
 8001d40:	40020040 	.word	0x40020040
 8001d44:	40020058 	.word	0x40020058
 8001d48:	40020070 	.word	0x40020070
 8001d4c:	40020088 	.word	0x40020088
 8001d50:	400200a0 	.word	0x400200a0
 8001d54:	400200b8 	.word	0x400200b8
 8001d58:	40020410 	.word	0x40020410
 8001d5c:	40020428 	.word	0x40020428
 8001d60:	40020440 	.word	0x40020440
 8001d64:	40020458 	.word	0x40020458
 8001d68:	40020470 	.word	0x40020470
 8001d6c:	40020488 	.word	0x40020488
 8001d70:	400204a0 	.word	0x400204a0
 8001d74:	400204b8 	.word	0x400204b8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8087 	beq.w	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d139      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0216 	bic.w	r2, r2, #22
 8001dbc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dcc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <HAL_DMA_IRQHandler+0x736>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0208 	bic.w	r2, r2, #8
 8001dec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	223f      	movs	r2, #63	; 0x3f
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 834a 	beq.w	80024ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
          }
          return;
 8001e20:	e344      	b.n	80024ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d018      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d02c      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
 8001e4e:	e027      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d023      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
 8001e60:	e01e      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10f      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0210 	bic.w	r2, r2, #16
 8001e7e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8306 	beq.w	80024b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8088 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_DMA_IRQHandler+0xa08>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d04a      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a79      	ldr	r2, [pc, #484]	; (80020b4 <HAL_DMA_IRQHandler+0xa0c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d045      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a77      	ldr	r2, [pc, #476]	; (80020b8 <HAL_DMA_IRQHandler+0xa10>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d040      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a76      	ldr	r2, [pc, #472]	; (80020bc <HAL_DMA_IRQHandler+0xa14>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d03b      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a74      	ldr	r2, [pc, #464]	; (80020c0 <HAL_DMA_IRQHandler+0xa18>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d036      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a73      	ldr	r2, [pc, #460]	; (80020c4 <HAL_DMA_IRQHandler+0xa1c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d031      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a71      	ldr	r2, [pc, #452]	; (80020c8 <HAL_DMA_IRQHandler+0xa20>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a70      	ldr	r2, [pc, #448]	; (80020cc <HAL_DMA_IRQHandler+0xa24>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d027      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_DMA_IRQHandler+0xa28>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d022      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6d      	ldr	r2, [pc, #436]	; (80020d4 <HAL_DMA_IRQHandler+0xa2c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d01d      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_DMA_IRQHandler+0xa30>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d018      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_DMA_IRQHandler+0xa34>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_DMA_IRQHandler+0xa38>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00e      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_DMA_IRQHandler+0xa3c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_DMA_IRQHandler+0xa40>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x8b8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a64      	ldr	r2, [pc, #400]	; (80020ec <HAL_DMA_IRQHandler+0xa44>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x8ca>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e007      	b.n	8001f82 <HAL_DMA_IRQHandler+0x8da>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d307      	bcc.n	8001f9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f2      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x8da>
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001f9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001fb6:	e003      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8272 	beq.w	80024b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
 8001fda:	e26c      	b.n	80024b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_DMA_IRQHandler+0xa48>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a42      	ldr	r2, [pc, #264]	; (80020f4 <HAL_DMA_IRQHandler+0xa4c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d01d      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a40      	ldr	r2, [pc, #256]	; (80020f8 <HAL_DMA_IRQHandler+0xa50>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d018      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3f      	ldr	r2, [pc, #252]	; (80020fc <HAL_DMA_IRQHandler+0xa54>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3d      	ldr	r2, [pc, #244]	; (8002100 <HAL_DMA_IRQHandler+0xa58>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00e      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3c      	ldr	r2, [pc, #240]	; (8002104 <HAL_DMA_IRQHandler+0xa5c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <HAL_DMA_IRQHandler+0xa60>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_DMA_IRQHandler+0x984>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a39      	ldr	r2, [pc, #228]	; (800210c <HAL_DMA_IRQHandler+0xa64>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_DMA_IRQHandler+0x988>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_DMA_IRQHandler+0x98a>
 8002030:	2300      	movs	r3, #0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 823f 	beq.w	80024b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2204      	movs	r2, #4
 800204a:	409a      	lsls	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80cd 	beq.w	80021f0 <HAL_DMA_IRQHandler+0xb48>
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80c7 	beq.w	80021f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2204      	movs	r2, #4
 800206c:	409a      	lsls	r2, r3
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d049      	beq.n	8002110 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8210 	beq.w	80024b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002098:	e20a      	b.n	80024b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8206 	beq.w	80024b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020ac:	e200      	b.n	80024b0 <HAL_DMA_IRQHandler+0xe08>
 80020ae:	bf00      	nop
 80020b0:	40020010 	.word	0x40020010
 80020b4:	40020028 	.word	0x40020028
 80020b8:	40020040 	.word	0x40020040
 80020bc:	40020058 	.word	0x40020058
 80020c0:	40020070 	.word	0x40020070
 80020c4:	40020088 	.word	0x40020088
 80020c8:	400200a0 	.word	0x400200a0
 80020cc:	400200b8 	.word	0x400200b8
 80020d0:	40020410 	.word	0x40020410
 80020d4:	40020428 	.word	0x40020428
 80020d8:	40020440 	.word	0x40020440
 80020dc:	40020458 	.word	0x40020458
 80020e0:	40020470 	.word	0x40020470
 80020e4:	40020488 	.word	0x40020488
 80020e8:	400204a0 	.word	0x400204a0
 80020ec:	400204b8 	.word	0x400204b8
 80020f0:	58025408 	.word	0x58025408
 80020f4:	5802541c 	.word	0x5802541c
 80020f8:	58025430 	.word	0x58025430
 80020fc:	58025444 	.word	0x58025444
 8002100:	58025458 	.word	0x58025458
 8002104:	5802546c 	.word	0x5802546c
 8002108:	58025480 	.word	0x58025480
 800210c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d160      	bne.n	80021dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8c      	ldr	r2, [pc, #560]	; (8002350 <HAL_DMA_IRQHandler+0xca8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d04a      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a8a      	ldr	r2, [pc, #552]	; (8002354 <HAL_DMA_IRQHandler+0xcac>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d045      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a89      	ldr	r2, [pc, #548]	; (8002358 <HAL_DMA_IRQHandler+0xcb0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d040      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a87      	ldr	r2, [pc, #540]	; (800235c <HAL_DMA_IRQHandler+0xcb4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d03b      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a86      	ldr	r2, [pc, #536]	; (8002360 <HAL_DMA_IRQHandler+0xcb8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d036      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a84      	ldr	r2, [pc, #528]	; (8002364 <HAL_DMA_IRQHandler+0xcbc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a83      	ldr	r2, [pc, #524]	; (8002368 <HAL_DMA_IRQHandler+0xcc0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d02c      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a81      	ldr	r2, [pc, #516]	; (800236c <HAL_DMA_IRQHandler+0xcc4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d027      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a80      	ldr	r2, [pc, #512]	; (8002370 <HAL_DMA_IRQHandler+0xcc8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a7e      	ldr	r2, [pc, #504]	; (8002374 <HAL_DMA_IRQHandler+0xccc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7d      	ldr	r2, [pc, #500]	; (8002378 <HAL_DMA_IRQHandler+0xcd0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d018      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a7b      	ldr	r2, [pc, #492]	; (800237c <HAL_DMA_IRQHandler+0xcd4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_DMA_IRQHandler+0xcd8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a78      	ldr	r2, [pc, #480]	; (8002384 <HAL_DMA_IRQHandler+0xcdc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_DMA_IRQHandler+0xce0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_DMA_IRQHandler+0xb12>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a75      	ldr	r2, [pc, #468]	; (800238c <HAL_DMA_IRQHandler+0xce4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0xb24>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e007      	b.n	80021dc <HAL_DMA_IRQHandler+0xb34>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8165 	beq.w	80024b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021ee:	e15f      	b.n	80024b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2202      	movs	r2, #2
 80021fa:	409a      	lsls	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80c5 	beq.w	8002390 <HAL_DMA_IRQHandler+0xce8>
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80bf 	beq.w	8002390 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2202      	movs	r2, #2
 800221c:	409a      	lsls	r2, r3
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 813a 	beq.w	80024b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002248:	e134      	b.n	80024b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8130 	beq.w	80024b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800225c:	e12a      	b.n	80024b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d168      	bne.n	800233a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a38      	ldr	r2, [pc, #224]	; (8002350 <HAL_DMA_IRQHandler+0xca8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d04a      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a37      	ldr	r2, [pc, #220]	; (8002354 <HAL_DMA_IRQHandler+0xcac>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d045      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_DMA_IRQHandler+0xcb0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d040      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <HAL_DMA_IRQHandler+0xcb4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d03b      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_DMA_IRQHandler+0xcb8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d036      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a31      	ldr	r2, [pc, #196]	; (8002364 <HAL_DMA_IRQHandler+0xcbc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d031      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <HAL_DMA_IRQHandler+0xcc0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02c      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2e      	ldr	r2, [pc, #184]	; (800236c <HAL_DMA_IRQHandler+0xcc4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d027      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <HAL_DMA_IRQHandler+0xcc8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d022      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <HAL_DMA_IRQHandler+0xccc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01d      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_DMA_IRQHandler+0xcd0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d018      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a28      	ldr	r2, [pc, #160]	; (800237c <HAL_DMA_IRQHandler+0xcd4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <HAL_DMA_IRQHandler+0xcd8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <HAL_DMA_IRQHandler+0xcdc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a23      	ldr	r2, [pc, #140]	; (8002388 <HAL_DMA_IRQHandler+0xce0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_DMA_IRQHandler+0xc60>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a22      	ldr	r2, [pc, #136]	; (800238c <HAL_DMA_IRQHandler+0xce4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d108      	bne.n	800231a <HAL_DMA_IRQHandler+0xc72>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0214 	bic.w	r2, r2, #20
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e007      	b.n	800232a <HAL_DMA_IRQHandler+0xc82>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020a 	bic.w	r2, r2, #10
 8002328:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80b8 	beq.w	80024b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800234c:	e0b2      	b.n	80024b4 <HAL_DMA_IRQHandler+0xe0c>
 800234e:	bf00      	nop
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2208      	movs	r2, #8
 800239a:	409a      	lsls	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8088 	beq.w	80024b6 <HAL_DMA_IRQHandler+0xe0e>
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8082 	beq.w	80024b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a41      	ldr	r2, [pc, #260]	; (80024bc <HAL_DMA_IRQHandler+0xe14>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d04a      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3f      	ldr	r2, [pc, #252]	; (80024c0 <HAL_DMA_IRQHandler+0xe18>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d045      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3e      	ldr	r2, [pc, #248]	; (80024c4 <HAL_DMA_IRQHandler+0xe1c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d040      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <HAL_DMA_IRQHandler+0xe20>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d03b      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_DMA_IRQHandler+0xe24>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d036      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a39      	ldr	r2, [pc, #228]	; (80024d0 <HAL_DMA_IRQHandler+0xe28>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_DMA_IRQHandler+0xe2c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d02c      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <HAL_DMA_IRQHandler+0xe30>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d027      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_DMA_IRQHandler+0xe34>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a33      	ldr	r2, [pc, #204]	; (80024e0 <HAL_DMA_IRQHandler+0xe38>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01d      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_DMA_IRQHandler+0xe3c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d018      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <HAL_DMA_IRQHandler+0xe40>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_DMA_IRQHandler+0xe44>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <HAL_DMA_IRQHandler+0xe48>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <HAL_DMA_IRQHandler+0xe4c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_IRQHandler+0xdaa>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <HAL_DMA_IRQHandler+0xe50>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d108      	bne.n	8002464 <HAL_DMA_IRQHandler+0xdbc>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 021c 	bic.w	r2, r2, #28
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e007      	b.n	8002474 <HAL_DMA_IRQHandler+0xdcc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020e 	bic.w	r2, r2, #14
 8002472:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	2201      	movs	r2, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
 80024aa:	e004      	b.n	80024b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80024ac:	bf00      	nop
 80024ae:	e002      	b.n	80024b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024b0:	bf00      	nop
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8

080024fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a84      	ldr	r2, [pc, #528]	; (8002744 <DMA_SetConfig+0x230>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d072      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a82      	ldr	r2, [pc, #520]	; (8002748 <DMA_SetConfig+0x234>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d06d      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a81      	ldr	r2, [pc, #516]	; (800274c <DMA_SetConfig+0x238>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d068      	beq.n	800261e <DMA_SetConfig+0x10a>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a7f      	ldr	r2, [pc, #508]	; (8002750 <DMA_SetConfig+0x23c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d063      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <DMA_SetConfig+0x240>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d05e      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7c      	ldr	r2, [pc, #496]	; (8002758 <DMA_SetConfig+0x244>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d059      	beq.n	800261e <DMA_SetConfig+0x10a>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7b      	ldr	r2, [pc, #492]	; (800275c <DMA_SetConfig+0x248>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d054      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a79      	ldr	r2, [pc, #484]	; (8002760 <DMA_SetConfig+0x24c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d04f      	beq.n	800261e <DMA_SetConfig+0x10a>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a78      	ldr	r2, [pc, #480]	; (8002764 <DMA_SetConfig+0x250>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d04a      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a76      	ldr	r2, [pc, #472]	; (8002768 <DMA_SetConfig+0x254>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d045      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <DMA_SetConfig+0x258>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d040      	beq.n	800261e <DMA_SetConfig+0x10a>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a73      	ldr	r2, [pc, #460]	; (8002770 <DMA_SetConfig+0x25c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d03b      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a72      	ldr	r2, [pc, #456]	; (8002774 <DMA_SetConfig+0x260>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d036      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a70      	ldr	r2, [pc, #448]	; (8002778 <DMA_SetConfig+0x264>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6f      	ldr	r2, [pc, #444]	; (800277c <DMA_SetConfig+0x268>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d02c      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6d      	ldr	r2, [pc, #436]	; (8002780 <DMA_SetConfig+0x26c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d027      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6c      	ldr	r2, [pc, #432]	; (8002784 <DMA_SetConfig+0x270>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <DMA_SetConfig+0x274>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01d      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a69      	ldr	r2, [pc, #420]	; (800278c <DMA_SetConfig+0x278>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d018      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a67      	ldr	r2, [pc, #412]	; (8002790 <DMA_SetConfig+0x27c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <DMA_SetConfig+0x10a>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a66      	ldr	r2, [pc, #408]	; (8002794 <DMA_SetConfig+0x280>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00e      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a64      	ldr	r2, [pc, #400]	; (8002798 <DMA_SetConfig+0x284>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d009      	beq.n	800261e <DMA_SetConfig+0x10a>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a63      	ldr	r2, [pc, #396]	; (800279c <DMA_SetConfig+0x288>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <DMA_SetConfig+0x10a>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a61      	ldr	r2, [pc, #388]	; (80027a0 <DMA_SetConfig+0x28c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d101      	bne.n	8002622 <DMA_SetConfig+0x10e>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <DMA_SetConfig+0x110>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002630:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002642:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <DMA_SetConfig+0x230>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <DMA_SetConfig+0x234>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3b      	ldr	r2, [pc, #236]	; (800274c <DMA_SetConfig+0x238>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <DMA_SetConfig+0x23c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a38      	ldr	r2, [pc, #224]	; (8002754 <DMA_SetConfig+0x240>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a37      	ldr	r2, [pc, #220]	; (8002758 <DMA_SetConfig+0x244>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a35      	ldr	r2, [pc, #212]	; (800275c <DMA_SetConfig+0x248>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a34      	ldr	r2, [pc, #208]	; (8002760 <DMA_SetConfig+0x24c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a32      	ldr	r2, [pc, #200]	; (8002764 <DMA_SetConfig+0x250>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a31      	ldr	r2, [pc, #196]	; (8002768 <DMA_SetConfig+0x254>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2f      	ldr	r2, [pc, #188]	; (800276c <DMA_SetConfig+0x258>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <DMA_SetConfig+0x25c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <DMA_SetConfig+0x260>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <DMA_SetConfig+0x264>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a29      	ldr	r2, [pc, #164]	; (800277c <DMA_SetConfig+0x268>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <DMA_SetConfig+0x1d0>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <DMA_SetConfig+0x26c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <DMA_SetConfig+0x1d4>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <DMA_SetConfig+0x1d6>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d05a      	beq.n	80027a4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	223f      	movs	r2, #63	; 0x3f
 80026f8:	409a      	lsls	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800270c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d108      	bne.n	8002730 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800272e:	e087      	b.n	8002840 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	60da      	str	r2, [r3, #12]
}
 8002740:	e07e      	b.n	8002840 <DMA_SetConfig+0x32c>
 8002742:	bf00      	nop
 8002744:	40020010 	.word	0x40020010
 8002748:	40020028 	.word	0x40020028
 800274c:	40020040 	.word	0x40020040
 8002750:	40020058 	.word	0x40020058
 8002754:	40020070 	.word	0x40020070
 8002758:	40020088 	.word	0x40020088
 800275c:	400200a0 	.word	0x400200a0
 8002760:	400200b8 	.word	0x400200b8
 8002764:	40020410 	.word	0x40020410
 8002768:	40020428 	.word	0x40020428
 800276c:	40020440 	.word	0x40020440
 8002770:	40020458 	.word	0x40020458
 8002774:	40020470 	.word	0x40020470
 8002778:	40020488 	.word	0x40020488
 800277c:	400204a0 	.word	0x400204a0
 8002780:	400204b8 	.word	0x400204b8
 8002784:	58025408 	.word	0x58025408
 8002788:	5802541c 	.word	0x5802541c
 800278c:	58025430 	.word	0x58025430
 8002790:	58025444 	.word	0x58025444
 8002794:	58025458 	.word	0x58025458
 8002798:	5802546c 	.word	0x5802546c
 800279c:	58025480 	.word	0x58025480
 80027a0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a28      	ldr	r2, [pc, #160]	; (800284c <DMA_SetConfig+0x338>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d022      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a27      	ldr	r2, [pc, #156]	; (8002850 <DMA_SetConfig+0x33c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01d      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a25      	ldr	r2, [pc, #148]	; (8002854 <DMA_SetConfig+0x340>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d018      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a24      	ldr	r2, [pc, #144]	; (8002858 <DMA_SetConfig+0x344>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a22      	ldr	r2, [pc, #136]	; (800285c <DMA_SetConfig+0x348>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00e      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <DMA_SetConfig+0x34c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d009      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <DMA_SetConfig+0x350>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <DMA_SetConfig+0x2e0>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <DMA_SetConfig+0x354>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <DMA_SetConfig+0x2e4>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <DMA_SetConfig+0x2e6>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d020      	beq.n	8002840 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d108      	bne.n	8002830 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	60da      	str	r2, [r3, #12]
}
 800282e:	e007      	b.n	8002840 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	58025408 	.word	0x58025408
 8002850:	5802541c 	.word	0x5802541c
 8002854:	58025430 	.word	0x58025430
 8002858:	58025444 	.word	0x58025444
 800285c:	58025458 	.word	0x58025458
 8002860:	5802546c 	.word	0x5802546c
 8002864:	58025480 	.word	0x58025480
 8002868:	58025494 	.word	0x58025494

0800286c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a42      	ldr	r2, [pc, #264]	; (8002984 <DMA_CalcBaseAndBitshift+0x118>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d04a      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a41      	ldr	r2, [pc, #260]	; (8002988 <DMA_CalcBaseAndBitshift+0x11c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d045      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a3f      	ldr	r2, [pc, #252]	; (800298c <DMA_CalcBaseAndBitshift+0x120>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d040      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a3e      	ldr	r2, [pc, #248]	; (8002990 <DMA_CalcBaseAndBitshift+0x124>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d03b      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <DMA_CalcBaseAndBitshift+0x128>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d036      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <DMA_CalcBaseAndBitshift+0x12c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d031      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a39      	ldr	r2, [pc, #228]	; (800299c <DMA_CalcBaseAndBitshift+0x130>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02c      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a38      	ldr	r2, [pc, #224]	; (80029a0 <DMA_CalcBaseAndBitshift+0x134>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d027      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a36      	ldr	r2, [pc, #216]	; (80029a4 <DMA_CalcBaseAndBitshift+0x138>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d022      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a35      	ldr	r2, [pc, #212]	; (80029a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d01d      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a33      	ldr	r2, [pc, #204]	; (80029ac <DMA_CalcBaseAndBitshift+0x140>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d018      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <DMA_CalcBaseAndBitshift+0x144>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <DMA_CalcBaseAndBitshift+0x148>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00e      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <DMA_CalcBaseAndBitshift+0x150>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <DMA_CalcBaseAndBitshift+0xa8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2c      	ldr	r2, [pc, #176]	; (80029c0 <DMA_CalcBaseAndBitshift+0x154>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <DMA_CalcBaseAndBitshift+0xac>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <DMA_CalcBaseAndBitshift+0xae>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d024      	beq.n	8002968 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3b10      	subs	r3, #16
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <DMA_CalcBaseAndBitshift+0x158>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	4a24      	ldr	r2, [pc, #144]	; (80029c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	461a      	mov	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d908      	bls.n	8002958 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <DMA_CalcBaseAndBitshift+0x160>)
 800294e:	4013      	ands	r3, r2
 8002950:	1d1a      	adds	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	; 0x58
 8002956:	e00d      	b.n	8002974 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <DMA_CalcBaseAndBitshift+0x160>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6593      	str	r3, [r2, #88]	; 0x58
 8002966:	e005      	b.n	8002974 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40020010 	.word	0x40020010
 8002988:	40020028 	.word	0x40020028
 800298c:	40020040 	.word	0x40020040
 8002990:	40020058 	.word	0x40020058
 8002994:	40020070 	.word	0x40020070
 8002998:	40020088 	.word	0x40020088
 800299c:	400200a0 	.word	0x400200a0
 80029a0:	400200b8 	.word	0x400200b8
 80029a4:	40020410 	.word	0x40020410
 80029a8:	40020428 	.word	0x40020428
 80029ac:	40020440 	.word	0x40020440
 80029b0:	40020458 	.word	0x40020458
 80029b4:	40020470 	.word	0x40020470
 80029b8:	40020488 	.word	0x40020488
 80029bc:	400204a0 	.word	0x400204a0
 80029c0:	400204b8 	.word	0x400204b8
 80029c4:	aaaaaaab 	.word	0xaaaaaaab
 80029c8:	0800a7f0 	.word	0x0800a7f0
 80029cc:	fffffc00 	.word	0xfffffc00

080029d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d120      	bne.n	8002a26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d858      	bhi.n	8002a9e <DMA_CheckFifoParam+0xce>
 80029ec:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <DMA_CheckFifoParam+0x24>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a17 	.word	0x08002a17
 80029fc:	08002a05 	.word	0x08002a05
 8002a00:	08002a9f 	.word	0x08002a9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d048      	beq.n	8002aa2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a14:	e045      	b.n	8002aa2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a1e:	d142      	bne.n	8002aa6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a24:	e03f      	b.n	8002aa6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2e:	d123      	bne.n	8002a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d838      	bhi.n	8002aaa <DMA_CheckFifoParam+0xda>
 8002a38:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <DMA_CheckFifoParam+0x70>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a57 	.word	0x08002a57
 8002a48:	08002a51 	.word	0x08002a51
 8002a4c:	08002a69 	.word	0x08002a69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
        break;
 8002a54:	e030      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d025      	beq.n	8002aae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a66:	e022      	b.n	8002aae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a70:	d11f      	bne.n	8002ab2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a76:	e01c      	b.n	8002ab2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d902      	bls.n	8002a86 <DMA_CheckFifoParam+0xb6>
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d003      	beq.n	8002a8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002a84:	e018      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
        break;
 8002a8a:	e015      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8002a9c:	e00b      	b.n	8002ab6 <DMA_CheckFifoParam+0xe6>
        break;
 8002a9e:	bf00      	nop
 8002aa0:	e00a      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8002aa2:	bf00      	nop
 8002aa4:	e008      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8002aa6:	bf00      	nop
 8002aa8:	e006      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e004      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <DMA_CheckFifoParam+0xe8>
    break;
 8002ab6:	bf00      	nop
    }
  }

  return status;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a36      	ldr	r2, [pc, #216]	; (8002bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01d      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d018      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a30      	ldr	r2, [pc, #192]	; (8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2f      	ldr	r2, [pc, #188]	; (8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01a      	beq.n	8002b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3b08      	subs	r3, #8
 8002b38:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002b54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002b64:	e024      	b.n	8002bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3b10      	subs	r3, #16
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d806      	bhi.n	8002b8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d902      	bls.n	8002b8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002ba0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2201      	movs	r2, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	58025408 	.word	0x58025408
 8002bc0:	5802541c 	.word	0x5802541c
 8002bc4:	58025430 	.word	0x58025430
 8002bc8:	58025444 	.word	0x58025444
 8002bcc:	58025458 	.word	0x58025458
 8002bd0:	5802546c 	.word	0x5802546c
 8002bd4:	58025480 	.word	0x58025480
 8002bd8:	58025494 	.word	0x58025494
 8002bdc:	cccccccd 	.word	0xcccccccd
 8002be0:	16009600 	.word	0x16009600
 8002be4:	58025880 	.word	0x58025880
 8002be8:	aaaaaaab 	.word	0xaaaaaaab
 8002bec:	400204b8 	.word	0x400204b8
 8002bf0:	4002040f 	.word	0x4002040f
 8002bf4:	10008200 	.word	0x10008200
 8002bf8:	40020880 	.word	0x40020880

08002bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d04a      	beq.n	8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d847      	bhi.n	8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d022      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d01d      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d018      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00e      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d009      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002c84:	671a      	str	r2, [r3, #112]	; 0x70
 8002c86:	e009      	b.n	8002c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002c9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	58025408 	.word	0x58025408
 8002cb8:	5802541c 	.word	0x5802541c
 8002cbc:	58025430 	.word	0x58025430
 8002cc0:	58025444 	.word	0x58025444
 8002cc4:	58025458 	.word	0x58025458
 8002cc8:	5802546c 	.word	0x5802546c
 8002ccc:	58025480 	.word	0x58025480
 8002cd0:	58025494 	.word	0x58025494
 8002cd4:	1600963f 	.word	0x1600963f
 8002cd8:	58025940 	.word	0x58025940
 8002cdc:	1000823f 	.word	0x1000823f
 8002ce0:	40020940 	.word	0x40020940

08002ce4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	7a1b      	ldrb	r3, [r3, #8]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d155      	bne.n	8002daa <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d049      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a49      	ldr	r2, [pc, #292]	; (8002e34 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d044      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a48      	ldr	r2, [pc, #288]	; (8002e38 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03f      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a46      	ldr	r2, [pc, #280]	; (8002e3c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d03a      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a45      	ldr	r2, [pc, #276]	; (8002e40 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d035      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d030      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a42      	ldr	r2, [pc, #264]	; (8002e48 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d02b      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d026      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d021      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01c      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d017      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d012      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a39      	ldr	r2, [pc, #228]	; (8002e60 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00d      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a37      	ldr	r2, [pc, #220]	; (8002e64 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d008      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d131      	bne.n	8002e1a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e02f      	b.n	8002e24 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd6:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002dda:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	061a      	lsls	r2, r3, #24
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	04db      	lsls	r3, r3, #19
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7a1b      	ldrb	r3, [r3, #8]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	7a5b      	ldrb	r3, [r3, #9]
 8002e02:	025b      	lsls	r3, r3, #9
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e004      	b.n	8002e24 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8

08002e70 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01a      	beq.n	8002ebe <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ea0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d022      	beq.n	8002f0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01a      	beq.n	8002f0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002eee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
      }
    }
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f22:	4b86      	ldr	r3, [pc, #536]	; (800313c <HAL_GPIO_Init+0x228>)
 8002f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f26:	e18c      	b.n	8003242 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 817e 	beq.w	800323c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d005      	beq.n	8002f58 <HAL_GPIO_Init+0x44>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d130      	bne.n	8002fba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f8e:	2201      	movs	r2, #1
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 0201 	and.w	r2, r3, #1
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d017      	beq.n	8002ff6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d123      	bne.n	800304a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	08da      	lsrs	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3208      	adds	r2, #8
 800300a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80d8 	beq.w	800323c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <HAL_GPIO_Init+0x22c>)
 800308e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003092:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <HAL_GPIO_Init+0x22c>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_GPIO_Init+0x22c>)
 800309e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030aa:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_GPIO_Init+0x230>)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <HAL_GPIO_Init+0x234>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d04a      	beq.n	800316c <HAL_GPIO_Init+0x258>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_GPIO_Init+0x238>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <HAL_GPIO_Init+0x222>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_GPIO_Init+0x23c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d025      	beq.n	8003132 <HAL_GPIO_Init+0x21e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_GPIO_Init+0x240>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <HAL_GPIO_Init+0x21a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_GPIO_Init+0x244>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d019      	beq.n	800312a <HAL_GPIO_Init+0x216>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_GPIO_Init+0x248>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x212>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_GPIO_Init+0x24c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00d      	beq.n	8003122 <HAL_GPIO_Init+0x20e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_GPIO_Init+0x250>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x20a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <HAL_GPIO_Init+0x254>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_GPIO_Init+0x206>
 8003116:	2309      	movs	r3, #9
 8003118:	e029      	b.n	800316e <HAL_GPIO_Init+0x25a>
 800311a:	230a      	movs	r3, #10
 800311c:	e027      	b.n	800316e <HAL_GPIO_Init+0x25a>
 800311e:	2307      	movs	r3, #7
 8003120:	e025      	b.n	800316e <HAL_GPIO_Init+0x25a>
 8003122:	2306      	movs	r3, #6
 8003124:	e023      	b.n	800316e <HAL_GPIO_Init+0x25a>
 8003126:	2305      	movs	r3, #5
 8003128:	e021      	b.n	800316e <HAL_GPIO_Init+0x25a>
 800312a:	2304      	movs	r3, #4
 800312c:	e01f      	b.n	800316e <HAL_GPIO_Init+0x25a>
 800312e:	2303      	movs	r3, #3
 8003130:	e01d      	b.n	800316e <HAL_GPIO_Init+0x25a>
 8003132:	2302      	movs	r3, #2
 8003134:	e01b      	b.n	800316e <HAL_GPIO_Init+0x25a>
 8003136:	2301      	movs	r3, #1
 8003138:	e019      	b.n	800316e <HAL_GPIO_Init+0x25a>
 800313a:	bf00      	nop
 800313c:	58000080 	.word	0x58000080
 8003140:	58024400 	.word	0x58024400
 8003144:	58000400 	.word	0x58000400
 8003148:	58020000 	.word	0x58020000
 800314c:	58020400 	.word	0x58020400
 8003150:	58020800 	.word	0x58020800
 8003154:	58020c00 	.word	0x58020c00
 8003158:	58021000 	.word	0x58021000
 800315c:	58021400 	.word	0x58021400
 8003160:	58021800 	.word	0x58021800
 8003164:	58021c00 	.word	0x58021c00
 8003168:	58022400 	.word	0x58022400
 800316c:	2300      	movs	r3, #0
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317e:	4938      	ldr	r1, [pc, #224]	; (8003260 <HAL_GPIO_Init+0x34c>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	3301      	adds	r3, #1
 8003240:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f ae6b 	bne.w	8002f28 <HAL_GPIO_Init+0x14>
  }
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	3724      	adds	r7, #36	; 0x24
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	58000400 	.word	0x58000400

08003264 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_PWREx_ConfigSupply+0xb0>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	2b06      	cmp	r3, #6
 8003276:	d00a      	beq.n	800328e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_PWREx_ConfigSupply+0xb0>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e03f      	b.n	800330a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e03d      	b.n	800330a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_PWREx_ConfigSupply+0xb0>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003296:	491f      	ldr	r1, [pc, #124]	; (8003314 <HAL_PWREx_ConfigSupply+0xb0>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4313      	orrs	r3, r2
 800329c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800329e:	f7fd fa39 	bl	8000714 <HAL_GetTick>
 80032a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032a4:	e009      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032a6:	f7fd fa35 	bl	8000714 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b4:	d901      	bls.n	80032ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e027      	b.n	800330a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_PWREx_ConfigSupply+0xb0>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	d1ee      	bne.n	80032a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b1e      	cmp	r3, #30
 80032cc:	d008      	beq.n	80032e0 <HAL_PWREx_ConfigSupply+0x7c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b2e      	cmp	r3, #46	; 0x2e
 80032d2:	d005      	beq.n	80032e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b1d      	cmp	r3, #29
 80032d8:	d002      	beq.n	80032e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b2d      	cmp	r3, #45	; 0x2d
 80032de:	d113      	bne.n	8003308 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032e0:	f7fd fa18 	bl	8000714 <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032e6:	e009      	b.n	80032fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032e8:	f7fd fa14 	bl	8000714 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f6:	d901      	bls.n	80032fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e006      	b.n	800330a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_PWREx_ConfigSupply+0xb0>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0311 	and.w	r3, r3, #17
 8003304:	2b11      	cmp	r3, #17
 8003306:	d1ef      	bne.n	80032e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	58024800 	.word	0x58024800

08003318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	; 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e397      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003338:	4b9e      	ldr	r3, [pc, #632]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003342:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b10      	cmp	r3, #16
 800334c:	d007      	beq.n	800335e <HAL_RCC_OscConfig+0x46>
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b18      	cmp	r3, #24
 8003352:	d110      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b95      	ldr	r3, [pc, #596]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x12c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e371      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x76>
 8003380:	4b8c      	ldr	r3, [pc, #560]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a8b      	ldr	r2, [pc, #556]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b87      	ldr	r3, [pc, #540]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a86      	ldr	r2, [pc, #536]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b84      	ldr	r3, [pc, #528]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a83      	ldr	r2, [pc, #524]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xbc>
 80033ba:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7d      	ldr	r2, [pc, #500]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b7b      	ldr	r3, [pc, #492]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7a      	ldr	r2, [pc, #488]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033d4:	4b77      	ldr	r3, [pc, #476]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a76      	ldr	r2, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b74      	ldr	r3, [pc, #464]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a73      	ldr	r2, [pc, #460]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd f98e 	bl	8000714 <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fd f98a 	bl	8000714 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e325      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800340e:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe4>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd f97a 	bl	8000714 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003424:	f7fd f976 	bl	8000714 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e311      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x10c>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 808a 	beq.w	8003568 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003454:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800345e:	4b55      	ldr	r3, [pc, #340]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_RCC_OscConfig+0x162>
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	2b18      	cmp	r3, #24
 800346e:	d137      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1c8>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d132      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347a:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x17a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e2e3      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003492:	4b48      	ldr	r3, [pc, #288]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0219 	bic.w	r2, r3, #25
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	4945      	ldr	r1, [pc, #276]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034a4:	f7fd f936 	bl	8000714 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd f932 	bl	8000714 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e2cd      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	4936      	ldr	r1, [pc, #216]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034de:	e043      	b.n	8003568 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d026      	beq.n	8003536 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 0219 	bic.w	r2, r3, #25
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	492f      	ldr	r1, [pc, #188]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd f90b 	bl	8000714 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003502:	f7fd f907 	bl	8000714 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e2a2      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	4921      	ldr	r1, [pc, #132]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
 8003534:	e018      	b.n	8003568 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fd f8e7 	bl	8000714 <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fd f8e3 	bl	8000714 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e27e      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800355c:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d06d      	beq.n	8003650 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d007      	beq.n	800359a <HAL_RCC_OscConfig+0x282>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b18      	cmp	r3, #24
 800358e:	d11e      	bne.n	80035ce <HAL_RCC_OscConfig+0x2b6>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d119      	bne.n	80035ce <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x29c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCC_OscConfig+0x2a0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d004      	beq.n	80035b8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e253      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035b8:	4ba3      	ldr	r3, [pc, #652]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	49a0      	ldr	r1, [pc, #640]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035cc:	e040      	b.n	8003650 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d023      	beq.n	800361e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035d6:	4b9c      	ldr	r3, [pc, #624]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a9b      	ldr	r2, [pc, #620]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80035dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd f897 	bl	8000714 <HAL_GetTick>
 80035e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035ea:	f7fd f893 	bl	8000714 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e22e      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035fc:	4b92      	ldr	r3, [pc, #584]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003608:	4b8f      	ldr	r3, [pc, #572]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	498c      	ldr	r1, [pc, #560]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e018      	b.n	8003650 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800361e:	4b8a      	ldr	r3, [pc, #552]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a89      	ldr	r2, [pc, #548]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd f873 	bl	8000714 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003632:	f7fd f86f 	bl	8000714 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e20a      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003644:	4b80      	ldr	r3, [pc, #512]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d036      	beq.n	80036ca <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d019      	beq.n	8003698 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003664:	4b78      	ldr	r3, [pc, #480]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003668:	4a77      	ldr	r2, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fd f850 	bl	8000714 <HAL_GetTick>
 8003674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003678:	f7fd f84c 	bl	8000714 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1e7      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800368a:	4b6f      	ldr	r3, [pc, #444]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x360>
 8003696:	e018      	b.n	80036ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003698:	4b6b      	ldr	r3, [pc, #428]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	4a6a      	ldr	r2, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd f836 	bl	8000714 <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ac:	f7fd f832 	bl	8000714 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1cd      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036be:	4b62      	ldr	r3, [pc, #392]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036de:	4b5a      	ldr	r3, [pc, #360]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a59      	ldr	r2, [pc, #356]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80036e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036ea:	f7fd f813 	bl	8000714 <HAL_GetTick>
 80036ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036f2:	f7fd f80f 	bl	8000714 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1aa      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3da>
 8003710:	e018      	b.n	8003744 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800371c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800371e:	f7fc fff9 	bl	8000714 <HAL_GetTick>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003726:	f7fc fff5 	bl	8000714 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e190      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003738:	4b43      	ldr	r3, [pc, #268]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8085 	beq.w	800385c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003752:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_RCC_OscConfig+0x534>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3d      	ldr	r2, [pc, #244]	; (800384c <HAL_RCC_OscConfig+0x534>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800375e:	f7fc ffd9 	bl	8000714 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003766:	f7fc ffd5 	bl	8000714 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e170      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003778:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCC_OscConfig+0x534>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x482>
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	e02d      	b.n	80037f6 <HAL_RCC_OscConfig+0x4de>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x4a4>
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a25      	ldr	r2, [pc, #148]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	e01c      	b.n	80037f6 <HAL_RCC_OscConfig+0x4de>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_OscConfig+0x4c6>
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e00b      	b.n	80037f6 <HAL_RCC_OscConfig+0x4de>
 80037de:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a19      	ldr	r2, [pc, #100]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d015      	beq.n	800382a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fc ff89 	bl	8000714 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fc ff85 	bl	8000714 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e11e      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_OscConfig+0x530>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ee      	beq.n	8003806 <HAL_RCC_OscConfig+0x4ee>
 8003828:	e018      	b.n	800385c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fc ff73 	bl	8000714 <HAL_GetTick>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003830:	e00e      	b.n	8003850 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fc ff6f 	bl	8000714 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d905      	bls.n	8003850 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e108      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
 8003848:	58024400 	.word	0x58024400
 800384c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003850:	4b84      	ldr	r3, [pc, #528]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ea      	bne.n	8003832 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80f9 	beq.w	8003a58 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003866:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800386e:	2b18      	cmp	r3, #24
 8003870:	f000 80b4 	beq.w	80039dc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b02      	cmp	r3, #2
 800387a:	f040 8095 	bne.w	80039a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a78      	ldr	r2, [pc, #480]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fc ff43 	bl	8000714 <HAL_GetTick>
 800388e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003892:	f7fc ff3f 	bl	8000714 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0da      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b0:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80038b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b4:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <HAL_RCC_OscConfig+0x750>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	430a      	orrs	r2, r1
 80038c4:	4967      	ldr	r1, [pc, #412]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	628b      	str	r3, [r1, #40]	; 0x28
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	3b01      	subs	r3, #1
 80038da:	025b      	lsls	r3, r3, #9
 80038dc:	b29b      	uxth	r3, r3
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	3b01      	subs	r3, #1
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	3b01      	subs	r3, #1
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038fa:	495a      	ldr	r1, [pc, #360]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003900:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800390c:	4b55      	ldr	r3, [pc, #340]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <HAL_RCC_OscConfig+0x754>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003918:	00d2      	lsls	r2, r2, #3
 800391a:	4952      	ldr	r1, [pc, #328]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f023 020c 	bic.w	r2, r3, #12
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003932:	4b4c      	ldr	r3, [pc, #304]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f023 0202 	bic.w	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4949      	ldr	r1, [pc, #292]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003940:	4313      	orrs	r3, r2
 8003942:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003944:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	4a46      	ldr	r2, [pc, #280]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4b44      	ldr	r3, [pc, #272]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a43      	ldr	r2, [pc, #268]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003968:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a3d      	ldr	r2, [pc, #244]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003974:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800397a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fc fec8 	bl	8000714 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7fc fec4 	bl	8000714 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e05f      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x670>
 80039a6:	e057      	b.n	8003a58 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80039ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fc feae 	bl	8000714 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fc feaa 	bl	8000714 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e045      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ce:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x6a4>
 80039da:	e03d      	b.n	8003a58 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCC_OscConfig+0x74c>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d031      	beq.n	8003a54 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d12a      	bne.n	8003a54 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d122      	bne.n	8003a54 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d11a      	bne.n	8003a54 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	0a5b      	lsrs	r3, r3, #9
 8003a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d111      	bne.n	8003a54 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d108      	bne.n	8003a54 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0e1b      	lsrs	r3, r3, #24
 8003a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3730      	adds	r7, #48	; 0x30
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
 8003a68:	fffffc0c 	.word	0xfffffc0c
 8003a6c:	ffff0007 	.word	0xffff0007

08003a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e19c      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d910      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 020f 	bic.w	r2, r3, #15
 8003a9a:	4985      	ldr	r1, [pc, #532]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b83      	ldr	r3, [pc, #524]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e184      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d908      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ad0:	4b78      	ldr	r3, [pc, #480]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4975      	ldr	r1, [pc, #468]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d908      	bls.n	8003b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003afe:	4b6d      	ldr	r3, [pc, #436]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	496a      	ldr	r1, [pc, #424]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d010      	beq.n	8003b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	4b64      	ldr	r3, [pc, #400]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d908      	bls.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b2c:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	495e      	ldr	r1, [pc, #376]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	4b59      	ldr	r3, [pc, #356]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b5a:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4953      	ldr	r1, [pc, #332]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d010      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	4b4d      	ldr	r3, [pc, #308]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d908      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f023 020f 	bic.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4947      	ldr	r1, [pc, #284]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d055      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ba6:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4940      	ldr	r1, [pc, #256]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d121      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0f6      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d115      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0ea      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0de      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c00:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0d6      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4925      	ldr	r1, [pc, #148]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fc fd77 	bl	8000714 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2a:	f7fc fd73 	bl	8000714 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0be      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d1eb      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d208      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f023 020f 	bic.w	r2, r3, #15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	490e      	ldr	r1, [pc, #56]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d214      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 020f 	bic.w	r2, r3, #15
 8003c96:	4906      	ldr	r1, [pc, #24]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e086      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
 8003cb0:	52002000 	.word	0x52002000
 8003cb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d208      	bcs.n	8003ce6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cd4:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	4939      	ldr	r1, [pc, #228]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d010      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d208      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	492e      	ldr	r1, [pc, #184]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d208      	bcs.n	8003d42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4922      	ldr	r1, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d208      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4917      	ldr	r1, [pc, #92]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d70:	f000 f834 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	4912      	ldr	r1, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x35c>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <HAL_RCC_ClockConfig+0x35c>)
 8003d98:	5cd3      	ldrb	r3, [r2, r3]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x360>)
 8003da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x364>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x368>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fc64 	bl	8000680 <HAL_InitTick>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	0800a820 	.word	0x0800a820
 8003dd0:	2400040c 	.word	0x2400040c
 8003dd4:	24000408 	.word	0x24000408
 8003dd8:	24000400 	.word	0x24000400

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de2:	4bb3      	ldr	r3, [pc, #716]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dea:	2b18      	cmp	r3, #24
 8003dec:	f200 8155 	bhi.w	800409a <HAL_RCC_GetSysClockFreq+0x2be>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e5d 	.word	0x08003e5d
 8003dfc:	0800409b 	.word	0x0800409b
 8003e00:	0800409b 	.word	0x0800409b
 8003e04:	0800409b 	.word	0x0800409b
 8003e08:	0800409b 	.word	0x0800409b
 8003e0c:	0800409b 	.word	0x0800409b
 8003e10:	0800409b 	.word	0x0800409b
 8003e14:	0800409b 	.word	0x0800409b
 8003e18:	08003e83 	.word	0x08003e83
 8003e1c:	0800409b 	.word	0x0800409b
 8003e20:	0800409b 	.word	0x0800409b
 8003e24:	0800409b 	.word	0x0800409b
 8003e28:	0800409b 	.word	0x0800409b
 8003e2c:	0800409b 	.word	0x0800409b
 8003e30:	0800409b 	.word	0x0800409b
 8003e34:	0800409b 	.word	0x0800409b
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	0800409b 	.word	0x0800409b
 8003e40:	0800409b 	.word	0x0800409b
 8003e44:	0800409b 	.word	0x0800409b
 8003e48:	0800409b 	.word	0x0800409b
 8003e4c:	0800409b 	.word	0x0800409b
 8003e50:	0800409b 	.word	0x0800409b
 8003e54:	0800409b 	.word	0x0800409b
 8003e58:	08003e8f 	.word	0x08003e8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e5c:	4b94      	ldr	r3, [pc, #592]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d009      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e68:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	4a90      	ldr	r2, [pc, #576]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e7a:	e111      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e7c:	4b8d      	ldr	r3, [pc, #564]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e7e:	61bb      	str	r3, [r7, #24]
    break;
 8003e80:	e10e      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e82:	4b8d      	ldr	r3, [pc, #564]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e84:	61bb      	str	r3, [r7, #24]
    break;
 8003e86:	e10b      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e88:	4b8c      	ldr	r3, [pc, #560]	; (80040bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e8a:	61bb      	str	r3, [r7, #24]
    break;
 8003e8c:	e108      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e98:	4b85      	ldr	r3, [pc, #532]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ea4:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003eae:	4b80      	ldr	r3, [pc, #512]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	08db      	lsrs	r3, r3, #3
 8003eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80e1 	beq.w	8004094 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	f000 8083 	beq.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f200 80a1 	bhi.w	8004024 <HAL_RCC_GetSysClockFreq+0x248>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d056      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003eee:	e099      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02d      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003efc:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f56:	e087      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f9a:	e065      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fae:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fde:	e043      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004002:	ed97 6a02 	vldr	s12, [r7, #8]
 8004006:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800400a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004022:	e021      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004046:	ed97 6a02 	vldr	s12, [r7, #8]
 800404a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800404e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004066:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	0a5b      	lsrs	r3, r3, #9
 800406e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004072:	3301      	adds	r3, #1
 8004074:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004080:	edd7 6a07 	vldr	s13, [r7, #28]
 8004084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408c:	ee17 3a90 	vmov	r3, s15
 8004090:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004092:	e005      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    break;
 8004098:	e002      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800409c:	61bb      	str	r3, [r7, #24]
    break;
 800409e:	bf00      	nop
  }

  return sysclockfreq;
 80040a0:	69bb      	ldr	r3, [r7, #24]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
 80040b4:	03d09000 	.word	0x03d09000
 80040b8:	003d0900 	.word	0x003d0900
 80040bc:	017d7840 	.word	0x017d7840
 80040c0:	46000000 	.word	0x46000000
 80040c4:	4c742400 	.word	0x4c742400
 80040c8:	4a742400 	.word	0x4a742400
 80040cc:	4bbebc20 	.word	0x4bbebc20

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040d6:	f7ff fe81 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCC_GetHCLKFreq+0x50>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490f      	ldr	r1, [pc, #60]	; (8004124 <HAL_RCC_GetHCLKFreq+0x54>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_GetHCLKFreq+0x50>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_GetHCLKFreq+0x54>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <HAL_RCC_GetHCLKFreq+0x58>)
 800410c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_GetHCLKFreq+0x58>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	58024400 	.word	0x58024400
 8004124:	0800a820 	.word	0x0800a820
 8004128:	2400040c 	.word	0x2400040c
 800412c:	24000408 	.word	0x24000408

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004134:	f7ff ffcc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	0800a820 	.word	0x0800a820

0800415c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004160:	f7ff ffb6 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4904      	ldr	r1, [pc, #16]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	58024400 	.word	0x58024400
 8004184:	0800a820 	.word	0x0800a820

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004194:	2300      	movs	r3, #0
 8004196:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03f      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ac:	d02a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041b2:	d824      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b8:	d018      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041be:	d81e      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c8:	d007      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041ca:	e018      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041cc:	4bab      	ldr	r3, [pc, #684]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4aaa      	ldr	r2, [pc, #680]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041d8:	e015      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 feff 	bl	8005fe4 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041ea:	e00c      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3324      	adds	r3, #36	; 0x24
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 ffa8 	bl	8006148 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
      break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800420c:	4b9b      	ldr	r3, [pc, #620]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004218:	4998      	ldr	r1, [pc, #608]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	650b      	str	r3, [r1, #80]	; 0x50
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03d      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	2b04      	cmp	r3, #4
 8004236:	d826      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004255 	.word	0x08004255
 8004244:	08004263 	.word	0x08004263
 8004248:	08004275 	.word	0x08004275
 800424c:	0800428d 	.word	0x0800428d
 8004250:	0800428d 	.word	0x0800428d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004254:	4b89      	ldr	r3, [pc, #548]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4a88      	ldr	r2, [pc, #544]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004260:	e015      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 febb 	bl	8005fe4 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004272:	e00c      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 ff64 	bl	8006148 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
      break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800428c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004294:	4b79      	ldr	r3, [pc, #484]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	f023 0207 	bic.w	r2, r3, #7
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	4976      	ldr	r1, [pc, #472]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	650b      	str	r3, [r1, #80]	; 0x50
 80042a6:	e001      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d051      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042be:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80042c2:	d036      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042c4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80042c8:	d830      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ce:	d032      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80042d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d4:	d82a      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042da:	d02e      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80042dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042e0:	d824      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e6:	d018      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ec:	d81e      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x172>
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f6:	d007      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80042f8:	e018      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fa:	4b60      	ldr	r3, [pc, #384]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	4a5f      	ldr	r2, [pc, #380]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004306:	e019      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fe68 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004318:	e010      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3324      	adds	r3, #36	; 0x24
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f001 ff11 	bl	8006148 <RCCEx_PLL3_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800432a:	e007      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	e004      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800433a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004342:	4b4e      	ldr	r3, [pc, #312]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004350:	494a      	ldr	r1, [pc, #296]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	658b      	str	r3, [r1, #88]	; 0x58
 8004356:	e001      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004364:	2b00      	cmp	r3, #0
 8004366:	d051      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800436e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004372:	d036      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004374:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004378:	d830      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800437a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800437e:	d032      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004384:	d82a      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004386:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800438a:	d02e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x262>
 800438c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004390:	d824      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004396:	d018      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800439c:	d81e      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x222>
 80043a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a6:	d007      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043a8:	e018      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043aa:	4b34      	ldr	r3, [pc, #208]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	4a33      	ldr	r2, [pc, #204]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043b6:	e019      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 fe10 	bl	8005fe4 <RCCEx_PLL2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80043c8:	e010      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3324      	adds	r3, #36	; 0x24
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 feb9 	bl	8006148 <RCCEx_PLL3_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043da:	e007      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	75fb      	strb	r3, [r7, #23]
      break;
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004400:	491e      	ldr	r1, [pc, #120]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004402:	4313      	orrs	r3, r2
 8004404:	658b      	str	r3, [r1, #88]	; 0x58
 8004406:	e001      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d035      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441c:	2b30      	cmp	r3, #48	; 0x30
 800441e:	d01c      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d817      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d00c      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d813      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d016      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004430:	2b10      	cmp	r3, #16
 8004432:	d10f      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	4a10      	ldr	r2, [pc, #64]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004440:	e00e      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2102      	movs	r1, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f001 fdcb 	bl	8005fe4 <RCCEx_PLL2_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004452:	e005      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	75fb      	strb	r3, [r7, #23]
      break;
 8004458:	e002      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800445e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	4902      	ldr	r1, [pc, #8]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004478:	e004      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d047      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004498:	d030      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800449a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800449e:	d82a      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044a4:	d02c      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80044a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044aa:	d824      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b0:	d018      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b6:	d81e      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c0:	d007      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80044c2:	e018      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c4:	4bac      	ldr	r3, [pc, #688]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4aab      	ldr	r2, [pc, #684]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044d0:	e017      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 fd83 	bl	8005fe4 <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044e2:	e00e      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3324      	adds	r3, #36	; 0x24
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fe2c 	bl	8006148 <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044f4:	e005      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004508:	4b9b      	ldr	r3, [pc, #620]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4998      	ldr	r1, [pc, #608]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	650b      	str	r3, [r1, #80]	; 0x50
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d049      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004534:	d02e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453a:	d828      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800453c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004540:	d02a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004546:	d822      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004548:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800454c:	d026      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800454e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004552:	d81c      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004558:	d010      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800455a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455e:	d816      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01d      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d111      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f001 fd37 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800457a:	e012      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3324      	adds	r3, #36	; 0x24
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f001 fde0 	bl	8006148 <RCCEx_PLL3_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800458c:	e009      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
      break;
 8004592:	e006      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004594:	bf00      	nop
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004598:	bf00      	nop
 800459a:	e002      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80045a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045a8:	4b73      	ldr	r3, [pc, #460]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	4970      	ldr	r1, [pc, #448]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	650b      	str	r3, [r1, #80]	; 0x50
 80045ba:	e001      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d04b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045d6:	d02e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80045d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045dc:	d828      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d02a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d822      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80045ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045ee:	d026      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80045f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045f4:	d81c      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80045f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045fa:	d010      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x496>
 80045fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004600:	d816      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01d      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460a:	d111      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3304      	adds	r3, #4
 8004610:	2101      	movs	r1, #1
 8004612:	4618      	mov	r0, r3
 8004614:	f001 fce6 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800461c:	e012      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3324      	adds	r3, #36	; 0x24
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fd8f 	bl	8006148 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800462e:	e009      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
      break;
 8004634:	e006      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004636:	bf00      	nop
 8004638:	e004      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800463a:	bf00      	nop
 800463c:	e002      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800464a:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004658:	4947      	ldr	r1, [pc, #284]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	658b      	str	r3, [r1, #88]	; 0x58
 800465e:	e001      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004678:	d00e      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800467a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467e:	d814      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004688:	d10f      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	4a3a      	ldr	r2, [pc, #232]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004696:	e00c      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 fca0 	bl	8005fe4 <RCCEx_PLL2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
      break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80046b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b8:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c4:	492c      	ldr	r1, [pc, #176]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	650b      	str	r3, [r1, #80]	; 0x50
 80046ca:	e001      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d032      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d81b      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004723 	.word	0x08004723
 80046f0:	080046fd 	.word	0x080046fd
 80046f4:	0800470b 	.word	0x0800470b
 80046f8:	08004723 	.word	0x08004723
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004708:	e00c      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f001 fc67 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
      break;
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4910      	ldr	r1, [pc, #64]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800473c:	e001      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 808a 	beq.w	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475c:	f7fb ffda 	bl	8000714 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004762:	e00d      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004764:	f7fb ffd6 	bl	8000714 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d906      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	75fb      	strb	r3, [r7, #23]
        break;
 8004776:	e009      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004778:	58024400 	.word	0x58024400
 800477c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004780:	4bb9      	ldr	r3, [pc, #740]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0eb      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d166      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004792:	4bb6      	ldr	r3, [pc, #728]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800479c:	4053      	eors	r3, r2
 800479e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d013      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a6:	4bb1      	ldr	r3, [pc, #708]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b0:	4bae      	ldr	r3, [pc, #696]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4aad      	ldr	r2, [pc, #692]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047bc:	4bab      	ldr	r3, [pc, #684]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4aaa      	ldr	r2, [pc, #680]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047c8:	4aa8      	ldr	r2, [pc, #672]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d8:	d115      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fb ff9b 	bl	8000714 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e0:	e00b      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fb ff97 	bl	8000714 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d902      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	75fb      	strb	r3, [r7, #23]
            break;
 80047f8:	e005      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fa:	4b9c      	ldr	r3, [pc, #624]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ed      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d126      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481a:	d10d      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800481c:	4b93      	ldr	r3, [pc, #588]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800482a:	0919      	lsrs	r1, r3, #4
 800482c:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800482e:	400b      	ands	r3, r1
 8004830:	498e      	ldr	r1, [pc, #568]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	610b      	str	r3, [r1, #16]
 8004836:	e005      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004838:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	4a8b      	ldr	r2, [pc, #556]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800483e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004842:	6113      	str	r3, [r2, #16]
 8004844:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	4986      	ldr	r1, [pc, #536]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	670b      	str	r3, [r1, #112]	; 0x70
 8004858:	e004      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	75bb      	strb	r3, [r7, #22]
 800485e:	e001      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d07e      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	2b28      	cmp	r3, #40	; 0x28
 8004876:	d867      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	0800494f 	.word	0x0800494f
 8004884:	08004949 	.word	0x08004949
 8004888:	08004949 	.word	0x08004949
 800488c:	08004949 	.word	0x08004949
 8004890:	08004949 	.word	0x08004949
 8004894:	08004949 	.word	0x08004949
 8004898:	08004949 	.word	0x08004949
 800489c:	08004949 	.word	0x08004949
 80048a0:	08004925 	.word	0x08004925
 80048a4:	08004949 	.word	0x08004949
 80048a8:	08004949 	.word	0x08004949
 80048ac:	08004949 	.word	0x08004949
 80048b0:	08004949 	.word	0x08004949
 80048b4:	08004949 	.word	0x08004949
 80048b8:	08004949 	.word	0x08004949
 80048bc:	08004949 	.word	0x08004949
 80048c0:	08004937 	.word	0x08004937
 80048c4:	08004949 	.word	0x08004949
 80048c8:	08004949 	.word	0x08004949
 80048cc:	08004949 	.word	0x08004949
 80048d0:	08004949 	.word	0x08004949
 80048d4:	08004949 	.word	0x08004949
 80048d8:	08004949 	.word	0x08004949
 80048dc:	08004949 	.word	0x08004949
 80048e0:	0800494f 	.word	0x0800494f
 80048e4:	08004949 	.word	0x08004949
 80048e8:	08004949 	.word	0x08004949
 80048ec:	08004949 	.word	0x08004949
 80048f0:	08004949 	.word	0x08004949
 80048f4:	08004949 	.word	0x08004949
 80048f8:	08004949 	.word	0x08004949
 80048fc:	08004949 	.word	0x08004949
 8004900:	0800494f 	.word	0x0800494f
 8004904:	08004949 	.word	0x08004949
 8004908:	08004949 	.word	0x08004949
 800490c:	08004949 	.word	0x08004949
 8004910:	08004949 	.word	0x08004949
 8004914:	08004949 	.word	0x08004949
 8004918:	08004949 	.word	0x08004949
 800491c:	08004949 	.word	0x08004949
 8004920:	0800494f 	.word	0x0800494f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fb5a 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004934:	e00c      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3324      	adds	r3, #36	; 0x24
 800493a:	2101      	movs	r1, #1
 800493c:	4618      	mov	r0, r3
 800493e:	f001 fc03 	bl	8006148 <RCCEx_PLL3_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004946:	e003      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
      break;
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800494e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004956:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	4942      	ldr	r1, [pc, #264]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	654b      	str	r3, [r1, #84]	; 0x54
 8004968:	e001      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d037      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	2b05      	cmp	r3, #5
 8004980:	d820      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049cb 	.word	0x080049cb
 800498c:	080049a1 	.word	0x080049a1
 8004990:	080049b3 	.word	0x080049b3
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049cb 	.word	0x080049cb
 800499c:	080049cb 	.word	0x080049cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fb1c 	bl	8005fe4 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049b0:	e00c      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3324      	adds	r3, #36	; 0x24
 80049b6:	2101      	movs	r1, #1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 fbc5 	bl	8006148 <RCCEx_PLL3_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049c2:	e003      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
      break;
 80049c8:	e000      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80049ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	f023 0207 	bic.w	r2, r3, #7
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4923      	ldr	r1, [pc, #140]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	654b      	str	r3, [r1, #84]	; 0x54
 80049e4:	e001      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d040      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d821      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a4b 	.word	0x08004a4b
 8004a0c:	08004a21 	.word	0x08004a21
 8004a10:	08004a33 	.word	0x08004a33
 8004a14:	08004a4b 	.word	0x08004a4b
 8004a18:	08004a4b 	.word	0x08004a4b
 8004a1c:	08004a4b 	.word	0x08004a4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	2101      	movs	r1, #1
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fadc 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3324      	adds	r3, #36	; 0x24
 8004a36:	2101      	movs	r1, #1
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 fb85 	bl	8006148 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d110      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	f023 0207 	bic.w	r2, r3, #7
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a60:	4902      	ldr	r1, [pc, #8]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	658b      	str	r3, [r1, #88]	; 0x58
 8004a66:	e007      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004a68:	58024800 	.word	0x58024800
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a8e:	d02e      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a94:	d828      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9a:	d02a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d822      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aa6:	d026      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004aa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aac:	d81c      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab2:	d010      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab8:	d816      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01d      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fa8a 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ad4:	e012      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3324      	adds	r3, #36	; 0x24
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fb33 	bl	8006148 <RCCEx_PLL3_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ae6:	e009      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
      break;
 8004aec:	e006      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004aee:	bf00      	nop
 8004af0:	e004      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b02:	4bb2      	ldr	r3, [pc, #712]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	49ae      	ldr	r1, [pc, #696]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	654b      	str	r3, [r1, #84]	; 0x54
 8004b16:	e001      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d04b      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b32:	d02e      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004b34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b38:	d828      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d02a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d822      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b4a:	d026      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b50:	d81c      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b56:	d010      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5c:	d816      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01d      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b66:	d111      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 fa38 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b78:	e012      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3324      	adds	r3, #36	; 0x24
 8004b7e:	2102      	movs	r1, #2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fae1 	bl	8006148 <RCCEx_PLL3_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b8a:	e009      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b90:	e006      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b92:	bf00      	nop
 8004b94:	e004      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b96:	bf00      	nop
 8004b98:	e002      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ba6:	4b89      	ldr	r3, [pc, #548]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb4:	4985      	ldr	r1, [pc, #532]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8004bba:	e001      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d04b      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bd6:	d02e      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004bd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bdc:	d828      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be2:	d02a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	d822      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bee:	d026      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004bf0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bf4:	d81c      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfa:	d010      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c00:	d816      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01d      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0a:	d111      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f9e6 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c1c:	e012      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3324      	adds	r3, #36	; 0x24
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fa8f 	bl	8006148 <RCCEx_PLL3_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c2e:	e009      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	e006      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c36:	bf00      	nop
 8004c38:	e004      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e002      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c4a:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c58:	495c      	ldr	r1, [pc, #368]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c5e:	e001      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d018      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d10a      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3324      	adds	r3, #36	; 0x24
 8004c7e:	2102      	movs	r1, #2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 fa61 	bl	8006148 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004c90:	4b4e      	ldr	r3, [pc, #312]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	494b      	ldr	r1, [pc, #300]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3324      	adds	r3, #36	; 0x24
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 fa41 	bl	8006148 <RCCEx_PLL3_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cd0:	4b3e      	ldr	r3, [pc, #248]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	493b      	ldr	r1, [pc, #236]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d034      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cfa:	d01d      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d00:	d817      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d0c:	e011      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	2100      	movs	r1, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f965 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d1e:	e00c      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3324      	adds	r3, #36	; 0x24
 8004d24:	2102      	movs	r1, #2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fa0e 	bl	8006148 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
      break;
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d4e:	491f      	ldr	r1, [pc, #124]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	658b      	str	r3, [r1, #88]	; 0x58
 8004d54:	e001      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d036      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d70:	d01c      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004d72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d76:	d816      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d82:	d007      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004d84:	e00f      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d92:	e00c      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3324      	adds	r3, #36	; 0x24
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f9d4 	bl	8006148 <RCCEx_PLL3_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
      break;
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc2:	4902      	ldr	r1, [pc, #8]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	654b      	str	r3, [r1, #84]	; 0x54
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004dca:	bf00      	nop
 8004dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d029      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d007      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004dee:	e00f      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df0:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a60      	ldr	r2, [pc, #384]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	2102      	movs	r1, #2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f8ed 	bl	8005fe4 <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
      break;
 8004e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e1c:	4b56      	ldr	r3, [pc, #344]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e28:	4953      	ldr	r1, [pc, #332]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e2e:	e001      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3324      	adds	r3, #36	; 0x24
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 f97e 	bl	8006148 <RCCEx_PLL3_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d030      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6a:	d017      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e70:	d811      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e76:	d013      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d80b      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e86:	d106      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	4a3a      	ldr	r2, [pc, #232]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e94:	e007      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004e9c:	bf00      	nop
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004ea0:	bf00      	nop
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb8:	492f      	ldr	r1, [pc, #188]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004edc:	4926      	ldr	r1, [pc, #152]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efa:	491f      	ldr	r1, [pc, #124]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f16:	6113      	str	r3, [r2, #16]
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f22:	4915      	ldr	r1, [pc, #84]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da08      	bge.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5c:	4906      	ldr	r1, [pc, #24]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f62:	7dbb      	ldrb	r3, [r7, #22]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	58024400 	.word	0x58024400

08004f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b090      	sub	sp, #64	; 0x40
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8a:	f040 8089 	bne.w	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004f8e:	4b95      	ldr	r3, [pc, #596]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	633b      	str	r3, [r7, #48]	; 0x30
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d87d      	bhi.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fb9 	.word	0x08004fb9
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08005001 	.word	0x08005001
 8004fb0:	08005095 	.word	0x08005095
 8004fb4:	08005025 	.word	0x08005025

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fb8:	4b8a      	ldr	r3, [pc, #552]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 feb8 	bl	8005d40 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fd4:	e3ed      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fda:	e3ea      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fdc:	4b81      	ldr	r3, [pc, #516]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fea:	f107 0318 	add.w	r3, r7, #24
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fbfe 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ff8:	e3db      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ffe:	e3d8      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005000:	4b78      	ldr	r3, [pc, #480]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800500c:	d107      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800500e:	f107 030c 	add.w	r3, r7, #12
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fd40 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800501c:	e3c9      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005022:	e3c6      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005024:	4b6f      	ldr	r3, [pc, #444]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800502c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800502e:	4b6d      	ldr	r3, [pc, #436]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d10c      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005040:	4b68      	ldr	r3, [pc, #416]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	08db      	lsrs	r3, r3, #3
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	4a67      	ldr	r2, [pc, #412]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005052:	e01e      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005054:	4b63      	ldr	r3, [pc, #396]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005060:	d106      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005068:	d102      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800506a:	4b60      	ldr	r3, [pc, #384]	; (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506e:	e010      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005070:	4b5c      	ldr	r3, [pc, #368]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800507c:	d106      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005084:	d102      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005086:	4b5a      	ldr	r3, [pc, #360]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508a:	e002      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005090:	e38f      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005092:	e38e      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005094:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005098:	e38b      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800509e:	e388      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a6:	f040 80a7 	bne.w	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80050aa:	4b4e      	ldr	r3, [pc, #312]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ba:	d054      	beq.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050c2:	f200 808b 	bhi.w	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050cc:	f000 8083 	beq.w	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050d6:	f200 8081 	bhi.w	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e0:	d02f      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e8:	d878      	bhi.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f6:	d012      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80050f8:	e070      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050fa:	4b3a      	ldr	r3, [pc, #232]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005106:	d107      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fe17 	bl	8005d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005116:	e34c      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800511c:	e349      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800511e:	4b31      	ldr	r3, [pc, #196]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512a:	d107      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800512c:	f107 0318 	add.w	r3, r7, #24
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fb5d 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800513a:	e33a      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005140:	e337      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800514a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514e:	d107      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005150:	f107 030c 	add.w	r3, r7, #12
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fc9f 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800515e:	e328      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005164:	e325      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005166:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800516e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b04      	cmp	r3, #4
 800517a:	d10c      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005194:	e01e      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a2:	d106      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051aa:	d102      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051b0:	e010      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051be:	d106      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c6:	d102      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80051c8:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051cc:	e002      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80051d2:	e2ee      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80051d4:	e2ed      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051da:	e2ea      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051e0:	e2e7      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80051e2:	bf00      	nop
 80051e4:	58024400 	.word	0x58024400
 80051e8:	03d09000 	.word	0x03d09000
 80051ec:	003d0900 	.word	0x003d0900
 80051f0:	017d7840 	.word	0x017d7840
 80051f4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fe:	f040 809c 	bne.w	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005202:	4b9e      	ldr	r3, [pc, #632]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800520a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005212:	d054      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800521a:	f200 808b 	bhi.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005224:	f000 8083 	beq.w	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800522e:	f200 8081 	bhi.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005238:	d02f      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005240:	d878      	bhi.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005250:	e070      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005252:	4b8a      	ldr	r3, [pc, #552]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800525e:	d107      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fd6b 	bl	8005d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800526e:	e2a0      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005274:	e29d      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005276:	4b81      	ldr	r3, [pc, #516]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005282:	d107      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005284:	f107 0318 	add.w	r3, r7, #24
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fab1 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005292:	e28e      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005298:	e28b      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800529a:	4b78      	ldr	r3, [pc, #480]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d107      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fbf3 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052b6:	e27c      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052bc:	e279      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052be:	4b6f      	ldr	r3, [pc, #444]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052c8:	4b6c      	ldr	r3, [pc, #432]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d10c      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052da:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	4a66      	ldr	r2, [pc, #408]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ec:	e01e      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d106      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005302:	d102      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005304:	4b5f      	ldr	r3, [pc, #380]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005308:	e010      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800530a:	4b5c      	ldr	r3, [pc, #368]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005316:	d106      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531e:	d102      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005320:	4b59      	ldr	r3, [pc, #356]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005324:	e002      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800532a:	e242      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800532c:	e241      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800532e:	4b57      	ldr	r3, [pc, #348]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005332:	e23e      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005338:	e23b      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	f040 80a6 	bne.w	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005344:	4b4d      	ldr	r3, [pc, #308]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005354:	d054      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800535c:	f200 808b 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005366:	f000 8083 	beq.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005370:	f200 8081 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537a:	d02f      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005382:	d878      	bhi.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005390:	d012      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005392:	e070      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005394:	4b39      	ldr	r3, [pc, #228]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a0:	d107      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fcca 	bl	8005d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053b0:	e1ff      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b6:	e1fc      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b8:	4b30      	ldr	r3, [pc, #192]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c4:	d107      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c6:	f107 0318 	add.w	r3, r7, #24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fa10 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053d4:	e1ed      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053da:	e1ea      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053dc:	4b27      	ldr	r3, [pc, #156]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ea:	f107 030c 	add.w	r3, r7, #12
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fb52 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f8:	e1db      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053fe:	e1d8      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005400:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005408:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800540a:	4b1c      	ldr	r3, [pc, #112]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d10c      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800541c:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	08db      	lsrs	r3, r3, #3
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542e:	e01e      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	d106      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005444:	d102      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005446:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544a:	e010      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005458:	d106      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005460:	d102      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005466:	e002      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800546c:	e1a1      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800546e:	e1a0      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005474:	e19d      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800547a:	e19a      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800547c:	58024400 	.word	0x58024400
 8005480:	03d09000 	.word	0x03d09000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	017d7840 	.word	0x017d7840
 800548c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005496:	d173      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005498:	4b9a      	ldr	r3, [pc, #616]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a8:	d02f      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b0:	d863      	bhi.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054be:	d012      	beq.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80054c0:	e05b      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054c2:	4b90      	ldr	r3, [pc, #576]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ce:	d107      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d0:	f107 0318 	add.w	r3, r7, #24
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f98b 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054de:	e168      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e4:	e165      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054e6:	4b87      	ldr	r3, [pc, #540]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f2:	d107      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054f4:	f107 030c 	add.w	r3, r7, #12
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 facd 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005502:	e156      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005508:	e153      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800550a:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800550c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005512:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005514:	4b7b      	ldr	r3, [pc, #492]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005526:	4b77      	ldr	r3, [pc, #476]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	08db      	lsrs	r3, r3, #3
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	4a75      	ldr	r2, [pc, #468]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	e01e      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800553a:	4b72      	ldr	r3, [pc, #456]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554e:	d102      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005550:	4b6e      	ldr	r3, [pc, #440]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005554:	e010      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005556:	4b6b      	ldr	r3, [pc, #428]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005562:	d106      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556a:	d102      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005570:	e002      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005576:	e11c      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005578:	e11b      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800557e:	e118      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005586:	d133      	bne.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005588:	4b5e      	ldr	r3, [pc, #376]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800558a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559e:	d012      	beq.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80055a0:	e023      	b.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055a2:	4b58      	ldr	r3, [pc, #352]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ae:	d107      	bne.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fbc3 	bl	8005d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055be:	e0f8      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055c4:	e0f5      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055c6:	4b4f      	ldr	r3, [pc, #316]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d2:	d107      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d4:	f107 0318 	add.w	r3, r7, #24
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f909 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055e2:	e0e6      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055e8:	e0e3      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ee:	e0e0      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	f040 808d 	bne.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80055fa:	4b42      	ldr	r3, [pc, #264]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800560a:	d06b      	beq.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005612:	d874      	bhi.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561a:	d056      	beq.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d86c      	bhi.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800562a:	d03b      	beq.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005632:	d864      	bhi.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800563a:	d021      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005642:	d85c      	bhi.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005650:	d004      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005652:	e054      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005654:	f000 f8b6 	bl	80057c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005658:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800565a:	e0aa      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005668:	d107      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800566a:	f107 0318 	add.w	r3, r7, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f8be 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005678:	e09b      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800567e:	e098      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005680:	4b20      	ldr	r3, [pc, #128]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568c:	d107      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800568e:	f107 030c 	add.w	r3, r7, #12
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fa00 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800569c:	e089      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a2:	e086      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d109      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056b0:	4b14      	ldr	r3, [pc, #80]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	08db      	lsrs	r3, r3, #3
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056c2:	e076      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c8:	e073      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80056ca:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d102      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056dc:	e069      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e2:	e066      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f0:	d102      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056f6:	e05c      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056fc:	e059      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005702:	e056      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005704:	58024400 	.word	0x58024400
 8005708:	03d09000 	.word	0x03d09000
 800570c:	003d0900 	.word	0x003d0900
 8005710:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571a:	d148      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800571c:	4b27      	ldr	r3, [pc, #156]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005724:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572c:	d02a      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005734:	d838      	bhi.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005742:	d00d      	beq.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005744:	e030      	b.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005752:	d102      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005754:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005758:	e02b      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800575e:	e028      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005760:	4b16      	ldr	r3, [pc, #88]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800576c:	d107      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800576e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fae4 	bl	8005d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800577c:	e019      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005782:	e016      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005784:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005792:	f107 0318 	add.w	r3, r7, #24
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f82a 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057a0:	e007      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a6:	e004      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ac:	e001      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3740      	adds	r7, #64	; 0x40
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	58024400 	.word	0x58024400
 80057c0:	017d7840 	.word	0x017d7840

080057c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057c8:	f7fe fc82 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	091b      	lsrs	r3, r3, #4
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	4904      	ldr	r1, [pc, #16]	; (80057ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057da:	5ccb      	ldrb	r3, [r1, r3]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	58024400 	.word	0x58024400
 80057ec:	0800a820 	.word	0x0800a820

080057f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b089      	sub	sp, #36	; 0x24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057f8:	4ba1      	ldr	r3, [pc, #644]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005802:	4b9f      	ldr	r3, [pc, #636]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	0b1b      	lsrs	r3, r3, #12
 8005808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800580c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800580e:	4b9c      	ldr	r3, [pc, #624]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	091b      	lsrs	r3, r3, #4
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800581a:	4b99      	ldr	r3, [pc, #612]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8111 	beq.w	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b02      	cmp	r3, #2
 8005842:	f000 8083 	beq.w	800594c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b02      	cmp	r3, #2
 800584a:	f200 80a1 	bhi.w	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d056      	beq.n	8005908 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800585a:	e099      	b.n	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800585c:	4b88      	ldr	r3, [pc, #544]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02d      	beq.n	80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005868:	4b85      	ldr	r3, [pc, #532]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	08db      	lsrs	r3, r3, #3
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	4a84      	ldr	r2, [pc, #528]	; (8005a84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
 8005878:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	ee07 3a90 	vmov	s15, r3
 8005880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005892:	4b7b      	ldr	r3, [pc, #492]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058c2:	e087      	b.n	80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d6:	4b6a      	ldr	r3, [pc, #424]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005906:	e065      	b.n	80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b59      	ldr	r3, [pc, #356]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a03 	vldr	s12, [r7, #12]
 800592e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594a:	e043      	b.n	80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800595a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595e:	4b48      	ldr	r3, [pc, #288]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005972:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800598e:	e021      	b.n	80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a2:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80059d4:	4b2a      	ldr	r3, [pc, #168]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	0a5b      	lsrs	r3, r3, #9
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059fa:	ee17 2a90 	vmov	r2, s15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a02:	4b1f      	ldr	r3, [pc, #124]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a28:	ee17 2a90 	vmov	r2, s15
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a30:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a56:	ee17 2a90 	vmov	r2, s15
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a5e:	e008      	b.n	8005a72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	609a      	str	r2, [r3, #8]
}
 8005a72:	bf00      	nop
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400
 8005a84:	03d09000 	.word	0x03d09000
 8005a88:	46000000 	.word	0x46000000
 8005a8c:	4c742400 	.word	0x4c742400
 8005a90:	4a742400 	.word	0x4a742400
 8005a94:	4bbebc20 	.word	0x4bbebc20

08005a98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b089      	sub	sp, #36	; 0x24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa0:	4ba1      	ldr	r3, [pc, #644]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005aaa:	4b9f      	ldr	r3, [pc, #636]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	0d1b      	lsrs	r3, r3, #20
 8005ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ab6:	4b9c      	ldr	r3, [pc, #624]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ac2:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8111 	beq.w	8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	f000 8083 	beq.w	8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f200 80a1 	bhi.w	8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d056      	beq.n	8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b02:	e099      	b.n	8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b04:	4b88      	ldr	r3, [pc, #544]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02d      	beq.n	8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b10:	4b85      	ldr	r3, [pc, #532]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	4a84      	ldr	r2, [pc, #528]	; (8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b6a:	e087      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b6a      	ldr	r3, [pc, #424]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bae:	e065      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b59      	ldr	r3, [pc, #356]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bf2:	e043      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b48      	ldr	r3, [pc, #288]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c36:	e021      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b37      	ldr	r3, [pc, #220]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005c7c:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	0a5b      	lsrs	r3, r3, #9
 8005c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca2:	ee17 2a90 	vmov	r2, s15
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005caa:	4b1f      	ldr	r3, [pc, #124]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	0c1b      	lsrs	r3, r3, #16
 8005cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd0:	ee17 2a90 	vmov	r2, s15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	0e1b      	lsrs	r3, r3, #24
 8005cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfe:	ee17 2a90 	vmov	r2, s15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d06:	e008      	b.n	8005d1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
}
 8005d1a:	bf00      	nop
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400
 8005d2c:	03d09000 	.word	0x03d09000
 8005d30:	46000000 	.word	0x46000000
 8005d34:	4c742400 	.word	0x4c742400
 8005d38:	4a742400 	.word	0x4a742400
 8005d3c:	4bbebc20 	.word	0x4bbebc20

08005d40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d48:	4ba0      	ldr	r3, [pc, #640]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005d52:	4b9e      	ldr	r3, [pc, #632]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d5e:	4b9b      	ldr	r3, [pc, #620]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d68:	4b98      	ldr	r3, [pc, #608]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	08db      	lsrs	r3, r3, #3
 8005d6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	fb02 f303 	mul.w	r3, r2, r3
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8111 	beq.w	8005fae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	f000 8083 	beq.w	8005e9a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	f200 80a1 	bhi.w	8005ede <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d056      	beq.n	8005e56 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005da8:	e099      	b.n	8005ede <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005daa:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02d      	beq.n	8005e12 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005db6:	4b85      	ldr	r3, [pc, #532]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	4a83      	ldr	r2, [pc, #524]	; (8005fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de0:	4b7a      	ldr	r3, [pc, #488]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e10:	e087      	b.n	8005f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e24:	4b69      	ldr	r3, [pc, #420]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e38:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e54:	e065      	b.n	8005f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005fdc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e68:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e98:	e043      	b.n	8005f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eac:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005edc:	e021      	b.n	8005f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef0:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f00:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f04:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f20:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005f22:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	0a5b      	lsrs	r3, r3, #9
 8005f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f48:	ee17 2a90 	vmov	r2, s15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005f50:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005f7e:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	0e1b      	lsrs	r3, r3, #24
 8005f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa4:	ee17 2a90 	vmov	r2, s15
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005fac:	e008      	b.n	8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	bf00      	nop
 8005fc2:	3724      	adds	r7, #36	; 0x24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	46000000 	.word	0x46000000
 8005fd8:	4c742400 	.word	0x4c742400
 8005fdc:	4a742400 	.word	0x4a742400
 8005fe0:	4bbebc20 	.word	0x4bbebc20

08005fe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ff2:	4b53      	ldr	r3, [pc, #332]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d101      	bne.n	8006002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e099      	b.n	8006136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006002:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a4e      	ldr	r2, [pc, #312]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800600c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600e:	f7fa fb81 	bl	8000714 <HAL_GetTick>
 8006012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006014:	e008      	b.n	8006028 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006016:	f7fa fb7d 	bl	8000714 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e086      	b.n	8006136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006034:	4b42      	ldr	r3, [pc, #264]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	493f      	ldr	r1, [pc, #252]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	628b      	str	r3, [r1, #40]	; 0x28
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	3b01      	subs	r3, #1
 800604e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	3b01      	subs	r3, #1
 8006058:	025b      	lsls	r3, r3, #9
 800605a:	b29b      	uxth	r3, r3
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	3b01      	subs	r3, #1
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	3b01      	subs	r3, #1
 8006072:	061b      	lsls	r3, r3, #24
 8006074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006078:	4931      	ldr	r1, [pc, #196]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800607e:	4b30      	ldr	r3, [pc, #192]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	492d      	ldr	r1, [pc, #180]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800608c:	4313      	orrs	r3, r2
 800608e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	f023 0220 	bic.w	r2, r3, #32
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4928      	ldr	r1, [pc, #160]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060a2:	4b27      	ldr	r3, [pc, #156]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	4a26      	ldr	r2, [pc, #152]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060ae:	4b24      	ldr	r3, [pc, #144]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <RCCEx_PLL2_Config+0x160>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	69d2      	ldr	r2, [r2, #28]
 80060ba:	00d2      	lsls	r2, r2, #3
 80060bc:	4920      	ldr	r1, [pc, #128]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060c2:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	f043 0310 	orr.w	r3, r3, #16
 80060cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060e0:	e00f      	b.n	8006102 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060f4:	e005      	b.n	8006102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 8006108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800610c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610e:	f7fa fb01 	bl	8000714 <HAL_GetTick>
 8006112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006114:	e008      	b.n	8006128 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006116:	f7fa fafd 	bl	8000714 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <RCCEx_PLL2_Config+0x15c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
 8006144:	ffff0007 	.word	0xffff0007

08006148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006156:	4b53      	ldr	r3, [pc, #332]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d101      	bne.n	8006166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e099      	b.n	800629a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006166:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4e      	ldr	r2, [pc, #312]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006172:	f7fa facf 	bl	8000714 <HAL_GetTick>
 8006176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006178:	e008      	b.n	800618c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800617a:	f7fa facb 	bl	8000714 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e086      	b.n	800629a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800618c:	4b45      	ldr	r3, [pc, #276]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006198:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	051b      	lsls	r3, r3, #20
 80061a6:	493f      	ldr	r1, [pc, #252]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	628b      	str	r3, [r1, #40]	; 0x28
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	025b      	lsls	r3, r3, #9
 80061be:	b29b      	uxth	r3, r3
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061dc:	4931      	ldr	r1, [pc, #196]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061e2:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	492d      	ldr	r1, [pc, #180]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061f4:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4928      	ldr	r1, [pc, #160]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006206:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	4a26      	ldr	r2, [pc, #152]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800620c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <RCCEx_PLL3_Config+0x160>)
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	69d2      	ldr	r2, [r2, #28]
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	4920      	ldr	r1, [pc, #128]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800622c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800623e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006244:	e00f      	b.n	8006266 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800624c:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006258:	e005      	b.n	8006266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006272:	f7fa fa4f 	bl	8000714 <HAL_GetTick>
 8006276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006278:	e008      	b.n	800628c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800627a:	f7fa fa4b 	bl	8000714 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e006      	b.n	800629a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <RCCEx_PLL3_Config+0x15c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
 80062a8:	ffff0007 	.word	0xffff0007

080062ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e1fb      	b.n	80066b6 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d113      	bne.n	80062f0 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a96      	ldr	r2, [pc, #600]	; (8006528 <HAL_SAI_Init+0x27c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_SAI_Init+0x30>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a95      	ldr	r2, [pc, #596]	; (800652c <HAL_SAI_Init+0x280>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d107      	bne.n	80062ec <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d103      	bne.n	80062ec <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e1e2      	b.n	80066b6 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a8c      	ldr	r2, [pc, #560]	; (8006528 <HAL_SAI_Init+0x27c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <HAL_SAI_Init+0x58>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a8c      	ldr	r2, [pc, #560]	; (8006530 <HAL_SAI_Init+0x284>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d102      	bne.n	800630a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006304:	4b8b      	ldr	r3, [pc, #556]	; (8006534 <HAL_SAI_Init+0x288>)
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e00e      	b.n	8006328 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a87      	ldr	r2, [pc, #540]	; (800652c <HAL_SAI_Init+0x280>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_SAI_Init+0x72>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a87      	ldr	r2, [pc, #540]	; (8006538 <HAL_SAI_Init+0x28c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d102      	bne.n	8006324 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800631e:	4b87      	ldr	r3, [pc, #540]	; (800653c <HAL_SAI_Init+0x290>)
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e001      	b.n	8006328 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e1c6      	b.n	80066b6 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 ffe7 	bl	8008310 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fab0 	bl	80068a8 <SAI_Disable>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1b1      	b.n	80066b6 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d00c      	beq.n	800637c <HAL_SAI_Init+0xd0>
 8006362:	2b02      	cmp	r3, #2
 8006364:	d80d      	bhi.n	8006382 <HAL_SAI_Init+0xd6>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_SAI_Init+0xc4>
 800636a:	2b01      	cmp	r3, #1
 800636c:	d003      	beq.n	8006376 <HAL_SAI_Init+0xca>
 800636e:	e008      	b.n	8006382 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006374:	e008      	b.n	8006388 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006376:	2310      	movs	r3, #16
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800637a:	e005      	b.n	8006388 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800637c:	2320      	movs	r3, #32
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006380:	e002      	b.n	8006388 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006386:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b05      	cmp	r3, #5
 800638e:	d822      	bhi.n	80063d6 <HAL_SAI_Init+0x12a>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <HAL_SAI_Init+0xec>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b7 	.word	0x080063b7
 80063a0:	080063bf 	.word	0x080063bf
 80063a4:	080063d7 	.word	0x080063d7
 80063a8:	080063d7 	.word	0x080063d7
 80063ac:	080063c7 	.word	0x080063c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
      break;
 80063b4:	e012      	b.n	80063dc <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80063b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ba:	61fb      	str	r3, [r7, #28]
      break;
 80063bc:	e00e      	b.n	80063dc <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063c2:	61fb      	str	r3, [r7, #28]
      break;
 80063c4:	e00a      	b.n	80063dc <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	f043 0303 	orr.w	r3, r3, #3
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80063d4:	e002      	b.n	80063dc <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
      break;
 80063da:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8084 	beq.w	80064f4 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a4c      	ldr	r2, [pc, #304]	; (8006528 <HAL_SAI_Init+0x27c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_SAI_Init+0x158>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a4c      	ldr	r2, [pc, #304]	; (8006530 <HAL_SAI_Init+0x284>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d104      	bne.n	800640e <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006404:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006408:	f7fe fdb8 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 800640c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a46      	ldr	r2, [pc, #280]	; (800652c <HAL_SAI_Init+0x280>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d104      	bne.n	8006422 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006418:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800641c:	f7fe fdae 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8006420:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a44      	ldr	r2, [pc, #272]	; (8006538 <HAL_SAI_Init+0x28c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d104      	bne.n	8006436 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800642c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006430:	f7fe fda4 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8006434:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800643e:	d120      	bne.n	8006482 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006444:	2b04      	cmp	r3, #4
 8006446:	d102      	bne.n	800644e <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006448:	2340      	movs	r3, #64	; 0x40
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e00a      	b.n	8006464 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	2b08      	cmp	r3, #8
 8006454:	d103      	bne.n	800645e <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e002      	b.n	8006464 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4619      	mov	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	fbb1 f3f3 	udiv	r3, r1, r3
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	e017      	b.n	80064b2 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800648a:	d101      	bne.n	8006490 <HAL_SAI_Init+0x1e4>
 800648c:	2302      	movs	r3, #2
 800648e:	e000      	b.n	8006492 <HAL_SAI_Init+0x1e6>
 8006490:	2301      	movs	r3, #1
 8006492:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	4619      	mov	r1, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4a22      	ldr	r2, [pc, #136]	; (8006540 <HAL_SAI_Init+0x294>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	08da      	lsrs	r2, r3, #3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80064c0:	6939      	ldr	r1, [r7, #16]
 80064c2:	4b1f      	ldr	r3, [pc, #124]	; (8006540 <HAL_SAI_Init+0x294>)
 80064c4:	fba3 2301 	umull	r2, r3, r3, r1
 80064c8:	08da      	lsrs	r2, r3, #3
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	1aca      	subs	r2, r1, r3
 80064d4:	2a08      	cmp	r2, #8
 80064d6:	d904      	bls.n	80064e2 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d104      	bne.n	80064f4 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	085a      	lsrs	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_SAI_Init+0x258>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d109      	bne.n	8006518 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_SAI_Init+0x264>
 800650c:	2300      	movs	r3, #0
 800650e:	e001      	b.n	8006514 <HAL_SAI_Init+0x268>
 8006510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	e017      	b.n	8006548 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	2b01      	cmp	r3, #1
 800651e:	d111      	bne.n	8006544 <HAL_SAI_Init+0x298>
 8006520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006524:	e00f      	b.n	8006546 <HAL_SAI_Init+0x29a>
 8006526:	bf00      	nop
 8006528:	40015804 	.word	0x40015804
 800652c:	58005404 	.word	0x58005404
 8006530:	40015824 	.word	0x40015824
 8006534:	40015800 	.word	0x40015800
 8006538:	58005424 	.word	0x58005424
 800653c:	58005400 	.word	0x58005400
 8006540:	cccccccd 	.word	0xcccccccd
 8006544:	2300      	movs	r3, #0
 8006546:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b5b      	ldr	r3, [pc, #364]	; (80066c0 <HAL_SAI_Init+0x414>)
 8006554:	400b      	ands	r3, r1
 8006556:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6819      	ldr	r1, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800656c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	431a      	orrs	r2, r3
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006580:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800658c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	051b      	lsls	r3, r3, #20
 8006594:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800659a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b43      	ldr	r3, [pc, #268]	; (80066c4 <HAL_SAI_Init+0x418>)
 80065b6:	400b      	ands	r3, r1
 80065b8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6859      	ldr	r1, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6899      	ldr	r1, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <HAL_SAI_Init+0x41c>)
 80065e4:	400b      	ands	r3, r1
 80065e6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6899      	ldr	r1, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80065f8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80065fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006604:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660a:	3b01      	subs	r3, #1
 800660c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800660e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006626:	400b      	ands	r3, r1
 8006628:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68d9      	ldr	r1, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006638:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006640:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	3b01      	subs	r3, #1
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <HAL_SAI_Init+0x420>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_SAI_Init+0x3bc>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <HAL_SAI_Init+0x424>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d119      	bne.n	800669c <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666c:	f023 0201 	bic.w	r2, r3, #1
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10e      	bne.n	800669c <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	3b01      	subs	r3, #1
 8006688:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800668a:	431a      	orrs	r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	f043 0201 	orr.w	r2, r3, #1
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	f005c010 	.word	0xf005c010
 80066c4:	ffff1ff0 	.word	0xffff1ff0
 80066c8:	fff88000 	.word	0xfff88000
 80066cc:	40015804 	.word	0x40015804
 80066d0:	58005404 	.word	0x58005404

080066d4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_SAI_Receive_DMA+0x1a>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e079      	b.n	80067e6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d172      	bne.n	80067e4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_SAI_Receive_DMA+0x38>
 8006708:	2302      	movs	r3, #2
 800670a:	e06c      	b.n	80067e6 <HAL_SAI_Receive_DMA+0x112>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2222      	movs	r2, #34	; 0x22
 8006736:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006740:	4a2b      	ldr	r2, [pc, #172]	; (80067f0 <HAL_SAI_Receive_DMA+0x11c>)
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674a:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <HAL_SAI_Receive_DMA+0x120>)
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <HAL_SAI_Receive_DMA+0x124>)
 8006756:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675e:	2200      	movs	r2, #0
 8006760:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	331c      	adds	r3, #28
 800676e:	4619      	mov	r1, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006774:	461a      	mov	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800677c:	f7fa fd2a 	bl	80011d4 <HAL_DMA_Start_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e029      	b.n	80067e6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006792:	2100      	movs	r1, #0
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f84f 	bl	8006838 <SAI_InterruptFlag>
 800679a:	4601      	mov	r1, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80067b8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80067d6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e000      	b.n	80067e6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
  }
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	0800697d 	.word	0x0800697d
 80067f4:	0800691d 	.word	0x0800691d
 80067f8:	08006999 	.word	0x08006999

080067fc <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006844:	2301      	movs	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d103      	bne.n	8006856 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f043 0308 	orr.w	r3, r3, #8
 8006854:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	2b08      	cmp	r3, #8
 800685c:	d10b      	bne.n	8006876 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006862:	2b03      	cmp	r3, #3
 8006864:	d003      	beq.n	800686e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d103      	bne.n	8006876 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f043 0310 	orr.w	r3, r3, #16
 8006874:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d003      	beq.n	8006886 <SAI_InterruptFlag+0x4e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d104      	bne.n	8006890 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e003      	b.n	8006898 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f043 0304 	orr.w	r3, r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006898:	68fb      	ldr	r3, [r7, #12]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80068b0:	4b18      	ldr	r3, [pc, #96]	; (8006914 <SAI_Disable+0x6c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a18      	ldr	r2, [pc, #96]	; (8006918 <SAI_Disable+0x70>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0b1b      	lsrs	r3, r3, #12
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	72fb      	strb	r3, [r7, #11]
      break;
 80068ee:	e009      	b.n	8006904 <SAI_Disable+0x5c>
    }
    count--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e7      	bne.n	80068d4 <SAI_Disable+0x2c>

  return status;
 8006904:	7afb      	ldrb	r3, [r7, #11]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	24000408 	.word	0x24000408
 8006918:	95cbec1b 	.word	0x95cbec1b

0800691c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006932:	d01c      	beq.n	800696e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006942:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff72 	bl	8006838 <SAI_InterruptFlag>
 8006954:	4603      	mov	r3, r0
 8006956:	43d9      	mvns	r1, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	400a      	ands	r2, r1
 8006964:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff44 	bl	80067fc <HAL_SAI_RxCpltCallback>
#endif
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff ff40 	bl	8006810 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fb fda8 	bl	80024fc <HAL_DMA_GetError>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d01d      	beq.n	80069ee <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80069d0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff ff68 	bl	80068a8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff ff1b 	bl	8006824 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e042      	b.n	8006a8e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fc12 	bl	8008244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	; 0x24
 8006a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f82d 	bl	8006a98 <UART_SetConfig>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e022      	b.n	8006a8e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fe7f 	bl	8007754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 ff06 	bl	8007898 <UART_CheckIdleState>
 8006a8c:	4603      	mov	r3, r0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a98:	b5b0      	push	{r4, r5, r7, lr}
 8006a9a:	b08e      	sub	sp, #56	; 0x38
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4bbf      	ldr	r3, [pc, #764]	; (8006dc4 <UART_SetConfig+0x32c>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4ab5      	ldr	r2, [pc, #724]	; (8006dc8 <UART_SetConfig+0x330>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006afe:	4313      	orrs	r3, r2
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	4bb0      	ldr	r3, [pc, #704]	; (8006dcc <UART_SetConfig+0x334>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	f023 010f 	bic.w	r1, r3, #15
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4aa7      	ldr	r2, [pc, #668]	; (8006dd0 <UART_SetConfig+0x338>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d176      	bne.n	8006c24 <UART_SetConfig+0x18c>
 8006b36:	4ba7      	ldr	r3, [pc, #668]	; (8006dd4 <UART_SetConfig+0x33c>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b3e:	2b28      	cmp	r3, #40	; 0x28
 8006b40:	d86c      	bhi.n	8006c1c <UART_SetConfig+0x184>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0xb0>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006c1d 	.word	0x08006c1d
 8006b50:	08006c1d 	.word	0x08006c1d
 8006b54:	08006c1d 	.word	0x08006c1d
 8006b58:	08006c1d 	.word	0x08006c1d
 8006b5c:	08006c1d 	.word	0x08006c1d
 8006b60:	08006c1d 	.word	0x08006c1d
 8006b64:	08006c1d 	.word	0x08006c1d
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006c1d 	.word	0x08006c1d
 8006b70:	08006c1d 	.word	0x08006c1d
 8006b74:	08006c1d 	.word	0x08006c1d
 8006b78:	08006c1d 	.word	0x08006c1d
 8006b7c:	08006c1d 	.word	0x08006c1d
 8006b80:	08006c1d 	.word	0x08006c1d
 8006b84:	08006c1d 	.word	0x08006c1d
 8006b88:	08006bfd 	.word	0x08006bfd
 8006b8c:	08006c1d 	.word	0x08006c1d
 8006b90:	08006c1d 	.word	0x08006c1d
 8006b94:	08006c1d 	.word	0x08006c1d
 8006b98:	08006c1d 	.word	0x08006c1d
 8006b9c:	08006c1d 	.word	0x08006c1d
 8006ba0:	08006c1d 	.word	0x08006c1d
 8006ba4:	08006c1d 	.word	0x08006c1d
 8006ba8:	08006c05 	.word	0x08006c05
 8006bac:	08006c1d 	.word	0x08006c1d
 8006bb0:	08006c1d 	.word	0x08006c1d
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006c1d 	.word	0x08006c1d
 8006bbc:	08006c1d 	.word	0x08006c1d
 8006bc0:	08006c1d 	.word	0x08006c1d
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c0d 	.word	0x08006c0d
 8006bcc:	08006c1d 	.word	0x08006c1d
 8006bd0:	08006c1d 	.word	0x08006c1d
 8006bd4:	08006c1d 	.word	0x08006c1d
 8006bd8:	08006c1d 	.word	0x08006c1d
 8006bdc:	08006c1d 	.word	0x08006c1d
 8006be0:	08006c1d 	.word	0x08006c1d
 8006be4:	08006c1d 	.word	0x08006c1d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf2:	e326      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfa:	e322      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c02:	e31e      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0a:	e31a      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c12:	e316      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e312      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c1c:	2380      	movs	r3, #128	; 0x80
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e30e      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6b      	ldr	r2, [pc, #428]	; (8006dd8 <UART_SetConfig+0x340>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d130      	bne.n	8006c90 <UART_SetConfig+0x1f8>
 8006c2e:	4b69      	ldr	r3, [pc, #420]	; (8006dd4 <UART_SetConfig+0x33c>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d826      	bhi.n	8006c88 <UART_SetConfig+0x1f0>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0x1a8>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c59 	.word	0x08006c59
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	08006c69 	.word	0x08006c69
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c5e:	e2f0      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c60:	2304      	movs	r3, #4
 8006c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c66:	e2ec      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c6e:	e2e8      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c76:	e2e4      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c78:	2320      	movs	r3, #32
 8006c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7e:	e2e0      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c86:	e2dc      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8e:	e2d8      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a51      	ldr	r2, [pc, #324]	; (8006ddc <UART_SetConfig+0x344>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d130      	bne.n	8006cfc <UART_SetConfig+0x264>
 8006c9a:	4b4e      	ldr	r3, [pc, #312]	; (8006dd4 <UART_SetConfig+0x33c>)
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d826      	bhi.n	8006cf4 <UART_SetConfig+0x25c>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x214>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cc5 	.word	0x08006cc5
 8006cb0:	08006ccd 	.word	0x08006ccd
 8006cb4:	08006cd5 	.word	0x08006cd5
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cca:	e2ba      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cd2:	e2b6      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cda:	e2b2      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ce2:	e2ae      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cea:	e2aa      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cf2:	e2a6      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006cf4:	2380      	movs	r3, #128	; 0x80
 8006cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cfa:	e2a2      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a37      	ldr	r2, [pc, #220]	; (8006de0 <UART_SetConfig+0x348>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d130      	bne.n	8006d68 <UART_SetConfig+0x2d0>
 8006d06:	4b33      	ldr	r3, [pc, #204]	; (8006dd4 <UART_SetConfig+0x33c>)
 8006d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	d826      	bhi.n	8006d60 <UART_SetConfig+0x2c8>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <UART_SetConfig+0x280>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d31 	.word	0x08006d31
 8006d1c:	08006d39 	.word	0x08006d39
 8006d20:	08006d41 	.word	0x08006d41
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d51 	.word	0x08006d51
 8006d2c:	08006d59 	.word	0x08006d59
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d36:	e284      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e280      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e27c      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e278      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d50:	2320      	movs	r3, #32
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e274      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5e:	e270      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d66:	e26c      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <UART_SetConfig+0x34c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d142      	bne.n	8006df8 <UART_SetConfig+0x360>
 8006d72:	4b18      	ldr	r3, [pc, #96]	; (8006dd4 <UART_SetConfig+0x33c>)
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	d838      	bhi.n	8006df0 <UART_SetConfig+0x358>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x2ec>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d9d 	.word	0x08006d9d
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	08006dad 	.word	0x08006dad
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006de9 	.word	0x08006de9
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da2:	e24e      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006da4:	2304      	movs	r3, #4
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e24a      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006dac:	2308      	movs	r3, #8
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e246      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006db4:	2310      	movs	r3, #16
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e242      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006dbc:	2320      	movs	r3, #32
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e23e      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006dc4:	cfff69f3 	.word	0xcfff69f3
 8006dc8:	58000c00 	.word	0x58000c00
 8006dcc:	11fff4ff 	.word	0x11fff4ff
 8006dd0:	40011000 	.word	0x40011000
 8006dd4:	58024400 	.word	0x58024400
 8006dd8:	40004400 	.word	0x40004400
 8006ddc:	40004800 	.word	0x40004800
 8006de0:	40004c00 	.word	0x40004c00
 8006de4:	40005000 	.word	0x40005000
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dee:	e228      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df6:	e224      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4ab1      	ldr	r2, [pc, #708]	; (80070c4 <UART_SetConfig+0x62c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d176      	bne.n	8006ef0 <UART_SetConfig+0x458>
 8006e02:	4bb1      	ldr	r3, [pc, #708]	; (80070c8 <UART_SetConfig+0x630>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0a:	2b28      	cmp	r3, #40	; 0x28
 8006e0c:	d86c      	bhi.n	8006ee8 <UART_SetConfig+0x450>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <UART_SetConfig+0x37c>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006eb9 	.word	0x08006eb9
 8006e18:	08006ee9 	.word	0x08006ee9
 8006e1c:	08006ee9 	.word	0x08006ee9
 8006e20:	08006ee9 	.word	0x08006ee9
 8006e24:	08006ee9 	.word	0x08006ee9
 8006e28:	08006ee9 	.word	0x08006ee9
 8006e2c:	08006ee9 	.word	0x08006ee9
 8006e30:	08006ee9 	.word	0x08006ee9
 8006e34:	08006ec1 	.word	0x08006ec1
 8006e38:	08006ee9 	.word	0x08006ee9
 8006e3c:	08006ee9 	.word	0x08006ee9
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006ee9 	.word	0x08006ee9
 8006e48:	08006ee9 	.word	0x08006ee9
 8006e4c:	08006ee9 	.word	0x08006ee9
 8006e50:	08006ee9 	.word	0x08006ee9
 8006e54:	08006ec9 	.word	0x08006ec9
 8006e58:	08006ee9 	.word	0x08006ee9
 8006e5c:	08006ee9 	.word	0x08006ee9
 8006e60:	08006ee9 	.word	0x08006ee9
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006ee9 	.word	0x08006ee9
 8006e6c:	08006ee9 	.word	0x08006ee9
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006ed1 	.word	0x08006ed1
 8006e78:	08006ee9 	.word	0x08006ee9
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006ee9 	.word	0x08006ee9
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08006ee9 	.word	0x08006ee9
 8006e8c:	08006ee9 	.word	0x08006ee9
 8006e90:	08006ee9 	.word	0x08006ee9
 8006e94:	08006ed9 	.word	0x08006ed9
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006ee9 	.word	0x08006ee9
 8006ea0:	08006ee9 	.word	0x08006ee9
 8006ea4:	08006ee9 	.word	0x08006ee9
 8006ea8:	08006ee9 	.word	0x08006ee9
 8006eac:	08006ee9 	.word	0x08006ee9
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ebe:	e1c0      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ec6:	e1bc      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ece:	e1b8      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ed6:	e1b4      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ede:	e1b0      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ee0:	2340      	movs	r3, #64	; 0x40
 8006ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ee6:	e1ac      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ee8:	2380      	movs	r3, #128	; 0x80
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eee:	e1a8      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a75      	ldr	r2, [pc, #468]	; (80070cc <UART_SetConfig+0x634>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d130      	bne.n	8006f5c <UART_SetConfig+0x4c4>
 8006efa:	4b73      	ldr	r3, [pc, #460]	; (80070c8 <UART_SetConfig+0x630>)
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d826      	bhi.n	8006f54 <UART_SetConfig+0x4bc>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <UART_SetConfig+0x474>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f45 	.word	0x08006f45
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2a:	e18a      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f32:	e186      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3a:	e182      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f42:	e17e      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f44:	2320      	movs	r3, #32
 8006f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f4a:	e17a      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f52:	e176      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f5a:	e172      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5b      	ldr	r2, [pc, #364]	; (80070d0 <UART_SetConfig+0x638>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d130      	bne.n	8006fc8 <UART_SetConfig+0x530>
 8006f66:	4b58      	ldr	r3, [pc, #352]	; (80070c8 <UART_SetConfig+0x630>)
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b05      	cmp	r3, #5
 8006f70:	d826      	bhi.n	8006fc0 <UART_SetConfig+0x528>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0x4e0>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	e154      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e150      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa6:	e14c      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fae:	e148      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb6:	e144      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fbe:	e140      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc6:	e13c      	b.n	8007242 <UART_SetConfig+0x7aa>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a41      	ldr	r2, [pc, #260]	; (80070d4 <UART_SetConfig+0x63c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	f040 8082 	bne.w	80070d8 <UART_SetConfig+0x640>
 8006fd4:	4b3c      	ldr	r3, [pc, #240]	; (80070c8 <UART_SetConfig+0x630>)
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fdc:	2b28      	cmp	r3, #40	; 0x28
 8006fde:	d86d      	bhi.n	80070bc <UART_SetConfig+0x624>
 8006fe0:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <UART_SetConfig+0x550>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	0800708d 	.word	0x0800708d
 8006fec:	080070bd 	.word	0x080070bd
 8006ff0:	080070bd 	.word	0x080070bd
 8006ff4:	080070bd 	.word	0x080070bd
 8006ff8:	080070bd 	.word	0x080070bd
 8006ffc:	080070bd 	.word	0x080070bd
 8007000:	080070bd 	.word	0x080070bd
 8007004:	080070bd 	.word	0x080070bd
 8007008:	08007095 	.word	0x08007095
 800700c:	080070bd 	.word	0x080070bd
 8007010:	080070bd 	.word	0x080070bd
 8007014:	080070bd 	.word	0x080070bd
 8007018:	080070bd 	.word	0x080070bd
 800701c:	080070bd 	.word	0x080070bd
 8007020:	080070bd 	.word	0x080070bd
 8007024:	080070bd 	.word	0x080070bd
 8007028:	0800709d 	.word	0x0800709d
 800702c:	080070bd 	.word	0x080070bd
 8007030:	080070bd 	.word	0x080070bd
 8007034:	080070bd 	.word	0x080070bd
 8007038:	080070bd 	.word	0x080070bd
 800703c:	080070bd 	.word	0x080070bd
 8007040:	080070bd 	.word	0x080070bd
 8007044:	080070bd 	.word	0x080070bd
 8007048:	080070a5 	.word	0x080070a5
 800704c:	080070bd 	.word	0x080070bd
 8007050:	080070bd 	.word	0x080070bd
 8007054:	080070bd 	.word	0x080070bd
 8007058:	080070bd 	.word	0x080070bd
 800705c:	080070bd 	.word	0x080070bd
 8007060:	080070bd 	.word	0x080070bd
 8007064:	080070bd 	.word	0x080070bd
 8007068:	080070ad 	.word	0x080070ad
 800706c:	080070bd 	.word	0x080070bd
 8007070:	080070bd 	.word	0x080070bd
 8007074:	080070bd 	.word	0x080070bd
 8007078:	080070bd 	.word	0x080070bd
 800707c:	080070bd 	.word	0x080070bd
 8007080:	080070bd 	.word	0x080070bd
 8007084:	080070bd 	.word	0x080070bd
 8007088:	080070b5 	.word	0x080070b5
 800708c:	2301      	movs	r3, #1
 800708e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007092:	e0d6      	b.n	8007242 <UART_SetConfig+0x7aa>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709a:	e0d2      	b.n	8007242 <UART_SetConfig+0x7aa>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a2:	e0ce      	b.n	8007242 <UART_SetConfig+0x7aa>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070aa:	e0ca      	b.n	8007242 <UART_SetConfig+0x7aa>
 80070ac:	2320      	movs	r3, #32
 80070ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b2:	e0c6      	b.n	8007242 <UART_SetConfig+0x7aa>
 80070b4:	2340      	movs	r3, #64	; 0x40
 80070b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ba:	e0c2      	b.n	8007242 <UART_SetConfig+0x7aa>
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c2:	e0be      	b.n	8007242 <UART_SetConfig+0x7aa>
 80070c4:	40011400 	.word	0x40011400
 80070c8:	58024400 	.word	0x58024400
 80070cc:	40007800 	.word	0x40007800
 80070d0:	40007c00 	.word	0x40007c00
 80070d4:	40011800 	.word	0x40011800
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4aad      	ldr	r2, [pc, #692]	; (8007394 <UART_SetConfig+0x8fc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d176      	bne.n	80071d0 <UART_SetConfig+0x738>
 80070e2:	4bad      	ldr	r3, [pc, #692]	; (8007398 <UART_SetConfig+0x900>)
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ea:	2b28      	cmp	r3, #40	; 0x28
 80070ec:	d86c      	bhi.n	80071c8 <UART_SetConfig+0x730>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0x65c>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007199 	.word	0x08007199
 80070f8:	080071c9 	.word	0x080071c9
 80070fc:	080071c9 	.word	0x080071c9
 8007100:	080071c9 	.word	0x080071c9
 8007104:	080071c9 	.word	0x080071c9
 8007108:	080071c9 	.word	0x080071c9
 800710c:	080071c9 	.word	0x080071c9
 8007110:	080071c9 	.word	0x080071c9
 8007114:	080071a1 	.word	0x080071a1
 8007118:	080071c9 	.word	0x080071c9
 800711c:	080071c9 	.word	0x080071c9
 8007120:	080071c9 	.word	0x080071c9
 8007124:	080071c9 	.word	0x080071c9
 8007128:	080071c9 	.word	0x080071c9
 800712c:	080071c9 	.word	0x080071c9
 8007130:	080071c9 	.word	0x080071c9
 8007134:	080071a9 	.word	0x080071a9
 8007138:	080071c9 	.word	0x080071c9
 800713c:	080071c9 	.word	0x080071c9
 8007140:	080071c9 	.word	0x080071c9
 8007144:	080071c9 	.word	0x080071c9
 8007148:	080071c9 	.word	0x080071c9
 800714c:	080071c9 	.word	0x080071c9
 8007150:	080071c9 	.word	0x080071c9
 8007154:	080071b1 	.word	0x080071b1
 8007158:	080071c9 	.word	0x080071c9
 800715c:	080071c9 	.word	0x080071c9
 8007160:	080071c9 	.word	0x080071c9
 8007164:	080071c9 	.word	0x080071c9
 8007168:	080071c9 	.word	0x080071c9
 800716c:	080071c9 	.word	0x080071c9
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071b9 	.word	0x080071b9
 8007178:	080071c9 	.word	0x080071c9
 800717c:	080071c9 	.word	0x080071c9
 8007180:	080071c9 	.word	0x080071c9
 8007184:	080071c9 	.word	0x080071c9
 8007188:	080071c9 	.word	0x080071c9
 800718c:	080071c9 	.word	0x080071c9
 8007190:	080071c9 	.word	0x080071c9
 8007194:	080071c1 	.word	0x080071c1
 8007198:	2301      	movs	r3, #1
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e050      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a6:	e04c      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	e048      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071b6:	e044      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071b8:	2320      	movs	r3, #32
 80071ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071be:	e040      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c6:	e03c      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071c8:	2380      	movs	r3, #128	; 0x80
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ce:	e038      	b.n	8007242 <UART_SetConfig+0x7aa>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a71      	ldr	r2, [pc, #452]	; (800739c <UART_SetConfig+0x904>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d130      	bne.n	800723c <UART_SetConfig+0x7a4>
 80071da:	4b6f      	ldr	r3, [pc, #444]	; (8007398 <UART_SetConfig+0x900>)
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d826      	bhi.n	8007234 <UART_SetConfig+0x79c>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <UART_SetConfig+0x754>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007205 	.word	0x08007205
 80071f0:	0800720d 	.word	0x0800720d
 80071f4:	08007215 	.word	0x08007215
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007225 	.word	0x08007225
 8007200:	0800722d 	.word	0x0800722d
 8007204:	2302      	movs	r3, #2
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720a:	e01a      	b.n	8007242 <UART_SetConfig+0x7aa>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007212:	e016      	b.n	8007242 <UART_SetConfig+0x7aa>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721a:	e012      	b.n	8007242 <UART_SetConfig+0x7aa>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007222:	e00e      	b.n	8007242 <UART_SetConfig+0x7aa>
 8007224:	2320      	movs	r3, #32
 8007226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722a:	e00a      	b.n	8007242 <UART_SetConfig+0x7aa>
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007232:	e006      	b.n	8007242 <UART_SetConfig+0x7aa>
 8007234:	2380      	movs	r3, #128	; 0x80
 8007236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723a:	e002      	b.n	8007242 <UART_SetConfig+0x7aa>
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a55      	ldr	r2, [pc, #340]	; (800739c <UART_SetConfig+0x904>)
 8007248:	4293      	cmp	r3, r2
 800724a:	f040 80f0 	bne.w	800742e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800724e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007252:	2b20      	cmp	r3, #32
 8007254:	dc46      	bgt.n	80072e4 <UART_SetConfig+0x84c>
 8007256:	2b02      	cmp	r3, #2
 8007258:	db75      	blt.n	8007346 <UART_SetConfig+0x8ae>
 800725a:	3b02      	subs	r3, #2
 800725c:	2b1e      	cmp	r3, #30
 800725e:	d872      	bhi.n	8007346 <UART_SetConfig+0x8ae>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x7d0>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	080072eb 	.word	0x080072eb
 800726c:	08007347 	.word	0x08007347
 8007270:	080072f3 	.word	0x080072f3
 8007274:	08007347 	.word	0x08007347
 8007278:	08007347 	.word	0x08007347
 800727c:	08007347 	.word	0x08007347
 8007280:	08007303 	.word	0x08007303
 8007284:	08007347 	.word	0x08007347
 8007288:	08007347 	.word	0x08007347
 800728c:	08007347 	.word	0x08007347
 8007290:	08007347 	.word	0x08007347
 8007294:	08007347 	.word	0x08007347
 8007298:	08007347 	.word	0x08007347
 800729c:	08007347 	.word	0x08007347
 80072a0:	08007313 	.word	0x08007313
 80072a4:	08007347 	.word	0x08007347
 80072a8:	08007347 	.word	0x08007347
 80072ac:	08007347 	.word	0x08007347
 80072b0:	08007347 	.word	0x08007347
 80072b4:	08007347 	.word	0x08007347
 80072b8:	08007347 	.word	0x08007347
 80072bc:	08007347 	.word	0x08007347
 80072c0:	08007347 	.word	0x08007347
 80072c4:	08007347 	.word	0x08007347
 80072c8:	08007347 	.word	0x08007347
 80072cc:	08007347 	.word	0x08007347
 80072d0:	08007347 	.word	0x08007347
 80072d4:	08007347 	.word	0x08007347
 80072d8:	08007347 	.word	0x08007347
 80072dc:	08007347 	.word	0x08007347
 80072e0:	08007339 	.word	0x08007339
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d02a      	beq.n	800733e <UART_SetConfig+0x8a6>
 80072e8:	e02d      	b.n	8007346 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80072ea:	f7fe fa6b 	bl	80057c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80072ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072f0:	e02f      	b.n	8007352 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f2:	f107 0314 	add.w	r3, r7, #20
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fa7a 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007300:	e027      	b.n	8007352 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fbc6 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007310:	e01f      	b.n	8007352 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007312:	4b21      	ldr	r3, [pc, #132]	; (8007398 <UART_SetConfig+0x900>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800731e:	4b1e      	ldr	r3, [pc, #120]	; (8007398 <UART_SetConfig+0x900>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <UART_SetConfig+0x908>)
 800732a:	fa22 f303 	lsr.w	r3, r2, r3
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007330:	e00f      	b.n	8007352 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8007332:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <UART_SetConfig+0x908>)
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007336:	e00c      	b.n	8007352 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007338:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <UART_SetConfig+0x90c>)
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 81e6 	beq.w	8007726 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	4a12      	ldr	r2, [pc, #72]	; (80073a8 <UART_SetConfig+0x910>)
 8007360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007364:	461a      	mov	r2, r3
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	fbb3 f3f2 	udiv	r3, r3, r2
 800736c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4413      	add	r3, r2
 8007378:	6a3a      	ldr	r2, [r7, #32]
 800737a:	429a      	cmp	r2, r3
 800737c:	d305      	bcc.n	800738a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007384:	6a3a      	ldr	r2, [r7, #32]
 8007386:	429a      	cmp	r2, r3
 8007388:	d910      	bls.n	80073ac <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007390:	e1c9      	b.n	8007726 <UART_SetConfig+0xc8e>
 8007392:	bf00      	nop
 8007394:	40011c00 	.word	0x40011c00
 8007398:	58024400 	.word	0x58024400
 800739c:	58000c00 	.word	0x58000c00
 80073a0:	03d09000 	.word	0x03d09000
 80073a4:	003d0900 	.word	0x003d0900
 80073a8:	0800a7f8 	.word	0x0800a7f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	4618      	mov	r0, r3
 80073b0:	f04f 0100 	mov.w	r1, #0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	4ac1      	ldr	r2, [pc, #772]	; (80076c0 <UART_SetConfig+0xc28>)
 80073ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	f7f8 ffa4 	bl	8000310 <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4610      	mov	r0, r2
 80073ce:	4619      	mov	r1, r3
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	020b      	lsls	r3, r1, #8
 80073da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073de:	0202      	lsls	r2, r0, #8
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	6849      	ldr	r1, [r1, #4]
 80073e4:	0849      	lsrs	r1, r1, #1
 80073e6:	4608      	mov	r0, r1
 80073e8:	f04f 0100 	mov.w	r1, #0
 80073ec:	1814      	adds	r4, r2, r0
 80073ee:	eb43 0501 	adc.w	r5, r3, r1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	f7f8 ff86 	bl	8000310 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4613      	mov	r3, r2
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007412:	d308      	bcc.n	8007426 <UART_SetConfig+0x98e>
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741a:	d204      	bcs.n	8007426 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007422:	60da      	str	r2, [r3, #12]
 8007424:	e17f      	b.n	8007726 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800742c:	e17b      	b.n	8007726 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007436:	f040 80bd 	bne.w	80075b4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800743a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800743e:	2b20      	cmp	r3, #32
 8007440:	dc48      	bgt.n	80074d4 <UART_SetConfig+0xa3c>
 8007442:	2b00      	cmp	r3, #0
 8007444:	db7b      	blt.n	800753e <UART_SetConfig+0xaa6>
 8007446:	2b20      	cmp	r3, #32
 8007448:	d879      	bhi.n	800753e <UART_SetConfig+0xaa6>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <UART_SetConfig+0x9b8>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	080074db 	.word	0x080074db
 8007454:	080074e3 	.word	0x080074e3
 8007458:	0800753f 	.word	0x0800753f
 800745c:	0800753f 	.word	0x0800753f
 8007460:	080074eb 	.word	0x080074eb
 8007464:	0800753f 	.word	0x0800753f
 8007468:	0800753f 	.word	0x0800753f
 800746c:	0800753f 	.word	0x0800753f
 8007470:	080074fb 	.word	0x080074fb
 8007474:	0800753f 	.word	0x0800753f
 8007478:	0800753f 	.word	0x0800753f
 800747c:	0800753f 	.word	0x0800753f
 8007480:	0800753f 	.word	0x0800753f
 8007484:	0800753f 	.word	0x0800753f
 8007488:	0800753f 	.word	0x0800753f
 800748c:	0800753f 	.word	0x0800753f
 8007490:	0800750b 	.word	0x0800750b
 8007494:	0800753f 	.word	0x0800753f
 8007498:	0800753f 	.word	0x0800753f
 800749c:	0800753f 	.word	0x0800753f
 80074a0:	0800753f 	.word	0x0800753f
 80074a4:	0800753f 	.word	0x0800753f
 80074a8:	0800753f 	.word	0x0800753f
 80074ac:	0800753f 	.word	0x0800753f
 80074b0:	0800753f 	.word	0x0800753f
 80074b4:	0800753f 	.word	0x0800753f
 80074b8:	0800753f 	.word	0x0800753f
 80074bc:	0800753f 	.word	0x0800753f
 80074c0:	0800753f 	.word	0x0800753f
 80074c4:	0800753f 	.word	0x0800753f
 80074c8:	0800753f 	.word	0x0800753f
 80074cc:	0800753f 	.word	0x0800753f
 80074d0:	08007531 	.word	0x08007531
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d02e      	beq.n	8007536 <UART_SetConfig+0xa9e>
 80074d8:	e031      	b.n	800753e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074da:	f7fc fe29 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 80074de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074e0:	e033      	b.n	800754a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e2:	f7fc fe3b 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 80074e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074e8:	e02f      	b.n	800754a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe f97e 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074f8:	e027      	b.n	800754a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe faca 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007508:	e01f      	b.n	800754a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800750a:	4b6e      	ldr	r3, [pc, #440]	; (80076c4 <UART_SetConfig+0xc2c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007516:	4b6b      	ldr	r3, [pc, #428]	; (80076c4 <UART_SetConfig+0xc2c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	08db      	lsrs	r3, r3, #3
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	4a69      	ldr	r2, [pc, #420]	; (80076c8 <UART_SetConfig+0xc30>)
 8007522:	fa22 f303 	lsr.w	r3, r2, r3
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007528:	e00f      	b.n	800754a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800752a:	4b67      	ldr	r3, [pc, #412]	; (80076c8 <UART_SetConfig+0xc30>)
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800752e:	e00c      	b.n	800754a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007530:	4b66      	ldr	r3, [pc, #408]	; (80076cc <UART_SetConfig+0xc34>)
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007534:	e009      	b.n	800754a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800753a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800753c:	e005      	b.n	800754a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80ea 	beq.w	8007726 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	4a5a      	ldr	r2, [pc, #360]	; (80076c0 <UART_SetConfig+0xc28>)
 8007558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755c:	461a      	mov	r2, r3
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	fbb3 f3f2 	udiv	r3, r3, r2
 8007564:	005a      	lsls	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	441a      	add	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	fbb2 f3f3 	udiv	r3, r2, r3
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d916      	bls.n	80075ac <UART_SetConfig+0xb14>
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007584:	d212      	bcs.n	80075ac <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	b29b      	uxth	r3, r3
 800758a:	f023 030f 	bic.w	r3, r3, #15
 800758e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	b29a      	uxth	r2, r3
 800759c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800759e:	4313      	orrs	r3, r2
 80075a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	e0bc      	b.n	8007726 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80075b2:	e0b8      	b.n	8007726 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	dc4b      	bgt.n	8007654 <UART_SetConfig+0xbbc>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f2c0 8087 	blt.w	80076d0 <UART_SetConfig+0xc38>
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	f200 8084 	bhi.w	80076d0 <UART_SetConfig+0xc38>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0xb38>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	0800765b 	.word	0x0800765b
 80075d4:	08007663 	.word	0x08007663
 80075d8:	080076d1 	.word	0x080076d1
 80075dc:	080076d1 	.word	0x080076d1
 80075e0:	0800766b 	.word	0x0800766b
 80075e4:	080076d1 	.word	0x080076d1
 80075e8:	080076d1 	.word	0x080076d1
 80075ec:	080076d1 	.word	0x080076d1
 80075f0:	0800767b 	.word	0x0800767b
 80075f4:	080076d1 	.word	0x080076d1
 80075f8:	080076d1 	.word	0x080076d1
 80075fc:	080076d1 	.word	0x080076d1
 8007600:	080076d1 	.word	0x080076d1
 8007604:	080076d1 	.word	0x080076d1
 8007608:	080076d1 	.word	0x080076d1
 800760c:	080076d1 	.word	0x080076d1
 8007610:	0800768b 	.word	0x0800768b
 8007614:	080076d1 	.word	0x080076d1
 8007618:	080076d1 	.word	0x080076d1
 800761c:	080076d1 	.word	0x080076d1
 8007620:	080076d1 	.word	0x080076d1
 8007624:	080076d1 	.word	0x080076d1
 8007628:	080076d1 	.word	0x080076d1
 800762c:	080076d1 	.word	0x080076d1
 8007630:	080076d1 	.word	0x080076d1
 8007634:	080076d1 	.word	0x080076d1
 8007638:	080076d1 	.word	0x080076d1
 800763c:	080076d1 	.word	0x080076d1
 8007640:	080076d1 	.word	0x080076d1
 8007644:	080076d1 	.word	0x080076d1
 8007648:	080076d1 	.word	0x080076d1
 800764c:	080076d1 	.word	0x080076d1
 8007650:	080076b1 	.word	0x080076b1
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d02e      	beq.n	80076b6 <UART_SetConfig+0xc1e>
 8007658:	e03a      	b.n	80076d0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800765a:	f7fc fd69 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 800765e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007660:	e03c      	b.n	80076dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007662:	f7fc fd7b 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8007666:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007668:	e038      	b.n	80076dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800766a:	f107 0314 	add.w	r3, r7, #20
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe f8be 	bl	80057f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007678:	e030      	b.n	80076dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fa0a 	bl	8005a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007688:	e028      	b.n	80076dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800768a:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <UART_SetConfig+0xc2c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <UART_SetConfig+0xc2c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <UART_SetConfig+0xc30>)
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076a8:	e018      	b.n	80076dc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <UART_SetConfig+0xc30>)
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076ae:	e015      	b.n	80076dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <UART_SetConfig+0xc34>)
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076b4:	e012      	b.n	80076dc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076bc:	e00e      	b.n	80076dc <UART_SetConfig+0xc44>
 80076be:	bf00      	nop
 80076c0:	0800a7f8 	.word	0x0800a7f8
 80076c4:	58024400 	.word	0x58024400
 80076c8:	03d09000 	.word	0x03d09000
 80076cc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80076da:	bf00      	nop
    }

    if (pclk != 0U)
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d021      	beq.n	8007726 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <UART_SetConfig+0xcb8>)
 80076e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	441a      	add	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	2b0f      	cmp	r3, #15
 800770a:	d909      	bls.n	8007720 <UART_SetConfig+0xc88>
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007712:	d205      	bcs.n	8007720 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60da      	str	r2, [r3, #12]
 800771e:	e002      	b.n	8007726 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007746:	4618      	mov	r0, r3
 8007748:	3738      	adds	r7, #56	; 0x38
 800774a:	46bd      	mov	sp, r7
 800774c:	bdb0      	pop	{r4, r5, r7, pc}
 800774e:	bf00      	nop
 8007750:	0800a7f8 	.word	0x0800a7f8

08007754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01a      	beq.n	800786a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007852:	d10a      	bne.n	800786a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  }
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078a8:	f7f8 ff34 	bl	8000714 <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d10e      	bne.n	80078da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f82f 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e025      	b.n	8007926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d10e      	bne.n	8007906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f819 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e00f      	b.n	8007926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b09c      	sub	sp, #112	; 0x70
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793e:	e0a9      	b.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007946:	f000 80a5 	beq.w	8007a94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794a:	f7f8 fee3 	bl	8000714 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007956:	429a      	cmp	r2, r3
 8007958:	d302      	bcc.n	8007960 <UART_WaitOnFlagUntilTimeout+0x32>
 800795a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795c:	2b00      	cmp	r3, #0
 800795e:	d140      	bne.n	80079e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800796e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007974:	667b      	str	r3, [r7, #100]	; 0x64
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800797e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007980:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800798c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e6      	bne.n	8007960 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	663b      	str	r3, [r7, #96]	; 0x60
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e5      	bne.n	8007992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e069      	b.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d051      	beq.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fe:	d149      	bne.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e6      	bne.n	8007a0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a5c:	623a      	str	r2, [r7, #32]
 8007a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	6a3a      	ldr	r2, [r7, #32]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e010      	b.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2301      	moveq	r3, #1
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	f43f af46 	beq.w	8007940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3770      	adds	r7, #112	; 0x70
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e027      	b.n	8007b24 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2224      	movs	r2, #36	; 0x24
 8007ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e02d      	b.n	8007ba4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f84f 	bl	8007c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e02d      	b.n	8007c20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2224      	movs	r2, #36	; 0x24
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0201 	bic.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f811 	bl	8007c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c48:	e031      	b.n	8007cae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c4a:	2310      	movs	r3, #16
 8007c4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c4e:	2310      	movs	r3, #16
 8007c50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	0e5b      	lsrs	r3, r3, #25
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	0f5b      	lsrs	r3, r3, #29
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	7b3a      	ldrb	r2, [r7, #12]
 8007c76:	4911      	ldr	r1, [pc, #68]	; (8007cbc <UARTEx_SetNbDataToProcess+0x94>)
 8007c78:	5c8a      	ldrb	r2, [r1, r2]
 8007c7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c7e:	7b3a      	ldrb	r2, [r7, #12]
 8007c80:	490f      	ldr	r1, [pc, #60]	; (8007cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007c82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	7b7a      	ldrb	r2, [r7, #13]
 8007c94:	4909      	ldr	r1, [pc, #36]	; (8007cbc <UARTEx_SetNbDataToProcess+0x94>)
 8007c96:	5c8a      	ldrb	r2, [r1, r2]
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c9c:	7b7a      	ldrb	r2, [r7, #13]
 8007c9e:	4908      	ldr	r1, [pc, #32]	; (8007cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	0800a810 	.word	0x0800a810
 8007cc0:	0800a818 	.word	0x0800a818

08007cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 8007cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ccc:	f7f8 fc9c 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007cd0:	f000 f832 	bl	8007d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007cd4:	f000 fa04 	bl	80080e0 <MX_GPIO_Init>
  MX_BDMA_Init();
 8007cd8:	f000 f98a 	bl	8007ff0 <MX_BDMA_Init>
  MX_SAI4_Init();
 8007cdc:	f000 f8dc 	bl	8007e98 <MX_SAI4_Init>
  MX_USART3_UART_Init();
 8007ce0:	f000 f93a 	bl	8007f58 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8007ce4:	f000 f9ac 	bl	8008040 <MX_DMA_Init>
  MX_CRC_Init();
 8007ce8:	f000 f894 	bl	8007e14 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8007cec:	f000 fa46 	bl	800817c <MX_PDM2PCM_Init>
  // output freq (pcm freq) = 48kHz
  // decimiation factor = 64

  // for pdm: input buffer is uint8
  // with length >= (48 * 64 * 1/8) = 384
  uint8_t pdm_buffer[400] = {0};
 8007cf0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 fb81 	bl	800a408 <memset>

  // for pdm: output buffer is uint16
  // with length >= 48
  uint16_t pcm_buffer[400] = {0};
 8007d06:	463b      	mov	r3, r7
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d0e:	461a      	mov	r2, r3
 8007d10:	2100      	movs	r1, #0
 8007d12:	f002 fb79 	bl	800a408 <memset>

  /* INITIALIZE */
  HAL_SAI_MspInit(&hsai_BlockA4);
 8007d16:	4807      	ldr	r0, [pc, #28]	; (8007d34 <main+0x70>)
 8007d18:	f000 fafa 	bl	8008310 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 8007d1c:	4805      	ldr	r0, [pc, #20]	; (8007d34 <main+0x70>)
 8007d1e:	f7fe fac5 	bl	80062ac <HAL_SAI_Init>
  //uint32_t pdm_status = PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);

  // do i need to provide clock to the codec (master to SAIB1)
  // codec
  // dma mode
  HAL_SAI_Receive_DMA(&hsai_BlockA4, pdm_buffer, 64);
 8007d22:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4802      	ldr	r0, [pc, #8]	; (8007d34 <main+0x70>)
 8007d2c:	f7fe fcd2 	bl	80066d4 <HAL_SAI_Receive_DMA>

  /* USER CODE BEGIN WHILE */

  while (1)
 8007d30:	e7fe      	b.n	8007d30 <main+0x6c>
 8007d32:	bf00      	nop
 8007d34:	240005c8 	.word	0x240005c8

08007d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b09c      	sub	sp, #112	; 0x70
 8007d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d42:	224c      	movs	r2, #76	; 0x4c
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f002 fb5e 	bl	800a408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	2220      	movs	r2, #32
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 fb58 	bl	800a408 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8007d58:	2004      	movs	r0, #4
 8007d5a:	f7fb fa83 	bl	8003264 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d5e:	2300      	movs	r3, #0
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <SystemClock_Config+0xd8>)
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <SystemClock_Config+0xd8>)
 8007d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d6c:	6193      	str	r3, [r2, #24]
 8007d6e:	4b28      	ldr	r3, [pc, #160]	; (8007e10 <SystemClock_Config+0xd8>)
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007d7a:	bf00      	nop
 8007d7c:	4b24      	ldr	r3, [pc, #144]	; (8007e10 <SystemClock_Config+0xd8>)
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d88:	d1f8      	bne.n	8007d7c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007d92:	2340      	movs	r3, #64	; 0x40
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d96:	2302      	movs	r3, #2
 8007d98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007d9e:	2304      	movs	r3, #4
 8007da0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8007da2:	2318      	movs	r3, #24
 8007da4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8007da6:	2301      	movs	r3, #1
 8007da8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8007daa:	237d      	movs	r3, #125	; 0x7d
 8007dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007dae:	2302      	movs	r3, #2
 8007db0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007db2:	230c      	movs	r3, #12
 8007db4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fb faa8 	bl	8003318 <HAL_RCC_OscConfig>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007dce:	f000 f9cf 	bl	8008170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007dd2:	233f      	movs	r3, #63	; 0x3f
 8007dd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007dde:	2308      	movs	r3, #8
 8007de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007de6:	2340      	movs	r3, #64	; 0x40
 8007de8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007df0:	2340      	movs	r3, #64	; 0x40
 8007df2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007df4:	1d3b      	adds	r3, r7, #4
 8007df6:	2102      	movs	r1, #2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fb fe39 	bl	8003a70 <HAL_RCC_ClockConfig>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007e04:	f000 f9b4 	bl	8008170 <Error_Handler>
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3770      	adds	r7, #112	; 0x70
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	58024800 	.word	0x58024800

08007e14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007e1a:	4b1c      	ldr	r3, [pc, #112]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e1c:	4a1c      	ldr	r2, [pc, #112]	; (8007e90 <MX_CRC_Init+0x7c>)
 8007e1e:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007e20:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007e26:	4b19      	ldr	r3, [pc, #100]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007e2c:	4b17      	ldr	r3, [pc, #92]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007e32:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007e38:	4b14      	ldr	r3, [pc, #80]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007e3e:	4813      	ldr	r0, [pc, #76]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e40:	f7f8 fd84 	bl	800094c <HAL_CRC_Init>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8007e4a:	f000 f991 	bl	8008170 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0201 	orr.w	r2, r2, #1
 8007e5c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <MX_CRC_Init+0x80>)
 8007e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e64:	4a0b      	ldr	r2, [pc, #44]	; (8007e94 <MX_CRC_Init+0x80>)
 8007e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e6e:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <MX_CRC_Init+0x80>)
 8007e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e78:	607b      	str	r3, [r7, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8007e7c:	4803      	ldr	r0, [pc, #12]	; (8007e8c <MX_CRC_Init+0x78>)
 8007e7e:	f000 f9bf 	bl	8008200 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	240005a4 	.word	0x240005a4
 8007e90:	58024c00 	.word	0x58024c00
 8007e94:	58024400 	.word	0x58024400

08007e98 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8007e9c:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007e9e:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <MX_SAI4_Init+0xbc>)
 8007ea0:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8007ea2:	4b2b      	ldr	r3, [pc, #172]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8007eae:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007eb0:	2280      	movs	r2, #128	; 0x80
 8007eb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8007eb4:	4b26      	ldr	r3, [pc, #152]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007eba:	4b25      	ldr	r3, [pc, #148]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8007ec0:	4b23      	ldr	r3, [pc, #140]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007ec6:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007ecc:	4b20      	ldr	r3, [pc, #128]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007ed2:	4b1f      	ldr	r3, [pc, #124]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007ed8:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007eda:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007ede:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8007ee0:	4b1b      	ldr	r3, [pc, #108]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8007eec:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8007efa:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f00:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f04:	2210      	movs	r2, #16
 8007f06:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8007f08:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007f0e:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007f14:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8007f2c:	4b08      	ldr	r3, [pc, #32]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f2e:	2201      	movs	r2, #1
 8007f30:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f38:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8007f3a:	4805      	ldr	r0, [pc, #20]	; (8007f50 <MX_SAI4_Init+0xb8>)
 8007f3c:	f7fe f9b6 	bl	80062ac <HAL_SAI_Init>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 8007f46:	f000 f913 	bl	8008170 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	240005c8 	.word	0x240005c8
 8007f54:	58005404 	.word	0x58005404

08007f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f5e:	4a23      	ldr	r2, [pc, #140]	; (8007fec <MX_USART3_UART_Init+0x94>)
 8007f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007f62:	4b21      	ldr	r3, [pc, #132]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007f6a:	4b1f      	ldr	r3, [pc, #124]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007f70:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007f76:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007f7c:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f7e:	220c      	movs	r2, #12
 8007f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f82:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f88:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f8e:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f94:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f9a:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007fa0:	4811      	ldr	r0, [pc, #68]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007fa2:	f7fe fd28 	bl	80069f6 <HAL_UART_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007fac:	f000 f8e0 	bl	8008170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	480d      	ldr	r0, [pc, #52]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007fb4:	f7ff fdbc 	bl	8007b30 <HAL_UARTEx_SetTxFifoThreshold>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007fbe:	f000 f8d7 	bl	8008170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4808      	ldr	r0, [pc, #32]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007fc6:	f7ff fdf1 	bl	8007bac <HAL_UARTEx_SetRxFifoThreshold>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007fd0:	f000 f8ce 	bl	8008170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007fd4:	4804      	ldr	r0, [pc, #16]	; (8007fe8 <MX_USART3_UART_Init+0x90>)
 8007fd6:	f7ff fd72 	bl	8007abe <HAL_UARTEx_DisableFifoMode>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007fe0:	f000 f8c6 	bl	8008170 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007fe4:	bf00      	nop
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	24000514 	.word	0x24000514
 8007fec:	40004800 	.word	0x40004800

08007ff0 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <MX_BDMA_Init+0x4c>)
 8007ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <MX_BDMA_Init+0x4c>)
 8007ffe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <MX_BDMA_Init+0x4c>)
 8008008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800800c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8008014:	2200      	movs	r2, #0
 8008016:	2100      	movs	r1, #0
 8008018:	2080      	movs	r0, #128	; 0x80
 800801a:	f7f8 fc62 	bl	80008e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800801e:	2080      	movs	r0, #128	; 0x80
 8008020:	f7f8 fc79 	bl	8000916 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	2081      	movs	r0, #129	; 0x81
 800802a:	f7f8 fc5a 	bl	80008e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800802e:	2081      	movs	r0, #129	; 0x81
 8008030:	f7f8 fc71 	bl	8000916 <HAL_NVIC_EnableIRQ>

}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	58024400 	.word	0x58024400

08008040 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008046:	4b23      	ldr	r3, [pc, #140]	; (80080d4 <MX_DMA_Init+0x94>)
 8008048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800804c:	4a21      	ldr	r2, [pc, #132]	; (80080d4 <MX_DMA_Init+0x94>)
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008056:	4b1f      	ldr	r3, [pc, #124]	; (80080d4 <MX_DMA_Init+0x94>)
 8008058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8008064:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <MX_DMA_Init+0x98>)
 8008066:	4a1d      	ldr	r2, [pc, #116]	; (80080dc <MX_DMA_Init+0x9c>)
 8008068:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <MX_DMA_Init+0x98>)
 800806c:	2201      	movs	r2, #1
 800806e:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008070:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <MX_DMA_Init+0x98>)
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8008076:	4b18      	ldr	r3, [pc, #96]	; (80080d8 <MX_DMA_Init+0x98>)
 8008078:	2200      	movs	r2, #0
 800807a:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 800807c:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <MX_DMA_Init+0x98>)
 800807e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008082:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008084:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <MX_DMA_Init+0x98>)
 8008086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800808a:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <MX_DMA_Init+0x98>)
 800808e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008092:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_CIRCULAR;
 8008094:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <MX_DMA_Init+0x98>)
 8008096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800809a:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_HIGH;
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <MX_DMA_Init+0x98>)
 800809e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80080a2:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <MX_DMA_Init+0x98>)
 80080a6:	2204      	movs	r2, #4
 80080a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_dma_generator0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80080aa:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <MX_DMA_Init+0x98>)
 80080ac:	2203      	movs	r2, #3
 80080ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_dma_generator0.Init.MemBurst = DMA_MBURST_SINGLE;
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <MX_DMA_Init+0x98>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_dma_generator0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80080b6:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <MX_DMA_Init+0x98>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 80080bc:	4806      	ldr	r0, [pc, #24]	; (80080d8 <MX_DMA_Init+0x98>)
 80080be:	f7f8 fd2f 	bl	8000b20 <HAL_DMA_Init>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <MX_DMA_Init+0x8c>
  {
    Error_Handler( );
 80080c8:	f000 f852 	bl	8008170 <Error_Handler>
  }
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	58024400 	.word	0x58024400
 80080d8:	2400049c 	.word	0x2400049c
 80080dc:	40020010 	.word	0x40020010

080080e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080e6:	4b21      	ldr	r3, [pc, #132]	; (800816c <MX_GPIO_Init+0x8c>)
 80080e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ec:	4a1f      	ldr	r2, [pc, #124]	; (800816c <MX_GPIO_Init+0x8c>)
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080f6:	4b1d      	ldr	r3, [pc, #116]	; (800816c <MX_GPIO_Init+0x8c>)
 80080f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008104:	4b19      	ldr	r3, [pc, #100]	; (800816c <MX_GPIO_Init+0x8c>)
 8008106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800810a:	4a18      	ldr	r2, [pc, #96]	; (800816c <MX_GPIO_Init+0x8c>)
 800810c:	f043 0310 	orr.w	r3, r3, #16
 8008110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008114:	4b15      	ldr	r3, [pc, #84]	; (800816c <MX_GPIO_Init+0x8c>)
 8008116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008122:	4b12      	ldr	r3, [pc, #72]	; (800816c <MX_GPIO_Init+0x8c>)
 8008124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008128:	4a10      	ldr	r2, [pc, #64]	; (800816c <MX_GPIO_Init+0x8c>)
 800812a:	f043 0304 	orr.w	r3, r3, #4
 800812e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <MX_GPIO_Init+0x8c>)
 8008134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <MX_GPIO_Init+0x8c>)
 8008142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <MX_GPIO_Init+0x8c>)
 8008148:	f043 0308 	orr.w	r3, r3, #8
 800814c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <MX_GPIO_Init+0x8c>)
 8008152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	683b      	ldr	r3, [r7, #0]

}
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	58024400 	.word	0x58024400

08008170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008174:	b672      	cpsid	i
}
 8008176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008178:	e7fe      	b.n	8008178 <Error_Handler+0x8>
	...

0800817c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
  /* USER CODE END 2 */

   /**
  */
	// UM2372 pdm handler configuration
	PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;  // sent data msb
 8008180:	4b10      	ldr	r3, [pc, #64]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 8008182:	2200      	movs	r2, #0
 8008184:	801a      	strh	r2, [r3, #0]
	PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE; // byte-inversion (BE vs LE)
 8008186:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 8008188:	2201      	movs	r2, #1
 800818a:	805a      	strh	r2, [r3, #2]
	PDM1_filter_handler.high_pass_tap = 0;
 800818c:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 800818e:	2200      	movs	r2, #0
 8008190:	605a      	str	r2, [r3, #4]
	PDM1_filter_handler.in_ptr_channels = 1;
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 8008194:	2201      	movs	r2, #1
 8008196:	811a      	strh	r2, [r3, #8]
	PDM1_filter_handler.out_ptr_channels = 1;
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 800819a:	2201      	movs	r2, #1
 800819c:	815a      	strh	r2, [r3, #10]
	PDM_Filter_Init(&PDM1_filter_handler);
 800819e:	4809      	ldr	r0, [pc, #36]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 80081a0:	f001 ff3e 	bl	800a020 <PDM_Filter_Init>

	// UM2372 pdm config
	PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80081a4:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <MX_PDM2PCM_Init+0x4c>)
 80081a6:	2202      	movs	r2, #2
 80081a8:	801a      	strh	r2, [r3, #0]
	PDM1_filter_config.output_samples_number = 8;
 80081aa:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <MX_PDM2PCM_Init+0x4c>)
 80081ac:	2208      	movs	r2, #8
 80081ae:	805a      	strh	r2, [r3, #2]
	PDM1_filter_config.mic_gain = 0;
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <MX_PDM2PCM_Init+0x4c>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	809a      	strh	r2, [r3, #4]
	PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80081b6:	4904      	ldr	r1, [pc, #16]	; (80081c8 <MX_PDM2PCM_Init+0x4c>)
 80081b8:	4802      	ldr	r0, [pc, #8]	; (80081c4 <MX_PDM2PCM_Init+0x48>)
 80081ba:	f002 f801 	bl	800a1c0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80081be:	bf00      	nop
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	240006d8 	.word	0x240006d8
 80081c8:	24000724 	.word	0x24000724

080081cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <HAL_MspInit+0x30>)
 80081d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081d8:	4a08      	ldr	r2, [pc, #32]	; (80081fc <HAL_MspInit+0x30>)
 80081da:	f043 0302 	orr.w	r3, r3, #2
 80081de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <HAL_MspInit+0x30>)
 80081e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	58024400 	.word	0x58024400

08008200 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a0b      	ldr	r2, [pc, #44]	; (800823c <HAL_CRC_MspInit+0x3c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d10e      	bne.n	8008230 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008212:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <HAL_CRC_MspInit+0x40>)
 8008214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <HAL_CRC_MspInit+0x40>)
 800821a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800821e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008222:	4b07      	ldr	r3, [pc, #28]	; (8008240 <HAL_CRC_MspInit+0x40>)
 8008224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008230:	bf00      	nop
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	58024c00 	.word	0x58024c00
 8008240:	58024400 	.word	0x58024400

08008244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b0b6      	sub	sp, #216	; 0xd8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800824c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800825c:	f107 0310 	add.w	r3, r7, #16
 8008260:	22b4      	movs	r2, #180	; 0xb4
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f002 f8cf 	bl	800a408 <memset>
  if(huart->Instance==USART3)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a25      	ldr	r2, [pc, #148]	; (8008304 <HAL_UART_MspInit+0xc0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d142      	bne.n	80082fa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008274:	2302      	movs	r3, #2
 8008276:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008278:	2300      	movs	r3, #0
 800827a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800827e:	f107 0310 	add.w	r3, r7, #16
 8008282:	4618      	mov	r0, r3
 8008284:	f7fb ff80 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800828e:	f7ff ff6f 	bl	8008170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008292:	4b1d      	ldr	r3, [pc, #116]	; (8008308 <HAL_UART_MspInit+0xc4>)
 8008294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008298:	4a1b      	ldr	r2, [pc, #108]	; (8008308 <HAL_UART_MspInit+0xc4>)
 800829a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800829e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80082a2:	4b19      	ldr	r3, [pc, #100]	; (8008308 <HAL_UART_MspInit+0xc4>)
 80082a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082b0:	4b15      	ldr	r3, [pc, #84]	; (8008308 <HAL_UART_MspInit+0xc4>)
 80082b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082b6:	4a14      	ldr	r2, [pc, #80]	; (8008308 <HAL_UART_MspInit+0xc4>)
 80082b8:	f043 0304 	orr.w	r3, r3, #4
 80082bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082c0:	4b11      	ldr	r3, [pc, #68]	; (8008308 <HAL_UART_MspInit+0xc4>)
 80082c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	60bb      	str	r3, [r7, #8]
 80082cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80082ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80082d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d6:	2302      	movs	r3, #2
 80082d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80082e8:	2307      	movs	r3, #7
 80082ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082f2:	4619      	mov	r1, r3
 80082f4:	4805      	ldr	r0, [pc, #20]	; (800830c <HAL_UART_MspInit+0xc8>)
 80082f6:	f7fa fe0d 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80082fa:	bf00      	nop
 80082fc:	37d8      	adds	r7, #216	; 0xd8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	40004800 	.word	0x40004800
 8008308:	58024400 	.word	0x58024400
 800830c:	58020800 	.word	0x58020800

08008310 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b0ba      	sub	sp, #232	; 0xe8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008318:	f107 0310 	add.w	r3, r7, #16
 800831c:	22b4      	movs	r2, #180	; 0xb4
 800831e:	2100      	movs	r1, #0
 8008320:	4618      	mov	r0, r3
 8008322:	f002 f871 	bl	800a408 <memset>
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a55      	ldr	r2, [pc, #340]	; (8008480 <HAL_SAI_MspInit+0x170>)
 800832c:	4293      	cmp	r3, r2
 800832e:	f040 80a2 	bne.w	8008476 <HAL_SAI_MspInit+0x166>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008336:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	4618      	mov	r0, r3
 8008344:	f7fb ff20 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <HAL_SAI_MspInit+0x42>
    {
      Error_Handler();
 800834e:	f7ff ff0f 	bl	8008170 <Error_Handler>
    }

    if (SAI4_client == 0)
 8008352:	4b4c      	ldr	r3, [pc, #304]	; (8008484 <HAL_SAI_MspInit+0x174>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10e      	bne.n	8008378 <HAL_SAI_MspInit+0x68>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800835a:	4b4b      	ldr	r3, [pc, #300]	; (8008488 <HAL_SAI_MspInit+0x178>)
 800835c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008360:	4a49      	ldr	r2, [pc, #292]	; (8008488 <HAL_SAI_MspInit+0x178>)
 8008362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008366:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800836a:	4b47      	ldr	r3, [pc, #284]	; (8008488 <HAL_SAI_MspInit+0x178>)
 800836c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
    }
    SAI4_client ++;
 8008378:	4b42      	ldr	r3, [pc, #264]	; (8008484 <HAL_SAI_MspInit+0x174>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	4a41      	ldr	r2, [pc, #260]	; (8008484 <HAL_SAI_MspInit+0x174>)
 8008380:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008382:	2330      	movs	r3, #48	; 0x30
 8008384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008388:	2302      	movs	r3, #2
 800838a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838e:	2300      	movs	r3, #0
 8008390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008394:	2300      	movs	r3, #0
 8008396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800839a:	230a      	movs	r3, #10
 800839c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80083a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80083a4:	4619      	mov	r1, r3
 80083a6:	4839      	ldr	r0, [pc, #228]	; (800848c <HAL_SAI_MspInit+0x17c>)
 80083a8:	f7fa fdb4 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80083ac:	2340      	movs	r3, #64	; 0x40
 80083ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b2:	2302      	movs	r3, #2
 80083b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083be:	2300      	movs	r3, #0
 80083c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80083ce:	4619      	mov	r1, r3
 80083d0:	482f      	ldr	r0, [pc, #188]	; (8008490 <HAL_SAI_MspInit+0x180>)
 80083d2:	f7fa fd9f 	bl	8002f14 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 80083d6:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <HAL_SAI_MspInit+0x184>)
 80083d8:	4a2f      	ldr	r2, [pc, #188]	; (8008498 <HAL_SAI_MspInit+0x188>)
 80083da:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 80083dc:	4b2d      	ldr	r3, [pc, #180]	; (8008494 <HAL_SAI_MspInit+0x184>)
 80083de:	220f      	movs	r2, #15
 80083e0:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083e2:	4b2c      	ldr	r3, [pc, #176]	; (8008494 <HAL_SAI_MspInit+0x184>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80083e8:	4b2a      	ldr	r3, [pc, #168]	; (8008494 <HAL_SAI_MspInit+0x184>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 80083ee:	4b29      	ldr	r3, [pc, #164]	; (8008494 <HAL_SAI_MspInit+0x184>)
 80083f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083f4:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80083f6:	4b27      	ldr	r3, [pc, #156]	; (8008494 <HAL_SAI_MspInit+0x184>)
 80083f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083fc:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80083fe:	4b25      	ldr	r3, [pc, #148]	; (8008494 <HAL_SAI_MspInit+0x184>)
 8008400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008404:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8008406:	4b23      	ldr	r3, [pc, #140]	; (8008494 <HAL_SAI_MspInit+0x184>)
 8008408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800840c:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 800840e:	4b21      	ldr	r3, [pc, #132]	; (8008494 <HAL_SAI_MspInit+0x184>)
 8008410:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008414:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8008416:	481f      	ldr	r0, [pc, #124]	; (8008494 <HAL_SAI_MspInit+0x184>)
 8008418:	f7f8 fb82 	bl	8000b20 <HAL_DMA_Init>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8008422:	f7ff fea5 	bl	8008170 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008426:	230e      	movs	r3, #14
 8008428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008432:	2300      	movs	r3, #0
 8008434:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800843e:	2301      	movs	r3, #1
 8008440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008444:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008448:	4619      	mov	r1, r3
 800844a:	4812      	ldr	r0, [pc, #72]	; (8008494 <HAL_SAI_MspInit+0x184>)
 800844c:	f7fa fc4a 	bl	8002ce4 <HAL_DMAEx_ConfigMuxSync>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_SAI_MspInit+0x14a>
    {
      Error_Handler();
 8008456:	f7ff fe8b 	bl	8008170 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a0d      	ldr	r2, [pc, #52]	; (8008494 <HAL_SAI_MspInit+0x184>)
 800845e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008462:	4a0c      	ldr	r2, [pc, #48]	; (8008494 <HAL_SAI_MspInit+0x184>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a0a      	ldr	r2, [pc, #40]	; (8008494 <HAL_SAI_MspInit+0x184>)
 800846c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008470:	4a08      	ldr	r2, [pc, #32]	; (8008494 <HAL_SAI_MspInit+0x184>)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8008476:	bf00      	nop
 8008478:	37e8      	adds	r7, #232	; 0xe8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	58005404 	.word	0x58005404
 8008484:	24000494 	.word	0x24000494
 8008488:	58024400 	.word	0x58024400
 800848c:	58021000 	.word	0x58021000
 8008490:	58020c00 	.word	0x58020c00
 8008494:	24000660 	.word	0x24000660
 8008498:	58025408 	.word	0x58025408

0800849c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80084a0:	e7fe      	b.n	80084a0 <NMI_Handler+0x4>

080084a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084a2:	b480      	push	{r7}
 80084a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084a6:	e7fe      	b.n	80084a6 <HardFault_Handler+0x4>

080084a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084ac:	e7fe      	b.n	80084ac <MemManage_Handler+0x4>

080084ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084ae:	b480      	push	{r7}
 80084b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084b2:	e7fe      	b.n	80084b2 <BusFault_Handler+0x4>

080084b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084b8:	e7fe      	b.n	80084b8 <UsageFault_Handler+0x4>

080084ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084ba:	b480      	push	{r7}
 80084bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084be:	bf00      	nop
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084cc:	bf00      	nop
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084d6:	b480      	push	{r7}
 80084d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084da:	bf00      	nop
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084e8:	f7f8 f900 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084ec:	bf00      	nop
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 80084f4:	4802      	ldr	r0, [pc, #8]	; (8008500 <DMAMUX2_OVR_IRQHandler+0x10>)
 80084f6:	f7fa fcbb 	bl	8002e70 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	24000660 	.word	0x24000660

08008504 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8008508:	4802      	ldr	r0, [pc, #8]	; (8008514 <BDMA_Channel0_IRQHandler+0x10>)
 800850a:	f7f9 f8cd 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	24000660 	.word	0x24000660

08008518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800851c:	4b32      	ldr	r3, [pc, #200]	; (80085e8 <SystemInit+0xd0>)
 800851e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008522:	4a31      	ldr	r2, [pc, #196]	; (80085e8 <SystemInit+0xd0>)
 8008524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800852c:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <SystemInit+0xd4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	2b06      	cmp	r3, #6
 8008536:	d807      	bhi.n	8008548 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008538:	4b2c      	ldr	r3, [pc, #176]	; (80085ec <SystemInit+0xd4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f023 030f 	bic.w	r3, r3, #15
 8008540:	4a2a      	ldr	r2, [pc, #168]	; (80085ec <SystemInit+0xd4>)
 8008542:	f043 0307 	orr.w	r3, r3, #7
 8008546:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008548:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <SystemInit+0xd8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a28      	ldr	r2, [pc, #160]	; (80085f0 <SystemInit+0xd8>)
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008554:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <SystemInit+0xd8>)
 8008556:	2200      	movs	r2, #0
 8008558:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800855a:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <SystemInit+0xd8>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4924      	ldr	r1, [pc, #144]	; (80085f0 <SystemInit+0xd8>)
 8008560:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <SystemInit+0xdc>)
 8008562:	4013      	ands	r3, r2
 8008564:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <SystemInit+0xd4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d007      	beq.n	8008582 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008572:	4b1e      	ldr	r3, [pc, #120]	; (80085ec <SystemInit+0xd4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f023 030f 	bic.w	r3, r3, #15
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <SystemInit+0xd4>)
 800857c:	f043 0307 	orr.w	r3, r3, #7
 8008580:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008582:	4b1b      	ldr	r3, [pc, #108]	; (80085f0 <SystemInit+0xd8>)
 8008584:	2200      	movs	r2, #0
 8008586:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008588:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <SystemInit+0xd8>)
 800858a:	2200      	movs	r2, #0
 800858c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <SystemInit+0xd8>)
 8008590:	2200      	movs	r2, #0
 8008592:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <SystemInit+0xd8>)
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <SystemInit+0xe0>)
 8008598:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800859a:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <SystemInit+0xd8>)
 800859c:	4a17      	ldr	r2, [pc, #92]	; (80085fc <SystemInit+0xe4>)
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80085a0:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <SystemInit+0xd8>)
 80085a2:	4a17      	ldr	r2, [pc, #92]	; (8008600 <SystemInit+0xe8>)
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80085a6:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <SystemInit+0xd8>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80085ac:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <SystemInit+0xd8>)
 80085ae:	4a14      	ldr	r2, [pc, #80]	; (8008600 <SystemInit+0xe8>)
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80085b2:	4b0f      	ldr	r3, [pc, #60]	; (80085f0 <SystemInit+0xd8>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <SystemInit+0xd8>)
 80085ba:	4a11      	ldr	r2, [pc, #68]	; (8008600 <SystemInit+0xe8>)
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80085be:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <SystemInit+0xd8>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085c4:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <SystemInit+0xd8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <SystemInit+0xd8>)
 80085ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <SystemInit+0xd8>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <SystemInit+0xec>)
 80085d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80085dc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80085de:	bf00      	nop
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	e000ed00 	.word	0xe000ed00
 80085ec:	52002000 	.word	0x52002000
 80085f0:	58024400 	.word	0x58024400
 80085f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80085f8:	02020200 	.word	0x02020200
 80085fc:	01ff0000 	.word	0x01ff0000
 8008600:	01010280 	.word	0x01010280
 8008604:	52004000 	.word	0x52004000

08008608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800860c:	f7ff ff84 	bl	8008518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008610:	480c      	ldr	r0, [pc, #48]	; (8008644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008612:	490d      	ldr	r1, [pc, #52]	; (8008648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008614:	4a0d      	ldr	r2, [pc, #52]	; (800864c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008618:	e002      	b.n	8008620 <LoopCopyDataInit>

0800861a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800861a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800861c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800861e:	3304      	adds	r3, #4

08008620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008624:	d3f9      	bcc.n	800861a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008626:	4a0a      	ldr	r2, [pc, #40]	; (8008650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008628:	4c0a      	ldr	r4, [pc, #40]	; (8008654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800862a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800862c:	e001      	b.n	8008632 <LoopFillZerobss>

0800862e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800862e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008630:	3204      	adds	r2, #4

08008632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008634:	d3fb      	bcc.n	800862e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008636:	f001 fec3 	bl	800a3c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800863a:	f7ff fb43 	bl	8007cc4 <main>
  bx  lr
 800863e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008640:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008648:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 800864c:	0800aab0 	.word	0x0800aab0
  ldr r2, =_sbss
 8008650:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8008654:	2400072c 	.word	0x2400072c

08008658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008658:	e7fe      	b.n	8008658 <ADC3_IRQHandler>
	...

0800865c <D16_GENERIC>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	b089      	sub	sp, #36	; 0x24
 8008662:	6993      	ldr	r3, [r2, #24]
 8008664:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008666:	9103      	str	r1, [sp, #12]
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	69d3      	ldr	r3, [r2, #28]
 800866c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008670:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008674:	9106      	str	r1, [sp, #24]
 8008676:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800867a:	2d00      	cmp	r5, #0
 800867c:	d063      	beq.n	8008746 <D16_GENERIC+0xea>
 800867e:	f001 0520 	and.w	r5, r1, #32
 8008682:	f001 0110 	and.w	r1, r1, #16
 8008686:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008768 <D16_GENERIC+0x10c>
 800868a:	46c1      	mov	r9, r8
 800868c:	9104      	str	r1, [sp, #16]
 800868e:	2100      	movs	r1, #0
 8008690:	9505      	str	r5, [sp, #20]
 8008692:	e04d      	b.n	8008730 <D16_GENERIC+0xd4>
 8008694:	5d87      	ldrb	r7, [r0, r6]
 8008696:	7805      	ldrb	r5, [r0, #0]
 8008698:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800869c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80086a0:	b2fe      	uxtb	r6, r7
 80086a2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80086a6:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80086aa:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80086ae:	441d      	add	r5, r3
 80086b0:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80086b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80086b8:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80086bc:	0a9b      	lsrs	r3, r3, #10
 80086be:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80086c2:	4d27      	ldr	r5, [pc, #156]	; (8008760 <D16_GENERIC+0x104>)
 80086c4:	fb26 c505 	smlad	r5, r6, r5, ip
 80086c8:	4f26      	ldr	r7, [pc, #152]	; (8008764 <D16_GENERIC+0x108>)
 80086ca:	fb26 fc07 	smuad	ip, r6, r7
 80086ce:	9e04      	ldr	r6, [sp, #16]
 80086d0:	f101 0801 	add.w	r8, r1, #1
 80086d4:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 80086d8:	b1ae      	cbz	r6, 8008706 <D16_GENERIC+0xaa>
 80086da:	442c      	add	r4, r5
 80086dc:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80086e0:	eba4 040a 	sub.w	r4, r4, sl
 80086e4:	46aa      	mov	sl, r5
 80086e6:	17e7      	asrs	r7, r4, #31
 80086e8:	fba4 450b 	umull	r4, r5, r4, fp
 80086ec:	e9cd 4500 	strd	r4, r5, [sp]
 80086f0:	fb0b 5407 	mla	r4, fp, r7, r5
 80086f4:	9401      	str	r4, [sp, #4]
 80086f6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80086fa:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80086fe:	f145 0500 	adc.w	r5, r5, #0
 8008702:	006c      	lsls	r4, r5, #1
 8008704:	4625      	mov	r5, r4
 8008706:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800870a:	042d      	lsls	r5, r5, #16
 800870c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008710:	2700      	movs	r7, #0
 8008712:	fb01 fb0b 	mul.w	fp, r1, fp
 8008716:	fa1f f188 	uxth.w	r1, r8
 800871a:	fbc9 6705 	smlal	r6, r7, r9, r5
 800871e:	9e03      	ldr	r6, [sp, #12]
 8008720:	10bd      	asrs	r5, r7, #2
 8008722:	f305 050f 	ssat	r5, #16, r5
 8008726:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800872a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800872c:	428d      	cmp	r5, r1
 800872e:	d90a      	bls.n	8008746 <D16_GENERIC+0xea>
 8008730:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008732:	2d01      	cmp	r5, #1
 8008734:	b2ee      	uxtb	r6, r5
 8008736:	d1ad      	bne.n	8008694 <D16_GENERIC+0x38>
 8008738:	9d05      	ldr	r5, [sp, #20]
 800873a:	f850 7b02 	ldr.w	r7, [r0], #2
 800873e:	2d00      	cmp	r5, #0
 8008740:	d0ae      	beq.n	80086a0 <D16_GENERIC+0x44>
 8008742:	ba7f      	rev16	r7, r7
 8008744:	e7ac      	b.n	80086a0 <D16_GENERIC+0x44>
 8008746:	2000      	movs	r0, #0
 8008748:	9906      	ldr	r1, [sp, #24]
 800874a:	61d3      	str	r3, [r2, #28]
 800874c:	9b07      	ldr	r3, [sp, #28]
 800874e:	f8c2 c008 	str.w	ip, [r2, #8]
 8008752:	60d1      	str	r1, [r2, #12]
 8008754:	6193      	str	r3, [r2, #24]
 8008756:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800875a:	b009      	add	sp, #36	; 0x24
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	00030001 	.word	0x00030001
 8008764:	00010003 	.word	0x00010003
 8008768:	24000000 	.word	0x24000000

0800876c <D24_GENERIC>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008774:	b089      	sub	sp, #36	; 0x24
 8008776:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	6993      	ldr	r3, [r2, #24]
 800877c:	9104      	str	r1, [sp, #16]
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	69d1      	ldr	r1, [r2, #28]
 8008782:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008786:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800878a:	2e00      	cmp	r6, #0
 800878c:	f000 8088 	beq.w	80088a0 <D24_GENERIC+0x134>
 8008790:	f005 0620 	and.w	r6, r5, #32
 8008794:	f005 0510 	and.w	r5, r5, #16
 8008798:	f04f 0c00 	mov.w	ip, #0
 800879c:	f8df e140 	ldr.w	lr, [pc, #320]	; 80088e0 <D24_GENERIC+0x174>
 80087a0:	9606      	str	r6, [sp, #24]
 80087a2:	9505      	str	r5, [sp, #20]
 80087a4:	e064      	b.n	8008870 <D24_GENERIC+0x104>
 80087a6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80087aa:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80087ae:	f810 b007 	ldrb.w	fp, [r0, r7]
 80087b2:	042d      	lsls	r5, r5, #16
 80087b4:	19f0      	adds	r0, r6, r7
 80087b6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80087ba:	44a9      	add	r9, r5
 80087bc:	fa5f f689 	uxtb.w	r6, r9
 80087c0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80087c4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80087c8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80087cc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80087d0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80087d4:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80087d8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80087dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80087e0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80087e4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80087e8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80087ec:	4d3a      	ldr	r5, [pc, #232]	; (80088d8 <D24_GENERIC+0x16c>)
 80087ee:	fb26 8705 	smlad	r7, r6, r5, r8
 80087f2:	4d3a      	ldr	r5, [pc, #232]	; (80088dc <D24_GENERIC+0x170>)
 80087f4:	fb26 3805 	smlad	r8, r6, r5, r3
 80087f8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80087fc:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8008800:	2301      	movs	r3, #1
 8008802:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8008806:	fb26 f603 	smuad	r6, r6, r3
 800880a:	eb0c 0903 	add.w	r9, ip, r3
 800880e:	eb0b 0306 	add.w	r3, fp, r6
 8008812:	9e05      	ldr	r6, [sp, #20]
 8008814:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8008818:	b1ae      	cbz	r6, 8008846 <D24_GENERIC+0xda>
 800881a:	442c      	add	r4, r5
 800881c:	9e03      	ldr	r6, [sp, #12]
 800881e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008822:	1ba4      	subs	r4, r4, r6
 8008824:	9503      	str	r5, [sp, #12]
 8008826:	17e7      	asrs	r7, r4, #31
 8008828:	fba4 450b 	umull	r4, r5, r4, fp
 800882c:	e9cd 4500 	strd	r4, r5, [sp]
 8008830:	fb0b 5407 	mla	r4, fp, r7, r5
 8008834:	9401      	str	r4, [sp, #4]
 8008836:	e9dd 4500 	ldrd	r4, r5, [sp]
 800883a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800883e:	f145 0500 	adc.w	r5, r5, #0
 8008842:	006c      	lsls	r4, r5, #1
 8008844:	4625      	mov	r5, r4
 8008846:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800884a:	03ad      	lsls	r5, r5, #14
 800884c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008850:	2700      	movs	r7, #0
 8008852:	fb0c fb0b 	mul.w	fp, ip, fp
 8008856:	fa1f fc89 	uxth.w	ip, r9
 800885a:	fbca 6705 	smlal	r6, r7, sl, r5
 800885e:	9e04      	ldr	r6, [sp, #16]
 8008860:	10bd      	asrs	r5, r7, #2
 8008862:	f305 050f 	ssat	r5, #16, r5
 8008866:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800886a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800886c:	4565      	cmp	r5, ip
 800886e:	d917      	bls.n	80088a0 <D24_GENERIC+0x134>
 8008870:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008872:	f890 9000 	ldrb.w	r9, [r0]
 8008876:	b2ef      	uxtb	r7, r5
 8008878:	2d01      	cmp	r5, #1
 800887a:	b23e      	sxth	r6, r7
 800887c:	d193      	bne.n	80087a6 <D24_GENERIC+0x3a>
 800887e:	9d06      	ldr	r5, [sp, #24]
 8008880:	b1dd      	cbz	r5, 80088ba <D24_GENERIC+0x14e>
 8008882:	78c7      	ldrb	r7, [r0, #3]
 8008884:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8008888:	f01c 0f01 	tst.w	ip, #1
 800888c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8008890:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8008894:	d11a      	bne.n	80088cc <D24_GENERIC+0x160>
 8008896:	f890 9001 	ldrb.w	r9, [r0, #1]
 800889a:	3002      	adds	r0, #2
 800889c:	44b1      	add	r9, r6
 800889e:	e78d      	b.n	80087bc <D24_GENERIC+0x50>
 80088a0:	6093      	str	r3, [r2, #8]
 80088a2:	2000      	movs	r0, #0
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	f8c2 800c 	str.w	r8, [r2, #12]
 80088aa:	6153      	str	r3, [r2, #20]
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	61d1      	str	r1, [r2, #28]
 80088b0:	6114      	str	r4, [r2, #16]
 80088b2:	6193      	str	r3, [r2, #24]
 80088b4:	b009      	add	sp, #36	; 0x24
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	7845      	ldrb	r5, [r0, #1]
 80088bc:	3003      	adds	r0, #3
 80088be:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80088c2:	022d      	lsls	r5, r5, #8
 80088c4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80088c8:	44a9      	add	r9, r5
 80088ca:	e777      	b.n	80087bc <D24_GENERIC+0x50>
 80088cc:	7886      	ldrb	r6, [r0, #2]
 80088ce:	3004      	adds	r0, #4
 80088d0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80088d4:	44a9      	add	r9, r5
 80088d6:	e771      	b.n	80087bc <D24_GENERIC+0x50>
 80088d8:	00030001 	.word	0x00030001
 80088dc:	00060007 	.word	0x00060007
 80088e0:	24000000 	.word	0x24000000

080088e4 <D32_GENERIC>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80088ec:	b089      	sub	sp, #36	; 0x24
 80088ee:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80088f0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80088f2:	9302      	str	r3, [sp, #8]
 80088f4:	6993      	ldr	r3, [r2, #24]
 80088f6:	9104      	str	r1, [sp, #16]
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	9503      	str	r5, [sp, #12]
 80088fc:	69d1      	ldr	r1, [r2, #28]
 80088fe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8008900:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008904:	2e00      	cmp	r6, #0
 8008906:	f000 8097 	beq.w	8008a38 <D32_GENERIC+0x154>
 800890a:	f005 0620 	and.w	r6, r5, #32
 800890e:	f005 0510 	and.w	r5, r5, #16
 8008912:	f04f 0e00 	mov.w	lr, #0
 8008916:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008a68 <D32_GENERIC+0x184>
 800891a:	9606      	str	r6, [sp, #24]
 800891c:	9505      	str	r5, [sp, #20]
 800891e:	e079      	b.n	8008a14 <D32_GENERIC+0x130>
 8008920:	783d      	ldrb	r5, [r7, #0]
 8008922:	f810 b009 	ldrb.w	fp, [r0, r9]
 8008926:	042d      	lsls	r5, r5, #16
 8008928:	f810 a006 	ldrb.w	sl, [r0, r6]
 800892c:	f890 9000 	ldrb.w	r9, [r0]
 8008930:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8008934:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8008938:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800893c:	44a9      	add	r9, r5
 800893e:	fa5f f789 	uxtb.w	r7, r9
 8008942:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8008946:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800894a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800894e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008952:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008956:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800895a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800895e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8008962:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008966:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800896a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800896e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008972:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8008976:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800897a:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800897e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8008982:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008986:	4d34      	ldr	r5, [pc, #208]	; (8008a58 <D32_GENERIC+0x174>)
 8008988:	fb29 8805 	smlad	r8, r9, r5, r8
 800898c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8008990:	fb26 8705 	smlad	r7, r6, r5, r8
 8008994:	4d31      	ldr	r5, [pc, #196]	; (8008a5c <D32_GENERIC+0x178>)
 8008996:	fb29 3305 	smlad	r3, r9, r5, r3
 800899a:	4d31      	ldr	r5, [pc, #196]	; (8008a60 <D32_GENERIC+0x17c>)
 800899c:	fb26 3805 	smlad	r8, r6, r5, r3
 80089a0:	2301      	movs	r3, #1
 80089a2:	fb29 f903 	smuad	r9, r9, r3
 80089a6:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <D32_GENERIC+0x180>)
 80089a8:	fb26 9303 	smlad	r3, r6, r3, r9
 80089ac:	9e05      	ldr	r6, [sp, #20]
 80089ae:	f10e 0901 	add.w	r9, lr, #1
 80089b2:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80089b6:	b1ae      	cbz	r6, 80089e4 <D32_GENERIC+0x100>
 80089b8:	442c      	add	r4, r5
 80089ba:	9e02      	ldr	r6, [sp, #8]
 80089bc:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80089c0:	1ba4      	subs	r4, r4, r6
 80089c2:	9502      	str	r5, [sp, #8]
 80089c4:	17e7      	asrs	r7, r4, #31
 80089c6:	fba4 450a 	umull	r4, r5, r4, sl
 80089ca:	e9cd 4500 	strd	r4, r5, [sp]
 80089ce:	fb0a 5407 	mla	r4, sl, r7, r5
 80089d2:	9401      	str	r4, [sp, #4]
 80089d4:	e9dd 4500 	ldrd	r4, r5, [sp]
 80089d8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80089dc:	f145 0500 	adc.w	r5, r5, #0
 80089e0:	006c      	lsls	r4, r5, #1
 80089e2:	4625      	mov	r5, r4
 80089e4:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 80089e8:	036d      	lsls	r5, r5, #13
 80089ea:	9f03      	ldr	r7, [sp, #12]
 80089ec:	fb0e fb0a 	mul.w	fp, lr, sl
 80089f0:	fa1f fe89 	uxth.w	lr, r9
 80089f4:	f04f 0a00 	mov.w	sl, #0
 80089f8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80089fc:	9e04      	ldr	r6, [sp, #16]
 80089fe:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8008a02:	4657      	mov	r7, sl
 8008a04:	10bd      	asrs	r5, r7, #2
 8008a06:	f305 050f 	ssat	r5, #16, r5
 8008a0a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008a0e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008a10:	4575      	cmp	r5, lr
 8008a12:	d911      	bls.n	8008a38 <D32_GENERIC+0x154>
 8008a14:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008a16:	b2ee      	uxtb	r6, r5
 8008a18:	2d01      	cmp	r5, #1
 8008a1a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8008a1e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8008a22:	f47f af7d 	bne.w	8008920 <D32_GENERIC+0x3c>
 8008a26:	1d05      	adds	r5, r0, #4
 8008a28:	f8d0 9000 	ldr.w	r9, [r0]
 8008a2c:	9806      	ldr	r0, [sp, #24]
 8008a2e:	b180      	cbz	r0, 8008a52 <D32_GENERIC+0x16e>
 8008a30:	fa99 f999 	rev16.w	r9, r9
 8008a34:	4628      	mov	r0, r5
 8008a36:	e782      	b.n	800893e <D32_GENERIC+0x5a>
 8008a38:	6093      	str	r3, [r2, #8]
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	f8c2 800c 	str.w	r8, [r2, #12]
 8008a42:	6153      	str	r3, [r2, #20]
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	61d1      	str	r1, [r2, #28]
 8008a48:	6114      	str	r4, [r2, #16]
 8008a4a:	6193      	str	r3, [r2, #24]
 8008a4c:	b009      	add	sp, #36	; 0x24
 8008a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a52:	4628      	mov	r0, r5
 8008a54:	e773      	b.n	800893e <D32_GENERIC+0x5a>
 8008a56:	bf00      	nop
 8008a58:	00060003 	.word	0x00060003
 8008a5c:	000a000c 	.word	0x000a000c
 8008a60:	000c000a 	.word	0x000c000a
 8008a64:	00030006 	.word	0x00030006
 8008a68:	24000000 	.word	0x24000000

08008a6c <D48_GENERIC>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	6913      	ldr	r3, [r2, #16]
 8008a72:	b089      	sub	sp, #36	; 0x24
 8008a74:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	6953      	ldr	r3, [r2, #20]
 8008a7a:	9104      	str	r1, [sp, #16]
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	6993      	ldr	r3, [r2, #24]
 8008a80:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008a84:	9307      	str	r3, [sp, #28]
 8008a86:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8008a8a:	9100      	str	r1, [sp, #0]
 8008a8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008a8e:	9103      	str	r1, [sp, #12]
 8008a90:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	f000 80be 	beq.w	8008c14 <D48_GENERIC+0x1a8>
 8008a98:	f001 0420 	and.w	r4, r1, #32
 8008a9c:	f001 0110 	and.w	r1, r1, #16
 8008aa0:	f04f 0e00 	mov.w	lr, #0
 8008aa4:	9105      	str	r1, [sp, #20]
 8008aa6:	9406      	str	r4, [sp, #24]
 8008aa8:	4962      	ldr	r1, [pc, #392]	; (8008c34 <D48_GENERIC+0x1c8>)
 8008aaa:	e0a0      	b.n	8008bee <D48_GENERIC+0x182>
 8008aac:	eb00 0608 	add.w	r6, r0, r8
 8008ab0:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008ab4:	f810 9005 	ldrb.w	r9, [r0, r5]
 8008ab8:	5df4      	ldrb	r4, [r6, r7]
 8008aba:	443e      	add	r6, r7
 8008abc:	f890 b000 	ldrb.w	fp, [r0]
 8008ac0:	0420      	lsls	r0, r4, #16
 8008ac2:	eb06 0408 	add.w	r4, r6, r8
 8008ac6:	f816 6008 	ldrb.w	r6, [r6, r8]
 8008aca:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8008ace:	f814 8007 	ldrb.w	r8, [r4, r7]
 8008ad2:	4427      	add	r7, r4
 8008ad4:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8008ad8:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8008adc:	eb0a 040b 	add.w	r4, sl, fp
 8008ae0:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8008ae4:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008ae8:	b2f7      	uxtb	r7, r6
 8008aea:	b2e6      	uxtb	r6, r4
 8008aec:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8008af0:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8008af4:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8008af8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008afc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8008b00:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8008b04:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8008b08:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8008b0c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008b10:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008b14:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8008b18:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008b1c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8008b20:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008b24:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008b28:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008b2c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008b30:	9d00      	ldr	r5, [sp, #0]
 8008b32:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008b36:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008b3a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8008b3e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008b42:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8008b46:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008b4a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008b4e:	4c3a      	ldr	r4, [pc, #232]	; (8008c38 <D48_GENERIC+0x1cc>)
 8008b50:	fb26 5a04 	smlad	sl, r6, r4, r5
 8008b54:	4c39      	ldr	r4, [pc, #228]	; (8008c3c <D48_GENERIC+0x1d0>)
 8008b56:	fb29 aa04 	smlad	sl, r9, r4, sl
 8008b5a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8008b5e:	fb27 aa04 	smlad	sl, r7, r4, sl
 8008b62:	4c37      	ldr	r4, [pc, #220]	; (8008c40 <D48_GENERIC+0x1d4>)
 8008b64:	fb26 3304 	smlad	r3, r6, r4, r3
 8008b68:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8008b6c:	fb29 3304 	smlad	r3, r9, r4, r3
 8008b70:	4c34      	ldr	r4, [pc, #208]	; (8008c44 <D48_GENERIC+0x1d8>)
 8008b72:	fb27 3304 	smlad	r3, r7, r4, r3
 8008b76:	2501      	movs	r5, #1
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	fb26 f605 	smuad	r6, r6, r5
 8008b7e:	4b32      	ldr	r3, [pc, #200]	; (8008c48 <D48_GENERIC+0x1dc>)
 8008b80:	fb29 6903 	smlad	r9, r9, r3, r6
 8008b84:	4b31      	ldr	r3, [pc, #196]	; (8008c4c <D48_GENERIC+0x1e0>)
 8008b86:	fb27 9303 	smlad	r3, r7, r3, r9
 8008b8a:	9c05      	ldr	r4, [sp, #20]
 8008b8c:	eb0e 0805 	add.w	r8, lr, r5
 8008b90:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8008b94:	b19c      	cbz	r4, 8008bbe <D48_GENERIC+0x152>
 8008b96:	9c01      	ldr	r4, [sp, #4]
 8008b98:	9d02      	ldr	r5, [sp, #8]
 8008b9a:	4454      	add	r4, sl
 8008b9c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8008ba0:	f8cd a008 	str.w	sl, [sp, #8]
 8008ba4:	1b64      	subs	r4, r4, r5
 8008ba6:	fba4 ab09 	umull	sl, fp, r4, r9
 8008baa:	17e7      	asrs	r7, r4, #31
 8008bac:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8008bb0:	fb09 bb07 	mla	fp, r9, r7, fp
 8008bb4:	f14b 0500 	adc.w	r5, fp, #0
 8008bb8:	006c      	lsls	r4, r5, #1
 8008bba:	46a2      	mov	sl, r4
 8008bbc:	9401      	str	r4, [sp, #4]
 8008bbe:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8008bc0:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8008bc4:	9d03      	ldr	r5, [sp, #12]
 8008bc6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008bca:	fb0e f606 	mul.w	r6, lr, r6
 8008bce:	fa1f fe88 	uxth.w	lr, r8
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	fbc5 780a 	smlal	r7, r8, r5, sl
 8008bda:	4645      	mov	r5, r8
 8008bdc:	10ac      	asrs	r4, r5, #2
 8008bde:	9d04      	ldr	r5, [sp, #16]
 8008be0:	f304 040f 	ssat	r4, #16, r4
 8008be4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8008be8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008bea:	4574      	cmp	r4, lr
 8008bec:	d912      	bls.n	8008c14 <D48_GENERIC+0x1a8>
 8008bee:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8008bf0:	b2e5      	uxtb	r5, r4
 8008bf2:	2c01      	cmp	r4, #1
 8008bf4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8008bf8:	f1c5 0700 	rsb	r7, r5, #0
 8008bfc:	f47f af56 	bne.w	8008aac <D48_GENERIC+0x40>
 8008c00:	9d06      	ldr	r5, [sp, #24]
 8008c02:	e9d0 4600 	ldrd	r4, r6, [r0]
 8008c06:	3006      	adds	r0, #6
 8008c08:	2d00      	cmp	r5, #0
 8008c0a:	f43f af6b 	beq.w	8008ae4 <D48_GENERIC+0x78>
 8008c0e:	ba64      	rev16	r4, r4
 8008c10:	ba76      	rev16	r6, r6
 8008c12:	e767      	b.n	8008ae4 <D48_GENERIC+0x78>
 8008c14:	6093      	str	r3, [r2, #8]
 8008c16:	2000      	movs	r0, #0
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	f8c2 c01c 	str.w	ip, [r2, #28]
 8008c1e:	60d3      	str	r3, [r2, #12]
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	6113      	str	r3, [r2, #16]
 8008c24:	9b02      	ldr	r3, [sp, #8]
 8008c26:	6153      	str	r3, [r2, #20]
 8008c28:	9b07      	ldr	r3, [sp, #28]
 8008c2a:	6193      	str	r3, [r2, #24]
 8008c2c:	b009      	add	sp, #36	; 0x24
 8008c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c32:	bf00      	nop
 8008c34:	24000000 	.word	0x24000000
 8008c38:	000f000a 	.word	0x000f000a
 8008c3c:	00060003 	.word	0x00060003
 8008c40:	00150019 	.word	0x00150019
 8008c44:	00190015 	.word	0x00190015
 8008c48:	00030006 	.word	0x00030006
 8008c4c:	000a000f 	.word	0x000a000f

08008c50 <D64_GENERIC>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	6913      	ldr	r3, [r2, #16]
 8008c56:	b089      	sub	sp, #36	; 0x24
 8008c58:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	6953      	ldr	r3, [r2, #20]
 8008c5e:	9105      	str	r1, [sp, #20]
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8008c64:	6993      	ldr	r3, [r2, #24]
 8008c66:	69d4      	ldr	r4, [r2, #28]
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	9504      	str	r5, [sp, #16]
 8008c6c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8008c70:	2900      	cmp	r1, #0
 8008c72:	f000 80e8 	beq.w	8008e46 <D64_GENERIC+0x1f6>
 8008c76:	6a11      	ldr	r1, [r2, #32]
 8008c78:	2500      	movs	r5, #0
 8008c7a:	46b3      	mov	fp, r6
 8008c7c:	9302      	str	r3, [sp, #8]
 8008c7e:	9106      	str	r1, [sp, #24]
 8008c80:	4978      	ldr	r1, [pc, #480]	; (8008e64 <D64_GENERIC+0x214>)
 8008c82:	e0cc      	b.n	8008e1e <D64_GENERIC+0x1ce>
 8008c84:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8008c88:	f1ce 0c00 	rsb	ip, lr, #0
 8008c8c:	f890 9000 	ldrb.w	r9, [r0]
 8008c90:	eb00 0708 	add.w	r7, r0, r8
 8008c94:	f810 6008 	ldrb.w	r6, [r0, r8]
 8008c98:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8008c9c:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008ca0:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8008ca4:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8008ca8:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8008cac:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8008cb0:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008cb4:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8008cb8:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8008cbc:	0400      	lsls	r0, r0, #16
 8008cbe:	4467      	add	r7, ip
 8008cc0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8008cc4:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008cc8:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8008ccc:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8008cd0:	444e      	add	r6, r9
 8008cd2:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8008cd6:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8008cda:	44c2      	add	sl, r8
 8008cdc:	b2f7      	uxtb	r7, r6
 8008cde:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008ce2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8008ce6:	0e36      	lsrs	r6, r6, #24
 8008ce8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008cec:	fa5f fc8a 	uxtb.w	ip, sl
 8008cf0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8008cf4:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8008cf8:	443c      	add	r4, r7
 8008cfa:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8008cfe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008d02:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8008d06:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8008d0a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008d0e:	4b56      	ldr	r3, [pc, #344]	; (8008e68 <D64_GENERIC+0x218>)
 8008d10:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8008d14:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008d18:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8008d1c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8008d20:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008d24:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8008d28:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8008d2c:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008d30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008d34:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008d38:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008d3c:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8008d40:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008d44:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8008d48:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8008d4c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008d50:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008d54:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8008d58:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d5c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8008d60:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8008d64:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8008d68:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8008d6c:	fb28 b903 	smlad	r9, r8, r3, fp
 8008d70:	4b3e      	ldr	r3, [pc, #248]	; (8008e6c <D64_GENERIC+0x21c>)
 8008d72:	fb26 9903 	smlad	r9, r6, r3, r9
 8008d76:	4b3e      	ldr	r3, [pc, #248]	; (8008e70 <D64_GENERIC+0x220>)
 8008d78:	fb2c 9703 	smlad	r7, ip, r3, r9
 8008d7c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8008d80:	fb2a 7909 	smlad	r9, sl, r9, r7
 8008d84:	4f3b      	ldr	r7, [pc, #236]	; (8008e74 <D64_GENERIC+0x224>)
 8008d86:	9b02      	ldr	r3, [sp, #8]
 8008d88:	fb28 3307 	smlad	r3, r8, r7, r3
 8008d8c:	fb2a 3317 	smladx	r3, sl, r7, r3
 8008d90:	4f39      	ldr	r7, [pc, #228]	; (8008e78 <D64_GENERIC+0x228>)
 8008d92:	fb26 3307 	smlad	r3, r6, r7, r3
 8008d96:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8008d9a:	f04f 0e01 	mov.w	lr, #1
 8008d9e:	fb28 f80e 	smuad	r8, r8, lr
 8008da2:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <D64_GENERIC+0x22c>)
 8008da4:	fb26 8603 	smlad	r6, r6, r3, r8
 8008da8:	4b35      	ldr	r3, [pc, #212]	; (8008e80 <D64_GENERIC+0x230>)
 8008daa:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8008dae:	4b35      	ldr	r3, [pc, #212]	; (8008e84 <D64_GENERIC+0x234>)
 8008db0:	fb2a c303 	smlad	r3, sl, r3, ip
 8008db4:	9f06      	ldr	r7, [sp, #24]
 8008db6:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8008dba:	9302      	str	r3, [sp, #8]
 8008dbc:	b1cf      	cbz	r7, 8008df2 <D64_GENERIC+0x1a2>
 8008dbe:	9b00      	ldr	r3, [sp, #0]
 8008dc0:	444b      	add	r3, r9
 8008dc2:	461e      	mov	r6, r3
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8008dca:	1af6      	subs	r6, r6, r3
 8008dcc:	46b0      	mov	r8, r6
 8008dce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008dd2:	e9cd 8900 	strd	r8, r9, [sp]
 8008dd6:	fba6 8907 	umull	r8, r9, r6, r7
 8008dda:	9e01      	ldr	r6, [sp, #4]
 8008ddc:	fb07 9306 	mla	r3, r7, r6, r9
 8008de0:	4646      	mov	r6, r8
 8008de2:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8008de6:	f143 0700 	adc.w	r7, r3, #0
 8008dea:	fa07 f30e 	lsl.w	r3, r7, lr
 8008dee:	4699      	mov	r9, r3
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8008df6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8008dfa:	9b04      	ldr	r3, [sp, #16]
 8008dfc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008e00:	2700      	movs	r7, #0
 8008e02:	fb05 fc0c 	mul.w	ip, r5, ip
 8008e06:	3501      	adds	r5, #1
 8008e08:	fbc3 6709 	smlal	r6, r7, r3, r9
 8008e0c:	9b05      	ldr	r3, [sp, #20]
 8008e0e:	10be      	asrs	r6, r7, #2
 8008e10:	f306 060f 	ssat	r6, #16, r6
 8008e14:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8008e18:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008e1a:	42ae      	cmp	r6, r5
 8008e1c:	dd11      	ble.n	8008e42 <D64_GENERIC+0x1f2>
 8008e1e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8008e22:	f1be 0f01 	cmp.w	lr, #1
 8008e26:	f47f af2d 	bne.w	8008c84 <D64_GENERIC+0x34>
 8008e2a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8008e2c:	f100 0c08 	add.w	ip, r0, #8
 8008e30:	06bb      	lsls	r3, r7, #26
 8008e32:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8008e36:	d513      	bpl.n	8008e60 <D64_GENERIC+0x210>
 8008e38:	ba76      	rev16	r6, r6
 8008e3a:	fa9a fa9a 	rev16.w	sl, sl
 8008e3e:	4660      	mov	r0, ip
 8008e40:	e74c      	b.n	8008cdc <D64_GENERIC+0x8c>
 8008e42:	465e      	mov	r6, fp
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	6093      	str	r3, [r2, #8]
 8008e48:	2000      	movs	r0, #0
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	60d6      	str	r6, [r2, #12]
 8008e4e:	6113      	str	r3, [r2, #16]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	61d4      	str	r4, [r2, #28]
 8008e54:	6153      	str	r3, [r2, #20]
 8008e56:	9b07      	ldr	r3, [sp, #28]
 8008e58:	6193      	str	r3, [r2, #24]
 8008e5a:	b009      	add	sp, #36	; 0x24
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	4660      	mov	r0, ip
 8008e62:	e73b      	b.n	8008cdc <D64_GENERIC+0x8c>
 8008e64:	24000000 	.word	0x24000000
 8008e68:	001c0015 	.word	0x001c0015
 8008e6c:	000f000a 	.word	0x000f000a
 8008e70:	00060003 	.word	0x00060003
 8008e74:	0024002a 	.word	0x0024002a
 8008e78:	002e0030 	.word	0x002e0030
 8008e7c:	00030006 	.word	0x00030006
 8008e80:	000a000f 	.word	0x000a000f
 8008e84:	0015001c 	.word	0x0015001c

08008e88 <D80_GENERIC>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	b08b      	sub	sp, #44	; 0x2c
 8008e8e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008e90:	9107      	str	r1, [sp, #28]
 8008e92:	6911      	ldr	r1, [r2, #16]
 8008e94:	9104      	str	r1, [sp, #16]
 8008e96:	6951      	ldr	r1, [r2, #20]
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	6991      	ldr	r1, [r2, #24]
 8008e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8008e9e:	69d1      	ldr	r1, [r2, #28]
 8008ea0:	9102      	str	r1, [sp, #8]
 8008ea2:	6891      	ldr	r1, [r2, #8]
 8008ea4:	9103      	str	r1, [sp, #12]
 8008ea6:	68d1      	ldr	r1, [r2, #12]
 8008ea8:	9101      	str	r1, [sp, #4]
 8008eaa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008eac:	9106      	str	r1, [sp, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 810b 	beq.w	80090ca <D80_GENERIC+0x242>
 8008eb4:	6a13      	ldr	r3, [r2, #32]
 8008eb6:	f04f 0800 	mov.w	r8, #0
 8008eba:	f8df c260 	ldr.w	ip, [pc, #608]	; 800911c <D80_GENERIC+0x294>
 8008ebe:	9308      	str	r3, [sp, #32]
 8008ec0:	9200      	str	r2, [sp, #0]
 8008ec2:	e0ee      	b.n	80090a2 <D80_GENERIC+0x21a>
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f890 e000 	ldrb.w	lr, [r0]
 8008eca:	b219      	sxth	r1, r3
 8008ecc:	425c      	negs	r4, r3
 8008ece:	f810 9003 	ldrb.w	r9, [r0, r3]
 8008ed2:	004e      	lsls	r6, r1, #1
 8008ed4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008ed8:	4431      	add	r1, r6
 8008eda:	1843      	adds	r3, r0, r1
 8008edc:	f810 b001 	ldrb.w	fp, [r0, r1]
 8008ee0:	1919      	adds	r1, r3, r4
 8008ee2:	5d1b      	ldrb	r3, [r3, r4]
 8008ee4:	1948      	adds	r0, r1, r5
 8008ee6:	f811 a005 	ldrb.w	sl, [r1, r5]
 8008eea:	041b      	lsls	r3, r3, #16
 8008eec:	1907      	adds	r7, r0, r4
 8008eee:	5d01      	ldrb	r1, [r0, r4]
 8008ef0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008ef4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8008ef8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8008efc:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8008f00:	0409      	lsls	r1, r1, #16
 8008f02:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8008f06:	eb0b 0905 	add.w	r9, fp, r5
 8008f0a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008f0e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8008f12:	eb09 0b04 	add.w	fp, r9, r4
 8008f16:	f819 4004 	ldrb.w	r4, [r9, r4]
 8008f1a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008f1e:	4473      	add	r3, lr
 8008f20:	eb0b 0006 	add.w	r0, fp, r6
 8008f24:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8008f28:	4439      	add	r1, r7
 8008f2a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8008f2e:	b2df      	uxtb	r7, r3
 8008f30:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8008f34:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8008f38:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8008f3c:	fa5f fa81 	uxtb.w	sl, r1
 8008f40:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008f44:	9c02      	ldr	r4, [sp, #8]
 8008f46:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8008f4a:	441c      	add	r4, r3
 8008f4c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8008f50:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8008f54:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008f58:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008f5c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8008f60:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008f64:	b2ed      	uxtb	r5, r5
 8008f66:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008f6a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008f6e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8008f72:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008f76:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008f7a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8008f7e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8008f82:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008f86:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8008f8a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008f8e:	0e09      	lsrs	r1, r1, #24
 8008f90:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008f94:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008f98:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008f9c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008fa0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008fa4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008fa8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008fac:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008fb0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008fb4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8008fb8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008fbc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008fc0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008fc4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008fc8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008fcc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8008fd0:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8008fd4:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008fde:	4a43      	ldr	r2, [pc, #268]	; (80090ec <D80_GENERIC+0x264>)
 8008fe0:	9f01      	ldr	r7, [sp, #4]
 8008fe2:	fb23 7a02 	smlad	sl, r3, r2, r7
 8008fe6:	4a42      	ldr	r2, [pc, #264]	; (80090f0 <D80_GENERIC+0x268>)
 8008fe8:	fb26 aa02 	smlad	sl, r6, r2, sl
 8008fec:	4a41      	ldr	r2, [pc, #260]	; (80090f4 <D80_GENERIC+0x26c>)
 8008fee:	fb24 aa02 	smlad	sl, r4, r2, sl
 8008ff2:	4a41      	ldr	r2, [pc, #260]	; (80090f8 <D80_GENERIC+0x270>)
 8008ff4:	fb21 a702 	smlad	r7, r1, r2, sl
 8008ff8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008ffc:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8009000:	4a3e      	ldr	r2, [pc, #248]	; (80090fc <D80_GENERIC+0x274>)
 8009002:	9f03      	ldr	r7, [sp, #12]
 8009004:	fb23 7e02 	smlad	lr, r3, r2, r7
 8009008:	4a3d      	ldr	r2, [pc, #244]	; (8009100 <D80_GENERIC+0x278>)
 800900a:	fb26 ee02 	smlad	lr, r6, r2, lr
 800900e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8009012:	fb24 e707 	smlad	r7, r4, r7, lr
 8009016:	4a3b      	ldr	r2, [pc, #236]	; (8009104 <D80_GENERIC+0x27c>)
 8009018:	fb21 7702 	smlad	r7, r1, r2, r7
 800901c:	4a3a      	ldr	r2, [pc, #232]	; (8009108 <D80_GENERIC+0x280>)
 800901e:	fb25 7202 	smlad	r2, r5, r2, r7
 8009022:	f04f 0901 	mov.w	r9, #1
 8009026:	9201      	str	r2, [sp, #4]
 8009028:	fb23 f909 	smuad	r9, r3, r9
 800902c:	4b37      	ldr	r3, [pc, #220]	; (800910c <D80_GENERIC+0x284>)
 800902e:	fb26 9603 	smlad	r6, r6, r3, r9
 8009032:	4f37      	ldr	r7, [pc, #220]	; (8009110 <D80_GENERIC+0x288>)
 8009034:	fb24 6407 	smlad	r4, r4, r7, r6
 8009038:	4f36      	ldr	r7, [pc, #216]	; (8009114 <D80_GENERIC+0x28c>)
 800903a:	fb21 4707 	smlad	r7, r1, r7, r4
 800903e:	4936      	ldr	r1, [pc, #216]	; (8009118 <D80_GENERIC+0x290>)
 8009040:	fb25 7301 	smlad	r3, r5, r1, r7
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800904a:	9b08      	ldr	r3, [sp, #32]
 800904c:	b193      	cbz	r3, 8009074 <D80_GENERIC+0x1ec>
 800904e:	9a04      	ldr	r2, [sp, #16]
 8009050:	4452      	add	r2, sl
 8009052:	4614      	mov	r4, r2
 8009054:	9a05      	ldr	r2, [sp, #20]
 8009056:	f8cd a014 	str.w	sl, [sp, #20]
 800905a:	1aa4      	subs	r4, r4, r2
 800905c:	fba4 1203 	umull	r1, r2, r4, r3
 8009060:	17e7      	asrs	r7, r4, #31
 8009062:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8009066:	fb03 2207 	mla	r2, r3, r7, r2
 800906a:	f142 0500 	adc.w	r5, r2, #0
 800906e:	006b      	lsls	r3, r5, #1
 8009070:	469a      	mov	sl, r3
 8009072:	9304      	str	r3, [sp, #16]
 8009074:	9e00      	ldr	r6, [sp, #0]
 8009076:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800907a:	9a06      	ldr	r2, [sp, #24]
 800907c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009080:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8009082:	2500      	movs	r5, #0
 8009084:	fb08 f303 	mul.w	r3, r8, r3
 8009088:	fbc2 450a 	smlal	r4, r5, r2, sl
 800908c:	9a07      	ldr	r2, [sp, #28]
 800908e:	f108 0801 	add.w	r8, r8, #1
 8009092:	10a9      	asrs	r1, r5, #2
 8009094:	f301 010f 	ssat	r1, #16, r1
 8009098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800909c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800909e:	4543      	cmp	r3, r8
 80090a0:	dd12      	ble.n	80090c8 <D80_GENERIC+0x240>
 80090a2:	9b00      	ldr	r3, [sp, #0]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	f47f af0c 	bne.w	8008ec4 <D80_GENERIC+0x3c>
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	6885      	ldr	r5, [r0, #8]
 80090b0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80090b2:	06b2      	lsls	r2, r6, #26
 80090b4:	e9d0 3100 	ldrd	r3, r1, [r0]
 80090b8:	f100 000a 	add.w	r0, r0, #10
 80090bc:	f57f af35 	bpl.w	8008f2a <D80_GENERIC+0xa2>
 80090c0:	ba5b      	rev16	r3, r3
 80090c2:	ba49      	rev16	r1, r1
 80090c4:	ba6d      	rev16	r5, r5
 80090c6:	e730      	b.n	8008f2a <D80_GENERIC+0xa2>
 80090c8:	4632      	mov	r2, r6
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	2000      	movs	r0, #0
 80090ce:	6093      	str	r3, [r2, #8]
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	60d3      	str	r3, [r2, #12]
 80090d4:	9b02      	ldr	r3, [sp, #8]
 80090d6:	61d3      	str	r3, [r2, #28]
 80090d8:	9b04      	ldr	r3, [sp, #16]
 80090da:	6113      	str	r3, [r2, #16]
 80090dc:	9b05      	ldr	r3, [sp, #20]
 80090de:	6153      	str	r3, [r2, #20]
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	6193      	str	r3, [r2, #24]
 80090e4:	b00b      	add	sp, #44	; 0x2c
 80090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	bf00      	nop
 80090ec:	002d0024 	.word	0x002d0024
 80090f0:	001c0015 	.word	0x001c0015
 80090f4:	000f000a 	.word	0x000f000a
 80090f8:	00060003 	.word	0x00060003
 80090fc:	0037003f 	.word	0x0037003f
 8009100:	00450049 	.word	0x00450049
 8009104:	00490045 	.word	0x00490045
 8009108:	003f0037 	.word	0x003f0037
 800910c:	00030006 	.word	0x00030006
 8009110:	000a000f 	.word	0x000a000f
 8009114:	0015001c 	.word	0x0015001c
 8009118:	0024002d 	.word	0x0024002d
 800911c:	24000000 	.word	0x24000000

08009120 <D128_GENERIC>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	b08d      	sub	sp, #52	; 0x34
 8009126:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009128:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800912c:	9109      	str	r1, [sp, #36]	; 0x24
 800912e:	6911      	ldr	r1, [r2, #16]
 8009130:	9201      	str	r2, [sp, #4]
 8009132:	9106      	str	r1, [sp, #24]
 8009134:	6951      	ldr	r1, [r2, #20]
 8009136:	9107      	str	r1, [sp, #28]
 8009138:	6991      	ldr	r1, [r2, #24]
 800913a:	910b      	str	r1, [sp, #44]	; 0x2c
 800913c:	6891      	ldr	r1, [r2, #8]
 800913e:	9103      	str	r1, [sp, #12]
 8009140:	68d1      	ldr	r1, [r2, #12]
 8009142:	9102      	str	r1, [sp, #8]
 8009144:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009146:	9108      	str	r1, [sp, #32]
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 8183 	beq.w	8009454 <D128_GENERIC+0x334>
 800914e:	2300      	movs	r3, #0
 8009150:	6a12      	ldr	r2, [r2, #32]
 8009152:	4681      	mov	r9, r0
 8009154:	920a      	str	r2, [sp, #40]	; 0x28
 8009156:	e9cd a304 	strd	sl, r3, [sp, #16]
 800915a:	e165      	b.n	8009428 <D128_GENERIC+0x308>
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	f899 b000 	ldrb.w	fp, [r9]
 8009162:	b213      	sxth	r3, r2
 8009164:	4255      	negs	r5, r2
 8009166:	f819 0002 	ldrb.w	r0, [r9, r2]
 800916a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800916e:	009f      	lsls	r7, r3, #2
 8009170:	eb09 0402 	add.w	r4, r9, r2
 8009174:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009178:	f819 8002 	ldrb.w	r8, [r9, r2]
 800917c:	443b      	add	r3, r7
 800917e:	1962      	adds	r2, r4, r5
 8009180:	5d64      	ldrb	r4, [r4, r5]
 8009182:	eb02 0c03 	add.w	ip, r2, r3
 8009186:	0424      	lsls	r4, r4, #16
 8009188:	5cd3      	ldrb	r3, [r2, r3]
 800918a:	eb0c 0e05 	add.w	lr, ip, r5
 800918e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8009192:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8009196:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800919a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800919e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80091a2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80091a6:	eb0c 0e06 	add.w	lr, ip, r6
 80091aa:	f81c a006 	ldrb.w	sl, [ip, r6]
 80091ae:	0412      	lsls	r2, r2, #16
 80091b0:	445c      	add	r4, fp
 80091b2:	eb0e 0c05 	add.w	ip, lr, r5
 80091b6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80091ba:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80091be:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80091c2:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80091cc:	eb00 0b06 	add.w	fp, r0, r6
 80091d0:	5d80      	ldrb	r0, [r0, r6]
 80091d2:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80091d6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80091da:	eb0b 0a05 	add.w	sl, fp, r5
 80091de:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 80091e2:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 80091e6:	0436      	lsls	r6, r6, #16
 80091e8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 80091ec:	4442      	add	r2, r8
 80091ee:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 80091f2:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 80091f6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80091fa:	44b9      	add	r9, r7
 80091fc:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009200:	4463      	add	r3, ip
 8009202:	eb06 0508 	add.w	r5, r6, r8
 8009206:	b2e7      	uxtb	r7, r4
 8009208:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800920c:	499b      	ldr	r1, [pc, #620]	; (800947c <D128_GENERIC+0x35c>)
 800920e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8009212:	0e24      	lsrs	r4, r4, #24
 8009214:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009218:	b2d7      	uxtb	r7, r2
 800921a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800921e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8009222:	9904      	ldr	r1, [sp, #16]
 8009224:	4461      	add	r1, ip
 8009226:	468c      	mov	ip, r1
 8009228:	4994      	ldr	r1, [pc, #592]	; (800947c <D128_GENERIC+0x35c>)
 800922a:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800922e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009232:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8009236:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800923a:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800923e:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8009242:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8009246:	0e12      	lsrs	r2, r2, #24
 8009248:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800924c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009250:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009254:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009258:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800925c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009260:	b2da      	uxtb	r2, r3
 8009262:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009266:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800926a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800926e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009272:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8009276:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800927a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800927e:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8009282:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009286:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800928a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800928e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009292:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009296:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800929a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800929e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80092a2:	0e1b      	lsrs	r3, r3, #24
 80092a4:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 80092a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80092ac:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80092b0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80092b4:	b2eb      	uxtb	r3, r5
 80092b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80092ba:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80092be:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80092c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092c6:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80092ca:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 80092ce:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80092d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80092d6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80092da:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 80092de:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 80092e2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80092e6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80092ea:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80092ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80092f2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80092f6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80092fa:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 80092fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8009302:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8009306:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800930a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800930e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009312:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8009316:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800931a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800931e:	9104      	str	r1, [sp, #16]
 8009320:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009324:	9902      	ldr	r1, [sp, #8]
 8009326:	4a56      	ldr	r2, [pc, #344]	; (8009480 <D128_GENERIC+0x360>)
 8009328:	fb2b 1202 	smlad	r2, fp, r2, r1
 800932c:	4955      	ldr	r1, [pc, #340]	; (8009484 <D128_GENERIC+0x364>)
 800932e:	fb28 2201 	smlad	r2, r8, r1, r2
 8009332:	4955      	ldr	r1, [pc, #340]	; (8009488 <D128_GENERIC+0x368>)
 8009334:	fb27 2201 	smlad	r2, r7, r1, r2
 8009338:	4954      	ldr	r1, [pc, #336]	; (800948c <D128_GENERIC+0x36c>)
 800933a:	fb26 2201 	smlad	r2, r6, r1, r2
 800933e:	4954      	ldr	r1, [pc, #336]	; (8009490 <D128_GENERIC+0x370>)
 8009340:	fb24 2201 	smlad	r2, r4, r1, r2
 8009344:	4953      	ldr	r1, [pc, #332]	; (8009494 <D128_GENERIC+0x374>)
 8009346:	fb20 2201 	smlad	r2, r0, r1, r2
 800934a:	4953      	ldr	r1, [pc, #332]	; (8009498 <D128_GENERIC+0x378>)
 800934c:	fb23 2201 	smlad	r2, r3, r1, r2
 8009350:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009354:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009358:	4950      	ldr	r1, [pc, #320]	; (800949c <D128_GENERIC+0x37c>)
 800935a:	9a03      	ldr	r2, [sp, #12]
 800935c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009360:	4a4f      	ldr	r2, [pc, #316]	; (80094a0 <D128_GENERIC+0x380>)
 8009362:	fb28 ce02 	smlad	lr, r8, r2, ip
 8009366:	f8df c150 	ldr.w	ip, [pc, #336]	; 80094b8 <D128_GENERIC+0x398>
 800936a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800936e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80094bc <D128_GENERIC+0x39c>
 8009372:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8009376:	f8df e148 	ldr.w	lr, [pc, #328]	; 80094c0 <D128_GENERIC+0x3a0>
 800937a:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800937e:	f8df c144 	ldr.w	ip, [pc, #324]	; 80094c4 <D128_GENERIC+0x3a4>
 8009382:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009386:	f8df c140 	ldr.w	ip, [pc, #320]	; 80094c8 <D128_GENERIC+0x3a8>
 800938a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800938e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80094cc <D128_GENERIC+0x3ac>
 8009392:	fb25 c20e 	smlad	r2, r5, lr, ip
 8009396:	f04f 0c01 	mov.w	ip, #1
 800939a:	9202      	str	r2, [sp, #8]
 800939c:	fb2b fb0c 	smuad	fp, fp, ip
 80093a0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80094d0 <D128_GENERIC+0x3b0>
 80093a4:	fb28 bb0c 	smlad	fp, r8, ip, fp
 80093a8:	f8df c128 	ldr.w	ip, [pc, #296]	; 80094d4 <D128_GENERIC+0x3b4>
 80093ac:	fb27 bb0c 	smlad	fp, r7, ip, fp
 80093b0:	4f3c      	ldr	r7, [pc, #240]	; (80094a4 <D128_GENERIC+0x384>)
 80093b2:	fb26 bb07 	smlad	fp, r6, r7, fp
 80093b6:	4f3c      	ldr	r7, [pc, #240]	; (80094a8 <D128_GENERIC+0x388>)
 80093b8:	fb24 bb07 	smlad	fp, r4, r7, fp
 80093bc:	4f3b      	ldr	r7, [pc, #236]	; (80094ac <D128_GENERIC+0x38c>)
 80093be:	fb20 bb07 	smlad	fp, r0, r7, fp
 80093c2:	4f3b      	ldr	r7, [pc, #236]	; (80094b0 <D128_GENERIC+0x390>)
 80093c4:	fb23 bb07 	smlad	fp, r3, r7, fp
 80093c8:	4b3a      	ldr	r3, [pc, #232]	; (80094b4 <D128_GENERIC+0x394>)
 80093ca:	fb25 b303 	smlad	r3, r5, r3, fp
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 80093d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d6:	b183      	cbz	r3, 80093fa <D128_GENERIC+0x2da>
 80093d8:	9a06      	ldr	r2, [sp, #24]
 80093da:	9907      	ldr	r1, [sp, #28]
 80093dc:	4422      	add	r2, r4
 80093de:	9407      	str	r4, [sp, #28]
 80093e0:	1a52      	subs	r2, r2, r1
 80093e2:	fba2 0103 	umull	r0, r1, r2, r3
 80093e6:	17d5      	asrs	r5, r2, #31
 80093e8:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 80093ec:	fb03 1105 	mla	r1, r3, r5, r1
 80093f0:	f141 0300 	adc.w	r3, r1, #0
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	461c      	mov	r4, r3
 80093f8:	9306      	str	r3, [sp, #24]
 80093fa:	9d01      	ldr	r5, [sp, #4]
 80093fc:	01e4      	lsls	r4, r4, #7
 80093fe:	9e05      	ldr	r6, [sp, #20]
 8009400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009404:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8009406:	2300      	movs	r3, #0
 8009408:	9908      	ldr	r1, [sp, #32]
 800940a:	fb06 f000 	mul.w	r0, r6, r0
 800940e:	3601      	adds	r6, #1
 8009410:	fbc1 2304 	smlal	r2, r3, r1, r4
 8009414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009416:	109b      	asrs	r3, r3, #2
 8009418:	9605      	str	r6, [sp, #20]
 800941a:	f303 030f 	ssat	r3, #16, r3
 800941e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8009422:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8009424:	42b3      	cmp	r3, r6
 8009426:	dd13      	ble.n	8009450 <D128_GENERIC+0x330>
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800942c:	2a01      	cmp	r2, #1
 800942e:	f47f ae95 	bne.w	800915c <D128_GENERIC+0x3c>
 8009432:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009434:	f109 0610 	add.w	r6, r9, #16
 8009438:	0681      	lsls	r1, r0, #26
 800943a:	e9d9 4200 	ldrd	r4, r2, [r9]
 800943e:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009442:	d518      	bpl.n	8009476 <D128_GENERIC+0x356>
 8009444:	ba64      	rev16	r4, r4
 8009446:	ba52      	rev16	r2, r2
 8009448:	ba5b      	rev16	r3, r3
 800944a:	ba6d      	rev16	r5, r5
 800944c:	46b1      	mov	r9, r6
 800944e:	e6da      	b.n	8009206 <D128_GENERIC+0xe6>
 8009450:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	2000      	movs	r0, #0
 8009458:	9903      	ldr	r1, [sp, #12]
 800945a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800945c:	6099      	str	r1, [r3, #8]
 800945e:	9902      	ldr	r1, [sp, #8]
 8009460:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009464:	60d9      	str	r1, [r3, #12]
 8009466:	9906      	ldr	r1, [sp, #24]
 8009468:	619a      	str	r2, [r3, #24]
 800946a:	6119      	str	r1, [r3, #16]
 800946c:	9907      	ldr	r1, [sp, #28]
 800946e:	6159      	str	r1, [r3, #20]
 8009470:	b00d      	add	sp, #52	; 0x34
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	46b1      	mov	r9, r6
 8009478:	e6c5      	b.n	8009206 <D128_GENERIC+0xe6>
 800947a:	bf00      	nop
 800947c:	24000000 	.word	0x24000000
 8009480:	00780069 	.word	0x00780069
 8009484:	005b004e 	.word	0x005b004e
 8009488:	00420037 	.word	0x00420037
 800948c:	002d0024 	.word	0x002d0024
 8009490:	001c0015 	.word	0x001c0015
 8009494:	000f000a 	.word	0x000f000a
 8009498:	00060003 	.word	0x00060003
 800949c:	00880096 	.word	0x00880096
 80094a0:	00a200ac 	.word	0x00a200ac
 80094a4:	0015001c 	.word	0x0015001c
 80094a8:	0024002d 	.word	0x0024002d
 80094ac:	00370042 	.word	0x00370042
 80094b0:	004e005b 	.word	0x004e005b
 80094b4:	00690078 	.word	0x00690078
 80094b8:	00b400ba 	.word	0x00b400ba
 80094bc:	00be00c0 	.word	0x00be00c0
 80094c0:	00c000be 	.word	0x00c000be
 80094c4:	00ba00b4 	.word	0x00ba00b4
 80094c8:	00ac00a2 	.word	0x00ac00a2
 80094cc:	00960088 	.word	0x00960088
 80094d0:	00030006 	.word	0x00030006
 80094d4:	000a000f 	.word	0x000a000f

080094d8 <D16_1CH_HTONS_VOL_HP>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	6993      	ldr	r3, [r2, #24]
 80094de:	b087      	sub	sp, #28
 80094e0:	4682      	mov	sl, r0
 80094e2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 80094ea:	69d3      	ldr	r3, [r2, #28]
 80094ec:	f8d2 e020 	ldr.w	lr, [r2, #32]
 80094f0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80094f4:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 80094f8:	9403      	str	r4, [sp, #12]
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d054      	beq.n	80095a8 <D16_1CH_HTONS_VOL_HP+0xd0>
 80094fe:	f1a1 0902 	sub.w	r9, r1, #2
 8009502:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8009506:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80095b4 <D16_1CH_HTONS_VOL_HP+0xdc>
 800950a:	4650      	mov	r0, sl
 800950c:	9101      	str	r1, [sp, #4]
 800950e:	4619      	mov	r1, r3
 8009510:	f8cd b008 	str.w	fp, [sp, #8]
 8009514:	9205      	str	r2, [sp, #20]
 8009516:	f850 3b02 	ldr.w	r3, [r0], #2
 800951a:	ba5b      	rev16	r3, r3
 800951c:	b2dc      	uxtb	r4, r3
 800951e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009526:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800952a:	4419      	add	r1, r3
 800952c:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009530:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009534:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009538:	0aa1      	lsrs	r1, r4, #10
 800953a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800953e:	4a1b      	ldr	r2, [pc, #108]	; (80095ac <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009540:	fb23 5402 	smlad	r4, r3, r2, r5
 8009544:	4a1a      	ldr	r2, [pc, #104]	; (80095b0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009546:	fb23 f502 	smuad	r5, r3, r2
 800954a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800954e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009552:	f04f 0b00 	mov.w	fp, #0
 8009556:	19a2      	adds	r2, r4, r6
 8009558:	eba2 020c 	sub.w	r2, r2, ip
 800955c:	46a4      	mov	ip, r4
 800955e:	17d7      	asrs	r7, r2, #31
 8009560:	fba2 230e 	umull	r2, r3, r2, lr
 8009564:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009568:	fb0e 3307 	mla	r3, lr, r7, r3
 800956c:	f143 0700 	adc.w	r7, r3, #0
 8009570:	9b02      	ldr	r3, [sp, #8]
 8009572:	047a      	lsls	r2, r7, #17
 8009574:	007e      	lsls	r6, r7, #1
 8009576:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800957a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800957e:	f303 030f 	ssat	r3, #16, r3
 8009582:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	4298      	cmp	r0, r3
 800958a:	d1c4      	bne.n	8009516 <D16_1CH_HTONS_VOL_HP+0x3e>
 800958c:	460b      	mov	r3, r1
 800958e:	9a05      	ldr	r2, [sp, #20]
 8009590:	2000      	movs	r0, #0
 8009592:	9903      	ldr	r1, [sp, #12]
 8009594:	61d3      	str	r3, [r2, #28]
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	6095      	str	r5, [r2, #8]
 800959a:	60d1      	str	r1, [r2, #12]
 800959c:	6193      	str	r3, [r2, #24]
 800959e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80095a2:	b007      	add	sp, #28
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	4664      	mov	r4, ip
 80095aa:	e7f1      	b.n	8009590 <D16_1CH_HTONS_VOL_HP+0xb8>
 80095ac:	00030001 	.word	0x00030001
 80095b0:	00010003 	.word	0x00010003
 80095b4:	24000000 	.word	0x24000000

080095b8 <D24_1CH_HTONS_VOL_HP>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80095be:	b089      	sub	sp, #36	; 0x24
 80095c0:	6993      	ldr	r3, [r2, #24]
 80095c2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80095c4:	9604      	str	r6, [sp, #16]
 80095c6:	6a16      	ldr	r6, [r2, #32]
 80095c8:	9306      	str	r3, [sp, #24]
 80095ca:	9505      	str	r5, [sp, #20]
 80095cc:	69d3      	ldr	r3, [r2, #28]
 80095ce:	9600      	str	r6, [sp, #0]
 80095d0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80095d4:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 80095d8:	2d00      	cmp	r5, #0
 80095da:	f000 8083 	beq.w	80096e4 <D24_1CH_HTONS_VOL_HP+0x12c>
 80095de:	9207      	str	r2, [sp, #28]
 80095e0:	2600      	movs	r6, #0
 80095e2:	4622      	mov	r2, r4
 80095e4:	f1a1 0b02 	sub.w	fp, r1, #2
 80095e8:	4f3f      	ldr	r7, [pc, #252]	; (80096e8 <D24_1CH_HTONS_VOL_HP+0x130>)
 80095ea:	461d      	mov	r5, r3
 80095ec:	f8cd a00c 	str.w	sl, [sp, #12]
 80095f0:	9c00      	ldr	r4, [sp, #0]
 80095f2:	e056      	b.n	80096a2 <D24_1CH_HTONS_VOL_HP+0xea>
 80095f4:	7841      	ldrb	r1, [r0, #1]
 80095f6:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 80095fa:	3002      	adds	r0, #2
 80095fc:	4488      	add	r8, r1
 80095fe:	fa5f f388 	uxtb.w	r3, r8
 8009602:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009606:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800960a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800960e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009612:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009616:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800961a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800961e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009622:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009626:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800962a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800962e:	492f      	ldr	r1, [pc, #188]	; (80096ec <D24_1CH_HTONS_VOL_HP+0x134>)
 8009630:	fb23 e901 	smlad	r9, r3, r1, lr
 8009634:	492e      	ldr	r1, [pc, #184]	; (80096f0 <D24_1CH_HTONS_VOL_HP+0x138>)
 8009636:	fb23 ce01 	smlad	lr, r3, r1, ip
 800963a:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800963e:	2101      	movs	r1, #1
 8009640:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009644:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009648:	fb23 f301 	smuad	r3, r3, r1
 800964c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009650:	eb08 0c03 	add.w	ip, r8, r3
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	f04f 0a00 	mov.w	sl, #0
 800965a:	440a      	add	r2, r1
 800965c:	3601      	adds	r6, #1
 800965e:	9103      	str	r1, [sp, #12]
 8009660:	1ad2      	subs	r2, r2, r3
 8009662:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009666:	fba2 2304 	umull	r2, r3, r2, r4
 800966a:	e9cd 2300 	strd	r2, r3, [sp]
 800966e:	fb04 3309 	mla	r3, r4, r9, r3
 8009672:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800967c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009680:	f143 0300 	adc.w	r3, r3, #0
 8009684:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009688:	005a      	lsls	r2, r3, #1
 800968a:	9b04      	ldr	r3, [sp, #16]
 800968c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009690:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009694:	f303 030f 	ssat	r3, #16, r3
 8009698:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800969c:	9b05      	ldr	r3, [sp, #20]
 800969e:	429e      	cmp	r6, r3
 80096a0:	d010      	beq.n	80096c4 <D24_1CH_HTONS_VOL_HP+0x10c>
 80096a2:	f890 9003 	ldrb.w	r9, [r0, #3]
 80096a6:	f016 0f01 	tst.w	r6, #1
 80096aa:	7801      	ldrb	r1, [r0, #0]
 80096ac:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80096b0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80096b4:	d09e      	beq.n	80095f4 <D24_1CH_HTONS_VOL_HP+0x3c>
 80096b6:	f890 8002 	ldrb.w	r8, [r0, #2]
 80096ba:	3004      	adds	r0, #4
 80096bc:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80096c0:	4488      	add	r8, r1
 80096c2:	e79c      	b.n	80095fe <D24_1CH_HTONS_VOL_HP+0x46>
 80096c4:	4614      	mov	r4, r2
 80096c6:	462b      	mov	r3, r5
 80096c8:	9a07      	ldr	r2, [sp, #28]
 80096ca:	2000      	movs	r0, #0
 80096cc:	61d3      	str	r3, [r2, #28]
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	f8c2 c008 	str.w	ip, [r2, #8]
 80096d4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80096d8:	6193      	str	r3, [r2, #24]
 80096da:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80096de:	b009      	add	sp, #36	; 0x24
 80096e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	4651      	mov	r1, sl
 80096e6:	e7f0      	b.n	80096ca <D24_1CH_HTONS_VOL_HP+0x112>
 80096e8:	24000000 	.word	0x24000000
 80096ec:	00030001 	.word	0x00030001
 80096f0:	00060007 	.word	0x00060007

080096f4 <D32_1CH_HTONS_VOL_HP>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	6993      	ldr	r3, [r2, #24]
 80096fa:	b087      	sub	sp, #28
 80096fc:	4683      	mov	fp, r0
 80096fe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	69d5      	ldr	r5, [r2, #28]
 8009704:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009706:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800970a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800970e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009712:	2800      	cmp	r0, #0
 8009714:	d077      	beq.n	8009806 <D32_1CH_HTONS_VOL_HP+0x112>
 8009716:	460f      	mov	r7, r1
 8009718:	46f1      	mov	r9, lr
 800971a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800971e:	f8cd 8000 	str.w	r8, [sp]
 8009722:	4e3a      	ldr	r6, [pc, #232]	; (800980c <D32_1CH_HTONS_VOL_HP+0x118>)
 8009724:	469e      	mov	lr, r3
 8009726:	46a0      	mov	r8, r4
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	9205      	str	r2, [sp, #20]
 800972c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009730:	ba64      	rev16	r4, r4
 8009732:	b2e0      	uxtb	r0, r4
 8009734:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009738:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800973c:	0e24      	lsrs	r4, r4, #24
 800973e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009742:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009746:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800974a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800974e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8009752:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009756:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800975a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800975e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009762:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009766:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800976a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800976e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8009772:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009776:	4826      	ldr	r0, [pc, #152]	; (8009810 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8009778:	fb23 c400 	smlad	r4, r3, r0, ip
 800977c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009780:	fb21 4402 	smlad	r4, r1, r2, r4
 8009784:	4823      	ldr	r0, [pc, #140]	; (8009814 <D32_1CH_HTONS_VOL_HP+0x120>)
 8009786:	fb23 ec00 	smlad	ip, r3, r0, lr
 800978a:	4823      	ldr	r0, [pc, #140]	; (8009818 <D32_1CH_HTONS_VOL_HP+0x124>)
 800978c:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009790:	2201      	movs	r2, #1
 8009792:	fb23 f302 	smuad	r3, r3, r2
 8009796:	4821      	ldr	r0, [pc, #132]	; (800981c <D32_1CH_HTONS_VOL_HP+0x128>)
 8009798:	fb21 3e00 	smlad	lr, r1, r0, r3
 800979c:	9b00      	ldr	r3, [sp, #0]
 800979e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 80097a2:	4423      	add	r3, r4
 80097a4:	eba3 0209 	sub.w	r2, r3, r9
 80097a8:	46a1      	mov	r9, r4
 80097aa:	17d1      	asrs	r1, r2, #31
 80097ac:	fba2 230a 	umull	r2, r3, r2, sl
 80097b0:	e9cd 2300 	strd	r2, r3, [sp]
 80097b4:	fb0a 3301 	mla	r3, sl, r1, r3
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097be:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80097c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097c6:	f143 0300 	adc.w	r3, r3, #0
 80097ca:	0399      	lsls	r1, r3, #14
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	2300      	movs	r3, #0
 80097d2:	fbc8 2301 	smlal	r2, r3, r8, r1
 80097d6:	109b      	asrs	r3, r3, #2
 80097d8:	f303 030f 	ssat	r3, #16, r3
 80097dc:	f827 3b02 	strh.w	r3, [r7], #2
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	429f      	cmp	r7, r3
 80097e4:	d1a2      	bne.n	800972c <D32_1CH_HTONS_VOL_HP+0x38>
 80097e6:	4673      	mov	r3, lr
 80097e8:	f8dd 8000 	ldr.w	r8, [sp]
 80097ec:	9a05      	ldr	r2, [sp, #20]
 80097ee:	6093      	str	r3, [r2, #8]
 80097f0:	2000      	movs	r0, #0
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80097f8:	61d5      	str	r5, [r2, #28]
 80097fa:	6193      	str	r3, [r2, #24]
 80097fc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009800:	b007      	add	sp, #28
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	4674      	mov	r4, lr
 8009808:	e7f1      	b.n	80097ee <D32_1CH_HTONS_VOL_HP+0xfa>
 800980a:	bf00      	nop
 800980c:	24000000 	.word	0x24000000
 8009810:	00060003 	.word	0x00060003
 8009814:	000a000c 	.word	0x000a000c
 8009818:	000c000a 	.word	0x000c000a
 800981c:	00030006 	.word	0x00030006

08009820 <D48_1CH_HTONS_VOL_HP>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8009826:	b087      	sub	sp, #28
 8009828:	6993      	ldr	r3, [r2, #24]
 800982a:	9701      	str	r7, [sp, #4]
 800982c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800982e:	6a17      	ldr	r7, [r2, #32]
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	69d6      	ldr	r6, [r2, #28]
 8009834:	9702      	str	r7, [sp, #8]
 8009836:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800983a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800983e:	2d00      	cmp	r5, #0
 8009840:	f000 8093 	beq.w	800996a <D48_1CH_HTONS_VOL_HP+0x14a>
 8009844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009848:	f1a1 0b02 	sub.w	fp, r1, #2
 800984c:	46f2      	mov	sl, lr
 800984e:	4f48      	ldr	r7, [pc, #288]	; (8009970 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009850:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8009854:	469e      	mov	lr, r3
 8009856:	9205      	str	r2, [sp, #20]
 8009858:	9103      	str	r1, [sp, #12]
 800985a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800985e:	3006      	adds	r0, #6
 8009860:	ba5b      	rev16	r3, r3
 8009862:	fa92 f992 	rev16.w	r9, r2
 8009866:	b2dd      	uxtb	r5, r3
 8009868:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800986c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009870:	0e1b      	lsrs	r3, r3, #24
 8009872:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8009876:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800987a:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800987e:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8009882:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009886:	fa5f f289 	uxtb.w	r2, r9
 800988a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800988e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8009892:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009896:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800989a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800989e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80098a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80098a6:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80098aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80098ae:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80098b2:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80098b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ba:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80098be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80098c2:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80098c6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80098ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <D48_1CH_HTONS_VOL_HP+0x154>)
 80098d0:	fb28 c103 	smlad	r1, r8, r3, ip
 80098d4:	4b28      	ldr	r3, [pc, #160]	; (8009978 <D48_1CH_HTONS_VOL_HP+0x158>)
 80098d6:	fb25 1103 	smlad	r1, r5, r3, r1
 80098da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098de:	fb22 1903 	smlad	r9, r2, r3, r1
 80098e2:	4b26      	ldr	r3, [pc, #152]	; (800997c <D48_1CH_HTONS_VOL_HP+0x15c>)
 80098e4:	fb28 ec03 	smlad	ip, r8, r3, lr
 80098e8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80098ec:	fb25 cc03 	smlad	ip, r5, r3, ip
 80098f0:	4b23      	ldr	r3, [pc, #140]	; (8009980 <D48_1CH_HTONS_VOL_HP+0x160>)
 80098f2:	fb22 cc03 	smlad	ip, r2, r3, ip
 80098f6:	2101      	movs	r1, #1
 80098f8:	fb28 f801 	smuad	r8, r8, r1
 80098fc:	4b21      	ldr	r3, [pc, #132]	; (8009984 <D48_1CH_HTONS_VOL_HP+0x164>)
 80098fe:	fb25 8503 	smlad	r5, r5, r3, r8
 8009902:	4b21      	ldr	r3, [pc, #132]	; (8009988 <D48_1CH_HTONS_VOL_HP+0x168>)
 8009904:	fb22 5e03 	smlad	lr, r2, r3, r5
 8009908:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800990c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009910:	190a      	adds	r2, r1, r4
 8009912:	9c02      	ldr	r4, [sp, #8]
 8009914:	eba2 020a 	sub.w	r2, r2, sl
 8009918:	468a      	mov	sl, r1
 800991a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800991e:	fba2 2304 	umull	r2, r3, r2, r4
 8009922:	fb04 3309 	mla	r3, r4, r9, r3
 8009926:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800992a:	f04f 0900 	mov.w	r9, #0
 800992e:	f143 0500 	adc.w	r5, r3, #0
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	032a      	lsls	r2, r5, #12
 8009936:	006c      	lsls	r4, r5, #1
 8009938:	fbc3 8902 	smlal	r8, r9, r3, r2
 800993c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8009940:	f303 030f 	ssat	r3, #16, r3
 8009944:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	4283      	cmp	r3, r0
 800994c:	d185      	bne.n	800985a <D48_1CH_HTONS_VOL_HP+0x3a>
 800994e:	4673      	mov	r3, lr
 8009950:	9a05      	ldr	r2, [sp, #20]
 8009952:	6093      	str	r3, [r2, #8]
 8009954:	2000      	movs	r0, #0
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	f8c2 c00c 	str.w	ip, [r2, #12]
 800995c:	61d6      	str	r6, [r2, #28]
 800995e:	6193      	str	r3, [r2, #24]
 8009960:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009964:	b007      	add	sp, #28
 8009966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996a:	4671      	mov	r1, lr
 800996c:	e7f1      	b.n	8009952 <D48_1CH_HTONS_VOL_HP+0x132>
 800996e:	bf00      	nop
 8009970:	24000000 	.word	0x24000000
 8009974:	000f000a 	.word	0x000f000a
 8009978:	00060003 	.word	0x00060003
 800997c:	00150019 	.word	0x00150019
 8009980:	00190015 	.word	0x00190015
 8009984:	00030006 	.word	0x00030006
 8009988:	000a000f 	.word	0x000a000f

0800998c <D64_1CH_HTONS_VOL_HP>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	6993      	ldr	r3, [r2, #24]
 8009996:	4686      	mov	lr, r0
 8009998:	9503      	str	r5, [sp, #12]
 800999a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800999c:	6a15      	ldr	r5, [r2, #32]
 800999e:	9306      	str	r3, [sp, #24]
 80099a0:	69d6      	ldr	r6, [r2, #28]
 80099a2:	9504      	str	r5, [sp, #16]
 80099a4:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80099a8:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f000 80a4 	beq.w	8009afa <D64_1CH_HTONS_VOL_HP+0x16e>
 80099b2:	460f      	mov	r7, r1
 80099b4:	46f1      	mov	r9, lr
 80099b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80099ba:	4d56      	ldr	r5, [pc, #344]	; (8009b14 <D64_1CH_HTONS_VOL_HP+0x188>)
 80099bc:	46a2      	mov	sl, r4
 80099be:	469e      	mov	lr, r3
 80099c0:	9105      	str	r1, [sp, #20]
 80099c2:	9207      	str	r2, [sp, #28]
 80099c4:	f859 1b08 	ldr.w	r1, [r9], #8
 80099c8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80099cc:	ba49      	rev16	r1, r1
 80099ce:	fa93 fb93 	rev16.w	fp, r3
 80099d2:	b2cb      	uxtb	r3, r1
 80099d4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80099d8:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80099dc:	0e09      	lsrs	r1, r1, #24
 80099de:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80099e2:	fa5f f38b 	uxtb.w	r3, fp
 80099e6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80099ea:	4426      	add	r6, r4
 80099ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80099f0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80099f4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80099f8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80099fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009a00:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8009a04:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8009a08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009a0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009a10:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8009a14:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009a18:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8009a1c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8009a20:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8009a24:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009a28:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8009a2c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8009a30:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009a34:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009a38:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8009a3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a40:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a48:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8009a4c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8009a50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a54:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8009a58:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8009a5c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8009a60:	482d      	ldr	r0, [pc, #180]	; (8009b18 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8009a62:	fb22 cc00 	smlad	ip, r2, r0, ip
 8009a66:	482d      	ldr	r0, [pc, #180]	; (8009b1c <D64_1CH_HTONS_VOL_HP+0x190>)
 8009a68:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009a6c:	482c      	ldr	r0, [pc, #176]	; (8009b20 <D64_1CH_HTONS_VOL_HP+0x194>)
 8009a6e:	fb23 cc00 	smlad	ip, r3, r0, ip
 8009a72:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8009a76:	fb2b c404 	smlad	r4, fp, r4, ip
 8009a7a:	482a      	ldr	r0, [pc, #168]	; (8009b24 <D64_1CH_HTONS_VOL_HP+0x198>)
 8009a7c:	fb22 ec00 	smlad	ip, r2, r0, lr
 8009a80:	fb2b cc10 	smladx	ip, fp, r0, ip
 8009a84:	4828      	ldr	r0, [pc, #160]	; (8009b28 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8009a86:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009a8a:	fb23 cc10 	smladx	ip, r3, r0, ip
 8009a8e:	f04f 0e01 	mov.w	lr, #1
 8009a92:	fb22 f20e 	smuad	r2, r2, lr
 8009a96:	4825      	ldr	r0, [pc, #148]	; (8009b2c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8009a98:	fb21 2100 	smlad	r1, r1, r0, r2
 8009a9c:	4a24      	ldr	r2, [pc, #144]	; (8009b30 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8009a9e:	fb23 1302 	smlad	r3, r3, r2, r1
 8009aa2:	4a24      	ldr	r2, [pc, #144]	; (8009b34 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8009aa4:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8009aa8:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8009aac:	eb04 0208 	add.w	r2, r4, r8
 8009ab0:	eba2 020a 	sub.w	r2, r2, sl
 8009ab4:	46a2      	mov	sl, r4
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	17d1      	asrs	r1, r2, #31
 8009aba:	e9cd 0100 	strd	r0, r1, [sp]
 8009abe:	9904      	ldr	r1, [sp, #16]
 8009ac0:	9801      	ldr	r0, [sp, #4]
 8009ac2:	fba2 2301 	umull	r2, r3, r2, r1
 8009ac6:	fb01 3300 	mla	r3, r1, r0, r3
 8009aca:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8009ace:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009ad2:	f143 0100 	adc.w	r1, r3, #0
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	02ca      	lsls	r2, r1, #11
 8009ada:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8009ade:	2100      	movs	r1, #0
 8009ae0:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009ae4:	108b      	asrs	r3, r1, #2
 8009ae6:	f303 030f 	ssat	r3, #16, r3
 8009aea:	f827 3b02 	strh.w	r3, [r7], #2
 8009aee:	9b05      	ldr	r3, [sp, #20]
 8009af0:	429f      	cmp	r7, r3
 8009af2:	f47f af67 	bne.w	80099c4 <D64_1CH_HTONS_VOL_HP+0x38>
 8009af6:	4673      	mov	r3, lr
 8009af8:	9a07      	ldr	r2, [sp, #28]
 8009afa:	6093      	str	r3, [r2, #8]
 8009afc:	2000      	movs	r0, #0
 8009afe:	9b06      	ldr	r3, [sp, #24]
 8009b00:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009b04:	61d6      	str	r6, [r2, #28]
 8009b06:	6193      	str	r3, [r2, #24]
 8009b08:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009b0c:	b009      	add	sp, #36	; 0x24
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	bf00      	nop
 8009b14:	24000000 	.word	0x24000000
 8009b18:	001c0015 	.word	0x001c0015
 8009b1c:	000f000a 	.word	0x000f000a
 8009b20:	00060003 	.word	0x00060003
 8009b24:	0024002a 	.word	0x0024002a
 8009b28:	002e0030 	.word	0x002e0030
 8009b2c:	00030006 	.word	0x00030006
 8009b30:	000a000f 	.word	0x000a000f
 8009b34:	0015001c 	.word	0x0015001c

08009b38 <D80_1CH_HTONS_VOL_HP>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	6913      	ldr	r3, [r2, #16]
 8009b3e:	b089      	sub	sp, #36	; 0x24
 8009b40:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	9603      	str	r6, [sp, #12]
 8009b46:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009b48:	6a16      	ldr	r6, [r2, #32]
 8009b4a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8009b4e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8009b52:	9306      	str	r3, [sp, #24]
 8009b54:	9604      	str	r6, [sp, #16]
 8009b56:	69d3      	ldr	r3, [r2, #28]
 8009b58:	2c00      	cmp	r4, #0
 8009b5a:	f000 80ce 	beq.w	8009cfa <D80_1CH_HTONS_VOL_HP+0x1c2>
 8009b5e:	3902      	subs	r1, #2
 8009b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009b64:	4e66      	ldr	r6, [pc, #408]	; (8009d00 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 8009b66:	469e      	mov	lr, r3
 8009b68:	9102      	str	r1, [sp, #8]
 8009b6a:	46aa      	mov	sl, r5
 8009b6c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8009b70:	9207      	str	r2, [sp, #28]
 8009b72:	9105      	str	r1, [sp, #20]
 8009b74:	6883      	ldr	r3, [r0, #8]
 8009b76:	e9d0 4200 	ldrd	r4, r2, [r0]
 8009b7a:	300a      	adds	r0, #10
 8009b7c:	ba64      	rev16	r4, r4
 8009b7e:	ba52      	rev16	r2, r2
 8009b80:	fa93 fb93 	rev16.w	fp, r3
 8009b84:	b2e5      	uxtb	r5, r4
 8009b86:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009b8a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009b8e:	0e24      	lsrs	r4, r4, #24
 8009b90:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8009b94:	b2d5      	uxtb	r5, r2
 8009b96:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009b9a:	44c6      	add	lr, r8
 8009b9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009ba0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8009ba4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8009ba8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009bac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009bb0:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8009bb4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bbc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009bc0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009bc4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8009bc8:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8009bcc:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8009bd0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8009bd4:	0e12      	lsrs	r2, r2, #24
 8009bd6:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8009bda:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009bde:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009be2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009be6:	fa5f fb8b 	uxtb.w	fp, fp
 8009bea:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009bee:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009bf2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8009bf6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009bfa:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8009bfe:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009c02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009c06:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009c0a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8009c0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009c12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009c16:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8009c1a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009c1e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8009c22:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8009c26:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009c2a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8009c2e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8009c32:	4934      	ldr	r1, [pc, #208]	; (8009d04 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8009c34:	fb23 cc01 	smlad	ip, r3, r1, ip
 8009c38:	4933      	ldr	r1, [pc, #204]	; (8009d08 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8009c3a:	fb24 cc01 	smlad	ip, r4, r1, ip
 8009c3e:	4933      	ldr	r1, [pc, #204]	; (8009d0c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8009c40:	fb28 cc01 	smlad	ip, r8, r1, ip
 8009c44:	4932      	ldr	r1, [pc, #200]	; (8009d10 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8009c46:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009c4a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009c4e:	fb2b c901 	smlad	r9, fp, r1, ip
 8009c52:	4930      	ldr	r1, [pc, #192]	; (8009d14 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8009c54:	fb23 7701 	smlad	r7, r3, r1, r7
 8009c58:	492f      	ldr	r1, [pc, #188]	; (8009d18 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8009c5a:	fb24 7701 	smlad	r7, r4, r1, r7
 8009c5e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8009c62:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8009c66:	492d      	ldr	r1, [pc, #180]	; (8009d1c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8009c68:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009c6c:	492c      	ldr	r1, [pc, #176]	; (8009d20 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009c6e:	fb2b cc01 	smlad	ip, fp, r1, ip
 8009c72:	2101      	movs	r1, #1
 8009c74:	fb23 f301 	smuad	r3, r3, r1
 8009c78:	492a      	ldr	r1, [pc, #168]	; (8009d24 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8009c7a:	fb24 3401 	smlad	r4, r4, r1, r3
 8009c7e:	492a      	ldr	r1, [pc, #168]	; (8009d28 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8009c80:	fb28 4101 	smlad	r1, r8, r1, r4
 8009c84:	4f29      	ldr	r7, [pc, #164]	; (8009d2c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8009c86:	fb22 1207 	smlad	r2, r2, r7, r1
 8009c8a:	4f29      	ldr	r7, [pc, #164]	; (8009d30 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8009c8c:	fb2b 2707 	smlad	r7, fp, r7, r2
 8009c90:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	9c04      	ldr	r4, [sp, #16]
 8009c98:	440b      	add	r3, r1
 8009c9a:	eba3 020a 	sub.w	r2, r3, sl
 8009c9e:	468a      	mov	sl, r1
 8009ca0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009ca4:	fba2 2304 	umull	r2, r3, r2, r4
 8009ca8:	fb04 3309 	mla	r3, r4, r9, r3
 8009cac:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009cb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009cb4:	f143 0500 	adc.w	r5, r3, #0
 8009cb8:	006b      	lsls	r3, r5, #1
 8009cba:	02aa      	lsls	r2, r5, #10
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	fbc3 4502 	smlal	r4, r5, r3, r2
 8009cc6:	9a02      	ldr	r2, [sp, #8]
 8009cc8:	10ab      	asrs	r3, r5, #2
 8009cca:	f303 030f 	ssat	r3, #16, r3
 8009cce:	f822 3f02 	strh.w	r3, [r2, #2]!
 8009cd2:	9b05      	ldr	r3, [sp, #20]
 8009cd4:	9202      	str	r2, [sp, #8]
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	f47f af4c 	bne.w	8009b74 <D80_1CH_HTONS_VOL_HP+0x3c>
 8009cdc:	4673      	mov	r3, lr
 8009cde:	9a07      	ldr	r2, [sp, #28]
 8009ce0:	61d3      	str	r3, [r2, #28]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	9b01      	ldr	r3, [sp, #4]
 8009ce6:	6097      	str	r7, [r2, #8]
 8009ce8:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009cec:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	6193      	str	r3, [r2, #24]
 8009cf4:	b009      	add	sp, #36	; 0x24
 8009cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	e7f0      	b.n	8009ce0 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8009cfe:	bf00      	nop
 8009d00:	24000000 	.word	0x24000000
 8009d04:	002d0024 	.word	0x002d0024
 8009d08:	001c0015 	.word	0x001c0015
 8009d0c:	000f000a 	.word	0x000f000a
 8009d10:	00060003 	.word	0x00060003
 8009d14:	0037003f 	.word	0x0037003f
 8009d18:	00450049 	.word	0x00450049
 8009d1c:	00490045 	.word	0x00490045
 8009d20:	003f0037 	.word	0x003f0037
 8009d24:	00030006 	.word	0x00030006
 8009d28:	000a000f 	.word	0x000a000f
 8009d2c:	0015001c 	.word	0x0015001c
 8009d30:	0024002d 	.word	0x0024002d

08009d34 <D128_1CH_HTONS_VOL_HP>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	6914      	ldr	r4, [r2, #16]
 8009d3a:	b08d      	sub	sp, #52	; 0x34
 8009d3c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009d3e:	9404      	str	r4, [sp, #16]
 8009d40:	6954      	ldr	r4, [r2, #20]
 8009d42:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d44:	9405      	str	r4, [sp, #20]
 8009d46:	6994      	ldr	r4, [r2, #24]
 8009d48:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009d4c:	940a      	str	r4, [sp, #40]	; 0x28
 8009d4e:	6894      	ldr	r4, [r2, #8]
 8009d50:	9403      	str	r4, [sp, #12]
 8009d52:	68d4      	ldr	r4, [r2, #12]
 8009d54:	9402      	str	r4, [sp, #8]
 8009d56:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009d58:	6a12      	ldr	r2, [r2, #32]
 8009d5a:	9407      	str	r4, [sp, #28]
 8009d5c:	9208      	str	r2, [sp, #32]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 812e 	beq.w	8009fc0 <D128_1CH_HTONS_VOL_HP+0x28c>
 8009d64:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009d68:	f100 0b10 	add.w	fp, r0, #16
 8009d6c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a000 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8009d70:	9106      	str	r1, [sp, #24]
 8009d72:	9309      	str	r3, [sp, #36]	; 0x24
 8009d74:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8009d78:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8009d7c:	ba40      	rev16	r0, r0
 8009d7e:	ba52      	rev16	r2, r2
 8009d80:	ba5b      	rev16	r3, r3
 8009d82:	ba76      	rev16	r6, r6
 8009d84:	b2c5      	uxtb	r5, r0
 8009d86:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009d8a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8009d8e:	0e00      	lsrs	r0, r0, #24
 8009d90:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8009d94:	b2d5      	uxtb	r5, r2
 8009d96:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8009d9a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009d9e:	44bc      	add	ip, r7
 8009da0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009da4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8009da8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009dac:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8009db0:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8009db4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009db8:	0e12      	lsrs	r2, r2, #24
 8009dba:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8009dbe:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009dc2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009dc6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009dca:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8009dce:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009dd2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8009ddc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009de0:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8009de4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009de8:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8009dec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009df0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8009df4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009df8:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8009dfc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009e00:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8009e04:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8009e08:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009e0c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009e10:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8009e14:	0e1b      	lsrs	r3, r3, #24
 8009e16:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009e1a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009e1e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8009e22:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8009e26:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8009e2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009e2e:	b2f3      	uxtb	r3, r6
 8009e30:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8009e34:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8009e38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e3c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8009e40:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009e44:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8009e48:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009e4c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009e50:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009e54:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8009e58:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8009e5c:	0e36      	lsrs	r6, r6, #24
 8009e5e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8009e62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009e66:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8009e6a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009e6e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8009e72:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e76:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8009e7a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8009e7e:	9101      	str	r1, [sp, #4]
 8009e80:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8009e84:	9b02      	ldr	r3, [sp, #8]
 8009e86:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009e8a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009e8e:	4611      	mov	r1, r2
 8009e90:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8009e94:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8009e98:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009e9c:	4a49      	ldr	r2, [pc, #292]	; (8009fc4 <D128_1CH_HTONS_VOL_HP+0x290>)
 8009e9e:	fb2e 3202 	smlad	r2, lr, r2, r3
 8009ea2:	4b49      	ldr	r3, [pc, #292]	; (8009fc8 <D128_1CH_HTONS_VOL_HP+0x294>)
 8009ea4:	fb27 2203 	smlad	r2, r7, r3, r2
 8009ea8:	4b48      	ldr	r3, [pc, #288]	; (8009fcc <D128_1CH_HTONS_VOL_HP+0x298>)
 8009eaa:	fb25 2203 	smlad	r2, r5, r3, r2
 8009eae:	4b48      	ldr	r3, [pc, #288]	; (8009fd0 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8009eb0:	fb24 2203 	smlad	r2, r4, r3, r2
 8009eb4:	4b47      	ldr	r3, [pc, #284]	; (8009fd4 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8009eb6:	fb20 2803 	smlad	r8, r0, r3, r2
 8009eba:	4b47      	ldr	r3, [pc, #284]	; (8009fd8 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8009ebc:	9a01      	ldr	r2, [sp, #4]
 8009ebe:	fb22 8203 	smlad	r2, r2, r3, r8
 8009ec2:	4b46      	ldr	r3, [pc, #280]	; (8009fdc <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8009ec4:	9102      	str	r1, [sp, #8]
 8009ec6:	fb21 2203 	smlad	r2, r1, r3, r2
 8009eca:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8009ece:	fb26 2308 	smlad	r3, r6, r8, r2
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	9a03      	ldr	r2, [sp, #12]
 8009ed6:	4b42      	ldr	r3, [pc, #264]	; (8009fe0 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8009ed8:	fb2e 2803 	smlad	r8, lr, r3, r2
 8009edc:	4b41      	ldr	r3, [pc, #260]	; (8009fe4 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8009ede:	fb27 8a03 	smlad	sl, r7, r3, r8
 8009ee2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a004 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8009ee6:	fb25 a808 	smlad	r8, r5, r8, sl
 8009eea:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a008 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8009eee:	fb24 880a 	smlad	r8, r4, sl, r8
 8009ef2:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a00c <D128_1CH_HTONS_VOL_HP+0x2d8>
 8009ef6:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8009efa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a010 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	fb23 aa08 	smlad	sl, r3, r8, sl
 8009f04:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800a014 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8009f08:	9a02      	ldr	r2, [sp, #8]
 8009f0a:	fb22 a808 	smlad	r8, r2, r8, sl
 8009f0e:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a018 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8009f12:	fb26 830a 	smlad	r3, r6, sl, r8
 8009f16:	f04f 0801 	mov.w	r8, #1
 8009f1a:	9302      	str	r3, [sp, #8]
 8009f1c:	fb2e fe08 	smuad	lr, lr, r8
 8009f20:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a01c <D128_1CH_HTONS_VOL_HP+0x2e8>
 8009f24:	fb27 ee08 	smlad	lr, r7, r8, lr
 8009f28:	4f2f      	ldr	r7, [pc, #188]	; (8009fe8 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8009f2a:	fb25 ee07 	smlad	lr, r5, r7, lr
 8009f2e:	4f2f      	ldr	r7, [pc, #188]	; (8009fec <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8009f30:	fb24 ee07 	smlad	lr, r4, r7, lr
 8009f34:	4f2e      	ldr	r7, [pc, #184]	; (8009ff0 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8009f36:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009f3a:	4f2e      	ldr	r7, [pc, #184]	; (8009ff4 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	fb23 ee07 	smlad	lr, r3, r7, lr
 8009f42:	4f2d      	ldr	r7, [pc, #180]	; (8009ff8 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8009f44:	fb22 e707 	smlad	r7, r2, r7, lr
 8009f48:	4b2c      	ldr	r3, [pc, #176]	; (8009ffc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009f4a:	fb26 7303 	smlad	r3, r6, r3, r7
 8009f4e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	9b04      	ldr	r3, [sp, #16]
 8009f56:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009f5a:	9f08      	ldr	r7, [sp, #32]
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4433      	add	r3, r6
 8009f60:	f10b 0b10 	add.w	fp, fp, #16
 8009f64:	461a      	mov	r2, r3
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	9605      	str	r6, [sp, #20]
 8009f6a:	1ad2      	subs	r2, r2, r3
 8009f6c:	17d5      	asrs	r5, r2, #31
 8009f6e:	fba2 2307 	umull	r2, r3, r2, r7
 8009f72:	1814      	adds	r4, r2, r0
 8009f74:	fb07 3305 	mla	r3, r7, r5, r3
 8009f78:	eb43 0501 	adc.w	r5, r3, r1
 8009f7c:	006b      	lsls	r3, r5, #1
 8009f7e:	022a      	lsls	r2, r5, #8
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	9b07      	ldr	r3, [sp, #28]
 8009f84:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009f88:	9a06      	ldr	r2, [sp, #24]
 8009f8a:	108b      	asrs	r3, r1, #2
 8009f8c:	f303 030f 	ssat	r3, #16, r3
 8009f90:	f822 3b02 	strh.w	r3, [r2], #2
 8009f94:	4613      	mov	r3, r2
 8009f96:	9206      	str	r2, [sp, #24]
 8009f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	f47f aeea 	bne.w	8009d74 <D128_1CH_HTONS_VOL_HP+0x40>
 8009fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	9903      	ldr	r1, [sp, #12]
 8009fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa8:	6099      	str	r1, [r3, #8]
 8009faa:	9902      	ldr	r1, [sp, #8]
 8009fac:	f8c3 c01c 	str.w	ip, [r3, #28]
 8009fb0:	60d9      	str	r1, [r3, #12]
 8009fb2:	9904      	ldr	r1, [sp, #16]
 8009fb4:	619a      	str	r2, [r3, #24]
 8009fb6:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8009fba:	b00d      	add	sp, #52	; 0x34
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc0:	9e05      	ldr	r6, [sp, #20]
 8009fc2:	e7ed      	b.n	8009fa0 <D128_1CH_HTONS_VOL_HP+0x26c>
 8009fc4:	00780069 	.word	0x00780069
 8009fc8:	005b004e 	.word	0x005b004e
 8009fcc:	00420037 	.word	0x00420037
 8009fd0:	002d0024 	.word	0x002d0024
 8009fd4:	001c0015 	.word	0x001c0015
 8009fd8:	000f000a 	.word	0x000f000a
 8009fdc:	00060003 	.word	0x00060003
 8009fe0:	00880096 	.word	0x00880096
 8009fe4:	00a200ac 	.word	0x00a200ac
 8009fe8:	000a000f 	.word	0x000a000f
 8009fec:	0015001c 	.word	0x0015001c
 8009ff0:	0024002d 	.word	0x0024002d
 8009ff4:	00370042 	.word	0x00370042
 8009ff8:	004e005b 	.word	0x004e005b
 8009ffc:	00690078 	.word	0x00690078
 800a000:	24000000 	.word	0x24000000
 800a004:	00b400ba 	.word	0x00b400ba
 800a008:	00be00c0 	.word	0x00be00c0
 800a00c:	00c000be 	.word	0x00c000be
 800a010:	00ba00b4 	.word	0x00ba00b4
 800a014:	00ac00a2 	.word	0x00ac00a2
 800a018:	00960088 	.word	0x00960088
 800a01c:	00030006 	.word	0x00030006

0800a020 <PDM_Filter_Init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	2240      	movs	r2, #64	; 0x40
 800a024:	2100      	movs	r1, #0
 800a026:	4604      	mov	r4, r0
 800a028:	300c      	adds	r0, #12
 800a02a:	f000 f9ed 	bl	800a408 <memset>
 800a02e:	4a56      	ldr	r2, [pc, #344]	; (800a188 <PDM_Filter_Init+0x168>)
 800a030:	4856      	ldr	r0, [pc, #344]	; (800a18c <PDM_Filter_Init+0x16c>)
 800a032:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	f24c 2540 	movw	r5, #49728	; 0xc240
 800a03c:	f023 0301 	bic.w	r3, r3, #1
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	6803      	ldr	r3, [r0, #0]
 800a044:	400b      	ands	r3, r1
 800a046:	42ab      	cmp	r3, r5
 800a048:	d040      	beq.n	800a0cc <PDM_Filter_Init+0xac>
 800a04a:	6803      	ldr	r3, [r0, #0]
 800a04c:	f24c 2270 	movw	r2, #49776	; 0xc270
 800a050:	4019      	ands	r1, r3
 800a052:	4291      	cmp	r1, r2
 800a054:	d03a      	beq.n	800a0cc <PDM_Filter_Init+0xac>
 800a056:	4b4e      	ldr	r3, [pc, #312]	; (800a190 <PDM_Filter_Init+0x170>)
 800a058:	2101      	movs	r1, #1
 800a05a:	461a      	mov	r2, r3
 800a05c:	6019      	str	r1, [r3, #0]
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1fc      	bne.n	800a05e <PDM_Filter_Init+0x3e>
 800a064:	4b4b      	ldr	r3, [pc, #300]	; (800a194 <PDM_Filter_Init+0x174>)
 800a066:	494c      	ldr	r1, [pc, #304]	; (800a198 <PDM_Filter_Init+0x178>)
 800a068:	4a4c      	ldr	r2, [pc, #304]	; (800a19c <PDM_Filter_Init+0x17c>)
 800a06a:	6019      	str	r1, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	8820      	ldrh	r0, [r4, #0]
 800a070:	4293      	cmp	r3, r2
 800a072:	8961      	ldrh	r1, [r4, #10]
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	8922      	ldrh	r2, [r4, #8]
 800a07a:	bf14      	ite	ne
 800a07c:	2500      	movne	r5, #0
 800a07e:	4d47      	ldreq	r5, [pc, #284]	; (800a19c <PDM_Filter_Init+0x17c>)
 800a080:	2801      	cmp	r0, #1
 800a082:	61a3      	str	r3, [r4, #24]
 800a084:	6465      	str	r5, [r4, #68]	; 0x44
 800a086:	60e3      	str	r3, [r4, #12]
 800a088:	6263      	str	r3, [r4, #36]	; 0x24
 800a08a:	6423      	str	r3, [r4, #64]	; 0x40
 800a08c:	86a1      	strh	r1, [r4, #52]	; 0x34
 800a08e:	86e2      	strh	r2, [r4, #54]	; 0x36
 800a090:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a094:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a098:	d936      	bls.n	800a108 <PDM_Filter_Init+0xe8>
 800a09a:	2003      	movs	r0, #3
 800a09c:	2302      	movs	r3, #2
 800a09e:	8862      	ldrh	r2, [r4, #2]
 800a0a0:	2a01      	cmp	r2, #1
 800a0a2:	d92e      	bls.n	800a102 <PDM_Filter_Init+0xe2>
 800a0a4:	2140      	movs	r1, #64	; 0x40
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a0aa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800a0ae:	d101      	bne.n	800a0b4 <PDM_Filter_Init+0x94>
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	6421      	str	r1, [r4, #64]	; 0x40
 800a0b4:	6862      	ldr	r2, [r4, #4]
 800a0b6:	b11a      	cbz	r2, 800a0c0 <PDM_Filter_Init+0xa0>
 800a0b8:	f043 0310 	orr.w	r3, r3, #16
 800a0bc:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a0be:	6423      	str	r3, [r4, #64]	; 0x40
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	8722      	strh	r2, [r4, #56]	; 0x38
 800a0c4:	b908      	cbnz	r0, 800a0ca <PDM_Filter_Init+0xaa>
 800a0c6:	3380      	adds	r3, #128	; 0x80
 800a0c8:	6423      	str	r3, [r4, #64]	; 0x40
 800a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0cc:	4b34      	ldr	r3, [pc, #208]	; (800a1a0 <PDM_Filter_Init+0x180>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1c0      	bne.n	800a056 <PDM_Filter_Init+0x36>
 800a0d4:	4a33      	ldr	r2, [pc, #204]	; (800a1a4 <PDM_Filter_Init+0x184>)
 800a0d6:	6813      	ldr	r3, [r2, #0]
 800a0d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a0e0:	d006      	beq.n	800a0f0 <PDM_Filter_Init+0xd0>
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	f240 4283 	movw	r2, #1155	; 0x483
 800a0e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d1b2      	bne.n	800a056 <PDM_Filter_Init+0x36>
 800a0f0:	4b2d      	ldr	r3, [pc, #180]	; (800a1a8 <PDM_Filter_Init+0x188>)
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6019      	str	r1, [r3, #0]
 800a0f8:	6813      	ldr	r3, [r2, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1fc      	bne.n	800a0f8 <PDM_Filter_Init+0xd8>
 800a0fe:	4b2b      	ldr	r3, [pc, #172]	; (800a1ac <PDM_Filter_Init+0x18c>)
 800a100:	e7b1      	b.n	800a066 <PDM_Filter_Init+0x46>
 800a102:	d03a      	beq.n	800a17a <PDM_Filter_Init+0x15a>
 800a104:	4618      	mov	r0, r3
 800a106:	e7cd      	b.n	800a0a4 <PDM_Filter_Init+0x84>
 800a108:	4d29      	ldr	r5, [pc, #164]	; (800a1b0 <PDM_Filter_Init+0x190>)
 800a10a:	782a      	ldrb	r2, [r5, #0]
 800a10c:	d01b      	beq.n	800a146 <PDM_Filter_Init+0x126>
 800a10e:	2a01      	cmp	r2, #1
 800a110:	d001      	beq.n	800a116 <PDM_Filter_Init+0xf6>
 800a112:	2001      	movs	r0, #1
 800a114:	e7c3      	b.n	800a09e <PDM_Filter_Init+0x7e>
 800a116:	4927      	ldr	r1, [pc, #156]	; (800a1b4 <PDM_Filter_Init+0x194>)
 800a118:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800a1bc <PDM_Filter_Init+0x19c>
 800a11c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a120:	4e25      	ldr	r6, [pc, #148]	; (800a1b8 <PDM_Filter_Init+0x198>)
 800a122:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a126:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a12a:	ea02 0006 	and.w	r0, r2, r6
 800a12e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a132:	428f      	cmp	r7, r1
 800a134:	ea43 0300 	orr.w	r3, r3, r0
 800a138:	4413      	add	r3, r2
 800a13a:	600b      	str	r3, [r1, #0]
 800a13c:	d1f1      	bne.n	800a122 <PDM_Filter_Init+0x102>
 800a13e:	2300      	movs	r3, #0
 800a140:	2001      	movs	r0, #1
 800a142:	702b      	strb	r3, [r5, #0]
 800a144:	e7ab      	b.n	800a09e <PDM_Filter_Init+0x7e>
 800a146:	2a00      	cmp	r2, #0
 800a148:	d1a9      	bne.n	800a09e <PDM_Filter_Init+0x7e>
 800a14a:	491a      	ldr	r1, [pc, #104]	; (800a1b4 <PDM_Filter_Init+0x194>)
 800a14c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800a1bc <PDM_Filter_Init+0x19c>
 800a150:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a154:	4e18      	ldr	r6, [pc, #96]	; (800a1b8 <PDM_Filter_Init+0x198>)
 800a156:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a15a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a15e:	ea02 0006 	and.w	r0, r2, r6
 800a162:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a166:	428f      	cmp	r7, r1
 800a168:	ea43 0300 	orr.w	r3, r3, r0
 800a16c:	4413      	add	r3, r2
 800a16e:	600b      	str	r3, [r1, #0]
 800a170:	d1f1      	bne.n	800a156 <PDM_Filter_Init+0x136>
 800a172:	2001      	movs	r0, #1
 800a174:	2300      	movs	r3, #0
 800a176:	7028      	strb	r0, [r5, #0]
 800a178:	e791      	b.n	800a09e <PDM_Filter_Init+0x7e>
 800a17a:	2220      	movs	r2, #32
 800a17c:	4618      	mov	r0, r3
 800a17e:	2160      	movs	r1, #96	; 0x60
 800a180:	6422      	str	r2, [r4, #64]	; 0x40
 800a182:	4613      	mov	r3, r2
 800a184:	e790      	b.n	800a0a8 <PDM_Filter_Init+0x88>
 800a186:	bf00      	nop
 800a188:	e0002000 	.word	0xe0002000
 800a18c:	e000ed00 	.word	0xe000ed00
 800a190:	40023008 	.word	0x40023008
 800a194:	40023000 	.word	0x40023000
 800a198:	f407a5c2 	.word	0xf407a5c2
 800a19c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a1a0:	e0042000 	.word	0xe0042000
 800a1a4:	5c001000 	.word	0x5c001000
 800a1a8:	58024c08 	.word	0x58024c08
 800a1ac:	58024c00 	.word	0x58024c00
 800a1b0:	24000490 	.word	0x24000490
 800a1b4:	23fffffc 	.word	0x23fffffc
 800a1b8:	000ffc00 	.word	0x000ffc00
 800a1bc:	3ff00000 	.word	0x3ff00000

0800a1c0 <PDM_Filter_setConfig>:
 800a1c0:	4b67      	ldr	r3, [pc, #412]	; (800a360 <PDM_Filter_setConfig+0x1a0>)
 800a1c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d128      	bne.n	800a21a <PDM_Filter_setConfig+0x5a>
 800a1c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1cc:	880e      	ldrh	r6, [r1, #0]
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800a1d6:	1e73      	subs	r3, r6, #1
 800a1d8:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800a1dc:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800a1e0:	2b06      	cmp	r3, #6
 800a1e2:	ed2d 8b02 	vpush	{d8}
 800a1e6:	6421      	str	r1, [r4, #64]	; 0x40
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	d820      	bhi.n	800a22e <PDM_Filter_setConfig+0x6e>
 800a1ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a1ee:	42b3      	cmp	r3, r6
 800a1f0:	d03d      	beq.n	800a26e <PDM_Filter_setConfig+0xae>
 800a1f2:	4b5c      	ldr	r3, [pc, #368]	; (800a364 <PDM_Filter_setConfig+0x1a4>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	4333      	orrs	r3, r6
 800a1f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a1fc:	6423      	str	r3, [r4, #64]	; 0x40
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	2a70      	cmp	r2, #112	; 0x70
 800a204:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a208:	d009      	beq.n	800a21e <PDM_Filter_setConfig+0x5e>
 800a20a:	2b06      	cmp	r3, #6
 800a20c:	d824      	bhi.n	800a258 <PDM_Filter_setConfig+0x98>
 800a20e:	e8df f003 	tbb	[pc, r3]
 800a212:	878a      	.short	0x878a
 800a214:	7b7e8184 	.word	0x7b7e8184
 800a218:	78          	.byte	0x78
 800a219:	00          	.byte	0x00
 800a21a:	2004      	movs	r0, #4
 800a21c:	4770      	bx	lr
 800a21e:	2b06      	cmp	r3, #6
 800a220:	d81a      	bhi.n	800a258 <PDM_Filter_setConfig+0x98>
 800a222:	e8df f003 	tbb	[pc, r3]
 800a226:	8f92      	.short	0x8f92
 800a228:	8617898c 	.word	0x8617898c
 800a22c:	83          	.byte	0x83
 800a22d:	00          	.byte	0x00
 800a22e:	4287      	cmp	r7, r0
 800a230:	f000 808e 	beq.w	800a350 <PDM_Filter_setConfig+0x190>
 800a234:	f117 0f0c 	cmn.w	r7, #12
 800a238:	f04f 0008 	mov.w	r0, #8
 800a23c:	da11      	bge.n	800a262 <PDM_Filter_setConfig+0xa2>
 800a23e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800a242:	3040      	adds	r0, #64	; 0x40
 800a244:	80ab      	strh	r3, [r5, #4]
 800a246:	886b      	ldrh	r3, [r5, #2]
 800a248:	8626      	strh	r6, [r4, #48]	; 0x30
 800a24a:	8663      	strh	r3, [r4, #50]	; 0x32
 800a24c:	b003      	add	sp, #12
 800a24e:	ecbd 8b02 	vpop	{d8}
 800a252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a254:	4b44      	ldr	r3, [pc, #272]	; (800a368 <PDM_Filter_setConfig+0x1a8>)
 800a256:	64a3      	str	r3, [r4, #72]	; 0x48
 800a258:	f117 0f0c 	cmn.w	r7, #12
 800a25c:	f04f 0000 	mov.w	r0, #0
 800a260:	dbed      	blt.n	800a23e <PDM_Filter_setConfig+0x7e>
 800a262:	2f33      	cmp	r7, #51	; 0x33
 800a264:	dd10      	ble.n	800a288 <PDM_Filter_setConfig+0xc8>
 800a266:	2333      	movs	r3, #51	; 0x33
 800a268:	3040      	adds	r0, #64	; 0x40
 800a26a:	80ab      	strh	r3, [r5, #4]
 800a26c:	e7eb      	b.n	800a246 <PDM_Filter_setConfig+0x86>
 800a26e:	4287      	cmp	r7, r0
 800a270:	d1f2      	bne.n	800a258 <PDM_Filter_setConfig+0x98>
 800a272:	886b      	ldrh	r3, [r5, #2]
 800a274:	8663      	strh	r3, [r4, #50]	; 0x32
 800a276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a278:	2000      	movs	r0, #0
 800a27a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a27e:	6423      	str	r3, [r4, #64]	; 0x40
 800a280:	b003      	add	sp, #12
 800a282:	ecbd 8b02 	vpop	{d8}
 800a286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a28a:	f003 030f 	and.w	r3, r3, #15
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b06      	cmp	r3, #6
 800a292:	d831      	bhi.n	800a2f8 <PDM_Filter_setConfig+0x138>
 800a294:	4a35      	ldr	r2, [pc, #212]	; (800a36c <PDM_Filter_setConfig+0x1ac>)
 800a296:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a29a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a370 <PDM_Filter_setConfig+0x1b0>
 800a29e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2a2:	9001      	str	r0, [sp, #4]
 800a2a4:	edd3 7a07 	vldr	s15, [r3, #28]
 800a2a8:	ed93 8a00 	vldr	s16, [r3]
 800a2ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a2b0:	f000 f8ca 	bl	800a448 <powf>
 800a2b4:	eef0 8a40 	vmov.f32	s17, s0
 800a2b8:	9801      	ldr	r0, [sp, #4]
 800a2ba:	ee07 7a90 	vmov	s15, r7
 800a2be:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a2c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800a2c6:	9001      	str	r0, [sp, #4]
 800a2c8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800a2cc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a374 <PDM_Filter_setConfig+0x1b4>
 800a2d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a2d4:	f000 f8b8 	bl	800a448 <powf>
 800a2d8:	ee28 8a00 	vmul.f32	s16, s16, s0
 800a2dc:	886b      	ldrh	r3, [r5, #2]
 800a2de:	9801      	ldr	r0, [sp, #4]
 800a2e0:	feb8 8a48 	vrinta.f32	s16, s16
 800a2e4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800a2e8:	8727      	strh	r7, [r4, #56]	; 0x38
 800a2ea:	8663      	strh	r3, [r4, #50]	; 0x32
 800a2ec:	8626      	strh	r6, [r4, #48]	; 0x30
 800a2ee:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0bf      	beq.n	800a276 <PDM_Filter_setConfig+0xb6>
 800a2f6:	e7a9      	b.n	800a24c <PDM_Filter_setConfig+0x8c>
 800a2f8:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800a378 <PDM_Filter_setConfig+0x1b8>
 800a2fc:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800a37c <PDM_Filter_setConfig+0x1bc>
 800a300:	e7db      	b.n	800a2ba <PDM_Filter_setConfig+0xfa>
 800a302:	4b1f      	ldr	r3, [pc, #124]	; (800a380 <PDM_Filter_setConfig+0x1c0>)
 800a304:	64a3      	str	r3, [r4, #72]	; 0x48
 800a306:	e7a7      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a308:	4b1e      	ldr	r3, [pc, #120]	; (800a384 <PDM_Filter_setConfig+0x1c4>)
 800a30a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a30c:	e7a4      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a30e:	4b1e      	ldr	r3, [pc, #120]	; (800a388 <PDM_Filter_setConfig+0x1c8>)
 800a310:	64a3      	str	r3, [r4, #72]	; 0x48
 800a312:	e7a1      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a314:	4b1d      	ldr	r3, [pc, #116]	; (800a38c <PDM_Filter_setConfig+0x1cc>)
 800a316:	64a3      	str	r3, [r4, #72]	; 0x48
 800a318:	e79e      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a31a:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <PDM_Filter_setConfig+0x1d0>)
 800a31c:	64a3      	str	r3, [r4, #72]	; 0x48
 800a31e:	e79b      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a320:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <PDM_Filter_setConfig+0x1d4>)
 800a322:	64a3      	str	r3, [r4, #72]	; 0x48
 800a324:	e798      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a326:	4b1c      	ldr	r3, [pc, #112]	; (800a398 <PDM_Filter_setConfig+0x1d8>)
 800a328:	64a3      	str	r3, [r4, #72]	; 0x48
 800a32a:	e795      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a32c:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <PDM_Filter_setConfig+0x1dc>)
 800a32e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a330:	e792      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a332:	4b1b      	ldr	r3, [pc, #108]	; (800a3a0 <PDM_Filter_setConfig+0x1e0>)
 800a334:	64a3      	str	r3, [r4, #72]	; 0x48
 800a336:	e78f      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a338:	4b1a      	ldr	r3, [pc, #104]	; (800a3a4 <PDM_Filter_setConfig+0x1e4>)
 800a33a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a33c:	e78c      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a33e:	4b1a      	ldr	r3, [pc, #104]	; (800a3a8 <PDM_Filter_setConfig+0x1e8>)
 800a340:	64a3      	str	r3, [r4, #72]	; 0x48
 800a342:	e789      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a344:	4b19      	ldr	r3, [pc, #100]	; (800a3ac <PDM_Filter_setConfig+0x1ec>)
 800a346:	64a3      	str	r3, [r4, #72]	; 0x48
 800a348:	e786      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a34a:	4b19      	ldr	r3, [pc, #100]	; (800a3b0 <PDM_Filter_setConfig+0x1f0>)
 800a34c:	64a3      	str	r3, [r4, #72]	; 0x48
 800a34e:	e783      	b.n	800a258 <PDM_Filter_setConfig+0x98>
 800a350:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a352:	42b3      	cmp	r3, r6
 800a354:	f47f af6e 	bne.w	800a234 <PDM_Filter_setConfig+0x74>
 800a358:	886b      	ldrh	r3, [r5, #2]
 800a35a:	2008      	movs	r0, #8
 800a35c:	8663      	strh	r3, [r4, #50]	; 0x32
 800a35e:	e775      	b.n	800a24c <PDM_Filter_setConfig+0x8c>
 800a360:	b5e8b5cd 	.word	0xb5e8b5cd
 800a364:	fffffef0 	.word	0xfffffef0
 800a368:	080094d9 	.word	0x080094d9
 800a36c:	0800a7b8 	.word	0x0800a7b8
 800a370:	42000000 	.word	0x42000000
 800a374:	3d4ccccd 	.word	0x3d4ccccd
 800a378:	4f800000 	.word	0x4f800000
 800a37c:	00000000 	.word	0x00000000
 800a380:	080088e5 	.word	0x080088e5
 800a384:	0800876d 	.word	0x0800876d
 800a388:	0800865d 	.word	0x0800865d
 800a38c:	08009121 	.word	0x08009121
 800a390:	08008e89 	.word	0x08008e89
 800a394:	08008c51 	.word	0x08008c51
 800a398:	08008a6d 	.word	0x08008a6d
 800a39c:	080096f5 	.word	0x080096f5
 800a3a0:	080095b9 	.word	0x080095b9
 800a3a4:	08009d35 	.word	0x08009d35
 800a3a8:	08009b39 	.word	0x08009b39
 800a3ac:	0800998d 	.word	0x0800998d
 800a3b0:	08009821 	.word	0x08009821

0800a3b4 <__errno>:
 800a3b4:	4b01      	ldr	r3, [pc, #4]	; (800a3bc <__errno+0x8>)
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	24000410 	.word	0x24000410

0800a3c0 <__libc_init_array>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	4d0d      	ldr	r5, [pc, #52]	; (800a3f8 <__libc_init_array+0x38>)
 800a3c4:	4c0d      	ldr	r4, [pc, #52]	; (800a3fc <__libc_init_array+0x3c>)
 800a3c6:	1b64      	subs	r4, r4, r5
 800a3c8:	10a4      	asrs	r4, r4, #2
 800a3ca:	2600      	movs	r6, #0
 800a3cc:	42a6      	cmp	r6, r4
 800a3ce:	d109      	bne.n	800a3e4 <__libc_init_array+0x24>
 800a3d0:	4d0b      	ldr	r5, [pc, #44]	; (800a400 <__libc_init_array+0x40>)
 800a3d2:	4c0c      	ldr	r4, [pc, #48]	; (800a404 <__libc_init_array+0x44>)
 800a3d4:	f000 f9e4 	bl	800a7a0 <_init>
 800a3d8:	1b64      	subs	r4, r4, r5
 800a3da:	10a4      	asrs	r4, r4, #2
 800a3dc:	2600      	movs	r6, #0
 800a3de:	42a6      	cmp	r6, r4
 800a3e0:	d105      	bne.n	800a3ee <__libc_init_array+0x2e>
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e8:	4798      	blx	r3
 800a3ea:	3601      	adds	r6, #1
 800a3ec:	e7ee      	b.n	800a3cc <__libc_init_array+0xc>
 800a3ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f2:	4798      	blx	r3
 800a3f4:	3601      	adds	r6, #1
 800a3f6:	e7f2      	b.n	800a3de <__libc_init_array+0x1e>
 800a3f8:	0800aaa8 	.word	0x0800aaa8
 800a3fc:	0800aaa8 	.word	0x0800aaa8
 800a400:	0800aaa8 	.word	0x0800aaa8
 800a404:	0800aaac 	.word	0x0800aaac

0800a408 <memset>:
 800a408:	4402      	add	r2, r0
 800a40a:	4603      	mov	r3, r0
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d100      	bne.n	800a412 <memset+0xa>
 800a410:	4770      	bx	lr
 800a412:	f803 1b01 	strb.w	r1, [r3], #1
 800a416:	e7f9      	b.n	800a40c <memset+0x4>

0800a418 <checkint>:
 800a418:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a41c:	2b7e      	cmp	r3, #126	; 0x7e
 800a41e:	dd10      	ble.n	800a442 <checkint+0x2a>
 800a420:	2b96      	cmp	r3, #150	; 0x96
 800a422:	dc0c      	bgt.n	800a43e <checkint+0x26>
 800a424:	2201      	movs	r2, #1
 800a426:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a42a:	fa02 f303 	lsl.w	r3, r2, r3
 800a42e:	1e5a      	subs	r2, r3, #1
 800a430:	4202      	tst	r2, r0
 800a432:	d106      	bne.n	800a442 <checkint+0x2a>
 800a434:	4203      	tst	r3, r0
 800a436:	bf0c      	ite	eq
 800a438:	2002      	moveq	r0, #2
 800a43a:	2001      	movne	r0, #1
 800a43c:	4770      	bx	lr
 800a43e:	2002      	movs	r0, #2
 800a440:	4770      	bx	lr
 800a442:	2000      	movs	r0, #0
 800a444:	4770      	bx	lr
	...

0800a448 <powf>:
 800a448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44a:	ee10 1a10 	vmov	r1, s0
 800a44e:	ee10 6a90 	vmov	r6, s1
 800a452:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800a456:	0072      	lsls	r2, r6, #1
 800a458:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a45c:	b085      	sub	sp, #20
 800a45e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a462:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800a466:	d256      	bcs.n	800a516 <powf+0xce>
 800a468:	4298      	cmp	r0, r3
 800a46a:	d256      	bcs.n	800a51a <powf+0xd2>
 800a46c:	2000      	movs	r0, #0
 800a46e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800a472:	4ea3      	ldr	r6, [pc, #652]	; (800a700 <powf+0x2b8>)
 800a474:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a478:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800a47c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800a480:	0dd2      	lsrs	r2, r2, #23
 800a482:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800a486:	05d2      	lsls	r2, r2, #23
 800a488:	1a8b      	subs	r3, r1, r2
 800a48a:	ed97 5b00 	vldr	d5, [r7]
 800a48e:	ee07 3a90 	vmov	s15, r3
 800a492:	15d2      	asrs	r2, r2, #23
 800a494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a498:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a49c:	ed97 5b02 	vldr	d5, [r7, #8]
 800a4a0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800a4a4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800a4a8:	ee07 2a90 	vmov	s15, r2
 800a4ac:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800a4b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a4b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a4b8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800a4bc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800a4c0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a4c4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800a4c8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a4cc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800a4d0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800a4d4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a4d8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800a4dc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800a4e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a4e4:	ee10 1a90 	vmov	r1, s1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	2700      	movs	r7, #0
 800a4ec:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800a4f0:	f248 06be 	movw	r6, #32958	; 0x80be
 800a4f4:	429f      	cmp	r7, r3
 800a4f6:	bf08      	it	eq
 800a4f8:	4296      	cmpeq	r6, r2
 800a4fa:	f080 80b1 	bcs.w	800a660 <powf+0x218>
 800a4fe:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800a6e0 <powf+0x298>
 800a502:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50a:	dd79      	ble.n	800a600 <powf+0x1b8>
 800a50c:	b005      	add	sp, #20
 800a50e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a512:	f000 b91f 	b.w	800a754 <__math_oflowf>
 800a516:	4298      	cmp	r0, r3
 800a518:	d32d      	bcc.n	800a576 <powf+0x12e>
 800a51a:	b952      	cbnz	r2, 800a532 <powf+0xea>
 800a51c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800a520:	005b      	lsls	r3, r3, #1
 800a522:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800a526:	f240 80cd 	bls.w	800a6c4 <powf+0x27c>
 800a52a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800a52e:	b005      	add	sp, #20
 800a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a532:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a536:	d105      	bne.n	800a544 <powf+0xfc>
 800a538:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a53c:	0076      	lsls	r6, r6, #1
 800a53e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a542:	e7f0      	b.n	800a526 <powf+0xde>
 800a544:	004b      	lsls	r3, r1, #1
 800a546:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a54a:	d8ee      	bhi.n	800a52a <powf+0xe2>
 800a54c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a550:	d1eb      	bne.n	800a52a <powf+0xe2>
 800a552:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a556:	f000 80b5 	beq.w	800a6c4 <powf+0x27c>
 800a55a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a55e:	ea6f 0606 	mvn.w	r6, r6
 800a562:	bf34      	ite	cc
 800a564:	2300      	movcc	r3, #0
 800a566:	2301      	movcs	r3, #1
 800a568:	0ff6      	lsrs	r6, r6, #31
 800a56a:	42b3      	cmp	r3, r6
 800a56c:	f040 80ad 	bne.w	800a6ca <powf+0x282>
 800a570:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800a574:	e7db      	b.n	800a52e <powf+0xe6>
 800a576:	004f      	lsls	r7, r1, #1
 800a578:	1e7a      	subs	r2, r7, #1
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d31c      	bcc.n	800a5b8 <powf+0x170>
 800a57e:	2900      	cmp	r1, #0
 800a580:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a584:	da0f      	bge.n	800a5a6 <powf+0x15e>
 800a586:	ee10 0a90 	vmov	r0, s1
 800a58a:	f7ff ff45 	bl	800a418 <checkint>
 800a58e:	2801      	cmp	r0, #1
 800a590:	d109      	bne.n	800a5a6 <powf+0x15e>
 800a592:	eeb1 0a40 	vneg.f32	s0, s0
 800a596:	b947      	cbnz	r7, 800a5aa <powf+0x162>
 800a598:	2e00      	cmp	r6, #0
 800a59a:	dac8      	bge.n	800a52e <powf+0xe6>
 800a59c:	b005      	add	sp, #20
 800a59e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a5a2:	f000 b8dd 	b.w	800a760 <__math_divzerof>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e7f5      	b.n	800a596 <powf+0x14e>
 800a5aa:	2e00      	cmp	r6, #0
 800a5ac:	dabf      	bge.n	800a52e <powf+0xe6>
 800a5ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a5b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a5b6:	e7ba      	b.n	800a52e <powf+0xe6>
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	da1f      	bge.n	800a5fc <powf+0x1b4>
 800a5bc:	ee10 0a90 	vmov	r0, s1
 800a5c0:	f7ff ff2a 	bl	800a418 <checkint>
 800a5c4:	b920      	cbnz	r0, 800a5d0 <powf+0x188>
 800a5c6:	b005      	add	sp, #20
 800a5c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a5cc:	f000 b8d8 	b.w	800a780 <__math_invalidf>
 800a5d0:	2801      	cmp	r0, #1
 800a5d2:	bf14      	ite	ne
 800a5d4:	2000      	movne	r0, #0
 800a5d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a5da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a5de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a5e2:	f4bf af44 	bcs.w	800a46e <powf+0x26>
 800a5e6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a704 <powf+0x2bc>
 800a5ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a5ee:	ee10 3a10 	vmov	r3, s0
 800a5f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5f6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800a5fa:	e738      	b.n	800a46e <powf+0x26>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e7ee      	b.n	800a5de <powf+0x196>
 800a600:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a6e8 <powf+0x2a0>
 800a604:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60c:	dd10      	ble.n	800a630 <powf+0x1e8>
 800a60e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800a612:	2800      	cmp	r0, #0
 800a614:	d15c      	bne.n	800a6d0 <powf+0x288>
 800a616:	9302      	str	r3, [sp, #8]
 800a618:	eddd 7a02 	vldr	s15, [sp, #8]
 800a61c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a620:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a624:	eef4 7a47 	vcmp.f32	s15, s14
 800a628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62c:	f47f af6e 	bne.w	800a50c <powf+0xc4>
 800a630:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a6f0 <powf+0x2a8>
 800a634:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63c:	d804      	bhi.n	800a648 <powf+0x200>
 800a63e:	b005      	add	sp, #20
 800a640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a644:	f000 b87a 	b.w	800a73c <__math_uflowf>
 800a648:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a6f8 <powf+0x2b0>
 800a64c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a654:	d504      	bpl.n	800a660 <powf+0x218>
 800a656:	b005      	add	sp, #20
 800a658:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a65c:	f000 b874 	b.w	800a748 <__math_may_uflowf>
 800a660:	4b29      	ldr	r3, [pc, #164]	; (800a708 <powf+0x2c0>)
 800a662:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800a666:	ee30 6b07 	vadd.f64	d6, d0, d7
 800a66a:	ed8d 6b00 	vstr	d6, [sp]
 800a66e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a672:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a676:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a67a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a67e:	f006 011f 	and.w	r1, r6, #31
 800a682:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a686:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800a68a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800a68e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800a692:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800a696:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a69a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a69e:	1836      	adds	r6, r6, r0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	eb13 040c 	adds.w	r4, r3, ip
 800a6a6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800a6aa:	eb41 050e 	adc.w	r5, r1, lr
 800a6ae:	eea7 0b04 	vfma.f64	d0, d7, d4
 800a6b2:	ec45 4b17 	vmov	d7, r4, r5
 800a6b6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a6ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a6be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a6c2:	e734      	b.n	800a52e <powf+0xe6>
 800a6c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a6c8:	e731      	b.n	800a52e <powf+0xe6>
 800a6ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a70c <powf+0x2c4>
 800a6ce:	e72e      	b.n	800a52e <powf+0xe6>
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	eddd 7a03 	vldr	s15, [sp, #12]
 800a6d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6de:	e7a1      	b.n	800a624 <powf+0x1dc>
 800a6e0:	ffd1d571 	.word	0xffd1d571
 800a6e4:	405fffff 	.word	0x405fffff
 800a6e8:	ffa3aae2 	.word	0xffa3aae2
 800a6ec:	405fffff 	.word	0x405fffff
 800a6f0:	00000000 	.word	0x00000000
 800a6f4:	c062c000 	.word	0xc062c000
 800a6f8:	00000000 	.word	0x00000000
 800a6fc:	c062a000 	.word	0xc062a000
 800a700:	0800a830 	.word	0x0800a830
 800a704:	4b000000 	.word	0x4b000000
 800a708:	0800a958 	.word	0x0800a958
 800a70c:	00000000 	.word	0x00000000

0800a710 <with_errnof>:
 800a710:	b513      	push	{r0, r1, r4, lr}
 800a712:	4604      	mov	r4, r0
 800a714:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a718:	f7ff fe4c 	bl	800a3b4 <__errno>
 800a71c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a720:	6004      	str	r4, [r0, #0]
 800a722:	b002      	add	sp, #8
 800a724:	bd10      	pop	{r4, pc}

0800a726 <xflowf>:
 800a726:	b130      	cbz	r0, 800a736 <xflowf+0x10>
 800a728:	eef1 7a40 	vneg.f32	s15, s0
 800a72c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a730:	2022      	movs	r0, #34	; 0x22
 800a732:	f7ff bfed 	b.w	800a710 <with_errnof>
 800a736:	eef0 7a40 	vmov.f32	s15, s0
 800a73a:	e7f7      	b.n	800a72c <xflowf+0x6>

0800a73c <__math_uflowf>:
 800a73c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a744 <__math_uflowf+0x8>
 800a740:	f7ff bff1 	b.w	800a726 <xflowf>
 800a744:	10000000 	.word	0x10000000

0800a748 <__math_may_uflowf>:
 800a748:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a750 <__math_may_uflowf+0x8>
 800a74c:	f7ff bfeb 	b.w	800a726 <xflowf>
 800a750:	1a200000 	.word	0x1a200000

0800a754 <__math_oflowf>:
 800a754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a75c <__math_oflowf+0x8>
 800a758:	f7ff bfe5 	b.w	800a726 <xflowf>
 800a75c:	70000000 	.word	0x70000000

0800a760 <__math_divzerof>:
 800a760:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a764:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a768:	2800      	cmp	r0, #0
 800a76a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800a76e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a77c <__math_divzerof+0x1c>
 800a772:	2022      	movs	r0, #34	; 0x22
 800a774:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a778:	f7ff bfca 	b.w	800a710 <with_errnof>
 800a77c:	00000000 	.word	0x00000000

0800a780 <__math_invalidf>:
 800a780:	eef0 7a40 	vmov.f32	s15, s0
 800a784:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a788:	eef4 7a67 	vcmp.f32	s15, s15
 800a78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a790:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a794:	d602      	bvs.n	800a79c <__math_invalidf+0x1c>
 800a796:	2021      	movs	r0, #33	; 0x21
 800a798:	f7ff bfba 	b.w	800a710 <with_errnof>
 800a79c:	4770      	bx	lr
	...

0800a7a0 <_init>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr

0800a7ac <_fini>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	bf00      	nop
 800a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	469e      	mov	lr, r3
 800a7b6:	4770      	bx	lr
