
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df0  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080070dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000680  24000010  080070ec  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000690  080070ec  00020690  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f5d3  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002efa  00000000  00000000  0003f611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cf0  00000000  00000000  00042510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c00  00000000  00000000  00043200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000035a3  00000000  00000000  00043e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012fcc  00000000  00000000  000473a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015005e  00000000  00000000  0005a36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001aa3cd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000347c  00000000  00000000  001aa420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080070a4 	.word	0x080070a4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	080070a4 	.word	0x080070a4

0800030c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <HAL_SAI_ErrorCallback+0x28>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d103      	bne.n	8000326 <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f80a 	bl	8000338 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000324:	e002      	b.n	800032c <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 f864 	bl	80003f4 <BSP_AUDIO_IN_Error_CallBack>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40015824 	.word	0x40015824

08000338 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d003      	beq.n	800036a <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000362:	f06f 0301 	mvn.w	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	e011      	b.n	800038e <BSP_AUDIO_IN_RecordPDM+0x42>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[AUDIO_IN_INSTANCE], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample/8U))) != HAL_OK)
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <BSP_AUDIO_IN_RecordPDM+0x4c>)
 800036c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800036e:	08db      	lsrs	r3, r3, #3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	b29b      	uxth	r3, r3
 8000378:	461a      	mov	r2, r3
 800037a:	68b9      	ldr	r1, [r7, #8]
 800037c:	4807      	ldr	r0, [pc, #28]	; (800039c <BSP_AUDIO_IN_RecordPDM+0x50>)
 800037e:	f006 f87d 	bl	800647c <HAL_SAI_Receive_DMA>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <BSP_AUDIO_IN_RecordPDM+0x42>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000388:	f06f 0303 	mvn.w	r3, #3
 800038c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 800038e:	697b      	ldr	r3, [r7, #20]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	240003b8 	.word	0x240003b8
 800039c:	240000c4 	.word	0x240000c4

080003a0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f819 	bl	80003e0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b082      	sub	sp, #8
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 f804 	bl	80003cc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040e:	2003      	movs	r0, #3
 8000410:	f000 f95c 	bl	80006cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000414:	f003 fbe2 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8000418:	4602      	mov	r2, r0
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_Init+0x68>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	f003 030f 	and.w	r3, r3, #15
 8000424:	4913      	ldr	r1, [pc, #76]	; (8000474 <HAL_Init+0x6c>)
 8000426:	5ccb      	ldrb	r3, [r1, r3]
 8000428:	f003 031f 	and.w	r3, r3, #31
 800042c:	fa22 f303 	lsr.w	r3, r2, r3
 8000430:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <HAL_Init+0x68>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 030f 	and.w	r3, r3, #15
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_Init+0x6c>)
 800043c:	5cd3      	ldrb	r3, [r2, r3]
 800043e:	f003 031f 	and.w	r3, r3, #31
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	fa22 f303 	lsr.w	r3, r2, r3
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <HAL_Init+0x70>)
 800044a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800044c:	4a0b      	ldr	r2, [pc, #44]	; (800047c <HAL_Init+0x74>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000452:	2000      	movs	r0, #0
 8000454:	f000 f814 	bl	8000480 <HAL_InitTick>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	e002      	b.n	8000468 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000462:	f006 fb4b 	bl	8006afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	58024400 	.word	0x58024400
 8000474:	080070c4 	.word	0x080070c4
 8000478:	2400000c 	.word	0x2400000c
 800047c:	24000008 	.word	0x24000008

08000480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_InitTick+0x60>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d101      	bne.n	8000494 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000490:	2301      	movs	r3, #1
 8000492:	e021      	b.n	80004d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <HAL_InitTick+0x64>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_InitTick+0x60>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f941 	bl	8000732 <HAL_SYSTICK_Config>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	e00e      	b.n	80004d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2b0f      	cmp	r3, #15
 80004be:	d80a      	bhi.n	80004d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004c0:	2200      	movs	r2, #0
 80004c2:	6879      	ldr	r1, [r7, #4]
 80004c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004c8:	f000 f90b 	bl	80006e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <HAL_InitTick+0x68>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e000      	b.n	80004d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	24000004 	.word	0x24000004
 80004e4:	24000008 	.word	0x24000008
 80004e8:	24000000 	.word	0x24000000

080004ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_IncTick+0x20>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_IncTick+0x24>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4413      	add	r3, r2
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_IncTick+0x24>)
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	24000004 	.word	0x24000004
 8000510:	24000448 	.word	0x24000448

08000514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return uwTick;
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HAL_GetTick+0x14>)
 800051a:	681b      	ldr	r3, [r3, #0]
}
 800051c:	4618      	mov	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	24000448 	.word	0x24000448

0800052c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <__NVIC_SetPriorityGrouping+0x40>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000548:	4013      	ands	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <__NVIC_SetPriorityGrouping+0x44>)
 8000556:	4313      	orrs	r3, r2
 8000558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800055a:	4a04      	ldr	r2, [pc, #16]	; (800056c <__NVIC_SetPriorityGrouping+0x40>)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	60d3      	str	r3, [r2, #12]
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00
 8000570:	05fa0000 	.word	0x05fa0000

08000574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <__NVIC_GetPriorityGrouping+0x18>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	f003 0307 	and.w	r3, r3, #7
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800059a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db0b      	blt.n	80005ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	f003 021f 	and.w	r2, r3, #31
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <__NVIC_EnableIRQ+0x38>)
 80005aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ae:	095b      	lsrs	r3, r3, #5
 80005b0:	2001      	movs	r0, #1
 80005b2:	fa00 f202 	lsl.w	r2, r0, r2
 80005b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100

080005cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db0a      	blt.n	80005f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	490c      	ldr	r1, [pc, #48]	; (8000618 <__NVIC_SetPriority+0x4c>)
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	0112      	lsls	r2, r2, #4
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	440b      	add	r3, r1
 80005f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f4:	e00a      	b.n	800060c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4908      	ldr	r1, [pc, #32]	; (800061c <__NVIC_SetPriority+0x50>)
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	3b04      	subs	r3, #4
 8000604:	0112      	lsls	r2, r2, #4
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	440b      	add	r3, r1
 800060a:	761a      	strb	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000620:	b480      	push	{r7}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	f1c3 0307 	rsb	r3, r3, #7
 800063a:	2b04      	cmp	r3, #4
 800063c:	bf28      	it	cs
 800063e:	2304      	movcs	r3, #4
 8000640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3304      	adds	r3, #4
 8000646:	2b06      	cmp	r3, #6
 8000648:	d902      	bls.n	8000650 <NVIC_EncodePriority+0x30>
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3b03      	subs	r3, #3
 800064e:	e000      	b.n	8000652 <NVIC_EncodePriority+0x32>
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	43da      	mvns	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	401a      	ands	r2, r3
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43d9      	mvns	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000678:	4313      	orrs	r3, r2
         );
}
 800067a:	4618      	mov	r0, r3
 800067c:	3724      	adds	r7, #36	; 0x24
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b01      	subs	r3, #1
 8000694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000698:	d301      	bcc.n	800069e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069a:	2301      	movs	r3, #1
 800069c:	e00f      	b.n	80006be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <SysTick_Config+0x40>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a6:	210f      	movs	r1, #15
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006ac:	f7ff ff8e 	bl	80005cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SysTick_Config+0x40>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <SysTick_Config+0x40>)
 80006b8:	2207      	movs	r2, #7
 80006ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e000e010 	.word	0xe000e010

080006cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff29 	bl	800052c <__NVIC_SetPriorityGrouping>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	4603      	mov	r3, r0
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006f0:	f7ff ff40 	bl	8000574 <__NVIC_GetPriorityGrouping>
 80006f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	6978      	ldr	r0, [r7, #20]
 80006fc:	f7ff ff90 	bl	8000620 <NVIC_EncodePriority>
 8000700:	4602      	mov	r2, r0
 8000702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff5f 	bl	80005cc <__NVIC_SetPriority>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff33 	bl	8000590 <__NVIC_EnableIRQ>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffa4 	bl	8000688 <SysTick_Config>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e054      	b.n	8000808 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7f5b      	ldrb	r3, [r3, #29]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f006 f9de 	bl	8006b30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2202      	movs	r2, #2
 8000778:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10c      	bne.n	800079c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <HAL_CRC_Init+0xc4>)
 8000788:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f022 0218 	bic.w	r2, r2, #24
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	e00c      	b.n	80007b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6899      	ldr	r1, [r3, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	461a      	mov	r2, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f834 	bl	8000814 <HAL_CRCEx_Polynomial_Set>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e028      	b.n	8000808 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d105      	bne.n	80007ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	e004      	b.n	80007d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	6912      	ldr	r2, [r2, #16]
 80007d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	699a      	ldr	r2, [r3, #24]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	04c11db7 	.word	0x04c11db7

08000814 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000824:	231f      	movs	r3, #31
 8000826:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000828:	bf00      	nop
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	613a      	str	r2, [r7, #16]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d009      	beq.n	8000848 <HAL_CRCEx_Polynomial_Set+0x34>
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	fa22 f303 	lsr.w	r3, r2, r3
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f0      	beq.n	800082a <HAL_CRCEx_Polynomial_Set+0x16>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b18      	cmp	r3, #24
 800084c:	d846      	bhi.n	80008dc <HAL_CRCEx_Polynomial_Set+0xc8>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	080008e3 	.word	0x080008e3
 8000858:	080008dd 	.word	0x080008dd
 800085c:	080008dd 	.word	0x080008dd
 8000860:	080008dd 	.word	0x080008dd
 8000864:	080008dd 	.word	0x080008dd
 8000868:	080008dd 	.word	0x080008dd
 800086c:	080008dd 	.word	0x080008dd
 8000870:	080008dd 	.word	0x080008dd
 8000874:	080008d1 	.word	0x080008d1
 8000878:	080008dd 	.word	0x080008dd
 800087c:	080008dd 	.word	0x080008dd
 8000880:	080008dd 	.word	0x080008dd
 8000884:	080008dd 	.word	0x080008dd
 8000888:	080008dd 	.word	0x080008dd
 800088c:	080008dd 	.word	0x080008dd
 8000890:	080008dd 	.word	0x080008dd
 8000894:	080008c5 	.word	0x080008c5
 8000898:	080008dd 	.word	0x080008dd
 800089c:	080008dd 	.word	0x080008dd
 80008a0:	080008dd 	.word	0x080008dd
 80008a4:	080008dd 	.word	0x080008dd
 80008a8:	080008dd 	.word	0x080008dd
 80008ac:	080008dd 	.word	0x080008dd
 80008b0:	080008dd 	.word	0x080008dd
 80008b4:	080008b9 	.word	0x080008b9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d913      	bls.n	80008e6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80008c2:	e010      	b.n	80008e6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	2b07      	cmp	r3, #7
 80008c8:	d90f      	bls.n	80008ea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80008ce:	e00c      	b.n	80008ea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d90b      	bls.n	80008ee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80008da:	e008      	b.n	80008ee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	75fb      	strb	r3, [r7, #23]
      break;
 80008e0:	e006      	b.n	80008f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80008e2:	bf00      	nop
 80008e4:	e004      	b.n	80008f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80008e6:	bf00      	nop
 80008e8:	e002      	b.n	80008f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80008ea:	bf00      	nop
 80008ec:	e000      	b.n	80008f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80008ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10d      	bne.n	8000912 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f023 0118 	bic.w	r1, r3, #24
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	430a      	orrs	r2, r1
 8000910:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
}
 8000914:	4618      	mov	r0, r3
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff fdf4 	bl	8000514 <HAL_GetTick>
 800092c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d101      	bne.n	8000938 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e314      	b.n	8000f62 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a66      	ldr	r2, [pc, #408]	; (8000ad8 <HAL_DMA_Init+0x1b8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d04a      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a65      	ldr	r2, [pc, #404]	; (8000adc <HAL_DMA_Init+0x1bc>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d045      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a63      	ldr	r2, [pc, #396]	; (8000ae0 <HAL_DMA_Init+0x1c0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d040      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <HAL_DMA_Init+0x1c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d03b      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <HAL_DMA_Init+0x1c8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d036      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a5f      	ldr	r2, [pc, #380]	; (8000aec <HAL_DMA_Init+0x1cc>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d031      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a5d      	ldr	r2, [pc, #372]	; (8000af0 <HAL_DMA_Init+0x1d0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d02c      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a5c      	ldr	r2, [pc, #368]	; (8000af4 <HAL_DMA_Init+0x1d4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d027      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a5a      	ldr	r2, [pc, #360]	; (8000af8 <HAL_DMA_Init+0x1d8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d022      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a59      	ldr	r2, [pc, #356]	; (8000afc <HAL_DMA_Init+0x1dc>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d01d      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a57      	ldr	r2, [pc, #348]	; (8000b00 <HAL_DMA_Init+0x1e0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d018      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a56      	ldr	r2, [pc, #344]	; (8000b04 <HAL_DMA_Init+0x1e4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d013      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a54      	ldr	r2, [pc, #336]	; (8000b08 <HAL_DMA_Init+0x1e8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00e      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a53      	ldr	r2, [pc, #332]	; (8000b0c <HAL_DMA_Init+0x1ec>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d009      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a51      	ldr	r2, [pc, #324]	; (8000b10 <HAL_DMA_Init+0x1f0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d004      	beq.n	80009d8 <HAL_DMA_Init+0xb8>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_DMA_Init+0x1f4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d101      	bne.n	80009dc <HAL_DMA_Init+0xbc>
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <HAL_DMA_Init+0xbe>
 80009dc:	2300      	movs	r3, #0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 813c 	beq.w	8000c5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2202      	movs	r2, #2
 80009e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <HAL_DMA_Init+0x1b8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d04a      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <HAL_DMA_Init+0x1bc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d045      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a34      	ldr	r2, [pc, #208]	; (8000ae0 <HAL_DMA_Init+0x1c0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d040      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a33      	ldr	r2, [pc, #204]	; (8000ae4 <HAL_DMA_Init+0x1c4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d03b      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <HAL_DMA_Init+0x1c8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d036      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a30      	ldr	r2, [pc, #192]	; (8000aec <HAL_DMA_Init+0x1cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d031      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <HAL_DMA_Init+0x1d0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d02c      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <HAL_DMA_Init+0x1d4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d027      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <HAL_DMA_Init+0x1d8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d022      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <HAL_DMA_Init+0x1dc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d01d      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <HAL_DMA_Init+0x1e0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d018      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <HAL_DMA_Init+0x1e4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d013      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <HAL_DMA_Init+0x1e8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00e      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a24      	ldr	r2, [pc, #144]	; (8000b0c <HAL_DMA_Init+0x1ec>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d009      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_DMA_Init+0x1f0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d004      	beq.n	8000a94 <HAL_DMA_Init+0x174>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <HAL_DMA_Init+0x1f4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d108      	bne.n	8000aa6 <HAL_DMA_Init+0x186>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	e007      	b.n	8000ab6 <HAL_DMA_Init+0x196>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000ab6:	e02f      	b.n	8000b18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ab8:	f7ff fd2c 	bl	8000514 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	d928      	bls.n	8000b18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2220      	movs	r2, #32
 8000aca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e244      	b.n	8000f62 <HAL_DMA_Init+0x642>
 8000ad8:	40020010 	.word	0x40020010
 8000adc:	40020028 	.word	0x40020028
 8000ae0:	40020040 	.word	0x40020040
 8000ae4:	40020058 	.word	0x40020058
 8000ae8:	40020070 	.word	0x40020070
 8000aec:	40020088 	.word	0x40020088
 8000af0:	400200a0 	.word	0x400200a0
 8000af4:	400200b8 	.word	0x400200b8
 8000af8:	40020410 	.word	0x40020410
 8000afc:	40020428 	.word	0x40020428
 8000b00:	40020440 	.word	0x40020440
 8000b04:	40020458 	.word	0x40020458
 8000b08:	40020470 	.word	0x40020470
 8000b0c:	40020488 	.word	0x40020488
 8000b10:	400204a0 	.word	0x400204a0
 8000b14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1c8      	bne.n	8000ab8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <HAL_DMA_Init+0x424>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000b3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d107      	bne.n	8000b7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4313      	orrs	r3, r2
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b28      	cmp	r3, #40	; 0x28
 8000b82:	d903      	bls.n	8000b8c <HAL_DMA_Init+0x26c>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b2e      	cmp	r3, #46	; 0x2e
 8000b8a:	d91f      	bls.n	8000bcc <HAL_DMA_Init+0x2ac>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b3e      	cmp	r3, #62	; 0x3e
 8000b92:	d903      	bls.n	8000b9c <HAL_DMA_Init+0x27c>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b42      	cmp	r3, #66	; 0x42
 8000b9a:	d917      	bls.n	8000bcc <HAL_DMA_Init+0x2ac>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b46      	cmp	r3, #70	; 0x46
 8000ba2:	d903      	bls.n	8000bac <HAL_DMA_Init+0x28c>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b48      	cmp	r3, #72	; 0x48
 8000baa:	d90f      	bls.n	8000bcc <HAL_DMA_Init+0x2ac>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b4e      	cmp	r3, #78	; 0x4e
 8000bb2:	d903      	bls.n	8000bbc <HAL_DMA_Init+0x29c>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b52      	cmp	r3, #82	; 0x52
 8000bba:	d907      	bls.n	8000bcc <HAL_DMA_Init+0x2ac>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b73      	cmp	r3, #115	; 0x73
 8000bc2:	d905      	bls.n	8000bd0 <HAL_DMA_Init+0x2b0>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b77      	cmp	r3, #119	; 0x77
 8000bca:	d801      	bhi.n	8000bd0 <HAL_DMA_Init+0x2b0>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <HAL_DMA_Init+0x2b2>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bdc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f023 0307 	bic.w	r3, r3, #7
 8000bf4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d117      	bne.n	8000c38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00e      	beq.n	8000c38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f001 fdd8 	bl	80027d0 <DMA_CheckFifoParam>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e194      	b.n	8000f62 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f001 fd13 	bl	800266c <DMA_CalcBaseAndBitshift>
 8000c46:	4603      	mov	r3, r0
 8000c48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	223f      	movs	r2, #63	; 0x3f
 8000c54:	409a      	lsls	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	e0ca      	b.n	8000df2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a39      	ldr	r2, [pc, #228]	; (8000d48 <HAL_DMA_Init+0x428>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d022      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <HAL_DMA_Init+0x42c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d01d      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <HAL_DMA_Init+0x430>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d018      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a35      	ldr	r2, [pc, #212]	; (8000d54 <HAL_DMA_Init+0x434>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d013      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <HAL_DMA_Init+0x438>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00e      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <HAL_DMA_Init+0x43c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d009      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a30      	ldr	r2, [pc, #192]	; (8000d60 <HAL_DMA_Init+0x440>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d004      	beq.n	8000cac <HAL_DMA_Init+0x38c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <HAL_DMA_Init+0x444>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d101      	bne.n	8000cb0 <HAL_DMA_Init+0x390>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <HAL_DMA_Init+0x392>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8094 	beq.w	8000de0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <HAL_DMA_Init+0x428>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d021      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_DMA_Init+0x42c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d01c      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <HAL_DMA_Init+0x430>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d017      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_DMA_Init+0x434>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d012      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_DMA_Init+0x438>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00d      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_DMA_Init+0x43c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d008      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_DMA_Init+0x440>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d003      	beq.n	8000d06 <HAL_DMA_Init+0x3e6>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_DMA_Init+0x444>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_DMA_Init+0x448>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b40      	cmp	r3, #64	; 0x40
 8000d2e:	d01d      	beq.n	8000d6c <HAL_DMA_Init+0x44c>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b80      	cmp	r3, #128	; 0x80
 8000d36:	d102      	bne.n	8000d3e <HAL_DMA_Init+0x41e>
 8000d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d3c:	e017      	b.n	8000d6e <HAL_DMA_Init+0x44e>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e015      	b.n	8000d6e <HAL_DMA_Init+0x44e>
 8000d42:	bf00      	nop
 8000d44:	fe10803f 	.word	0xfe10803f
 8000d48:	58025408 	.word	0x58025408
 8000d4c:	5802541c 	.word	0x5802541c
 8000d50:	58025430 	.word	0x58025430
 8000d54:	58025444 	.word	0x58025444
 8000d58:	58025458 	.word	0x58025458
 8000d5c:	5802546c 	.word	0x5802546c
 8000d60:	58025480 	.word	0x58025480
 8000d64:	58025494 	.word	0x58025494
 8000d68:	fffe000f 	.word	0xfffe000f
 8000d6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68d2      	ldr	r2, [r2, #12]
 8000d72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000d9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b6e      	ldr	r3, [pc, #440]	; (8000f6c <HAL_DMA_Init+0x64c>)
 8000db4:	4413      	add	r3, r2
 8000db6:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <HAL_DMA_Init+0x650>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	009a      	lsls	r2, r3, #2
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f001 fc51 	bl	800266c <DMA_CalcBaseAndBitshift>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	e008      	b.n	8000df2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2240      	movs	r2, #64	; 0x40
 8000de4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0b7      	b.n	8000f62 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a5f      	ldr	r2, [pc, #380]	; (8000f74 <HAL_DMA_Init+0x654>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d072      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a5d      	ldr	r2, [pc, #372]	; (8000f78 <HAL_DMA_Init+0x658>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d06d      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a5c      	ldr	r2, [pc, #368]	; (8000f7c <HAL_DMA_Init+0x65c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d068      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <HAL_DMA_Init+0x660>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d063      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a59      	ldr	r2, [pc, #356]	; (8000f84 <HAL_DMA_Init+0x664>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d05e      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <HAL_DMA_Init+0x668>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d059      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a56      	ldr	r2, [pc, #344]	; (8000f8c <HAL_DMA_Init+0x66c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d054      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a54      	ldr	r2, [pc, #336]	; (8000f90 <HAL_DMA_Init+0x670>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d04f      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a53      	ldr	r2, [pc, #332]	; (8000f94 <HAL_DMA_Init+0x674>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d04a      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a51      	ldr	r2, [pc, #324]	; (8000f98 <HAL_DMA_Init+0x678>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d045      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_DMA_Init+0x67c>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d040      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_DMA_Init+0x680>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d03b      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_DMA_Init+0x684>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d036      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a4b      	ldr	r2, [pc, #300]	; (8000fa8 <HAL_DMA_Init+0x688>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d031      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_DMA_Init+0x68c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d02c      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_DMA_Init+0x690>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d027      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a47      	ldr	r2, [pc, #284]	; (8000fb4 <HAL_DMA_Init+0x694>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d022      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a45      	ldr	r2, [pc, #276]	; (8000fb8 <HAL_DMA_Init+0x698>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01d      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a44      	ldr	r2, [pc, #272]	; (8000fbc <HAL_DMA_Init+0x69c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d018      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <HAL_DMA_Init+0x6a0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <HAL_DMA_Init+0x6a4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d00e      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <HAL_DMA_Init+0x6a8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d009      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <HAL_DMA_Init+0x6ac>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d004      	beq.n	8000ee2 <HAL_DMA_Init+0x5c2>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <HAL_DMA_Init+0x6b0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_DMA_Init+0x5c6>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_DMA_Init+0x5c8>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d032      	beq.n	8000f52 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 fceb 	bl	80028c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b80      	cmp	r3, #128	; 0x80
 8000ef8:	d102      	bne.n	8000f00 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000f14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d010      	beq.n	8000f40 <HAL_DMA_Init+0x620>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d80c      	bhi.n	8000f40 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f001 fd68 	bl	80029fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	e008      	b.n	8000f52 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	a7fdabf8 	.word	0xa7fdabf8
 8000f70:	cccccccd 	.word	0xcccccccd
 8000f74:	40020010 	.word	0x40020010
 8000f78:	40020028 	.word	0x40020028
 8000f7c:	40020040 	.word	0x40020040
 8000f80:	40020058 	.word	0x40020058
 8000f84:	40020070 	.word	0x40020070
 8000f88:	40020088 	.word	0x40020088
 8000f8c:	400200a0 	.word	0x400200a0
 8000f90:	400200b8 	.word	0x400200b8
 8000f94:	40020410 	.word	0x40020410
 8000f98:	40020428 	.word	0x40020428
 8000f9c:	40020440 	.word	0x40020440
 8000fa0:	40020458 	.word	0x40020458
 8000fa4:	40020470 	.word	0x40020470
 8000fa8:	40020488 	.word	0x40020488
 8000fac:	400204a0 	.word	0x400204a0
 8000fb0:	400204b8 	.word	0x400204b8
 8000fb4:	58025408 	.word	0x58025408
 8000fb8:	5802541c 	.word	0x5802541c
 8000fbc:	58025430 	.word	0x58025430
 8000fc0:	58025444 	.word	0x58025444
 8000fc4:	58025458 	.word	0x58025458
 8000fc8:	5802546c 	.word	0x5802546c
 8000fcc:	58025480 	.word	0x58025480
 8000fd0:	58025494 	.word	0x58025494

08000fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e226      	b.n	800143e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_DMA_Start_IT+0x2a>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e21f      	b.n	800143e <HAL_DMA_Start_IT+0x46a>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	f040 820a 	bne.w	8001428 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <HAL_DMA_Start_IT+0x1f4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d04a      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a66      	ldr	r2, [pc, #408]	; (80011cc <HAL_DMA_Start_IT+0x1f8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d045      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a65      	ldr	r2, [pc, #404]	; (80011d0 <HAL_DMA_Start_IT+0x1fc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d040      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_DMA_Start_IT+0x200>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d03b      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a62      	ldr	r2, [pc, #392]	; (80011d8 <HAL_DMA_Start_IT+0x204>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d036      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <HAL_DMA_Start_IT+0x208>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d031      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_DMA_Start_IT+0x20c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d02c      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a5d      	ldr	r2, [pc, #372]	; (80011e4 <HAL_DMA_Start_IT+0x210>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d027      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a5c      	ldr	r2, [pc, #368]	; (80011e8 <HAL_DMA_Start_IT+0x214>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d022      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a5a      	ldr	r2, [pc, #360]	; (80011ec <HAL_DMA_Start_IT+0x218>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01d      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a59      	ldr	r2, [pc, #356]	; (80011f0 <HAL_DMA_Start_IT+0x21c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d018      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_DMA_Start_IT+0x220>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a56      	ldr	r2, [pc, #344]	; (80011f8 <HAL_DMA_Start_IT+0x224>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d00e      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a54      	ldr	r2, [pc, #336]	; (80011fc <HAL_DMA_Start_IT+0x228>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d009      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a53      	ldr	r2, [pc, #332]	; (8001200 <HAL_DMA_Start_IT+0x22c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d004      	beq.n	80010c2 <HAL_DMA_Start_IT+0xee>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a51      	ldr	r2, [pc, #324]	; (8001204 <HAL_DMA_Start_IT+0x230>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d108      	bne.n	80010d4 <HAL_DMA_Start_IT+0x100>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_DMA_Start_IT+0x110>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f001 f912 	bl	8002314 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <HAL_DMA_Start_IT+0x1f4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d04a      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <HAL_DMA_Start_IT+0x1f8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d045      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_DMA_Start_IT+0x1fc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d040      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_DMA_Start_IT+0x200>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d03b      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <HAL_DMA_Start_IT+0x204>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d036      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <HAL_DMA_Start_IT+0x208>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d031      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <HAL_DMA_Start_IT+0x20c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02c      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <HAL_DMA_Start_IT+0x210>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d027      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_DMA_Start_IT+0x214>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d022      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_DMA_Start_IT+0x218>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d01d      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <HAL_DMA_Start_IT+0x21c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d018      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_DMA_Start_IT+0x220>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d013      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_DMA_Start_IT+0x224>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00e      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <HAL_DMA_Start_IT+0x228>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d009      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_DMA_Start_IT+0x22c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_DMA_Start_IT+0x1bc>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <HAL_DMA_Start_IT+0x230>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_DMA_Start_IT+0x1c0>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_DMA_Start_IT+0x1c2>
 8001194:	2300      	movs	r3, #0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d036      	beq.n	8001208 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 021e 	bic.w	r2, r3, #30
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0216 	orr.w	r2, r2, #22
 80011ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d03e      	beq.n	8001234 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0208 	orr.w	r2, r2, #8
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e035      	b.n	8001234 <HAL_DMA_Start_IT+0x260>
 80011c8:	40020010 	.word	0x40020010
 80011cc:	40020028 	.word	0x40020028
 80011d0:	40020040 	.word	0x40020040
 80011d4:	40020058 	.word	0x40020058
 80011d8:	40020070 	.word	0x40020070
 80011dc:	40020088 	.word	0x40020088
 80011e0:	400200a0 	.word	0x400200a0
 80011e4:	400200b8 	.word	0x400200b8
 80011e8:	40020410 	.word	0x40020410
 80011ec:	40020428 	.word	0x40020428
 80011f0:	40020440 	.word	0x40020440
 80011f4:	40020458 	.word	0x40020458
 80011f8:	40020470 	.word	0x40020470
 80011fc:	40020488 	.word	0x40020488
 8001200:	400204a0 	.word	0x400204a0
 8001204:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 020e 	bic.w	r2, r3, #14
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 020a 	orr.w	r2, r2, #10
 800121a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0204 	orr.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a83      	ldr	r2, [pc, #524]	; (8001448 <HAL_DMA_Start_IT+0x474>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d072      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a82      	ldr	r2, [pc, #520]	; (800144c <HAL_DMA_Start_IT+0x478>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d06d      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a80      	ldr	r2, [pc, #512]	; (8001450 <HAL_DMA_Start_IT+0x47c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d068      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7f      	ldr	r2, [pc, #508]	; (8001454 <HAL_DMA_Start_IT+0x480>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d063      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a7d      	ldr	r2, [pc, #500]	; (8001458 <HAL_DMA_Start_IT+0x484>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d05e      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7c      	ldr	r2, [pc, #496]	; (800145c <HAL_DMA_Start_IT+0x488>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d059      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a7a      	ldr	r2, [pc, #488]	; (8001460 <HAL_DMA_Start_IT+0x48c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d054      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a79      	ldr	r2, [pc, #484]	; (8001464 <HAL_DMA_Start_IT+0x490>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d04f      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a77      	ldr	r2, [pc, #476]	; (8001468 <HAL_DMA_Start_IT+0x494>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d04a      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a76      	ldr	r2, [pc, #472]	; (800146c <HAL_DMA_Start_IT+0x498>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d045      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a74      	ldr	r2, [pc, #464]	; (8001470 <HAL_DMA_Start_IT+0x49c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d040      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a73      	ldr	r2, [pc, #460]	; (8001474 <HAL_DMA_Start_IT+0x4a0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d03b      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_DMA_Start_IT+0x4a4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d036      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a70      	ldr	r2, [pc, #448]	; (800147c <HAL_DMA_Start_IT+0x4a8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d031      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_DMA_Start_IT+0x4ac>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02c      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6d      	ldr	r2, [pc, #436]	; (8001484 <HAL_DMA_Start_IT+0x4b0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d027      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a6b      	ldr	r2, [pc, #428]	; (8001488 <HAL_DMA_Start_IT+0x4b4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d022      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6a      	ldr	r2, [pc, #424]	; (800148c <HAL_DMA_Start_IT+0x4b8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d01d      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_DMA_Start_IT+0x4bc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d018      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a67      	ldr	r2, [pc, #412]	; (8001494 <HAL_DMA_Start_IT+0x4c0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d013      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a65      	ldr	r2, [pc, #404]	; (8001498 <HAL_DMA_Start_IT+0x4c4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00e      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a64      	ldr	r2, [pc, #400]	; (800149c <HAL_DMA_Start_IT+0x4c8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d009      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a62      	ldr	r2, [pc, #392]	; (80014a0 <HAL_DMA_Start_IT+0x4cc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d004      	beq.n	8001324 <HAL_DMA_Start_IT+0x350>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a61      	ldr	r2, [pc, #388]	; (80014a4 <HAL_DMA_Start_IT+0x4d0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_DMA_Start_IT+0x354>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_DMA_Start_IT+0x356>
 8001328:	2300      	movs	r3, #0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01a      	beq.n	8001364 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800134a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800135e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001362:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a37      	ldr	r2, [pc, #220]	; (8001448 <HAL_DMA_Start_IT+0x474>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d04a      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_DMA_Start_IT+0x478>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d045      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_DMA_Start_IT+0x47c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d040      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a33      	ldr	r2, [pc, #204]	; (8001454 <HAL_DMA_Start_IT+0x480>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d03b      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_DMA_Start_IT+0x484>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d036      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <HAL_DMA_Start_IT+0x488>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d031      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <HAL_DMA_Start_IT+0x48c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d02c      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <HAL_DMA_Start_IT+0x490>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d027      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a2b      	ldr	r2, [pc, #172]	; (8001468 <HAL_DMA_Start_IT+0x494>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d022      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a2a      	ldr	r2, [pc, #168]	; (800146c <HAL_DMA_Start_IT+0x498>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d01d      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_DMA_Start_IT+0x49c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d018      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_DMA_Start_IT+0x4a0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a25      	ldr	r2, [pc, #148]	; (8001478 <HAL_DMA_Start_IT+0x4a4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00e      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_DMA_Start_IT+0x4a8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d009      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_DMA_Start_IT+0x4ac>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d004      	beq.n	8001404 <HAL_DMA_Start_IT+0x430>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <HAL_DMA_Start_IT+0x4b0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d108      	bne.n	8001416 <HAL_DMA_Start_IT+0x442>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e012      	b.n	800143c <HAL_DMA_Start_IT+0x468>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e009      	b.n	800143c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020010 	.word	0x40020010
 800144c:	40020028 	.word	0x40020028
 8001450:	40020040 	.word	0x40020040
 8001454:	40020058 	.word	0x40020058
 8001458:	40020070 	.word	0x40020070
 800145c:	40020088 	.word	0x40020088
 8001460:	400200a0 	.word	0x400200a0
 8001464:	400200b8 	.word	0x400200b8
 8001468:	40020410 	.word	0x40020410
 800146c:	40020428 	.word	0x40020428
 8001470:	40020440 	.word	0x40020440
 8001474:	40020458 	.word	0x40020458
 8001478:	40020470 	.word	0x40020470
 800147c:	40020488 	.word	0x40020488
 8001480:	400204a0 	.word	0x400204a0
 8001484:	400204b8 	.word	0x400204b8
 8001488:	58025408 	.word	0x58025408
 800148c:	5802541c 	.word	0x5802541c
 8001490:	58025430 	.word	0x58025430
 8001494:	58025444 	.word	0x58025444
 8001498:	58025458 	.word	0x58025458
 800149c:	5802546c 	.word	0x5802546c
 80014a0:	58025480 	.word	0x58025480
 80014a4:	58025494 	.word	0x58025494

080014a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014b4:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_DMA_IRQHandler+0x1ac>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a67      	ldr	r2, [pc, #412]	; (8001658 <HAL_DMA_IRQHandler+0x1b0>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a9b      	lsrs	r3, r3, #10
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a5f      	ldr	r2, [pc, #380]	; (800165c <HAL_DMA_IRQHandler+0x1b4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04a      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <HAL_DMA_IRQHandler+0x1b8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d045      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5c      	ldr	r2, [pc, #368]	; (8001664 <HAL_DMA_IRQHandler+0x1bc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d040      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_DMA_IRQHandler+0x1c0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d03b      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a59      	ldr	r2, [pc, #356]	; (800166c <HAL_DMA_IRQHandler+0x1c4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d036      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_DMA_IRQHandler+0x1c8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d031      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a56      	ldr	r2, [pc, #344]	; (8001674 <HAL_DMA_IRQHandler+0x1cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d02c      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_DMA_IRQHandler+0x1d0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d027      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a53      	ldr	r2, [pc, #332]	; (800167c <HAL_DMA_IRQHandler+0x1d4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d022      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_DMA_IRQHandler+0x1d8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01d      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_DMA_IRQHandler+0x1dc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d018      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <HAL_DMA_IRQHandler+0x1e0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a4d      	ldr	r2, [pc, #308]	; (800168c <HAL_DMA_IRQHandler+0x1e4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00e      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_DMA_IRQHandler+0x1e8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d009      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_DMA_IRQHandler+0x1ec>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d004      	beq.n	800157a <HAL_DMA_IRQHandler+0xd2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_DMA_IRQHandler+0x1f0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_DMA_IRQHandler+0xd6>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_DMA_IRQHandler+0xd8>
 800157e:	2300      	movs	r3, #0
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 842b 	beq.w	8001ddc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2208      	movs	r2, #8
 8001590:	409a      	lsls	r2, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80a2 	beq.w	80016e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <HAL_DMA_IRQHandler+0x1b4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d04a      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <HAL_DMA_IRQHandler+0x1b8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d045      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <HAL_DMA_IRQHandler+0x1bc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d040      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <HAL_DMA_IRQHandler+0x1c0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d03b      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a28      	ldr	r2, [pc, #160]	; (800166c <HAL_DMA_IRQHandler+0x1c4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d036      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_DMA_IRQHandler+0x1c8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d031      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_DMA_IRQHandler+0x1cc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d02c      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_DMA_IRQHandler+0x1d0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d027      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_DMA_IRQHandler+0x1d4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d022      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_DMA_IRQHandler+0x1d8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d01d      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_DMA_IRQHandler+0x1dc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d018      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_DMA_IRQHandler+0x1e0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1c      	ldr	r2, [pc, #112]	; (800168c <HAL_DMA_IRQHandler+0x1e4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00e      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_DMA_IRQHandler+0x1e8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d009      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_DMA_IRQHandler+0x1ec>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d004      	beq.n	800163c <HAL_DMA_IRQHandler+0x194>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_DMA_IRQHandler+0x1f0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d12f      	bne.n	800169c <HAL_DMA_IRQHandler+0x1f4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	e02e      	b.n	80016b0 <HAL_DMA_IRQHandler+0x208>
 8001652:	bf00      	nop
 8001654:	24000008 	.word	0x24000008
 8001658:	1b4e81b5 	.word	0x1b4e81b5
 800165c:	40020010 	.word	0x40020010
 8001660:	40020028 	.word	0x40020028
 8001664:	40020040 	.word	0x40020040
 8001668:	40020058 	.word	0x40020058
 800166c:	40020070 	.word	0x40020070
 8001670:	40020088 	.word	0x40020088
 8001674:	400200a0 	.word	0x400200a0
 8001678:	400200b8 	.word	0x400200b8
 800167c:	40020410 	.word	0x40020410
 8001680:	40020428 	.word	0x40020428
 8001684:	40020440 	.word	0x40020440
 8001688:	40020458 	.word	0x40020458
 800168c:	40020470 	.word	0x40020470
 8001690:	40020488 	.word	0x40020488
 8001694:	400204a0 	.word	0x400204a0
 8001698:	400204b8 	.word	0x400204b8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d015      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2208      	movs	r2, #8
 80016ce:	409a      	lsls	r2, r3
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d06e      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a69      	ldr	r2, [pc, #420]	; (80018a0 <HAL_DMA_IRQHandler+0x3f8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d04a      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <HAL_DMA_IRQHandler+0x3fc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d045      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a66      	ldr	r2, [pc, #408]	; (80018a8 <HAL_DMA_IRQHandler+0x400>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d040      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a64      	ldr	r2, [pc, #400]	; (80018ac <HAL_DMA_IRQHandler+0x404>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d03b      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a63      	ldr	r2, [pc, #396]	; (80018b0 <HAL_DMA_IRQHandler+0x408>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d036      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a61      	ldr	r2, [pc, #388]	; (80018b4 <HAL_DMA_IRQHandler+0x40c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d031      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a60      	ldr	r2, [pc, #384]	; (80018b8 <HAL_DMA_IRQHandler+0x410>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d02c      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_DMA_IRQHandler+0x414>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d027      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5d      	ldr	r2, [pc, #372]	; (80018c0 <HAL_DMA_IRQHandler+0x418>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d022      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <HAL_DMA_IRQHandler+0x41c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d01d      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <HAL_DMA_IRQHandler+0x420>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d018      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_DMA_IRQHandler+0x424>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a57      	ldr	r2, [pc, #348]	; (80018d0 <HAL_DMA_IRQHandler+0x428>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00e      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_DMA_IRQHandler+0x42c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d009      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_DMA_IRQHandler+0x430>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d004      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2ee>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_DMA_IRQHandler+0x434>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10a      	bne.n	80017ac <HAL_DMA_IRQHandler+0x304>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	e003      	b.n	80017b4 <HAL_DMA_IRQHandler+0x30c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00d      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2201      	movs	r2, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	f043 0202 	orr.w	r2, r3, #2
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2204      	movs	r2, #4
 80017de:	409a      	lsls	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 808f 	beq.w	8001908 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2c      	ldr	r2, [pc, #176]	; (80018a0 <HAL_DMA_IRQHandler+0x3f8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d04a      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <HAL_DMA_IRQHandler+0x3fc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d045      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_DMA_IRQHandler+0x400>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d040      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <HAL_DMA_IRQHandler+0x404>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d03b      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_DMA_IRQHandler+0x408>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d036      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a24      	ldr	r2, [pc, #144]	; (80018b4 <HAL_DMA_IRQHandler+0x40c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d031      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_DMA_IRQHandler+0x410>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d02c      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_DMA_IRQHandler+0x414>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d027      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_DMA_IRQHandler+0x418>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d022      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_DMA_IRQHandler+0x41c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01d      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_DMA_IRQHandler+0x420>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_DMA_IRQHandler+0x424>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <HAL_DMA_IRQHandler+0x428>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00e      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <HAL_DMA_IRQHandler+0x42c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d009      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_DMA_IRQHandler+0x430>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d004      	beq.n	800188a <HAL_DMA_IRQHandler+0x3e2>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_DMA_IRQHandler+0x434>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12a      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x438>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e023      	b.n	80018e8 <HAL_DMA_IRQHandler+0x440>
 80018a0:	40020010 	.word	0x40020010
 80018a4:	40020028 	.word	0x40020028
 80018a8:	40020040 	.word	0x40020040
 80018ac:	40020058 	.word	0x40020058
 80018b0:	40020070 	.word	0x40020070
 80018b4:	40020088 	.word	0x40020088
 80018b8:	400200a0 	.word	0x400200a0
 80018bc:	400200b8 	.word	0x400200b8
 80018c0:	40020410 	.word	0x40020410
 80018c4:	40020428 	.word	0x40020428
 80018c8:	40020440 	.word	0x40020440
 80018cc:	40020458 	.word	0x40020458
 80018d0:	40020470 	.word	0x40020470
 80018d4:	40020488 	.word	0x40020488
 80018d8:	400204a0 	.word	0x400204a0
 80018dc:	400204b8 	.word	0x400204b8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2204      	movs	r2, #4
 80018f6:	409a      	lsls	r2, r3
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f043 0204 	orr.w	r2, r3, #4
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2210      	movs	r2, #16
 8001912:	409a      	lsls	r2, r3
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a6 	beq.w	8001a6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a85      	ldr	r2, [pc, #532]	; (8001b38 <HAL_DMA_IRQHandler+0x690>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d04a      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_DMA_IRQHandler+0x694>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d045      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <HAL_DMA_IRQHandler+0x698>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d040      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a80      	ldr	r2, [pc, #512]	; (8001b44 <HAL_DMA_IRQHandler+0x69c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d03b      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_DMA_IRQHandler+0x6a0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d036      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a7d      	ldr	r2, [pc, #500]	; (8001b4c <HAL_DMA_IRQHandler+0x6a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d031      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7c      	ldr	r2, [pc, #496]	; (8001b50 <HAL_DMA_IRQHandler+0x6a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d02c      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a7a      	ldr	r2, [pc, #488]	; (8001b54 <HAL_DMA_IRQHandler+0x6ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d027      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a79      	ldr	r2, [pc, #484]	; (8001b58 <HAL_DMA_IRQHandler+0x6b0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <HAL_DMA_IRQHandler+0x6b4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01d      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a76      	ldr	r2, [pc, #472]	; (8001b60 <HAL_DMA_IRQHandler+0x6b8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d018      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a74      	ldr	r2, [pc, #464]	; (8001b64 <HAL_DMA_IRQHandler+0x6bc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a73      	ldr	r2, [pc, #460]	; (8001b68 <HAL_DMA_IRQHandler+0x6c0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00e      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a71      	ldr	r2, [pc, #452]	; (8001b6c <HAL_DMA_IRQHandler+0x6c4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d009      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a70      	ldr	r2, [pc, #448]	; (8001b70 <HAL_DMA_IRQHandler+0x6c8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_DMA_IRQHandler+0x516>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_DMA_IRQHandler+0x6cc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10a      	bne.n	80019d4 <HAL_DMA_IRQHandler+0x52c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e009      	b.n	80019e8 <HAL_DMA_IRQHandler+0x540>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf14      	ite	ne
 80019e2:	2301      	movne	r3, #1
 80019e4:	2300      	moveq	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03e      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2210      	movs	r2, #16
 80019f6:	409a      	lsls	r2, r3
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d018      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d108      	bne.n	8001a2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d024      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
 8001a28:	e01f      	b.n	8001a6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01b      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
 8001a3a:	e016      	b.n	8001a6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d107      	bne.n	8001a5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0208 	bic.w	r2, r2, #8
 8001a58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2220      	movs	r2, #32
 8001a74:	409a      	lsls	r2, r3
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8110 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <HAL_DMA_IRQHandler+0x690>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <HAL_DMA_IRQHandler+0x694>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <HAL_DMA_IRQHandler+0x698>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_DMA_IRQHandler+0x69c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_DMA_IRQHandler+0x6a0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_DMA_IRQHandler+0x6a4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <HAL_DMA_IRQHandler+0x6a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <HAL_DMA_IRQHandler+0x6ac>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <HAL_DMA_IRQHandler+0x6b0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_DMA_IRQHandler+0x6b4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_DMA_IRQHandler+0x6b8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_DMA_IRQHandler+0x6bc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_DMA_IRQHandler+0x6c0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_DMA_IRQHandler+0x6c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_DMA_IRQHandler+0x6c8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x678>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_DMA_IRQHandler+0x6cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d12b      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x6d0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	e02a      	b.n	8001b8c <HAL_DMA_IRQHandler+0x6e4>
 8001b36:	bf00      	nop
 8001b38:	40020010 	.word	0x40020010
 8001b3c:	40020028 	.word	0x40020028
 8001b40:	40020040 	.word	0x40020040
 8001b44:	40020058 	.word	0x40020058
 8001b48:	40020070 	.word	0x40020070
 8001b4c:	40020088 	.word	0x40020088
 8001b50:	400200a0 	.word	0x400200a0
 8001b54:	400200b8 	.word	0x400200b8
 8001b58:	40020410 	.word	0x40020410
 8001b5c:	40020428 	.word	0x40020428
 8001b60:	40020440 	.word	0x40020440
 8001b64:	40020458 	.word	0x40020458
 8001b68:	40020470 	.word	0x40020470
 8001b6c:	40020488 	.word	0x40020488
 8001b70:	400204a0 	.word	0x400204a0
 8001b74:	400204b8 	.word	0x400204b8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8087 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d139      	bne.n	8001c22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0216 	bic.w	r2, r2, #22
 8001bbc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_DMA_IRQHandler+0x736>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0208 	bic.w	r2, r2, #8
 8001bec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	223f      	movs	r2, #63	; 0x3f
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 834a 	beq.w	80022ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
          }
          return;
 8001c20:	e344      	b.n	80022ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
 8001c4e:	e027      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
 8001c60:	e01e      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0210 	bic.w	r2, r2, #16
 8001c7e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8306 	beq.w	80022b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8088 	beq.w	8001dc8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <HAL_DMA_IRQHandler+0xa08>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d04a      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a79      	ldr	r2, [pc, #484]	; (8001eb4 <HAL_DMA_IRQHandler+0xa0c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d045      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a77      	ldr	r2, [pc, #476]	; (8001eb8 <HAL_DMA_IRQHandler+0xa10>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d040      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a76      	ldr	r2, [pc, #472]	; (8001ebc <HAL_DMA_IRQHandler+0xa14>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d03b      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a74      	ldr	r2, [pc, #464]	; (8001ec0 <HAL_DMA_IRQHandler+0xa18>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d036      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a73      	ldr	r2, [pc, #460]	; (8001ec4 <HAL_DMA_IRQHandler+0xa1c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d031      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a71      	ldr	r2, [pc, #452]	; (8001ec8 <HAL_DMA_IRQHandler+0xa20>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02c      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a70      	ldr	r2, [pc, #448]	; (8001ecc <HAL_DMA_IRQHandler+0xa24>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d027      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a6e      	ldr	r2, [pc, #440]	; (8001ed0 <HAL_DMA_IRQHandler+0xa28>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d022      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6d      	ldr	r2, [pc, #436]	; (8001ed4 <HAL_DMA_IRQHandler+0xa2c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d01d      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6b      	ldr	r2, [pc, #428]	; (8001ed8 <HAL_DMA_IRQHandler+0xa30>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_DMA_IRQHandler+0xa34>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a68      	ldr	r2, [pc, #416]	; (8001ee0 <HAL_DMA_IRQHandler+0xa38>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_DMA_IRQHandler+0xa3c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_DMA_IRQHandler+0xa40>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x8b8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a64      	ldr	r2, [pc, #400]	; (8001eec <HAL_DMA_IRQHandler+0xa44>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <HAL_DMA_IRQHandler+0x8ca>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e007      	b.n	8001d82 <HAL_DMA_IRQHandler+0x8da>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d307      	bcc.n	8001d9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_DMA_IRQHandler+0x8da>
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001d9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001db6:	e003      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8272 	beq.w	80022b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
 8001dda:	e26c      	b.n	80022b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a43      	ldr	r2, [pc, #268]	; (8001ef0 <HAL_DMA_IRQHandler+0xa48>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d022      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_DMA_IRQHandler+0xa4c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01d      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a40      	ldr	r2, [pc, #256]	; (8001ef8 <HAL_DMA_IRQHandler+0xa50>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d018      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	; (8001efc <HAL_DMA_IRQHandler+0xa54>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_DMA_IRQHandler+0xa58>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00e      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_DMA_IRQHandler+0xa5c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_DMA_IRQHandler+0xa60>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x984>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <HAL_DMA_IRQHandler+0xa64>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x988>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_DMA_IRQHandler+0x98a>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 823f 	beq.w	80022b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80cd 	beq.w	8001ff0 <HAL_DMA_IRQHandler+0xb48>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80c7 	beq.w	8001ff0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d049      	beq.n	8001f10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8210 	beq.w	80022b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e98:	e20a      	b.n	80022b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8206 	beq.w	80022b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001eac:	e200      	b.n	80022b0 <HAL_DMA_IRQHandler+0xe08>
 8001eae:	bf00      	nop
 8001eb0:	40020010 	.word	0x40020010
 8001eb4:	40020028 	.word	0x40020028
 8001eb8:	40020040 	.word	0x40020040
 8001ebc:	40020058 	.word	0x40020058
 8001ec0:	40020070 	.word	0x40020070
 8001ec4:	40020088 	.word	0x40020088
 8001ec8:	400200a0 	.word	0x400200a0
 8001ecc:	400200b8 	.word	0x400200b8
 8001ed0:	40020410 	.word	0x40020410
 8001ed4:	40020428 	.word	0x40020428
 8001ed8:	40020440 	.word	0x40020440
 8001edc:	40020458 	.word	0x40020458
 8001ee0:	40020470 	.word	0x40020470
 8001ee4:	40020488 	.word	0x40020488
 8001ee8:	400204a0 	.word	0x400204a0
 8001eec:	400204b8 	.word	0x400204b8
 8001ef0:	58025408 	.word	0x58025408
 8001ef4:	5802541c 	.word	0x5802541c
 8001ef8:	58025430 	.word	0x58025430
 8001efc:	58025444 	.word	0x58025444
 8001f00:	58025458 	.word	0x58025458
 8001f04:	5802546c 	.word	0x5802546c
 8001f08:	58025480 	.word	0x58025480
 8001f0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d160      	bne.n	8001fdc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a8c      	ldr	r2, [pc, #560]	; (8002150 <HAL_DMA_IRQHandler+0xca8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04a      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a8a      	ldr	r2, [pc, #552]	; (8002154 <HAL_DMA_IRQHandler+0xcac>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d045      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a89      	ldr	r2, [pc, #548]	; (8002158 <HAL_DMA_IRQHandler+0xcb0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d040      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a87      	ldr	r2, [pc, #540]	; (800215c <HAL_DMA_IRQHandler+0xcb4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d03b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a86      	ldr	r2, [pc, #536]	; (8002160 <HAL_DMA_IRQHandler+0xcb8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d036      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a84      	ldr	r2, [pc, #528]	; (8002164 <HAL_DMA_IRQHandler+0xcbc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d031      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a83      	ldr	r2, [pc, #524]	; (8002168 <HAL_DMA_IRQHandler+0xcc0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d02c      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a81      	ldr	r2, [pc, #516]	; (800216c <HAL_DMA_IRQHandler+0xcc4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d027      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	; (8002170 <HAL_DMA_IRQHandler+0xcc8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d022      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a7e      	ldr	r2, [pc, #504]	; (8002174 <HAL_DMA_IRQHandler+0xccc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01d      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7d      	ldr	r2, [pc, #500]	; (8002178 <HAL_DMA_IRQHandler+0xcd0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d018      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7b      	ldr	r2, [pc, #492]	; (800217c <HAL_DMA_IRQHandler+0xcd4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_DMA_IRQHandler+0xcd8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a78      	ldr	r2, [pc, #480]	; (8002184 <HAL_DMA_IRQHandler+0xcdc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a77      	ldr	r2, [pc, #476]	; (8002188 <HAL_DMA_IRQHandler+0xce0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_IRQHandler+0xb12>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a75      	ldr	r2, [pc, #468]	; (800218c <HAL_DMA_IRQHandler+0xce4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d108      	bne.n	8001fcc <HAL_DMA_IRQHandler+0xb24>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0208 	bic.w	r2, r2, #8
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e007      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb34>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0204 	bic.w	r2, r2, #4
 8001fda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8165 	beq.w	80022b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fee:	e15f      	b.n	80022b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80c5 	beq.w	8002190 <HAL_DMA_IRQHandler+0xce8>
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80bf 	beq.w	8002190 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2202      	movs	r2, #2
 800201c:	409a      	lsls	r2, r3
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 813a 	beq.w	80022b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002048:	e134      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8130 	beq.w	80022b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800205c:	e12a      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d168      	bne.n	800213a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a38      	ldr	r2, [pc, #224]	; (8002150 <HAL_DMA_IRQHandler+0xca8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d04a      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a37      	ldr	r2, [pc, #220]	; (8002154 <HAL_DMA_IRQHandler+0xcac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d045      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_DMA_IRQHandler+0xcb0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d040      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a34      	ldr	r2, [pc, #208]	; (800215c <HAL_DMA_IRQHandler+0xcb4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d03b      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_DMA_IRQHandler+0xcb8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d036      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a31      	ldr	r2, [pc, #196]	; (8002164 <HAL_DMA_IRQHandler+0xcbc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d031      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <HAL_DMA_IRQHandler+0xcc0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02c      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2e      	ldr	r2, [pc, #184]	; (800216c <HAL_DMA_IRQHandler+0xcc4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d027      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_DMA_IRQHandler+0xcc8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d022      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_DMA_IRQHandler+0xccc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d01d      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a29      	ldr	r2, [pc, #164]	; (8002178 <HAL_DMA_IRQHandler+0xcd0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d018      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_DMA_IRQHandler+0xcd4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_DMA_IRQHandler+0xcd8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00e      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a25      	ldr	r2, [pc, #148]	; (8002184 <HAL_DMA_IRQHandler+0xcdc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d009      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <HAL_DMA_IRQHandler+0xce0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_DMA_IRQHandler+0xc60>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_DMA_IRQHandler+0xce4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <HAL_DMA_IRQHandler+0xc72>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0214 	bic.w	r2, r2, #20
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e007      	b.n	800212a <HAL_DMA_IRQHandler+0xc82>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 020a 	bic.w	r2, r2, #10
 8002128:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80b8 	beq.w	80022b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800214c:	e0b2      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0c>
 800214e:	bf00      	nop
 8002150:	40020010 	.word	0x40020010
 8002154:	40020028 	.word	0x40020028
 8002158:	40020040 	.word	0x40020040
 800215c:	40020058 	.word	0x40020058
 8002160:	40020070 	.word	0x40020070
 8002164:	40020088 	.word	0x40020088
 8002168:	400200a0 	.word	0x400200a0
 800216c:	400200b8 	.word	0x400200b8
 8002170:	40020410 	.word	0x40020410
 8002174:	40020428 	.word	0x40020428
 8002178:	40020440 	.word	0x40020440
 800217c:	40020458 	.word	0x40020458
 8002180:	40020470 	.word	0x40020470
 8002184:	40020488 	.word	0x40020488
 8002188:	400204a0 	.word	0x400204a0
 800218c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2208      	movs	r2, #8
 800219a:	409a      	lsls	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8088 	beq.w	80022b6 <HAL_DMA_IRQHandler+0xe0e>
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8082 	beq.w	80022b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a41      	ldr	r2, [pc, #260]	; (80022bc <HAL_DMA_IRQHandler+0xe14>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d04a      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <HAL_DMA_IRQHandler+0xe18>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d045      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3e      	ldr	r2, [pc, #248]	; (80022c4 <HAL_DMA_IRQHandler+0xe1c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d040      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <HAL_DMA_IRQHandler+0xe20>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d03b      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_DMA_IRQHandler+0xe24>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d036      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a39      	ldr	r2, [pc, #228]	; (80022d0 <HAL_DMA_IRQHandler+0xe28>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d031      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_DMA_IRQHandler+0xe2c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d02c      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <HAL_DMA_IRQHandler+0xe30>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d027      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a35      	ldr	r2, [pc, #212]	; (80022dc <HAL_DMA_IRQHandler+0xe34>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a33      	ldr	r2, [pc, #204]	; (80022e0 <HAL_DMA_IRQHandler+0xe38>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01d      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_DMA_IRQHandler+0xe3c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d018      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a30      	ldr	r2, [pc, #192]	; (80022e8 <HAL_DMA_IRQHandler+0xe40>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <HAL_DMA_IRQHandler+0xe44>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00e      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_DMA_IRQHandler+0xe48>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <HAL_DMA_IRQHandler+0xe4c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d004      	beq.n	8002252 <HAL_DMA_IRQHandler+0xdaa>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_DMA_IRQHandler+0xe50>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d108      	bne.n	8002264 <HAL_DMA_IRQHandler+0xdbc>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 021c 	bic.w	r2, r2, #28
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e007      	b.n	8002274 <HAL_DMA_IRQHandler+0xdcc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 020e 	bic.w	r2, r2, #14
 8002272:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2201      	movs	r2, #1
 800227e:	409a      	lsls	r2, r3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e004      	b.n	80022b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80022ac:	bf00      	nop
 80022ae:	e002      	b.n	80022b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40020010 	.word	0x40020010
 80022c0:	40020028 	.word	0x40020028
 80022c4:	40020040 	.word	0x40020040
 80022c8:	40020058 	.word	0x40020058
 80022cc:	40020070 	.word	0x40020070
 80022d0:	40020088 	.word	0x40020088
 80022d4:	400200a0 	.word	0x400200a0
 80022d8:	400200b8 	.word	0x400200b8
 80022dc:	40020410 	.word	0x40020410
 80022e0:	40020428 	.word	0x40020428
 80022e4:	40020440 	.word	0x40020440
 80022e8:	40020458 	.word	0x40020458
 80022ec:	40020470 	.word	0x40020470
 80022f0:	40020488 	.word	0x40020488
 80022f4:	400204a0 	.word	0x400204a0
 80022f8:	400204b8 	.word	0x400204b8

080022fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a84      	ldr	r2, [pc, #528]	; (8002544 <DMA_SetConfig+0x230>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d072      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a82      	ldr	r2, [pc, #520]	; (8002548 <DMA_SetConfig+0x234>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d06d      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a81      	ldr	r2, [pc, #516]	; (800254c <DMA_SetConfig+0x238>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d068      	beq.n	800241e <DMA_SetConfig+0x10a>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7f      	ldr	r2, [pc, #508]	; (8002550 <DMA_SetConfig+0x23c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d063      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7e      	ldr	r2, [pc, #504]	; (8002554 <DMA_SetConfig+0x240>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d05e      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <DMA_SetConfig+0x244>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d059      	beq.n	800241e <DMA_SetConfig+0x10a>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7b      	ldr	r2, [pc, #492]	; (800255c <DMA_SetConfig+0x248>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d054      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a79      	ldr	r2, [pc, #484]	; (8002560 <DMA_SetConfig+0x24c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04f      	beq.n	800241e <DMA_SetConfig+0x10a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a78      	ldr	r2, [pc, #480]	; (8002564 <DMA_SetConfig+0x250>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d04a      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a76      	ldr	r2, [pc, #472]	; (8002568 <DMA_SetConfig+0x254>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d045      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a75      	ldr	r2, [pc, #468]	; (800256c <DMA_SetConfig+0x258>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d040      	beq.n	800241e <DMA_SetConfig+0x10a>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a73      	ldr	r2, [pc, #460]	; (8002570 <DMA_SetConfig+0x25c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d03b      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a72      	ldr	r2, [pc, #456]	; (8002574 <DMA_SetConfig+0x260>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d036      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a70      	ldr	r2, [pc, #448]	; (8002578 <DMA_SetConfig+0x264>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d031      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6f      	ldr	r2, [pc, #444]	; (800257c <DMA_SetConfig+0x268>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d02c      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6d      	ldr	r2, [pc, #436]	; (8002580 <DMA_SetConfig+0x26c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d027      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6c      	ldr	r2, [pc, #432]	; (8002584 <DMA_SetConfig+0x270>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6a      	ldr	r2, [pc, #424]	; (8002588 <DMA_SetConfig+0x274>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01d      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <DMA_SetConfig+0x278>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d018      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a67      	ldr	r2, [pc, #412]	; (8002590 <DMA_SetConfig+0x27c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <DMA_SetConfig+0x10a>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a66      	ldr	r2, [pc, #408]	; (8002594 <DMA_SetConfig+0x280>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00e      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a64      	ldr	r2, [pc, #400]	; (8002598 <DMA_SetConfig+0x284>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d009      	beq.n	800241e <DMA_SetConfig+0x10a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a63      	ldr	r2, [pc, #396]	; (800259c <DMA_SetConfig+0x288>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <DMA_SetConfig+0x10a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a61      	ldr	r2, [pc, #388]	; (80025a0 <DMA_SetConfig+0x28c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <DMA_SetConfig+0x10e>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <DMA_SetConfig+0x110>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002430:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002442:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3e      	ldr	r2, [pc, #248]	; (8002544 <DMA_SetConfig+0x230>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d04a      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <DMA_SetConfig+0x234>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d045      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <DMA_SetConfig+0x238>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d040      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <DMA_SetConfig+0x23c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d03b      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a38      	ldr	r2, [pc, #224]	; (8002554 <DMA_SetConfig+0x240>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d036      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a37      	ldr	r2, [pc, #220]	; (8002558 <DMA_SetConfig+0x244>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d031      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a35      	ldr	r2, [pc, #212]	; (800255c <DMA_SetConfig+0x248>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02c      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <DMA_SetConfig+0x24c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d027      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a32      	ldr	r2, [pc, #200]	; (8002564 <DMA_SetConfig+0x250>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d022      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a31      	ldr	r2, [pc, #196]	; (8002568 <DMA_SetConfig+0x254>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d01d      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a2f      	ldr	r2, [pc, #188]	; (800256c <DMA_SetConfig+0x258>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d018      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a2e      	ldr	r2, [pc, #184]	; (8002570 <DMA_SetConfig+0x25c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <DMA_SetConfig+0x260>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a2b      	ldr	r2, [pc, #172]	; (8002578 <DMA_SetConfig+0x264>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d009      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <DMA_SetConfig+0x268>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <DMA_SetConfig+0x1d0>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a28      	ldr	r2, [pc, #160]	; (8002580 <DMA_SetConfig+0x26c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <DMA_SetConfig+0x1d4>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <DMA_SetConfig+0x1d6>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d05a      	beq.n	80025a4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	223f      	movs	r2, #63	; 0x3f
 80024f8:	409a      	lsls	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800250c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d108      	bne.n	8002530 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800252e:	e087      	b.n	8002640 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
}
 8002540:	e07e      	b.n	8002640 <DMA_SetConfig+0x32c>
 8002542:	bf00      	nop
 8002544:	40020010 	.word	0x40020010
 8002548:	40020028 	.word	0x40020028
 800254c:	40020040 	.word	0x40020040
 8002550:	40020058 	.word	0x40020058
 8002554:	40020070 	.word	0x40020070
 8002558:	40020088 	.word	0x40020088
 800255c:	400200a0 	.word	0x400200a0
 8002560:	400200b8 	.word	0x400200b8
 8002564:	40020410 	.word	0x40020410
 8002568:	40020428 	.word	0x40020428
 800256c:	40020440 	.word	0x40020440
 8002570:	40020458 	.word	0x40020458
 8002574:	40020470 	.word	0x40020470
 8002578:	40020488 	.word	0x40020488
 800257c:	400204a0 	.word	0x400204a0
 8002580:	400204b8 	.word	0x400204b8
 8002584:	58025408 	.word	0x58025408
 8002588:	5802541c 	.word	0x5802541c
 800258c:	58025430 	.word	0x58025430
 8002590:	58025444 	.word	0x58025444
 8002594:	58025458 	.word	0x58025458
 8002598:	5802546c 	.word	0x5802546c
 800259c:	58025480 	.word	0x58025480
 80025a0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a28      	ldr	r2, [pc, #160]	; (800264c <DMA_SetConfig+0x338>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d022      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a27      	ldr	r2, [pc, #156]	; (8002650 <DMA_SetConfig+0x33c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01d      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <DMA_SetConfig+0x340>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d018      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a24      	ldr	r2, [pc, #144]	; (8002658 <DMA_SetConfig+0x344>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a22      	ldr	r2, [pc, #136]	; (800265c <DMA_SetConfig+0x348>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00e      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <DMA_SetConfig+0x34c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <DMA_SetConfig+0x350>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <DMA_SetConfig+0x2e0>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <DMA_SetConfig+0x354>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d101      	bne.n	80025f8 <DMA_SetConfig+0x2e4>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <DMA_SetConfig+0x2e6>
 80025f8:	2300      	movs	r3, #0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d020      	beq.n	8002640 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2201      	movs	r2, #1
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d108      	bne.n	8002630 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	60da      	str	r2, [r3, #12]
}
 800262e:	e007      	b.n	8002640 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	58025408 	.word	0x58025408
 8002650:	5802541c 	.word	0x5802541c
 8002654:	58025430 	.word	0x58025430
 8002658:	58025444 	.word	0x58025444
 800265c:	58025458 	.word	0x58025458
 8002660:	5802546c 	.word	0x5802546c
 8002664:	58025480 	.word	0x58025480
 8002668:	58025494 	.word	0x58025494

0800266c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a42      	ldr	r2, [pc, #264]	; (8002784 <DMA_CalcBaseAndBitshift+0x118>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d04a      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a41      	ldr	r2, [pc, #260]	; (8002788 <DMA_CalcBaseAndBitshift+0x11c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d045      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3f      	ldr	r2, [pc, #252]	; (800278c <DMA_CalcBaseAndBitshift+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d040      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <DMA_CalcBaseAndBitshift+0x124>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d03b      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3c      	ldr	r2, [pc, #240]	; (8002794 <DMA_CalcBaseAndBitshift+0x128>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d036      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <DMA_CalcBaseAndBitshift+0x12c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d031      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a39      	ldr	r2, [pc, #228]	; (800279c <DMA_CalcBaseAndBitshift+0x130>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02c      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a38      	ldr	r2, [pc, #224]	; (80027a0 <DMA_CalcBaseAndBitshift+0x134>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d027      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <DMA_CalcBaseAndBitshift+0x138>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d022      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a35      	ldr	r2, [pc, #212]	; (80027a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d01d      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a33      	ldr	r2, [pc, #204]	; (80027ac <DMA_CalcBaseAndBitshift+0x140>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d018      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a32      	ldr	r2, [pc, #200]	; (80027b0 <DMA_CalcBaseAndBitshift+0x144>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d013      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <DMA_CalcBaseAndBitshift+0x148>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00e      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2f      	ldr	r2, [pc, #188]	; (80027b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d009      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <DMA_CalcBaseAndBitshift+0x150>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <DMA_CalcBaseAndBitshift+0xa8>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <DMA_CalcBaseAndBitshift+0x154>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d101      	bne.n	8002718 <DMA_CalcBaseAndBitshift+0xac>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <DMA_CalcBaseAndBitshift+0xae>
 8002718:	2300      	movs	r3, #0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d024      	beq.n	8002768 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3b10      	subs	r3, #16
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <DMA_CalcBaseAndBitshift+0x158>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d908      	bls.n	8002758 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <DMA_CalcBaseAndBitshift+0x160>)
 800274e:	4013      	ands	r3, r2
 8002750:	1d1a      	adds	r2, r3, #4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	659a      	str	r2, [r3, #88]	; 0x58
 8002756:	e00d      	b.n	8002774 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <DMA_CalcBaseAndBitshift+0x160>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
 8002766:	e005      	b.n	8002774 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40020010 	.word	0x40020010
 8002788:	40020028 	.word	0x40020028
 800278c:	40020040 	.word	0x40020040
 8002790:	40020058 	.word	0x40020058
 8002794:	40020070 	.word	0x40020070
 8002798:	40020088 	.word	0x40020088
 800279c:	400200a0 	.word	0x400200a0
 80027a0:	400200b8 	.word	0x400200b8
 80027a4:	40020410 	.word	0x40020410
 80027a8:	40020428 	.word	0x40020428
 80027ac:	40020440 	.word	0x40020440
 80027b0:	40020458 	.word	0x40020458
 80027b4:	40020470 	.word	0x40020470
 80027b8:	40020488 	.word	0x40020488
 80027bc:	400204a0 	.word	0x400204a0
 80027c0:	400204b8 	.word	0x400204b8
 80027c4:	aaaaaaab 	.word	0xaaaaaaab
 80027c8:	080070bc 	.word	0x080070bc
 80027cc:	fffffc00 	.word	0xfffffc00

080027d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d120      	bne.n	8002826 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d858      	bhi.n	800289e <DMA_CheckFifoParam+0xce>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <DMA_CheckFifoParam+0x24>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002805 	.word	0x08002805
 80027f8:	08002817 	.word	0x08002817
 80027fc:	08002805 	.word	0x08002805
 8002800:	0800289f 	.word	0x0800289f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d048      	beq.n	80028a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002814:	e045      	b.n	80028a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800281e:	d142      	bne.n	80028a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002824:	e03f      	b.n	80028a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	d123      	bne.n	8002878 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b03      	cmp	r3, #3
 8002836:	d838      	bhi.n	80028aa <DMA_CheckFifoParam+0xda>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <DMA_CheckFifoParam+0x70>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002851 	.word	0x08002851
 8002844:	08002857 	.word	0x08002857
 8002848:	08002851 	.word	0x08002851
 800284c:	08002869 	.word	0x08002869
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
        break;
 8002854:	e030      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d025      	beq.n	80028ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002866:	e022      	b.n	80028ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002870:	d11f      	bne.n	80028b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002876:	e01c      	b.n	80028b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b02      	cmp	r3, #2
 800287e:	d902      	bls.n	8002886 <DMA_CheckFifoParam+0xb6>
 8002880:	2b03      	cmp	r3, #3
 8002882:	d003      	beq.n	800288c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002884:	e018      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
        break;
 800288a:	e015      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00e      	beq.n	80028b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
    break;
 800289c:	e00b      	b.n	80028b6 <DMA_CheckFifoParam+0xe6>
        break;
 800289e:	bf00      	nop
 80028a0:	e00a      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        break;
 80028a2:	bf00      	nop
 80028a4:	e008      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        break;
 80028a6:	bf00      	nop
 80028a8:	e006      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        break;
 80028aa:	bf00      	nop
 80028ac:	e004      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        break;
 80028ae:	bf00      	nop
 80028b0:	e002      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
        break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <DMA_CheckFifoParam+0xe8>
    break;
 80028b6:	bf00      	nop
    }
  }

  return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a38      	ldr	r2, [pc, #224]	; (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01d      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a32      	ldr	r2, [pc, #200]	; (80029cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01a      	beq.n	8002966 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3b08      	subs	r3, #8
 8002938:	4a28      	ldr	r2, [pc, #160]	; (80029dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002954:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002964:	e024      	b.n	80029b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3b10      	subs	r3, #16
 800296e:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d806      	bhi.n	800298e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d902      	bls.n	800298e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3308      	adds	r3, #8
 800298c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80029a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	58025408 	.word	0x58025408
 80029c0:	5802541c 	.word	0x5802541c
 80029c4:	58025430 	.word	0x58025430
 80029c8:	58025444 	.word	0x58025444
 80029cc:	58025458 	.word	0x58025458
 80029d0:	5802546c 	.word	0x5802546c
 80029d4:	58025480 	.word	0x58025480
 80029d8:	58025494 	.word	0x58025494
 80029dc:	cccccccd 	.word	0xcccccccd
 80029e0:	16009600 	.word	0x16009600
 80029e4:	58025880 	.word	0x58025880
 80029e8:	aaaaaaab 	.word	0xaaaaaaab
 80029ec:	400204b8 	.word	0x400204b8
 80029f0:	4002040f 	.word	0x4002040f
 80029f4:	10008200 	.word	0x10008200
 80029f8:	40020880 	.word	0x40020880

080029fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04a      	beq.n	8002aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d847      	bhi.n	8002aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d022      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a24      	ldr	r2, [pc, #144]	; (8002ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01d      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002a84:	671a      	str	r2, [r3, #112]	; 0x70
 8002a86:	e009      	b.n	8002a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	461a      	mov	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002a9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	58025408 	.word	0x58025408
 8002ab8:	5802541c 	.word	0x5802541c
 8002abc:	58025430 	.word	0x58025430
 8002ac0:	58025444 	.word	0x58025444
 8002ac4:	58025458 	.word	0x58025458
 8002ac8:	5802546c 	.word	0x5802546c
 8002acc:	58025480 	.word	0x58025480
 8002ad0:	58025494 	.word	0x58025494
 8002ad4:	1600963f 	.word	0x1600963f
 8002ad8:	58025940 	.word	0x58025940
 8002adc:	1000823f 	.word	0x1000823f
 8002ae0:	40020940 	.word	0x40020940

08002ae4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	7a1b      	ldrb	r3, [r3, #8]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d155      	bne.n	8002baa <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d049      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a49      	ldr	r2, [pc, #292]	; (8002c34 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d044      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a48      	ldr	r2, [pc, #288]	; (8002c38 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d03f      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a46      	ldr	r2, [pc, #280]	; (8002c3c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d03a      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d035      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a43      	ldr	r2, [pc, #268]	; (8002c44 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d030      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d02b      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a40      	ldr	r2, [pc, #256]	; (8002c4c <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d026      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d021      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	; (8002c54 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01c      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d017      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d012      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00d      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a37      	ldr	r2, [pc, #220]	; (8002c64 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d008      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d131      	bne.n	8002c1a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e02f      	b.n	8002c24 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002bda:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b2d9      	uxtb	r1, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	061a      	lsls	r2, r3, #24
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	04db      	lsls	r3, r3, #19
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	7a1b      	ldrb	r3, [r3, #8]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7a5b      	ldrb	r3, [r3, #9]
 8002c02:	025b      	lsls	r3, r3, #9
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e004      	b.n	8002c24 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
  }
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8

08002c70 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01a      	beq.n	8002cbe <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ca0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d022      	beq.n	8002d0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d22:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_GPIO_Init+0x228>)
 8002d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d26:	e18c      	b.n	8003042 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 817e 	beq.w	800303c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d005      	beq.n	8002d58 <HAL_GPIO_Init+0x44>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d130      	bne.n	8002dba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d8e:	2201      	movs	r2, #1
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 0201 	and.w	r2, r3, #1
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d017      	beq.n	8002df6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d123      	bne.n	8002e4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	69b9      	ldr	r1, [r7, #24]
 8002e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0203 	and.w	r2, r3, #3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80d8 	beq.w	800303c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8c:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_GPIO_Init+0x22c>)
 8002e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e92:	4a2b      	ldr	r2, [pc, #172]	; (8002f40 <HAL_GPIO_Init+0x22c>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_GPIO_Init+0x22c>)
 8002e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eaa:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <HAL_GPIO_Init+0x230>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_GPIO_Init+0x234>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04a      	beq.n	8002f6c <HAL_GPIO_Init+0x258>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_GPIO_Init+0x238>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02b      	beq.n	8002f36 <HAL_GPIO_Init+0x222>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_GPIO_Init+0x23c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d025      	beq.n	8002f32 <HAL_GPIO_Init+0x21e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <HAL_GPIO_Init+0x240>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01f      	beq.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_GPIO_Init+0x244>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d019      	beq.n	8002f2a <HAL_GPIO_Init+0x216>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_GPIO_Init+0x248>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_GPIO_Init+0x212>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_GPIO_Init+0x24c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00d      	beq.n	8002f22 <HAL_GPIO_Init+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_GPIO_Init+0x250>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <HAL_GPIO_Init+0x20a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <HAL_GPIO_Init+0x254>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_GPIO_Init+0x206>
 8002f16:	2309      	movs	r3, #9
 8002f18:	e029      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	e027      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e025      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f22:	2306      	movs	r3, #6
 8002f24:	e023      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f26:	2305      	movs	r3, #5
 8002f28:	e021      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	e01f      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e01d      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e01b      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e019      	b.n	8002f6e <HAL_GPIO_Init+0x25a>
 8002f3a:	bf00      	nop
 8002f3c:	58000080 	.word	0x58000080
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58000400 	.word	0x58000400
 8002f48:	58020000 	.word	0x58020000
 8002f4c:	58020400 	.word	0x58020400
 8002f50:	58020800 	.word	0x58020800
 8002f54:	58020c00 	.word	0x58020c00
 8002f58:	58021000 	.word	0x58021000
 8002f5c:	58021400 	.word	0x58021400
 8002f60:	58021800 	.word	0x58021800
 8002f64:	58021c00 	.word	0x58021c00
 8002f68:	58022400 	.word	0x58022400
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f002 0203 	and.w	r2, r2, #3
 8002f74:	0092      	lsls	r2, r2, #2
 8002f76:	4093      	lsls	r3, r2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7e:	4938      	ldr	r1, [pc, #224]	; (8003060 <HAL_GPIO_Init+0x34c>)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	3302      	adds	r3, #2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f ae6b 	bne.w	8002d28 <HAL_GPIO_Init+0x14>
  }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	3724      	adds	r7, #36	; 0x24
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	58000400 	.word	0x58000400

08003064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800306c:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_PWREx_ConfigSupply+0xb0>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	2b06      	cmp	r3, #6
 8003076:	d00a      	beq.n	800308e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003078:	4b26      	ldr	r3, [pc, #152]	; (8003114 <HAL_PWREx_ConfigSupply+0xb0>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e03f      	b.n	800310a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e03d      	b.n	800310a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_PWREx_ConfigSupply+0xb0>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003096:	491f      	ldr	r1, [pc, #124]	; (8003114 <HAL_PWREx_ConfigSupply+0xb0>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4313      	orrs	r3, r2
 800309c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800309e:	f7fd fa39 	bl	8000514 <HAL_GetTick>
 80030a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030a4:	e009      	b.n	80030ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030a6:	f7fd fa35 	bl	8000514 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b4:	d901      	bls.n	80030ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e027      	b.n	800310a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <HAL_PWREx_ConfigSupply+0xb0>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c6:	d1ee      	bne.n	80030a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b1e      	cmp	r3, #30
 80030cc:	d008      	beq.n	80030e0 <HAL_PWREx_ConfigSupply+0x7c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b2e      	cmp	r3, #46	; 0x2e
 80030d2:	d005      	beq.n	80030e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b1d      	cmp	r3, #29
 80030d8:	d002      	beq.n	80030e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b2d      	cmp	r3, #45	; 0x2d
 80030de:	d113      	bne.n	8003108 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80030e0:	f7fd fa18 	bl	8000514 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030e6:	e009      	b.n	80030fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030e8:	f7fd fa14 	bl	8000514 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f6:	d901      	bls.n	80030fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e006      	b.n	800310a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_PWREx_ConfigSupply+0xb0>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0311 	and.w	r3, r3, #17
 8003104:	2b11      	cmp	r3, #17
 8003106:	d1ef      	bne.n	80030e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	58024800 	.word	0x58024800

08003118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e397      	b.n	800385a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8087 	beq.w	8003246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003138:	4b9e      	ldr	r3, [pc, #632]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003142:	4b9c      	ldr	r3, [pc, #624]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	2b10      	cmp	r3, #16
 800314c:	d007      	beq.n	800315e <HAL_RCC_OscConfig+0x46>
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b18      	cmp	r3, #24
 8003152:	d110      	bne.n	8003176 <HAL_RCC_OscConfig+0x5e>
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d10b      	bne.n	8003176 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315e:	4b95      	ldr	r3, [pc, #596]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d06c      	beq.n	8003244 <HAL_RCC_OscConfig+0x12c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d168      	bne.n	8003244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e371      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x76>
 8003180:	4b8c      	ldr	r3, [pc, #560]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a8b      	ldr	r2, [pc, #556]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	e02e      	b.n	80031ec <HAL_RCC_OscConfig+0xd4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x98>
 8003196:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a86      	ldr	r2, [pc, #536]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 800319c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a83      	ldr	r2, [pc, #524]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xd4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0xbc>
 80031ba:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xd4>
 80031d4:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a76      	ldr	r2, [pc, #472]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b74      	ldr	r3, [pc, #464]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a73      	ldr	r2, [pc, #460]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fd f98e 	bl	8000514 <HAL_GetTick>
 80031f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fd f98a 	bl	8000514 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e325      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800320e:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xe4>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd f97a 	bl	8000514 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd f976 	bl	8000514 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e311      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x10c>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 808a 	beq.w	8003368 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003254:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800325c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800325e:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_RCC_OscConfig+0x162>
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2b18      	cmp	r3, #24
 800326e:	d137      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1c8>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d132      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327a:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x17a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e2e3      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003292:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 0219 	bic.w	r2, r3, #25
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4945      	ldr	r1, [pc, #276]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032a4:	f7fd f936 	bl	8000514 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fd f932 	bl	8000514 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e2cd      	b.n	800385a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	4936      	ldr	r1, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032de:	e043      	b.n	8003368 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d026      	beq.n	8003336 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 0219 	bic.w	r2, r3, #25
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	492f      	ldr	r1, [pc, #188]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fd f90b 	bl	8000514 <HAL_GetTick>
 80032fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003302:	f7fd f907 	bl	8000514 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e2a2      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4921      	ldr	r1, [pc, #132]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e018      	b.n	8003368 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fd f8e7 	bl	8000514 <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fd f8e3 	bl	8000514 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e27e      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800335c:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d06d      	beq.n	8003450 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d007      	beq.n	800339a <HAL_RCC_OscConfig+0x282>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b18      	cmp	r3, #24
 800338e:	d11e      	bne.n	80033ce <HAL_RCC_OscConfig+0x2b6>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d119      	bne.n	80033ce <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x29c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2a0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d004      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e253      	b.n	800385a <HAL_RCC_OscConfig+0x742>
 80033b2:	bf00      	nop
 80033b4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033b8:	4ba3      	ldr	r3, [pc, #652]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	49a0      	ldr	r1, [pc, #640]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033cc:	e040      	b.n	8003450 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033d6:	4b9c      	ldr	r3, [pc, #624]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a9b      	ldr	r2, [pc, #620]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd f897 	bl	8000514 <HAL_GetTick>
 80033e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033ea:	f7fd f893 	bl	8000514 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e22e      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033fc:	4b92      	ldr	r3, [pc, #584]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003408:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	498c      	ldr	r1, [pc, #560]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
 800341c:	e018      	b.n	8003450 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800341e:	4b8a      	ldr	r3, [pc, #552]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a89      	ldr	r2, [pc, #548]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd f873 	bl	8000514 <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003432:	f7fd f86f 	bl	8000514 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e20a      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003444:	4b80      	ldr	r3, [pc, #512]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d036      	beq.n	80034ca <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003464:	4b78      	ldr	r3, [pc, #480]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003468:	4a77      	ldr	r2, [pc, #476]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fd f850 	bl	8000514 <HAL_GetTick>
 8003474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fd f84c 	bl	8000514 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1e7      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800348a:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x360>
 8003496:	e018      	b.n	80034ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003498:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	4a6a      	ldr	r2, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd f836 	bl	8000514 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fd f832 	bl	8000514 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1cd      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034be:	4b62      	ldr	r3, [pc, #392]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d036      	beq.n	8003544 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034de:	4b5a      	ldr	r3, [pc, #360]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a59      	ldr	r2, [pc, #356]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80034e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ea:	f7fd f813 	bl	8000514 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80034f2:	f7fd f80f 	bl	8000514 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1aa      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x3da>
 8003510:	e018      	b.n	8003544 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003512:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4c      	ldr	r2, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800351c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800351e:	f7fc fff9 	bl	8000514 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003526:	f7fc fff5 	bl	8000514 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e190      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8085 	beq.w	800365c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <HAL_RCC_OscConfig+0x534>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <HAL_RCC_OscConfig+0x534>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800355e:	f7fc ffd9 	bl	8000514 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003566:	f7fc ffd5 	bl	8000514 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b64      	cmp	r3, #100	; 0x64
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e170      	b.n	800385a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003578:	4b34      	ldr	r3, [pc, #208]	; (800364c <HAL_RCC_OscConfig+0x534>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x482>
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	e02d      	b.n	80035f6 <HAL_RCC_OscConfig+0x4de>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x4a4>
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a25      	ldr	r2, [pc, #148]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	e01c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4de>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_OscConfig+0x4c6>
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	e00b      	b.n	80035f6 <HAL_RCC_OscConfig+0x4de>
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d015      	beq.n	800362a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7fc ff89 	bl	8000514 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fc ff85 	bl	8000514 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e11e      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_OscConfig+0x530>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ee      	beq.n	8003606 <HAL_RCC_OscConfig+0x4ee>
 8003628:	e018      	b.n	800365c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fc ff73 	bl	8000514 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003630:	e00e      	b.n	8003650 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fc ff6f 	bl	8000514 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d905      	bls.n	8003650 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e108      	b.n	800385a <HAL_RCC_OscConfig+0x742>
 8003648:	58024400 	.word	0x58024400
 800364c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003650:	4b84      	ldr	r3, [pc, #528]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ea      	bne.n	8003632 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80f9 	beq.w	8003858 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003666:	4b7f      	ldr	r3, [pc, #508]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366e:	2b18      	cmp	r3, #24
 8003670:	f000 80b4 	beq.w	80037dc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2b02      	cmp	r3, #2
 800367a:	f040 8095 	bne.w	80037a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b79      	ldr	r3, [pc, #484]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a78      	ldr	r2, [pc, #480]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fc ff43 	bl	8000514 <HAL_GetTick>
 800368e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fc ff3f 	bl	8000514 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0da      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036a4:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80036b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b4:	4b6c      	ldr	r3, [pc, #432]	; (8003868 <HAL_RCC_OscConfig+0x750>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	430a      	orrs	r2, r1
 80036c4:	4967      	ldr	r1, [pc, #412]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	628b      	str	r3, [r1, #40]	; 0x28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	3b01      	subs	r3, #1
 80036da:	025b      	lsls	r3, r3, #9
 80036dc:	b29b      	uxth	r3, r3
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	3b01      	subs	r3, #1
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	3b01      	subs	r3, #1
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036fa:	495a      	ldr	r1, [pc, #360]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003700:	4b58      	ldr	r3, [pc, #352]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a57      	ldr	r2, [pc, #348]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800370c:	4b55      	ldr	r3, [pc, #340]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800370e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003710:	4b56      	ldr	r3, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x754>)
 8003712:	4013      	ands	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003718:	00d2      	lsls	r2, r2, #3
 800371a:	4952      	ldr	r1, [pc, #328]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003720:	4b50      	ldr	r3, [pc, #320]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f023 020c 	bic.w	r2, r3, #12
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	494d      	ldr	r1, [pc, #308]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003732:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f023 0202 	bic.w	r2, r3, #2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4949      	ldr	r1, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003744:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a46      	ldr	r2, [pc, #280]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a43      	ldr	r2, [pc, #268]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	4a40      	ldr	r2, [pc, #256]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003768:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fc fec8 	bl	8000514 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fc fec4 	bl	8000514 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e05f      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800379a:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x670>
 80037a6:	e057      	b.n	8003858 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80037ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fc feae 	bl	8000514 <HAL_GetTick>
 80037b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fc feaa 	bl	8000514 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x6a4>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_OscConfig+0x74c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d031      	beq.n	8003854 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0203 	and.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d12a      	bne.n	8003854 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d122      	bne.n	8003854 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0a5b      	lsrs	r3, r3, #9
 8003822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d111      	bne.n	8003854 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0c1b      	lsrs	r3, r3, #16
 8003834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d108      	bne.n	8003854 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0e1b      	lsrs	r3, r3, #24
 8003846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3730      	adds	r7, #48	; 0x30
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
 8003868:	fffffc0c 	.word	0xfffffc0c
 800386c:	ffff0007 	.word	0xffff0007

08003870 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e19c      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b8a      	ldr	r3, [pc, #552]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d910      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b87      	ldr	r3, [pc, #540]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 020f 	bic.w	r2, r3, #15
 800389a:	4985      	ldr	r1, [pc, #532]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b83      	ldr	r3, [pc, #524]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e184      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d908      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038d0:	4b78      	ldr	r3, [pc, #480]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4975      	ldr	r1, [pc, #468]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	4b70      	ldr	r3, [pc, #448]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d908      	bls.n	8003910 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038fe:	4b6d      	ldr	r3, [pc, #436]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	496a      	ldr	r1, [pc, #424]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	4b64      	ldr	r3, [pc, #400]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003928:	429a      	cmp	r2, r3
 800392a:	d908      	bls.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800392c:	4b61      	ldr	r3, [pc, #388]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	495e      	ldr	r1, [pc, #376]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 800393a:	4313      	orrs	r3, r2
 800393c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003956:	429a      	cmp	r2, r3
 8003958:	d908      	bls.n	800396c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800395a:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4953      	ldr	r1, [pc, #332]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003968:	4313      	orrs	r3, r2
 800396a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	429a      	cmp	r2, r3
 8003986:	d908      	bls.n	800399a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f023 020f 	bic.w	r2, r3, #15
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4947      	ldr	r1, [pc, #284]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003996:	4313      	orrs	r3, r2
 8003998:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d055      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4940      	ldr	r1, [pc, #256]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039c0:	4b3c      	ldr	r3, [pc, #240]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d121      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0f6      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d115      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0ea      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039f0:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0de      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0d6      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a10:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f023 0207 	bic.w	r2, r3, #7
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4925      	ldr	r1, [pc, #148]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fc fd77 	bl	8000514 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2a:	f7fc fd73 	bl	8000514 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0be      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d1eb      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d208      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d214      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 020f 	bic.w	r2, r3, #15
 8003a96:	4906      	ldr	r1, [pc, #24]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_ClockConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e086      	b.n	8003bbe <HAL_RCC_ClockConfig+0x34e>
 8003ab0:	52002000 	.word	0x52002000
 8003ab4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d208      	bcs.n	8003ae6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	4939      	ldr	r1, [pc, #228]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d208      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b02:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	492e      	ldr	r1, [pc, #184]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d208      	bcs.n	8003b42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4922      	ldr	r1, [pc, #136]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d208      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4917      	ldr	r1, [pc, #92]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b70:	f000 f834 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	4912      	ldr	r1, [pc, #72]	; (8003bcc <HAL_RCC_ClockConfig+0x35c>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCC_ClockConfig+0x358>)
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <HAL_RCC_ClockConfig+0x35c>)
 8003b98:	5cd3      	ldrb	r3, [r2, r3]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba4:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x360>)
 8003ba6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <HAL_RCC_ClockConfig+0x364>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_ClockConfig+0x368>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fc64 	bl	8000480 <HAL_InitTick>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	080070c4 	.word	0x080070c4
 8003bd0:	2400000c 	.word	0x2400000c
 8003bd4:	24000008 	.word	0x24000008
 8003bd8:	24000000 	.word	0x24000000

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be2:	4bb3      	ldr	r3, [pc, #716]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bea:	2b18      	cmp	r3, #24
 8003bec:	f200 8155 	bhi.w	8003e9a <HAL_RCC_GetSysClockFreq+0x2be>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c5d 	.word	0x08003c5d
 8003bfc:	08003e9b 	.word	0x08003e9b
 8003c00:	08003e9b 	.word	0x08003e9b
 8003c04:	08003e9b 	.word	0x08003e9b
 8003c08:	08003e9b 	.word	0x08003e9b
 8003c0c:	08003e9b 	.word	0x08003e9b
 8003c10:	08003e9b 	.word	0x08003e9b
 8003c14:	08003e9b 	.word	0x08003e9b
 8003c18:	08003c83 	.word	0x08003c83
 8003c1c:	08003e9b 	.word	0x08003e9b
 8003c20:	08003e9b 	.word	0x08003e9b
 8003c24:	08003e9b 	.word	0x08003e9b
 8003c28:	08003e9b 	.word	0x08003e9b
 8003c2c:	08003e9b 	.word	0x08003e9b
 8003c30:	08003e9b 	.word	0x08003e9b
 8003c34:	08003e9b 	.word	0x08003e9b
 8003c38:	08003c89 	.word	0x08003c89
 8003c3c:	08003e9b 	.word	0x08003e9b
 8003c40:	08003e9b 	.word	0x08003e9b
 8003c44:	08003e9b 	.word	0x08003e9b
 8003c48:	08003e9b 	.word	0x08003e9b
 8003c4c:	08003e9b 	.word	0x08003e9b
 8003c50:	08003e9b 	.word	0x08003e9b
 8003c54:	08003e9b 	.word	0x08003e9b
 8003c58:	08003c8f 	.word	0x08003c8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c5c:	4b94      	ldr	r3, [pc, #592]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c68:	4b91      	ldr	r3, [pc, #580]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	4a90      	ldr	r2, [pc, #576]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c7a:	e111      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c7c:	4b8d      	ldr	r3, [pc, #564]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c7e:	61bb      	str	r3, [r7, #24]
    break;
 8003c80:	e10e      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c82:	4b8d      	ldr	r3, [pc, #564]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c84:	61bb      	str	r3, [r7, #24]
    break;
 8003c86:	e10b      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c88:	4b8c      	ldr	r3, [pc, #560]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c8a:	61bb      	str	r3, [r7, #24]
    break;
 8003c8c:	e108      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c8e:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c98:	4b85      	ldr	r3, [pc, #532]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ca4:	4b82      	ldr	r3, [pc, #520]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003cae:	4b80      	ldr	r3, [pc, #512]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	08db      	lsrs	r3, r3, #3
 8003cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80e1 	beq.w	8003e94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f000 8083 	beq.w	8003de0 <HAL_RCC_GetSysClockFreq+0x204>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	f200 80a1 	bhi.w	8003e24 <HAL_RCC_GetSysClockFreq+0x248>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d056      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cee:	e099      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf0:	4b6f      	ldr	r3, [pc, #444]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d02d      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cfc:	4b6c      	ldr	r3, [pc, #432]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	4a6b      	ldr	r2, [pc, #428]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003d56:	e087      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ec4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9a:	e065      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ec8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dde:	e043      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ecc <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e22:	e021      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ec8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	0a5b      	lsrs	r3, r3, #9
 8003e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e72:	3301      	adds	r3, #1
 8003e74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8c:	ee17 3a90 	vmov	r3, s15
 8003e90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e92:	e005      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61bb      	str	r3, [r7, #24]
    break;
 8003e98:	e002      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e9c:	61bb      	str	r3, [r7, #24]
    break;
 8003e9e:	bf00      	nop
  }

  return sysclockfreq;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	03d09000 	.word	0x03d09000
 8003eb8:	003d0900 	.word	0x003d0900
 8003ebc:	017d7840 	.word	0x017d7840
 8003ec0:	46000000 	.word	0x46000000
 8003ec4:	4c742400 	.word	0x4c742400
 8003ec8:	4a742400 	.word	0x4a742400
 8003ecc:	4bbebc20 	.word	0x4bbebc20

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ed6:	f7ff fe81 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490f      	ldr	r1, [pc, #60]	; (8003f24 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_RCC_GetHCLKFreq+0x54>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f0e:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	58024400 	.word	0x58024400
 8003f24:	080070c4 	.word	0x080070c4
 8003f28:	2400000c 	.word	0x2400000c
 8003f2c:	24000008 	.word	0x24000008

08003f30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03f      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f54:	d02a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f5a:	d824      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f60:	d018      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f66:	d81e      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f70:	d007      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f72:	e018      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f74:	4bab      	ldr	r3, [pc, #684]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4aaa      	ldr	r2, [pc, #680]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f80:	e015      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2102      	movs	r1, #2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 feff 	bl	8005d8c <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f92:	e00c      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3324      	adds	r3, #36	; 0x24
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 ffa8 	bl	8005ef0 <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fb4:	4b9b      	ldr	r3, [pc, #620]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	4998      	ldr	r1, [pc, #608]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8003fc6:	e001      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d03d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d826      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	08003ffd 	.word	0x08003ffd
 8003fec:	0800400b 	.word	0x0800400b
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	08004035 	.word	0x08004035
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffc:	4b89      	ldr	r3, [pc, #548]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a88      	ldr	r2, [pc, #544]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004008:	e015      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f001 febb 	bl	8005d8c <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800401a:	e00c      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f001 ff64 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800402c:	e003      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
      break;
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800403c:	4b79      	ldr	r3, [pc, #484]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	4976      	ldr	r1, [pc, #472]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	650b      	str	r3, [r1, #80]	; 0x50
 800404e:	e001      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d051      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004066:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800406a:	d036      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800406c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004070:	d830      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004076:	d032      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800407c:	d82a      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800407e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004082:	d02e      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004088:	d824      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800408a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408e:	d018      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004094:	d81e      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800409a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800409e:	d007      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80040a0:	e018      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a2:	4b60      	ldr	r3, [pc, #384]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	4a5f      	ldr	r2, [pc, #380]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040ae:	e019      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fe68 	bl	8005d8c <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040c0:	e010      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3324      	adds	r3, #36	; 0x24
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 ff11 	bl	8005ef0 <RCCEx_PLL3_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d2:	e007      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
      break;
 80040d8:	e004      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80040e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80040ea:	4b4e      	ldr	r3, [pc, #312]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f8:	494a      	ldr	r1, [pc, #296]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	658b      	str	r3, [r1, #88]	; 0x58
 80040fe:	e001      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410c:	2b00      	cmp	r3, #0
 800410e:	d051      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004116:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800411a:	d036      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800411c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004120:	d830      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004126:	d032      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800412c:	d82a      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800412e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004132:	d02e      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004138:	d824      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800413a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413e:	d018      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004144:	d81e      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800414a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800414e:	d007      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004150:	e018      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004152:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	4a33      	ldr	r2, [pc, #204]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800415e:	e019      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fe10 	bl	8005d8c <RCCEx_PLL2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004170:	e010      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 feb9 	bl	8005ef0 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004182:	e007      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      break;
 8004188:	e004      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041a8:	491e      	ldr	r1, [pc, #120]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	658b      	str	r3, [r1, #88]	; 0x58
 80041ae:	e001      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d035      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c4:	2b30      	cmp	r3, #48	; 0x30
 80041c6:	d01c      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d817      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d00c      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d813      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d016      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d10f      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4a10      	ldr	r2, [pc, #64]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80041e8:	e00e      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2102      	movs	r1, #2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fdcb 	bl	8005d8c <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80041fa:	e005      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	4902      	ldr	r1, [pc, #8]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d047      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004240:	d030      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004246:	d82a      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004248:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800424c:	d02c      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800424e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004252:	d824      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004258:	d018      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800425a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425e:	d81e      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004268:	d007      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800426a:	e018      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4bac      	ldr	r3, [pc, #688]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4aab      	ldr	r2, [pc, #684]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004278:	e017      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fd83 	bl	8005d8c <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800428a:	e00e      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3324      	adds	r3, #36	; 0x24
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f001 fe2c 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800429c:	e005      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80042a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042b0:	4b9b      	ldr	r3, [pc, #620]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	4998      	ldr	r1, [pc, #608]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	650b      	str	r3, [r1, #80]	; 0x50
 80042c2:	e001      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d049      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042dc:	d02e      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80042de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e2:	d828      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80042e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e8:	d02a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80042ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ee:	d822      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80042f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f4:	d026      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80042f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042fa:	d81c      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80042fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004300:	d010      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004306:	d816      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004310:	d111      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fd37 	bl	8005d8c <RCCEx_PLL2_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004322:	e012      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3324      	adds	r3, #36	; 0x24
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fde0 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004334:	e009      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
      break;
 800433a:	e006      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800433c:	bf00      	nop
 800433e:	e004      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004340:	bf00      	nop
 8004342:	e002      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004344:	bf00      	nop
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004350:	4b73      	ldr	r3, [pc, #460]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	4970      	ldr	r1, [pc, #448]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	650b      	str	r3, [r1, #80]	; 0x50
 8004362:	e001      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800437a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437e:	d02e      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004384:	d828      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d02a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d822      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004396:	d026      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004398:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800439c:	d81c      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800439e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a2:	d010      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80043a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a8:	d816      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80043ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b2:	d111      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	2101      	movs	r1, #1
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fce6 	bl	8005d8c <RCCEx_PLL2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043c4:	e012      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3324      	adds	r3, #36	; 0x24
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fd8f 	bl	8005ef0 <RCCEx_PLL3_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043d6:	e009      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
      break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043f2:	4b4b      	ldr	r3, [pc, #300]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004400:	4947      	ldr	r1, [pc, #284]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	658b      	str	r3, [r1, #88]	; 0x58
 8004406:	e001      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004420:	d00e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d814      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800442c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004430:	d10f      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004432:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	4a3a      	ldr	r2, [pc, #232]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800443e:	e00c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f001 fca0 	bl	8005d8c <RCCEx_PLL2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004460:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446c:	492c      	ldr	r1, [pc, #176]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	650b      	str	r3, [r1, #80]	; 0x50
 8004472:	e001      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d032      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	2b03      	cmp	r3, #3
 800448a:	d81b      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044a5 	.word	0x080044a5
 800449c:	080044b3 	.word	0x080044b3
 80044a0:	080044cb 	.word	0x080044cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044b0:	e00c      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2102      	movs	r1, #2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 fc67 	bl	8005d8c <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044c2:	e003      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e000      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80044ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	4910      	ldr	r1, [pc, #64]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044e4:	e001      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 808a 	beq.w	800460c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a09      	ldr	r2, [pc, #36]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004504:	f7fc f806 	bl	8000514 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800450a:	e00d      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450c:	f7fc f802 	bl	8000514 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d906      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	75fb      	strb	r3, [r7, #23]
        break;
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004520:	58024400 	.word	0x58024400
 8004524:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004528:	4bb9      	ldr	r3, [pc, #740]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0eb      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d166      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800453a:	4bb6      	ldr	r3, [pc, #728]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800453c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004544:	4053      	eors	r3, r2
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	2b00      	cmp	r3, #0
 800454c:	d013      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800454e:	4bb1      	ldr	r3, [pc, #708]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004556:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004558:	4bae      	ldr	r3, [pc, #696]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4aad      	ldr	r2, [pc, #692]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004564:	4bab      	ldr	r3, [pc, #684]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	4aaa      	ldr	r2, [pc, #680]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800456a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004570:	4aa8      	ldr	r2, [pc, #672]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004580:	d115      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fb ffc7 	bl	8000514 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004588:	e00b      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fb ffc3 	bl	8000514 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d902      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	75fb      	strb	r3, [r7, #23]
            break;
 80045a0:	e005      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045a2:	4b9c      	ldr	r3, [pc, #624]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ed      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d126      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c2:	d10d      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80045c4:	4b93      	ldr	r3, [pc, #588]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045d2:	0919      	lsrs	r1, r3, #4
 80045d4:	4b90      	ldr	r3, [pc, #576]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045d6:	400b      	ands	r3, r1
 80045d8:	498e      	ldr	r1, [pc, #568]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]
 80045de:	e005      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4a8b      	ldr	r2, [pc, #556]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045ea:	6113      	str	r3, [r2, #16]
 80045ec:	4b89      	ldr	r3, [pc, #548]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fa:	4986      	ldr	r1, [pc, #536]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	670b      	str	r3, [r1, #112]	; 0x70
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	75bb      	strb	r3, [r7, #22]
 8004606:	e001      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d07e      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461c:	2b28      	cmp	r3, #40	; 0x28
 800461e:	d867      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	080046f7 	.word	0x080046f7
 800462c:	080046f1 	.word	0x080046f1
 8004630:	080046f1 	.word	0x080046f1
 8004634:	080046f1 	.word	0x080046f1
 8004638:	080046f1 	.word	0x080046f1
 800463c:	080046f1 	.word	0x080046f1
 8004640:	080046f1 	.word	0x080046f1
 8004644:	080046f1 	.word	0x080046f1
 8004648:	080046cd 	.word	0x080046cd
 800464c:	080046f1 	.word	0x080046f1
 8004650:	080046f1 	.word	0x080046f1
 8004654:	080046f1 	.word	0x080046f1
 8004658:	080046f1 	.word	0x080046f1
 800465c:	080046f1 	.word	0x080046f1
 8004660:	080046f1 	.word	0x080046f1
 8004664:	080046f1 	.word	0x080046f1
 8004668:	080046df 	.word	0x080046df
 800466c:	080046f1 	.word	0x080046f1
 8004670:	080046f1 	.word	0x080046f1
 8004674:	080046f1 	.word	0x080046f1
 8004678:	080046f1 	.word	0x080046f1
 800467c:	080046f1 	.word	0x080046f1
 8004680:	080046f1 	.word	0x080046f1
 8004684:	080046f1 	.word	0x080046f1
 8004688:	080046f7 	.word	0x080046f7
 800468c:	080046f1 	.word	0x080046f1
 8004690:	080046f1 	.word	0x080046f1
 8004694:	080046f1 	.word	0x080046f1
 8004698:	080046f1 	.word	0x080046f1
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	080046f1 	.word	0x080046f1
 80046a8:	080046f7 	.word	0x080046f7
 80046ac:	080046f1 	.word	0x080046f1
 80046b0:	080046f1 	.word	0x080046f1
 80046b4:	080046f1 	.word	0x080046f1
 80046b8:	080046f1 	.word	0x080046f1
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	080046f1 	.word	0x080046f1
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	080046f7 	.word	0x080046f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fb5a 	bl	8005d8c <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046dc:	e00c      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3324      	adds	r3, #36	; 0x24
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fc03 	bl	8005ef0 <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
      break;
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80046f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046fe:	4b45      	ldr	r3, [pc, #276]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	4942      	ldr	r1, [pc, #264]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	654b      	str	r3, [r1, #84]	; 0x54
 8004710:	e001      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d037      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	2b05      	cmp	r3, #5
 8004728:	d820      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004773 	.word	0x08004773
 8004734:	08004749 	.word	0x08004749
 8004738:	0800475b 	.word	0x0800475b
 800473c:	08004773 	.word	0x08004773
 8004740:	08004773 	.word	0x08004773
 8004744:	08004773 	.word	0x08004773
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2101      	movs	r1, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fb1c 	bl	8005d8c <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004758:	e00c      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3324      	adds	r3, #36	; 0x24
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fbc5 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	e000      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	f023 0207 	bic.w	r2, r3, #7
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4923      	ldr	r1, [pc, #140]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	654b      	str	r3, [r1, #84]	; 0x54
 800478c:	e001      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d040      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d821      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047f3 	.word	0x080047f3
 80047b4:	080047c9 	.word	0x080047c9
 80047b8:	080047db 	.word	0x080047db
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fadc 	bl	8005d8c <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047d8:	e00c      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	2101      	movs	r1, #1
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 fb85 	bl	8005ef0 <RCCEx_PLL3_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047ea:	e003      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
      break;
 80047f0:	e000      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80047f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d110      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f023 0207 	bic.w	r2, r3, #7
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004808:	4902      	ldr	r1, [pc, #8]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	658b      	str	r3, [r1, #88]	; 0x58
 800480e:	e007      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004810:	58024800 	.word	0x58024800
 8004814:	58024400 	.word	0x58024400
 8004818:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d04b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004836:	d02e      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800483c:	d828      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d02a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d822      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800484a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800484e:	d026      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004854:	d81c      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800485a:	d010      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004860:	d816      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01d      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486a:	d111      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f001 fa8a 	bl	8005d8c <RCCEx_PLL2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800487c:	e012      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fb33 	bl	8005ef0 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800488e:	e009      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
      break;
 8004894:	e006      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004896:	bf00      	nop
 8004898:	e004      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048aa:	4bb2      	ldr	r3, [pc, #712]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	49ae      	ldr	r1, [pc, #696]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	654b      	str	r3, [r1, #84]	; 0x54
 80048be:	e001      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d04b      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048da:	d02e      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80048dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e0:	d828      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d02a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d822      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f2:	d026      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80048f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f8:	d81c      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fe:	d010      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004904:	d816      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01d      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d111      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f001 fa38 	bl	8005d8c <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004920:	e012      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3324      	adds	r3, #36	; 0x24
 8004926:	2102      	movs	r1, #2
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fae1 	bl	8005ef0 <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004932:	e009      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	e006      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800493a:	bf00      	nop
 800493c:	e004      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800494e:	4b89      	ldr	r3, [pc, #548]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495c:	4985      	ldr	r1, [pc, #532]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800495e:	4313      	orrs	r3, r2
 8004960:	658b      	str	r3, [r1, #88]	; 0x58
 8004962:	e001      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d04b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800497a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800497e:	d02e      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004980:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004984:	d828      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498a:	d02a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d822      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004992:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004996:	d026      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004998:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800499c:	d81c      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800499e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a2:	d010      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80049a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a8:	d816      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01d      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b2:	d111      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f9e6 	bl	8005d8c <RCCEx_PLL2_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049c4:	e012      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3324      	adds	r3, #36	; 0x24
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 fa8f 	bl	8005ef0 <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049d6:	e009      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
      break;
 80049dc:	e006      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049de:	bf00      	nop
 80049e0:	e004      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049f2:	4b60      	ldr	r3, [pc, #384]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a00:	495c      	ldr	r1, [pc, #368]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	658b      	str	r3, [r1, #88]	; 0x58
 8004a06:	e001      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d018      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	d10a      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3324      	adds	r3, #36	; 0x24
 8004a26:	2102      	movs	r1, #2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fa61 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004a38:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a44:	494b      	ldr	r1, [pc, #300]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fa41 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a78:	4b3e      	ldr	r3, [pc, #248]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	493b      	ldr	r1, [pc, #236]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d034      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa2:	d01d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa8:	d817      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ab4:	e011      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 f965 	bl	8005d8c <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ac6:	e00c      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3324      	adds	r3, #36	; 0x24
 8004acc:	2102      	movs	r1, #2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fa0e 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ad8:	e003      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae8:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af6:	491f      	ldr	r1, [pc, #124]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	658b      	str	r3, [r1, #88]	; 0x58
 8004afc:	e001      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d036      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b18:	d01c      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b1e:	d816      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b24:	d003      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b2a:	d007      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004b2c:	e00f      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b3a:	e00c      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f9d4 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b4c:	e003      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
      break;
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b6a:	4902      	ldr	r1, [pc, #8]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d029      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004b96:	e00f      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a60      	ldr	r2, [pc, #384]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2102      	movs	r1, #2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 f8ed 	bl	8005d8c <RCCEx_PLL2_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bb6:	e002      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
      break;
 8004bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bc4:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	4953      	ldr	r1, [pc, #332]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bd6:	e001      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3324      	adds	r3, #36	; 0x24
 8004bec:	2102      	movs	r1, #2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 f97e 	bl	8005ef0 <RCCEx_PLL3_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d030      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c12:	d017      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c18:	d811      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c24:	d80b      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c30:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c3c:	e007      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
      break;
 8004c42:	e004      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004c44:	bf00      	nop
 8004c46:	e002      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004c48:	bf00      	nop
 8004c4a:	e000      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c60:	492f      	ldr	r1, [pc, #188]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	654b      	str	r3, [r1, #84]	; 0x54
 8004c66:	e001      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c78:	4b29      	ldr	r3, [pc, #164]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c84:	4926      	ldr	r1, [pc, #152]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca2:	491f      	ldr	r1, [pc, #124]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cbe:	6113      	str	r3, [r2, #16]
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cca:	4915      	ldr	r1, [pc, #84]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da08      	bge.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	490e      	ldr	r1, [pc, #56]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d04:	4906      	ldr	r1, [pc, #24]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d0a:	7dbb      	ldrb	r3, [r7, #22]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400

08004d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b090      	sub	sp, #64	; 0x40
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	f040 8089 	bne.w	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004d36:	4b95      	ldr	r3, [pc, #596]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d87d      	bhi.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d61 	.word	0x08004d61
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004e3d 	.word	0x08004e3d
 8004d5c:	08004dcd 	.word	0x08004dcd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d60:	4b8a      	ldr	r3, [pc, #552]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 feb8 	bl	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d7c:	e3ed      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d82:	e3ea      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d84:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d90:	d107      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d92:	f107 0318 	add.w	r3, r7, #24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fbfe 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004da0:	e3db      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da6:	e3d8      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004da8:	4b78      	ldr	r3, [pc, #480]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd40 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dc4:	e3c9      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dca:	e3c6      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004dcc:	4b6f      	ldr	r3, [pc, #444]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004de8:	4b68      	ldr	r3, [pc, #416]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	4a67      	ldr	r2, [pc, #412]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfa:	e01e      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dfc:	4b63      	ldr	r3, [pc, #396]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e10:	d102      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e12:	4b60      	ldr	r3, [pc, #384]	; (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e16:	e010      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e18:	4b5c      	ldr	r3, [pc, #368]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e24:	d106      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e2e:	4b5a      	ldr	r3, [pc, #360]	; (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e32:	e002      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e38:	e38f      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004e3a:	e38e      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3c:	4b57      	ldr	r3, [pc, #348]	; (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e40:	e38b      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e46:	e388      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4e:	f040 80a7 	bne.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004e52:	4b4e      	ldr	r3, [pc, #312]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e62:	d054      	beq.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6a:	f200 808b 	bhi.w	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e74:	f000 8083 	beq.w	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e7e:	f200 8081 	bhi.w	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e88:	d02f      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e90:	d878      	bhi.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9e:	d012      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004ea0:	e070      	b.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ea2:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fe17 	bl	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ebe:	e34c      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec4:	e349      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ec6:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed4:	f107 0318 	add.w	r3, r7, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fb5d 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ee2:	e33a      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee8:	e337      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eea:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fc9f 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f06:	e328      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0c:	e325      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f18:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3c:	e01e      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f52:	d102      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f58:	e010      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f66:	d106      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f7a:	e2ee      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f7c:	e2ed      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f82:	e2ea      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f88:	e2e7      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	03d09000 	.word	0x03d09000
 8004f94:	003d0900 	.word	0x003d0900
 8004f98:	017d7840 	.word	0x017d7840
 8004f9c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa6:	f040 809c 	bne.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004faa:	4b9e      	ldr	r3, [pc, #632]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fba:	d054      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc2:	f200 808b 	bhi.w	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fcc:	f000 8083 	beq.w	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fd6:	f200 8081 	bhi.w	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe0:	d02f      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe8:	d878      	bhi.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff6:	d012      	beq.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004ff8:	e070      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ffa:	4b8a      	ldr	r3, [pc, #552]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005006:	d107      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fd6b 	bl	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005016:	e2a0      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800501c:	e29d      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800501e:	4b81      	ldr	r3, [pc, #516]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502a:	d107      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800502c:	f107 0318 	add.w	r3, r7, #24
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fab1 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800503a:	e28e      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005040:	e28b      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005042:	4b78      	ldr	r3, [pc, #480]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800504a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800504e:	d107      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005050:	f107 030c 	add.w	r3, r7, #12
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fbf3 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800505e:	e27c      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005064:	e279      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005066:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800506e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005070:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b04      	cmp	r3, #4
 800507a:	d10c      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005082:	4b68      	ldr	r3, [pc, #416]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	08db      	lsrs	r3, r3, #3
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	4a66      	ldr	r2, [pc, #408]	; (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005094:	e01e      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005096:	4b63      	ldr	r3, [pc, #396]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d106      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050aa:	d102      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050ac:	4b5f      	ldr	r3, [pc, #380]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b0:	e010      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050b2:	4b5c      	ldr	r3, [pc, #368]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050be:	d106      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c6:	d102      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050c8:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050d2:	e242      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050d4:	e241      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80050d6:	4b57      	ldr	r3, [pc, #348]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050da:	e23e      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e0:	e23b      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e8:	f040 80a6 	bne.w	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80050ec:	4b4d      	ldr	r3, [pc, #308]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050fc:	d054      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005104:	f200 808b 	bhi.w	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800510e:	f000 8083 	beq.w	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005118:	f200 8081 	bhi.w	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	d02f      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	d878      	bhi.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d012      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800513a:	e070      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800513c:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005148:	d107      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800514a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fcca 	bl	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005158:	e1ff      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800515e:	e1fc      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005160:	4b30      	ldr	r3, [pc, #192]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516c:	d107      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800516e:	f107 0318 	add.w	r3, r7, #24
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fa10 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800517c:	e1ed      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005182:	e1ea      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005190:	d107      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005192:	f107 030c 	add.w	r3, r7, #12
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fb52 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051a0:	e1db      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a6:	e1d8      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80051be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	08db      	lsrs	r3, r3, #3
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	4a16      	ldr	r2, [pc, #88]	; (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d6:	e01e      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e4:	d106      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80051e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ec:	d102      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051ee:	4b0f      	ldr	r3, [pc, #60]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f2:	e010      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005200:	d106      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005208:	d102      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520e:	e002      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005214:	e1a1      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005216:	e1a0      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800521c:	e19d      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005222:	e19a      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005224:	58024400 	.word	0x58024400
 8005228:	03d09000 	.word	0x03d09000
 800522c:	003d0900 	.word	0x003d0900
 8005230:	017d7840 	.word	0x017d7840
 8005234:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800523e:	d173      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005240:	4b9a      	ldr	r3, [pc, #616]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005250:	d02f      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005258:	d863      	bhi.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005266:	d012      	beq.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005268:	e05b      	b.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800526a:	4b90      	ldr	r3, [pc, #576]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005276:	d107      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005278:	f107 0318 	add.w	r3, r7, #24
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f98b 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005286:	e168      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800528c:	e165      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800528e:	4b87      	ldr	r3, [pc, #540]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529a:	d107      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 facd 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052aa:	e156      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052b0:	e153      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052b2:	4b7e      	ldr	r3, [pc, #504]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052bc:	4b7b      	ldr	r3, [pc, #492]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d10c      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052ce:	4b77      	ldr	r3, [pc, #476]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	4a75      	ldr	r2, [pc, #468]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e0:	e01e      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052e2:	4b72      	ldr	r3, [pc, #456]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ee:	d106      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f6:	d102      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052f8:	4b6e      	ldr	r3, [pc, #440]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fc:	e010      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052fe:	4b6b      	ldr	r3, [pc, #428]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005312:	d102      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800531e:	e11c      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005320:	e11b      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005326:	e118      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532e:	d133      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005330:	4b5e      	ldr	r3, [pc, #376]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005346:	d012      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005348:	e023      	b.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800534a:	4b58      	ldr	r3, [pc, #352]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005356:	d107      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fbc3 	bl	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005366:	e0f8      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536c:	e0f5      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800536e:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537a:	d107      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800537c:	f107 0318 	add.w	r3, r7, #24
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f909 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800538a:	e0e6      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005390:	e0e3      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005396:	e0e0      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539e:	f040 808d 	bne.w	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80053a2:	4b42      	ldr	r3, [pc, #264]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053b2:	d06b      	beq.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ba:	d874      	bhi.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c2:	d056      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ca:	d86c      	bhi.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053d2:	d03b      	beq.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053da:	d864      	bhi.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e2:	d021      	beq.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ea:	d85c      	bhi.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f8:	d004      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80053fa:	e054      	b.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80053fc:	f000 f8b6 	bl	800556c <HAL_RCCEx_GetD3PCLK1Freq>
 8005400:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005402:	e0aa      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800540c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005410:	d107      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005412:	f107 0318 	add.w	r3, r7, #24
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f8be 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005420:	e09b      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005426:	e098      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005428:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005434:	d107      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005436:	f107 030c 	add.w	r3, r7, #12
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fa00 	bl	8005840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005444:	e089      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800544a:	e086      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800544c:	4b17      	ldr	r3, [pc, #92]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d109      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	08db      	lsrs	r3, r3, #3
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800546a:	e076      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005470:	e073      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	d102      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005484:	e069      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800548a:	e066      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005498:	d102      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800549e:	e05c      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a4:	e059      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054aa:	e056      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80054ac:	58024400 	.word	0x58024400
 80054b0:	03d09000 	.word	0x03d09000
 80054b4:	003d0900 	.word	0x003d0900
 80054b8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	d148      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80054c4:	4b27      	ldr	r3, [pc, #156]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d4:	d02a      	beq.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054dc:	d838      	bhi.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ea:	d00d      	beq.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80054ec:	e030      	b.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054fa:	d102      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005500:	e02b      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005506:	e028      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005508:	4b16      	ldr	r3, [pc, #88]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005514:	d107      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fae4 	bl	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005524:	e019      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800552a:	e016      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005538:	d107      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800553a:	f107 0318 	add.w	r3, r7, #24
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f82a 	bl	8005598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005548:	e007      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800554e:	e004      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005554:	e001      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800555c:	4618      	mov	r0, r3
 800555e:	3740      	adds	r7, #64	; 0x40
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	58024400 	.word	0x58024400
 8005568:	017d7840 	.word	0x017d7840

0800556c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005570:	f7fe fcae 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4904      	ldr	r1, [pc, #16]	; (8005594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	58024400 	.word	0x58024400
 8005594:	080070c4 	.word	0x080070c4

08005598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055a0:	4ba1      	ldr	r3, [pc, #644]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80055aa:	4b9f      	ldr	r3, [pc, #636]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	0b1b      	lsrs	r3, r3, #12
 80055b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055b6:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055c2:	4b99      	ldr	r3, [pc, #612]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8111 	beq.w	8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	f000 8083 	beq.w	80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	f200 80a1 	bhi.w	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d056      	beq.n	80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005602:	e099      	b.n	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005604:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02d      	beq.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005610:	4b85      	ldr	r3, [pc, #532]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	4a84      	ldr	r2, [pc, #528]	; (800582c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a03 	vldr	s12, [r7, #12]
 800564e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800566a:	e087      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800567a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567e:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005692:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ae:	e065      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	4b59      	ldr	r3, [pc, #356]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056f2:	e043      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005706:	4b48      	ldr	r3, [pc, #288]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a03 	vldr	s12, [r7, #12]
 800571a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005736:	e021      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a03 	vldr	s12, [r7, #12]
 800575e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800577a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800577c:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	0a5b      	lsrs	r3, r3, #9
 8005782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005796:	edd7 6a07 	vldr	s13, [r7, #28]
 800579a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a2:	ee17 2a90 	vmov	r2, s15
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d0:	ee17 2a90 	vmov	r2, s15
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	0e1b      	lsrs	r3, r3, #24
 80057de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fe:	ee17 2a90 	vmov	r2, s15
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005806:	e008      	b.n	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	bf00      	nop
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	03d09000 	.word	0x03d09000
 8005830:	46000000 	.word	0x46000000
 8005834:	4c742400 	.word	0x4c742400
 8005838:	4a742400 	.word	0x4a742400
 800583c:	4bbebc20 	.word	0x4bbebc20

08005840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005848:	4ba1      	ldr	r3, [pc, #644]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005852:	4b9f      	ldr	r3, [pc, #636]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	0d1b      	lsrs	r3, r3, #20
 8005858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800585e:	4b9c      	ldr	r3, [pc, #624]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800586a:	4b99      	ldr	r3, [pc, #612]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8111 	beq.w	8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f000 8083 	beq.w	800599c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b02      	cmp	r3, #2
 800589a:	f200 80a1 	bhi.w	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d056      	beq.n	8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80058aa:	e099      	b.n	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ac:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02d      	beq.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058b8:	4b85      	ldr	r3, [pc, #532]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a84      	ldr	r2, [pc, #528]	; (8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005912:	e087      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b6a      	ldr	r3, [pc, #424]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005956:	e065      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b59      	ldr	r3, [pc, #356]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599a:	e043      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b48      	ldr	r3, [pc, #288]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059de:	e021      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b37      	ldr	r3, [pc, #220]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a24:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4a:	ee17 2a90 	vmov	r2, s15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a52:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a78:	ee17 2a90 	vmov	r2, s15
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	0e1b      	lsrs	r3, r3, #24
 8005a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 2a90 	vmov	r2, s15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005aae:	e008      	b.n	8005ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	03d09000 	.word	0x03d09000
 8005ad8:	46000000 	.word	0x46000000
 8005adc:	4c742400 	.word	0x4c742400
 8005ae0:	4a742400 	.word	0x4a742400
 8005ae4:	4bbebc20 	.word	0x4bbebc20

08005ae8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b089      	sub	sp, #36	; 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005af0:	4ba0      	ldr	r3, [pc, #640]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005afa:	4b9e      	ldr	r3, [pc, #632]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005b06:	4b9b      	ldr	r3, [pc, #620]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b10:	4b98      	ldr	r3, [pc, #608]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8111 	beq.w	8005d56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	f000 8083 	beq.w	8005c42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	f200 80a1 	bhi.w	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d056      	beq.n	8005bfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005b50:	e099      	b.n	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b52:	4b88      	ldr	r3, [pc, #544]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d02d      	beq.n	8005bba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b5e:	4b85      	ldr	r3, [pc, #532]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	4a83      	ldr	r2, [pc, #524]	; (8005d78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	ee07 3a90 	vmov	s15, r3
 8005b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b88:	4b7a      	ldr	r3, [pc, #488]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005bb8:	e087      	b.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bcc:	4b69      	ldr	r3, [pc, #420]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bfc:	e065      	b.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c10:	4b58      	ldr	r3, [pc, #352]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c40:	e043      	b.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c54:	4b47      	ldr	r3, [pc, #284]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c84:	e021      	b.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005d80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005d7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005cca:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf0:	ee17 2a90 	vmov	r2, s15
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1e:	ee17 2a90 	vmov	r2, s15
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	0e1b      	lsrs	r3, r3, #24
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4c:	ee17 2a90 	vmov	r2, s15
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d54:	e008      	b.n	8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	3724      	adds	r7, #36	; 0x24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	58024400 	.word	0x58024400
 8005d78:	03d09000 	.word	0x03d09000
 8005d7c:	46000000 	.word	0x46000000
 8005d80:	4c742400 	.word	0x4c742400
 8005d84:	4a742400 	.word	0x4a742400
 8005d88:	4bbebc20 	.word	0x4bbebc20

08005d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d9a:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d101      	bne.n	8005daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e099      	b.n	8005ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005daa:	4b4f      	ldr	r3, [pc, #316]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005db0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db6:	f7fa fbad 	bl	8000514 <HAL_GetTick>
 8005dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dbe:	f7fa fba9 	bl	8000514 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e086      	b.n	8005ede <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dd0:	4b45      	ldr	r3, [pc, #276]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	493f      	ldr	r1, [pc, #252]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	628b      	str	r3, [r1, #40]	; 0x28
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	025b      	lsls	r3, r3, #9
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	061b      	lsls	r3, r3, #24
 8005e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e20:	4931      	ldr	r1, [pc, #196]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e26:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	492d      	ldr	r1, [pc, #180]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f023 0220 	bic.w	r2, r3, #32
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4928      	ldr	r1, [pc, #160]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e50:	f023 0310 	bic.w	r3, r3, #16
 8005e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <RCCEx_PLL2_Config+0x160>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	69d2      	ldr	r2, [r2, #28]
 8005e62:	00d2      	lsls	r2, r2, #3
 8005e64:	4920      	ldr	r1, [pc, #128]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e70:	f043 0310 	orr.w	r3, r3, #16
 8005e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e88:	e00f      	b.n	8005eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d106      	bne.n	8005e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e9c:	e005      	b.n	8005eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a0e      	ldr	r2, [pc, #56]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fa fb2d 	bl	8000514 <HAL_GetTick>
 8005eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ebc:	e008      	b.n	8005ed0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ebe:	f7fa fb29 	bl	8000514 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e006      	b.n	8005ede <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <RCCEx_PLL2_Config+0x15c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	ffff0007 	.word	0xffff0007

08005ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005efe:	4b53      	ldr	r3, [pc, #332]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d101      	bne.n	8005f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e099      	b.n	8006042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f0e:	4b4f      	ldr	r3, [pc, #316]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4e      	ldr	r2, [pc, #312]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1a:	f7fa fafb 	bl	8000514 <HAL_GetTick>
 8005f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f20:	e008      	b.n	8005f34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f22:	f7fa faf7 	bl	8000514 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e086      	b.n	8006042 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f34:	4b45      	ldr	r3, [pc, #276]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f0      	bne.n	8005f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f40:	4b42      	ldr	r3, [pc, #264]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	051b      	lsls	r3, r3, #20
 8005f4e:	493f      	ldr	r1, [pc, #252]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	628b      	str	r3, [r1, #40]	; 0x28
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	025b      	lsls	r3, r3, #9
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	061b      	lsls	r3, r3, #24
 8005f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f84:	4931      	ldr	r1, [pc, #196]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f8a:	4b30      	ldr	r3, [pc, #192]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	492d      	ldr	r1, [pc, #180]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	4928      	ldr	r1, [pc, #160]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fae:	4b27      	ldr	r3, [pc, #156]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	4a26      	ldr	r2, [pc, #152]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fba:	4b24      	ldr	r3, [pc, #144]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <RCCEx_PLL3_Config+0x160>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	69d2      	ldr	r2, [r2, #28]
 8005fc6:	00d2      	lsls	r2, r2, #3
 8005fc8:	4920      	ldr	r1, [pc, #128]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fec:	e00f      	b.n	800600e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d106      	bne.n	8006002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006000:	e005      	b.n	800600e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	4a11      	ldr	r2, [pc, #68]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8006008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800600c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601a:	f7fa fa7b 	bl	8000514 <HAL_GetTick>
 800601e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006020:	e008      	b.n	8006034 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006022:	f7fa fa77 	bl	8000514 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e006      	b.n	8006042 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <RCCEx_PLL3_Config+0x15c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400
 8006050:	ffff0007 	.word	0xffff0007

08006054 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e1fb      	b.n	800645e <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800606c:	2b01      	cmp	r3, #1
 800606e:	d113      	bne.n	8006098 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a96      	ldr	r2, [pc, #600]	; (80062d0 <HAL_SAI_Init+0x27c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_SAI_Init+0x30>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a95      	ldr	r2, [pc, #596]	; (80062d4 <HAL_SAI_Init+0x280>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d107      	bne.n	8006094 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006088:	2b01      	cmp	r3, #1
 800608a:	d103      	bne.n	8006094 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e1e2      	b.n	800645e <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a8c      	ldr	r2, [pc, #560]	; (80062d0 <HAL_SAI_Init+0x27c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_SAI_Init+0x58>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a8c      	ldr	r2, [pc, #560]	; (80062d8 <HAL_SAI_Init+0x284>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d102      	bne.n	80060b2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80060ac:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <HAL_SAI_Init+0x288>)
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e00e      	b.n	80060d0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a87      	ldr	r2, [pc, #540]	; (80062d4 <HAL_SAI_Init+0x280>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_SAI_Init+0x72>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a87      	ldr	r2, [pc, #540]	; (80062e0 <HAL_SAI_Init+0x28c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d102      	bne.n	80060cc <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80060c6:	4b87      	ldr	r3, [pc, #540]	; (80062e4 <HAL_SAI_Init+0x290>)
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e001      	b.n	80060d0 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e1c6      	b.n	800645e <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fd45 	bl	8006b74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa92 	bl	8006614 <SAI_Disable>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e1b1      	b.n	800645e <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d00c      	beq.n	8006124 <HAL_SAI_Init+0xd0>
 800610a:	2b02      	cmp	r3, #2
 800610c:	d80d      	bhi.n	800612a <HAL_SAI_Init+0xd6>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_SAI_Init+0xc4>
 8006112:	2b01      	cmp	r3, #1
 8006114:	d003      	beq.n	800611e <HAL_SAI_Init+0xca>
 8006116:	e008      	b.n	800612a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800611c:	e008      	b.n	8006130 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800611e:	2310      	movs	r3, #16
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006122:	e005      	b.n	8006130 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006124:	2320      	movs	r3, #32
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006128:	e002      	b.n	8006130 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800612e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b05      	cmp	r3, #5
 8006136:	d822      	bhi.n	800617e <HAL_SAI_Init+0x12a>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <HAL_SAI_Init+0xec>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006159 	.word	0x08006159
 8006144:	0800615f 	.word	0x0800615f
 8006148:	08006167 	.word	0x08006167
 800614c:	0800617f 	.word	0x0800617f
 8006150:	0800617f 	.word	0x0800617f
 8006154:	0800616f 	.word	0x0800616f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      break;
 800615c:	e012      	b.n	8006184 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800615e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006162:	61fb      	str	r3, [r7, #28]
      break;
 8006164:	e00e      	b.n	8006184 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800616a:	61fb      	str	r3, [r7, #28]
      break;
 800616c:	e00a      	b.n	8006184 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800616e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006172:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	f043 0303 	orr.w	r3, r3, #3
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800617c:	e002      	b.n	8006184 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
      break;
 8006182:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006188:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8084 	beq.w	800629c <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a4c      	ldr	r2, [pc, #304]	; (80062d0 <HAL_SAI_Init+0x27c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_SAI_Init+0x158>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a4c      	ldr	r2, [pc, #304]	; (80062d8 <HAL_SAI_Init+0x284>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d104      	bne.n	80061b6 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80061ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80061b0:	f7fe fdb8 	bl	8004d24 <HAL_RCCEx_GetPeriphCLKFreq>
 80061b4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a46      	ldr	r2, [pc, #280]	; (80062d4 <HAL_SAI_Init+0x280>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d104      	bne.n	80061ca <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80061c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80061c4:	f7fe fdae 	bl	8004d24 <HAL_RCCEx_GetPeriphCLKFreq>
 80061c8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a44      	ldr	r2, [pc, #272]	; (80062e0 <HAL_SAI_Init+0x28c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d104      	bne.n	80061de <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80061d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061d8:	f7fe fda4 	bl	8004d24 <HAL_RCCEx_GetPeriphCLKFreq>
 80061dc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061e6:	d120      	bne.n	800622a <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d102      	bne.n	80061f6 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e00a      	b.n	800620c <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d103      	bne.n	8006206 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80061fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e002      	b.n	800620c <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4619      	mov	r1, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	fbb1 f3f3 	udiv	r3, r1, r3
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	e017      	b.n	800625a <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006232:	d101      	bne.n	8006238 <HAL_SAI_Init+0x1e4>
 8006234:	2302      	movs	r3, #2
 8006236:	e000      	b.n	800623a <HAL_SAI_Init+0x1e6>
 8006238:	2301      	movs	r3, #1
 800623a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4619      	mov	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	fbb1 f3f3 	udiv	r3, r1, r3
 8006258:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_SAI_Init+0x294>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	08da      	lsrs	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006268:	6939      	ldr	r1, [r7, #16]
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <HAL_SAI_Init+0x294>)
 800626c:	fba3 2301 	umull	r2, r3, r3, r1
 8006270:	08da      	lsrs	r2, r3, #3
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	1aca      	subs	r2, r1, r3
 800627c:	2a08      	cmp	r2, #8
 800627e:	d904      	bls.n	800628a <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	2b04      	cmp	r3, #4
 8006290:	d104      	bne.n	800629c <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	085a      	lsrs	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_SAI_Init+0x258>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d109      	bne.n	80062c0 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_SAI_Init+0x264>
 80062b4:	2300      	movs	r3, #0
 80062b6:	e001      	b.n	80062bc <HAL_SAI_Init+0x268>
 80062b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	e017      	b.n	80062f0 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d111      	bne.n	80062ec <HAL_SAI_Init+0x298>
 80062c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062cc:	e00f      	b.n	80062ee <HAL_SAI_Init+0x29a>
 80062ce:	bf00      	nop
 80062d0:	40015804 	.word	0x40015804
 80062d4:	58005404 	.word	0x58005404
 80062d8:	40015824 	.word	0x40015824
 80062dc:	40015800 	.word	0x40015800
 80062e0:	58005424 	.word	0x58005424
 80062e4:	58005400 	.word	0x58005400
 80062e8:	cccccccd 	.word	0xcccccccd
 80062ec:	2300      	movs	r3, #0
 80062ee:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <HAL_SAI_Init+0x414>)
 80062fc:	400b      	ands	r3, r1
 80062fe:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006314:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631a:	431a      	orrs	r2, r3
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006328:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006334:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	051b      	lsls	r3, r3, #20
 800633c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006342:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b43      	ldr	r3, [pc, #268]	; (800646c <HAL_SAI_Init+0x418>)
 800635e:	400b      	ands	r3, r1
 8006360:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6899      	ldr	r1, [r3, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <HAL_SAI_Init+0x41c>)
 800638c:	400b      	ands	r3, r1
 800638e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80063a6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80063ac:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b2:	3b01      	subs	r3, #1
 80063b4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80063b6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68d9      	ldr	r1, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f24f 0320 	movw	r3, #61472	; 0xf020
 80063ce:	400b      	ands	r3, r1
 80063d0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68d9      	ldr	r1, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063e8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	3b01      	subs	r3, #1
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <HAL_SAI_Init+0x420>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_SAI_Init+0x3bc>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <HAL_SAI_Init+0x424>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d119      	bne.n	8006444 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	f023 0201 	bic.w	r2, r3, #1
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10e      	bne.n	8006444 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	3b01      	subs	r3, #1
 8006430:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006432:	431a      	orrs	r2, r3
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3728      	adds	r7, #40	; 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	f005c010 	.word	0xf005c010
 800646c:	ffff1ff0 	.word	0xffff1ff0
 8006470:	fff88000 	.word	0xfff88000
 8006474:	40015804 	.word	0x40015804
 8006478:	58005404 	.word	0x58005404

0800647c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SAI_Receive_DMA+0x1a>
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e079      	b.n	800658e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d172      	bne.n	800658c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_SAI_Receive_DMA+0x38>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e06c      	b.n	800658e <HAL_SAI_Receive_DMA+0x112>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	88fa      	ldrh	r2, [r7, #6]
 80064c6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	88fa      	ldrh	r2, [r7, #6]
 80064ce:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2222      	movs	r2, #34	; 0x22
 80064de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <HAL_SAI_Receive_DMA+0x11c>)
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <HAL_SAI_Receive_DMA+0x120>)
 80064f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <HAL_SAI_Receive_DMA+0x124>)
 80064fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006506:	2200      	movs	r2, #0
 8006508:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	331c      	adds	r3, #28
 8006516:	4619      	mov	r1, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800651c:	461a      	mov	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006524:	f7fa fd56 	bl	8000fd4 <HAL_DMA_Start_IT>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e029      	b.n	800658e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800653a:	2100      	movs	r1, #0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f831 	bl	80065a4 <SAI_InterruptFlag>
 8006542:	4601      	mov	r1, r0
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006560:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800657e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	080066e9 	.word	0x080066e9
 800659c:	08006689 	.word	0x08006689
 80065a0:	08006705 	.word	0x08006705

080065a4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d103      	bne.n	80065c2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f043 0308 	orr.w	r3, r3, #8
 80065c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d10b      	bne.n	80065e2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d003      	beq.n	80065da <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d103      	bne.n	80065e2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f043 0310 	orr.w	r3, r3, #16
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d003      	beq.n	80065f2 <SAI_InterruptFlag+0x4e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d104      	bne.n	80065fc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e003      	b.n	8006604 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f043 0304 	orr.w	r3, r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800661c:	4b18      	ldr	r3, [pc, #96]	; (8006680 <SAI_Disable+0x6c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a18      	ldr	r2, [pc, #96]	; (8006684 <SAI_Disable+0x70>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	0b1b      	lsrs	r3, r3, #12
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800663e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	72fb      	strb	r3, [r7, #11]
      break;
 800665a:	e009      	b.n	8006670 <SAI_Disable+0x5c>
    }
    count--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b01      	subs	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e7      	bne.n	8006640 <SAI_Disable+0x2c>

  return status;
 8006670:	7afb      	ldrb	r3, [r7, #11]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	24000008 	.word	0x24000008
 8006684:	95cbec1b 	.word	0x95cbec1b

08006688 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669e:	d01c      	beq.n	80066da <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80066ae:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80066b8:	2100      	movs	r1, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff ff72 	bl	80065a4 <SAI_InterruptFlag>
 80066c0:	4603      	mov	r3, r0
 80066c2:	43d9      	mvns	r1, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	400a      	ands	r2, r1
 80066d0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7f9 fe6b 	bl	80003b6 <HAL_SAI_RxCpltCallback>
#endif
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7f9 fe52 	bl	80003a0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fb fdf2 	bl	80022fc <HAL_DMA_GetError>
 8006718:	4603      	mov	r3, r0
 800671a:	2b02      	cmp	r3, #2
 800671c:	d01d      	beq.n	800675a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006724:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800673c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff68 	bl	8006614 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7f9 fdd9 	bl	800030c <HAL_SAI_ErrorCallback>
#endif
  }
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800676c:	f7f9 fe4c 	bl	8000408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006770:	f000 f824 	bl	80067bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006774:	f000 f974 	bl	8006a60 <MX_GPIO_Init>
  MX_CRC_Init();
 8006778:	f000 f88e 	bl	8006898 <MX_CRC_Init>

  MX_SAI4_Init();
 800677c:	f000 f8ce 	bl	800691c <MX_SAI4_Init>
  //MX_SAI1_Init();
  MX_BDMA_Init();
 8006780:	f000 f946 	bl	8006a10 <MX_BDMA_Init>



  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM

  Audio_In_Ctx[AUDIO_IN_INSTANCE].Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <main+0x54>)
 8006786:	2210      	movs	r2, #16
 8006788:	635a      	str	r2, [r3, #52]	; 0x34
  Audio_In_Ctx[AUDIO_IN_INSTANCE].ChannelsNbr = 1;
 800678a:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <main+0x54>)
 800678c:	2201      	movs	r2, #1
 800678e:	641a      	str	r2, [r3, #64]	; 0x40
  Audio_In_Ctx[AUDIO_IN_INSTANCE].SampleRate = SAI_AUDIO_FREQUENCY_48K;
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <main+0x54>)
 8006792:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
  Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample = AUDIO_RESOLUTION_8B;
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <main+0x54>)
 800679a:	2208      	movs	r2, #8
 800679c:	63da      	str	r2, [r3, #60]	; 0x3c
  Audio_In_Ctx[AUDIO_IN_INSTANCE].Volume = 80;
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <main+0x54>)
 80067a0:	2250      	movs	r2, #80	; 0x50
 80067a2:	651a      	str	r2, [r3, #80]	; 0x50

  // initialize audio instance: (NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U)
  // needs to be HAL_OK = 0
  // 64 bytes / mic_buffer[AUDIO_IN_INSTANCE].16bits/sample / 8
  //int32_t status_init = BSP_AUDIO_IN_PDMToPCM_Init(AUDIO_IN_INSTANCE, SAI_AUDIO_FREQUENCY_16K, 1, 1);
  int32_t status_record = BSP_AUDIO_IN_RecordPDM(AUDIO_IN_INSTANCE, mic_buffer, 64);
 80067a4:	1d3b      	adds	r3, r7, #4
 80067a6:	2240      	movs	r2, #64	; 0x40
 80067a8:	4619      	mov	r1, r3
 80067aa:	2001      	movs	r0, #1
 80067ac:	f7f9 fdce 	bl	800034c <BSP_AUDIO_IN_RecordPDM>
 80067b0:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80067b4:	e7fe      	b.n	80067b4 <main+0x50>
 80067b6:	bf00      	nop
 80067b8:	240003b8 	.word	0x240003b8

080067bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b09c      	sub	sp, #112	; 0x70
 80067c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c6:	224c      	movs	r2, #76	; 0x4c
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fc62 	bl	8007094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067d0:	1d3b      	adds	r3, r7, #4
 80067d2:	2220      	movs	r2, #32
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fc5c 	bl	8007094 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80067dc:	2004      	movs	r0, #4
 80067de:	f7fc fc41 	bl	8003064 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067e2:	2300      	movs	r3, #0
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	4b2b      	ldr	r3, [pc, #172]	; (8006894 <SystemClock_Config+0xd8>)
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <SystemClock_Config+0xd8>)
 80067ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f0:	6193      	str	r3, [r2, #24]
 80067f2:	4b28      	ldr	r3, [pc, #160]	; (8006894 <SystemClock_Config+0xd8>)
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80067fe:	bf00      	nop
 8006800:	4b24      	ldr	r3, [pc, #144]	; (8006894 <SystemClock_Config+0xd8>)
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d1f8      	bne.n	8006800 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800680e:	2302      	movs	r3, #2
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006812:	2301      	movs	r3, #1
 8006814:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800681a:	2302      	movs	r3, #2
 800681c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800681e:	2300      	movs	r3, #0
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006822:	2304      	movs	r3, #4
 8006824:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006826:	2318      	movs	r3, #24
 8006828:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800682a:	2301      	movs	r3, #1
 800682c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800682e:	237d      	movs	r3, #125	; 0x7d
 8006830:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006832:	2302      	movs	r3, #2
 8006834:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006836:	230c      	movs	r3, #12
 8006838:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800683a:	2300      	movs	r3, #0
 800683c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006846:	4618      	mov	r0, r3
 8006848:	f7fc fc66 	bl	8003118 <HAL_RCC_OscConfig>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006852:	f000 f94d 	bl	8006af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006856:	233f      	movs	r3, #63	; 0x3f
 8006858:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800685a:	2303      	movs	r3, #3
 800685c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006862:	2308      	movs	r3, #8
 8006864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006866:	2340      	movs	r3, #64	; 0x40
 8006868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800686a:	2340      	movs	r3, #64	; 0x40
 800686c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800686e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006872:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006878:	1d3b      	adds	r3, r7, #4
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f7fc fff7 	bl	8003870 <HAL_RCC_ClockConfig>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006888:	f000 f932 	bl	8006af0 <Error_Handler>
  }
}
 800688c:	bf00      	nop
 800688e:	3770      	adds	r7, #112	; 0x70
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	58024800 	.word	0x58024800

08006898 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <MX_CRC_Init+0x78>)
 80068a0:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <MX_CRC_Init+0x7c>)
 80068a2:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <MX_CRC_Init+0x78>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80068aa:	4b19      	ldr	r3, [pc, #100]	; (8006910 <MX_CRC_Init+0x78>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <MX_CRC_Init+0x78>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80068b6:	4b16      	ldr	r3, [pc, #88]	; (8006910 <MX_CRC_Init+0x78>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80068bc:	4b14      	ldr	r3, [pc, #80]	; (8006910 <MX_CRC_Init+0x78>)
 80068be:	2201      	movs	r2, #1
 80068c0:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80068c2:	4813      	ldr	r0, [pc, #76]	; (8006910 <MX_CRC_Init+0x78>)
 80068c4:	f7f9 ff42 	bl	800074c <HAL_CRC_Init>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 80068ce:	f000 f90f 	bl	8006af0 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80068d2:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <MX_CRC_Init+0x78>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <MX_CRC_Init+0x78>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 80068e2:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <MX_CRC_Init+0x80>)
 80068e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068e8:	4a0b      	ldr	r2, [pc, #44]	; (8006918 <MX_CRC_Init+0x80>)
 80068ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <MX_CRC_Init+0x80>)
 80068f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006900:	4803      	ldr	r0, [pc, #12]	; (8006910 <MX_CRC_Init+0x78>)
 8006902:	f000 f915 	bl	8006b30 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	2400044c 	.word	0x2400044c
 8006914:	58024c00 	.word	0x58024c00
 8006918:	58024400 	.word	0x58024400

0800691c <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[AUDIO_IN_INSTANCE].Instance = AUDIO_IN_SAI_PDMx;
 8006920:	4b38      	ldr	r3, [pc, #224]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006922:	4a39      	ldr	r2, [pc, #228]	; (8006a08 <MX_SAI4_Init+0xec>)
 8006924:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Protocol = SAI_FREE_PROTOCOL;
 8006928:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioMode = SAI_MODEMASTER_RX;
 8006930:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006932:	2201      	movs	r2, #1
 8006934:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.DataSize = SAI_DATASIZE_16;
 8006938:	4b32      	ldr	r3, [pc, #200]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006940:	4b30      	ldr	r3, [pc, #192]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006948:	4b2e      	ldr	r3, [pc, #184]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Synchro = SAI_ASYNCHRONOUS;
 8006950:	4b2c      	ldr	r3, [pc, #176]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006968:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006970:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006972:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006976:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.MonoStereoMode = SAI_STEREOMODE;
 800697a:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800697c:	2200      	movs	r2, #0
 800697e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.CompandingMode = SAI_NOCOMPANDING;
 8006982:	4b20      	ldr	r3, [pc, #128]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FrameLength = 16;
 800698a:	4b1e      	ldr	r3, [pc, #120]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800698c:	2210      	movs	r2, #16
 800698e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.ActiveFrameLength = 1;
 8006992:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <MX_SAI4_Init+0xe8>)
 8006994:	2201      	movs	r2, #1
 8006996:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800699a:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <MX_SAI4_Init+0xe8>)
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80069a2:	4b18      	ldr	r3, [pc, #96]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80069aa:	4b16      	ldr	r3, [pc, #88]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.FirstBitOffset = 0;
 80069b2:	4b14      	ldr	r3, [pc, #80]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotNumber = 0;
 80069c2:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotActive = 0x0000FFFF;
 80069ca:	4b0e      	ldr	r3, [pc, #56]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 1;
 80069dc:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069de:	2201      	movs	r2, #1
 80069e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 80069e4:	4b07      	ldr	r3, [pc, #28]	; (8006a04 <MX_SAI4_Init+0xe8>)
 80069e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_SAI_Init(&haudio_in_sai[AUDIO_IN_INSTANCE]) != HAL_OK)
 80069ee:	4807      	ldr	r0, [pc, #28]	; (8006a0c <MX_SAI4_Init+0xf0>)
 80069f0:	f7ff fb30 	bl	8006054 <HAL_SAI_Init>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <MX_SAI4_Init+0xe2>
  {
    Error_Handler();
 80069fa:	f000 f879 	bl	8006af0 <Error_Handler>
  }


}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	2400002c 	.word	0x2400002c
 8006a08:	58005404 	.word	0x58005404
 8006a0c:	240000c4 	.word	0x240000c4

08006a10 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006a16:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <MX_BDMA_Init+0x4c>)
 8006a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a1c:	4a0f      	ldr	r2, [pc, #60]	; (8006a5c <MX_BDMA_Init+0x4c>)
 8006a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a26:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <MX_BDMA_Init+0x4c>)
 8006a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006a34:	2200      	movs	r2, #0
 8006a36:	2100      	movs	r1, #0
 8006a38:	2080      	movs	r0, #128	; 0x80
 8006a3a:	f7f9 fe52 	bl	80006e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006a3e:	2080      	movs	r0, #128	; 0x80
 8006a40:	f7f9 fe69 	bl	8000716 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8006a44:	2200      	movs	r2, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	2081      	movs	r0, #129	; 0x81
 8006a4a:	f7f9 fe4a 	bl	80006e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8006a4e:	2081      	movs	r0, #129	; 0x81
 8006a50:	f7f9 fe61 	bl	8000716 <HAL_NVIC_EnableIRQ>

}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	58024400 	.word	0x58024400

08006a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a66:	4b21      	ldr	r3, [pc, #132]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a84:	4b19      	ldr	r3, [pc, #100]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a8a:	4a18      	ldr	r2, [pc, #96]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006a8c:	f043 0310 	orr.w	r3, r3, #16
 8006a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aa8:	4a10      	ldr	r2, [pc, #64]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006aaa:	f043 0308 	orr.w	r3, r3, #8
 8006aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ac6:	4a09      	ldr	r2, [pc, #36]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006ac8:	f043 0320 	orr.w	r3, r3, #32
 8006acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <MX_GPIO_Init+0x8c>)
 8006ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]

}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400

08006af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006af4:	b672      	cpsid	i
}
 8006af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006af8:	e7fe      	b.n	8006af8 <Error_Handler+0x8>
	...

08006afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <HAL_MspInit+0x30>)
 8006b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <HAL_MspInit+0x30>)
 8006b0a:	f043 0302 	orr.w	r3, r3, #2
 8006b0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <HAL_MspInit+0x30>)
 8006b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	58024400 	.word	0x58024400

08006b30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a0b      	ldr	r2, [pc, #44]	; (8006b6c <HAL_CRC_MspInit+0x3c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d10e      	bne.n	8006b60 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <HAL_CRC_MspInit+0x40>)
 8006b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b48:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <HAL_CRC_MspInit+0x40>)
 8006b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b52:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <HAL_CRC_MspInit+0x40>)
 8006b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006b60:	bf00      	nop
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	58024c00 	.word	0x58024c00
 8006b70:	58024400 	.word	0x58024400

08006b74 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b0ba      	sub	sp, #232	; 0xe8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b7c:	f107 0310 	add.w	r3, r7, #16
 8006b80:	22b4      	movs	r2, #180	; 0xb4
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fa85 	bl	8007094 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4aa9      	ldr	r2, [pc, #676]	; (8006e34 <HAL_SAI_MspInit+0x2c0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	f040 80a5 	bne.w	8006ce0 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8006b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fd f9c3 	bl	8003f30 <HAL_RCCEx_PeriphCLKConfig>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8006bb0:	f7ff ff9e 	bl	8006af0 <Error_Handler>
    }

      if (SAI1_client == 0)
 8006bb4:	4ba0      	ldr	r3, [pc, #640]	; (8006e38 <HAL_SAI_MspInit+0x2c4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10e      	bne.n	8006bda <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006bbc:	4b9f      	ldr	r3, [pc, #636]	; (8006e3c <HAL_SAI_MspInit+0x2c8>)
 8006bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc2:	4a9e      	ldr	r2, [pc, #632]	; (8006e3c <HAL_SAI_MspInit+0x2c8>)
 8006bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006bcc:	4b9b      	ldr	r3, [pc, #620]	; (8006e3c <HAL_SAI_MspInit+0x2c8>)
 8006bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8006bda:	4b97      	ldr	r3, [pc, #604]	; (8006e38 <HAL_SAI_MspInit+0x2c4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	4a95      	ldr	r2, [pc, #596]	; (8006e38 <HAL_SAI_MspInit+0x2c4>)
 8006be2:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006be4:	2308      	movs	r3, #8
 8006be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bea:	2302      	movs	r3, #2
 8006bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006c06:	4619      	mov	r1, r3
 8006c08:	488d      	ldr	r0, [pc, #564]	; (8006e40 <HAL_SAI_MspInit+0x2cc>)
 8006c0a:	f7fc f883 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8006c0e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c16:	2302      	movs	r3, #2
 8006c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006c28:	2306      	movs	r3, #6
 8006c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006c2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4883      	ldr	r0, [pc, #524]	; (8006e44 <HAL_SAI_MspInit+0x2d0>)
 8006c36:	f7fc f86d 	bl	8002d14 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8006c3a:	4b83      	ldr	r3, [pc, #524]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c3c:	4a83      	ldr	r2, [pc, #524]	; (8006e4c <HAL_SAI_MspInit+0x2d8>)
 8006c3e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8006c40:	4b81      	ldr	r3, [pc, #516]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c42:	2258      	movs	r2, #88	; 0x58
 8006c44:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c46:	4b80      	ldr	r3, [pc, #512]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c48:	2240      	movs	r2, #64	; 0x40
 8006c4a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c4c:	4b7e      	ldr	r3, [pc, #504]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8006c52:	4b7d      	ldr	r3, [pc, #500]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c58:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006c5a:	4b7b      	ldr	r3, [pc, #492]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c60:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006c62:	4b79      	ldr	r3, [pc, #484]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c68:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006c6a:	4b77      	ldr	r3, [pc, #476]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c70:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8006c72:	4b75      	ldr	r3, [pc, #468]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c78:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c7a:	4b73      	ldr	r3, [pc, #460]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006c80:	4871      	ldr	r0, [pc, #452]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006c82:	f7f9 fe4d 	bl	8000920 <HAL_DMA_Init>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8006c8c:	f7ff ff30 	bl	8006af0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8006c90:	2306      	movs	r3, #6
 8006c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8006c96:	2300      	movs	r3, #0
 8006c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8006cae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4864      	ldr	r0, [pc, #400]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006cb6:	f7fb ff15 	bl	8002ae4 <HAL_DMAEx_ConfigMuxSync>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8006cc0:	f7ff ff16 	bl	8006af0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a60      	ldr	r2, [pc, #384]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006ccc:	4a5e      	ldr	r2, [pc, #376]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a5c      	ldr	r2, [pc, #368]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006cda:	4a5b      	ldr	r2, [pc, #364]	; (8006e48 <HAL_SAI_MspInit+0x2d4>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5a      	ldr	r2, [pc, #360]	; (8006e50 <HAL_SAI_MspInit+0x2dc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	f040 80a0 	bne.w	8006e2c <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8006cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cf8:	f107 0310 	add.w	r3, r7, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fd f917 	bl	8003f30 <HAL_RCCEx_PeriphCLKConfig>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8006d08:	f7ff fef2 	bl	8006af0 <Error_Handler>
    }

    if (SAI4_client == 0)
 8006d0c:	4b51      	ldr	r3, [pc, #324]	; (8006e54 <HAL_SAI_MspInit+0x2e0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10e      	bne.n	8006d32 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8006d14:	4b49      	ldr	r3, [pc, #292]	; (8006e3c <HAL_SAI_MspInit+0x2c8>)
 8006d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d1a:	4a48      	ldr	r2, [pc, #288]	; (8006e3c <HAL_SAI_MspInit+0x2c8>)
 8006d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d24:	4b45      	ldr	r3, [pc, #276]	; (8006e3c <HAL_SAI_MspInit+0x2c8>)
 8006d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8006d32:	4b48      	ldr	r3, [pc, #288]	; (8006e54 <HAL_SAI_MspInit+0x2e0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	4a46      	ldr	r2, [pc, #280]	; (8006e54 <HAL_SAI_MspInit+0x2e0>)
 8006d3a:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d42:	2302      	movs	r3, #2
 8006d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8006d54:	230a      	movs	r3, #10
 8006d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4837      	ldr	r0, [pc, #220]	; (8006e40 <HAL_SAI_MspInit+0x2cc>)
 8006d62:	f7fb ffd7 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4833      	ldr	r0, [pc, #204]	; (8006e58 <HAL_SAI_MspInit+0x2e4>)
 8006d8c:	f7fb ffc2 	bl	8002d14 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8006d90:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006d92:	4a33      	ldr	r2, [pc, #204]	; (8006e60 <HAL_SAI_MspInit+0x2ec>)
 8006d94:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8006d96:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006d98:	220f      	movs	r2, #15
 8006d9a:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d9c:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da2:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8006da8:	4b2c      	ldr	r3, [pc, #176]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dae:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006db0:	4b2a      	ldr	r3, [pc, #168]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dc2:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8006dcc:	4823      	ldr	r0, [pc, #140]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006dce:	f7f9 fda7 	bl	8000920 <HAL_DMA_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8006dd8:	f7ff fe8a 	bl	8006af0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8006ddc:	230e      	movs	r3, #14
 8006dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8006dfa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4816      	ldr	r0, [pc, #88]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006e02:	f7fb fe6f 	bl	8002ae4 <HAL_DMAEx_ConfigMuxSync>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8006e0c:	f7ff fe70 	bl	8006af0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a12      	ldr	r2, [pc, #72]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006e18:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a0e      	ldr	r2, [pc, #56]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006e26:	4a0d      	ldr	r2, [pc, #52]	; (8006e5c <HAL_SAI_MspInit+0x2e8>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8006e2c:	bf00      	nop
 8006e2e:	37e8      	adds	r7, #232	; 0xe8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40015824 	.word	0x40015824
 8006e38:	2400015c 	.word	0x2400015c
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	58021000 	.word	0x58021000
 8006e44:	58021400 	.word	0x58021400
 8006e48:	24000618 	.word	0x24000618
 8006e4c:	40020028 	.word	0x40020028
 8006e50:	58005404 	.word	0x58005404
 8006e54:	24000160 	.word	0x24000160
 8006e58:	58020c00 	.word	0x58020c00
 8006e5c:	240005a0 	.word	0x240005a0
 8006e60:	58025408 	.word	0x58025408

08006e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006e68:	e7fe      	b.n	8006e68 <NMI_Handler+0x4>

08006e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e6e:	e7fe      	b.n	8006e6e <HardFault_Handler+0x4>

08006e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e74:	e7fe      	b.n	8006e74 <MemManage_Handler+0x4>

08006e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e76:	b480      	push	{r7}
 8006e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e7a:	e7fe      	b.n	8006e7a <BusFault_Handler+0x4>

08006e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e80:	e7fe      	b.n	8006e80 <UsageFault_Handler+0x4>

08006e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e82:	b480      	push	{r7}
 8006e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e86:	bf00      	nop
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ea2:	bf00      	nop
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006eb0:	f7f9 fb1c 	bl	80004ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006eb4:	bf00      	nop
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8006ebc:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <DMA1_Stream1_IRQHandler+0x10>)
 8006ebe:	f7fa faf3 	bl	80014a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006ec2:	bf00      	nop
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	24000618 	.word	0x24000618

08006ecc <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8006ed0:	4802      	ldr	r0, [pc, #8]	; (8006edc <DMAMUX1_OVR_IRQHandler+0x10>)
 8006ed2:	f7fb fecd 	bl	8002c70 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8006ed6:	bf00      	nop
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	24000618 	.word	0x24000618

08006ee0 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8006ee4:	4802      	ldr	r0, [pc, #8]	; (8006ef0 <DMAMUX2_OVR_IRQHandler+0x10>)
 8006ee6:	f7fb fec3 	bl	8002c70 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	240005a0 	.word	0x240005a0

08006ef4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8006ef8:	4802      	ldr	r0, [pc, #8]	; (8006f04 <BDMA_Channel0_IRQHandler+0x10>)
 8006efa:	f7fa fad5 	bl	80014a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006efe:	bf00      	nop
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	240005a0 	.word	0x240005a0

08006f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006f0c:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <SystemInit+0xd0>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	4a31      	ldr	r2, [pc, #196]	; (8006fd8 <SystemInit+0xd0>)
 8006f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006f1c:	4b2f      	ldr	r3, [pc, #188]	; (8006fdc <SystemInit+0xd4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	2b06      	cmp	r3, #6
 8006f26:	d807      	bhi.n	8006f38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006f28:	4b2c      	ldr	r3, [pc, #176]	; (8006fdc <SystemInit+0xd4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f023 030f 	bic.w	r3, r3, #15
 8006f30:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <SystemInit+0xd4>)
 8006f32:	f043 0307 	orr.w	r3, r3, #7
 8006f36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006f38:	4b29      	ldr	r3, [pc, #164]	; (8006fe0 <SystemInit+0xd8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <SystemInit+0xd8>)
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006f44:	4b26      	ldr	r3, [pc, #152]	; (8006fe0 <SystemInit+0xd8>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006f4a:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <SystemInit+0xd8>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4924      	ldr	r1, [pc, #144]	; (8006fe0 <SystemInit+0xd8>)
 8006f50:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <SystemInit+0xdc>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006f56:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <SystemInit+0xd4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <SystemInit+0xd4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 030f 	bic.w	r3, r3, #15
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <SystemInit+0xd4>)
 8006f6c:	f043 0307 	orr.w	r3, r3, #7
 8006f70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006f72:	4b1b      	ldr	r3, [pc, #108]	; (8006fe0 <SystemInit+0xd8>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <SystemInit+0xd8>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006f7e:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <SystemInit+0xd8>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006f84:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <SystemInit+0xd8>)
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <SystemInit+0xe0>)
 8006f88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006f8a:	4b15      	ldr	r3, [pc, #84]	; (8006fe0 <SystemInit+0xd8>)
 8006f8c:	4a17      	ldr	r2, [pc, #92]	; (8006fec <SystemInit+0xe4>)
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006f90:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <SystemInit+0xd8>)
 8006f92:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <SystemInit+0xe8>)
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <SystemInit+0xd8>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006f9c:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <SystemInit+0xd8>)
 8006f9e:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <SystemInit+0xe8>)
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006fa2:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <SystemInit+0xd8>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <SystemInit+0xd8>)
 8006faa:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <SystemInit+0xe8>)
 8006fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <SystemInit+0xd8>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <SystemInit+0xd8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <SystemInit+0xd8>)
 8006fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <SystemInit+0xd8>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <SystemInit+0xec>)
 8006fc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006fcc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006fce:	bf00      	nop
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	e000ed00 	.word	0xe000ed00
 8006fdc:	52002000 	.word	0x52002000
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	eaf6ed7f 	.word	0xeaf6ed7f
 8006fe8:	02020200 	.word	0x02020200
 8006fec:	01ff0000 	.word	0x01ff0000
 8006ff0:	01010280 	.word	0x01010280
 8006ff4:	52004000 	.word	0x52004000

08006ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ffc:	f7ff ff84 	bl	8006f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007000:	480c      	ldr	r0, [pc, #48]	; (8007034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007002:	490d      	ldr	r1, [pc, #52]	; (8007038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007004:	4a0d      	ldr	r2, [pc, #52]	; (800703c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007008:	e002      	b.n	8007010 <LoopCopyDataInit>

0800700a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800700a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800700c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800700e:	3304      	adds	r3, #4

08007010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007014:	d3f9      	bcc.n	800700a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007016:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007018:	4c0a      	ldr	r4, [pc, #40]	; (8007044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800701a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800701c:	e001      	b.n	8007022 <LoopFillZerobss>

0800701e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800701e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007020:	3204      	adds	r2, #4

08007022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007024:	d3fb      	bcc.n	800701e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007026:	f000 f811 	bl	800704c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800702a:	f7ff fb9b 	bl	8006764 <main>
  bx  lr
 800702e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007030:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007034:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007038:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800703c:	080070dc 	.word	0x080070dc
  ldr r2, =_sbss
 8007040:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8007044:	24000690 	.word	0x24000690

08007048 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007048:	e7fe      	b.n	8007048 <ADC3_IRQHandler>
	...

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4d0d      	ldr	r5, [pc, #52]	; (8007084 <__libc_init_array+0x38>)
 8007050:	4c0d      	ldr	r4, [pc, #52]	; (8007088 <__libc_init_array+0x3c>)
 8007052:	1b64      	subs	r4, r4, r5
 8007054:	10a4      	asrs	r4, r4, #2
 8007056:	2600      	movs	r6, #0
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	4d0b      	ldr	r5, [pc, #44]	; (800708c <__libc_init_array+0x40>)
 800705e:	4c0c      	ldr	r4, [pc, #48]	; (8007090 <__libc_init_array+0x44>)
 8007060:	f000 f820 	bl	80070a4 <_init>
 8007064:	1b64      	subs	r4, r4, r5
 8007066:	10a4      	asrs	r4, r4, #2
 8007068:	2600      	movs	r6, #0
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	f855 3b04 	ldr.w	r3, [r5], #4
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	080070d4 	.word	0x080070d4
 8007088:	080070d4 	.word	0x080070d4
 800708c:	080070d4 	.word	0x080070d4
 8007090:	080070d8 	.word	0x080070d8

08007094 <memset>:
 8007094:	4402      	add	r2, r0
 8007096:	4603      	mov	r3, r0
 8007098:	4293      	cmp	r3, r2
 800709a:	d100      	bne.n	800709e <memset+0xa>
 800709c:	4770      	bx	lr
 800709e:	f803 1b01 	strb.w	r1, [r3], #1
 80070a2:	e7f9      	b.n	8007098 <memset+0x4>

080070a4 <_init>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr

080070b0 <_fini>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr
