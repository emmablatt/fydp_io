
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a88  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08009d58  08009d58  00019d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800a028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002f4  2400047c  0800a4a4  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000770  0800a4a4  00020770  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a357  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003258  00000000  00000000  0003a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bc8  00000000  00000000  0003da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ab8  00000000  00000000  0003e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031cc4  00000000  00000000  0003f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011dfc  00000000  00000000  00070da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00142458  00000000  00000000  00082ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001c4ff8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f88  00000000  00000000  001c50cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009d40 	.word	0x08009d40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	08009d40 	.word	0x08009d40

08000310 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <BSP_LED_On+0x34>)
 8000322:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <BSP_LED_On+0x38>)
 800032a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032e:	b29b      	uxth	r3, r3
 8000330:	2200      	movs	r2, #0
 8000332:	4619      	mov	r1, r3
 8000334:	f003 f8f0 	bl	8003518 <HAL_GPIO_WritePin>
  return ret;
 8000338:	68fb      	ldr	r3, [r7, #12]
}
 800033a:	4618      	mov	r0, r3
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	24000400 	.word	0x24000400
 8000348:	08009d90 	.word	0x08009d90

0800034c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000352:	2003      	movs	r0, #3
 8000354:	f000 f95c 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000358:	f003 ff16 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 800035c:	4602      	mov	r2, r0
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_Init+0x68>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	0a1b      	lsrs	r3, r3, #8
 8000364:	f003 030f 	and.w	r3, r3, #15
 8000368:	4913      	ldr	r1, [pc, #76]	; (80003b8 <HAL_Init+0x6c>)
 800036a:	5ccb      	ldrb	r3, [r1, r3]
 800036c:	f003 031f 	and.w	r3, r3, #31
 8000370:	fa22 f303 	lsr.w	r3, r2, r3
 8000374:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_Init+0x68>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 030f 	and.w	r3, r3, #15
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_Init+0x6c>)
 8000380:	5cd3      	ldrb	r3, [r2, r3]
 8000382:	f003 031f 	and.w	r3, r3, #31
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	fa22 f303 	lsr.w	r3, r2, r3
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <HAL_Init+0x70>)
 800038e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <HAL_Init+0x74>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000396:	2000      	movs	r0, #0
 8000398:	f000 f814 	bl	80003c4 <HAL_InitTick>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e002      	b.n	80003ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80003a6:	f007 f967 	bl	8007678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	58024400 	.word	0x58024400
 80003b8:	08009da0 	.word	0x08009da0
 80003bc:	24000414 	.word	0x24000414
 80003c0:	24000410 	.word	0x24000410

080003c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_InitTick+0x60>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d101      	bne.n	80003d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80003d4:	2301      	movs	r3, #1
 80003d6:	e021      	b.n	800041c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <HAL_InitTick+0x64>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <HAL_InitTick+0x60>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f941 	bl	8000676 <HAL_SYSTICK_Config>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e00e      	b.n	800041c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b0f      	cmp	r3, #15
 8000402:	d80a      	bhi.n	800041a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000404:	2200      	movs	r2, #0
 8000406:	6879      	ldr	r1, [r7, #4]
 8000408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800040c:	f000 f90b 	bl	8000626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000410:	4a06      	ldr	r2, [pc, #24]	; (800042c <HAL_InitTick+0x68>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000416:	2300      	movs	r3, #0
 8000418:	e000      	b.n	800041c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2400040c 	.word	0x2400040c
 8000428:	24000410 	.word	0x24000410
 800042c:	24000408 	.word	0x24000408

08000430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_IncTick+0x20>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	461a      	mov	r2, r3
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_IncTick+0x24>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4413      	add	r3, r2
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_IncTick+0x24>)
 8000442:	6013      	str	r3, [r2, #0]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	2400040c 	.word	0x2400040c
 8000454:	240004a4 	.word	0x240004a4

08000458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return uwTick;
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <HAL_GetTick+0x14>)
 800045e:	681b      	ldr	r3, [r3, #0]
}
 8000460:	4618      	mov	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	240004a4 	.word	0x240004a4

08000470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f003 0307 	and.w	r3, r3, #7
 800047e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <__NVIC_SetPriorityGrouping+0x40>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800048c:	4013      	ands	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <__NVIC_SetPriorityGrouping+0x44>)
 800049a:	4313      	orrs	r3, r2
 800049c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800049e:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <__NVIC_SetPriorityGrouping+0x40>)
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	60d3      	str	r3, [r2, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	e000ed00 	.word	0xe000ed00
 80004b4:	05fa0000 	.word	0x05fa0000

080004b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <__NVIC_GetPriorityGrouping+0x18>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	0a1b      	lsrs	r3, r3, #8
 80004c2:	f003 0307 	and.w	r3, r3, #7
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	e000ed00 	.word	0xe000ed00

080004d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	db0b      	blt.n	80004fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	f003 021f 	and.w	r2, r3, #31
 80004ec:	4907      	ldr	r1, [pc, #28]	; (800050c <__NVIC_EnableIRQ+0x38>)
 80004ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f2:	095b      	lsrs	r3, r3, #5
 80004f4:	2001      	movs	r0, #1
 80004f6:	fa00 f202 	lsl.w	r2, r0, r2
 80004fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000e100 	.word	0xe000e100

08000510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800051c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db0a      	blt.n	800053a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	b2da      	uxtb	r2, r3
 8000528:	490c      	ldr	r1, [pc, #48]	; (800055c <__NVIC_SetPriority+0x4c>)
 800052a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800052e:	0112      	lsls	r2, r2, #4
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	440b      	add	r3, r1
 8000534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000538:	e00a      	b.n	8000550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4908      	ldr	r1, [pc, #32]	; (8000560 <__NVIC_SetPriority+0x50>)
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	f003 030f 	and.w	r3, r3, #15
 8000546:	3b04      	subs	r3, #4
 8000548:	0112      	lsls	r2, r2, #4
 800054a:	b2d2      	uxtb	r2, r2
 800054c:	440b      	add	r3, r1
 800054e:	761a      	strb	r2, [r3, #24]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000e100 	.word	0xe000e100
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000564:	b480      	push	{r7}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	f1c3 0307 	rsb	r3, r3, #7
 800057e:	2b04      	cmp	r3, #4
 8000580:	bf28      	it	cs
 8000582:	2304      	movcs	r3, #4
 8000584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	3304      	adds	r3, #4
 800058a:	2b06      	cmp	r3, #6
 800058c:	d902      	bls.n	8000594 <NVIC_EncodePriority+0x30>
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	3b03      	subs	r3, #3
 8000592:	e000      	b.n	8000596 <NVIC_EncodePriority+0x32>
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	43da      	mvns	r2, r3
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	401a      	ands	r2, r3
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	fa01 f303 	lsl.w	r3, r1, r3
 80005b6:	43d9      	mvns	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	4313      	orrs	r3, r2
         );
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3724      	adds	r7, #36	; 0x24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005dc:	d301      	bcc.n	80005e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005de:	2301      	movs	r3, #1
 80005e0:	e00f      	b.n	8000602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <SysTick_Config+0x40>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ea:	210f      	movs	r1, #15
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f0:	f7ff ff8e 	bl	8000510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <SysTick_Config+0x40>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <SysTick_Config+0x40>)
 80005fc:	2207      	movs	r2, #7
 80005fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	e000e010 	.word	0xe000e010

08000610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ff29 	bl	8000470 <__NVIC_SetPriorityGrouping>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000634:	f7ff ff40 	bl	80004b8 <__NVIC_GetPriorityGrouping>
 8000638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	6978      	ldr	r0, [r7, #20]
 8000640:	f7ff ff90 	bl	8000564 <NVIC_EncodePriority>
 8000644:	4602      	mov	r2, r0
 8000646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff5f 	bl	8000510 <__NVIC_SetPriority>
}
 8000652:	bf00      	nop
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff33 	bl	80004d4 <__NVIC_EnableIRQ>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ffa4 	bl	80005cc <SysTick_Config>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e054      	b.n	800074c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7f5b      	ldrb	r3, [r3, #29]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d105      	bne.n	80006b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f006 fffa 	bl	80076ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2202      	movs	r2, #2
 80006bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10c      	bne.n	80006e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <HAL_CRC_Init+0xc4>)
 80006cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f022 0218 	bic.w	r2, r2, #24
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	e00c      	b.n	80006fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6899      	ldr	r1, [r3, #8]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	461a      	mov	r2, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f834 	bl	8000758 <HAL_CRCEx_Polynomial_Set>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e028      	b.n	800074c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	795b      	ldrb	r3, [r3, #5]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d105      	bne.n	800070e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	e004      	b.n	8000718 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	6912      	ldr	r2, [r2, #16]
 8000716:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	430a      	orrs	r2, r1
 800072c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	430a      	orrs	r2, r1
 8000742:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2201      	movs	r2, #1
 8000748:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	04c11db7 	.word	0x04c11db7

08000758 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000768:	231f      	movs	r3, #31
 800076a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800076c:	bf00      	nop
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	613a      	str	r2, [r7, #16]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d009      	beq.n	800078c <HAL_CRCEx_Polynomial_Set+0x34>
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	f003 031f 	and.w	r3, r3, #31
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	fa22 f303 	lsr.w	r3, r2, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0f0      	beq.n	800076e <HAL_CRCEx_Polynomial_Set+0x16>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b18      	cmp	r3, #24
 8000790:	d846      	bhi.n	8000820 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	08000827 	.word	0x08000827
 800079c:	08000821 	.word	0x08000821
 80007a0:	08000821 	.word	0x08000821
 80007a4:	08000821 	.word	0x08000821
 80007a8:	08000821 	.word	0x08000821
 80007ac:	08000821 	.word	0x08000821
 80007b0:	08000821 	.word	0x08000821
 80007b4:	08000821 	.word	0x08000821
 80007b8:	08000815 	.word	0x08000815
 80007bc:	08000821 	.word	0x08000821
 80007c0:	08000821 	.word	0x08000821
 80007c4:	08000821 	.word	0x08000821
 80007c8:	08000821 	.word	0x08000821
 80007cc:	08000821 	.word	0x08000821
 80007d0:	08000821 	.word	0x08000821
 80007d4:	08000821 	.word	0x08000821
 80007d8:	08000809 	.word	0x08000809
 80007dc:	08000821 	.word	0x08000821
 80007e0:	08000821 	.word	0x08000821
 80007e4:	08000821 	.word	0x08000821
 80007e8:	08000821 	.word	0x08000821
 80007ec:	08000821 	.word	0x08000821
 80007f0:	08000821 	.word	0x08000821
 80007f4:	08000821 	.word	0x08000821
 80007f8:	080007fd 	.word	0x080007fd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d913      	bls.n	800082a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000806:	e010      	b.n	800082a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d90f      	bls.n	800082e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000812:	e00c      	b.n	800082e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	2b0f      	cmp	r3, #15
 8000818:	d90b      	bls.n	8000832 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800081e:	e008      	b.n	8000832 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	75fb      	strb	r3, [r7, #23]
      break;
 8000824:	e006      	b.n	8000834 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000832:	bf00      	nop
  }
  if (status == HAL_OK)
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10d      	bne.n	8000856 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f023 0118 	bic.w	r1, r3, #24
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	430a      	orrs	r2, r1
 8000854:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
}
 8000858:	4618      	mov	r0, r3
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800086c:	f7ff fdf4 	bl	8000458 <HAL_GetTick>
 8000870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e314      	b.n	8000ea6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a66      	ldr	r2, [pc, #408]	; (8000a1c <HAL_DMA_Init+0x1b8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d04a      	beq.n	800091c <HAL_DMA_Init+0xb8>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a65      	ldr	r2, [pc, #404]	; (8000a20 <HAL_DMA_Init+0x1bc>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d045      	beq.n	800091c <HAL_DMA_Init+0xb8>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a63      	ldr	r2, [pc, #396]	; (8000a24 <HAL_DMA_Init+0x1c0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d040      	beq.n	800091c <HAL_DMA_Init+0xb8>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a62      	ldr	r2, [pc, #392]	; (8000a28 <HAL_DMA_Init+0x1c4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d03b      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a60      	ldr	r2, [pc, #384]	; (8000a2c <HAL_DMA_Init+0x1c8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d036      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a5f      	ldr	r2, [pc, #380]	; (8000a30 <HAL_DMA_Init+0x1cc>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d031      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a5d      	ldr	r2, [pc, #372]	; (8000a34 <HAL_DMA_Init+0x1d0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d02c      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a5c      	ldr	r2, [pc, #368]	; (8000a38 <HAL_DMA_Init+0x1d4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d027      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a5a      	ldr	r2, [pc, #360]	; (8000a3c <HAL_DMA_Init+0x1d8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d022      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <HAL_DMA_Init+0x1dc>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d01d      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a57      	ldr	r2, [pc, #348]	; (8000a44 <HAL_DMA_Init+0x1e0>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d018      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a56      	ldr	r2, [pc, #344]	; (8000a48 <HAL_DMA_Init+0x1e4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d013      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a54      	ldr	r2, [pc, #336]	; (8000a4c <HAL_DMA_Init+0x1e8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d00e      	beq.n	800091c <HAL_DMA_Init+0xb8>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a53      	ldr	r2, [pc, #332]	; (8000a50 <HAL_DMA_Init+0x1ec>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d009      	beq.n	800091c <HAL_DMA_Init+0xb8>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a51      	ldr	r2, [pc, #324]	; (8000a54 <HAL_DMA_Init+0x1f0>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d004      	beq.n	800091c <HAL_DMA_Init+0xb8>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a50      	ldr	r2, [pc, #320]	; (8000a58 <HAL_DMA_Init+0x1f4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d101      	bne.n	8000920 <HAL_DMA_Init+0xbc>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <HAL_DMA_Init+0xbe>
 8000920:	2300      	movs	r3, #0
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 813c 	beq.w	8000ba0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2202      	movs	r2, #2
 800092c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <HAL_DMA_Init+0x1b8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d04a      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <HAL_DMA_Init+0x1bc>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d045      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a34      	ldr	r2, [pc, #208]	; (8000a24 <HAL_DMA_Init+0x1c0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d040      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a33      	ldr	r2, [pc, #204]	; (8000a28 <HAL_DMA_Init+0x1c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d03b      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <HAL_DMA_Init+0x1c8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d036      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <HAL_DMA_Init+0x1cc>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d031      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <HAL_DMA_Init+0x1d0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d02c      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <HAL_DMA_Init+0x1d4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d027      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <HAL_DMA_Init+0x1d8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d022      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <HAL_DMA_Init+0x1dc>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d01d      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <HAL_DMA_Init+0x1e0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d018      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <HAL_DMA_Init+0x1e4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d013      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <HAL_DMA_Init+0x1e8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00e      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <HAL_DMA_Init+0x1ec>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d009      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_DMA_Init+0x1f0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d004      	beq.n	80009d8 <HAL_DMA_Init+0x174>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <HAL_DMA_Init+0x1f4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d108      	bne.n	80009ea <HAL_DMA_Init+0x186>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 0201 	bic.w	r2, r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e007      	b.n	80009fa <HAL_DMA_Init+0x196>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0201 	bic.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80009fa:	e02f      	b.n	8000a5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009fc:	f7ff fd2c 	bl	8000458 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	2b05      	cmp	r3, #5
 8000a08:	d928      	bls.n	8000a5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2203      	movs	r2, #3
 8000a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e244      	b.n	8000ea6 <HAL_DMA_Init+0x642>
 8000a1c:	40020010 	.word	0x40020010
 8000a20:	40020028 	.word	0x40020028
 8000a24:	40020040 	.word	0x40020040
 8000a28:	40020058 	.word	0x40020058
 8000a2c:	40020070 	.word	0x40020070
 8000a30:	40020088 	.word	0x40020088
 8000a34:	400200a0 	.word	0x400200a0
 8000a38:	400200b8 	.word	0x400200b8
 8000a3c:	40020410 	.word	0x40020410
 8000a40:	40020428 	.word	0x40020428
 8000a44:	40020440 	.word	0x40020440
 8000a48:	40020458 	.word	0x40020458
 8000a4c:	40020470 	.word	0x40020470
 8000a50:	40020488 	.word	0x40020488
 8000a54:	400204a0 	.word	0x400204a0
 8000a58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1c8      	bne.n	80009fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	4b84      	ldr	r3, [pc, #528]	; (8000c88 <HAL_DMA_Init+0x424>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000a82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d107      	bne.n	8000ac0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b28      	cmp	r3, #40	; 0x28
 8000ac6:	d903      	bls.n	8000ad0 <HAL_DMA_Init+0x26c>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b2e      	cmp	r3, #46	; 0x2e
 8000ace:	d91f      	bls.n	8000b10 <HAL_DMA_Init+0x2ac>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8000ad6:	d903      	bls.n	8000ae0 <HAL_DMA_Init+0x27c>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b42      	cmp	r3, #66	; 0x42
 8000ade:	d917      	bls.n	8000b10 <HAL_DMA_Init+0x2ac>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b46      	cmp	r3, #70	; 0x46
 8000ae6:	d903      	bls.n	8000af0 <HAL_DMA_Init+0x28c>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b48      	cmp	r3, #72	; 0x48
 8000aee:	d90f      	bls.n	8000b10 <HAL_DMA_Init+0x2ac>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b4e      	cmp	r3, #78	; 0x4e
 8000af6:	d903      	bls.n	8000b00 <HAL_DMA_Init+0x29c>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b52      	cmp	r3, #82	; 0x52
 8000afe:	d907      	bls.n	8000b10 <HAL_DMA_Init+0x2ac>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b73      	cmp	r3, #115	; 0x73
 8000b06:	d905      	bls.n	8000b14 <HAL_DMA_Init+0x2b0>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b77      	cmp	r3, #119	; 0x77
 8000b0e:	d801      	bhi.n	8000b14 <HAL_DMA_Init+0x2b0>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_DMA_Init+0x2b2>
 8000b14:	2300      	movs	r3, #0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b20:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f023 0307 	bic.w	r3, r3, #7
 8000b38:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d117      	bne.n	8000b7c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00e      	beq.n	8000b7c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f001 ff8e 	bl	8002a80 <DMA_CheckFifoParam>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2240      	movs	r2, #64	; 0x40
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e194      	b.n	8000ea6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f001 fec9 	bl	800291c <DMA_CalcBaseAndBitshift>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	223f      	movs	r2, #63	; 0x3f
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	e0ca      	b.n	8000d36 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_DMA_Init+0x428>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d022      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a38      	ldr	r2, [pc, #224]	; (8000c90 <HAL_DMA_Init+0x42c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d01d      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <HAL_DMA_Init+0x430>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d018      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a35      	ldr	r2, [pc, #212]	; (8000c98 <HAL_DMA_Init+0x434>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d013      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a33      	ldr	r2, [pc, #204]	; (8000c9c <HAL_DMA_Init+0x438>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d00e      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a32      	ldr	r2, [pc, #200]	; (8000ca0 <HAL_DMA_Init+0x43c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d009      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a30      	ldr	r2, [pc, #192]	; (8000ca4 <HAL_DMA_Init+0x440>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d004      	beq.n	8000bf0 <HAL_DMA_Init+0x38c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <HAL_DMA_Init+0x444>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d101      	bne.n	8000bf4 <HAL_DMA_Init+0x390>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_DMA_Init+0x392>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8094 	beq.w	8000d24 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <HAL_DMA_Init+0x428>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d021      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <HAL_DMA_Init+0x42c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d01c      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <HAL_DMA_Init+0x430>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d017      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_DMA_Init+0x434>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d012      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <HAL_DMA_Init+0x438>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d00d      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <HAL_DMA_Init+0x43c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d008      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_DMA_Init+0x440>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d003      	beq.n	8000c4a <HAL_DMA_Init+0x3e6>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_DMA_Init+0x444>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2202      	movs	r2, #2
 8000c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_DMA_Init+0x448>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2b40      	cmp	r3, #64	; 0x40
 8000c72:	d01d      	beq.n	8000cb0 <HAL_DMA_Init+0x44c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b80      	cmp	r3, #128	; 0x80
 8000c7a:	d102      	bne.n	8000c82 <HAL_DMA_Init+0x41e>
 8000c7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c80:	e017      	b.n	8000cb2 <HAL_DMA_Init+0x44e>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e015      	b.n	8000cb2 <HAL_DMA_Init+0x44e>
 8000c86:	bf00      	nop
 8000c88:	fe10803f 	.word	0xfe10803f
 8000c8c:	58025408 	.word	0x58025408
 8000c90:	5802541c 	.word	0x5802541c
 8000c94:	58025430 	.word	0x58025430
 8000c98:	58025444 	.word	0x58025444
 8000c9c:	58025458 	.word	0x58025458
 8000ca0:	5802546c 	.word	0x5802546c
 8000ca4:	58025480 	.word	0x58025480
 8000ca8:	58025494 	.word	0x58025494
 8000cac:	fffe000f 	.word	0xfffe000f
 8000cb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68d2      	ldr	r2, [r2, #12]
 8000cb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ce0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b6e      	ldr	r3, [pc, #440]	; (8000eb0 <HAL_DMA_Init+0x64c>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a6e      	ldr	r2, [pc, #440]	; (8000eb4 <HAL_DMA_Init+0x650>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	009a      	lsls	r2, r3, #2
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f001 fe07 	bl	800291c <DMA_CalcBaseAndBitshift>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d16:	f003 031f 	and.w	r3, r3, #31
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	e008      	b.n	8000d36 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2240      	movs	r2, #64	; 0x40
 8000d28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0b7      	b.n	8000ea6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <HAL_DMA_Init+0x654>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d072      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a5d      	ldr	r2, [pc, #372]	; (8000ebc <HAL_DMA_Init+0x658>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d06d      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a5c      	ldr	r2, [pc, #368]	; (8000ec0 <HAL_DMA_Init+0x65c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d068      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a5a      	ldr	r2, [pc, #360]	; (8000ec4 <HAL_DMA_Init+0x660>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d063      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <HAL_DMA_Init+0x664>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d05e      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <HAL_DMA_Init+0x668>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d059      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a56      	ldr	r2, [pc, #344]	; (8000ed0 <HAL_DMA_Init+0x66c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d054      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a54      	ldr	r2, [pc, #336]	; (8000ed4 <HAL_DMA_Init+0x670>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04f      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a53      	ldr	r2, [pc, #332]	; (8000ed8 <HAL_DMA_Init+0x674>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d04a      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a51      	ldr	r2, [pc, #324]	; (8000edc <HAL_DMA_Init+0x678>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d045      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <HAL_DMA_Init+0x67c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d040      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_DMA_Init+0x680>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d03b      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_DMA_Init+0x684>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d036      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_DMA_Init+0x688>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d031      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_DMA_Init+0x68c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d02c      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_DMA_Init+0x690>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d027      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_DMA_Init+0x694>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d022      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a45      	ldr	r2, [pc, #276]	; (8000efc <HAL_DMA_Init+0x698>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01d      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a44      	ldr	r2, [pc, #272]	; (8000f00 <HAL_DMA_Init+0x69c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d018      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a42      	ldr	r2, [pc, #264]	; (8000f04 <HAL_DMA_Init+0x6a0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a41      	ldr	r2, [pc, #260]	; (8000f08 <HAL_DMA_Init+0x6a4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00e      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <HAL_DMA_Init+0x6a8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d009      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <HAL_DMA_Init+0x6ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d004      	beq.n	8000e26 <HAL_DMA_Init+0x5c2>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <HAL_DMA_Init+0x6b0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_DMA_Init+0x5c6>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_DMA_Init+0x5c8>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d032      	beq.n	8000e96 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f001 fea1 	bl	8002b78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b80      	cmp	r3, #128	; 0x80
 8000e3c:	d102      	bne.n	8000e44 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d010      	beq.n	8000e84 <HAL_DMA_Init+0x620>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d80c      	bhi.n	8000e84 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f001 ff1e 	bl	8002cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	e008      	b.n	8000e96 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	a7fdabf8 	.word	0xa7fdabf8
 8000eb4:	cccccccd 	.word	0xcccccccd
 8000eb8:	40020010 	.word	0x40020010
 8000ebc:	40020028 	.word	0x40020028
 8000ec0:	40020040 	.word	0x40020040
 8000ec4:	40020058 	.word	0x40020058
 8000ec8:	40020070 	.word	0x40020070
 8000ecc:	40020088 	.word	0x40020088
 8000ed0:	400200a0 	.word	0x400200a0
 8000ed4:	400200b8 	.word	0x400200b8
 8000ed8:	40020410 	.word	0x40020410
 8000edc:	40020428 	.word	0x40020428
 8000ee0:	40020440 	.word	0x40020440
 8000ee4:	40020458 	.word	0x40020458
 8000ee8:	40020470 	.word	0x40020470
 8000eec:	40020488 	.word	0x40020488
 8000ef0:	400204a0 	.word	0x400204a0
 8000ef4:	400204b8 	.word	0x400204b8
 8000ef8:	58025408 	.word	0x58025408
 8000efc:	5802541c 	.word	0x5802541c
 8000f00:	58025430 	.word	0x58025430
 8000f04:	58025444 	.word	0x58025444
 8000f08:	58025458 	.word	0x58025458
 8000f0c:	5802546c 	.word	0x5802546c
 8000f10:	58025480 	.word	0x58025480
 8000f14:	58025494 	.word	0x58025494

08000f18 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e1a8      	b.n	800127c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a82      	ldr	r2, [pc, #520]	; (8001138 <HAL_DMA_DeInit+0x220>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d04a      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a80      	ldr	r2, [pc, #512]	; (800113c <HAL_DMA_DeInit+0x224>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d045      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7f      	ldr	r2, [pc, #508]	; (8001140 <HAL_DMA_DeInit+0x228>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d040      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a7d      	ldr	r2, [pc, #500]	; (8001144 <HAL_DMA_DeInit+0x22c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d03b      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a7c      	ldr	r2, [pc, #496]	; (8001148 <HAL_DMA_DeInit+0x230>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d036      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a7a      	ldr	r2, [pc, #488]	; (800114c <HAL_DMA_DeInit+0x234>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d031      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a79      	ldr	r2, [pc, #484]	; (8001150 <HAL_DMA_DeInit+0x238>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d02c      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a77      	ldr	r2, [pc, #476]	; (8001154 <HAL_DMA_DeInit+0x23c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d027      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a76      	ldr	r2, [pc, #472]	; (8001158 <HAL_DMA_DeInit+0x240>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d022      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a74      	ldr	r2, [pc, #464]	; (800115c <HAL_DMA_DeInit+0x244>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01d      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a73      	ldr	r2, [pc, #460]	; (8001160 <HAL_DMA_DeInit+0x248>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d018      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_DMA_DeInit+0x24c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a70      	ldr	r2, [pc, #448]	; (8001168 <HAL_DMA_DeInit+0x250>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00e      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a6e      	ldr	r2, [pc, #440]	; (800116c <HAL_DMA_DeInit+0x254>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d009      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6d      	ldr	r2, [pc, #436]	; (8001170 <HAL_DMA_DeInit+0x258>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d004      	beq.n	8000fca <HAL_DMA_DeInit+0xb2>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a6b      	ldr	r2, [pc, #428]	; (8001174 <HAL_DMA_DeInit+0x25c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d108      	bne.n	8000fdc <HAL_DMA_DeInit+0xc4>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <HAL_DMA_DeInit+0xd4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_DMA_DeInit+0x220>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d04a      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_DMA_DeInit+0x224>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d045      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_DMA_DeInit+0x228>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d040      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_DMA_DeInit+0x22c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d03b      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_DMA_DeInit+0x230>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d036      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_DMA_DeInit+0x234>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d031      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_DMA_DeInit+0x238>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02c      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a47      	ldr	r2, [pc, #284]	; (8001154 <HAL_DMA_DeInit+0x23c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d027      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a45      	ldr	r2, [pc, #276]	; (8001158 <HAL_DMA_DeInit+0x240>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d022      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a44      	ldr	r2, [pc, #272]	; (800115c <HAL_DMA_DeInit+0x244>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d01d      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a42      	ldr	r2, [pc, #264]	; (8001160 <HAL_DMA_DeInit+0x248>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d018      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a41      	ldr	r2, [pc, #260]	; (8001164 <HAL_DMA_DeInit+0x24c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <HAL_DMA_DeInit+0x250>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00e      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a3e      	ldr	r2, [pc, #248]	; (800116c <HAL_DMA_DeInit+0x254>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d009      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <HAL_DMA_DeInit+0x258>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d004      	beq.n	800108c <HAL_DMA_DeInit+0x174>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a3b      	ldr	r2, [pc, #236]	; (8001174 <HAL_DMA_DeInit+0x25c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d101      	bne.n	8001090 <HAL_DMA_DeInit+0x178>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_DMA_DeInit+0x17a>
 8001090:	2300      	movs	r3, #0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d025      	beq.n	80010e2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2221      	movs	r2, #33	; 0x21
 80010c4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f001 fc28 	bl	800291c <DMA_CalcBaseAndBitshift>
 80010cc:	4603      	mov	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	223f      	movs	r2, #63	; 0x3f
 80010da:	409a      	lsls	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	e081      	b.n	80011e6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a24      	ldr	r2, [pc, #144]	; (8001178 <HAL_DMA_DeInit+0x260>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d022      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <HAL_DMA_DeInit+0x264>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01d      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_DMA_DeInit+0x268>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d018      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <HAL_DMA_DeInit+0x26c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_DMA_DeInit+0x270>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00e      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <HAL_DMA_DeInit+0x274>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d009      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_DMA_DeInit+0x278>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d004      	beq.n	8001132 <HAL_DMA_DeInit+0x21a>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_DMA_DeInit+0x27c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d132      	bne.n	8001198 <HAL_DMA_DeInit+0x280>
 8001132:	2301      	movs	r3, #1
 8001134:	e031      	b.n	800119a <HAL_DMA_DeInit+0x282>
 8001136:	bf00      	nop
 8001138:	40020010 	.word	0x40020010
 800113c:	40020028 	.word	0x40020028
 8001140:	40020040 	.word	0x40020040
 8001144:	40020058 	.word	0x40020058
 8001148:	40020070 	.word	0x40020070
 800114c:	40020088 	.word	0x40020088
 8001150:	400200a0 	.word	0x400200a0
 8001154:	400200b8 	.word	0x400200b8
 8001158:	40020410 	.word	0x40020410
 800115c:	40020428 	.word	0x40020428
 8001160:	40020440 	.word	0x40020440
 8001164:	40020458 	.word	0x40020458
 8001168:	40020470 	.word	0x40020470
 800116c:	40020488 	.word	0x40020488
 8001170:	400204a0 	.word	0x400204a0
 8001174:	400204b8 	.word	0x400204b8
 8001178:	58025408 	.word	0x58025408
 800117c:	5802541c 	.word	0x5802541c
 8001180:	58025430 	.word	0x58025430
 8001184:	58025444 	.word	0x58025444
 8001188:	58025458 	.word	0x58025458
 800118c:	5802546c 	.word	0x5802546c
 8001190:	58025480 	.word	0x58025480
 8001194:	58025494 	.word	0x58025494
 8001198:	2300      	movs	r3, #0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d021      	beq.n	80011e2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 fba8 	bl	800291c <DMA_CalcBaseAndBitshift>
 80011cc:	4603      	mov	r3, r0
 80011ce:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	2201      	movs	r2, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	e001      	b.n	80011e6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e04a      	b.n	800127c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f001 fcc6 	bl	8002b78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001204:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00f      	beq.n	800122e <HAL_DMA_DeInit+0x316>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b08      	cmp	r3, #8
 8001214:	d80b      	bhi.n	800122e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fd48 	bl	8002cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800122c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e226      	b.n	80016ee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_DMA_Start_IT+0x2a>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e21f      	b.n	80016ee <HAL_DMA_Start_IT+0x46a>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	f040 820a 	bne.w	80016d8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_DMA_Start_IT+0x1f4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d04a      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a66      	ldr	r2, [pc, #408]	; (800147c <HAL_DMA_Start_IT+0x1f8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d045      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_DMA_Start_IT+0x1fc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d040      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a63      	ldr	r2, [pc, #396]	; (8001484 <HAL_DMA_Start_IT+0x200>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d03b      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a62      	ldr	r2, [pc, #392]	; (8001488 <HAL_DMA_Start_IT+0x204>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d036      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a60      	ldr	r2, [pc, #384]	; (800148c <HAL_DMA_Start_IT+0x208>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d031      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a5f      	ldr	r2, [pc, #380]	; (8001490 <HAL_DMA_Start_IT+0x20c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d02c      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <HAL_DMA_Start_IT+0x210>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d027      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_DMA_Start_IT+0x214>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d022      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a5a      	ldr	r2, [pc, #360]	; (800149c <HAL_DMA_Start_IT+0x218>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01d      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a59      	ldr	r2, [pc, #356]	; (80014a0 <HAL_DMA_Start_IT+0x21c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d018      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <HAL_DMA_Start_IT+0x220>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a56      	ldr	r2, [pc, #344]	; (80014a8 <HAL_DMA_Start_IT+0x224>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00e      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a54      	ldr	r2, [pc, #336]	; (80014ac <HAL_DMA_Start_IT+0x228>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d009      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a53      	ldr	r2, [pc, #332]	; (80014b0 <HAL_DMA_Start_IT+0x22c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d004      	beq.n	8001372 <HAL_DMA_Start_IT+0xee>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_DMA_Start_IT+0x230>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d108      	bne.n	8001384 <HAL_DMA_Start_IT+0x100>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_DMA_Start_IT+0x110>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f001 f912 	bl	80025c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_DMA_Start_IT+0x1f4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d04a      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a33      	ldr	r2, [pc, #204]	; (800147c <HAL_DMA_Start_IT+0x1f8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d045      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_DMA_Start_IT+0x1fc>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d040      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a30      	ldr	r2, [pc, #192]	; (8001484 <HAL_DMA_Start_IT+0x200>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d03b      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <HAL_DMA_Start_IT+0x204>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d036      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <HAL_DMA_Start_IT+0x208>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d031      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <HAL_DMA_Start_IT+0x20c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02c      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_DMA_Start_IT+0x210>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d027      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <HAL_DMA_Start_IT+0x214>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d022      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a27      	ldr	r2, [pc, #156]	; (800149c <HAL_DMA_Start_IT+0x218>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d01d      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <HAL_DMA_Start_IT+0x21c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d018      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <HAL_DMA_Start_IT+0x220>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_DMA_Start_IT+0x224>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00e      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <HAL_DMA_Start_IT+0x228>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d009      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <HAL_DMA_Start_IT+0x22c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_DMA_Start_IT+0x1bc>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_DMA_Start_IT+0x230>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_DMA_Start_IT+0x1c0>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_DMA_Start_IT+0x1c2>
 8001444:	2300      	movs	r3, #0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d036      	beq.n	80014b8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 021e 	bic.w	r2, r3, #30
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0216 	orr.w	r2, r2, #22
 800145c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d03e      	beq.n	80014e4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0208 	orr.w	r2, r2, #8
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e035      	b.n	80014e4 <HAL_DMA_Start_IT+0x260>
 8001478:	40020010 	.word	0x40020010
 800147c:	40020028 	.word	0x40020028
 8001480:	40020040 	.word	0x40020040
 8001484:	40020058 	.word	0x40020058
 8001488:	40020070 	.word	0x40020070
 800148c:	40020088 	.word	0x40020088
 8001490:	400200a0 	.word	0x400200a0
 8001494:	400200b8 	.word	0x400200b8
 8001498:	40020410 	.word	0x40020410
 800149c:	40020428 	.word	0x40020428
 80014a0:	40020440 	.word	0x40020440
 80014a4:	40020458 	.word	0x40020458
 80014a8:	40020470 	.word	0x40020470
 80014ac:	40020488 	.word	0x40020488
 80014b0:	400204a0 	.word	0x400204a0
 80014b4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 020e 	bic.w	r2, r3, #14
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 020a 	orr.w	r2, r2, #10
 80014ca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0204 	orr.w	r2, r2, #4
 80014e2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a83      	ldr	r2, [pc, #524]	; (80016f8 <HAL_DMA_Start_IT+0x474>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d072      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a82      	ldr	r2, [pc, #520]	; (80016fc <HAL_DMA_Start_IT+0x478>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d06d      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a80      	ldr	r2, [pc, #512]	; (8001700 <HAL_DMA_Start_IT+0x47c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d068      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a7f      	ldr	r2, [pc, #508]	; (8001704 <HAL_DMA_Start_IT+0x480>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d063      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a7d      	ldr	r2, [pc, #500]	; (8001708 <HAL_DMA_Start_IT+0x484>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d05e      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7c      	ldr	r2, [pc, #496]	; (800170c <HAL_DMA_Start_IT+0x488>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d059      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a7a      	ldr	r2, [pc, #488]	; (8001710 <HAL_DMA_Start_IT+0x48c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d054      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a79      	ldr	r2, [pc, #484]	; (8001714 <HAL_DMA_Start_IT+0x490>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d04f      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_DMA_Start_IT+0x494>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d04a      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a76      	ldr	r2, [pc, #472]	; (800171c <HAL_DMA_Start_IT+0x498>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d045      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a74      	ldr	r2, [pc, #464]	; (8001720 <HAL_DMA_Start_IT+0x49c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d040      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a73      	ldr	r2, [pc, #460]	; (8001724 <HAL_DMA_Start_IT+0x4a0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d03b      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a71      	ldr	r2, [pc, #452]	; (8001728 <HAL_DMA_Start_IT+0x4a4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d036      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a70      	ldr	r2, [pc, #448]	; (800172c <HAL_DMA_Start_IT+0x4a8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d031      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6e      	ldr	r2, [pc, #440]	; (8001730 <HAL_DMA_Start_IT+0x4ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d02c      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6d      	ldr	r2, [pc, #436]	; (8001734 <HAL_DMA_Start_IT+0x4b0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d027      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6b      	ldr	r2, [pc, #428]	; (8001738 <HAL_DMA_Start_IT+0x4b4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d022      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6a      	ldr	r2, [pc, #424]	; (800173c <HAL_DMA_Start_IT+0x4b8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d01d      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a68      	ldr	r2, [pc, #416]	; (8001740 <HAL_DMA_Start_IT+0x4bc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d018      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a67      	ldr	r2, [pc, #412]	; (8001744 <HAL_DMA_Start_IT+0x4c0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a65      	ldr	r2, [pc, #404]	; (8001748 <HAL_DMA_Start_IT+0x4c4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00e      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a64      	ldr	r2, [pc, #400]	; (800174c <HAL_DMA_Start_IT+0x4c8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d009      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a62      	ldr	r2, [pc, #392]	; (8001750 <HAL_DMA_Start_IT+0x4cc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_DMA_Start_IT+0x350>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a61      	ldr	r2, [pc, #388]	; (8001754 <HAL_DMA_Start_IT+0x4d0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_DMA_Start_IT+0x354>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_DMA_Start_IT+0x356>
 80015d8:	2300      	movs	r3, #0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01a      	beq.n	8001614 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015fa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800160e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001612:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a37      	ldr	r2, [pc, #220]	; (80016f8 <HAL_DMA_Start_IT+0x474>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d04a      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a36      	ldr	r2, [pc, #216]	; (80016fc <HAL_DMA_Start_IT+0x478>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d045      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a34      	ldr	r2, [pc, #208]	; (8001700 <HAL_DMA_Start_IT+0x47c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d040      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a33      	ldr	r2, [pc, #204]	; (8001704 <HAL_DMA_Start_IT+0x480>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d03b      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a31      	ldr	r2, [pc, #196]	; (8001708 <HAL_DMA_Start_IT+0x484>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d036      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_DMA_Start_IT+0x488>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d031      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <HAL_DMA_Start_IT+0x48c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d02c      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <HAL_DMA_Start_IT+0x490>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d027      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <HAL_DMA_Start_IT+0x494>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d022      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2a      	ldr	r2, [pc, #168]	; (800171c <HAL_DMA_Start_IT+0x498>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d01d      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_DMA_Start_IT+0x49c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d018      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <HAL_DMA_Start_IT+0x4a0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d013      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <HAL_DMA_Start_IT+0x4a4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00e      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_DMA_Start_IT+0x4a8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d009      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a22      	ldr	r2, [pc, #136]	; (8001730 <HAL_DMA_Start_IT+0x4ac>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d004      	beq.n	80016b4 <HAL_DMA_Start_IT+0x430>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <HAL_DMA_Start_IT+0x4b0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d108      	bne.n	80016c6 <HAL_DMA_Start_IT+0x442>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e012      	b.n	80016ec <HAL_DMA_Start_IT+0x468>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e009      	b.n	80016ec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020010 	.word	0x40020010
 80016fc:	40020028 	.word	0x40020028
 8001700:	40020040 	.word	0x40020040
 8001704:	40020058 	.word	0x40020058
 8001708:	40020070 	.word	0x40020070
 800170c:	40020088 	.word	0x40020088
 8001710:	400200a0 	.word	0x400200a0
 8001714:	400200b8 	.word	0x400200b8
 8001718:	40020410 	.word	0x40020410
 800171c:	40020428 	.word	0x40020428
 8001720:	40020440 	.word	0x40020440
 8001724:	40020458 	.word	0x40020458
 8001728:	40020470 	.word	0x40020470
 800172c:	40020488 	.word	0x40020488
 8001730:	400204a0 	.word	0x400204a0
 8001734:	400204b8 	.word	0x400204b8
 8001738:	58025408 	.word	0x58025408
 800173c:	5802541c 	.word	0x5802541c
 8001740:	58025430 	.word	0x58025430
 8001744:	58025444 	.word	0x58025444
 8001748:	58025458 	.word	0x58025458
 800174c:	5802546c 	.word	0x5802546c
 8001750:	58025480 	.word	0x58025480
 8001754:	58025494 	.word	0x58025494

08001758 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001764:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_DMA_IRQHandler+0x1ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a67      	ldr	r2, [pc, #412]	; (8001908 <HAL_DMA_IRQHandler+0x1b0>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a5f      	ldr	r2, [pc, #380]	; (800190c <HAL_DMA_IRQHandler+0x1b4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04a      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a5d      	ldr	r2, [pc, #372]	; (8001910 <HAL_DMA_IRQHandler+0x1b8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d045      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5c      	ldr	r2, [pc, #368]	; (8001914 <HAL_DMA_IRQHandler+0x1bc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d040      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_DMA_IRQHandler+0x1c0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d03b      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a59      	ldr	r2, [pc, #356]	; (800191c <HAL_DMA_IRQHandler+0x1c4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d036      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_DMA_IRQHandler+0x1c8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_DMA_IRQHandler+0x1cc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d02c      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_DMA_IRQHandler+0x1d0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d027      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a53      	ldr	r2, [pc, #332]	; (800192c <HAL_DMA_IRQHandler+0x1d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a51      	ldr	r2, [pc, #324]	; (8001930 <HAL_DMA_IRQHandler+0x1d8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_DMA_IRQHandler+0x1dc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d018      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_DMA_IRQHandler+0x1e0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a4d      	ldr	r2, [pc, #308]	; (800193c <HAL_DMA_IRQHandler+0x1e4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00e      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_DMA_IRQHandler+0x1e8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <HAL_DMA_IRQHandler+0x1ec>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_DMA_IRQHandler+0xd2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a48      	ldr	r2, [pc, #288]	; (8001948 <HAL_DMA_IRQHandler+0x1f0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_DMA_IRQHandler+0xd6>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_DMA_IRQHandler+0xd8>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 842b 	beq.w	800208c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2208      	movs	r2, #8
 8001840:	409a      	lsls	r2, r3
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80a2 	beq.w	8001990 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_DMA_IRQHandler+0x1b4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d04a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_DMA_IRQHandler+0x1b8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d045      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_DMA_IRQHandler+0x1bc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d040      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <HAL_DMA_IRQHandler+0x1c0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d03b      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_DMA_IRQHandler+0x1c4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d036      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_DMA_IRQHandler+0x1c8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d031      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_DMA_IRQHandler+0x1cc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d02c      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_DMA_IRQHandler+0x1d0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d027      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_DMA_IRQHandler+0x1d4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d022      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_DMA_IRQHandler+0x1d8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d01d      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <HAL_DMA_IRQHandler+0x1dc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d018      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_DMA_IRQHandler+0x1e0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d013      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_DMA_IRQHandler+0x1e4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00e      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <HAL_DMA_IRQHandler+0x1e8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d009      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_DMA_IRQHandler+0x1ec>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d004      	beq.n	80018ec <HAL_DMA_IRQHandler+0x194>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a18      	ldr	r2, [pc, #96]	; (8001948 <HAL_DMA_IRQHandler+0x1f0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d12f      	bne.n	800194c <HAL_DMA_IRQHandler+0x1f4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	e02e      	b.n	8001960 <HAL_DMA_IRQHandler+0x208>
 8001902:	bf00      	nop
 8001904:	24000410 	.word	0x24000410
 8001908:	1b4e81b5 	.word	0x1b4e81b5
 800190c:	40020010 	.word	0x40020010
 8001910:	40020028 	.word	0x40020028
 8001914:	40020040 	.word	0x40020040
 8001918:	40020058 	.word	0x40020058
 800191c:	40020070 	.word	0x40020070
 8001920:	40020088 	.word	0x40020088
 8001924:	400200a0 	.word	0x400200a0
 8001928:	400200b8 	.word	0x400200b8
 800192c:	40020410 	.word	0x40020410
 8001930:	40020428 	.word	0x40020428
 8001934:	40020440 	.word	0x40020440
 8001938:	40020458 	.word	0x40020458
 800193c:	40020470 	.word	0x40020470
 8001940:	40020488 	.word	0x40020488
 8001944:	400204a0 	.word	0x400204a0
 8001948:	400204b8 	.word	0x400204b8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d015      	beq.n	8001990 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2208      	movs	r2, #8
 800197e:	409a      	lsls	r2, r3
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d06e      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a69      	ldr	r2, [pc, #420]	; (8001b50 <HAL_DMA_IRQHandler+0x3f8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04a      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a67      	ldr	r2, [pc, #412]	; (8001b54 <HAL_DMA_IRQHandler+0x3fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d045      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a66      	ldr	r2, [pc, #408]	; (8001b58 <HAL_DMA_IRQHandler+0x400>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d040      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a64      	ldr	r2, [pc, #400]	; (8001b5c <HAL_DMA_IRQHandler+0x404>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d03b      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a63      	ldr	r2, [pc, #396]	; (8001b60 <HAL_DMA_IRQHandler+0x408>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d036      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a61      	ldr	r2, [pc, #388]	; (8001b64 <HAL_DMA_IRQHandler+0x40c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d031      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a60      	ldr	r2, [pc, #384]	; (8001b68 <HAL_DMA_IRQHandler+0x410>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d02c      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5e      	ldr	r2, [pc, #376]	; (8001b6c <HAL_DMA_IRQHandler+0x414>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d027      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a5d      	ldr	r2, [pc, #372]	; (8001b70 <HAL_DMA_IRQHandler+0x418>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_DMA_IRQHandler+0x41c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01d      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	; (8001b78 <HAL_DMA_IRQHandler+0x420>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d018      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_DMA_IRQHandler+0x424>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a57      	ldr	r2, [pc, #348]	; (8001b80 <HAL_DMA_IRQHandler+0x428>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00e      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <HAL_DMA_IRQHandler+0x42c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_DMA_IRQHandler+0x430>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d004      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2ee>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_DMA_IRQHandler+0x434>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10a      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x304>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e003      	b.n	8001a64 <HAL_DMA_IRQHandler+0x30c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2201      	movs	r2, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f043 0202 	orr.w	r2, r3, #2
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 808f 	beq.w	8001bb8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_DMA_IRQHandler+0x3f8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_DMA_IRQHandler+0x3fc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_DMA_IRQHandler+0x400>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_DMA_IRQHandler+0x404>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_DMA_IRQHandler+0x408>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_DMA_IRQHandler+0x40c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_DMA_IRQHandler+0x410>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_DMA_IRQHandler+0x414>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <HAL_DMA_IRQHandler+0x418>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_DMA_IRQHandler+0x41c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_DMA_IRQHandler+0x420>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_DMA_IRQHandler+0x424>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_DMA_IRQHandler+0x428>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_DMA_IRQHandler+0x42c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_DMA_IRQHandler+0x430>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x3e2>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <HAL_DMA_IRQHandler+0x434>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12a      	bne.n	8001b90 <HAL_DMA_IRQHandler+0x438>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	e023      	b.n	8001b98 <HAL_DMA_IRQHandler+0x440>
 8001b50:	40020010 	.word	0x40020010
 8001b54:	40020028 	.word	0x40020028
 8001b58:	40020040 	.word	0x40020040
 8001b5c:	40020058 	.word	0x40020058
 8001b60:	40020070 	.word	0x40020070
 8001b64:	40020088 	.word	0x40020088
 8001b68:	400200a0 	.word	0x400200a0
 8001b6c:	400200b8 	.word	0x400200b8
 8001b70:	40020410 	.word	0x40020410
 8001b74:	40020428 	.word	0x40020428
 8001b78:	40020440 	.word	0x40020440
 8001b7c:	40020458 	.word	0x40020458
 8001b80:	40020470 	.word	0x40020470
 8001b84:	40020488 	.word	0x40020488
 8001b88:	400204a0 	.word	0x400204a0
 8001b8c:	400204b8 	.word	0x400204b8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a6 	beq.w	8001d1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a85      	ldr	r2, [pc, #532]	; (8001de8 <HAL_DMA_IRQHandler+0x690>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04a      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a83      	ldr	r2, [pc, #524]	; (8001dec <HAL_DMA_IRQHandler+0x694>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d045      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a82      	ldr	r2, [pc, #520]	; (8001df0 <HAL_DMA_IRQHandler+0x698>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d040      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a80      	ldr	r2, [pc, #512]	; (8001df4 <HAL_DMA_IRQHandler+0x69c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d03b      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7f      	ldr	r2, [pc, #508]	; (8001df8 <HAL_DMA_IRQHandler+0x6a0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d036      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7d      	ldr	r2, [pc, #500]	; (8001dfc <HAL_DMA_IRQHandler+0x6a4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d031      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7c      	ldr	r2, [pc, #496]	; (8001e00 <HAL_DMA_IRQHandler+0x6a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d02c      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_DMA_IRQHandler+0x6ac>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d027      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a79      	ldr	r2, [pc, #484]	; (8001e08 <HAL_DMA_IRQHandler+0x6b0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <HAL_DMA_IRQHandler+0x6b4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01d      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a76      	ldr	r2, [pc, #472]	; (8001e10 <HAL_DMA_IRQHandler+0x6b8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a74      	ldr	r2, [pc, #464]	; (8001e14 <HAL_DMA_IRQHandler+0x6bc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a73      	ldr	r2, [pc, #460]	; (8001e18 <HAL_DMA_IRQHandler+0x6c0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a71      	ldr	r2, [pc, #452]	; (8001e1c <HAL_DMA_IRQHandler+0x6c4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a70      	ldr	r2, [pc, #448]	; (8001e20 <HAL_DMA_IRQHandler+0x6c8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x516>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_DMA_IRQHandler+0x6cc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10a      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x52c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e009      	b.n	8001c98 <HAL_DMA_IRQHandler+0x540>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03e      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d018      	beq.n	8001cec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d024      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
 8001cd8:	e01f      	b.n	8001d1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01b      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
 8001cea:	e016      	b.n	8001d1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2220      	movs	r2, #32
 8001d24:	409a      	lsls	r2, r3
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8110 	beq.w	8001f50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <HAL_DMA_IRQHandler+0x690>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <HAL_DMA_IRQHandler+0x694>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d045      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_DMA_IRQHandler+0x698>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <HAL_DMA_IRQHandler+0x69c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d03b      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <HAL_DMA_IRQHandler+0x6a0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d036      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_DMA_IRQHandler+0x6a4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d031      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <HAL_DMA_IRQHandler+0x6a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02c      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_DMA_IRQHandler+0x6ac>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d027      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_DMA_IRQHandler+0x6b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_DMA_IRQHandler+0x6b4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_DMA_IRQHandler+0x6b8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_DMA_IRQHandler+0x6bc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_DMA_IRQHandler+0x6c0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_DMA_IRQHandler+0x6c4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_DMA_IRQHandler+0x6c8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x678>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_DMA_IRQHandler+0x6cc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d12b      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x6d0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e02a      	b.n	8001e3c <HAL_DMA_IRQHandler+0x6e4>
 8001de6:	bf00      	nop
 8001de8:	40020010 	.word	0x40020010
 8001dec:	40020028 	.word	0x40020028
 8001df0:	40020040 	.word	0x40020040
 8001df4:	40020058 	.word	0x40020058
 8001df8:	40020070 	.word	0x40020070
 8001dfc:	40020088 	.word	0x40020088
 8001e00:	400200a0 	.word	0x400200a0
 8001e04:	400200b8 	.word	0x400200b8
 8001e08:	40020410 	.word	0x40020410
 8001e0c:	40020428 	.word	0x40020428
 8001e10:	40020440 	.word	0x40020440
 8001e14:	40020458 	.word	0x40020458
 8001e18:	40020470 	.word	0x40020470
 8001e1c:	40020488 	.word	0x40020488
 8001e20:	400204a0 	.word	0x400204a0
 8001e24:	400204b8 	.word	0x400204b8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8087 	beq.w	8001f50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d139      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0216 	bic.w	r2, r2, #22
 8001e6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_DMA_IRQHandler+0x736>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0208 	bic.w	r2, r2, #8
 8001e9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 834a 	beq.w	800255c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
          }
          return;
 8001ed0:	e344      	b.n	800255c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d018      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02c      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
 8001efe:	e027      	b.n	8001f50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	4798      	blx	r3
 8001f10:	e01e      	b.n	8001f50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10f      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0210 	bic.w	r2, r2, #16
 8001f2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8306 	beq.w	8002566 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8088 	beq.w	8002078 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_DMA_IRQHandler+0xa08>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a79      	ldr	r2, [pc, #484]	; (8002164 <HAL_DMA_IRQHandler+0xa0c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a77      	ldr	r2, [pc, #476]	; (8002168 <HAL_DMA_IRQHandler+0xa10>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a76      	ldr	r2, [pc, #472]	; (800216c <HAL_DMA_IRQHandler+0xa14>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a74      	ldr	r2, [pc, #464]	; (8002170 <HAL_DMA_IRQHandler+0xa18>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a73      	ldr	r2, [pc, #460]	; (8002174 <HAL_DMA_IRQHandler+0xa1c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a71      	ldr	r2, [pc, #452]	; (8002178 <HAL_DMA_IRQHandler+0xa20>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a70      	ldr	r2, [pc, #448]	; (800217c <HAL_DMA_IRQHandler+0xa24>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_DMA_IRQHandler+0xa28>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6d      	ldr	r2, [pc, #436]	; (8002184 <HAL_DMA_IRQHandler+0xa2c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6b      	ldr	r2, [pc, #428]	; (8002188 <HAL_DMA_IRQHandler+0xa30>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_DMA_IRQHandler+0xa34>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a68      	ldr	r2, [pc, #416]	; (8002190 <HAL_DMA_IRQHandler+0xa38>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a67      	ldr	r2, [pc, #412]	; (8002194 <HAL_DMA_IRQHandler+0xa3c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_DMA_IRQHandler+0xa40>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_IRQHandler+0x8b8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a64      	ldr	r2, [pc, #400]	; (800219c <HAL_DMA_IRQHandler+0xa44>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <HAL_DMA_IRQHandler+0x8ca>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e007      	b.n	8002032 <HAL_DMA_IRQHandler+0x8da>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	429a      	cmp	r2, r3
 800203c:	d307      	bcc.n	800204e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f2      	bne.n	8002032 <HAL_DMA_IRQHandler+0x8da>
 800204c:	e000      	b.n	8002050 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800204e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2203      	movs	r2, #3
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002066:	e003      	b.n	8002070 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8272 	beq.w	8002566 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e26c      	b.n	8002566 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_DMA_IRQHandler+0xa48>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d022      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_DMA_IRQHandler+0xa4c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d01d      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a40      	ldr	r2, [pc, #256]	; (80021a8 <HAL_DMA_IRQHandler+0xa50>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <HAL_DMA_IRQHandler+0xa54>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <HAL_DMA_IRQHandler+0xa58>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3c      	ldr	r2, [pc, #240]	; (80021b4 <HAL_DMA_IRQHandler+0xa5c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_DMA_IRQHandler+0xa60>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_IRQHandler+0x984>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a39      	ldr	r2, [pc, #228]	; (80021bc <HAL_DMA_IRQHandler+0xa64>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x988>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_DMA_IRQHandler+0x98a>
 80020e0:	2300      	movs	r3, #0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 823f 	beq.w	8002566 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2204      	movs	r2, #4
 80020fa:	409a      	lsls	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80cd 	beq.w	80022a0 <HAL_DMA_IRQHandler+0xb48>
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80c7 	beq.w	80022a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2204      	movs	r2, #4
 800211c:	409a      	lsls	r2, r3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d049      	beq.n	80021c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8210 	beq.w	8002560 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002148:	e20a      	b.n	8002560 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8206 	beq.w	8002560 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800215c:	e200      	b.n	8002560 <HAL_DMA_IRQHandler+0xe08>
 800215e:	bf00      	nop
 8002160:	40020010 	.word	0x40020010
 8002164:	40020028 	.word	0x40020028
 8002168:	40020040 	.word	0x40020040
 800216c:	40020058 	.word	0x40020058
 8002170:	40020070 	.word	0x40020070
 8002174:	40020088 	.word	0x40020088
 8002178:	400200a0 	.word	0x400200a0
 800217c:	400200b8 	.word	0x400200b8
 8002180:	40020410 	.word	0x40020410
 8002184:	40020428 	.word	0x40020428
 8002188:	40020440 	.word	0x40020440
 800218c:	40020458 	.word	0x40020458
 8002190:	40020470 	.word	0x40020470
 8002194:	40020488 	.word	0x40020488
 8002198:	400204a0 	.word	0x400204a0
 800219c:	400204b8 	.word	0x400204b8
 80021a0:	58025408 	.word	0x58025408
 80021a4:	5802541c 	.word	0x5802541c
 80021a8:	58025430 	.word	0x58025430
 80021ac:	58025444 	.word	0x58025444
 80021b0:	58025458 	.word	0x58025458
 80021b4:	5802546c 	.word	0x5802546c
 80021b8:	58025480 	.word	0x58025480
 80021bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d160      	bne.n	800228c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a8c      	ldr	r2, [pc, #560]	; (8002400 <HAL_DMA_IRQHandler+0xca8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d04a      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a8a      	ldr	r2, [pc, #552]	; (8002404 <HAL_DMA_IRQHandler+0xcac>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d045      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a89      	ldr	r2, [pc, #548]	; (8002408 <HAL_DMA_IRQHandler+0xcb0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d040      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a87      	ldr	r2, [pc, #540]	; (800240c <HAL_DMA_IRQHandler+0xcb4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d03b      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a86      	ldr	r2, [pc, #536]	; (8002410 <HAL_DMA_IRQHandler+0xcb8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d036      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a84      	ldr	r2, [pc, #528]	; (8002414 <HAL_DMA_IRQHandler+0xcbc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d031      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a83      	ldr	r2, [pc, #524]	; (8002418 <HAL_DMA_IRQHandler+0xcc0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d02c      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a81      	ldr	r2, [pc, #516]	; (800241c <HAL_DMA_IRQHandler+0xcc4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d027      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a80      	ldr	r2, [pc, #512]	; (8002420 <HAL_DMA_IRQHandler+0xcc8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7e      	ldr	r2, [pc, #504]	; (8002424 <HAL_DMA_IRQHandler+0xccc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01d      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7d      	ldr	r2, [pc, #500]	; (8002428 <HAL_DMA_IRQHandler+0xcd0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a7b      	ldr	r2, [pc, #492]	; (800242c <HAL_DMA_IRQHandler+0xcd4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7a      	ldr	r2, [pc, #488]	; (8002430 <HAL_DMA_IRQHandler+0xcd8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a78      	ldr	r2, [pc, #480]	; (8002434 <HAL_DMA_IRQHandler+0xcdc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a77      	ldr	r2, [pc, #476]	; (8002438 <HAL_DMA_IRQHandler+0xce0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_DMA_IRQHandler+0xb12>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_DMA_IRQHandler+0xce4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <HAL_DMA_IRQHandler+0xb24>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0208 	bic.w	r2, r2, #8
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e007      	b.n	800228c <HAL_DMA_IRQHandler+0xb34>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0204 	bic.w	r2, r2, #4
 800228a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8165 	beq.w	8002560 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800229e:	e15f      	b.n	8002560 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2202      	movs	r2, #2
 80022aa:	409a      	lsls	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80c5 	beq.w	8002440 <HAL_DMA_IRQHandler+0xce8>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80bf 	beq.w	8002440 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2202      	movs	r2, #2
 80022cc:	409a      	lsls	r2, r3
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d018      	beq.n	800230e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 813a 	beq.w	8002564 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022f8:	e134      	b.n	8002564 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8130 	beq.w	8002564 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800230c:	e12a      	b.n	8002564 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d168      	bne.n	80023ea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a38      	ldr	r2, [pc, #224]	; (8002400 <HAL_DMA_IRQHandler+0xca8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_DMA_IRQHandler+0xcac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d045      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_DMA_IRQHandler+0xcb0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d040      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_DMA_IRQHandler+0xcb4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d03b      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_DMA_IRQHandler+0xcb8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d036      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_DMA_IRQHandler+0xcbc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_DMA_IRQHandler+0xcc0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02c      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2e      	ldr	r2, [pc, #184]	; (800241c <HAL_DMA_IRQHandler+0xcc4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d027      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <HAL_DMA_IRQHandler+0xcc8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <HAL_DMA_IRQHandler+0xccc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01d      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <HAL_DMA_IRQHandler+0xcd0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d018      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_DMA_IRQHandler+0xcd4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_DMA_IRQHandler+0xcd8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a25      	ldr	r2, [pc, #148]	; (8002434 <HAL_DMA_IRQHandler+0xcdc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_DMA_IRQHandler+0xce0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xc60>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_DMA_IRQHandler+0xce4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d108      	bne.n	80023ca <HAL_DMA_IRQHandler+0xc72>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0214 	bic.w	r2, r2, #20
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e007      	b.n	80023da <HAL_DMA_IRQHandler+0xc82>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 020a 	bic.w	r2, r2, #10
 80023d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80b8 	beq.w	8002564 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023fc:	e0b2      	b.n	8002564 <HAL_DMA_IRQHandler+0xe0c>
 80023fe:	bf00      	nop
 8002400:	40020010 	.word	0x40020010
 8002404:	40020028 	.word	0x40020028
 8002408:	40020040 	.word	0x40020040
 800240c:	40020058 	.word	0x40020058
 8002410:	40020070 	.word	0x40020070
 8002414:	40020088 	.word	0x40020088
 8002418:	400200a0 	.word	0x400200a0
 800241c:	400200b8 	.word	0x400200b8
 8002420:	40020410 	.word	0x40020410
 8002424:	40020428 	.word	0x40020428
 8002428:	40020440 	.word	0x40020440
 800242c:	40020458 	.word	0x40020458
 8002430:	40020470 	.word	0x40020470
 8002434:	40020488 	.word	0x40020488
 8002438:	400204a0 	.word	0x400204a0
 800243c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2208      	movs	r2, #8
 800244a:	409a      	lsls	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8088 	beq.w	8002566 <HAL_DMA_IRQHandler+0xe0e>
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8082 	beq.w	8002566 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a41      	ldr	r2, [pc, #260]	; (800256c <HAL_DMA_IRQHandler+0xe14>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04a      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3f      	ldr	r2, [pc, #252]	; (8002570 <HAL_DMA_IRQHandler+0xe18>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d045      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <HAL_DMA_IRQHandler+0xe1c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_DMA_IRQHandler+0xe20>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d03b      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_DMA_IRQHandler+0xe24>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d036      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a39      	ldr	r2, [pc, #228]	; (8002580 <HAL_DMA_IRQHandler+0xe28>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a38      	ldr	r2, [pc, #224]	; (8002584 <HAL_DMA_IRQHandler+0xe2c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02c      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a36      	ldr	r2, [pc, #216]	; (8002588 <HAL_DMA_IRQHandler+0xe30>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a35      	ldr	r2, [pc, #212]	; (800258c <HAL_DMA_IRQHandler+0xe34>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a33      	ldr	r2, [pc, #204]	; (8002590 <HAL_DMA_IRQHandler+0xe38>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a32      	ldr	r2, [pc, #200]	; (8002594 <HAL_DMA_IRQHandler+0xe3c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a30      	ldr	r2, [pc, #192]	; (8002598 <HAL_DMA_IRQHandler+0xe40>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2f      	ldr	r2, [pc, #188]	; (800259c <HAL_DMA_IRQHandler+0xe44>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2d      	ldr	r2, [pc, #180]	; (80025a0 <HAL_DMA_IRQHandler+0xe48>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <HAL_DMA_IRQHandler+0xe4c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_IRQHandler+0xdaa>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2a      	ldr	r2, [pc, #168]	; (80025a8 <HAL_DMA_IRQHandler+0xe50>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d108      	bne.n	8002514 <HAL_DMA_IRQHandler+0xdbc>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 021c 	bic.w	r2, r2, #28
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e007      	b.n	8002524 <HAL_DMA_IRQHandler+0xdcc>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020e 	bic.w	r2, r2, #14
 8002522:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2201      	movs	r2, #1
 800252e:	409a      	lsls	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
 800255a:	e004      	b.n	8002566 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800255c:	bf00      	nop
 800255e:	e002      	b.n	8002566 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002564:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002566:	3728      	adds	r7, #40	; 0x28
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40020010 	.word	0x40020010
 8002570:	40020028 	.word	0x40020028
 8002574:	40020040 	.word	0x40020040
 8002578:	40020058 	.word	0x40020058
 800257c:	40020070 	.word	0x40020070
 8002580:	40020088 	.word	0x40020088
 8002584:	400200a0 	.word	0x400200a0
 8002588:	400200b8 	.word	0x400200b8
 800258c:	40020410 	.word	0x40020410
 8002590:	40020428 	.word	0x40020428
 8002594:	40020440 	.word	0x40020440
 8002598:	40020458 	.word	0x40020458
 800259c:	40020470 	.word	0x40020470
 80025a0:	40020488 	.word	0x40020488
 80025a4:	400204a0 	.word	0x400204a0
 80025a8:	400204b8 	.word	0x400204b8

080025ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a84      	ldr	r2, [pc, #528]	; (80027f4 <DMA_SetConfig+0x230>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d072      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a82      	ldr	r2, [pc, #520]	; (80027f8 <DMA_SetConfig+0x234>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d06d      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a81      	ldr	r2, [pc, #516]	; (80027fc <DMA_SetConfig+0x238>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d068      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a7f      	ldr	r2, [pc, #508]	; (8002800 <DMA_SetConfig+0x23c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d063      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <DMA_SetConfig+0x240>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d05e      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7c      	ldr	r2, [pc, #496]	; (8002808 <DMA_SetConfig+0x244>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d059      	beq.n	80026ce <DMA_SetConfig+0x10a>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7b      	ldr	r2, [pc, #492]	; (800280c <DMA_SetConfig+0x248>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d054      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a79      	ldr	r2, [pc, #484]	; (8002810 <DMA_SetConfig+0x24c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d04f      	beq.n	80026ce <DMA_SetConfig+0x10a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a78      	ldr	r2, [pc, #480]	; (8002814 <DMA_SetConfig+0x250>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d04a      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a76      	ldr	r2, [pc, #472]	; (8002818 <DMA_SetConfig+0x254>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d045      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <DMA_SetConfig+0x258>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d040      	beq.n	80026ce <DMA_SetConfig+0x10a>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a73      	ldr	r2, [pc, #460]	; (8002820 <DMA_SetConfig+0x25c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d03b      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <DMA_SetConfig+0x260>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d036      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a70      	ldr	r2, [pc, #448]	; (8002828 <DMA_SetConfig+0x264>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d031      	beq.n	80026ce <DMA_SetConfig+0x10a>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6f      	ldr	r2, [pc, #444]	; (800282c <DMA_SetConfig+0x268>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d02c      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6d      	ldr	r2, [pc, #436]	; (8002830 <DMA_SetConfig+0x26c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d027      	beq.n	80026ce <DMA_SetConfig+0x10a>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6c      	ldr	r2, [pc, #432]	; (8002834 <DMA_SetConfig+0x270>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d022      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <DMA_SetConfig+0x274>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01d      	beq.n	80026ce <DMA_SetConfig+0x10a>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a69      	ldr	r2, [pc, #420]	; (800283c <DMA_SetConfig+0x278>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d018      	beq.n	80026ce <DMA_SetConfig+0x10a>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	; (8002840 <DMA_SetConfig+0x27c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a66      	ldr	r2, [pc, #408]	; (8002844 <DMA_SetConfig+0x280>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00e      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a64      	ldr	r2, [pc, #400]	; (8002848 <DMA_SetConfig+0x284>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d009      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a63      	ldr	r2, [pc, #396]	; (800284c <DMA_SetConfig+0x288>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <DMA_SetConfig+0x10a>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a61      	ldr	r2, [pc, #388]	; (8002850 <DMA_SetConfig+0x28c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <DMA_SetConfig+0x10e>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <DMA_SetConfig+0x110>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <DMA_SetConfig+0x230>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d04a      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a3d      	ldr	r2, [pc, #244]	; (80027f8 <DMA_SetConfig+0x234>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d045      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3b      	ldr	r2, [pc, #236]	; (80027fc <DMA_SetConfig+0x238>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d040      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <DMA_SetConfig+0x23c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d03b      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a38      	ldr	r2, [pc, #224]	; (8002804 <DMA_SetConfig+0x240>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d036      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <DMA_SetConfig+0x244>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d031      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a35      	ldr	r2, [pc, #212]	; (800280c <DMA_SetConfig+0x248>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02c      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <DMA_SetConfig+0x24c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d027      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a32      	ldr	r2, [pc, #200]	; (8002814 <DMA_SetConfig+0x250>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d022      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a31      	ldr	r2, [pc, #196]	; (8002818 <DMA_SetConfig+0x254>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01d      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2f      	ldr	r2, [pc, #188]	; (800281c <DMA_SetConfig+0x258>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d018      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2e      	ldr	r2, [pc, #184]	; (8002820 <DMA_SetConfig+0x25c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <DMA_SetConfig+0x260>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00e      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <DMA_SetConfig+0x264>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a29      	ldr	r2, [pc, #164]	; (800282c <DMA_SetConfig+0x268>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <DMA_SetConfig+0x1d0>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <DMA_SetConfig+0x26c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <DMA_SetConfig+0x1d4>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <DMA_SetConfig+0x1d6>
 8002798:	2300      	movs	r3, #0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d05a      	beq.n	8002854 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	223f      	movs	r2, #63	; 0x3f
 80027a8:	409a      	lsls	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d108      	bne.n	80027e0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80027de:	e087      	b.n	80028f0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
}
 80027f0:	e07e      	b.n	80028f0 <DMA_SetConfig+0x32c>
 80027f2:	bf00      	nop
 80027f4:	40020010 	.word	0x40020010
 80027f8:	40020028 	.word	0x40020028
 80027fc:	40020040 	.word	0x40020040
 8002800:	40020058 	.word	0x40020058
 8002804:	40020070 	.word	0x40020070
 8002808:	40020088 	.word	0x40020088
 800280c:	400200a0 	.word	0x400200a0
 8002810:	400200b8 	.word	0x400200b8
 8002814:	40020410 	.word	0x40020410
 8002818:	40020428 	.word	0x40020428
 800281c:	40020440 	.word	0x40020440
 8002820:	40020458 	.word	0x40020458
 8002824:	40020470 	.word	0x40020470
 8002828:	40020488 	.word	0x40020488
 800282c:	400204a0 	.word	0x400204a0
 8002830:	400204b8 	.word	0x400204b8
 8002834:	58025408 	.word	0x58025408
 8002838:	5802541c 	.word	0x5802541c
 800283c:	58025430 	.word	0x58025430
 8002840:	58025444 	.word	0x58025444
 8002844:	58025458 	.word	0x58025458
 8002848:	5802546c 	.word	0x5802546c
 800284c:	58025480 	.word	0x58025480
 8002850:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <DMA_SetConfig+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <DMA_SetConfig+0x33c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <DMA_SetConfig+0x340>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <DMA_SetConfig+0x344>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <DMA_SetConfig+0x348>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <DMA_SetConfig+0x34c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <DMA_SetConfig+0x350>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <DMA_SetConfig+0x2e0>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <DMA_SetConfig+0x354>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <DMA_SetConfig+0x2e4>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <DMA_SetConfig+0x2e6>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d020      	beq.n	80028f0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2201      	movs	r2, #1
 80028b8:	409a      	lsls	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d108      	bne.n	80028e0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	60da      	str	r2, [r3, #12]
}
 80028de:	e007      	b.n	80028f0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	60da      	str	r2, [r3, #12]
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	58025408 	.word	0x58025408
 8002900:	5802541c 	.word	0x5802541c
 8002904:	58025430 	.word	0x58025430
 8002908:	58025444 	.word	0x58025444
 800290c:	58025458 	.word	0x58025458
 8002910:	5802546c 	.word	0x5802546c
 8002914:	58025480 	.word	0x58025480
 8002918:	58025494 	.word	0x58025494

0800291c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a42      	ldr	r2, [pc, #264]	; (8002a34 <DMA_CalcBaseAndBitshift+0x118>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d04a      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <DMA_CalcBaseAndBitshift+0x11c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d045      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <DMA_CalcBaseAndBitshift+0x120>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d040      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3e      	ldr	r2, [pc, #248]	; (8002a40 <DMA_CalcBaseAndBitshift+0x124>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d03b      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <DMA_CalcBaseAndBitshift+0x128>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d036      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3b      	ldr	r2, [pc, #236]	; (8002a48 <DMA_CalcBaseAndBitshift+0x12c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d031      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <DMA_CalcBaseAndBitshift+0x130>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02c      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <DMA_CalcBaseAndBitshift+0x134>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d027      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a36      	ldr	r2, [pc, #216]	; (8002a54 <DMA_CalcBaseAndBitshift+0x138>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d022      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a35      	ldr	r2, [pc, #212]	; (8002a58 <DMA_CalcBaseAndBitshift+0x13c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d01d      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a33      	ldr	r2, [pc, #204]	; (8002a5c <DMA_CalcBaseAndBitshift+0x140>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d018      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <DMA_CalcBaseAndBitshift+0x144>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <DMA_CalcBaseAndBitshift+0x148>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00e      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <DMA_CalcBaseAndBitshift+0x14c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <DMA_CalcBaseAndBitshift+0x150>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <DMA_CalcBaseAndBitshift+0x154>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <DMA_CalcBaseAndBitshift+0xac>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <DMA_CalcBaseAndBitshift+0xae>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3b10      	subs	r3, #16
 80029d6:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <DMA_CalcBaseAndBitshift+0x158>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <DMA_CalcBaseAndBitshift+0x15c>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	461a      	mov	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d908      	bls.n	8002a08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <DMA_CalcBaseAndBitshift+0x160>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	1d1a      	adds	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58
 8002a06:	e00d      	b.n	8002a24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <DMA_CalcBaseAndBitshift+0x160>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6593      	str	r3, [r2, #88]	; 0x58
 8002a16:	e005      	b.n	8002a24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40020010 	.word	0x40020010
 8002a38:	40020028 	.word	0x40020028
 8002a3c:	40020040 	.word	0x40020040
 8002a40:	40020058 	.word	0x40020058
 8002a44:	40020070 	.word	0x40020070
 8002a48:	40020088 	.word	0x40020088
 8002a4c:	400200a0 	.word	0x400200a0
 8002a50:	400200b8 	.word	0x400200b8
 8002a54:	40020410 	.word	0x40020410
 8002a58:	40020428 	.word	0x40020428
 8002a5c:	40020440 	.word	0x40020440
 8002a60:	40020458 	.word	0x40020458
 8002a64:	40020470 	.word	0x40020470
 8002a68:	40020488 	.word	0x40020488
 8002a6c:	400204a0 	.word	0x400204a0
 8002a70:	400204b8 	.word	0x400204b8
 8002a74:	aaaaaaab 	.word	0xaaaaaaab
 8002a78:	08009d98 	.word	0x08009d98
 8002a7c:	fffffc00 	.word	0xfffffc00

08002a80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d120      	bne.n	8002ad6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d858      	bhi.n	8002b4e <DMA_CheckFifoParam+0xce>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <DMA_CheckFifoParam+0x24>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002ac7 	.word	0x08002ac7
 8002aac:	08002ab5 	.word	0x08002ab5
 8002ab0:	08002b4f 	.word	0x08002b4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d048      	beq.n	8002b52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ac4:	e045      	b.n	8002b52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ace:	d142      	bne.n	8002b56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ad4:	e03f      	b.n	8002b56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ade:	d123      	bne.n	8002b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d838      	bhi.n	8002b5a <DMA_CheckFifoParam+0xda>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <DMA_CheckFifoParam+0x70>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b07 	.word	0x08002b07
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b19 	.word	0x08002b19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
        break;
 8002b04:	e030      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d025      	beq.n	8002b5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b16:	e022      	b.n	8002b5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b26:	e01c      	b.n	8002b62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d902      	bls.n	8002b36 <DMA_CheckFifoParam+0xb6>
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d003      	beq.n	8002b3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002b34:	e018      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
        break;
 8002b3a:	e015      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8002b4c:	e00b      	b.n	8002b66 <DMA_CheckFifoParam+0xe6>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e00a      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        break;
 8002b52:	bf00      	nop
 8002b54:	e008      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        break;
 8002b56:	bf00      	nop
 8002b58:	e006      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        break;
 8002b5a:	bf00      	nop
 8002b5c:	e004      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
        break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
    break;
 8002b66:	bf00      	nop
    }
  }

  return status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a36      	ldr	r2, [pc, #216]	; (8002c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a33      	ldr	r2, [pc, #204]	; (8002c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a30      	ldr	r2, [pc, #192]	; (8002c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01a      	beq.n	8002c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b08      	subs	r3, #8
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002c04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002c14:	e024      	b.n	8002c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3b10      	subs	r3, #16
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d806      	bhi.n	8002c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d902      	bls.n	8002c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002c50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2201      	movs	r2, #1
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	58025408 	.word	0x58025408
 8002c70:	5802541c 	.word	0x5802541c
 8002c74:	58025430 	.word	0x58025430
 8002c78:	58025444 	.word	0x58025444
 8002c7c:	58025458 	.word	0x58025458
 8002c80:	5802546c 	.word	0x5802546c
 8002c84:	58025480 	.word	0x58025480
 8002c88:	58025494 	.word	0x58025494
 8002c8c:	cccccccd 	.word	0xcccccccd
 8002c90:	16009600 	.word	0x16009600
 8002c94:	58025880 	.word	0x58025880
 8002c98:	aaaaaaab 	.word	0xaaaaaaab
 8002c9c:	400204b8 	.word	0x400204b8
 8002ca0:	4002040f 	.word	0x4002040f
 8002ca4:	10008200 	.word	0x10008200
 8002ca8:	40020880 	.word	0x40020880

08002cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04a      	beq.n	8002d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d847      	bhi.n	8002d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d022      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01d      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d018      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002d34:	671a      	str	r2, [r3, #112]	; 0x70
 8002d36:	e009      	b.n	8002d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002d4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	2201      	movs	r2, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	58025408 	.word	0x58025408
 8002d68:	5802541c 	.word	0x5802541c
 8002d6c:	58025430 	.word	0x58025430
 8002d70:	58025444 	.word	0x58025444
 8002d74:	58025458 	.word	0x58025458
 8002d78:	5802546c 	.word	0x5802546c
 8002d7c:	58025480 	.word	0x58025480
 8002d80:	58025494 	.word	0x58025494
 8002d84:	1600963f 	.word	0x1600963f
 8002d88:	58025940 	.word	0x58025940
 8002d8c:	1000823f 	.word	0x1000823f
 8002d90:	40020940 	.word	0x40020940

08002d94 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	7a1b      	ldrb	r3, [r3, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d155      	bne.n	8002e5a <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d049      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d044      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a48      	ldr	r2, [pc, #288]	; (8002ee8 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d03f      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a46      	ldr	r2, [pc, #280]	; (8002eec <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d03a      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d035      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a43      	ldr	r2, [pc, #268]	; (8002ef4 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d030      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02b      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a40      	ldr	r2, [pc, #256]	; (8002efc <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d026      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d021      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3d      	ldr	r2, [pc, #244]	; (8002f04 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01c      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d017      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3a      	ldr	r2, [pc, #232]	; (8002f0c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d012      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a39      	ldr	r2, [pc, #228]	; (8002f10 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d008      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d131      	bne.n	8002eca <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e02f      	b.n	8002ed4 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b2d9      	uxtb	r1, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	061a      	lsls	r2, r3, #24
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	04db      	lsls	r3, r3, #19
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7a1b      	ldrb	r3, [r3, #8]
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	7a5b      	ldrb	r3, [r3, #9]
 8002eb2:	025b      	lsls	r3, r3, #9
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e004      	b.n	8002ed4 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40020010 	.word	0x40020010
 8002ee4:	40020028 	.word	0x40020028
 8002ee8:	40020040 	.word	0x40020040
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	40020070 	.word	0x40020070
 8002ef4:	40020088 	.word	0x40020088
 8002ef8:	400200a0 	.word	0x400200a0
 8002efc:	400200b8 	.word	0x400200b8
 8002f00:	40020410 	.word	0x40020410
 8002f04:	40020428 	.word	0x40020428
 8002f08:	40020440 	.word	0x40020440
 8002f0c:	40020458 	.word	0x40020458
 8002f10:	40020470 	.word	0x40020470
 8002f14:	40020488 	.word	0x40020488
 8002f18:	400204a0 	.word	0x400204a0
 8002f1c:	400204b8 	.word	0x400204b8

08002f20 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01a      	beq.n	8002f6e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d022      	beq.n	8002fbc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01a      	beq.n	8002fbc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
      }
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fd2:	4b86      	ldr	r3, [pc, #536]	; (80031ec <HAL_GPIO_Init+0x228>)
 8002fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fd6:	e18c      	b.n	80032f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 817e 	beq.w	80032ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d005      	beq.n	8003008 <HAL_GPIO_Init+0x44>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d130      	bne.n	800306a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800303e:	2201      	movs	r2, #1
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0201 	and.w	r2, r3, #1
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b03      	cmp	r3, #3
 8003074:	d017      	beq.n	80030a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2203      	movs	r2, #3
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d123      	bne.n	80030fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	69b9      	ldr	r1, [r7, #24]
 80030f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	2203      	movs	r2, #3
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0203 	and.w	r2, r3, #3
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d8 	beq.w	80032ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_GPIO_Init+0x22c>)
 800313e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003142:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_GPIO_Init+0x22c>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_GPIO_Init+0x22c>)
 800314e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315a:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_GPIO_Init+0x230>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_GPIO_Init+0x234>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d04a      	beq.n	800321c <HAL_GPIO_Init+0x258>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_GPIO_Init+0x238>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02b      	beq.n	80031e6 <HAL_GPIO_Init+0x222>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_GPIO_Init+0x23c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d025      	beq.n	80031e2 <HAL_GPIO_Init+0x21e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_GPIO_Init+0x240>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01f      	beq.n	80031de <HAL_GPIO_Init+0x21a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_GPIO_Init+0x244>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d019      	beq.n	80031da <HAL_GPIO_Init+0x216>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_GPIO_Init+0x248>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_GPIO_Init+0x212>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_GPIO_Init+0x24c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00d      	beq.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_GPIO_Init+0x250>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <HAL_GPIO_Init+0x20a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_GPIO_Init+0x254>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_GPIO_Init+0x206>
 80031c6:	2309      	movs	r3, #9
 80031c8:	e029      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031ca:	230a      	movs	r3, #10
 80031cc:	e027      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031ce:	2307      	movs	r3, #7
 80031d0:	e025      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031d2:	2306      	movs	r3, #6
 80031d4:	e023      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031d6:	2305      	movs	r3, #5
 80031d8:	e021      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031da:	2304      	movs	r3, #4
 80031dc:	e01f      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031de:	2303      	movs	r3, #3
 80031e0:	e01d      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e01b      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e019      	b.n	800321e <HAL_GPIO_Init+0x25a>
 80031ea:	bf00      	nop
 80031ec:	58000080 	.word	0x58000080
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58000400 	.word	0x58000400
 80031f8:	58020000 	.word	0x58020000
 80031fc:	58020400 	.word	0x58020400
 8003200:	58020800 	.word	0x58020800
 8003204:	58020c00 	.word	0x58020c00
 8003208:	58021000 	.word	0x58021000
 800320c:	58021400 	.word	0x58021400
 8003210:	58021800 	.word	0x58021800
 8003214:	58021c00 	.word	0x58021c00
 8003218:	58022400 	.word	0x58022400
 800321c:	2300      	movs	r3, #0
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	f002 0203 	and.w	r2, r2, #3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4093      	lsls	r3, r2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322e:	4938      	ldr	r1, [pc, #224]	; (8003310 <HAL_GPIO_Init+0x34c>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3301      	adds	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f ae6b 	bne.w	8002fd8 <HAL_GPIO_Init+0x14>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	3724      	adds	r7, #36	; 0x24
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	58000400 	.word	0x58000400

08003314 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003322:	4b72      	ldr	r3, [pc, #456]	; (80034ec <HAL_GPIO_DeInit+0x1d8>)
 8003324:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8003326:	e0d3      	b.n	80034d0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003328:	2201      	movs	r2, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	4013      	ands	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80c6 	beq.w	80034ca <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800333e:	4a6c      	ldr	r2, [pc, #432]	; (80034f0 <HAL_GPIO_DeInit+0x1dc>)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a64      	ldr	r2, [pc, #400]	; (80034f4 <HAL_GPIO_DeInit+0x1e0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d031      	beq.n	80033cc <HAL_GPIO_DeInit+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <HAL_GPIO_DeInit+0x1e4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d02b      	beq.n	80033c8 <HAL_GPIO_DeInit+0xb4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a62      	ldr	r2, [pc, #392]	; (80034fc <HAL_GPIO_DeInit+0x1e8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d025      	beq.n	80033c4 <HAL_GPIO_DeInit+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a61      	ldr	r2, [pc, #388]	; (8003500 <HAL_GPIO_DeInit+0x1ec>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01f      	beq.n	80033c0 <HAL_GPIO_DeInit+0xac>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_GPIO_DeInit+0x1f0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d019      	beq.n	80033bc <HAL_GPIO_DeInit+0xa8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a5f      	ldr	r2, [pc, #380]	; (8003508 <HAL_GPIO_DeInit+0x1f4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_GPIO_DeInit+0xa4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_GPIO_DeInit+0x1f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00d      	beq.n	80033b4 <HAL_GPIO_DeInit+0xa0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a5d      	ldr	r2, [pc, #372]	; (8003510 <HAL_GPIO_DeInit+0x1fc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <HAL_GPIO_DeInit+0x9c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a5c      	ldr	r2, [pc, #368]	; (8003514 <HAL_GPIO_DeInit+0x200>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_GPIO_DeInit+0x98>
 80033a8:	2309      	movs	r3, #9
 80033aa:	e010      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033ac:	230a      	movs	r3, #10
 80033ae:	e00e      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033b0:	2307      	movs	r3, #7
 80033b2:	e00c      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033b4:	2306      	movs	r3, #6
 80033b6:	e00a      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033b8:	2305      	movs	r3, #5
 80033ba:	e008      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033bc:	2304      	movs	r3, #4
 80033be:	e006      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033c0:	2303      	movs	r3, #3
 80033c2:	e004      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e002      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_GPIO_DeInit+0xba>
 80033cc:	2300      	movs	r3, #0
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	f002 0203 	and.w	r2, r2, #3
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	4093      	lsls	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d136      	bne.n	800344c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	401a      	ands	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003408:	4013      	ands	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341a:	4013      	ands	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800342e:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <HAL_GPIO_DeInit+0x1dc>)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	43da      	mvns	r2, r3
 800343e:	482c      	ldr	r0, [pc, #176]	; (80034f0 <HAL_GPIO_DeInit+0x1dc>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	400a      	ands	r2, r1
 8003446:	3302      	adds	r3, #2
 8003448:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2103      	movs	r1, #3
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	08d2      	lsrs	r2, r2, #3
 8003480:	4019      	ands	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2103      	movs	r1, #3
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	2101      	movs	r1, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2103      	movs	r1, #3
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	401a      	ands	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f af25 	bne.w	8003328 <HAL_GPIO_DeInit+0x14>
  }
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	58000080 	.word	0x58000080
 80034f0:	58000400 	.word	0x58000400
 80034f4:	58020000 	.word	0x58020000
 80034f8:	58020400 	.word	0x58020400
 80034fc:	58020800 	.word	0x58020800
 8003500:	58020c00 	.word	0x58020c00
 8003504:	58021000 	.word	0x58021000
 8003508:	58021400 	.word	0x58021400
 800350c:	58021800 	.word	0x58021800
 8003510:	58021c00 	.word	0x58021c00
 8003514:	58022400 	.word	0x58022400

08003518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003534:	e003      	b.n	800353e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	041a      	lsls	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	619a      	str	r2, [r3, #24]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003558:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f804 	bl	800357e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_PWREx_ConfigSupply+0xb0>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	2b06      	cmp	r3, #6
 80035a6:	d00a      	beq.n	80035be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_PWREx_ConfigSupply+0xb0>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e03f      	b.n	800363a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e03d      	b.n	800363a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_PWREx_ConfigSupply+0xb0>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80035c6:	491f      	ldr	r1, [pc, #124]	; (8003644 <HAL_PWREx_ConfigSupply+0xb0>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035ce:	f7fc ff43 	bl	8000458 <HAL_GetTick>
 80035d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035d4:	e009      	b.n	80035ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035d6:	f7fc ff3f 	bl	8000458 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035e4:	d901      	bls.n	80035ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e027      	b.n	800363a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_PWREx_ConfigSupply+0xb0>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f6:	d1ee      	bne.n	80035d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b1e      	cmp	r3, #30
 80035fc:	d008      	beq.n	8003610 <HAL_PWREx_ConfigSupply+0x7c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b2e      	cmp	r3, #46	; 0x2e
 8003602:	d005      	beq.n	8003610 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b1d      	cmp	r3, #29
 8003608:	d002      	beq.n	8003610 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b2d      	cmp	r3, #45	; 0x2d
 800360e:	d113      	bne.n	8003638 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003610:	f7fc ff22 	bl	8000458 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003616:	e009      	b.n	800362c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003618:	f7fc ff1e 	bl	8000458 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003626:	d901      	bls.n	800362c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e006      	b.n	800363a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_PWREx_ConfigSupply+0xb0>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0311 	and.w	r3, r3, #17
 8003634:	2b11      	cmp	r3, #17
 8003636:	d1ef      	bne.n	8003618 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	58024800 	.word	0x58024800

08003648 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e02d      	b.n	80036b6 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0220 	bic.w	r2, r2, #32
 800366e:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003682:	f023 030f 	bic.w	r3, r3, #15
 8003686:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 021c 	bic.w	r2, r2, #28
 8003696:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0207 	bic.w	r2, r2, #7
 80036a6:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08c      	sub	sp, #48	; 0x30
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e397      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8087 	beq.w	80037f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e4:	4b9e      	ldr	r3, [pc, #632]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ee:	4b9c      	ldr	r3, [pc, #624]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d007      	beq.n	800370a <HAL_RCC_OscConfig+0x46>
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b18      	cmp	r3, #24
 80036fe:	d110      	bne.n	8003722 <HAL_RCC_OscConfig+0x5e>
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d10b      	bne.n	8003722 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370a:	4b95      	ldr	r3, [pc, #596]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d06c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x12c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d168      	bne.n	80037f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e371      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x76>
 800372c:	4b8c      	ldr	r3, [pc, #560]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a8b      	ldr	r2, [pc, #556]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e02e      	b.n	8003798 <HAL_RCC_OscConfig+0xd4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x98>
 8003742:	4b87      	ldr	r3, [pc, #540]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a86      	ldr	r2, [pc, #536]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b84      	ldr	r3, [pc, #528]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a83      	ldr	r2, [pc, #524]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xd4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0xbc>
 8003766:	4b7e      	ldr	r3, [pc, #504]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a7d      	ldr	r2, [pc, #500]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xd4>
 8003780:	4b77      	ldr	r3, [pc, #476]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a76      	ldr	r2, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b74      	ldr	r3, [pc, #464]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a73      	ldr	r2, [pc, #460]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fc fe5a 	bl	8000458 <HAL_GetTick>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fc fe56 	bl	8000458 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e325      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ba:	4b69      	ldr	r3, [pc, #420]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xe4>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fc fe46 	bl	8000458 <HAL_GetTick>
 80037cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fc fe42 	bl	8000458 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e311      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037e2:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x10c>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 808a 	beq.w	8003914 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003800:	4b57      	ldr	r3, [pc, #348]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003808:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800380a:	4b55      	ldr	r3, [pc, #340]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_RCC_OscConfig+0x162>
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2b18      	cmp	r3, #24
 800381a:	d137      	bne.n	800388c <HAL_RCC_OscConfig+0x1c8>
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d132      	bne.n	800388c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003826:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x17a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e2e3      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800383e:	4b48      	ldr	r3, [pc, #288]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0219 	bic.w	r2, r3, #25
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4945      	ldr	r1, [pc, #276]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003850:	f7fc fe02 	bl	8000458 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003858:	f7fc fdfe 	bl	8000458 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e2cd      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	4936      	ldr	r1, [pc, #216]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800388a:	e043      	b.n	8003914 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d026      	beq.n	80038e2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 0219 	bic.w	r2, r3, #25
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	492f      	ldr	r1, [pc, #188]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fc fdd7 	bl	8000458 <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ae:	f7fc fdd3 	bl	8000458 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e2a2      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	4921      	ldr	r1, [pc, #132]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
 80038e0:	e018      	b.n	8003914 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fc fdb3 	bl	8000458 <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fc fdaf 	bl	8000458 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e27e      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	d06d      	beq.n	80039fc <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003928:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d007      	beq.n	8003946 <HAL_RCC_OscConfig+0x282>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b18      	cmp	r3, #24
 800393a:	d11e      	bne.n	800397a <HAL_RCC_OscConfig+0x2b6>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d119      	bne.n	800397a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_OscConfig+0x29c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_RCC_OscConfig+0x2a0>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d004      	beq.n	8003964 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e253      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003964:	4ba3      	ldr	r3, [pc, #652]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	49a0      	ldr	r1, [pc, #640]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003978:	e040      	b.n	80039fc <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d023      	beq.n	80039ca <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003982:	4b9c      	ldr	r3, [pc, #624]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a9b      	ldr	r2, [pc, #620]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fc fd63 	bl	8000458 <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003996:	f7fc fd5f 	bl	8000458 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e22e      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039a8:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039b4:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	498c      	ldr	r1, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
 80039c8:	e018      	b.n	80039fc <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039ca:	4b8a      	ldr	r3, [pc, #552]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a89      	ldr	r2, [pc, #548]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 80039d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fc fd3f 	bl	8000458 <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039de:	f7fc fd3b 	bl	8000458 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e20a      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039f0:	4b80      	ldr	r3, [pc, #512]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d036      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	4a77      	ldr	r2, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fc fd1c 	bl	8000458 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fc fd18 	bl	8000458 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1e7      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a36:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x360>
 8003a42:	e018      	b.n	8003a76 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a44:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fc fd02 	bl	8000458 <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fc fcfe 	bl	8000458 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1cd      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a6a:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d036      	beq.n	8003af0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d019      	beq.n	8003abe <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a8a:	4b5a      	ldr	r3, [pc, #360]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a96:	f7fc fcdf 	bl	8000458 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a9e:	f7fc fcdb 	bl	8000458 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1aa      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x3da>
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003abe:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4c      	ldr	r2, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aca:	f7fc fcc5 	bl	8000458 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ad2:	f7fc fcc1 	bl	8000458 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e190      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8085 	beq.w	8003c08 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCC_OscConfig+0x534>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <HAL_RCC_OscConfig+0x534>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0a:	f7fc fca5 	bl	8000458 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fc fca1 	bl	8000458 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	; 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e170      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_OscConfig+0x534>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x482>
 8003b38:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a2d      	ldr	r2, [pc, #180]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
 8003b44:	e02d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4de>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4a4>
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	e01c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4de>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x4c6>
 8003b70:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4de>
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fc fc55 	bl	8000458 <HAL_GetTick>
 8003bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fc fc51 	bl	8000458 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e11e      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x530>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ee      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x4ee>
 8003bd4:	e018      	b.n	8003c08 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fc fc3f 	bl	8000458 <HAL_GetTick>
 8003bda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fc fc3b 	bl	8000458 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d905      	bls.n	8003bfc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e108      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bfc:	4b84      	ldr	r3, [pc, #528]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ea      	bne.n	8003bde <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80f9 	beq.w	8003e04 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c12:	4b7f      	ldr	r3, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c1a:	2b18      	cmp	r3, #24
 8003c1c:	f000 80b4 	beq.w	8003d88 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	f040 8095 	bne.w	8003d54 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a78      	ldr	r2, [pc, #480]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fc fc0f 	bl	8000458 <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fc fc0b 	bl	8000458 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0da      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c5c:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c60:	4b6c      	ldr	r3, [pc, #432]	; (8003e14 <HAL_RCC_OscConfig+0x750>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c6c:	0112      	lsls	r2, r2, #4
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	4967      	ldr	r1, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	628b      	str	r3, [r1, #40]	; 0x28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	3b01      	subs	r3, #1
 8003c86:	025b      	lsls	r3, r3, #9
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	3b01      	subs	r3, #1
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ca6:	495a      	ldr	r1, [pc, #360]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_RCC_OscConfig+0x754>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cc4:	00d2      	lsls	r2, r2, #3
 8003cc6:	4952      	ldr	r1, [pc, #328]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f023 020c 	bic.w	r2, r3, #12
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	494d      	ldr	r1, [pc, #308]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cde:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f023 0202 	bic.w	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	4949      	ldr	r1, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cf0:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a46      	ldr	r2, [pc, #280]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfc:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4a43      	ldr	r2, [pc, #268]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a40      	ldr	r2, [pc, #256]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d14:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4a3d      	ldr	r2, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3a      	ldr	r2, [pc, #232]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fc fb94 	bl	8000458 <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fc fb90 	bl	8000458 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e05f      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x670>
 8003d52:	e057      	b.n	8003e04 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fc fb7a 	bl	8000458 <HAL_GetTick>
 8003d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fc fb76 	bl	8000458 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e045      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x6a4>
 8003d86:	e03d      	b.n	8003e04 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_OscConfig+0x74c>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d031      	beq.n	8003e00 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0203 	and.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d12a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d122      	bne.n	8003e00 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d11a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0a5b      	lsrs	r3, r3, #9
 8003dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d111      	bne.n	8003e00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0e1b      	lsrs	r3, r3, #24
 8003df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3730      	adds	r7, #48	; 0x30
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	fffffc0c 	.word	0xfffffc0c
 8003e18:	ffff0007 	.word	0xffff0007

08003e1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e19c      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b8a      	ldr	r3, [pc, #552]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b87      	ldr	r3, [pc, #540]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	4985      	ldr	r1, [pc, #532]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b83      	ldr	r3, [pc, #524]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e184      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d908      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e7c:	4b78      	ldr	r3, [pc, #480]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4975      	ldr	r1, [pc, #468]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d010      	beq.n	8003ebc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	4b70      	ldr	r3, [pc, #448]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d908      	bls.n	8003ebc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	496a      	ldr	r1, [pc, #424]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	4b64      	ldr	r3, [pc, #400]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ed8:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	495e      	ldr	r1, [pc, #376]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f06:	4b56      	ldr	r3, [pc, #344]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4953      	ldr	r1, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f023 020f 	bic.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4947      	ldr	r1, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d055      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4940      	ldr	r1, [pc, #256]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f6c:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0f6      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0ea      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0de      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d6      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fbc:	4b28      	ldr	r3, [pc, #160]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f023 0207 	bic.w	r2, r3, #7
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4925      	ldr	r1, [pc, #148]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fc fa43 	bl	8000458 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fc fa3f 	bl	8000458 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0be      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1eb      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	429a      	cmp	r2, r3
 8004018:	d208      	bcs.n	800402c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8004028:	4313      	orrs	r3, r2
 800402a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d214      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 020f 	bic.w	r2, r3, #15
 8004042:	4906      	ldr	r1, [pc, #24]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e086      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
 800405c:	52002000 	.word	0x52002000
 8004060:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800407c:	429a      	cmp	r2, r3
 800407e:	d208      	bcs.n	8004092 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004080:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4939      	ldr	r1, [pc, #228]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 800408e:	4313      	orrs	r3, r2
 8004090:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d208      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	492e      	ldr	r1, [pc, #184]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4922      	ldr	r1, [pc, #136]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4917      	ldr	r1, [pc, #92]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004118:	4313      	orrs	r3, r2
 800411a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800411c:	f000 f834 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	4912      	ldr	r1, [pc, #72]	; (8004178 <HAL_RCC_ClockConfig+0x35c>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <HAL_RCC_ClockConfig+0x35c>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x360>)
 8004152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x364>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_RCC_ClockConfig+0x368>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc f930 	bl	80003c4 <HAL_InitTick>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400
 8004178:	08009da0 	.word	0x08009da0
 800417c:	24000414 	.word	0x24000414
 8004180:	24000410 	.word	0x24000410
 8004184:	24000408 	.word	0x24000408

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418e:	4bb3      	ldr	r3, [pc, #716]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004196:	2b18      	cmp	r3, #24
 8004198:	f200 8155 	bhi.w	8004446 <HAL_RCC_GetSysClockFreq+0x2be>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	08004209 	.word	0x08004209
 80041a8:	08004447 	.word	0x08004447
 80041ac:	08004447 	.word	0x08004447
 80041b0:	08004447 	.word	0x08004447
 80041b4:	08004447 	.word	0x08004447
 80041b8:	08004447 	.word	0x08004447
 80041bc:	08004447 	.word	0x08004447
 80041c0:	08004447 	.word	0x08004447
 80041c4:	0800422f 	.word	0x0800422f
 80041c8:	08004447 	.word	0x08004447
 80041cc:	08004447 	.word	0x08004447
 80041d0:	08004447 	.word	0x08004447
 80041d4:	08004447 	.word	0x08004447
 80041d8:	08004447 	.word	0x08004447
 80041dc:	08004447 	.word	0x08004447
 80041e0:	08004447 	.word	0x08004447
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004447 	.word	0x08004447
 80041ec:	08004447 	.word	0x08004447
 80041f0:	08004447 	.word	0x08004447
 80041f4:	08004447 	.word	0x08004447
 80041f8:	08004447 	.word	0x08004447
 80041fc:	08004447 	.word	0x08004447
 8004200:	08004447 	.word	0x08004447
 8004204:	0800423b 	.word	0x0800423b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004208:	4b94      	ldr	r3, [pc, #592]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	4a90      	ldr	r2, [pc, #576]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004226:	e111      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004228:	4b8d      	ldr	r3, [pc, #564]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800422a:	61bb      	str	r3, [r7, #24]
    break;
 800422c:	e10e      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800422e:	4b8d      	ldr	r3, [pc, #564]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004230:	61bb      	str	r3, [r7, #24]
    break;
 8004232:	e10b      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004234:	4b8c      	ldr	r3, [pc, #560]	; (8004468 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004236:	61bb      	str	r3, [r7, #24]
    break;
 8004238:	e108      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800423a:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004244:	4b85      	ldr	r3, [pc, #532]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004250:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800425a:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80e1 	beq.w	8004440 <HAL_RCC_GetSysClockFreq+0x2b8>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f000 8083 	beq.w	800438c <HAL_RCC_GetSysClockFreq+0x204>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b02      	cmp	r3, #2
 800428a:	f200 80a1 	bhi.w	80043d0 <HAL_RCC_GetSysClockFreq+0x248>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x114>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d056      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x1c0>
 800429a:	e099      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02d      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b62      	ldr	r3, [pc, #392]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004302:	e087      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a02 	vldr	s12, [r7, #8]
 800432a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004346:	e065      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004474 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a02 	vldr	s12, [r7, #8]
 800436e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438a:	e043      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004478 <HAL_RCC_GetSysClockFreq+0x2f0>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ce:	e021      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004474 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004412:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441e:	3301      	adds	r3, #1
 8004420:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800442c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	ee17 3a90 	vmov	r3, s15
 800443c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800443e:	e005      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
    break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004448:	61bb      	str	r3, [r7, #24]
    break;
 800444a:	bf00      	nop
  }

  return sysclockfreq;
 800444c:	69bb      	ldr	r3, [r7, #24]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400
 8004460:	03d09000 	.word	0x03d09000
 8004464:	003d0900 	.word	0x003d0900
 8004468:	017d7840 	.word	0x017d7840
 800446c:	46000000 	.word	0x46000000
 8004470:	4c742400 	.word	0x4c742400
 8004474:	4a742400 	.word	0x4a742400
 8004478:	4bbebc20 	.word	0x4bbebc20

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004482:	f7ff fe81 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_RCC_GetHCLKFreq+0x50>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490f      	ldr	r1, [pc, #60]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <HAL_RCC_GetHCLKFreq+0x50>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	58024400 	.word	0x58024400
 80044d0:	08009da0 	.word	0x08009da0
 80044d4:	24000414 	.word	0x24000414
 80044d8:	24000410 	.word	0x24000410

080044dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03f      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004500:	d02a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004502:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004506:	d824      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450c:	d018      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800450e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004512:	d81e      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451c:	d007      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800451e:	e018      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004520:	4bab      	ldr	r3, [pc, #684]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	4aaa      	ldr	r2, [pc, #680]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800452c:	e015      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	2102      	movs	r1, #2
 8004534:	4618      	mov	r0, r3
 8004536:	f001 feff 	bl	8006338 <RCCEx_PLL2_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800453e:	e00c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3324      	adds	r3, #36	; 0x24
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f001 ffa8 	bl	800649c <RCCEx_PLL3_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
      break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004560:	4b9b      	ldr	r3, [pc, #620]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456c:	4998      	ldr	r1, [pc, #608]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	650b      	str	r3, [r1, #80]	; 0x50
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	2b04      	cmp	r3, #4
 800458a:	d826      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045a9 	.word	0x080045a9
 8004598:	080045b7 	.word	0x080045b7
 800459c:	080045c9 	.word	0x080045c9
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045e1 	.word	0x080045e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a8:	4b89      	ldr	r3, [pc, #548]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	4a88      	ldr	r2, [pc, #544]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045b4:	e015      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 febb 	bl	8006338 <RCCEx_PLL2_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045c6:	e00c      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3324      	adds	r3, #36	; 0x24
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 ff64 	bl	800649c <RCCEx_PLL3_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045d8:	e003      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
      break;
 80045de:	e000      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80045e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e8:	4b79      	ldr	r3, [pc, #484]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ec:	f023 0207 	bic.w	r2, r3, #7
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	4976      	ldr	r1, [pc, #472]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	650b      	str	r3, [r1, #80]	; 0x50
 80045fa:	e001      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d051      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004612:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004616:	d036      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004618:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800461c:	d830      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800461e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004622:	d032      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004628:	d82a      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800462a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800462e:	d02e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004630:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004634:	d824      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d018      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800463c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004640:	d81e      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464a:	d007      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800464c:	e018      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464e:	4b60      	ldr	r3, [pc, #384]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	4a5f      	ldr	r2, [pc, #380]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800465a:	e019      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f001 fe68 	bl	8006338 <RCCEx_PLL2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800466c:	e010      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3324      	adds	r3, #36	; 0x24
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f001 ff11 	bl	800649c <RCCEx_PLL3_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800467e:	e007      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
      break;
 8004684:	e004      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800468e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004696:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046a4:	494a      	ldr	r1, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	658b      	str	r3, [r1, #88]	; 0x58
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d051      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80046c6:	d036      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80046c8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80046cc:	d830      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80046ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d2:	d032      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80046d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d8:	d82a      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80046da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046de:	d02e      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80046e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046e4:	d824      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80046e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ea:	d018      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80046ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f0:	d81e      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x222>
 80046f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fa:	d007      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80046fc:	e018      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fe:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4a33      	ldr	r2, [pc, #204]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800470a:	e019      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f001 fe10 	bl	8006338 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800471c:	e010      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3324      	adds	r3, #36	; 0x24
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f001 feb9 	bl	800649c <RCCEx_PLL3_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800472e:	e007      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	75fb      	strb	r3, [r7, #23]
      break;
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800473e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004754:	491e      	ldr	r1, [pc, #120]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004756:	4313      	orrs	r3, r2
 8004758:	658b      	str	r3, [r1, #88]	; 0x58
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d035      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d01c      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d817      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d00c      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d813      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d016      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d10f      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800478e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004794:	e00e      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	2102      	movs	r1, #2
 800479c:	4618      	mov	r0, r3
 800479e:	f001 fdcb 	bl	8006338 <RCCEx_PLL2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80047a6:	e005      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	75fb      	strb	r3, [r7, #23]
      break;
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80047b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c6:	4902      	ldr	r1, [pc, #8]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047cc:	e004      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d047      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ec:	d030      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80047ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f2:	d82a      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80047f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047f8:	d02c      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80047fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047fe:	d824      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d018      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	d81e      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d007      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004818:	4bac      	ldr	r3, [pc, #688]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	4aab      	ldr	r2, [pc, #684]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004824:	e017      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f001 fd83 	bl	8006338 <RCCEx_PLL2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004836:	e00e      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fe2c 	bl	800649c <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004848:	e005      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	e002      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800485c:	4b9b      	ldr	r3, [pc, #620]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	4998      	ldr	r1, [pc, #608]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	650b      	str	r3, [r1, #80]	; 0x50
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d049      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004888:	d02e      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800488a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800488e:	d828      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004894:	d02a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489a:	d822      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800489c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a0:	d026      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a6:	d81c      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80048a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ac:	d010      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80048ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b2:	d816      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01d      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d111      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2101      	movs	r1, #1
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fd37 	bl	8006338 <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048ce:	e012      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	2101      	movs	r1, #1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 fde0 	bl	800649c <RCCEx_PLL3_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048e0:	e009      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
      break;
 80048e6:	e006      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80048e8:	bf00      	nop
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80048ec:	bf00      	nop
 80048ee:	e002      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80048f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048fc:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	4970      	ldr	r1, [pc, #448]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800490a:	4313      	orrs	r3, r2
 800490c:	650b      	str	r3, [r1, #80]	; 0x50
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d04b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800492a:	d02e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004930:	d828      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d02a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d822      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800493e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004942:	d026      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004944:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004948:	d81c      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800494a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494e:	d010      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004954:	d816      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01d      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800495a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800495e:	d111      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fce6 	bl	8006338 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004970:	e012      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f001 fd8f 	bl	800649c <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004982:	e009      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
      break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800498a:	bf00      	nop
 800498c:	e004      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800499e:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049ac:	4947      	ldr	r1, [pc, #284]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	658b      	str	r3, [r1, #88]	; 0x58
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02f      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049cc:	d00e      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x510>
 80049ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d2:	d814      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x522>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80049d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049dc:	d10f      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049de:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049ea:	e00c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 fca0 	bl	8006338 <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
      break;
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a18:	492c      	ldr	r1, [pc, #176]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a1e:	e001      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d032      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d81b      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a51 	.word	0x08004a51
 8004a48:	08004a5f 	.word	0x08004a5f
 8004a4c:	08004a77 	.word	0x08004a77
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a5c:	e00c      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2102      	movs	r1, #2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 fc67 	bl	8006338 <RCCEx_PLL2_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
      break;
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	4910      	ldr	r1, [pc, #64]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 808a 	beq.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab0:	f7fb fcd2 	bl	8000458 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ab6:	e00d      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab8:	f7fb fcce 	bl	8000458 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d906      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	75fb      	strb	r3, [r7, #23]
        break;
 8004aca:	e009      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad4:	4bb9      	ldr	r3, [pc, #740]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0eb      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d166      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ae6:	4bb6      	ldr	r3, [pc, #728]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004ae8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004af0:	4053      	eors	r3, r2
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d013      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004afa:	4bb1      	ldr	r3, [pc, #708]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b02:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b04:	4bae      	ldr	r3, [pc, #696]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	4aad      	ldr	r2, [pc, #692]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b10:	4bab      	ldr	r3, [pc, #684]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	4aaa      	ldr	r2, [pc, #680]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b1c:	4aa8      	ldr	r2, [pc, #672]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2c:	d115      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fb fc93 	bl	8000458 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b34:	e00b      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fb fc8f 	bl	8000458 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d902      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	75fb      	strb	r3, [r7, #23]
            break;
 8004b4c:	e005      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b4e:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ed      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d126      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004b70:	4b93      	ldr	r3, [pc, #588]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b7e:	0919      	lsrs	r1, r3, #4
 8004b80:	4b90      	ldr	r3, [pc, #576]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b82:	400b      	ands	r3, r1
 8004b84:	498e      	ldr	r1, [pc, #568]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	610b      	str	r3, [r1, #16]
 8004b8a:	e005      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004b8c:	4b8c      	ldr	r3, [pc, #560]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4a8b      	ldr	r2, [pc, #556]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b96:	6113      	str	r3, [r2, #16]
 8004b98:	4b89      	ldr	r3, [pc, #548]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba6:	4986      	ldr	r1, [pc, #536]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	670b      	str	r3, [r1, #112]	; 0x70
 8004bac:	e004      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	75bb      	strb	r3, [r7, #22]
 8004bb2:	e001      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d07e      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc8:	2b28      	cmp	r3, #40	; 0x28
 8004bca:	d867      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004bcc:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004ca3 	.word	0x08004ca3
 8004bd8:	08004c9d 	.word	0x08004c9d
 8004bdc:	08004c9d 	.word	0x08004c9d
 8004be0:	08004c9d 	.word	0x08004c9d
 8004be4:	08004c9d 	.word	0x08004c9d
 8004be8:	08004c9d 	.word	0x08004c9d
 8004bec:	08004c9d 	.word	0x08004c9d
 8004bf0:	08004c9d 	.word	0x08004c9d
 8004bf4:	08004c79 	.word	0x08004c79
 8004bf8:	08004c9d 	.word	0x08004c9d
 8004bfc:	08004c9d 	.word	0x08004c9d
 8004c00:	08004c9d 	.word	0x08004c9d
 8004c04:	08004c9d 	.word	0x08004c9d
 8004c08:	08004c9d 	.word	0x08004c9d
 8004c0c:	08004c9d 	.word	0x08004c9d
 8004c10:	08004c9d 	.word	0x08004c9d
 8004c14:	08004c8b 	.word	0x08004c8b
 8004c18:	08004c9d 	.word	0x08004c9d
 8004c1c:	08004c9d 	.word	0x08004c9d
 8004c20:	08004c9d 	.word	0x08004c9d
 8004c24:	08004c9d 	.word	0x08004c9d
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004c9d 	.word	0x08004c9d
 8004c30:	08004c9d 	.word	0x08004c9d
 8004c34:	08004ca3 	.word	0x08004ca3
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004c9d 	.word	0x08004c9d
 8004c40:	08004c9d 	.word	0x08004c9d
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c9d 	.word	0x08004c9d
 8004c50:	08004c9d 	.word	0x08004c9d
 8004c54:	08004ca3 	.word	0x08004ca3
 8004c58:	08004c9d 	.word	0x08004c9d
 8004c5c:	08004c9d 	.word	0x08004c9d
 8004c60:	08004c9d 	.word	0x08004c9d
 8004c64:	08004c9d 	.word	0x08004c9d
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004c9d 	.word	0x08004c9d
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004ca3 	.word	0x08004ca3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fb5a 	bl	8006338 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c88:	e00c      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3324      	adds	r3, #36	; 0x24
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 fc03 	bl	800649c <RCCEx_PLL3_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c9a:	e003      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004caa:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb6:	4942      	ldr	r1, [pc, #264]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	654b      	str	r3, [r1, #84]	; 0x54
 8004cbc:	e001      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d037      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d820      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d1f 	.word	0x08004d1f
 8004ce0:	08004cf5 	.word	0x08004cf5
 8004ce4:	08004d07 	.word	0x08004d07
 8004ce8:	08004d1f 	.word	0x08004d1f
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d1f 	.word	0x08004d1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fb1c 	bl	8006338 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3324      	adds	r3, #36	; 0x24
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fbc5 	bl	800649c <RCCEx_PLL3_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d26:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f023 0207 	bic.w	r2, r3, #7
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	4923      	ldr	r1, [pc, #140]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	654b      	str	r3, [r1, #84]	; 0x54
 8004d38:	e001      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d040      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d50:	2b05      	cmp	r3, #5
 8004d52:	d821      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d9f 	.word	0x08004d9f
 8004d60:	08004d75 	.word	0x08004d75
 8004d64:	08004d87 	.word	0x08004d87
 8004d68:	08004d9f 	.word	0x08004d9f
 8004d6c:	08004d9f 	.word	0x08004d9f
 8004d70:	08004d9f 	.word	0x08004d9f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	2101      	movs	r1, #1
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fadc 	bl	8006338 <RCCEx_PLL2_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d84:	e00c      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3324      	adds	r3, #36	; 0x24
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 fb85 	bl	800649c <RCCEx_PLL3_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9c:	e000      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d110      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	f023 0207 	bic.w	r2, r3, #7
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db4:	4902      	ldr	r1, [pc, #8]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dba:	e007      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004dbc:	58024800 	.word	0x58024800
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d04b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de2:	d02e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de8:	d828      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d02a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d822      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dfa:	d026      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004dfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e00:	d81c      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e06:	d010      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0c:	d816      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01d      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e16:	d111      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fa8a 	bl	8006338 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e28:	e012      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3324      	adds	r3, #36	; 0x24
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 fb33 	bl	800649c <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e3a:	e009      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004e42:	bf00      	nop
 8004e44:	e004      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e56:	4bb2      	ldr	r3, [pc, #712]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	49ae      	ldr	r1, [pc, #696]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	654b      	str	r3, [r1, #84]	; 0x54
 8004e6a:	e001      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d04b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e86:	d02e      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004e88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e8c:	d828      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d822      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e9e:	d026      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea4:	d81c      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d010      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb0:	d816      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fa38 	bl	8006338 <RCCEx_PLL2_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ecc:	e012      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3324      	adds	r3, #36	; 0x24
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fae1 	bl	800649c <RCCEx_PLL3_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ede:	e009      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee4:	e006      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004efa:	4b89      	ldr	r3, [pc, #548]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f08:	4985      	ldr	r1, [pc, #532]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f0e:	e001      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d04b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f2a:	d02e      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004f2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f30:	d828      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f36:	d02a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	d822      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004f3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f42:	d026      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004f44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f48:	d81c      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4e:	d010      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f54:	d816      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01d      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5e:	d111      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f9e6 	bl	8006338 <RCCEx_PLL2_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f70:	e012      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3324      	adds	r3, #36	; 0x24
 8004f76:	2102      	movs	r1, #2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 fa8f 	bl	800649c <RCCEx_PLL3_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f82:	e009      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
      break;
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e004      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f9e:	4b60      	ldr	r3, [pc, #384]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fac:	495c      	ldr	r1, [pc, #368]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8004fb2:	e001      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d018      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3324      	adds	r3, #36	; 0x24
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 fa61 	bl	800649c <RCCEx_PLL3_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004fe4:	4b4e      	ldr	r3, [pc, #312]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff0:	494b      	ldr	r1, [pc, #300]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500c:	d10a      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	2102      	movs	r1, #2
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fa41 	bl	800649c <RCCEx_PLL3_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005024:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	493b      	ldr	r1, [pc, #236]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005034:	4313      	orrs	r3, r2
 8005036:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d034      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800504e:	d01d      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005054:	d817      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505e:	d009      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005060:	e011      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3304      	adds	r3, #4
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f965 	bl	8006338 <RCCEx_PLL2_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005072:	e00c      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3324      	adds	r3, #36	; 0x24
 8005078:	2102      	movs	r1, #2
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fa0e 	bl	800649c <RCCEx_PLL3_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005084:	e003      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
      break;
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800508c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005094:	4b22      	ldr	r3, [pc, #136]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a2:	491f      	ldr	r1, [pc, #124]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	658b      	str	r3, [r1, #88]	; 0x58
 80050a8:	e001      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d036      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050c4:	d01c      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80050c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050ca:	d816      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80050cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d0:	d003      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80050d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050d6:	d007      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80050d8:	e00f      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	4a10      	ldr	r2, [pc, #64]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80050e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80050e6:	e00c      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3324      	adds	r3, #36	; 0x24
 80050ec:	2101      	movs	r1, #1
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f9d4 	bl	800649c <RCCEx_PLL3_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
      break;
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005116:	4902      	ldr	r1, [pc, #8]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005118:	4313      	orrs	r3, r2
 800511a:	654b      	str	r3, [r1, #84]	; 0x54
 800511c:	e004      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d029      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d007      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005142:	e00f      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005144:	4b61      	ldr	r3, [pc, #388]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	4a60      	ldr	r2, [pc, #384]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800514a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800514e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005150:	e00b      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	2102      	movs	r1, #2
 8005158:	4618      	mov	r0, r3
 800515a:	f001 f8ed 	bl	8006338 <RCCEx_PLL2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005162:	e002      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
      break;
 8005168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516a:	7dfb      	ldrb	r3, [r7, #23]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005170:	4b56      	ldr	r3, [pc, #344]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517c:	4953      	ldr	r1, [pc, #332]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005182:	e001      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	2102      	movs	r1, #2
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f97e 	bl	800649c <RCCEx_PLL3_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d030      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051be:	d017      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80051c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c4:	d811      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80051c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ca:	d013      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80051cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d0:	d80b      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051da:	d106      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051dc:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	4a3a      	ldr	r2, [pc, #232]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80051e8:	e007      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
      break;
 80051ee:	e004      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80051f0:	bf00      	nop
 80051f2:	e002      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80051f4:	bf00      	nop
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005200:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800520c:	492f      	ldr	r1, [pc, #188]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	654b      	str	r3, [r1, #84]	; 0x54
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005224:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005230:	4926      	ldr	r1, [pc, #152]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005232:	4313      	orrs	r3, r2
 8005234:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524e:	491f      	ldr	r1, [pc, #124]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005250:	4313      	orrs	r3, r2
 8005252:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800526a:	6113      	str	r3, [r2, #16]
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005276:	4915      	ldr	r1, [pc, #84]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005278:	4313      	orrs	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	da08      	bge.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005290:	490e      	ldr	r1, [pc, #56]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005292:	4313      	orrs	r3, r2
 8005294:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052a2:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b0:	4906      	ldr	r1, [pc, #24]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80052b6:	7dbb      	ldrb	r3, [r7, #22]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400

080052d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b090      	sub	sp, #64	; 0x40
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052de:	f040 8089 	bne.w	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80052e2:	4b95      	ldr	r3, [pc, #596]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d87d      	bhi.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80052f2:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	0800530d 	.word	0x0800530d
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005355 	.word	0x08005355
 8005304:	080053e9 	.word	0x080053e9
 8005308:	08005379 	.word	0x08005379

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800530c:	4b8a      	ldr	r3, [pc, #552]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005318:	d107      	bne.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800531a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800531e:	4618      	mov	r0, r3
 8005320:	f000 feb8 	bl	8006094 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005328:	e3ed      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800532e:	e3ea      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005330:	4b81      	ldr	r3, [pc, #516]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800533c:	d107      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800533e:	f107 0318 	add.w	r3, r7, #24
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fbfe 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800534c:	e3db      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005352:	e3d8      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005354:	4b78      	ldr	r3, [pc, #480]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005360:	d107      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fd40 	bl	8005dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005370:	e3c9      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005376:	e3c6      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005378:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800537a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005380:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005382:	4b6d      	ldr	r3, [pc, #436]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d10c      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005394:	4b68      	ldr	r3, [pc, #416]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	4a67      	ldr	r2, [pc, #412]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a6:	e01e      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053a8:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b4:	d106      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053bc:	d102      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053be:	4b60      	ldr	r3, [pc, #384]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c2:	e010      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053c4:	4b5c      	ldr	r3, [pc, #368]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d0:	d106      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d8:	d102      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80053da:	4b5a      	ldr	r3, [pc, #360]	; (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80053e4:	e38f      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80053e6:	e38e      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80053e8:	4b57      	ldr	r3, [pc, #348]	; (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ec:	e38b      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f2:	e388      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fa:	f040 80a7 	bne.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80053fe:	4b4e      	ldr	r3, [pc, #312]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005406:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800540e:	d054      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005416:	f200 808b 	bhi.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005420:	f000 8083 	beq.w	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800542a:	f200 8081 	bhi.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005434:	d02f      	beq.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800543c:	d878      	bhi.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544a:	d012      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800544c:	e070      	b.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800544e:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800545a:	d107      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800545c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fe17 	bl	8006094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800546a:	e34c      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005470:	e349      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005472:	4b31      	ldr	r3, [pc, #196]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547e:	d107      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005480:	f107 0318 	add.w	r3, r7, #24
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fb5d 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800548e:	e33a      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005494:	e337      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005496:	4b28      	ldr	r3, [pc, #160]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800549e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a2:	d107      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a4:	f107 030c 	add.w	r3, r7, #12
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fc9f 	bl	8005dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054b2:	e328      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b8:	e325      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054ba:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054c4:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d10c      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	08db      	lsrs	r3, r3, #3
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	4a16      	ldr	r2, [pc, #88]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e8:	e01e      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d106      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054fe:	d102      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005504:	e010      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005512:	d106      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800551a:	d102      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005520:	e002      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005526:	e2ee      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005528:	e2ed      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800552e:	e2ea      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005534:	e2e7      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005536:	bf00      	nop
 8005538:	58024400 	.word	0x58024400
 800553c:	03d09000 	.word	0x03d09000
 8005540:	003d0900 	.word	0x003d0900
 8005544:	017d7840 	.word	0x017d7840
 8005548:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005552:	f040 809c 	bne.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005556:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800555e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005566:	d054      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556e:	f200 808b 	bhi.w	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005578:	f000 8083 	beq.w	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005582:	f200 8081 	bhi.w	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800558c:	d02f      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005594:	d878      	bhi.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055a2:	d012      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80055a4:	e070      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055a6:	4b8a      	ldr	r3, [pc, #552]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b2:	d107      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fd6b 	bl	8006094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055c2:	e2a0      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055c8:	e29d      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ca:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d6:	d107      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d8:	f107 0318 	add.w	r3, r7, #24
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fab1 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80055e6:	e28e      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ec:	e28b      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055ee:	4b78      	ldr	r3, [pc, #480]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fa:	d107      	bne.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fbf3 	bl	8005dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800560a:	e27c      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005610:	e279      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005612:	4b6f      	ldr	r3, [pc, #444]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800561a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800561c:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d10c      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800562e:	4b68      	ldr	r3, [pc, #416]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	08db      	lsrs	r3, r3, #3
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	4a66      	ldr	r2, [pc, #408]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005640:	e01e      	b.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005642:	4b63      	ldr	r3, [pc, #396]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564e:	d106      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005656:	d102      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005658:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800565c:	e010      	b.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800565e:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800566a:	d106      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005672:	d102      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005674:	4b59      	ldr	r3, [pc, #356]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800567e:	e242      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005680:	e241      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005682:	4b57      	ldr	r3, [pc, #348]	; (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005686:	e23e      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800568c:	e23b      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005694:	f040 80a6 	bne.w	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005698:	4b4d      	ldr	r3, [pc, #308]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a8:	d054      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b0:	f200 808b 	bhi.w	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ba:	f000 8083 	beq.w	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056c4:	f200 8081 	bhi.w	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d02f      	beq.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	d878      	bhi.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d012      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80056e6:	e070      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056e8:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f4:	d107      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fcca 	bl	8006094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005704:	e1ff      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800570a:	e1fc      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800570c:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005718:	d107      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800571a:	f107 0318 	add.w	r3, r7, #24
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fa10 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005728:	e1ed      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800572e:	e1ea      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800573c:	d107      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fb52 	bl	8005dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800574c:	e1db      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005752:	e1d8      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800575c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b04      	cmp	r3, #4
 8005768:	d10c      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005782:	e01e      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005784:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005790:	d106      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005798:	d102      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579e:	e010      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ac:	d106      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b4:	d102      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057c0:	e1a1      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80057c2:	e1a0      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c8:	e19d      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ce:	e19a      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80057d0:	58024400 	.word	0x58024400
 80057d4:	03d09000 	.word	0x03d09000
 80057d8:	003d0900 	.word	0x003d0900
 80057dc:	017d7840 	.word	0x017d7840
 80057e0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057ea:	d173      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80057ec:	4b9a      	ldr	r3, [pc, #616]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057fc:	d02f      	beq.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005804:	d863      	bhi.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005812:	d012      	beq.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005814:	e05b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005816:	4b90      	ldr	r3, [pc, #576]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800581e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005822:	d107      	bne.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005824:	f107 0318 	add.w	r3, r7, #24
 8005828:	4618      	mov	r0, r3
 800582a:	f000 f98b 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005832:	e168      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005838:	e165      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800583a:	4b87      	ldr	r3, [pc, #540]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005846:	d107      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	4618      	mov	r0, r3
 800584e:	f000 facd 	bl	8005dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005856:	e156      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800585c:	e153      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800585e:	4b7e      	ldr	r3, [pc, #504]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005866:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005868:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d10c      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800587a:	4b77      	ldr	r3, [pc, #476]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	4a75      	ldr	r2, [pc, #468]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588c:	e01e      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800588e:	4b72      	ldr	r3, [pc, #456]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589a:	d106      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058a2:	d102      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058a4:	4b6e      	ldr	r3, [pc, #440]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a8:	e010      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058aa:	4b6b      	ldr	r3, [pc, #428]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058b6:	d106      	bne.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058be:	d102      	bne.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c4:	e002      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058ca:	e11c      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80058cc:	e11b      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058d2:	e118      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058da:	d133      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80058dc:	4b5e      	ldr	r3, [pc, #376]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f2:	d012      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80058f4:	e023      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058f6:	4b58      	ldr	r3, [pc, #352]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005902:	d107      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fbc3 	bl	8006094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005912:	e0f8      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005918:	e0f5      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800591a:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005926:	d107      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005928:	f107 0318 	add.w	r3, r7, #24
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f909 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005936:	e0e6      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800593c:	e0e3      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005942:	e0e0      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594a:	f040 808d 	bne.w	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800594e:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005956:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800595e:	d06b      	beq.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005966:	d874      	bhi.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d056      	beq.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d86c      	bhi.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800597e:	d03b      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005986:	d864      	bhi.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598e:	d021      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005996:	d85c      	bhi.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059a4:	d004      	beq.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80059a6:	e054      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80059a8:	f000 f8b6 	bl	8005b18 <HAL_RCCEx_GetD3PCLK1Freq>
 80059ac:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80059ae:	e0aa      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b0:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059bc:	d107      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059be:	f107 0318 	add.w	r3, r7, #24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f8be 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059cc:	e09b      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d2:	e098      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059d4:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e0:	d107      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fa00 	bl	8005dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059f0:	e089      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059f6:	e086      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059f8:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d109      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a04:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	08db      	lsrs	r3, r3, #3
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
 8005a14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a16:	e076      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1c:	e073      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a30:	e069      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a36:	e066      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a44:	d102      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8005a46:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a4a:	e05c      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a50:	e059      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a56:	e056      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	03d09000 	.word	0x03d09000
 8005a60:	003d0900 	.word	0x003d0900
 8005a64:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6e:	d148      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005a70:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a80:	d02a      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a88:	d838      	bhi.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a96:	d00d      	beq.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005a98:	e030      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa6:	d102      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005aac:	e02b      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab2:	e028      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fae4 	bl	8006094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ad0:	e019      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad6:	e016      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ae6:	f107 0318 	add.w	r3, r7, #24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f82a 	bl	8005b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005af4:	e007      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b00:	e001      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3740      	adds	r7, #64	; 0x40
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	58024400 	.word	0x58024400
 8005b14:	017d7840 	.word	0x017d7840

08005b18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b1c:	f7fe fcae 	bl	800447c <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	08009da0 	.word	0x08009da0

08005b44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b4c:	4ba1      	ldr	r3, [pc, #644]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b56:	4b9f      	ldr	r3, [pc, #636]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	0b1b      	lsrs	r3, r3, #12
 8005b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b62:	4b9c      	ldr	r3, [pc, #624]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b6e:	4b99      	ldr	r3, [pc, #612]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	08db      	lsrs	r3, r3, #3
 8005b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8111 	beq.w	8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	f000 8083 	beq.w	8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	f200 80a1 	bhi.w	8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d056      	beq.n	8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bae:	e099      	b.n	8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb0:	4b88      	ldr	r3, [pc, #544]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02d      	beq.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bbc:	4b85      	ldr	r3, [pc, #532]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	08db      	lsrs	r3, r3, #3
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	4a84      	ldr	r2, [pc, #528]	; (8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b7b      	ldr	r3, [pc, #492]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c16:	e087      	b.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005de0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c5a:	e065      	b.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6e:	4b59      	ldr	r3, [pc, #356]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c9e:	e043      	b.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b48      	ldr	r3, [pc, #288]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ce2:	e021      	b.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	0a5b      	lsrs	r3, r3, #9
 8005d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4e:	ee17 2a90 	vmov	r2, s15
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d56:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7c:	ee17 2a90 	vmov	r2, s15
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d84:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	0e1b      	lsrs	r3, r3, #24
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005daa:	ee17 2a90 	vmov	r2, s15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005db2:	e008      	b.n	8005dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	3724      	adds	r7, #36	; 0x24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	03d09000 	.word	0x03d09000
 8005ddc:	46000000 	.word	0x46000000
 8005de0:	4c742400 	.word	0x4c742400
 8005de4:	4a742400 	.word	0x4a742400
 8005de8:	4bbebc20 	.word	0x4bbebc20

08005dec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005df4:	4ba1      	ldr	r3, [pc, #644]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005dfe:	4b9f      	ldr	r3, [pc, #636]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	0d1b      	lsrs	r3, r3, #20
 8005e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e0a:	4b9c      	ldr	r3, [pc, #624]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e16:	4b99      	ldr	r3, [pc, #612]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	08db      	lsrs	r3, r3, #3
 8005e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8111 	beq.w	800605c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	f000 8083 	beq.w	8005f48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	f200 80a1 	bhi.w	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d056      	beq.n	8005f04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e56:	e099      	b.n	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e58:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d02d      	beq.n	8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e64:	4b85      	ldr	r3, [pc, #532]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	08db      	lsrs	r3, r3, #3
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	4a84      	ldr	r2, [pc, #528]	; (8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	4b7b      	ldr	r3, [pc, #492]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ebe:	e087      	b.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006088 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed2:	4b6a      	ldr	r3, [pc, #424]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f02:	e065      	b.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f16:	4b59      	ldr	r3, [pc, #356]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f46:	e043      	b.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5a:	4b48      	ldr	r3, [pc, #288]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f8a:	e021      	b.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005fd0:	4b2a      	ldr	r3, [pc, #168]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	0a5b      	lsrs	r3, r3, #9
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff6:	ee17 2a90 	vmov	r2, s15
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	0c1b      	lsrs	r3, r3, #16
 8006004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006014:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006018:	edd7 6a07 	vldr	s13, [r7, #28]
 800601c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006024:	ee17 2a90 	vmov	r2, s15
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800602c:	4b13      	ldr	r3, [pc, #76]	; (800607c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	0e1b      	lsrs	r3, r3, #24
 8006032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006046:	edd7 6a07 	vldr	s13, [r7, #28]
 800604a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006052:	ee17 2a90 	vmov	r2, s15
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800605a:	e008      	b.n	800606e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
}
 800606e:	bf00      	nop
 8006070:	3724      	adds	r7, #36	; 0x24
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	03d09000 	.word	0x03d09000
 8006084:	46000000 	.word	0x46000000
 8006088:	4c742400 	.word	0x4c742400
 800608c:	4a742400 	.word	0x4a742400
 8006090:	4bbebc20 	.word	0x4bbebc20

08006094 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800609c:	4ba0      	ldr	r3, [pc, #640]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80060a6:	4b9e      	ldr	r3, [pc, #632]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80060b2:	4b9b      	ldr	r3, [pc, #620]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80060bc:	4b98      	ldr	r3, [pc, #608]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	fb02 f303 	mul.w	r3, r2, r3
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8111 	beq.w	8006302 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	f000 8083 	beq.w	80061ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	f200 80a1 	bhi.w	8006232 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d056      	beq.n	80061aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80060fc:	e099      	b.n	8006232 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060fe:	4b88      	ldr	r3, [pc, #544]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d02d      	beq.n	8006166 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800610a:	4b85      	ldr	r3, [pc, #532]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	08db      	lsrs	r3, r3, #3
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	4a83      	ldr	r2, [pc, #524]	; (8006324 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006134:	4b7a      	ldr	r3, [pc, #488]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006144:	ed97 6a03 	vldr	s12, [r7, #12]
 8006148:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800614c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006160:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006164:	e087      	b.n	8006276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006170:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800632c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006178:	4b69      	ldr	r3, [pc, #420]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006188:	ed97 6a03 	vldr	s12, [r7, #12]
 800618c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061a8:	e065      	b.n	8006276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006330 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80061b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061bc:	4b58      	ldr	r3, [pc, #352]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ec:	e043      	b.n	8006276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006334 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80061fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006200:	4b47      	ldr	r3, [pc, #284]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006210:	ed97 6a03 	vldr	s12, [r7, #12]
 8006214:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006230:	e021      	b.n	8006276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800632c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006244:	4b36      	ldr	r3, [pc, #216]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006254:	ed97 6a03 	vldr	s12, [r7, #12]
 8006258:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800625c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006270:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006274:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006276:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	0a5b      	lsrs	r3, r3, #9
 800627c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800628c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006290:	edd7 6a07 	vldr	s13, [r7, #28]
 8006294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629c:	ee17 2a90 	vmov	r2, s15
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062be:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ca:	ee17 2a90 	vmov	r2, s15
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	0e1b      	lsrs	r3, r3, #24
 80062d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f8:	ee17 2a90 	vmov	r2, s15
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006300:	e008      	b.n	8006314 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	3724      	adds	r7, #36	; 0x24
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	58024400 	.word	0x58024400
 8006324:	03d09000 	.word	0x03d09000
 8006328:	46000000 	.word	0x46000000
 800632c:	4c742400 	.word	0x4c742400
 8006330:	4a742400 	.word	0x4a742400
 8006334:	4bbebc20 	.word	0x4bbebc20

08006338 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006346:	4b53      	ldr	r3, [pc, #332]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d101      	bne.n	8006356 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e099      	b.n	800648a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006356:	4b4f      	ldr	r3, [pc, #316]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4e      	ldr	r2, [pc, #312]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800635c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006362:	f7fa f879 	bl	8000458 <HAL_GetTick>
 8006366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006368:	e008      	b.n	800637c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800636a:	f7fa f875 	bl	8000458 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e086      	b.n	800648a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800637c:	4b45      	ldr	r3, [pc, #276]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f0      	bne.n	800636a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006388:	4b42      	ldr	r3, [pc, #264]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	493f      	ldr	r1, [pc, #252]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	628b      	str	r3, [r1, #40]	; 0x28
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	025b      	lsls	r3, r3, #9
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	061b      	lsls	r3, r3, #24
 80063c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063cc:	4931      	ldr	r1, [pc, #196]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063d2:	4b30      	ldr	r3, [pc, #192]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	492d      	ldr	r1, [pc, #180]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	f023 0220 	bic.w	r2, r3, #32
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	4928      	ldr	r1, [pc, #160]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063f6:	4b27      	ldr	r3, [pc, #156]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	4a26      	ldr	r2, [pc, #152]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 80063fc:	f023 0310 	bic.w	r3, r3, #16
 8006400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <RCCEx_PLL2_Config+0x160>)
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	69d2      	ldr	r2, [r2, #28]
 800640e:	00d2      	lsls	r2, r2, #3
 8006410:	4920      	ldr	r1, [pc, #128]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800641c:	f043 0310 	orr.w	r3, r3, #16
 8006420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006428:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800642e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006434:	e00f      	b.n	8006456 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d106      	bne.n	800644a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4a14      	ldr	r2, [pc, #80]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006448:	e005      	b.n	8006456 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	4a11      	ldr	r2, [pc, #68]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006454:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006456:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a0e      	ldr	r2, [pc, #56]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800645c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006462:	f7f9 fff9 	bl	8000458 <HAL_GetTick>
 8006466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006468:	e008      	b.n	800647c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800646a:	f7f9 fff5 	bl	8000458 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <RCCEx_PLL2_Config+0x15c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
 8006498:	ffff0007 	.word	0xffff0007

0800649c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064aa:	4b53      	ldr	r3, [pc, #332]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d101      	bne.n	80064ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e099      	b.n	80065ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ba:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4e      	ldr	r2, [pc, #312]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c6:	f7f9 ffc7 	bl	8000458 <HAL_GetTick>
 80064ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064cc:	e008      	b.n	80064e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064ce:	f7f9 ffc3 	bl	8000458 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e086      	b.n	80065ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064e0:	4b45      	ldr	r3, [pc, #276]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064ec:	4b42      	ldr	r3, [pc, #264]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	051b      	lsls	r3, r3, #20
 80064fa:	493f      	ldr	r1, [pc, #252]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	3b01      	subs	r3, #1
 8006510:	025b      	lsls	r3, r3, #9
 8006512:	b29b      	uxth	r3, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	3b01      	subs	r3, #1
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006530:	4931      	ldr	r1, [pc, #196]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006536:	4b30      	ldr	r3, [pc, #192]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	492d      	ldr	r1, [pc, #180]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	4928      	ldr	r1, [pc, #160]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800655a:	4b27      	ldr	r3, [pc, #156]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <RCCEx_PLL3_Config+0x160>)
 800656c:	4013      	ands	r3, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	69d2      	ldr	r2, [r2, #28]
 8006572:	00d2      	lsls	r2, r2, #3
 8006574:	4920      	ldr	r1, [pc, #128]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800657a:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800658c:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 8006592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006598:	e00f      	b.n	80065ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065a0:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a14      	ldr	r2, [pc, #80]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065ac:	e005      	b.n	80065ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	4a11      	ldr	r2, [pc, #68]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a0e      	ldr	r2, [pc, #56]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c6:	f7f9 ff47 	bl	8000458 <HAL_GetTick>
 80065ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065cc:	e008      	b.n	80065e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065ce:	f7f9 ff43 	bl	8000458 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <RCCEx_PLL3_Config+0x15c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
 80065fc:	ffff0007 	.word	0xffff0007

08006600 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d904      	bls.n	800661e <HAL_SAI_InitProtocol+0x1e>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3b03      	subs	r3, #3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d812      	bhi.n	8006642 <HAL_SAI_InitProtocol+0x42>
 800661c:	e008      	b.n	8006630 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fb49 	bl	8006cbc <SAI_InitI2S>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]
      break;
 800662e:	e00b      	b.n	8006648 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fbf2 	bl	8006e20 <SAI_InitPCM>
 800663c:	4603      	mov	r3, r0
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	e002      	b.n	8006648 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	75fb      	strb	r3, [r7, #23]
      break;
 8006646:	bf00      	nop
  }

  if (status == HAL_OK)
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f808 	bl	8006664 <HAL_SAI_Init>
 8006654:	4603      	mov	r3, r0
 8006656:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e1fb      	b.n	8006a6e <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800667c:	2b01      	cmp	r3, #1
 800667e:	d113      	bne.n	80066a8 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a96      	ldr	r2, [pc, #600]	; (80068e0 <HAL_SAI_Init+0x27c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_SAI_Init+0x30>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a95      	ldr	r2, [pc, #596]	; (80068e4 <HAL_SAI_Init+0x280>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d107      	bne.n	80066a4 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006698:	2b01      	cmp	r3, #1
 800669a:	d103      	bne.n	80066a4 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e1e2      	b.n	8006a6e <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a8c      	ldr	r2, [pc, #560]	; (80068e0 <HAL_SAI_Init+0x27c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_SAI_Init+0x58>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a8c      	ldr	r2, [pc, #560]	; (80068e8 <HAL_SAI_Init+0x284>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d102      	bne.n	80066c2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80066bc:	4b8b      	ldr	r3, [pc, #556]	; (80068ec <HAL_SAI_Init+0x288>)
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e00e      	b.n	80066e0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a87      	ldr	r2, [pc, #540]	; (80068e4 <HAL_SAI_Init+0x280>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_SAI_Init+0x72>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a87      	ldr	r2, [pc, #540]	; (80068f0 <HAL_SAI_Init+0x28c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d102      	bne.n	80066dc <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80066d6:	4b87      	ldr	r3, [pc, #540]	; (80068f4 <HAL_SAI_Init+0x290>)
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	e001      	b.n	80066e0 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e1c6      	b.n	8006a6e <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fffb 	bl	80076f0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc4a 	bl	8006f94 <SAI_Disable>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e1b1      	b.n	8006a6e <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d00c      	beq.n	8006734 <HAL_SAI_Init+0xd0>
 800671a:	2b02      	cmp	r3, #2
 800671c:	d80d      	bhi.n	800673a <HAL_SAI_Init+0xd6>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <HAL_SAI_Init+0xc4>
 8006722:	2b01      	cmp	r3, #1
 8006724:	d003      	beq.n	800672e <HAL_SAI_Init+0xca>
 8006726:	e008      	b.n	800673a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800672c:	e008      	b.n	8006740 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800672e:	2310      	movs	r3, #16
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006732:	e005      	b.n	8006740 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006734:	2320      	movs	r3, #32
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006738:	e002      	b.n	8006740 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800673e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b05      	cmp	r3, #5
 8006746:	d822      	bhi.n	800678e <HAL_SAI_Init+0x12a>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_SAI_Init+0xec>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006769 	.word	0x08006769
 8006754:	0800676f 	.word	0x0800676f
 8006758:	08006777 	.word	0x08006777
 800675c:	0800678f 	.word	0x0800678f
 8006760:	0800678f 	.word	0x0800678f
 8006764:	0800677f 	.word	0x0800677f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
      break;
 800676c:	e012      	b.n	8006794 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800676e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006772:	61fb      	str	r3, [r7, #28]
      break;
 8006774:	e00e      	b.n	8006794 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800677a:	61fb      	str	r3, [r7, #28]
      break;
 800677c:	e00a      	b.n	8006794 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800677e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006782:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	f043 0303 	orr.w	r3, r3, #3
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800678c:	e002      	b.n	8006794 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
      break;
 8006792:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006798:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8084 	beq.w	80068ac <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a4c      	ldr	r2, [pc, #304]	; (80068e0 <HAL_SAI_Init+0x27c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_SAI_Init+0x158>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a4c      	ldr	r2, [pc, #304]	; (80068e8 <HAL_SAI_Init+0x284>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d104      	bne.n	80067c6 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80067bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80067c0:	f7fe fd86 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80067c4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a46      	ldr	r2, [pc, #280]	; (80068e4 <HAL_SAI_Init+0x280>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d104      	bne.n	80067da <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80067d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80067d4:	f7fe fd7c 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80067d8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a44      	ldr	r2, [pc, #272]	; (80068f0 <HAL_SAI_Init+0x28c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d104      	bne.n	80067ee <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80067e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067e8:	f7fe fd72 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80067ec:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067f6:	d120      	bne.n	800683a <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d102      	bne.n	8006806 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e00a      	b.n	800681c <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	2b08      	cmp	r3, #8
 800680c:	d103      	bne.n	8006816 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800680e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e002      	b.n	800681c <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	4619      	mov	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	fbb1 f3f3 	udiv	r3, r1, r3
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	e017      	b.n	800686a <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006842:	d101      	bne.n	8006848 <HAL_SAI_Init+0x1e4>
 8006844:	2302      	movs	r3, #2
 8006846:	e000      	b.n	800684a <HAL_SAI_Init+0x1e6>
 8006848:	2301      	movs	r3, #1
 800684a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	4619      	mov	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	fbb1 f3f3 	udiv	r3, r1, r3
 8006868:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <HAL_SAI_Init+0x294>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	08da      	lsrs	r2, r3, #3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006878:	6939      	ldr	r1, [r7, #16]
 800687a:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <HAL_SAI_Init+0x294>)
 800687c:	fba3 2301 	umull	r2, r3, r3, r1
 8006880:	08da      	lsrs	r2, r3, #3
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	1aca      	subs	r2, r1, r3
 800688c:	2a08      	cmp	r2, #8
 800688e:	d904      	bls.n	800689a <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d104      	bne.n	80068ac <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	085a      	lsrs	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_SAI_Init+0x258>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d109      	bne.n	80068d0 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_SAI_Init+0x264>
 80068c4:	2300      	movs	r3, #0
 80068c6:	e001      	b.n	80068cc <HAL_SAI_Init+0x268>
 80068c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e017      	b.n	8006900 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d111      	bne.n	80068fc <HAL_SAI_Init+0x298>
 80068d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068dc:	e00f      	b.n	80068fe <HAL_SAI_Init+0x29a>
 80068de:	bf00      	nop
 80068e0:	40015804 	.word	0x40015804
 80068e4:	58005404 	.word	0x58005404
 80068e8:	40015824 	.word	0x40015824
 80068ec:	40015800 	.word	0x40015800
 80068f0:	58005424 	.word	0x58005424
 80068f4:	58005400 	.word	0x58005400
 80068f8:	cccccccd 	.word	0xcccccccd
 80068fc:	2300      	movs	r3, #0
 80068fe:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6819      	ldr	r1, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b5b      	ldr	r3, [pc, #364]	; (8006a78 <HAL_SAI_Init+0x414>)
 800690c:	400b      	ands	r3, r1
 800690e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006924:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	431a      	orrs	r2, r3
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006938:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006944:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	051b      	lsls	r3, r3, #20
 800694c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006952:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6859      	ldr	r1, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b43      	ldr	r3, [pc, #268]	; (8006a7c <HAL_SAI_Init+0x418>)
 800696e:	400b      	ands	r3, r1
 8006970:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6859      	ldr	r1, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <HAL_SAI_Init+0x41c>)
 800699c:	400b      	ands	r3, r1
 800699e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6899      	ldr	r1, [r3, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80069b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80069b6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80069bc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	3b01      	subs	r3, #1
 80069c4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80069c6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	f24f 0320 	movw	r3, #61472	; 0xf020
 80069de:	400b      	ands	r3, r1
 80069e0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68d9      	ldr	r1, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80069f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fe:	3b01      	subs	r3, #1
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <HAL_SAI_Init+0x420>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d004      	beq.n	8006a20 <HAL_SAI_Init+0x3bc>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1b      	ldr	r2, [pc, #108]	; (8006a88 <HAL_SAI_Init+0x424>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d119      	bne.n	8006a54 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	f023 0201 	bic.w	r2, r3, #1
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10e      	bne.n	8006a54 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006a42:	431a      	orrs	r2, r3
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4c:	f043 0201 	orr.w	r2, r3, #1
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3728      	adds	r7, #40	; 0x28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	f005c010 	.word	0xf005c010
 8006a7c:	ffff1ff0 	.word	0xffff1ff0
 8006a80:	fff88000 	.word	0xfff88000
 8006a84:	40015804 	.word	0x40015804
 8006a88:	58005404 	.word	0x58005404

08006a8c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e050      	b.n	8006b40 <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ab6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fa6b 	bl	8006f94 <SAI_Disable>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e033      	b.n	8006b40 <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0208 	orr.w	r2, r2, #8
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <HAL_SAI_DeInit+0xbc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_SAI_DeInit+0x70>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a15      	ldr	r2, [pc, #84]	; (8006b4c <HAL_SAI_DeInit+0xc0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d111      	bne.n	8006b20 <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a11      	ldr	r2, [pc, #68]	; (8006b48 <HAL_SAI_DeInit+0xbc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d101      	bne.n	8006b0a <HAL_SAI_DeInit+0x7e>
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <HAL_SAI_DeInit+0xc4>)
 8006b08:	e000      	b.n	8006b0c <HAL_SAI_DeInit+0x80>
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <HAL_SAI_DeInit+0xc8>)
 8006b0c:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b18:	f023 0201 	bic.w	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	645a      	str	r2, [r3, #68]	; 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 ff07 	bl	8007934 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40015804 	.word	0x40015804
 8006b4c:	58005404 	.word	0x58005404
 8006b50:	40015800 	.word	0x40015800
 8006b54:	58005400 	.word	0x58005400

08006b58 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_SAI_Receive_DMA+0x1a>
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e079      	b.n	8006c6a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d172      	bne.n	8006c68 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_SAI_Receive_DMA+0x38>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e06c      	b.n	8006c6a <HAL_SAI_Receive_DMA+0x112>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2222      	movs	r2, #34	; 0x22
 8006bba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <HAL_SAI_Receive_DMA+0x11c>)
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bce:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <HAL_SAI_Receive_DMA+0x120>)
 8006bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd8:	4a28      	ldr	r2, [pc, #160]	; (8006c7c <HAL_SAI_Receive_DMA+0x124>)
 8006bda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be2:	2200      	movs	r2, #0
 8006be4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	331c      	adds	r3, #28
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006c00:	f7fa fb40 	bl	8001284 <HAL_DMA_Start_IT>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e029      	b.n	8006c6a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006c16:	2100      	movs	r1, #0
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f983 	bl	8006f24 <SAI_InterruptFlag>
 8006c1e:	4601      	mov	r1, r0
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006c3c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c5a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	08007069 	.word	0x08007069
 8006c78:	08007009 	.word	0x08007009
 8006c7c:	08007085 	.word	0x08007085

08006c80 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <SAI_InitI2S+0x2e>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d103      	bne.n	8006cf2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	651a      	str	r2, [r3, #80]	; 0x50
 8006cf0:	e002      	b.n	8006cf8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d06:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e077      	b.n	8006e12 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006d34:	665a      	str	r2, [r3, #100]	; 0x64
 8006d36:	e006      	b.n	8006d46 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d3e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	665a      	str	r2, [r3, #100]	; 0x64
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d84f      	bhi.n	8006dec <SAI_InitI2S+0x130>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <SAI_InitI2S+0x98>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d87 	.word	0x08006d87
 8006d5c:	08006da9 	.word	0x08006da9
 8006d60:	08006dcb 	.word	0x08006dcb

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2280      	movs	r2, #128	; 0x80
 8006d68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	085b      	lsrs	r3, r3, #1
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	085b      	lsrs	r3, r3, #1
 8006d78:	011a      	lsls	r2, r3, #4
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2240      	movs	r2, #64	; 0x40
 8006d82:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d84:	e035      	b.n	8006df2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2280      	movs	r2, #128	; 0x80
 8006d8a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	019a      	lsls	r2, r3, #6
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006da6:	e024      	b.n	8006df2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	22c0      	movs	r2, #192	; 0xc0
 8006dac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	019a      	lsls	r2, r3, #6
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2280      	movs	r2, #128	; 0x80
 8006dc6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006dc8:	e013      	b.n	8006df2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	22e0      	movs	r2, #224	; 0xe0
 8006dce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	019a      	lsls	r2, r3, #6
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006dea:	e002      	b.n	8006df2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
      break;
 8006df0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d10b      	bne.n	8006e10 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d102      	bne.n	8006e04 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2210      	movs	r2, #16
 8006e02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d102      	bne.n	8006e10 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop

08006e20 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <SAI_InitPCM+0x2e>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d103      	bne.n	8006e56 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	651a      	str	r2, [r3, #80]	; 0x50
 8006e54:	e002      	b.n	8006e5c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e68:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e70:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e84:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d103      	bne.n	8006e94 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	659a      	str	r2, [r3, #88]	; 0x58
 8006e92:	e002      	b.n	8006e9a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	220d      	movs	r2, #13
 8006e98:	659a      	str	r2, [r3, #88]	; 0x58
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d837      	bhi.n	8006f10 <SAI_InitPCM+0xf0>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <SAI_InitPCM+0x88>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006eb9 	.word	0x08006eb9
 8006eac:	08006ecf 	.word	0x08006ecf
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006efb 	.word	0x08006efb
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	011a      	lsls	r2, r3, #4
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2240      	movs	r2, #64	; 0x40
 8006eca:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006ecc:	e023      	b.n	8006f16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2280      	movs	r2, #128	; 0x80
 8006ee0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006ee2:	e018      	b.n	8006f16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	22c0      	movs	r2, #192	; 0xc0
 8006ee8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2280      	movs	r2, #128	; 0x80
 8006ef6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006ef8:	e00d      	b.n	8006f16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	22e0      	movs	r2, #224	; 0xe0
 8006efe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2280      	movs	r2, #128	; 0x80
 8006f0c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006f0e:	e002      	b.n	8006f16 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
      break;
 8006f14:	bf00      	nop
  }

  return status;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d103      	bne.n	8006f42 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f043 0308 	orr.w	r3, r3, #8
 8006f40:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d10b      	bne.n	8006f62 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d003      	beq.n	8006f5a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d103      	bne.n	8006f62 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f043 0310 	orr.w	r3, r3, #16
 8006f60:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d003      	beq.n	8006f72 <SAI_InterruptFlag+0x4e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d104      	bne.n	8006f7c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e003      	b.n	8006f84 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f043 0304 	orr.w	r3, r3, #4
 8006f82:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006f84:	68fb      	ldr	r3, [r7, #12]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006f9c:	4b18      	ldr	r3, [pc, #96]	; (8007000 <SAI_Disable+0x6c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <SAI_Disable+0x70>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	0b1b      	lsrs	r3, r3, #12
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fbe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	72fb      	strb	r3, [r7, #11]
      break;
 8006fda:	e009      	b.n	8006ff0 <SAI_Disable+0x5c>
    }
    count--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e7      	bne.n	8006fc0 <SAI_Disable+0x2c>

  return status;
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	24000410 	.word	0x24000410
 8007004:	95cbec1b 	.word	0x95cbec1b

08007008 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d01c      	beq.n	800705a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800702e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007038:	2100      	movs	r1, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff ff72 	bl	8006f24 <SAI_InterruptFlag>
 8007040:	4603      	mov	r3, r0
 8007042:	43d9      	mvns	r1, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	400a      	ands	r2, r1
 8007050:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff fe10 	bl	8006c80 <HAL_SAI_RxCpltCallback>
#endif
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fe0c 	bl	8006c94 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fb fa8a 	bl	80025ac <HAL_DMA_GetError>
 8007098:	4603      	mov	r3, r0
 800709a:	2b02      	cmp	r3, #2
 800709c:	d01d      	beq.n	80070da <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80070bc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff ff68 	bl	8006f94 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fde7 	bl	8006ca8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b0c2      	sub	sp, #264	; 0x108
 80070e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070ea:	f7f9 f92f 	bl	800034c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070ee:	f000 f843 	bl	8007178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070f2:	f000 fa2d 	bl	8007550 <MX_GPIO_Init>
  MX_BDMA_Init();
 80070f6:	f000 f9b3 	bl	8007460 <MX_BDMA_Init>
  MX_SAI4_Init();
 80070fa:	f000 f953 	bl	80073a4 <MX_SAI4_Init>
  MX_CRC_Init();
 80070fe:	f000 f8a9 	bl	8007254 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8007102:	f000 fa8f 	bl	8007624 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 8007106:	f000 f9d3 	bl	80074b0 <MX_DMA_Init>
  MX_SAI1_Init();
 800710a:	f000 f917 	bl	800733c <MX_SAI1_Init>
  MX_RAMECC_Init();
 800710e:	f000 f8e3 	bl	80072d8 <MX_RAMECC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t *pdm_buffer = (uint8_t*)SRAM4_BASE;
 8007112:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8007116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* INITIALIZE */
  HAL_SAI_MspInit(&hsai_BlockA4);
 800711a:	4814      	ldr	r0, [pc, #80]	; (800716c <main+0x88>)
 800711c:	f000 fae8 	bl	80076f0 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 8007120:	4812      	ldr	r0, [pc, #72]	; (800716c <main+0x88>)
 8007122:	f7ff fa9f 	bl	8006664 <HAL_SAI_Init>
  uint16_t pcm_buffer[128] = {0};
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	4618      	mov	r0, r3
 800712a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800712e:	461a      	mov	r2, r3
 8007130:	2100      	movs	r1, #0
 8007132:	f002 fc39 	bl	80099a8 <memset>

  // need to move data from D3 into D2 (where SAI1 is)
  // bdma_ch1 to SRAM4 -> dma_mux2

  if(HAL_SAI_Receive_DMA(&hsai_BlockA4, pdm_buffer, 64) == HAL_OK)
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800713c:	480b      	ldr	r0, [pc, #44]	; (800716c <main+0x88>)
 800713e:	f7ff fd0b 	bl	8006b58 <HAL_SAI_Receive_DMA>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <main+0x84>
  {
	  HAL_SAI_DeInit(&hsai_BlockA4);
 8007148:	4808      	ldr	r0, [pc, #32]	; (800716c <main+0x88>)
 800714a:	f7ff fc9f 	bl	8006a8c <HAL_SAI_DeInit>
	  HAL_SAI_MspInit(&hsai_BlockB1);
 800714e:	4808      	ldr	r0, [pc, #32]	; (8007170 <main+0x8c>)
 8007150:	f000 face 	bl	80076f0 <HAL_SAI_MspInit>
	  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	4a07      	ldr	r2, [pc, #28]	; (8007174 <main+0x90>)
 8007158:	4619      	mov	r1, r3
 800715a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800715e:	f002 fbdf 	bl	8009920 <PDM_Filter>
	  BSP_LED_On(LED2);
 8007162:	2001      	movs	r0, #1
 8007164:	f7f9 f8d4 	bl	8000310 <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8007168:	e7fe      	b.n	8007168 <main+0x84>
 800716a:	bf00      	nop
 800716c:	240005ec 	.word	0x240005ec
 8007170:	24000554 	.word	0x24000554
 8007174:	2400071c 	.word	0x2400071c

08007178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b09c      	sub	sp, #112	; 0x70
 800717c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800717e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007182:	224c      	movs	r2, #76	; 0x4c
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f002 fc0e 	bl	80099a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800718c:	1d3b      	adds	r3, r7, #4
 800718e:	2220      	movs	r2, #32
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f002 fc08 	bl	80099a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8007198:	2004      	movs	r0, #4
 800719a:	f7fc f9fb 	bl	8003594 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800719e:	2300      	movs	r3, #0
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	4b2b      	ldr	r3, [pc, #172]	; (8007250 <SystemClock_Config+0xd8>)
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <SystemClock_Config+0xd8>)
 80071a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071ac:	6193      	str	r3, [r2, #24]
 80071ae:	4b28      	ldr	r3, [pc, #160]	; (8007250 <SystemClock_Config+0xd8>)
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80071ba:	bf00      	nop
 80071bc:	4b24      	ldr	r3, [pc, #144]	; (8007250 <SystemClock_Config+0xd8>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c8:	d1f8      	bne.n	80071bc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80071ca:	2302      	movs	r3, #2
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071d6:	2302      	movs	r3, #2
 80071d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071da:	2300      	movs	r3, #0
 80071dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80071de:	2304      	movs	r3, #4
 80071e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80071e2:	2318      	movs	r3, #24
 80071e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 80071ea:	237d      	movs	r3, #125	; 0x7d
 80071ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80071ee:	2302      	movs	r3, #2
 80071f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80071f2:	230c      	movs	r3, #12
 80071f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80071f6:	2300      	movs	r3, #0
 80071f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f7fc fa5e 	bl	80036c4 <HAL_RCC_OscConfig>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800720e:	f000 fa03 	bl	8007618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007212:	233f      	movs	r3, #63	; 0x3f
 8007214:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007216:	2303      	movs	r3, #3
 8007218:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800721e:	2308      	movs	r3, #8
 8007220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007222:	2340      	movs	r3, #64	; 0x40
 8007224:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007226:	2340      	movs	r3, #64	; 0x40
 8007228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800722a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800722e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007234:	1d3b      	adds	r3, r7, #4
 8007236:	2102      	movs	r1, #2
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fdef 	bl	8003e1c <HAL_RCC_ClockConfig>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007244:	f000 f9e8 	bl	8007618 <Error_Handler>
  }
}
 8007248:	bf00      	nop
 800724a:	3770      	adds	r7, #112	; 0x70
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	58024800 	.word	0x58024800

08007254 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800725a:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <MX_CRC_Init+0x78>)
 800725c:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <MX_CRC_Init+0x7c>)
 800725e:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007260:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <MX_CRC_Init+0x78>)
 8007262:	2200      	movs	r2, #0
 8007264:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007266:	4b19      	ldr	r3, [pc, #100]	; (80072cc <MX_CRC_Init+0x78>)
 8007268:	2200      	movs	r2, #0
 800726a:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800726c:	4b17      	ldr	r3, [pc, #92]	; (80072cc <MX_CRC_Init+0x78>)
 800726e:	2200      	movs	r2, #0
 8007270:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007272:	4b16      	ldr	r3, [pc, #88]	; (80072cc <MX_CRC_Init+0x78>)
 8007274:	2200      	movs	r2, #0
 8007276:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007278:	4b14      	ldr	r3, [pc, #80]	; (80072cc <MX_CRC_Init+0x78>)
 800727a:	2201      	movs	r2, #1
 800727c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800727e:	4813      	ldr	r0, [pc, #76]	; (80072cc <MX_CRC_Init+0x78>)
 8007280:	f7f9 fa06 	bl	8000690 <HAL_CRC_Init>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800728a:	f000 f9c5 	bl	8007618 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <MX_CRC_Init+0x78>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <MX_CRC_Init+0x78>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <MX_CRC_Init+0x80>)
 80072a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072a4:	4a0b      	ldr	r2, [pc, #44]	; (80072d4 <MX_CRC_Init+0x80>)
 80072a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <MX_CRC_Init+0x80>)
 80072b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 80072bc:	4803      	ldr	r0, [pc, #12]	; (80072cc <MX_CRC_Init+0x78>)
 80072be:	f000 f9f5 	bl	80076ac <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	24000530 	.word	0x24000530
 80072d0:	58024c00 	.word	0x58024c00
 80072d4:	58024400 	.word	0x58024400

080072d8 <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <MX_RAMECC_Init+0x4c>)
 80072de:	4a12      	ldr	r2, [pc, #72]	; (8007328 <MX_RAMECC_Init+0x50>)
 80072e0:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 80072e2:	4810      	ldr	r0, [pc, #64]	; (8007324 <MX_RAMECC_Init+0x4c>)
 80072e4:	f7fc f9b0 	bl	8003648 <HAL_RAMECC_Init>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 80072ee:	f000 f993 	bl	8007618 <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <MX_RAMECC_Init+0x54>)
 80072f4:	4a0e      	ldr	r2, [pc, #56]	; (8007330 <MX_RAMECC_Init+0x58>)
 80072f6:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 80072f8:	480c      	ldr	r0, [pc, #48]	; (800732c <MX_RAMECC_Init+0x54>)
 80072fa:	f7fc f9a5 	bl	8003648 <HAL_RAMECC_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 8007304:	f000 f988 	bl	8007618 <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <MX_RAMECC_Init+0x5c>)
 800730a:	4a0b      	ldr	r2, [pc, #44]	; (8007338 <MX_RAMECC_Init+0x60>)
 800730c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800730e:	4809      	ldr	r0, [pc, #36]	; (8007334 <MX_RAMECC_Init+0x5c>)
 8007310:	f7fc f99a 	bl	8003648 <HAL_RAMECC_Init>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800731a:	f000 f97d 	bl	8007618 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	2400070c 	.word	0x2400070c
 8007328:	48023020 	.word	0x48023020
 800732c:	24000684 	.word	0x24000684
 8007330:	48023040 	.word	0x48023040
 8007334:	240004a8 	.word	0x240004a8
 8007338:	58027020 	.word	0x58027020

0800733c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8007340:	4b16      	ldr	r3, [pc, #88]	; (800739c <MX_SAI1_Init+0x60>)
 8007342:	4a17      	ldr	r2, [pc, #92]	; (80073a0 <MX_SAI1_Init+0x64>)
 8007344:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <MX_SAI1_Init+0x60>)
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <MX_SAI1_Init+0x60>)
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007352:	4b12      	ldr	r3, [pc, #72]	; (800739c <MX_SAI1_Init+0x60>)
 8007354:	2200      	movs	r2, #0
 8007356:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8007358:	4b10      	ldr	r3, [pc, #64]	; (800739c <MX_SAI1_Init+0x60>)
 800735a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800735e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <MX_SAI1_Init+0x60>)
 8007362:	2200      	movs	r2, #0
 8007364:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <MX_SAI1_Init+0x60>)
 8007368:	2200      	movs	r2, #0
 800736a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <MX_SAI1_Init+0x60>)
 800736e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <MX_SAI1_Init+0x60>)
 8007376:	2200      	movs	r2, #0
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800737a:	4b08      	ldr	r3, [pc, #32]	; (800739c <MX_SAI1_Init+0x60>)
 800737c:	2200      	movs	r2, #0
 800737e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007380:	2302      	movs	r3, #2
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	4805      	ldr	r0, [pc, #20]	; (800739c <MX_SAI1_Init+0x60>)
 8007388:	f7ff f93a 	bl	8006600 <HAL_SAI_InitProtocol>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <MX_SAI1_Init+0x5a>
  {
    Error_Handler();
 8007392:	f000 f941 	bl	8007618 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	24000554 	.word	0x24000554
 80073a0:	40015824 	.word	0x40015824

080073a4 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 80073a8:	4b2b      	ldr	r3, [pc, #172]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073aa:	4a2c      	ldr	r2, [pc, #176]	; (800745c <MX_SAI4_Init+0xb8>)
 80073ac:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 80073ae:	4b2a      	ldr	r3, [pc, #168]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 80073b4:	4b28      	ldr	r3, [pc, #160]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 80073ba:	4b27      	ldr	r3, [pc, #156]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073bc:	2240      	movs	r2, #64	; 0x40
 80073be:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80073c0:	4b25      	ldr	r3, [pc, #148]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80073c6:	4b24      	ldr	r3, [pc, #144]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 80073cc:	4b22      	ldr	r3, [pc, #136]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80073d2:	4b21      	ldr	r3, [pc, #132]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 80073d8:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80073de:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80073e0:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 80073e6:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 80073f2:	4b19      	ldr	r3, [pc, #100]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 80073fa:	4b17      	ldr	r3, [pc, #92]	; (8007458 <MX_SAI4_Init+0xb4>)
 80073fc:	2202      	movs	r2, #2
 80073fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8007400:	4b15      	ldr	r3, [pc, #84]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007406:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 8007408:	4b13      	ldr	r3, [pc, #76]	; (8007458 <MX_SAI4_Init+0xb4>)
 800740a:	2208      	movs	r2, #8
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 800740e:	4b12      	ldr	r3, [pc, #72]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007410:	2201      	movs	r2, #1
 8007412:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007414:	4b10      	ldr	r3, [pc, #64]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007416:	2200      	movs	r2, #0
 8007418:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800741a:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <MX_SAI4_Init+0xb4>)
 800741c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007420:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007424:	2200      	movs	r2, #0
 8007426:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <MX_SAI4_Init+0xb4>)
 800742a:	2200      	movs	r2, #0
 800742c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800742e:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007430:	2200      	movs	r2, #0
 8007432:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8007434:	4b08      	ldr	r3, [pc, #32]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007436:	2201      	movs	r2, #1
 8007438:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <MX_SAI4_Init+0xb4>)
 800743c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007440:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <MX_SAI4_Init+0xb4>)
 8007444:	f7ff f90e 	bl	8006664 <HAL_SAI_Init>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 800744e:	f000 f8e3 	bl	8007618 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8007452:	bf00      	nop
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	240005ec 	.word	0x240005ec
 800745c:	58005404 	.word	0x58005404

08007460 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <MX_BDMA_Init+0x4c>)
 8007468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800746c:	4a0f      	ldr	r2, [pc, #60]	; (80074ac <MX_BDMA_Init+0x4c>)
 800746e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007476:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <MX_BDMA_Init+0x4c>)
 8007478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800747c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8007484:	2200      	movs	r2, #0
 8007486:	2100      	movs	r1, #0
 8007488:	2080      	movs	r0, #128	; 0x80
 800748a:	f7f9 f8cc 	bl	8000626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800748e:	2080      	movs	r0, #128	; 0x80
 8007490:	f7f9 f8e3 	bl	800065a <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	2082      	movs	r0, #130	; 0x82
 800749a:	f7f9 f8c4 	bl	8000626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800749e:	2082      	movs	r0, #130	; 0x82
 80074a0:	f7f9 f8db 	bl	800065a <HAL_NVIC_EnableIRQ>

}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	58024400 	.word	0x58024400

080074b0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <MX_DMA_Init+0x94>)
 80074b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074bc:	4a21      	ldr	r2, [pc, #132]	; (8007544 <MX_DMA_Init+0x94>)
 80074be:	f043 0302 	orr.w	r3, r3, #2
 80074c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80074c6:	4b1f      	ldr	r3, [pc, #124]	; (8007544 <MX_DMA_Init+0x94>)
 80074c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80074d4:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <MX_DMA_Init+0x98>)
 80074d6:	4a1d      	ldr	r2, [pc, #116]	; (800754c <MX_DMA_Init+0x9c>)
 80074d8:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 80074da:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <MX_DMA_Init+0x98>)
 80074dc:	2200      	movs	r2, #0
 80074de:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80074e0:	4b19      	ldr	r3, [pc, #100]	; (8007548 <MX_DMA_Init+0x98>)
 80074e2:	2280      	movs	r2, #128	; 0x80
 80074e4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80074e6:	4b18      	ldr	r3, [pc, #96]	; (8007548 <MX_DMA_Init+0x98>)
 80074e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ec:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80074ee:	4b16      	ldr	r3, [pc, #88]	; (8007548 <MX_DMA_Init+0x98>)
 80074f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074f4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <MX_DMA_Init+0x98>)
 80074f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074fc:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <MX_DMA_Init+0x98>)
 8007500:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007504:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8007506:	4b10      	ldr	r3, [pc, #64]	; (8007548 <MX_DMA_Init+0x98>)
 8007508:	2200      	movs	r2, #0
 800750a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800750c:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <MX_DMA_Init+0x98>)
 800750e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007512:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007514:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <MX_DMA_Init+0x98>)
 8007516:	2204      	movs	r2, #4
 8007518:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <MX_DMA_Init+0x98>)
 800751c:	2203      	movs	r2, #3
 800751e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8007520:	4b09      	ldr	r3, [pc, #36]	; (8007548 <MX_DMA_Init+0x98>)
 8007522:	2200      	movs	r2, #0
 8007524:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <MX_DMA_Init+0x98>)
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800752c:	4806      	ldr	r0, [pc, #24]	; (8007548 <MX_DMA_Init+0x98>)
 800752e:	f7f9 f999 	bl	8000864 <HAL_DMA_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <MX_DMA_Init+0x8c>
  {
    Error_Handler( );
 8007538:	f000 f86e 	bl	8007618 <Error_Handler>
  }

}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	58024400 	.word	0x58024400
 8007548:	240004b8 	.word	0x240004b8
 800754c:	40020410 	.word	0x40020410

08007550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007556:	f107 0314 	add.w	r3, r7, #20
 800755a:	2200      	movs	r2, #0
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	605a      	str	r2, [r3, #4]
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007566:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <MX_GPIO_Init+0xc0>)
 8007568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800756c:	4a28      	ldr	r2, [pc, #160]	; (8007610 <MX_GPIO_Init+0xc0>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007576:	4b26      	ldr	r3, [pc, #152]	; (8007610 <MX_GPIO_Init+0xc0>)
 8007578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007584:	4b22      	ldr	r3, [pc, #136]	; (8007610 <MX_GPIO_Init+0xc0>)
 8007586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800758a:	4a21      	ldr	r2, [pc, #132]	; (8007610 <MX_GPIO_Init+0xc0>)
 800758c:	f043 0310 	orr.w	r3, r3, #16
 8007590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <MX_GPIO_Init+0xc0>)
 8007596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80075a2:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <MX_GPIO_Init+0xc0>)
 80075a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075a8:	4a19      	ldr	r2, [pc, #100]	; (8007610 <MX_GPIO_Init+0xc0>)
 80075aa:	f043 0308 	orr.w	r3, r3, #8
 80075ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075b2:	4b17      	ldr	r3, [pc, #92]	; (8007610 <MX_GPIO_Init+0xc0>)
 80075b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <MX_GPIO_Init+0xc0>)
 80075c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c6:	4a12      	ldr	r2, [pc, #72]	; (8007610 <MX_GPIO_Init+0xc0>)
 80075c8:	f043 0320 	orr.w	r3, r3, #32
 80075cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075d0:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <MX_GPIO_Init+0xc0>)
 80075d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80075de:	2301      	movs	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80075e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	4619      	mov	r1, r3
 80075f2:	4808      	ldr	r0, [pc, #32]	; (8007614 <MX_GPIO_Init+0xc4>)
 80075f4:	f7fb fce6 	bl	8002fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	2006      	movs	r0, #6
 80075fe:	f7f9 f812 	bl	8000626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007602:	2006      	movs	r0, #6
 8007604:	f7f9 f829 	bl	800065a <HAL_NVIC_EnableIRQ>

}
 8007608:	bf00      	nop
 800760a:	3728      	adds	r7, #40	; 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	58024400 	.word	0x58024400
 8007614:	58021000 	.word	0x58021000

08007618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800761c:	b672      	cpsid	i
}
 800761e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007620:	e7fe      	b.n	8007620 <Error_Handler+0x8>
	...

08007624 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8007628:	4b10      	ldr	r3, [pc, #64]	; (800766c <MX_PDM2PCM_Init+0x48>)
 800762a:	2201      	movs	r2, #1
 800762c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <MX_PDM2PCM_Init+0x48>)
 8007630:	2201      	movs	r2, #1
 8007632:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <MX_PDM2PCM_Init+0x48>)
 8007636:	4a0e      	ldr	r2, [pc, #56]	; (8007670 <MX_PDM2PCM_Init+0x4c>)
 8007638:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <MX_PDM2PCM_Init+0x48>)
 800763c:	2201      	movs	r2, #1
 800763e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <MX_PDM2PCM_Init+0x48>)
 8007642:	2201      	movs	r2, #1
 8007644:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007646:	4809      	ldr	r0, [pc, #36]	; (800766c <MX_PDM2PCM_Init+0x48>)
 8007648:	f001 ffa0 	bl	800958c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <MX_PDM2PCM_Init+0x50>)
 800764e:	2202      	movs	r2, #2
 8007650:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <MX_PDM2PCM_Init+0x50>)
 8007654:	2210      	movs	r2, #16
 8007656:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <MX_PDM2PCM_Init+0x50>)
 800765a:	2200      	movs	r2, #0
 800765c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800765e:	4905      	ldr	r1, [pc, #20]	; (8007674 <MX_PDM2PCM_Init+0x50>)
 8007660:	4802      	ldr	r0, [pc, #8]	; (800766c <MX_PDM2PCM_Init+0x48>)
 8007662:	f002 f863 	bl	800972c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007666:	bf00      	nop
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2400071c 	.word	0x2400071c
 8007670:	7d70a3d6 	.word	0x7d70a3d6
 8007674:	24000768 	.word	0x24000768

08007678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800767e:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <HAL_MspInit+0x30>)
 8007680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007684:	4a08      	ldr	r2, [pc, #32]	; (80076a8 <HAL_MspInit+0x30>)
 8007686:	f043 0302 	orr.w	r3, r3, #2
 800768a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800768e:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <HAL_MspInit+0x30>)
 8007690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	58024400 	.word	0x58024400

080076ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a0b      	ldr	r2, [pc, #44]	; (80076e8 <HAL_CRC_MspInit+0x3c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d10e      	bne.n	80076dc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80076be:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <HAL_CRC_MspInit+0x40>)
 80076c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076c4:	4a09      	ldr	r2, [pc, #36]	; (80076ec <HAL_CRC_MspInit+0x40>)
 80076c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <HAL_CRC_MspInit+0x40>)
 80076d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	58024c00 	.word	0x58024c00
 80076ec:	58024400 	.word	0x58024400

080076f0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b0ba      	sub	sp, #232	; 0xe8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80076f8:	f107 0310 	add.w	r3, r7, #16
 80076fc:	22b4      	movs	r2, #180	; 0xb4
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f002 f951 	bl	80099a8 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a80      	ldr	r2, [pc, #512]	; (800790c <HAL_SAI_MspInit+0x21c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d151      	bne.n	80077b4 <HAL_SAI_MspInit+0xc4>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8007710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007714:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8007716:	2300      	movs	r3, #0
 8007718:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800771a:	f107 0310 	add.w	r3, r7, #16
 800771e:	4618      	mov	r0, r3
 8007720:	f7fc fedc 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 800772a:	f7ff ff75 	bl	8007618 <Error_Handler>
    }

      if (SAI1_client == 0)
 800772e:	4b78      	ldr	r3, [pc, #480]	; (8007910 <HAL_SAI_MspInit+0x220>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10e      	bne.n	8007754 <HAL_SAI_MspInit+0x64>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007736:	4b77      	ldr	r3, [pc, #476]	; (8007914 <HAL_SAI_MspInit+0x224>)
 8007738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800773c:	4a75      	ldr	r2, [pc, #468]	; (8007914 <HAL_SAI_MspInit+0x224>)
 800773e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007742:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007746:	4b73      	ldr	r3, [pc, #460]	; (8007914 <HAL_SAI_MspInit+0x224>)
 8007748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800774c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8007754:	4b6e      	ldr	r3, [pc, #440]	; (8007910 <HAL_SAI_MspInit+0x220>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	4a6d      	ldr	r2, [pc, #436]	; (8007910 <HAL_SAI_MspInit+0x220>)
 800775c:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800775e:	2308      	movs	r3, #8
 8007760:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007764:	2302      	movs	r3, #2
 8007766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776a:	2300      	movs	r3, #0
 800776c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007770:	2300      	movs	r3, #0
 8007772:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007776:	2306      	movs	r3, #6
 8007778:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800777c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007780:	4619      	mov	r1, r3
 8007782:	4865      	ldr	r0, [pc, #404]	; (8007918 <HAL_SAI_MspInit+0x228>)
 8007784:	f7fb fc1e 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8007788:	f44f 7360 	mov.w	r3, #896	; 0x380
 800778c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	2302      	movs	r3, #2
 8007792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80077a2:	2306      	movs	r3, #6
 80077a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80077a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80077ac:	4619      	mov	r1, r3
 80077ae:	485b      	ldr	r0, [pc, #364]	; (800791c <HAL_SAI_MspInit+0x22c>)
 80077b0:	f7fb fc08 	bl	8002fc4 <HAL_GPIO_Init>

    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a59      	ldr	r2, [pc, #356]	; (8007920 <HAL_SAI_MspInit+0x230>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	f040 80a1 	bne.w	8007902 <HAL_SAI_MspInit+0x212>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 80077c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80077cc:	f107 0310 	add.w	r3, r7, #16
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fc fe83 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_SAI_MspInit+0xf0>
    {
      Error_Handler();
 80077dc:	f7ff ff1c 	bl	8007618 <Error_Handler>
    }

    if (SAI4_client == 0)
 80077e0:	4b50      	ldr	r3, [pc, #320]	; (8007924 <HAL_SAI_MspInit+0x234>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10e      	bne.n	8007806 <HAL_SAI_MspInit+0x116>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80077e8:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <HAL_SAI_MspInit+0x224>)
 80077ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077ee:	4a49      	ldr	r2, [pc, #292]	; (8007914 <HAL_SAI_MspInit+0x224>)
 80077f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80077f8:	4b46      	ldr	r3, [pc, #280]	; (8007914 <HAL_SAI_MspInit+0x224>)
 80077fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8007806:	4b47      	ldr	r3, [pc, #284]	; (8007924 <HAL_SAI_MspInit+0x234>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	4a45      	ldr	r2, [pc, #276]	; (8007924 <HAL_SAI_MspInit+0x234>)
 800780e:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007810:	2330      	movs	r3, #48	; 0x30
 8007812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007816:	2302      	movs	r3, #2
 8007818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007822:	2300      	movs	r3, #0
 8007824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007828:	230a      	movs	r3, #10
 800782a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800782e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007832:	4619      	mov	r1, r3
 8007834:	4838      	ldr	r0, [pc, #224]	; (8007918 <HAL_SAI_MspInit+0x228>)
 8007836:	f7fb fbc5 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007840:	2302      	movs	r3, #2
 8007842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007846:	2300      	movs	r3, #0
 8007848:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8007852:	2301      	movs	r3, #1
 8007854:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007858:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800785c:	4619      	mov	r1, r3
 800785e:	4832      	ldr	r0, [pc, #200]	; (8007928 <HAL_SAI_MspInit+0x238>)
 8007860:	f7fb fbb0 	bl	8002fc4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 8007864:	4b31      	ldr	r3, [pc, #196]	; (800792c <HAL_SAI_MspInit+0x23c>)
 8007866:	4a32      	ldr	r2, [pc, #200]	; (8007930 <HAL_SAI_MspInit+0x240>)
 8007868:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800786a:	4b30      	ldr	r3, [pc, #192]	; (800792c <HAL_SAI_MspInit+0x23c>)
 800786c:	220f      	movs	r2, #15
 800786e:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007870:	4b2e      	ldr	r3, [pc, #184]	; (800792c <HAL_SAI_MspInit+0x23c>)
 8007872:	2200      	movs	r2, #0
 8007874:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007876:	4b2d      	ldr	r3, [pc, #180]	; (800792c <HAL_SAI_MspInit+0x23c>)
 8007878:	2200      	movs	r2, #0
 800787a:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800787c:	4b2b      	ldr	r3, [pc, #172]	; (800792c <HAL_SAI_MspInit+0x23c>)
 800787e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007882:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007884:	4b29      	ldr	r3, [pc, #164]	; (800792c <HAL_SAI_MspInit+0x23c>)
 8007886:	2200      	movs	r2, #0
 8007888:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800788a:	4b28      	ldr	r3, [pc, #160]	; (800792c <HAL_SAI_MspInit+0x23c>)
 800788c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007890:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8007892:	4b26      	ldr	r3, [pc, #152]	; (800792c <HAL_SAI_MspInit+0x23c>)
 8007894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007898:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <HAL_SAI_MspInit+0x23c>)
 800789c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80078a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 80078a2:	4822      	ldr	r0, [pc, #136]	; (800792c <HAL_SAI_MspInit+0x23c>)
 80078a4:	f7f8 ffde 	bl	8000864 <HAL_DMA_Init>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_SAI_MspInit+0x1c2>
    {
      Error_Handler();
 80078ae:	f7ff feb3 	bl	8007618 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 80078b2:	230e      	movs	r3, #14
 80078b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80078b8:	2300      	movs	r3, #0
 80078ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 80078d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4815      	ldr	r0, [pc, #84]	; (800792c <HAL_SAI_MspInit+0x23c>)
 80078d8:	f7fb fa5c 	bl	8002d94 <HAL_DMAEx_ConfigMuxSync>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_SAI_MspInit+0x1f6>
    {
      Error_Handler();
 80078e2:	f7ff fe99 	bl	8007618 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a10      	ldr	r2, [pc, #64]	; (800792c <HAL_SAI_MspInit+0x23c>)
 80078ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80078ee:	4a0f      	ldr	r2, [pc, #60]	; (800792c <HAL_SAI_MspInit+0x23c>)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a0d      	ldr	r2, [pc, #52]	; (800792c <HAL_SAI_MspInit+0x23c>)
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80078fc:	4a0b      	ldr	r2, [pc, #44]	; (800792c <HAL_SAI_MspInit+0x23c>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8007902:	bf00      	nop
 8007904:	37e8      	adds	r7, #232	; 0xe8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40015824 	.word	0x40015824
 8007910:	2400049c 	.word	0x2400049c
 8007914:	58024400 	.word	0x58024400
 8007918:	58021000 	.word	0x58021000
 800791c:	58021400 	.word	0x58021400
 8007920:	58005404 	.word	0x58005404
 8007924:	240004a0 	.word	0x240004a0
 8007928:	58020c00 	.word	0x58020c00
 800792c:	24000694 	.word	0x24000694
 8007930:	5802541c 	.word	0x5802541c

08007934 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <HAL_SAI_MspDeInit+0xa4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d119      	bne.n	800797a <HAL_SAI_MspDeInit+0x46>
    {
    SAI1_client --;
 8007946:	4b25      	ldr	r3, [pc, #148]	; (80079dc <HAL_SAI_MspDeInit+0xa8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3b01      	subs	r3, #1
 800794c:	4a23      	ldr	r2, [pc, #140]	; (80079dc <HAL_SAI_MspDeInit+0xa8>)
 800794e:	6013      	str	r3, [r2, #0]
      if (SAI1_client == 0)
 8007950:	4b22      	ldr	r3, [pc, #136]	; (80079dc <HAL_SAI_MspDeInit+0xa8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d107      	bne.n	8007968 <HAL_SAI_MspDeInit+0x34>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI1_CLK_DISABLE();
 8007958:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <HAL_SAI_MspDeInit+0xac>)
 800795a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800795e:	4a20      	ldr	r2, [pc, #128]	; (80079e0 <HAL_SAI_MspDeInit+0xac>)
 8007960:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007964:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 8007968:	2108      	movs	r1, #8
 800796a:	481e      	ldr	r0, [pc, #120]	; (80079e4 <HAL_SAI_MspDeInit+0xb0>)
 800796c:	f7fb fcd2 	bl	8003314 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9);
 8007970:	f44f 7160 	mov.w	r1, #896	; 0x380
 8007974:	481c      	ldr	r0, [pc, #112]	; (80079e8 <HAL_SAI_MspDeInit+0xb4>)
 8007976:	f7fb fccd 	bl	8003314 <HAL_GPIO_DeInit>

    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <HAL_SAI_MspDeInit+0xb8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d124      	bne.n	80079ce <HAL_SAI_MspDeInit+0x9a>
    {
    SAI4_client --;
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <HAL_SAI_MspDeInit+0xbc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_SAI_MspDeInit+0xbc>)
 800798c:	6013      	str	r3, [r2, #0]
    if (SAI4_client == 0)
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <HAL_SAI_MspDeInit+0xbc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d107      	bne.n	80079a6 <HAL_SAI_MspDeInit+0x72>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI4_CLK_DISABLE();
 8007996:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <HAL_SAI_MspDeInit+0xac>)
 8007998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800799c:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <HAL_SAI_MspDeInit+0xac>)
 800799e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5);
 80079a6:	2130      	movs	r1, #48	; 0x30
 80079a8:	480e      	ldr	r0, [pc, #56]	; (80079e4 <HAL_SAI_MspDeInit+0xb0>)
 80079aa:	f7fb fcb3 	bl	8003314 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6);
 80079ae:	2140      	movs	r1, #64	; 0x40
 80079b0:	4810      	ldr	r0, [pc, #64]	; (80079f4 <HAL_SAI_MspDeInit+0xc0>)
 80079b2:	f7fb fcaf 	bl	8003314 <HAL_GPIO_DeInit>

    /* SAI4 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f9 faab 	bl	8000f18 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7f9 faa5 	bl	8000f18 <HAL_DMA_DeInit>
    }
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	40015824 	.word	0x40015824
 80079dc:	2400049c 	.word	0x2400049c
 80079e0:	58024400 	.word	0x58024400
 80079e4:	58021000 	.word	0x58021000
 80079e8:	58021400 	.word	0x58021400
 80079ec:	58005404 	.word	0x58005404
 80079f0:	240004a0 	.word	0x240004a0
 80079f4:	58020c00 	.word	0x58020c00

080079f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079fc:	e7fe      	b.n	80079fc <NMI_Handler+0x4>

080079fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079fe:	b480      	push	{r7}
 8007a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a02:	e7fe      	b.n	8007a02 <HardFault_Handler+0x4>

08007a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a08:	e7fe      	b.n	8007a08 <MemManage_Handler+0x4>

08007a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a0e:	e7fe      	b.n	8007a0e <BusFault_Handler+0x4>

08007a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a14:	e7fe      	b.n	8007a14 <UsageFault_Handler+0x4>

08007a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a16:	b480      	push	{r7}
 8007a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a1a:	bf00      	nop
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a28:	bf00      	nop
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a32:	b480      	push	{r7}
 8007a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a36:	bf00      	nop
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a44:	f7f8 fcf4 	bl	8000430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007a50:	2001      	movs	r0, #1
 8007a52:	f7fb fd7a 	bl	800354a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007a56:	bf00      	nop
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <DMAMUX2_OVR_IRQHandler+0x10>)
 8007a62:	f7fb fa5d 	bl	8002f20 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	24000694 	.word	0x24000694

08007a70 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8007a74:	4802      	ldr	r0, [pc, #8]	; (8007a80 <BDMA_Channel1_IRQHandler+0x10>)
 8007a76:	f7f9 fe6f 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8007a7a:	bf00      	nop
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	24000694 	.word	0x24000694

08007a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007a88:	4b32      	ldr	r3, [pc, #200]	; (8007b54 <SystemInit+0xd0>)
 8007a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8e:	4a31      	ldr	r2, [pc, #196]	; (8007b54 <SystemInit+0xd0>)
 8007a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007a98:	4b2f      	ldr	r3, [pc, #188]	; (8007b58 <SystemInit+0xd4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	d807      	bhi.n	8007ab4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <SystemInit+0xd4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f023 030f 	bic.w	r3, r3, #15
 8007aac:	4a2a      	ldr	r2, [pc, #168]	; (8007b58 <SystemInit+0xd4>)
 8007aae:	f043 0307 	orr.w	r3, r3, #7
 8007ab2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007ab4:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <SystemInit+0xd8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a28      	ldr	r2, [pc, #160]	; (8007b5c <SystemInit+0xd8>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007ac0:	4b26      	ldr	r3, [pc, #152]	; (8007b5c <SystemInit+0xd8>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007ac6:	4b25      	ldr	r3, [pc, #148]	; (8007b5c <SystemInit+0xd8>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4924      	ldr	r1, [pc, #144]	; (8007b5c <SystemInit+0xd8>)
 8007acc:	4b24      	ldr	r3, [pc, #144]	; (8007b60 <SystemInit+0xdc>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007ad2:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <SystemInit+0xd4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d007      	beq.n	8007aee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007ade:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <SystemInit+0xd4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f023 030f 	bic.w	r3, r3, #15
 8007ae6:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <SystemInit+0xd4>)
 8007ae8:	f043 0307 	orr.w	r3, r3, #7
 8007aec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007aee:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <SystemInit+0xd8>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007af4:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <SystemInit+0xd8>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <SystemInit+0xd8>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007b00:	4b16      	ldr	r3, [pc, #88]	; (8007b5c <SystemInit+0xd8>)
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <SystemInit+0xe0>)
 8007b04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007b06:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <SystemInit+0xd8>)
 8007b08:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <SystemInit+0xe4>)
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007b0c:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <SystemInit+0xd8>)
 8007b0e:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <SystemInit+0xe8>)
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <SystemInit+0xd8>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007b18:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <SystemInit+0xd8>)
 8007b1a:	4a14      	ldr	r2, [pc, #80]	; (8007b6c <SystemInit+0xe8>)
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <SystemInit+0xd8>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <SystemInit+0xd8>)
 8007b26:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <SystemInit+0xe8>)
 8007b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <SystemInit+0xd8>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <SystemInit+0xd8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <SystemInit+0xd8>)
 8007b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <SystemInit+0xd8>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <SystemInit+0xec>)
 8007b44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007b48:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	e000ed00 	.word	0xe000ed00
 8007b58:	52002000 	.word	0x52002000
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	eaf6ed7f 	.word	0xeaf6ed7f
 8007b64:	02020200 	.word	0x02020200
 8007b68:	01ff0000 	.word	0x01ff0000
 8007b6c:	01010280 	.word	0x01010280
 8007b70:	52004000 	.word	0x52004000

08007b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007b78:	f7ff ff84 	bl	8007a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007b7c:	480c      	ldr	r0, [pc, #48]	; (8007bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007b7e:	490d      	ldr	r1, [pc, #52]	; (8007bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007b80:	4a0d      	ldr	r2, [pc, #52]	; (8007bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007b84:	e002      	b.n	8007b8c <LoopCopyDataInit>

08007b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007b8a:	3304      	adds	r3, #4

08007b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b90:	d3f9      	bcc.n	8007b86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b92:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007b94:	4c0a      	ldr	r4, [pc, #40]	; (8007bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b98:	e001      	b.n	8007b9e <LoopFillZerobss>

08007b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b9c:	3204      	adds	r2, #4

08007b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ba0:	d3fb      	bcc.n	8007b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007ba2:	f001 fedd 	bl	8009960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ba6:	f7ff fa9d 	bl	80070e4 <main>
  bx  lr
 8007baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007bac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007bb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007bb4:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 8007bb8:	0800a028 	.word	0x0800a028
  ldr r2, =_sbss
 8007bbc:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 8007bc0:	24000770 	.word	0x24000770

08007bc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007bc4:	e7fe      	b.n	8007bc4 <ADC3_IRQHandler>
	...

08007bc8 <D16_GENERIC>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	b089      	sub	sp, #36	; 0x24
 8007bce:	6993      	ldr	r3, [r2, #24]
 8007bd0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007bd2:	9103      	str	r1, [sp, #12]
 8007bd4:	9307      	str	r3, [sp, #28]
 8007bd6:	69d3      	ldr	r3, [r2, #28]
 8007bd8:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8007bdc:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8007be0:	9106      	str	r1, [sp, #24]
 8007be2:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	d063      	beq.n	8007cb2 <D16_GENERIC+0xea>
 8007bea:	f001 0520 	and.w	r5, r1, #32
 8007bee:	f001 0110 	and.w	r1, r1, #16
 8007bf2:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8007cd4 <D16_GENERIC+0x10c>
 8007bf6:	46c1      	mov	r9, r8
 8007bf8:	9104      	str	r1, [sp, #16]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	9505      	str	r5, [sp, #20]
 8007bfe:	e04d      	b.n	8007c9c <D16_GENERIC+0xd4>
 8007c00:	5d87      	ldrb	r7, [r0, r6]
 8007c02:	7805      	ldrb	r5, [r0, #0]
 8007c04:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007c08:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8007c0c:	b2fe      	uxtb	r6, r7
 8007c0e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8007c12:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8007c16:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8007c1a:	441d      	add	r5, r3
 8007c1c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8007c20:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007c24:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8007c28:	0a9b      	lsrs	r3, r3, #10
 8007c2a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8007c2e:	4d27      	ldr	r5, [pc, #156]	; (8007ccc <D16_GENERIC+0x104>)
 8007c30:	fb26 c505 	smlad	r5, r6, r5, ip
 8007c34:	4f26      	ldr	r7, [pc, #152]	; (8007cd0 <D16_GENERIC+0x108>)
 8007c36:	fb26 fc07 	smuad	ip, r6, r7
 8007c3a:	9e04      	ldr	r6, [sp, #16]
 8007c3c:	f101 0801 	add.w	r8, r1, #1
 8007c40:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8007c44:	b1ae      	cbz	r6, 8007c72 <D16_GENERIC+0xaa>
 8007c46:	442c      	add	r4, r5
 8007c48:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007c4c:	eba4 040a 	sub.w	r4, r4, sl
 8007c50:	46aa      	mov	sl, r5
 8007c52:	17e7      	asrs	r7, r4, #31
 8007c54:	fba4 450b 	umull	r4, r5, r4, fp
 8007c58:	e9cd 4500 	strd	r4, r5, [sp]
 8007c5c:	fb0b 5407 	mla	r4, fp, r7, r5
 8007c60:	9401      	str	r4, [sp, #4]
 8007c62:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007c66:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007c6a:	f145 0500 	adc.w	r5, r5, #0
 8007c6e:	006c      	lsls	r4, r5, #1
 8007c70:	4625      	mov	r5, r4
 8007c72:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8007c76:	042d      	lsls	r5, r5, #16
 8007c78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007c7c:	2700      	movs	r7, #0
 8007c7e:	fb01 fb0b 	mul.w	fp, r1, fp
 8007c82:	fa1f f188 	uxth.w	r1, r8
 8007c86:	fbc9 6705 	smlal	r6, r7, r9, r5
 8007c8a:	9e03      	ldr	r6, [sp, #12]
 8007c8c:	10bd      	asrs	r5, r7, #2
 8007c8e:	f305 050f 	ssat	r5, #16, r5
 8007c92:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007c96:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007c98:	428d      	cmp	r5, r1
 8007c9a:	d90a      	bls.n	8007cb2 <D16_GENERIC+0xea>
 8007c9c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007c9e:	2d01      	cmp	r5, #1
 8007ca0:	b2ee      	uxtb	r6, r5
 8007ca2:	d1ad      	bne.n	8007c00 <D16_GENERIC+0x38>
 8007ca4:	9d05      	ldr	r5, [sp, #20]
 8007ca6:	f850 7b02 	ldr.w	r7, [r0], #2
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	d0ae      	beq.n	8007c0c <D16_GENERIC+0x44>
 8007cae:	ba7f      	rev16	r7, r7
 8007cb0:	e7ac      	b.n	8007c0c <D16_GENERIC+0x44>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	9906      	ldr	r1, [sp, #24]
 8007cb6:	61d3      	str	r3, [r2, #28]
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	f8c2 c008 	str.w	ip, [r2, #8]
 8007cbe:	60d1      	str	r1, [r2, #12]
 8007cc0:	6193      	str	r3, [r2, #24]
 8007cc2:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8007cc6:	b009      	add	sp, #36	; 0x24
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	00030001 	.word	0x00030001
 8007cd0:	00010003 	.word	0x00010003
 8007cd4:	24000000 	.word	0x24000000

08007cd8 <D24_GENERIC>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007ce0:	b089      	sub	sp, #36	; 0x24
 8007ce2:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	6993      	ldr	r3, [r2, #24]
 8007ce8:	9104      	str	r1, [sp, #16]
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	69d1      	ldr	r1, [r2, #28]
 8007cee:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8007cf2:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	f000 8088 	beq.w	8007e0c <D24_GENERIC+0x134>
 8007cfc:	f005 0620 	and.w	r6, r5, #32
 8007d00:	f005 0510 	and.w	r5, r5, #16
 8007d04:	f04f 0c00 	mov.w	ip, #0
 8007d08:	f8df e140 	ldr.w	lr, [pc, #320]	; 8007e4c <D24_GENERIC+0x174>
 8007d0c:	9606      	str	r6, [sp, #24]
 8007d0e:	9505      	str	r5, [sp, #20]
 8007d10:	e064      	b.n	8007ddc <D24_GENERIC+0x104>
 8007d12:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007d16:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8007d1a:	f810 b007 	ldrb.w	fp, [r0, r7]
 8007d1e:	042d      	lsls	r5, r5, #16
 8007d20:	19f0      	adds	r0, r6, r7
 8007d22:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8007d26:	44a9      	add	r9, r5
 8007d28:	fa5f f689 	uxtb.w	r6, r9
 8007d2c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8007d30:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8007d34:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8007d38:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8007d3c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8007d40:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8007d44:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007d48:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007d4c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007d50:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007d54:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007d58:	4d3a      	ldr	r5, [pc, #232]	; (8007e44 <D24_GENERIC+0x16c>)
 8007d5a:	fb26 8705 	smlad	r7, r6, r5, r8
 8007d5e:	4d3a      	ldr	r5, [pc, #232]	; (8007e48 <D24_GENERIC+0x170>)
 8007d60:	fb26 3805 	smlad	r8, r6, r5, r3
 8007d64:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8007d68:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8007d72:	fb26 f603 	smuad	r6, r6, r3
 8007d76:	eb0c 0903 	add.w	r9, ip, r3
 8007d7a:	eb0b 0306 	add.w	r3, fp, r6
 8007d7e:	9e05      	ldr	r6, [sp, #20]
 8007d80:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8007d84:	b1ae      	cbz	r6, 8007db2 <D24_GENERIC+0xda>
 8007d86:	442c      	add	r4, r5
 8007d88:	9e03      	ldr	r6, [sp, #12]
 8007d8a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007d8e:	1ba4      	subs	r4, r4, r6
 8007d90:	9503      	str	r5, [sp, #12]
 8007d92:	17e7      	asrs	r7, r4, #31
 8007d94:	fba4 450b 	umull	r4, r5, r4, fp
 8007d98:	e9cd 4500 	strd	r4, r5, [sp]
 8007d9c:	fb0b 5407 	mla	r4, fp, r7, r5
 8007da0:	9401      	str	r4, [sp, #4]
 8007da2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007da6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007daa:	f145 0500 	adc.w	r5, r5, #0
 8007dae:	006c      	lsls	r4, r5, #1
 8007db0:	4625      	mov	r5, r4
 8007db2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8007db6:	03ad      	lsls	r5, r5, #14
 8007db8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007dbc:	2700      	movs	r7, #0
 8007dbe:	fb0c fb0b 	mul.w	fp, ip, fp
 8007dc2:	fa1f fc89 	uxth.w	ip, r9
 8007dc6:	fbca 6705 	smlal	r6, r7, sl, r5
 8007dca:	9e04      	ldr	r6, [sp, #16]
 8007dcc:	10bd      	asrs	r5, r7, #2
 8007dce:	f305 050f 	ssat	r5, #16, r5
 8007dd2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007dd6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007dd8:	4565      	cmp	r5, ip
 8007dda:	d917      	bls.n	8007e0c <D24_GENERIC+0x134>
 8007ddc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007dde:	f890 9000 	ldrb.w	r9, [r0]
 8007de2:	b2ef      	uxtb	r7, r5
 8007de4:	2d01      	cmp	r5, #1
 8007de6:	b23e      	sxth	r6, r7
 8007de8:	d193      	bne.n	8007d12 <D24_GENERIC+0x3a>
 8007dea:	9d06      	ldr	r5, [sp, #24]
 8007dec:	b1dd      	cbz	r5, 8007e26 <D24_GENERIC+0x14e>
 8007dee:	78c7      	ldrb	r7, [r0, #3]
 8007df0:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8007df4:	f01c 0f01 	tst.w	ip, #1
 8007df8:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8007dfc:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8007e00:	d11a      	bne.n	8007e38 <D24_GENERIC+0x160>
 8007e02:	f890 9001 	ldrb.w	r9, [r0, #1]
 8007e06:	3002      	adds	r0, #2
 8007e08:	44b1      	add	r9, r6
 8007e0a:	e78d      	b.n	8007d28 <D24_GENERIC+0x50>
 8007e0c:	6093      	str	r3, [r2, #8]
 8007e0e:	2000      	movs	r0, #0
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	f8c2 800c 	str.w	r8, [r2, #12]
 8007e16:	6153      	str	r3, [r2, #20]
 8007e18:	9b07      	ldr	r3, [sp, #28]
 8007e1a:	61d1      	str	r1, [r2, #28]
 8007e1c:	6114      	str	r4, [r2, #16]
 8007e1e:	6193      	str	r3, [r2, #24]
 8007e20:	b009      	add	sp, #36	; 0x24
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	7845      	ldrb	r5, [r0, #1]
 8007e28:	3003      	adds	r0, #3
 8007e2a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8007e2e:	022d      	lsls	r5, r5, #8
 8007e30:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8007e34:	44a9      	add	r9, r5
 8007e36:	e777      	b.n	8007d28 <D24_GENERIC+0x50>
 8007e38:	7886      	ldrb	r6, [r0, #2]
 8007e3a:	3004      	adds	r0, #4
 8007e3c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8007e40:	44a9      	add	r9, r5
 8007e42:	e771      	b.n	8007d28 <D24_GENERIC+0x50>
 8007e44:	00030001 	.word	0x00030001
 8007e48:	00060007 	.word	0x00060007
 8007e4c:	24000000 	.word	0x24000000

08007e50 <D32_GENERIC>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8007e58:	b089      	sub	sp, #36	; 0x24
 8007e5a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007e5c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007e5e:	9302      	str	r3, [sp, #8]
 8007e60:	6993      	ldr	r3, [r2, #24]
 8007e62:	9104      	str	r1, [sp, #16]
 8007e64:	9307      	str	r3, [sp, #28]
 8007e66:	9503      	str	r5, [sp, #12]
 8007e68:	69d1      	ldr	r1, [r2, #28]
 8007e6a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007e6c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	f000 8097 	beq.w	8007fa4 <D32_GENERIC+0x154>
 8007e76:	f005 0620 	and.w	r6, r5, #32
 8007e7a:	f005 0510 	and.w	r5, r5, #16
 8007e7e:	f04f 0e00 	mov.w	lr, #0
 8007e82:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007fd4 <D32_GENERIC+0x184>
 8007e86:	9606      	str	r6, [sp, #24]
 8007e88:	9505      	str	r5, [sp, #20]
 8007e8a:	e079      	b.n	8007f80 <D32_GENERIC+0x130>
 8007e8c:	783d      	ldrb	r5, [r7, #0]
 8007e8e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8007e92:	042d      	lsls	r5, r5, #16
 8007e94:	f810 a006 	ldrb.w	sl, [r0, r6]
 8007e98:	f890 9000 	ldrb.w	r9, [r0]
 8007e9c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8007ea0:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8007ea4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8007ea8:	44a9      	add	r9, r5
 8007eaa:	fa5f f789 	uxtb.w	r7, r9
 8007eae:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8007eb2:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8007eb6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007eba:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007ebe:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007ec2:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8007ec6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8007eca:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8007ece:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007ed2:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8007ed6:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8007eda:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007ede:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8007ee2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007ee6:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8007eea:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8007eee:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007ef2:	4d34      	ldr	r5, [pc, #208]	; (8007fc4 <D32_GENERIC+0x174>)
 8007ef4:	fb29 8805 	smlad	r8, r9, r5, r8
 8007ef8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8007efc:	fb26 8705 	smlad	r7, r6, r5, r8
 8007f00:	4d31      	ldr	r5, [pc, #196]	; (8007fc8 <D32_GENERIC+0x178>)
 8007f02:	fb29 3305 	smlad	r3, r9, r5, r3
 8007f06:	4d31      	ldr	r5, [pc, #196]	; (8007fcc <D32_GENERIC+0x17c>)
 8007f08:	fb26 3805 	smlad	r8, r6, r5, r3
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	fb29 f903 	smuad	r9, r9, r3
 8007f12:	4b2f      	ldr	r3, [pc, #188]	; (8007fd0 <D32_GENERIC+0x180>)
 8007f14:	fb26 9303 	smlad	r3, r6, r3, r9
 8007f18:	9e05      	ldr	r6, [sp, #20]
 8007f1a:	f10e 0901 	add.w	r9, lr, #1
 8007f1e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8007f22:	b1ae      	cbz	r6, 8007f50 <D32_GENERIC+0x100>
 8007f24:	442c      	add	r4, r5
 8007f26:	9e02      	ldr	r6, [sp, #8]
 8007f28:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8007f2c:	1ba4      	subs	r4, r4, r6
 8007f2e:	9502      	str	r5, [sp, #8]
 8007f30:	17e7      	asrs	r7, r4, #31
 8007f32:	fba4 450a 	umull	r4, r5, r4, sl
 8007f36:	e9cd 4500 	strd	r4, r5, [sp]
 8007f3a:	fb0a 5407 	mla	r4, sl, r7, r5
 8007f3e:	9401      	str	r4, [sp, #4]
 8007f40:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007f44:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007f48:	f145 0500 	adc.w	r5, r5, #0
 8007f4c:	006c      	lsls	r4, r5, #1
 8007f4e:	4625      	mov	r5, r4
 8007f50:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8007f54:	036d      	lsls	r5, r5, #13
 8007f56:	9f03      	ldr	r7, [sp, #12]
 8007f58:	fb0e fb0a 	mul.w	fp, lr, sl
 8007f5c:	fa1f fe89 	uxth.w	lr, r9
 8007f60:	f04f 0a00 	mov.w	sl, #0
 8007f64:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8007f68:	9e04      	ldr	r6, [sp, #16]
 8007f6a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8007f6e:	4657      	mov	r7, sl
 8007f70:	10bd      	asrs	r5, r7, #2
 8007f72:	f305 050f 	ssat	r5, #16, r5
 8007f76:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8007f7a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007f7c:	4575      	cmp	r5, lr
 8007f7e:	d911      	bls.n	8007fa4 <D32_GENERIC+0x154>
 8007f80:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007f82:	b2ee      	uxtb	r6, r5
 8007f84:	2d01      	cmp	r5, #1
 8007f86:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8007f8a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8007f8e:	f47f af7d 	bne.w	8007e8c <D32_GENERIC+0x3c>
 8007f92:	1d05      	adds	r5, r0, #4
 8007f94:	f8d0 9000 	ldr.w	r9, [r0]
 8007f98:	9806      	ldr	r0, [sp, #24]
 8007f9a:	b180      	cbz	r0, 8007fbe <D32_GENERIC+0x16e>
 8007f9c:	fa99 f999 	rev16.w	r9, r9
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	e782      	b.n	8007eaa <D32_GENERIC+0x5a>
 8007fa4:	6093      	str	r3, [r2, #8]
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	f8c2 800c 	str.w	r8, [r2, #12]
 8007fae:	6153      	str	r3, [r2, #20]
 8007fb0:	9b07      	ldr	r3, [sp, #28]
 8007fb2:	61d1      	str	r1, [r2, #28]
 8007fb4:	6114      	str	r4, [r2, #16]
 8007fb6:	6193      	str	r3, [r2, #24]
 8007fb8:	b009      	add	sp, #36	; 0x24
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	e773      	b.n	8007eaa <D32_GENERIC+0x5a>
 8007fc2:	bf00      	nop
 8007fc4:	00060003 	.word	0x00060003
 8007fc8:	000a000c 	.word	0x000a000c
 8007fcc:	000c000a 	.word	0x000c000a
 8007fd0:	00030006 	.word	0x00030006
 8007fd4:	24000000 	.word	0x24000000

08007fd8 <D48_GENERIC>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	6913      	ldr	r3, [r2, #16]
 8007fde:	b089      	sub	sp, #36	; 0x24
 8007fe0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	6953      	ldr	r3, [r2, #20]
 8007fe6:	9104      	str	r1, [sp, #16]
 8007fe8:	9302      	str	r3, [sp, #8]
 8007fea:	6993      	ldr	r3, [r2, #24]
 8007fec:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007ff0:	9307      	str	r3, [sp, #28]
 8007ff2:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8007ff6:	9100      	str	r1, [sp, #0]
 8007ff8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007ffa:	9103      	str	r1, [sp, #12]
 8007ffc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007ffe:	2c00      	cmp	r4, #0
 8008000:	f000 80be 	beq.w	8008180 <D48_GENERIC+0x1a8>
 8008004:	f001 0420 	and.w	r4, r1, #32
 8008008:	f001 0110 	and.w	r1, r1, #16
 800800c:	f04f 0e00 	mov.w	lr, #0
 8008010:	9105      	str	r1, [sp, #20]
 8008012:	9406      	str	r4, [sp, #24]
 8008014:	4962      	ldr	r1, [pc, #392]	; (80081a0 <D48_GENERIC+0x1c8>)
 8008016:	e0a0      	b.n	800815a <D48_GENERIC+0x182>
 8008018:	eb00 0608 	add.w	r6, r0, r8
 800801c:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008020:	f810 9005 	ldrb.w	r9, [r0, r5]
 8008024:	5df4      	ldrb	r4, [r6, r7]
 8008026:	443e      	add	r6, r7
 8008028:	f890 b000 	ldrb.w	fp, [r0]
 800802c:	0420      	lsls	r0, r4, #16
 800802e:	eb06 0408 	add.w	r4, r6, r8
 8008032:	f816 6008 	ldrb.w	r6, [r6, r8]
 8008036:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800803a:	f814 8007 	ldrb.w	r8, [r4, r7]
 800803e:	4427      	add	r7, r4
 8008040:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8008044:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8008048:	eb0a 040b 	add.w	r4, sl, fp
 800804c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8008050:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8008054:	b2f7      	uxtb	r7, r6
 8008056:	b2e6      	uxtb	r6, r4
 8008058:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800805c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8008060:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8008064:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008068:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800806c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8008070:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8008074:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8008078:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800807c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008080:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8008084:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008088:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800808c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008090:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008094:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008098:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800809c:	9d00      	ldr	r5, [sp, #0]
 800809e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80080a2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80080a6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80080aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80080ae:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80080b2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80080b6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80080ba:	4c3a      	ldr	r4, [pc, #232]	; (80081a4 <D48_GENERIC+0x1cc>)
 80080bc:	fb26 5a04 	smlad	sl, r6, r4, r5
 80080c0:	4c39      	ldr	r4, [pc, #228]	; (80081a8 <D48_GENERIC+0x1d0>)
 80080c2:	fb29 aa04 	smlad	sl, r9, r4, sl
 80080c6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80080ca:	fb27 aa04 	smlad	sl, r7, r4, sl
 80080ce:	4c37      	ldr	r4, [pc, #220]	; (80081ac <D48_GENERIC+0x1d4>)
 80080d0:	fb26 3304 	smlad	r3, r6, r4, r3
 80080d4:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80080d8:	fb29 3304 	smlad	r3, r9, r4, r3
 80080dc:	4c34      	ldr	r4, [pc, #208]	; (80081b0 <D48_GENERIC+0x1d8>)
 80080de:	fb27 3304 	smlad	r3, r7, r4, r3
 80080e2:	2501      	movs	r5, #1
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	fb26 f605 	smuad	r6, r6, r5
 80080ea:	4b32      	ldr	r3, [pc, #200]	; (80081b4 <D48_GENERIC+0x1dc>)
 80080ec:	fb29 6903 	smlad	r9, r9, r3, r6
 80080f0:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <D48_GENERIC+0x1e0>)
 80080f2:	fb27 9303 	smlad	r3, r7, r3, r9
 80080f6:	9c05      	ldr	r4, [sp, #20]
 80080f8:	eb0e 0805 	add.w	r8, lr, r5
 80080fc:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8008100:	b19c      	cbz	r4, 800812a <D48_GENERIC+0x152>
 8008102:	9c01      	ldr	r4, [sp, #4]
 8008104:	9d02      	ldr	r5, [sp, #8]
 8008106:	4454      	add	r4, sl
 8008108:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800810c:	f8cd a008 	str.w	sl, [sp, #8]
 8008110:	1b64      	subs	r4, r4, r5
 8008112:	fba4 ab09 	umull	sl, fp, r4, r9
 8008116:	17e7      	asrs	r7, r4, #31
 8008118:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800811c:	fb09 bb07 	mla	fp, r9, r7, fp
 8008120:	f14b 0500 	adc.w	r5, fp, #0
 8008124:	006c      	lsls	r4, r5, #1
 8008126:	46a2      	mov	sl, r4
 8008128:	9401      	str	r4, [sp, #4]
 800812a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800812c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8008130:	9d03      	ldr	r5, [sp, #12]
 8008132:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008136:	fb0e f606 	mul.w	r6, lr, r6
 800813a:	fa1f fe88 	uxth.w	lr, r8
 800813e:	f04f 0800 	mov.w	r8, #0
 8008142:	fbc5 780a 	smlal	r7, r8, r5, sl
 8008146:	4645      	mov	r5, r8
 8008148:	10ac      	asrs	r4, r5, #2
 800814a:	9d04      	ldr	r5, [sp, #16]
 800814c:	f304 040f 	ssat	r4, #16, r4
 8008150:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8008154:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008156:	4574      	cmp	r4, lr
 8008158:	d912      	bls.n	8008180 <D48_GENERIC+0x1a8>
 800815a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800815c:	b2e5      	uxtb	r5, r4
 800815e:	2c01      	cmp	r4, #1
 8008160:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8008164:	f1c5 0700 	rsb	r7, r5, #0
 8008168:	f47f af56 	bne.w	8008018 <D48_GENERIC+0x40>
 800816c:	9d06      	ldr	r5, [sp, #24]
 800816e:	e9d0 4600 	ldrd	r4, r6, [r0]
 8008172:	3006      	adds	r0, #6
 8008174:	2d00      	cmp	r5, #0
 8008176:	f43f af6b 	beq.w	8008050 <D48_GENERIC+0x78>
 800817a:	ba64      	rev16	r4, r4
 800817c:	ba76      	rev16	r6, r6
 800817e:	e767      	b.n	8008050 <D48_GENERIC+0x78>
 8008180:	6093      	str	r3, [r2, #8]
 8008182:	2000      	movs	r0, #0
 8008184:	9b00      	ldr	r3, [sp, #0]
 8008186:	f8c2 c01c 	str.w	ip, [r2, #28]
 800818a:	60d3      	str	r3, [r2, #12]
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	6113      	str	r3, [r2, #16]
 8008190:	9b02      	ldr	r3, [sp, #8]
 8008192:	6153      	str	r3, [r2, #20]
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	6193      	str	r3, [r2, #24]
 8008198:	b009      	add	sp, #36	; 0x24
 800819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819e:	bf00      	nop
 80081a0:	24000000 	.word	0x24000000
 80081a4:	000f000a 	.word	0x000f000a
 80081a8:	00060003 	.word	0x00060003
 80081ac:	00150019 	.word	0x00150019
 80081b0:	00190015 	.word	0x00190015
 80081b4:	00030006 	.word	0x00030006
 80081b8:	000a000f 	.word	0x000a000f

080081bc <D64_GENERIC>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	6913      	ldr	r3, [r2, #16]
 80081c2:	b089      	sub	sp, #36	; 0x24
 80081c4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	6953      	ldr	r3, [r2, #20]
 80081ca:	9105      	str	r1, [sp, #20]
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80081d0:	6993      	ldr	r3, [r2, #24]
 80081d2:	69d4      	ldr	r4, [r2, #28]
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	9504      	str	r5, [sp, #16]
 80081d8:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80081dc:	2900      	cmp	r1, #0
 80081de:	f000 80e8 	beq.w	80083b2 <D64_GENERIC+0x1f6>
 80081e2:	6a11      	ldr	r1, [r2, #32]
 80081e4:	2500      	movs	r5, #0
 80081e6:	46b3      	mov	fp, r6
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	9106      	str	r1, [sp, #24]
 80081ec:	4978      	ldr	r1, [pc, #480]	; (80083d0 <D64_GENERIC+0x214>)
 80081ee:	e0cc      	b.n	800838a <D64_GENERIC+0x1ce>
 80081f0:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 80081f4:	f1ce 0c00 	rsb	ip, lr, #0
 80081f8:	f890 9000 	ldrb.w	r9, [r0]
 80081fc:	eb00 0708 	add.w	r7, r0, r8
 8008200:	f810 6008 	ldrb.w	r6, [r0, r8]
 8008204:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8008208:	f817 000c 	ldrb.w	r0, [r7, ip]
 800820c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8008210:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8008214:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8008218:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800821c:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008220:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8008224:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8008228:	0400      	lsls	r0, r0, #16
 800822a:	4467      	add	r7, ip
 800822c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8008230:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008234:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8008238:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800823c:	444e      	add	r6, r9
 800823e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8008242:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8008246:	44c2      	add	sl, r8
 8008248:	b2f7      	uxtb	r7, r6
 800824a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800824e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8008252:	0e36      	lsrs	r6, r6, #24
 8008254:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008258:	fa5f fc8a 	uxtb.w	ip, sl
 800825c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8008260:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8008264:	443c      	add	r4, r7
 8008266:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800826a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800826e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8008272:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8008276:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800827a:	4b56      	ldr	r3, [pc, #344]	; (80083d4 <D64_GENERIC+0x218>)
 800827c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8008280:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008284:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8008288:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800828c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008290:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8008294:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8008298:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800829c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80082a0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80082a4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80082a8:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 80082ac:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80082b0:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 80082b4:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 80082b8:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80082bc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80082c0:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80082c4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80082c8:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80082cc:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80082d0:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80082d4:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80082d8:	fb28 b903 	smlad	r9, r8, r3, fp
 80082dc:	4b3e      	ldr	r3, [pc, #248]	; (80083d8 <D64_GENERIC+0x21c>)
 80082de:	fb26 9903 	smlad	r9, r6, r3, r9
 80082e2:	4b3e      	ldr	r3, [pc, #248]	; (80083dc <D64_GENERIC+0x220>)
 80082e4:	fb2c 9703 	smlad	r7, ip, r3, r9
 80082e8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 80082ec:	fb2a 7909 	smlad	r9, sl, r9, r7
 80082f0:	4f3b      	ldr	r7, [pc, #236]	; (80083e0 <D64_GENERIC+0x224>)
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	fb28 3307 	smlad	r3, r8, r7, r3
 80082f8:	fb2a 3317 	smladx	r3, sl, r7, r3
 80082fc:	4f39      	ldr	r7, [pc, #228]	; (80083e4 <D64_GENERIC+0x228>)
 80082fe:	fb26 3307 	smlad	r3, r6, r7, r3
 8008302:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8008306:	f04f 0e01 	mov.w	lr, #1
 800830a:	fb28 f80e 	smuad	r8, r8, lr
 800830e:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <D64_GENERIC+0x22c>)
 8008310:	fb26 8603 	smlad	r6, r6, r3, r8
 8008314:	4b35      	ldr	r3, [pc, #212]	; (80083ec <D64_GENERIC+0x230>)
 8008316:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800831a:	4b35      	ldr	r3, [pc, #212]	; (80083f0 <D64_GENERIC+0x234>)
 800831c:	fb2a c303 	smlad	r3, sl, r3, ip
 8008320:	9f06      	ldr	r7, [sp, #24]
 8008322:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8008326:	9302      	str	r3, [sp, #8]
 8008328:	b1cf      	cbz	r7, 800835e <D64_GENERIC+0x1a2>
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	444b      	add	r3, r9
 800832e:	461e      	mov	r6, r3
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	f8cd 900c 	str.w	r9, [sp, #12]
 8008336:	1af6      	subs	r6, r6, r3
 8008338:	46b0      	mov	r8, r6
 800833a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800833e:	e9cd 8900 	strd	r8, r9, [sp]
 8008342:	fba6 8907 	umull	r8, r9, r6, r7
 8008346:	9e01      	ldr	r6, [sp, #4]
 8008348:	fb07 9306 	mla	r3, r7, r6, r9
 800834c:	4646      	mov	r6, r8
 800834e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8008352:	f143 0700 	adc.w	r7, r3, #0
 8008356:	fa07 f30e 	lsl.w	r3, r7, lr
 800835a:	4699      	mov	r9, r3
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8008362:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800836c:	2700      	movs	r7, #0
 800836e:	fb05 fc0c 	mul.w	ip, r5, ip
 8008372:	3501      	adds	r5, #1
 8008374:	fbc3 6709 	smlal	r6, r7, r3, r9
 8008378:	9b05      	ldr	r3, [sp, #20]
 800837a:	10be      	asrs	r6, r7, #2
 800837c:	f306 060f 	ssat	r6, #16, r6
 8008380:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8008384:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008386:	42ae      	cmp	r6, r5
 8008388:	dd11      	ble.n	80083ae <D64_GENERIC+0x1f2>
 800838a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800838e:	f1be 0f01 	cmp.w	lr, #1
 8008392:	f47f af2d 	bne.w	80081f0 <D64_GENERIC+0x34>
 8008396:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8008398:	f100 0c08 	add.w	ip, r0, #8
 800839c:	06bb      	lsls	r3, r7, #26
 800839e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 80083a2:	d513      	bpl.n	80083cc <D64_GENERIC+0x210>
 80083a4:	ba76      	rev16	r6, r6
 80083a6:	fa9a fa9a 	rev16.w	sl, sl
 80083aa:	4660      	mov	r0, ip
 80083ac:	e74c      	b.n	8008248 <D64_GENERIC+0x8c>
 80083ae:	465e      	mov	r6, fp
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	6093      	str	r3, [r2, #8]
 80083b4:	2000      	movs	r0, #0
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	60d6      	str	r6, [r2, #12]
 80083ba:	6113      	str	r3, [r2, #16]
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	61d4      	str	r4, [r2, #28]
 80083c0:	6153      	str	r3, [r2, #20]
 80083c2:	9b07      	ldr	r3, [sp, #28]
 80083c4:	6193      	str	r3, [r2, #24]
 80083c6:	b009      	add	sp, #36	; 0x24
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	4660      	mov	r0, ip
 80083ce:	e73b      	b.n	8008248 <D64_GENERIC+0x8c>
 80083d0:	24000000 	.word	0x24000000
 80083d4:	001c0015 	.word	0x001c0015
 80083d8:	000f000a 	.word	0x000f000a
 80083dc:	00060003 	.word	0x00060003
 80083e0:	0024002a 	.word	0x0024002a
 80083e4:	002e0030 	.word	0x002e0030
 80083e8:	00030006 	.word	0x00030006
 80083ec:	000a000f 	.word	0x000a000f
 80083f0:	0015001c 	.word	0x0015001c

080083f4 <D80_GENERIC>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	b08b      	sub	sp, #44	; 0x2c
 80083fa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80083fc:	9107      	str	r1, [sp, #28]
 80083fe:	6911      	ldr	r1, [r2, #16]
 8008400:	9104      	str	r1, [sp, #16]
 8008402:	6951      	ldr	r1, [r2, #20]
 8008404:	9105      	str	r1, [sp, #20]
 8008406:	6991      	ldr	r1, [r2, #24]
 8008408:	9109      	str	r1, [sp, #36]	; 0x24
 800840a:	69d1      	ldr	r1, [r2, #28]
 800840c:	9102      	str	r1, [sp, #8]
 800840e:	6891      	ldr	r1, [r2, #8]
 8008410:	9103      	str	r1, [sp, #12]
 8008412:	68d1      	ldr	r1, [r2, #12]
 8008414:	9101      	str	r1, [sp, #4]
 8008416:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008418:	9106      	str	r1, [sp, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 810b 	beq.w	8008636 <D80_GENERIC+0x242>
 8008420:	6a13      	ldr	r3, [r2, #32]
 8008422:	f04f 0800 	mov.w	r8, #0
 8008426:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008688 <D80_GENERIC+0x294>
 800842a:	9308      	str	r3, [sp, #32]
 800842c:	9200      	str	r2, [sp, #0]
 800842e:	e0ee      	b.n	800860e <D80_GENERIC+0x21a>
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f890 e000 	ldrb.w	lr, [r0]
 8008436:	b219      	sxth	r1, r3
 8008438:	425c      	negs	r4, r3
 800843a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800843e:	004e      	lsls	r6, r1, #1
 8008440:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008444:	4431      	add	r1, r6
 8008446:	1843      	adds	r3, r0, r1
 8008448:	f810 b001 	ldrb.w	fp, [r0, r1]
 800844c:	1919      	adds	r1, r3, r4
 800844e:	5d1b      	ldrb	r3, [r3, r4]
 8008450:	1948      	adds	r0, r1, r5
 8008452:	f811 a005 	ldrb.w	sl, [r1, r5]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	1907      	adds	r7, r0, r4
 800845a:	5d01      	ldrb	r1, [r0, r4]
 800845c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008460:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8008464:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8008468:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800846c:	0409      	lsls	r1, r1, #16
 800846e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8008472:	eb0b 0905 	add.w	r9, fp, r5
 8008476:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800847a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800847e:	eb09 0b04 	add.w	fp, r9, r4
 8008482:	f819 4004 	ldrb.w	r4, [r9, r4]
 8008486:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800848a:	4473      	add	r3, lr
 800848c:	eb0b 0006 	add.w	r0, fp, r6
 8008490:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8008494:	4439      	add	r1, r7
 8008496:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800849a:	b2df      	uxtb	r7, r3
 800849c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80084a0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80084a4:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 80084a8:	fa5f fa81 	uxtb.w	sl, r1
 80084ac:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 80084b0:	9c02      	ldr	r4, [sp, #8]
 80084b2:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 80084b6:	441c      	add	r4, r3
 80084b8:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 80084bc:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 80084c0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80084c4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80084c8:	f3c4 0309 	ubfx	r3, r4, #0, #10
 80084cc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80084d0:	b2ed      	uxtb	r5, r5
 80084d2:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 80084d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80084da:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80084de:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80084e2:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80084e6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80084ea:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80084ee:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80084f2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80084f6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80084fa:	0e09      	lsrs	r1, r1, #24
 80084fc:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008500:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008504:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008508:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800850c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008510:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008514:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008518:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800851c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008520:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8008524:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008528:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800852c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008530:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008534:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008538:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800853c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8008540:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8008544:	9202      	str	r2, [sp, #8]
 8008546:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800854a:	4a43      	ldr	r2, [pc, #268]	; (8008658 <D80_GENERIC+0x264>)
 800854c:	9f01      	ldr	r7, [sp, #4]
 800854e:	fb23 7a02 	smlad	sl, r3, r2, r7
 8008552:	4a42      	ldr	r2, [pc, #264]	; (800865c <D80_GENERIC+0x268>)
 8008554:	fb26 aa02 	smlad	sl, r6, r2, sl
 8008558:	4a41      	ldr	r2, [pc, #260]	; (8008660 <D80_GENERIC+0x26c>)
 800855a:	fb24 aa02 	smlad	sl, r4, r2, sl
 800855e:	4a41      	ldr	r2, [pc, #260]	; (8008664 <D80_GENERIC+0x270>)
 8008560:	fb21 a702 	smlad	r7, r1, r2, sl
 8008564:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008568:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800856c:	4a3e      	ldr	r2, [pc, #248]	; (8008668 <D80_GENERIC+0x274>)
 800856e:	9f03      	ldr	r7, [sp, #12]
 8008570:	fb23 7e02 	smlad	lr, r3, r2, r7
 8008574:	4a3d      	ldr	r2, [pc, #244]	; (800866c <D80_GENERIC+0x278>)
 8008576:	fb26 ee02 	smlad	lr, r6, r2, lr
 800857a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800857e:	fb24 e707 	smlad	r7, r4, r7, lr
 8008582:	4a3b      	ldr	r2, [pc, #236]	; (8008670 <D80_GENERIC+0x27c>)
 8008584:	fb21 7702 	smlad	r7, r1, r2, r7
 8008588:	4a3a      	ldr	r2, [pc, #232]	; (8008674 <D80_GENERIC+0x280>)
 800858a:	fb25 7202 	smlad	r2, r5, r2, r7
 800858e:	f04f 0901 	mov.w	r9, #1
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	fb23 f909 	smuad	r9, r3, r9
 8008598:	4b37      	ldr	r3, [pc, #220]	; (8008678 <D80_GENERIC+0x284>)
 800859a:	fb26 9603 	smlad	r6, r6, r3, r9
 800859e:	4f37      	ldr	r7, [pc, #220]	; (800867c <D80_GENERIC+0x288>)
 80085a0:	fb24 6407 	smlad	r4, r4, r7, r6
 80085a4:	4f36      	ldr	r7, [pc, #216]	; (8008680 <D80_GENERIC+0x28c>)
 80085a6:	fb21 4707 	smlad	r7, r1, r7, r4
 80085aa:	4936      	ldr	r1, [pc, #216]	; (8008684 <D80_GENERIC+0x290>)
 80085ac:	fb25 7301 	smlad	r3, r5, r1, r7
 80085b0:	9303      	str	r3, [sp, #12]
 80085b2:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	b193      	cbz	r3, 80085e0 <D80_GENERIC+0x1ec>
 80085ba:	9a04      	ldr	r2, [sp, #16]
 80085bc:	4452      	add	r2, sl
 80085be:	4614      	mov	r4, r2
 80085c0:	9a05      	ldr	r2, [sp, #20]
 80085c2:	f8cd a014 	str.w	sl, [sp, #20]
 80085c6:	1aa4      	subs	r4, r4, r2
 80085c8:	fba4 1203 	umull	r1, r2, r4, r3
 80085cc:	17e7      	asrs	r7, r4, #31
 80085ce:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 80085d2:	fb03 2207 	mla	r2, r3, r7, r2
 80085d6:	f142 0500 	adc.w	r5, r2, #0
 80085da:	006b      	lsls	r3, r5, #1
 80085dc:	469a      	mov	sl, r3
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	9e00      	ldr	r6, [sp, #0]
 80085e2:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 80085e6:	9a06      	ldr	r2, [sp, #24]
 80085e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80085ec:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 80085ee:	2500      	movs	r5, #0
 80085f0:	fb08 f303 	mul.w	r3, r8, r3
 80085f4:	fbc2 450a 	smlal	r4, r5, r2, sl
 80085f8:	9a07      	ldr	r2, [sp, #28]
 80085fa:	f108 0801 	add.w	r8, r8, #1
 80085fe:	10a9      	asrs	r1, r5, #2
 8008600:	f301 010f 	ssat	r1, #16, r1
 8008604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008608:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800860a:	4543      	cmp	r3, r8
 800860c:	dd12      	ble.n	8008634 <D80_GENERIC+0x240>
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008612:	2b01      	cmp	r3, #1
 8008614:	f47f af0c 	bne.w	8008430 <D80_GENERIC+0x3c>
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	6885      	ldr	r5, [r0, #8]
 800861c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800861e:	06b2      	lsls	r2, r6, #26
 8008620:	e9d0 3100 	ldrd	r3, r1, [r0]
 8008624:	f100 000a 	add.w	r0, r0, #10
 8008628:	f57f af35 	bpl.w	8008496 <D80_GENERIC+0xa2>
 800862c:	ba5b      	rev16	r3, r3
 800862e:	ba49      	rev16	r1, r1
 8008630:	ba6d      	rev16	r5, r5
 8008632:	e730      	b.n	8008496 <D80_GENERIC+0xa2>
 8008634:	4632      	mov	r2, r6
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	2000      	movs	r0, #0
 800863a:	6093      	str	r3, [r2, #8]
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	60d3      	str	r3, [r2, #12]
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	61d3      	str	r3, [r2, #28]
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	6113      	str	r3, [r2, #16]
 8008648:	9b05      	ldr	r3, [sp, #20]
 800864a:	6153      	str	r3, [r2, #20]
 800864c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864e:	6193      	str	r3, [r2, #24]
 8008650:	b00b      	add	sp, #44	; 0x2c
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	bf00      	nop
 8008658:	002d0024 	.word	0x002d0024
 800865c:	001c0015 	.word	0x001c0015
 8008660:	000f000a 	.word	0x000f000a
 8008664:	00060003 	.word	0x00060003
 8008668:	0037003f 	.word	0x0037003f
 800866c:	00450049 	.word	0x00450049
 8008670:	00490045 	.word	0x00490045
 8008674:	003f0037 	.word	0x003f0037
 8008678:	00030006 	.word	0x00030006
 800867c:	000a000f 	.word	0x000a000f
 8008680:	0015001c 	.word	0x0015001c
 8008684:	0024002d 	.word	0x0024002d
 8008688:	24000000 	.word	0x24000000

0800868c <D128_GENERIC>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	b08d      	sub	sp, #52	; 0x34
 8008692:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008694:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008698:	9109      	str	r1, [sp, #36]	; 0x24
 800869a:	6911      	ldr	r1, [r2, #16]
 800869c:	9201      	str	r2, [sp, #4]
 800869e:	9106      	str	r1, [sp, #24]
 80086a0:	6951      	ldr	r1, [r2, #20]
 80086a2:	9107      	str	r1, [sp, #28]
 80086a4:	6991      	ldr	r1, [r2, #24]
 80086a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80086a8:	6891      	ldr	r1, [r2, #8]
 80086aa:	9103      	str	r1, [sp, #12]
 80086ac:	68d1      	ldr	r1, [r2, #12]
 80086ae:	9102      	str	r1, [sp, #8]
 80086b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80086b2:	9108      	str	r1, [sp, #32]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8183 	beq.w	80089c0 <D128_GENERIC+0x334>
 80086ba:	2300      	movs	r3, #0
 80086bc:	6a12      	ldr	r2, [r2, #32]
 80086be:	4681      	mov	r9, r0
 80086c0:	920a      	str	r2, [sp, #40]	; 0x28
 80086c2:	e9cd a304 	strd	sl, r3, [sp, #16]
 80086c6:	e165      	b.n	8008994 <D128_GENERIC+0x308>
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	f899 b000 	ldrb.w	fp, [r9]
 80086ce:	b213      	sxth	r3, r2
 80086d0:	4255      	negs	r5, r2
 80086d2:	f819 0002 	ldrb.w	r0, [r9, r2]
 80086d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80086da:	009f      	lsls	r7, r3, #2
 80086dc:	eb09 0402 	add.w	r4, r9, r2
 80086e0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80086e4:	f819 8002 	ldrb.w	r8, [r9, r2]
 80086e8:	443b      	add	r3, r7
 80086ea:	1962      	adds	r2, r4, r5
 80086ec:	5d64      	ldrb	r4, [r4, r5]
 80086ee:	eb02 0c03 	add.w	ip, r2, r3
 80086f2:	0424      	lsls	r4, r4, #16
 80086f4:	5cd3      	ldrb	r3, [r2, r3]
 80086f6:	eb0c 0e05 	add.w	lr, ip, r5
 80086fa:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80086fe:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8008702:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8008706:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800870a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800870e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8008712:	eb0c 0e06 	add.w	lr, ip, r6
 8008716:	f81c a006 	ldrb.w	sl, [ip, r6]
 800871a:	0412      	lsls	r2, r2, #16
 800871c:	445c      	add	r4, fp
 800871e:	eb0e 0c05 	add.w	ip, lr, r5
 8008722:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8008726:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800872a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800872e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008738:	eb00 0b06 	add.w	fp, r0, r6
 800873c:	5d80      	ldrb	r0, [r0, r6]
 800873e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8008742:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8008746:	eb0b 0a05 	add.w	sl, fp, r5
 800874a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800874e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8008752:	0436      	lsls	r6, r6, #16
 8008754:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008758:	4442      	add	r2, r8
 800875a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800875e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8008762:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008766:	44b9      	add	r9, r7
 8008768:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800876c:	4463      	add	r3, ip
 800876e:	eb06 0508 	add.w	r5, r6, r8
 8008772:	b2e7      	uxtb	r7, r4
 8008774:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008778:	499b      	ldr	r1, [pc, #620]	; (80089e8 <D128_GENERIC+0x35c>)
 800877a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800877e:	0e24      	lsrs	r4, r4, #24
 8008780:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008784:	b2d7      	uxtb	r7, r2
 8008786:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800878a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800878e:	9904      	ldr	r1, [sp, #16]
 8008790:	4461      	add	r1, ip
 8008792:	468c      	mov	ip, r1
 8008794:	4994      	ldr	r1, [pc, #592]	; (80089e8 <D128_GENERIC+0x35c>)
 8008796:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800879a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800879e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 80087a2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80087a6:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 80087aa:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80087ae:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 80087b2:	0e12      	lsrs	r2, r2, #24
 80087b4:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 80087b8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80087bc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80087c0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80087c4:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 80087c8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80087d2:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 80087d6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80087da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087de:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 80087e2:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80087e6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80087ea:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 80087ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80087f2:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80087f6:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80087fa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80087fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008802:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008806:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800880a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800880e:	0e1b      	lsrs	r3, r3, #24
 8008810:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8008814:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008818:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800881c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8008820:	b2eb      	uxtb	r3, r5
 8008822:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008826:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800882a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800882e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008832:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8008836:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800883a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800883e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008842:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008846:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800884a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800884e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8008852:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008856:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800885a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800885e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8008862:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008866:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800886a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800886e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8008872:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008876:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800887a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800887e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8008882:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8008886:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800888a:	9104      	str	r1, [sp, #16]
 800888c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008890:	9902      	ldr	r1, [sp, #8]
 8008892:	4a56      	ldr	r2, [pc, #344]	; (80089ec <D128_GENERIC+0x360>)
 8008894:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008898:	4955      	ldr	r1, [pc, #340]	; (80089f0 <D128_GENERIC+0x364>)
 800889a:	fb28 2201 	smlad	r2, r8, r1, r2
 800889e:	4955      	ldr	r1, [pc, #340]	; (80089f4 <D128_GENERIC+0x368>)
 80088a0:	fb27 2201 	smlad	r2, r7, r1, r2
 80088a4:	4954      	ldr	r1, [pc, #336]	; (80089f8 <D128_GENERIC+0x36c>)
 80088a6:	fb26 2201 	smlad	r2, r6, r1, r2
 80088aa:	4954      	ldr	r1, [pc, #336]	; (80089fc <D128_GENERIC+0x370>)
 80088ac:	fb24 2201 	smlad	r2, r4, r1, r2
 80088b0:	4953      	ldr	r1, [pc, #332]	; (8008a00 <D128_GENERIC+0x374>)
 80088b2:	fb20 2201 	smlad	r2, r0, r1, r2
 80088b6:	4953      	ldr	r1, [pc, #332]	; (8008a04 <D128_GENERIC+0x378>)
 80088b8:	fb23 2201 	smlad	r2, r3, r1, r2
 80088bc:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80088c0:	fb25 2a0c 	smlad	sl, r5, ip, r2
 80088c4:	4950      	ldr	r1, [pc, #320]	; (8008a08 <D128_GENERIC+0x37c>)
 80088c6:	9a03      	ldr	r2, [sp, #12]
 80088c8:	fb2b 2c01 	smlad	ip, fp, r1, r2
 80088cc:	4a4f      	ldr	r2, [pc, #316]	; (8008a0c <D128_GENERIC+0x380>)
 80088ce:	fb28 ce02 	smlad	lr, r8, r2, ip
 80088d2:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008a24 <D128_GENERIC+0x398>
 80088d6:	fb27 ec0c 	smlad	ip, r7, ip, lr
 80088da:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8008a28 <D128_GENERIC+0x39c>
 80088de:	fb26 cc0e 	smlad	ip, r6, lr, ip
 80088e2:	f8df e148 	ldr.w	lr, [pc, #328]	; 8008a2c <D128_GENERIC+0x3a0>
 80088e6:	fb24 ce0e 	smlad	lr, r4, lr, ip
 80088ea:	f8df c144 	ldr.w	ip, [pc, #324]	; 8008a30 <D128_GENERIC+0x3a4>
 80088ee:	fb20 ee0c 	smlad	lr, r0, ip, lr
 80088f2:	f8df c140 	ldr.w	ip, [pc, #320]	; 8008a34 <D128_GENERIC+0x3a8>
 80088f6:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80088fa:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008a38 <D128_GENERIC+0x3ac>
 80088fe:	fb25 c20e 	smlad	r2, r5, lr, ip
 8008902:	f04f 0c01 	mov.w	ip, #1
 8008906:	9202      	str	r2, [sp, #8]
 8008908:	fb2b fb0c 	smuad	fp, fp, ip
 800890c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8008a3c <D128_GENERIC+0x3b0>
 8008910:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8008914:	f8df c128 	ldr.w	ip, [pc, #296]	; 8008a40 <D128_GENERIC+0x3b4>
 8008918:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800891c:	4f3c      	ldr	r7, [pc, #240]	; (8008a10 <D128_GENERIC+0x384>)
 800891e:	fb26 bb07 	smlad	fp, r6, r7, fp
 8008922:	4f3c      	ldr	r7, [pc, #240]	; (8008a14 <D128_GENERIC+0x388>)
 8008924:	fb24 bb07 	smlad	fp, r4, r7, fp
 8008928:	4f3b      	ldr	r7, [pc, #236]	; (8008a18 <D128_GENERIC+0x38c>)
 800892a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800892e:	4f3b      	ldr	r7, [pc, #236]	; (8008a1c <D128_GENERIC+0x390>)
 8008930:	fb23 bb07 	smlad	fp, r3, r7, fp
 8008934:	4b3a      	ldr	r3, [pc, #232]	; (8008a20 <D128_GENERIC+0x394>)
 8008936:	fb25 b303 	smlad	r3, r5, r3, fp
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8008940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008942:	b183      	cbz	r3, 8008966 <D128_GENERIC+0x2da>
 8008944:	9a06      	ldr	r2, [sp, #24]
 8008946:	9907      	ldr	r1, [sp, #28]
 8008948:	4422      	add	r2, r4
 800894a:	9407      	str	r4, [sp, #28]
 800894c:	1a52      	subs	r2, r2, r1
 800894e:	fba2 0103 	umull	r0, r1, r2, r3
 8008952:	17d5      	asrs	r5, r2, #31
 8008954:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8008958:	fb03 1105 	mla	r1, r3, r5, r1
 800895c:	f141 0300 	adc.w	r3, r1, #0
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	461c      	mov	r4, r3
 8008964:	9306      	str	r3, [sp, #24]
 8008966:	9d01      	ldr	r5, [sp, #4]
 8008968:	01e4      	lsls	r4, r4, #7
 800896a:	9e05      	ldr	r6, [sp, #20]
 800896c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008970:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8008972:	2300      	movs	r3, #0
 8008974:	9908      	ldr	r1, [sp, #32]
 8008976:	fb06 f000 	mul.w	r0, r6, r0
 800897a:	3601      	adds	r6, #1
 800897c:	fbc1 2304 	smlal	r2, r3, r1, r4
 8008980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008982:	109b      	asrs	r3, r3, #2
 8008984:	9605      	str	r6, [sp, #20]
 8008986:	f303 030f 	ssat	r3, #16, r3
 800898a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800898e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8008990:	42b3      	cmp	r3, r6
 8008992:	dd13      	ble.n	80089bc <D128_GENERIC+0x330>
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008998:	2a01      	cmp	r2, #1
 800899a:	f47f ae95 	bne.w	80086c8 <D128_GENERIC+0x3c>
 800899e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80089a0:	f109 0610 	add.w	r6, r9, #16
 80089a4:	0681      	lsls	r1, r0, #26
 80089a6:	e9d9 4200 	ldrd	r4, r2, [r9]
 80089aa:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 80089ae:	d518      	bpl.n	80089e2 <D128_GENERIC+0x356>
 80089b0:	ba64      	rev16	r4, r4
 80089b2:	ba52      	rev16	r2, r2
 80089b4:	ba5b      	rev16	r3, r3
 80089b6:	ba6d      	rev16	r5, r5
 80089b8:	46b1      	mov	r9, r6
 80089ba:	e6da      	b.n	8008772 <D128_GENERIC+0xe6>
 80089bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	2000      	movs	r0, #0
 80089c4:	9903      	ldr	r1, [sp, #12]
 80089c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089c8:	6099      	str	r1, [r3, #8]
 80089ca:	9902      	ldr	r1, [sp, #8]
 80089cc:	f8c3 a01c 	str.w	sl, [r3, #28]
 80089d0:	60d9      	str	r1, [r3, #12]
 80089d2:	9906      	ldr	r1, [sp, #24]
 80089d4:	619a      	str	r2, [r3, #24]
 80089d6:	6119      	str	r1, [r3, #16]
 80089d8:	9907      	ldr	r1, [sp, #28]
 80089da:	6159      	str	r1, [r3, #20]
 80089dc:	b00d      	add	sp, #52	; 0x34
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	46b1      	mov	r9, r6
 80089e4:	e6c5      	b.n	8008772 <D128_GENERIC+0xe6>
 80089e6:	bf00      	nop
 80089e8:	24000000 	.word	0x24000000
 80089ec:	00780069 	.word	0x00780069
 80089f0:	005b004e 	.word	0x005b004e
 80089f4:	00420037 	.word	0x00420037
 80089f8:	002d0024 	.word	0x002d0024
 80089fc:	001c0015 	.word	0x001c0015
 8008a00:	000f000a 	.word	0x000f000a
 8008a04:	00060003 	.word	0x00060003
 8008a08:	00880096 	.word	0x00880096
 8008a0c:	00a200ac 	.word	0x00a200ac
 8008a10:	0015001c 	.word	0x0015001c
 8008a14:	0024002d 	.word	0x0024002d
 8008a18:	00370042 	.word	0x00370042
 8008a1c:	004e005b 	.word	0x004e005b
 8008a20:	00690078 	.word	0x00690078
 8008a24:	00b400ba 	.word	0x00b400ba
 8008a28:	00be00c0 	.word	0x00be00c0
 8008a2c:	00c000be 	.word	0x00c000be
 8008a30:	00ba00b4 	.word	0x00ba00b4
 8008a34:	00ac00a2 	.word	0x00ac00a2
 8008a38:	00960088 	.word	0x00960088
 8008a3c:	00030006 	.word	0x00030006
 8008a40:	000a000f 	.word	0x000a000f

08008a44 <D16_1CH_HTONS_VOL_HP>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	6993      	ldr	r3, [r2, #24]
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	4682      	mov	sl, r0
 8008a4e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008a50:	9304      	str	r3, [sp, #16]
 8008a52:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8008a56:	69d3      	ldr	r3, [r2, #28]
 8008a58:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008a5c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008a60:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8008a64:	9403      	str	r4, [sp, #12]
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d054      	beq.n	8008b14 <D16_1CH_HTONS_VOL_HP+0xd0>
 8008a6a:	f1a1 0902 	sub.w	r9, r1, #2
 8008a6e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8008a72:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008b20 <D16_1CH_HTONS_VOL_HP+0xdc>
 8008a76:	4650      	mov	r0, sl
 8008a78:	9101      	str	r1, [sp, #4]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f8cd b008 	str.w	fp, [sp, #8]
 8008a80:	9205      	str	r2, [sp, #20]
 8008a82:	f850 3b02 	ldr.w	r3, [r0], #2
 8008a86:	ba5b      	rev16	r3, r3
 8008a88:	b2dc      	uxtb	r4, r3
 8008a8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008a8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a92:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008a96:	4419      	add	r1, r3
 8008a98:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008a9c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008aa0:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8008aa4:	0aa1      	lsrs	r1, r4, #10
 8008aa6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008aaa:	4a1b      	ldr	r2, [pc, #108]	; (8008b18 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008aac:	fb23 5402 	smlad	r4, r3, r2, r5
 8008ab0:	4a1a      	ldr	r2, [pc, #104]	; (8008b1c <D16_1CH_HTONS_VOL_HP+0xd8>)
 8008ab2:	fb23 f502 	smuad	r5, r3, r2
 8008ab6:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008aba:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8008abe:	f04f 0b00 	mov.w	fp, #0
 8008ac2:	19a2      	adds	r2, r4, r6
 8008ac4:	eba2 020c 	sub.w	r2, r2, ip
 8008ac8:	46a4      	mov	ip, r4
 8008aca:	17d7      	asrs	r7, r2, #31
 8008acc:	fba2 230e 	umull	r2, r3, r2, lr
 8008ad0:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8008ad4:	fb0e 3307 	mla	r3, lr, r7, r3
 8008ad8:	f143 0700 	adc.w	r7, r3, #0
 8008adc:	9b02      	ldr	r3, [sp, #8]
 8008ade:	047a      	lsls	r2, r7, #17
 8008ae0:	007e      	lsls	r6, r7, #1
 8008ae2:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8008ae6:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8008aea:	f303 030f 	ssat	r3, #16, r3
 8008aee:	f829 3f02 	strh.w	r3, [r9, #2]!
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	4298      	cmp	r0, r3
 8008af6:	d1c4      	bne.n	8008a82 <D16_1CH_HTONS_VOL_HP+0x3e>
 8008af8:	460b      	mov	r3, r1
 8008afa:	9a05      	ldr	r2, [sp, #20]
 8008afc:	2000      	movs	r0, #0
 8008afe:	9903      	ldr	r1, [sp, #12]
 8008b00:	61d3      	str	r3, [r2, #28]
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	6095      	str	r5, [r2, #8]
 8008b06:	60d1      	str	r1, [r2, #12]
 8008b08:	6193      	str	r3, [r2, #24]
 8008b0a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008b0e:	b007      	add	sp, #28
 8008b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b14:	4664      	mov	r4, ip
 8008b16:	e7f1      	b.n	8008afc <D16_1CH_HTONS_VOL_HP+0xb8>
 8008b18:	00030001 	.word	0x00030001
 8008b1c:	00010003 	.word	0x00010003
 8008b20:	24000000 	.word	0x24000000

08008b24 <D24_1CH_HTONS_VOL_HP>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008b2a:	b089      	sub	sp, #36	; 0x24
 8008b2c:	6993      	ldr	r3, [r2, #24]
 8008b2e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008b30:	9604      	str	r6, [sp, #16]
 8008b32:	6a16      	ldr	r6, [r2, #32]
 8008b34:	9306      	str	r3, [sp, #24]
 8008b36:	9505      	str	r5, [sp, #20]
 8008b38:	69d3      	ldr	r3, [r2, #28]
 8008b3a:	9600      	str	r6, [sp, #0]
 8008b3c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008b40:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	f000 8083 	beq.w	8008c50 <D24_1CH_HTONS_VOL_HP+0x12c>
 8008b4a:	9207      	str	r2, [sp, #28]
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	4622      	mov	r2, r4
 8008b50:	f1a1 0b02 	sub.w	fp, r1, #2
 8008b54:	4f3f      	ldr	r7, [pc, #252]	; (8008c54 <D24_1CH_HTONS_VOL_HP+0x130>)
 8008b56:	461d      	mov	r5, r3
 8008b58:	f8cd a00c 	str.w	sl, [sp, #12]
 8008b5c:	9c00      	ldr	r4, [sp, #0]
 8008b5e:	e056      	b.n	8008c0e <D24_1CH_HTONS_VOL_HP+0xea>
 8008b60:	7841      	ldrb	r1, [r0, #1]
 8008b62:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8008b66:	3002      	adds	r0, #2
 8008b68:	4488      	add	r8, r1
 8008b6a:	fa5f f388 	uxtb.w	r3, r8
 8008b6e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8008b72:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8008b76:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8008b7a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8008b7e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8008b82:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8008b86:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008b8a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008b8e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8008b92:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008b96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b9a:	492f      	ldr	r1, [pc, #188]	; (8008c58 <D24_1CH_HTONS_VOL_HP+0x134>)
 8008b9c:	fb23 e901 	smlad	r9, r3, r1, lr
 8008ba0:	492e      	ldr	r1, [pc, #184]	; (8008c5c <D24_1CH_HTONS_VOL_HP+0x138>)
 8008ba2:	fb23 ce01 	smlad	lr, r3, r1, ip
 8008ba6:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8008baa:	2101      	movs	r1, #1
 8008bac:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8008bb0:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8008bb4:	fb23 f301 	smuad	r3, r3, r1
 8008bb8:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8008bbc:	eb08 0c03 	add.w	ip, r8, r3
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	f04f 0a00 	mov.w	sl, #0
 8008bc6:	440a      	add	r2, r1
 8008bc8:	3601      	adds	r6, #1
 8008bca:	9103      	str	r1, [sp, #12]
 8008bcc:	1ad2      	subs	r2, r2, r3
 8008bce:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008bd2:	fba2 2304 	umull	r2, r3, r2, r4
 8008bd6:	e9cd 2300 	strd	r2, r3, [sp]
 8008bda:	fb04 3309 	mla	r3, r4, r9, r3
 8008bde:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008be8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008bec:	f143 0300 	adc.w	r3, r3, #0
 8008bf0:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8008bf4:	005a      	lsls	r2, r3, #1
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8008bfc:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8008c00:	f303 030f 	ssat	r3, #16, r3
 8008c04:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	429e      	cmp	r6, r3
 8008c0c:	d010      	beq.n	8008c30 <D24_1CH_HTONS_VOL_HP+0x10c>
 8008c0e:	f890 9003 	ldrb.w	r9, [r0, #3]
 8008c12:	f016 0f01 	tst.w	r6, #1
 8008c16:	7801      	ldrb	r1, [r0, #0]
 8008c18:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008c1c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8008c20:	d09e      	beq.n	8008b60 <D24_1CH_HTONS_VOL_HP+0x3c>
 8008c22:	f890 8002 	ldrb.w	r8, [r0, #2]
 8008c26:	3004      	adds	r0, #4
 8008c28:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8008c2c:	4488      	add	r8, r1
 8008c2e:	e79c      	b.n	8008b6a <D24_1CH_HTONS_VOL_HP+0x46>
 8008c30:	4614      	mov	r4, r2
 8008c32:	462b      	mov	r3, r5
 8008c34:	9a07      	ldr	r2, [sp, #28]
 8008c36:	2000      	movs	r0, #0
 8008c38:	61d3      	str	r3, [r2, #28]
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	f8c2 c008 	str.w	ip, [r2, #8]
 8008c40:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008c44:	6193      	str	r3, [r2, #24]
 8008c46:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008c4a:	b009      	add	sp, #36	; 0x24
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	4651      	mov	r1, sl
 8008c52:	e7f0      	b.n	8008c36 <D24_1CH_HTONS_VOL_HP+0x112>
 8008c54:	24000000 	.word	0x24000000
 8008c58:	00030001 	.word	0x00030001
 8008c5c:	00060007 	.word	0x00060007

08008c60 <D32_1CH_HTONS_VOL_HP>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	6993      	ldr	r3, [r2, #24]
 8008c66:	b087      	sub	sp, #28
 8008c68:	4683      	mov	fp, r0
 8008c6a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	69d5      	ldr	r5, [r2, #28]
 8008c70:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008c72:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008c76:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8008c7a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d077      	beq.n	8008d72 <D32_1CH_HTONS_VOL_HP+0x112>
 8008c82:	460f      	mov	r7, r1
 8008c84:	46f1      	mov	r9, lr
 8008c86:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008c8a:	f8cd 8000 	str.w	r8, [sp]
 8008c8e:	4e3a      	ldr	r6, [pc, #232]	; (8008d78 <D32_1CH_HTONS_VOL_HP+0x118>)
 8008c90:	469e      	mov	lr, r3
 8008c92:	46a0      	mov	r8, r4
 8008c94:	9103      	str	r1, [sp, #12]
 8008c96:	9205      	str	r2, [sp, #20]
 8008c98:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008c9c:	ba64      	rev16	r4, r4
 8008c9e:	b2e0      	uxtb	r0, r4
 8008ca0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008ca4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008ca8:	0e24      	lsrs	r4, r4, #24
 8008caa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8008cae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008cb2:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8008cb6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008cba:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8008cbe:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8008cc2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008cc6:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cce:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008cd2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008cd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cda:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8008cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008ce2:	4826      	ldr	r0, [pc, #152]	; (8008d7c <D32_1CH_HTONS_VOL_HP+0x11c>)
 8008ce4:	fb23 c400 	smlad	r4, r3, r0, ip
 8008ce8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008cec:	fb21 4402 	smlad	r4, r1, r2, r4
 8008cf0:	4823      	ldr	r0, [pc, #140]	; (8008d80 <D32_1CH_HTONS_VOL_HP+0x120>)
 8008cf2:	fb23 ec00 	smlad	ip, r3, r0, lr
 8008cf6:	4823      	ldr	r0, [pc, #140]	; (8008d84 <D32_1CH_HTONS_VOL_HP+0x124>)
 8008cf8:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	fb23 f302 	smuad	r3, r3, r2
 8008d02:	4821      	ldr	r0, [pc, #132]	; (8008d88 <D32_1CH_HTONS_VOL_HP+0x128>)
 8008d04:	fb21 3e00 	smlad	lr, r1, r0, r3
 8008d08:	9b00      	ldr	r3, [sp, #0]
 8008d0a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8008d0e:	4423      	add	r3, r4
 8008d10:	eba3 0209 	sub.w	r2, r3, r9
 8008d14:	46a1      	mov	r9, r4
 8008d16:	17d1      	asrs	r1, r2, #31
 8008d18:	fba2 230a 	umull	r2, r3, r2, sl
 8008d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8008d20:	fb0a 3301 	mla	r3, sl, r1, r3
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d2a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d32:	f143 0300 	adc.w	r3, r3, #0
 8008d36:	0399      	lsls	r1, r3, #14
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	fbc8 2301 	smlal	r2, r3, r8, r1
 8008d42:	109b      	asrs	r3, r3, #2
 8008d44:	f303 030f 	ssat	r3, #16, r3
 8008d48:	f827 3b02 	strh.w	r3, [r7], #2
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	429f      	cmp	r7, r3
 8008d50:	d1a2      	bne.n	8008c98 <D32_1CH_HTONS_VOL_HP+0x38>
 8008d52:	4673      	mov	r3, lr
 8008d54:	f8dd 8000 	ldr.w	r8, [sp]
 8008d58:	9a05      	ldr	r2, [sp, #20]
 8008d5a:	6093      	str	r3, [r2, #8]
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008d64:	61d5      	str	r5, [r2, #28]
 8008d66:	6193      	str	r3, [r2, #24]
 8008d68:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008d6c:	b007      	add	sp, #28
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	4674      	mov	r4, lr
 8008d74:	e7f1      	b.n	8008d5a <D32_1CH_HTONS_VOL_HP+0xfa>
 8008d76:	bf00      	nop
 8008d78:	24000000 	.word	0x24000000
 8008d7c:	00060003 	.word	0x00060003
 8008d80:	000a000c 	.word	0x000a000c
 8008d84:	000c000a 	.word	0x000c000a
 8008d88:	00030006 	.word	0x00030006

08008d8c <D48_1CH_HTONS_VOL_HP>:
 8008d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8008d92:	b087      	sub	sp, #28
 8008d94:	6993      	ldr	r3, [r2, #24]
 8008d96:	9701      	str	r7, [sp, #4]
 8008d98:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008d9a:	6a17      	ldr	r7, [r2, #32]
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	69d6      	ldr	r6, [r2, #28]
 8008da0:	9702      	str	r7, [sp, #8]
 8008da2:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8008da6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008daa:	2d00      	cmp	r5, #0
 8008dac:	f000 8093 	beq.w	8008ed6 <D48_1CH_HTONS_VOL_HP+0x14a>
 8008db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008db4:	f1a1 0b02 	sub.w	fp, r1, #2
 8008db8:	46f2      	mov	sl, lr
 8008dba:	4f48      	ldr	r7, [pc, #288]	; (8008edc <D48_1CH_HTONS_VOL_HP+0x150>)
 8008dbc:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	9205      	str	r2, [sp, #20]
 8008dc4:	9103      	str	r1, [sp, #12]
 8008dc6:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008dca:	3006      	adds	r0, #6
 8008dcc:	ba5b      	rev16	r3, r3
 8008dce:	fa92 f992 	rev16.w	r9, r2
 8008dd2:	b2dd      	uxtb	r5, r3
 8008dd4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008dd8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008ddc:	0e1b      	lsrs	r3, r3, #24
 8008dde:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8008de2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008de6:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8008dea:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8008dee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008df2:	fa5f f289 	uxtb.w	r2, r9
 8008df6:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8008dfa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8008dfe:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008e02:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8008e06:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008e0a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8008e0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008e12:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8008e16:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008e1a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008e1e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8008e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e26:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8008e2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008e2e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8008e32:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8008e36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008e3a:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008e3c:	fb28 c103 	smlad	r1, r8, r3, ip
 8008e40:	4b28      	ldr	r3, [pc, #160]	; (8008ee4 <D48_1CH_HTONS_VOL_HP+0x158>)
 8008e42:	fb25 1103 	smlad	r1, r5, r3, r1
 8008e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e4a:	fb22 1903 	smlad	r9, r2, r3, r1
 8008e4e:	4b26      	ldr	r3, [pc, #152]	; (8008ee8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008e50:	fb28 ec03 	smlad	ip, r8, r3, lr
 8008e54:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008e58:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008e5c:	4b23      	ldr	r3, [pc, #140]	; (8008eec <D48_1CH_HTONS_VOL_HP+0x160>)
 8008e5e:	fb22 cc03 	smlad	ip, r2, r3, ip
 8008e62:	2101      	movs	r1, #1
 8008e64:	fb28 f801 	smuad	r8, r8, r1
 8008e68:	4b21      	ldr	r3, [pc, #132]	; (8008ef0 <D48_1CH_HTONS_VOL_HP+0x164>)
 8008e6a:	fb25 8503 	smlad	r5, r5, r3, r8
 8008e6e:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8008e70:	fb22 5e03 	smlad	lr, r2, r3, r5
 8008e74:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8008e78:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008e7c:	190a      	adds	r2, r1, r4
 8008e7e:	9c02      	ldr	r4, [sp, #8]
 8008e80:	eba2 020a 	sub.w	r2, r2, sl
 8008e84:	468a      	mov	sl, r1
 8008e86:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008e8a:	fba2 2304 	umull	r2, r3, r2, r4
 8008e8e:	fb04 3309 	mla	r3, r4, r9, r3
 8008e92:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008e96:	f04f 0900 	mov.w	r9, #0
 8008e9a:	f143 0500 	adc.w	r5, r3, #0
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	032a      	lsls	r2, r5, #12
 8008ea2:	006c      	lsls	r4, r5, #1
 8008ea4:	fbc3 8902 	smlal	r8, r9, r3, r2
 8008ea8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008eac:	f303 030f 	ssat	r3, #16, r3
 8008eb0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	4283      	cmp	r3, r0
 8008eb8:	d185      	bne.n	8008dc6 <D48_1CH_HTONS_VOL_HP+0x3a>
 8008eba:	4673      	mov	r3, lr
 8008ebc:	9a05      	ldr	r2, [sp, #20]
 8008ebe:	6093      	str	r3, [r2, #8]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	9b04      	ldr	r3, [sp, #16]
 8008ec4:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008ec8:	61d6      	str	r6, [r2, #28]
 8008eca:	6193      	str	r3, [r2, #24]
 8008ecc:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008ed0:	b007      	add	sp, #28
 8008ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed6:	4671      	mov	r1, lr
 8008ed8:	e7f1      	b.n	8008ebe <D48_1CH_HTONS_VOL_HP+0x132>
 8008eda:	bf00      	nop
 8008edc:	24000000 	.word	0x24000000
 8008ee0:	000f000a 	.word	0x000f000a
 8008ee4:	00060003 	.word	0x00060003
 8008ee8:	00150019 	.word	0x00150019
 8008eec:	00190015 	.word	0x00190015
 8008ef0:	00030006 	.word	0x00030006
 8008ef4:	000a000f 	.word	0x000a000f

08008ef8 <D64_1CH_HTONS_VOL_HP>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008efe:	b089      	sub	sp, #36	; 0x24
 8008f00:	6993      	ldr	r3, [r2, #24]
 8008f02:	4686      	mov	lr, r0
 8008f04:	9503      	str	r5, [sp, #12]
 8008f06:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008f08:	6a15      	ldr	r5, [r2, #32]
 8008f0a:	9306      	str	r3, [sp, #24]
 8008f0c:	69d6      	ldr	r6, [r2, #28]
 8008f0e:	9504      	str	r5, [sp, #16]
 8008f10:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8008f14:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f000 80a4 	beq.w	8009066 <D64_1CH_HTONS_VOL_HP+0x16e>
 8008f1e:	460f      	mov	r7, r1
 8008f20:	46f1      	mov	r9, lr
 8008f22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008f26:	4d56      	ldr	r5, [pc, #344]	; (8009080 <D64_1CH_HTONS_VOL_HP+0x188>)
 8008f28:	46a2      	mov	sl, r4
 8008f2a:	469e      	mov	lr, r3
 8008f2c:	9105      	str	r1, [sp, #20]
 8008f2e:	9207      	str	r2, [sp, #28]
 8008f30:	f859 1b08 	ldr.w	r1, [r9], #8
 8008f34:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008f38:	ba49      	rev16	r1, r1
 8008f3a:	fa93 fb93 	rev16.w	fp, r3
 8008f3e:	b2cb      	uxtb	r3, r1
 8008f40:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008f44:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008f48:	0e09      	lsrs	r1, r1, #24
 8008f4a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8008f4e:	fa5f f38b 	uxtb.w	r3, fp
 8008f52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008f56:	4426      	add	r6, r4
 8008f58:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8008f5c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8008f60:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008f64:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008f68:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f6c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8008f70:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008f74:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008f78:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008f7c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8008f80:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008f84:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8008f88:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8008f8c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8008f90:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008f94:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8008f98:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8008f9c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8008fa0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008fa4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8008fa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008fac:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8008fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fb4:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8008fb8:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008fbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fc0:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8008fc4:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8008fc8:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8008fcc:	482d      	ldr	r0, [pc, #180]	; (8009084 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008fce:	fb22 cc00 	smlad	ip, r2, r0, ip
 8008fd2:	482d      	ldr	r0, [pc, #180]	; (8009088 <D64_1CH_HTONS_VOL_HP+0x190>)
 8008fd4:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008fd8:	482c      	ldr	r0, [pc, #176]	; (800908c <D64_1CH_HTONS_VOL_HP+0x194>)
 8008fda:	fb23 cc00 	smlad	ip, r3, r0, ip
 8008fde:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8008fe2:	fb2b c404 	smlad	r4, fp, r4, ip
 8008fe6:	482a      	ldr	r0, [pc, #168]	; (8009090 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008fe8:	fb22 ec00 	smlad	ip, r2, r0, lr
 8008fec:	fb2b cc10 	smladx	ip, fp, r0, ip
 8008ff0:	4828      	ldr	r0, [pc, #160]	; (8009094 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8008ff2:	fb21 cc00 	smlad	ip, r1, r0, ip
 8008ff6:	fb23 cc10 	smladx	ip, r3, r0, ip
 8008ffa:	f04f 0e01 	mov.w	lr, #1
 8008ffe:	fb22 f20e 	smuad	r2, r2, lr
 8009002:	4825      	ldr	r0, [pc, #148]	; (8009098 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8009004:	fb21 2100 	smlad	r1, r1, r0, r2
 8009008:	4a24      	ldr	r2, [pc, #144]	; (800909c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800900a:	fb23 1302 	smlad	r3, r3, r2, r1
 800900e:	4a24      	ldr	r2, [pc, #144]	; (80090a0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8009010:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8009014:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8009018:	eb04 0208 	add.w	r2, r4, r8
 800901c:	eba2 020a 	sub.w	r2, r2, sl
 8009020:	46a2      	mov	sl, r4
 8009022:	4610      	mov	r0, r2
 8009024:	17d1      	asrs	r1, r2, #31
 8009026:	e9cd 0100 	strd	r0, r1, [sp]
 800902a:	9904      	ldr	r1, [sp, #16]
 800902c:	9801      	ldr	r0, [sp, #4]
 800902e:	fba2 2301 	umull	r2, r3, r2, r1
 8009032:	fb01 3300 	mla	r3, r1, r0, r3
 8009036:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800903a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800903e:	f143 0100 	adc.w	r1, r3, #0
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	02ca      	lsls	r2, r1, #11
 8009046:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800904a:	2100      	movs	r1, #0
 800904c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009050:	108b      	asrs	r3, r1, #2
 8009052:	f303 030f 	ssat	r3, #16, r3
 8009056:	f827 3b02 	strh.w	r3, [r7], #2
 800905a:	9b05      	ldr	r3, [sp, #20]
 800905c:	429f      	cmp	r7, r3
 800905e:	f47f af67 	bne.w	8008f30 <D64_1CH_HTONS_VOL_HP+0x38>
 8009062:	4673      	mov	r3, lr
 8009064:	9a07      	ldr	r2, [sp, #28]
 8009066:	6093      	str	r3, [r2, #8]
 8009068:	2000      	movs	r0, #0
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009070:	61d6      	str	r6, [r2, #28]
 8009072:	6193      	str	r3, [r2, #24]
 8009074:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009078:	b009      	add	sp, #36	; 0x24
 800907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907e:	bf00      	nop
 8009080:	24000000 	.word	0x24000000
 8009084:	001c0015 	.word	0x001c0015
 8009088:	000f000a 	.word	0x000f000a
 800908c:	00060003 	.word	0x00060003
 8009090:	0024002a 	.word	0x0024002a
 8009094:	002e0030 	.word	0x002e0030
 8009098:	00030006 	.word	0x00030006
 800909c:	000a000f 	.word	0x000a000f
 80090a0:	0015001c 	.word	0x0015001c

080090a4 <D80_1CH_HTONS_VOL_HP>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	6913      	ldr	r3, [r2, #16]
 80090aa:	b089      	sub	sp, #36	; 0x24
 80090ac:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	9603      	str	r6, [sp, #12]
 80090b2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80090b4:	6a16      	ldr	r6, [r2, #32]
 80090b6:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 80090ba:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 80090be:	9306      	str	r3, [sp, #24]
 80090c0:	9604      	str	r6, [sp, #16]
 80090c2:	69d3      	ldr	r3, [r2, #28]
 80090c4:	2c00      	cmp	r4, #0
 80090c6:	f000 80ce 	beq.w	8009266 <D80_1CH_HTONS_VOL_HP+0x1c2>
 80090ca:	3902      	subs	r1, #2
 80090cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80090d0:	4e66      	ldr	r6, [pc, #408]	; (800926c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80090d2:	469e      	mov	lr, r3
 80090d4:	9102      	str	r1, [sp, #8]
 80090d6:	46aa      	mov	sl, r5
 80090d8:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 80090dc:	9207      	str	r2, [sp, #28]
 80090de:	9105      	str	r1, [sp, #20]
 80090e0:	6883      	ldr	r3, [r0, #8]
 80090e2:	e9d0 4200 	ldrd	r4, r2, [r0]
 80090e6:	300a      	adds	r0, #10
 80090e8:	ba64      	rev16	r4, r4
 80090ea:	ba52      	rev16	r2, r2
 80090ec:	fa93 fb93 	rev16.w	fp, r3
 80090f0:	b2e5      	uxtb	r5, r4
 80090f2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80090f6:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80090fa:	0e24      	lsrs	r4, r4, #24
 80090fc:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8009100:	b2d5      	uxtb	r5, r2
 8009102:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009106:	44c6      	add	lr, r8
 8009108:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800910c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8009110:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8009114:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009118:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800911c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8009120:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009128:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800912c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009130:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8009134:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8009138:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800913c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8009140:	0e12      	lsrs	r2, r2, #24
 8009142:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8009146:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800914a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800914e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009152:	fa5f fb8b 	uxtb.w	fp, fp
 8009156:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800915a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800915e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8009162:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009166:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800916a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800916e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009172:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009176:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800917a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800917e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009182:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8009186:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800918a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800918e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8009192:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009196:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800919a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800919e:	4934      	ldr	r1, [pc, #208]	; (8009270 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 80091a0:	fb23 cc01 	smlad	ip, r3, r1, ip
 80091a4:	4933      	ldr	r1, [pc, #204]	; (8009274 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 80091a6:	fb24 cc01 	smlad	ip, r4, r1, ip
 80091aa:	4933      	ldr	r1, [pc, #204]	; (8009278 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80091ac:	fb28 cc01 	smlad	ip, r8, r1, ip
 80091b0:	4932      	ldr	r1, [pc, #200]	; (800927c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80091b2:	fb22 cc01 	smlad	ip, r2, r1, ip
 80091b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80091ba:	fb2b c901 	smlad	r9, fp, r1, ip
 80091be:	4930      	ldr	r1, [pc, #192]	; (8009280 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 80091c0:	fb23 7701 	smlad	r7, r3, r1, r7
 80091c4:	492f      	ldr	r1, [pc, #188]	; (8009284 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80091c6:	fb24 7701 	smlad	r7, r4, r1, r7
 80091ca:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 80091ce:	fb28 7c0c 	smlad	ip, r8, ip, r7
 80091d2:	492d      	ldr	r1, [pc, #180]	; (8009288 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80091d4:	fb22 cc01 	smlad	ip, r2, r1, ip
 80091d8:	492c      	ldr	r1, [pc, #176]	; (800928c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80091da:	fb2b cc01 	smlad	ip, fp, r1, ip
 80091de:	2101      	movs	r1, #1
 80091e0:	fb23 f301 	smuad	r3, r3, r1
 80091e4:	492a      	ldr	r1, [pc, #168]	; (8009290 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80091e6:	fb24 3401 	smlad	r4, r4, r1, r3
 80091ea:	492a      	ldr	r1, [pc, #168]	; (8009294 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80091ec:	fb28 4101 	smlad	r1, r8, r1, r4
 80091f0:	4f29      	ldr	r7, [pc, #164]	; (8009298 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80091f2:	fb22 1207 	smlad	r2, r2, r7, r1
 80091f6:	4f29      	ldr	r7, [pc, #164]	; (800929c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80091f8:	fb2b 2707 	smlad	r7, fp, r7, r2
 80091fc:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	9c04      	ldr	r4, [sp, #16]
 8009204:	440b      	add	r3, r1
 8009206:	eba3 020a 	sub.w	r2, r3, sl
 800920a:	468a      	mov	sl, r1
 800920c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009210:	fba2 2304 	umull	r2, r3, r2, r4
 8009214:	fb04 3309 	mla	r3, r4, r9, r3
 8009218:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800921c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009220:	f143 0500 	adc.w	r5, r3, #0
 8009224:	006b      	lsls	r3, r5, #1
 8009226:	02aa      	lsls	r2, r5, #10
 8009228:	2500      	movs	r5, #0
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	fbc3 4502 	smlal	r4, r5, r3, r2
 8009232:	9a02      	ldr	r2, [sp, #8]
 8009234:	10ab      	asrs	r3, r5, #2
 8009236:	f303 030f 	ssat	r3, #16, r3
 800923a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800923e:	9b05      	ldr	r3, [sp, #20]
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	4298      	cmp	r0, r3
 8009244:	f47f af4c 	bne.w	80090e0 <D80_1CH_HTONS_VOL_HP+0x3c>
 8009248:	4673      	mov	r3, lr
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	61d3      	str	r3, [r2, #28]
 800924e:	2000      	movs	r0, #0
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	6097      	str	r7, [r2, #8]
 8009254:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009258:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	6193      	str	r3, [r2, #24]
 8009260:	b009      	add	sp, #36	; 0x24
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	4629      	mov	r1, r5
 8009268:	e7f0      	b.n	800924c <D80_1CH_HTONS_VOL_HP+0x1a8>
 800926a:	bf00      	nop
 800926c:	24000000 	.word	0x24000000
 8009270:	002d0024 	.word	0x002d0024
 8009274:	001c0015 	.word	0x001c0015
 8009278:	000f000a 	.word	0x000f000a
 800927c:	00060003 	.word	0x00060003
 8009280:	0037003f 	.word	0x0037003f
 8009284:	00450049 	.word	0x00450049
 8009288:	00490045 	.word	0x00490045
 800928c:	003f0037 	.word	0x003f0037
 8009290:	00030006 	.word	0x00030006
 8009294:	000a000f 	.word	0x000a000f
 8009298:	0015001c 	.word	0x0015001c
 800929c:	0024002d 	.word	0x0024002d

080092a0 <D128_1CH_HTONS_VOL_HP>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	6914      	ldr	r4, [r2, #16]
 80092a6:	b08d      	sub	sp, #52	; 0x34
 80092a8:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80092aa:	9404      	str	r4, [sp, #16]
 80092ac:	6954      	ldr	r4, [r2, #20]
 80092ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80092b0:	9405      	str	r4, [sp, #20]
 80092b2:	6994      	ldr	r4, [r2, #24]
 80092b4:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80092b8:	940a      	str	r4, [sp, #40]	; 0x28
 80092ba:	6894      	ldr	r4, [r2, #8]
 80092bc:	9403      	str	r4, [sp, #12]
 80092be:	68d4      	ldr	r4, [r2, #12]
 80092c0:	9402      	str	r4, [sp, #8]
 80092c2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80092c4:	6a12      	ldr	r2, [r2, #32]
 80092c6:	9407      	str	r4, [sp, #28]
 80092c8:	9208      	str	r2, [sp, #32]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 812e 	beq.w	800952c <D128_1CH_HTONS_VOL_HP+0x28c>
 80092d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80092d4:	f100 0b10 	add.w	fp, r0, #16
 80092d8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800956c <D128_1CH_HTONS_VOL_HP+0x2cc>
 80092dc:	9106      	str	r1, [sp, #24]
 80092de:	9309      	str	r3, [sp, #36]	; 0x24
 80092e0:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 80092e4:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 80092e8:	ba40      	rev16	r0, r0
 80092ea:	ba52      	rev16	r2, r2
 80092ec:	ba5b      	rev16	r3, r3
 80092ee:	ba76      	rev16	r6, r6
 80092f0:	b2c5      	uxtb	r5, r0
 80092f2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80092f6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80092fa:	0e00      	lsrs	r0, r0, #24
 80092fc:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8009300:	b2d5      	uxtb	r5, r2
 8009302:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8009306:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800930a:	44bc      	add	ip, r7
 800930c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009310:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8009314:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009318:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800931c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8009320:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009324:	0e12      	lsrs	r2, r2, #24
 8009326:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800932a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800932e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009332:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009336:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800933a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800933e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009342:	b2da      	uxtb	r2, r3
 8009344:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8009348:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800934c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8009350:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009354:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8009358:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800935c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8009360:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009364:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8009368:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800936c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8009370:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8009374:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009378:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800937c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8009380:	0e1b      	lsrs	r3, r3, #24
 8009382:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009386:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800938a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800938e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8009392:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8009396:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800939a:	b2f3      	uxtb	r3, r6
 800939c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 80093a0:	f3c8 0009 	ubfx	r0, r8, #0, #10
 80093a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80093a8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80093ac:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80093b0:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80093b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80093b8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80093bc:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80093c0:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80093c4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80093c8:	0e36      	lsrs	r6, r6, #24
 80093ca:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 80093ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80093d2:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 80093d6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80093da:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 80093de:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093e2:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 80093e6:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80093ea:	9101      	str	r1, [sp, #4]
 80093ec:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 80093f0:	9b02      	ldr	r3, [sp, #8]
 80093f2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80093f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80093fa:	4611      	mov	r1, r2
 80093fc:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8009400:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8009404:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009408:	4a49      	ldr	r2, [pc, #292]	; (8009530 <D128_1CH_HTONS_VOL_HP+0x290>)
 800940a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800940e:	4b49      	ldr	r3, [pc, #292]	; (8009534 <D128_1CH_HTONS_VOL_HP+0x294>)
 8009410:	fb27 2203 	smlad	r2, r7, r3, r2
 8009414:	4b48      	ldr	r3, [pc, #288]	; (8009538 <D128_1CH_HTONS_VOL_HP+0x298>)
 8009416:	fb25 2203 	smlad	r2, r5, r3, r2
 800941a:	4b48      	ldr	r3, [pc, #288]	; (800953c <D128_1CH_HTONS_VOL_HP+0x29c>)
 800941c:	fb24 2203 	smlad	r2, r4, r3, r2
 8009420:	4b47      	ldr	r3, [pc, #284]	; (8009540 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8009422:	fb20 2803 	smlad	r8, r0, r3, r2
 8009426:	4b47      	ldr	r3, [pc, #284]	; (8009544 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	fb22 8203 	smlad	r2, r2, r3, r8
 800942e:	4b46      	ldr	r3, [pc, #280]	; (8009548 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8009430:	9102      	str	r1, [sp, #8]
 8009432:	fb21 2203 	smlad	r2, r1, r3, r2
 8009436:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800943a:	fb26 2308 	smlad	r3, r6, r8, r2
 800943e:	4619      	mov	r1, r3
 8009440:	9a03      	ldr	r2, [sp, #12]
 8009442:	4b42      	ldr	r3, [pc, #264]	; (800954c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8009444:	fb2e 2803 	smlad	r8, lr, r3, r2
 8009448:	4b41      	ldr	r3, [pc, #260]	; (8009550 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800944a:	fb27 8a03 	smlad	sl, r7, r3, r8
 800944e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8009570 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8009452:	fb25 a808 	smlad	r8, r5, r8, sl
 8009456:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8009574 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800945a:	fb24 880a 	smlad	r8, r4, sl, r8
 800945e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8009578 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8009462:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8009466:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800957c <D128_1CH_HTONS_VOL_HP+0x2dc>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	fb23 aa08 	smlad	sl, r3, r8, sl
 8009470:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009580 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8009474:	9a02      	ldr	r2, [sp, #8]
 8009476:	fb22 a808 	smlad	r8, r2, r8, sl
 800947a:	f8df a108 	ldr.w	sl, [pc, #264]	; 8009584 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800947e:	fb26 830a 	smlad	r3, r6, sl, r8
 8009482:	f04f 0801 	mov.w	r8, #1
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	fb2e fe08 	smuad	lr, lr, r8
 800948c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009588 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8009490:	fb27 ee08 	smlad	lr, r7, r8, lr
 8009494:	4f2f      	ldr	r7, [pc, #188]	; (8009554 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8009496:	fb25 ee07 	smlad	lr, r5, r7, lr
 800949a:	4f2f      	ldr	r7, [pc, #188]	; (8009558 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800949c:	fb24 ee07 	smlad	lr, r4, r7, lr
 80094a0:	4f2e      	ldr	r7, [pc, #184]	; (800955c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 80094a2:	fb20 ee07 	smlad	lr, r0, r7, lr
 80094a6:	4f2e      	ldr	r7, [pc, #184]	; (8009560 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	fb23 ee07 	smlad	lr, r3, r7, lr
 80094ae:	4f2d      	ldr	r7, [pc, #180]	; (8009564 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 80094b0:	fb22 e707 	smlad	r7, r2, r7, lr
 80094b4:	4b2c      	ldr	r3, [pc, #176]	; (8009568 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80094b6:	fb26 7303 	smlad	r3, r6, r3, r7
 80094ba:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 80094be:	9303      	str	r3, [sp, #12]
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80094c6:	9f08      	ldr	r7, [sp, #32]
 80094c8:	2100      	movs	r1, #0
 80094ca:	4433      	add	r3, r6
 80094cc:	f10b 0b10 	add.w	fp, fp, #16
 80094d0:	461a      	mov	r2, r3
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	9605      	str	r6, [sp, #20]
 80094d6:	1ad2      	subs	r2, r2, r3
 80094d8:	17d5      	asrs	r5, r2, #31
 80094da:	fba2 2307 	umull	r2, r3, r2, r7
 80094de:	1814      	adds	r4, r2, r0
 80094e0:	fb07 3305 	mla	r3, r7, r5, r3
 80094e4:	eb43 0501 	adc.w	r5, r3, r1
 80094e8:	006b      	lsls	r3, r5, #1
 80094ea:	022a      	lsls	r2, r5, #8
 80094ec:	9304      	str	r3, [sp, #16]
 80094ee:	9b07      	ldr	r3, [sp, #28]
 80094f0:	fbc3 0102 	smlal	r0, r1, r3, r2
 80094f4:	9a06      	ldr	r2, [sp, #24]
 80094f6:	108b      	asrs	r3, r1, #2
 80094f8:	f303 030f 	ssat	r3, #16, r3
 80094fc:	f822 3b02 	strh.w	r3, [r2], #2
 8009500:	4613      	mov	r3, r2
 8009502:	9206      	str	r2, [sp, #24]
 8009504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009506:	4293      	cmp	r3, r2
 8009508:	f47f aeea 	bne.w	80092e0 <D128_1CH_HTONS_VOL_HP+0x40>
 800950c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800950e:	2000      	movs	r0, #0
 8009510:	9903      	ldr	r1, [sp, #12]
 8009512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009514:	6099      	str	r1, [r3, #8]
 8009516:	9902      	ldr	r1, [sp, #8]
 8009518:	f8c3 c01c 	str.w	ip, [r3, #28]
 800951c:	60d9      	str	r1, [r3, #12]
 800951e:	9904      	ldr	r1, [sp, #16]
 8009520:	619a      	str	r2, [r3, #24]
 8009522:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8009526:	b00d      	add	sp, #52	; 0x34
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	9e05      	ldr	r6, [sp, #20]
 800952e:	e7ed      	b.n	800950c <D128_1CH_HTONS_VOL_HP+0x26c>
 8009530:	00780069 	.word	0x00780069
 8009534:	005b004e 	.word	0x005b004e
 8009538:	00420037 	.word	0x00420037
 800953c:	002d0024 	.word	0x002d0024
 8009540:	001c0015 	.word	0x001c0015
 8009544:	000f000a 	.word	0x000f000a
 8009548:	00060003 	.word	0x00060003
 800954c:	00880096 	.word	0x00880096
 8009550:	00a200ac 	.word	0x00a200ac
 8009554:	000a000f 	.word	0x000a000f
 8009558:	0015001c 	.word	0x0015001c
 800955c:	0024002d 	.word	0x0024002d
 8009560:	00370042 	.word	0x00370042
 8009564:	004e005b 	.word	0x004e005b
 8009568:	00690078 	.word	0x00690078
 800956c:	24000000 	.word	0x24000000
 8009570:	00b400ba 	.word	0x00b400ba
 8009574:	00be00c0 	.word	0x00be00c0
 8009578:	00c000be 	.word	0x00c000be
 800957c:	00ba00b4 	.word	0x00ba00b4
 8009580:	00ac00a2 	.word	0x00ac00a2
 8009584:	00960088 	.word	0x00960088
 8009588:	00030006 	.word	0x00030006

0800958c <PDM_Filter_Init>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	2240      	movs	r2, #64	; 0x40
 8009590:	2100      	movs	r1, #0
 8009592:	4604      	mov	r4, r0
 8009594:	300c      	adds	r0, #12
 8009596:	f000 fa07 	bl	80099a8 <memset>
 800959a:	4a56      	ldr	r2, [pc, #344]	; (80096f4 <PDM_Filter_Init+0x168>)
 800959c:	4856      	ldr	r0, [pc, #344]	; (80096f8 <PDM_Filter_Init+0x16c>)
 800959e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	f24c 2540 	movw	r5, #49728	; 0xc240
 80095a8:	f023 0301 	bic.w	r3, r3, #1
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	6803      	ldr	r3, [r0, #0]
 80095b0:	400b      	ands	r3, r1
 80095b2:	42ab      	cmp	r3, r5
 80095b4:	d040      	beq.n	8009638 <PDM_Filter_Init+0xac>
 80095b6:	6803      	ldr	r3, [r0, #0]
 80095b8:	f24c 2270 	movw	r2, #49776	; 0xc270
 80095bc:	4019      	ands	r1, r3
 80095be:	4291      	cmp	r1, r2
 80095c0:	d03a      	beq.n	8009638 <PDM_Filter_Init+0xac>
 80095c2:	4b4e      	ldr	r3, [pc, #312]	; (80096fc <PDM_Filter_Init+0x170>)
 80095c4:	2101      	movs	r1, #1
 80095c6:	461a      	mov	r2, r3
 80095c8:	6019      	str	r1, [r3, #0]
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1fc      	bne.n	80095ca <PDM_Filter_Init+0x3e>
 80095d0:	4b4b      	ldr	r3, [pc, #300]	; (8009700 <PDM_Filter_Init+0x174>)
 80095d2:	494c      	ldr	r1, [pc, #304]	; (8009704 <PDM_Filter_Init+0x178>)
 80095d4:	4a4c      	ldr	r2, [pc, #304]	; (8009708 <PDM_Filter_Init+0x17c>)
 80095d6:	6019      	str	r1, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	8820      	ldrh	r0, [r4, #0]
 80095dc:	4293      	cmp	r3, r2
 80095de:	8961      	ldrh	r1, [r4, #10]
 80095e0:	f04f 0300 	mov.w	r3, #0
 80095e4:	8922      	ldrh	r2, [r4, #8]
 80095e6:	bf14      	ite	ne
 80095e8:	2500      	movne	r5, #0
 80095ea:	4d47      	ldreq	r5, [pc, #284]	; (8009708 <PDM_Filter_Init+0x17c>)
 80095ec:	2801      	cmp	r0, #1
 80095ee:	61a3      	str	r3, [r4, #24]
 80095f0:	6465      	str	r5, [r4, #68]	; 0x44
 80095f2:	60e3      	str	r3, [r4, #12]
 80095f4:	6263      	str	r3, [r4, #36]	; 0x24
 80095f6:	6423      	str	r3, [r4, #64]	; 0x40
 80095f8:	86a1      	strh	r1, [r4, #52]	; 0x34
 80095fa:	86e2      	strh	r2, [r4, #54]	; 0x36
 80095fc:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009600:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009604:	d936      	bls.n	8009674 <PDM_Filter_Init+0xe8>
 8009606:	2003      	movs	r0, #3
 8009608:	2302      	movs	r3, #2
 800960a:	8862      	ldrh	r2, [r4, #2]
 800960c:	2a01      	cmp	r2, #1
 800960e:	d92e      	bls.n	800966e <PDM_Filter_Init+0xe2>
 8009610:	2140      	movs	r1, #64	; 0x40
 8009612:	2300      	movs	r3, #0
 8009614:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009616:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800961a:	d101      	bne.n	8009620 <PDM_Filter_Init+0x94>
 800961c:	460b      	mov	r3, r1
 800961e:	6421      	str	r1, [r4, #64]	; 0x40
 8009620:	6862      	ldr	r2, [r4, #4]
 8009622:	b11a      	cbz	r2, 800962c <PDM_Filter_Init+0xa0>
 8009624:	f043 0310 	orr.w	r3, r3, #16
 8009628:	62e2      	str	r2, [r4, #44]	; 0x2c
 800962a:	6423      	str	r3, [r4, #64]	; 0x40
 800962c:	2200      	movs	r2, #0
 800962e:	8722      	strh	r2, [r4, #56]	; 0x38
 8009630:	b908      	cbnz	r0, 8009636 <PDM_Filter_Init+0xaa>
 8009632:	3380      	adds	r3, #128	; 0x80
 8009634:	6423      	str	r3, [r4, #64]	; 0x40
 8009636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009638:	4b34      	ldr	r3, [pc, #208]	; (800970c <PDM_Filter_Init+0x180>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1c0      	bne.n	80095c2 <PDM_Filter_Init+0x36>
 8009640:	4a33      	ldr	r2, [pc, #204]	; (8009710 <PDM_Filter_Init+0x184>)
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009648:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800964c:	d006      	beq.n	800965c <PDM_Filter_Init+0xd0>
 800964e:	6813      	ldr	r3, [r2, #0]
 8009650:	f240 4283 	movw	r2, #1155	; 0x483
 8009654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009658:	4293      	cmp	r3, r2
 800965a:	d1b2      	bne.n	80095c2 <PDM_Filter_Init+0x36>
 800965c:	4b2d      	ldr	r3, [pc, #180]	; (8009714 <PDM_Filter_Init+0x188>)
 800965e:	2101      	movs	r1, #1
 8009660:	461a      	mov	r2, r3
 8009662:	6019      	str	r1, [r3, #0]
 8009664:	6813      	ldr	r3, [r2, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1fc      	bne.n	8009664 <PDM_Filter_Init+0xd8>
 800966a:	4b2b      	ldr	r3, [pc, #172]	; (8009718 <PDM_Filter_Init+0x18c>)
 800966c:	e7b1      	b.n	80095d2 <PDM_Filter_Init+0x46>
 800966e:	d03a      	beq.n	80096e6 <PDM_Filter_Init+0x15a>
 8009670:	4618      	mov	r0, r3
 8009672:	e7cd      	b.n	8009610 <PDM_Filter_Init+0x84>
 8009674:	4d29      	ldr	r5, [pc, #164]	; (800971c <PDM_Filter_Init+0x190>)
 8009676:	782a      	ldrb	r2, [r5, #0]
 8009678:	d01b      	beq.n	80096b2 <PDM_Filter_Init+0x126>
 800967a:	2a01      	cmp	r2, #1
 800967c:	d001      	beq.n	8009682 <PDM_Filter_Init+0xf6>
 800967e:	2001      	movs	r0, #1
 8009680:	e7c3      	b.n	800960a <PDM_Filter_Init+0x7e>
 8009682:	4927      	ldr	r1, [pc, #156]	; (8009720 <PDM_Filter_Init+0x194>)
 8009684:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8009728 <PDM_Filter_Init+0x19c>
 8009688:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800968c:	4e25      	ldr	r6, [pc, #148]	; (8009724 <PDM_Filter_Init+0x198>)
 800968e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009692:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009696:	ea02 0006 	and.w	r0, r2, r6
 800969a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800969e:	428f      	cmp	r7, r1
 80096a0:	ea43 0300 	orr.w	r3, r3, r0
 80096a4:	4413      	add	r3, r2
 80096a6:	600b      	str	r3, [r1, #0]
 80096a8:	d1f1      	bne.n	800968e <PDM_Filter_Init+0x102>
 80096aa:	2300      	movs	r3, #0
 80096ac:	2001      	movs	r0, #1
 80096ae:	702b      	strb	r3, [r5, #0]
 80096b0:	e7ab      	b.n	800960a <PDM_Filter_Init+0x7e>
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d1a9      	bne.n	800960a <PDM_Filter_Init+0x7e>
 80096b6:	491a      	ldr	r1, [pc, #104]	; (8009720 <PDM_Filter_Init+0x194>)
 80096b8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8009728 <PDM_Filter_Init+0x19c>
 80096bc:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 80096c0:	4e18      	ldr	r6, [pc, #96]	; (8009724 <PDM_Filter_Init+0x198>)
 80096c2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80096c6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80096ca:	ea02 0006 	and.w	r0, r2, r6
 80096ce:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80096d2:	428f      	cmp	r7, r1
 80096d4:	ea43 0300 	orr.w	r3, r3, r0
 80096d8:	4413      	add	r3, r2
 80096da:	600b      	str	r3, [r1, #0]
 80096dc:	d1f1      	bne.n	80096c2 <PDM_Filter_Init+0x136>
 80096de:	2001      	movs	r0, #1
 80096e0:	2300      	movs	r3, #0
 80096e2:	7028      	strb	r0, [r5, #0]
 80096e4:	e791      	b.n	800960a <PDM_Filter_Init+0x7e>
 80096e6:	2220      	movs	r2, #32
 80096e8:	4618      	mov	r0, r3
 80096ea:	2160      	movs	r1, #96	; 0x60
 80096ec:	6422      	str	r2, [r4, #64]	; 0x40
 80096ee:	4613      	mov	r3, r2
 80096f0:	e790      	b.n	8009614 <PDM_Filter_Init+0x88>
 80096f2:	bf00      	nop
 80096f4:	e0002000 	.word	0xe0002000
 80096f8:	e000ed00 	.word	0xe000ed00
 80096fc:	40023008 	.word	0x40023008
 8009700:	40023000 	.word	0x40023000
 8009704:	f407a5c2 	.word	0xf407a5c2
 8009708:	b5e8b5cd 	.word	0xb5e8b5cd
 800970c:	e0042000 	.word	0xe0042000
 8009710:	5c001000 	.word	0x5c001000
 8009714:	58024c08 	.word	0x58024c08
 8009718:	58024c00 	.word	0x58024c00
 800971c:	24000498 	.word	0x24000498
 8009720:	23fffffc 	.word	0x23fffffc
 8009724:	000ffc00 	.word	0x000ffc00
 8009728:	3ff00000 	.word	0x3ff00000

0800972c <PDM_Filter_setConfig>:
 800972c:	4b67      	ldr	r3, [pc, #412]	; (80098cc <PDM_Filter_setConfig+0x1a0>)
 800972e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009730:	429a      	cmp	r2, r3
 8009732:	d128      	bne.n	8009786 <PDM_Filter_setConfig+0x5a>
 8009734:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009738:	880e      	ldrh	r6, [r1, #0]
 800973a:	460d      	mov	r5, r1
 800973c:	4604      	mov	r4, r0
 800973e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009742:	1e73      	subs	r3, r6, #1
 8009744:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8009748:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800974c:	2b06      	cmp	r3, #6
 800974e:	ed2d 8b02 	vpush	{d8}
 8009752:	6421      	str	r1, [r4, #64]	; 0x40
 8009754:	b083      	sub	sp, #12
 8009756:	d820      	bhi.n	800979a <PDM_Filter_setConfig+0x6e>
 8009758:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800975a:	42b3      	cmp	r3, r6
 800975c:	d03d      	beq.n	80097da <PDM_Filter_setConfig+0xae>
 800975e:	4b5c      	ldr	r3, [pc, #368]	; (80098d0 <PDM_Filter_setConfig+0x1a4>)
 8009760:	4013      	ands	r3, r2
 8009762:	4333      	orrs	r3, r6
 8009764:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009768:	6423      	str	r3, [r4, #64]	; 0x40
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	2a70      	cmp	r2, #112	; 0x70
 8009770:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009774:	d009      	beq.n	800978a <PDM_Filter_setConfig+0x5e>
 8009776:	2b06      	cmp	r3, #6
 8009778:	d824      	bhi.n	80097c4 <PDM_Filter_setConfig+0x98>
 800977a:	e8df f003 	tbb	[pc, r3]
 800977e:	878a      	.short	0x878a
 8009780:	7b7e8184 	.word	0x7b7e8184
 8009784:	78          	.byte	0x78
 8009785:	00          	.byte	0x00
 8009786:	2004      	movs	r0, #4
 8009788:	4770      	bx	lr
 800978a:	2b06      	cmp	r3, #6
 800978c:	d81a      	bhi.n	80097c4 <PDM_Filter_setConfig+0x98>
 800978e:	e8df f003 	tbb	[pc, r3]
 8009792:	8f92      	.short	0x8f92
 8009794:	8617898c 	.word	0x8617898c
 8009798:	83          	.byte	0x83
 8009799:	00          	.byte	0x00
 800979a:	4287      	cmp	r7, r0
 800979c:	f000 808e 	beq.w	80098bc <PDM_Filter_setConfig+0x190>
 80097a0:	f117 0f0c 	cmn.w	r7, #12
 80097a4:	f04f 0008 	mov.w	r0, #8
 80097a8:	da11      	bge.n	80097ce <PDM_Filter_setConfig+0xa2>
 80097aa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80097ae:	3040      	adds	r0, #64	; 0x40
 80097b0:	80ab      	strh	r3, [r5, #4]
 80097b2:	886b      	ldrh	r3, [r5, #2]
 80097b4:	8626      	strh	r6, [r4, #48]	; 0x30
 80097b6:	8663      	strh	r3, [r4, #50]	; 0x32
 80097b8:	b003      	add	sp, #12
 80097ba:	ecbd 8b02 	vpop	{d8}
 80097be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c0:	4b44      	ldr	r3, [pc, #272]	; (80098d4 <PDM_Filter_setConfig+0x1a8>)
 80097c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80097c4:	f117 0f0c 	cmn.w	r7, #12
 80097c8:	f04f 0000 	mov.w	r0, #0
 80097cc:	dbed      	blt.n	80097aa <PDM_Filter_setConfig+0x7e>
 80097ce:	2f33      	cmp	r7, #51	; 0x33
 80097d0:	dd10      	ble.n	80097f4 <PDM_Filter_setConfig+0xc8>
 80097d2:	2333      	movs	r3, #51	; 0x33
 80097d4:	3040      	adds	r0, #64	; 0x40
 80097d6:	80ab      	strh	r3, [r5, #4]
 80097d8:	e7eb      	b.n	80097b2 <PDM_Filter_setConfig+0x86>
 80097da:	4287      	cmp	r7, r0
 80097dc:	d1f2      	bne.n	80097c4 <PDM_Filter_setConfig+0x98>
 80097de:	886b      	ldrh	r3, [r5, #2]
 80097e0:	8663      	strh	r3, [r4, #50]	; 0x32
 80097e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097e4:	2000      	movs	r0, #0
 80097e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097ea:	6423      	str	r3, [r4, #64]	; 0x40
 80097ec:	b003      	add	sp, #12
 80097ee:	ecbd 8b02 	vpop	{d8}
 80097f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	3b01      	subs	r3, #1
 80097fc:	2b06      	cmp	r3, #6
 80097fe:	d831      	bhi.n	8009864 <PDM_Filter_setConfig+0x138>
 8009800:	4a35      	ldr	r2, [pc, #212]	; (80098d8 <PDM_Filter_setConfig+0x1ac>)
 8009802:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009806:	eddf 0a35 	vldr	s1, [pc, #212]	; 80098dc <PDM_Filter_setConfig+0x1b0>
 800980a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800980e:	9001      	str	r0, [sp, #4]
 8009810:	edd3 7a07 	vldr	s15, [r3, #28]
 8009814:	ed93 8a00 	vldr	s16, [r3]
 8009818:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800981c:	f000 f8e4 	bl	80099e8 <powf>
 8009820:	eef0 8a40 	vmov.f32	s17, s0
 8009824:	9801      	ldr	r0, [sp, #4]
 8009826:	ee07 7a90 	vmov	s15, r7
 800982a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800982e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009832:	9001      	str	r0, [sp, #4]
 8009834:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009838:	eddf 7a29 	vldr	s15, [pc, #164]	; 80098e0 <PDM_Filter_setConfig+0x1b4>
 800983c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009840:	f000 f8d2 	bl	80099e8 <powf>
 8009844:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009848:	886b      	ldrh	r3, [r5, #2]
 800984a:	9801      	ldr	r0, [sp, #4]
 800984c:	feb8 8a48 	vrinta.f32	s16, s16
 8009850:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009854:	8727      	strh	r7, [r4, #56]	; 0x38
 8009856:	8663      	strh	r3, [r4, #50]	; 0x32
 8009858:	8626      	strh	r6, [r4, #48]	; 0x30
 800985a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800985e:	2800      	cmp	r0, #0
 8009860:	d0bf      	beq.n	80097e2 <PDM_Filter_setConfig+0xb6>
 8009862:	e7a9      	b.n	80097b8 <PDM_Filter_setConfig+0x8c>
 8009864:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80098e4 <PDM_Filter_setConfig+0x1b8>
 8009868:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 80098e8 <PDM_Filter_setConfig+0x1bc>
 800986c:	e7db      	b.n	8009826 <PDM_Filter_setConfig+0xfa>
 800986e:	4b1f      	ldr	r3, [pc, #124]	; (80098ec <PDM_Filter_setConfig+0x1c0>)
 8009870:	64a3      	str	r3, [r4, #72]	; 0x48
 8009872:	e7a7      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 8009874:	4b1e      	ldr	r3, [pc, #120]	; (80098f0 <PDM_Filter_setConfig+0x1c4>)
 8009876:	64a3      	str	r3, [r4, #72]	; 0x48
 8009878:	e7a4      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 800987a:	4b1e      	ldr	r3, [pc, #120]	; (80098f4 <PDM_Filter_setConfig+0x1c8>)
 800987c:	64a3      	str	r3, [r4, #72]	; 0x48
 800987e:	e7a1      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 8009880:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <PDM_Filter_setConfig+0x1cc>)
 8009882:	64a3      	str	r3, [r4, #72]	; 0x48
 8009884:	e79e      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 8009886:	4b1d      	ldr	r3, [pc, #116]	; (80098fc <PDM_Filter_setConfig+0x1d0>)
 8009888:	64a3      	str	r3, [r4, #72]	; 0x48
 800988a:	e79b      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 800988c:	4b1c      	ldr	r3, [pc, #112]	; (8009900 <PDM_Filter_setConfig+0x1d4>)
 800988e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009890:	e798      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 8009892:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <PDM_Filter_setConfig+0x1d8>)
 8009894:	64a3      	str	r3, [r4, #72]	; 0x48
 8009896:	e795      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 8009898:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <PDM_Filter_setConfig+0x1dc>)
 800989a:	64a3      	str	r3, [r4, #72]	; 0x48
 800989c:	e792      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 800989e:	4b1b      	ldr	r3, [pc, #108]	; (800990c <PDM_Filter_setConfig+0x1e0>)
 80098a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80098a2:	e78f      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 80098a4:	4b1a      	ldr	r3, [pc, #104]	; (8009910 <PDM_Filter_setConfig+0x1e4>)
 80098a6:	64a3      	str	r3, [r4, #72]	; 0x48
 80098a8:	e78c      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 80098aa:	4b1a      	ldr	r3, [pc, #104]	; (8009914 <PDM_Filter_setConfig+0x1e8>)
 80098ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80098ae:	e789      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 80098b0:	4b19      	ldr	r3, [pc, #100]	; (8009918 <PDM_Filter_setConfig+0x1ec>)
 80098b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80098b4:	e786      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 80098b6:	4b19      	ldr	r3, [pc, #100]	; (800991c <PDM_Filter_setConfig+0x1f0>)
 80098b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80098ba:	e783      	b.n	80097c4 <PDM_Filter_setConfig+0x98>
 80098bc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80098be:	42b3      	cmp	r3, r6
 80098c0:	f47f af6e 	bne.w	80097a0 <PDM_Filter_setConfig+0x74>
 80098c4:	886b      	ldrh	r3, [r5, #2]
 80098c6:	2008      	movs	r0, #8
 80098c8:	8663      	strh	r3, [r4, #50]	; 0x32
 80098ca:	e775      	b.n	80097b8 <PDM_Filter_setConfig+0x8c>
 80098cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80098d0:	fffffef0 	.word	0xfffffef0
 80098d4:	08008a45 	.word	0x08008a45
 80098d8:	08009d58 	.word	0x08009d58
 80098dc:	42000000 	.word	0x42000000
 80098e0:	3d4ccccd 	.word	0x3d4ccccd
 80098e4:	4f800000 	.word	0x4f800000
 80098e8:	00000000 	.word	0x00000000
 80098ec:	08007e51 	.word	0x08007e51
 80098f0:	08007cd9 	.word	0x08007cd9
 80098f4:	08007bc9 	.word	0x08007bc9
 80098f8:	0800868d 	.word	0x0800868d
 80098fc:	080083f5 	.word	0x080083f5
 8009900:	080081bd 	.word	0x080081bd
 8009904:	08007fd9 	.word	0x08007fd9
 8009908:	08008c61 	.word	0x08008c61
 800990c:	08008b25 	.word	0x08008b25
 8009910:	080092a1 	.word	0x080092a1
 8009914:	080090a5 	.word	0x080090a5
 8009918:	08008ef9 	.word	0x08008ef9
 800991c:	08008d8d 	.word	0x08008d8d

08009920 <PDM_Filter>:
 8009920:	b410      	push	{r4}
 8009922:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <PDM_Filter+0x30>)
 8009924:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8009926:	429c      	cmp	r4, r3
 8009928:	d107      	bne.n	800993a <PDM_Filter+0x1a>
 800992a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800992c:	05dc      	lsls	r4, r3, #23
 800992e:	d508      	bpl.n	8009942 <PDM_Filter+0x22>
 8009930:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009932:	320c      	adds	r2, #12
 8009934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009938:	4718      	bx	r3
 800993a:	2004      	movs	r0, #4
 800993c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009946:	bf14      	ite	ne
 8009948:	2020      	movne	r0, #32
 800994a:	2030      	moveq	r0, #48	; 0x30
 800994c:	e7f6      	b.n	800993c <PDM_Filter+0x1c>
 800994e:	bf00      	nop
 8009950:	b5e8b5cd 	.word	0xb5e8b5cd

08009954 <__errno>:
 8009954:	4b01      	ldr	r3, [pc, #4]	; (800995c <__errno+0x8>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	24000418 	.word	0x24000418

08009960 <__libc_init_array>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	4d0d      	ldr	r5, [pc, #52]	; (8009998 <__libc_init_array+0x38>)
 8009964:	4c0d      	ldr	r4, [pc, #52]	; (800999c <__libc_init_array+0x3c>)
 8009966:	1b64      	subs	r4, r4, r5
 8009968:	10a4      	asrs	r4, r4, #2
 800996a:	2600      	movs	r6, #0
 800996c:	42a6      	cmp	r6, r4
 800996e:	d109      	bne.n	8009984 <__libc_init_array+0x24>
 8009970:	4d0b      	ldr	r5, [pc, #44]	; (80099a0 <__libc_init_array+0x40>)
 8009972:	4c0c      	ldr	r4, [pc, #48]	; (80099a4 <__libc_init_array+0x44>)
 8009974:	f000 f9e4 	bl	8009d40 <_init>
 8009978:	1b64      	subs	r4, r4, r5
 800997a:	10a4      	asrs	r4, r4, #2
 800997c:	2600      	movs	r6, #0
 800997e:	42a6      	cmp	r6, r4
 8009980:	d105      	bne.n	800998e <__libc_init_array+0x2e>
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	f855 3b04 	ldr.w	r3, [r5], #4
 8009988:	4798      	blx	r3
 800998a:	3601      	adds	r6, #1
 800998c:	e7ee      	b.n	800996c <__libc_init_array+0xc>
 800998e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009992:	4798      	blx	r3
 8009994:	3601      	adds	r6, #1
 8009996:	e7f2      	b.n	800997e <__libc_init_array+0x1e>
 8009998:	0800a020 	.word	0x0800a020
 800999c:	0800a020 	.word	0x0800a020
 80099a0:	0800a020 	.word	0x0800a020
 80099a4:	0800a024 	.word	0x0800a024

080099a8 <memset>:
 80099a8:	4402      	add	r2, r0
 80099aa:	4603      	mov	r3, r0
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d100      	bne.n	80099b2 <memset+0xa>
 80099b0:	4770      	bx	lr
 80099b2:	f803 1b01 	strb.w	r1, [r3], #1
 80099b6:	e7f9      	b.n	80099ac <memset+0x4>

080099b8 <checkint>:
 80099b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80099bc:	2b7e      	cmp	r3, #126	; 0x7e
 80099be:	dd10      	ble.n	80099e2 <checkint+0x2a>
 80099c0:	2b96      	cmp	r3, #150	; 0x96
 80099c2:	dc0c      	bgt.n	80099de <checkint+0x26>
 80099c4:	2201      	movs	r2, #1
 80099c6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	1e5a      	subs	r2, r3, #1
 80099d0:	4202      	tst	r2, r0
 80099d2:	d106      	bne.n	80099e2 <checkint+0x2a>
 80099d4:	4203      	tst	r3, r0
 80099d6:	bf0c      	ite	eq
 80099d8:	2002      	moveq	r0, #2
 80099da:	2001      	movne	r0, #1
 80099dc:	4770      	bx	lr
 80099de:	2002      	movs	r0, #2
 80099e0:	4770      	bx	lr
 80099e2:	2000      	movs	r0, #0
 80099e4:	4770      	bx	lr
	...

080099e8 <powf>:
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	ee10 1a10 	vmov	r1, s0
 80099ee:	ee10 6a90 	vmov	r6, s1
 80099f2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80099f6:	0072      	lsls	r2, r6, #1
 80099f8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80099fc:	b085      	sub	sp, #20
 80099fe:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8009a02:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8009a06:	d256      	bcs.n	8009ab6 <powf+0xce>
 8009a08:	4298      	cmp	r0, r3
 8009a0a:	d256      	bcs.n	8009aba <powf+0xd2>
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8009a12:	4ea3      	ldr	r6, [pc, #652]	; (8009ca0 <powf+0x2b8>)
 8009a14:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009a18:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009a1c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8009a20:	0dd2      	lsrs	r2, r2, #23
 8009a22:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8009a26:	05d2      	lsls	r2, r2, #23
 8009a28:	1a8b      	subs	r3, r1, r2
 8009a2a:	ed97 5b00 	vldr	d5, [r7]
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	15d2      	asrs	r2, r2, #23
 8009a34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009a38:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009a3c:	ed97 5b02 	vldr	d5, [r7, #8]
 8009a40:	ee26 2b06 	vmul.f64	d2, d6, d6
 8009a44:	ee22 1b02 	vmul.f64	d1, d2, d2
 8009a48:	ee07 2a90 	vmov	s15, r2
 8009a4c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8009a50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a54:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009a58:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8009a5c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8009a60:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009a64:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8009a68:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009a6c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8009a70:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8009a74:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009a78:	eea2 7b04 	vfma.f64	d7, d2, d4
 8009a7c:	eea5 7b01 	vfma.f64	d7, d5, d1
 8009a80:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009a84:	ee10 1a90 	vmov	r1, s1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2700      	movs	r7, #0
 8009a8c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009a90:	f248 06be 	movw	r6, #32958	; 0x80be
 8009a94:	429f      	cmp	r7, r3
 8009a96:	bf08      	it	eq
 8009a98:	4296      	cmpeq	r6, r2
 8009a9a:	f080 80b1 	bcs.w	8009c00 <powf+0x218>
 8009a9e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8009c80 <powf+0x298>
 8009aa2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aaa:	dd79      	ble.n	8009ba0 <powf+0x1b8>
 8009aac:	b005      	add	sp, #20
 8009aae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009ab2:	f000 b91f 	b.w	8009cf4 <__math_oflowf>
 8009ab6:	4298      	cmp	r0, r3
 8009ab8:	d32d      	bcc.n	8009b16 <powf+0x12e>
 8009aba:	b952      	cbnz	r2, 8009ad2 <powf+0xea>
 8009abc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8009ac6:	f240 80cd 	bls.w	8009c64 <powf+0x27c>
 8009aca:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009ace:	b005      	add	sp, #20
 8009ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009ad6:	d105      	bne.n	8009ae4 <powf+0xfc>
 8009ad8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8009adc:	0076      	lsls	r6, r6, #1
 8009ade:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8009ae2:	e7f0      	b.n	8009ac6 <powf+0xde>
 8009ae4:	004b      	lsls	r3, r1, #1
 8009ae6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8009aea:	d8ee      	bhi.n	8009aca <powf+0xe2>
 8009aec:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009af0:	d1eb      	bne.n	8009aca <powf+0xe2>
 8009af2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009af6:	f000 80b5 	beq.w	8009c64 <powf+0x27c>
 8009afa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009afe:	ea6f 0606 	mvn.w	r6, r6
 8009b02:	bf34      	ite	cc
 8009b04:	2300      	movcc	r3, #0
 8009b06:	2301      	movcs	r3, #1
 8009b08:	0ff6      	lsrs	r6, r6, #31
 8009b0a:	42b3      	cmp	r3, r6
 8009b0c:	f040 80ad 	bne.w	8009c6a <powf+0x282>
 8009b10:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8009b14:	e7db      	b.n	8009ace <powf+0xe6>
 8009b16:	004f      	lsls	r7, r1, #1
 8009b18:	1e7a      	subs	r2, r7, #1
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d31c      	bcc.n	8009b58 <powf+0x170>
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b24:	da0f      	bge.n	8009b46 <powf+0x15e>
 8009b26:	ee10 0a90 	vmov	r0, s1
 8009b2a:	f7ff ff45 	bl	80099b8 <checkint>
 8009b2e:	2801      	cmp	r0, #1
 8009b30:	d109      	bne.n	8009b46 <powf+0x15e>
 8009b32:	eeb1 0a40 	vneg.f32	s0, s0
 8009b36:	b947      	cbnz	r7, 8009b4a <powf+0x162>
 8009b38:	2e00      	cmp	r6, #0
 8009b3a:	dac8      	bge.n	8009ace <powf+0xe6>
 8009b3c:	b005      	add	sp, #20
 8009b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009b42:	f000 b8dd 	b.w	8009d00 <__math_divzerof>
 8009b46:	2000      	movs	r0, #0
 8009b48:	e7f5      	b.n	8009b36 <powf+0x14e>
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	dabf      	bge.n	8009ace <powf+0xe6>
 8009b4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009b52:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009b56:	e7ba      	b.n	8009ace <powf+0xe6>
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	da1f      	bge.n	8009b9c <powf+0x1b4>
 8009b5c:	ee10 0a90 	vmov	r0, s1
 8009b60:	f7ff ff2a 	bl	80099b8 <checkint>
 8009b64:	b920      	cbnz	r0, 8009b70 <powf+0x188>
 8009b66:	b005      	add	sp, #20
 8009b68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009b6c:	f000 b8d8 	b.w	8009d20 <__math_invalidf>
 8009b70:	2801      	cmp	r0, #1
 8009b72:	bf14      	ite	ne
 8009b74:	2000      	movne	r0, #0
 8009b76:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009b7a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009b7e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8009b82:	f4bf af44 	bcs.w	8009a0e <powf+0x26>
 8009b86:	eddf 7a47 	vldr	s15, [pc, #284]	; 8009ca4 <powf+0x2bc>
 8009b8a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b8e:	ee10 3a10 	vmov	r3, s0
 8009b92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b96:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8009b9a:	e738      	b.n	8009a0e <powf+0x26>
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	e7ee      	b.n	8009b7e <powf+0x196>
 8009ba0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8009c88 <powf+0x2a0>
 8009ba4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bac:	dd10      	ble.n	8009bd0 <powf+0x1e8>
 8009bae:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d15c      	bne.n	8009c70 <powf+0x288>
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	eddd 7a02 	vldr	s15, [sp, #8]
 8009bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bc4:	eef4 7a47 	vcmp.f32	s15, s14
 8009bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bcc:	f47f af6e 	bne.w	8009aac <powf+0xc4>
 8009bd0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009c90 <powf+0x2a8>
 8009bd4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bdc:	d804      	bhi.n	8009be8 <powf+0x200>
 8009bde:	b005      	add	sp, #20
 8009be0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009be4:	f000 b87a 	b.w	8009cdc <__math_uflowf>
 8009be8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009c98 <powf+0x2b0>
 8009bec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf4:	d504      	bpl.n	8009c00 <powf+0x218>
 8009bf6:	b005      	add	sp, #20
 8009bf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009bfc:	f000 b874 	b.w	8009ce8 <__math_may_uflowf>
 8009c00:	4b29      	ldr	r3, [pc, #164]	; (8009ca8 <powf+0x2c0>)
 8009c02:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8009c06:	ee30 6b07 	vadd.f64	d6, d0, d7
 8009c0a:	ed8d 6b00 	vstr	d6, [sp]
 8009c0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009c12:	ee30 7b47 	vsub.f64	d7, d0, d7
 8009c16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c1a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009c1e:	f006 011f 	and.w	r1, r6, #31
 8009c22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009c26:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8009c2a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8009c2e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8009c32:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 8009c36:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009c3a:	ee27 5b07 	vmul.f64	d5, d7, d7
 8009c3e:	1836      	adds	r6, r6, r0
 8009c40:	2300      	movs	r3, #0
 8009c42:	eb13 040c 	adds.w	r4, r3, ip
 8009c46:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 8009c4a:	eb41 050e 	adc.w	r5, r1, lr
 8009c4e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8009c52:	ec45 4b17 	vmov	d7, r4, r5
 8009c56:	eea6 0b05 	vfma.f64	d0, d6, d5
 8009c5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009c5e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009c62:	e734      	b.n	8009ace <powf+0xe6>
 8009c64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009c68:	e731      	b.n	8009ace <powf+0xe6>
 8009c6a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009cac <powf+0x2c4>
 8009c6e:	e72e      	b.n	8009ace <powf+0xe6>
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	eddd 7a03 	vldr	s15, [sp, #12]
 8009c76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c7e:	e7a1      	b.n	8009bc4 <powf+0x1dc>
 8009c80:	ffd1d571 	.word	0xffd1d571
 8009c84:	405fffff 	.word	0x405fffff
 8009c88:	ffa3aae2 	.word	0xffa3aae2
 8009c8c:	405fffff 	.word	0x405fffff
 8009c90:	00000000 	.word	0x00000000
 8009c94:	c062c000 	.word	0xc062c000
 8009c98:	00000000 	.word	0x00000000
 8009c9c:	c062a000 	.word	0xc062a000
 8009ca0:	08009db0 	.word	0x08009db0
 8009ca4:	4b000000 	.word	0x4b000000
 8009ca8:	08009ed8 	.word	0x08009ed8
 8009cac:	00000000 	.word	0x00000000

08009cb0 <with_errnof>:
 8009cb0:	b513      	push	{r0, r1, r4, lr}
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009cb8:	f7ff fe4c 	bl	8009954 <__errno>
 8009cbc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009cc0:	6004      	str	r4, [r0, #0]
 8009cc2:	b002      	add	sp, #8
 8009cc4:	bd10      	pop	{r4, pc}

08009cc6 <xflowf>:
 8009cc6:	b130      	cbz	r0, 8009cd6 <xflowf+0x10>
 8009cc8:	eef1 7a40 	vneg.f32	s15, s0
 8009ccc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cd0:	2022      	movs	r0, #34	; 0x22
 8009cd2:	f7ff bfed 	b.w	8009cb0 <with_errnof>
 8009cd6:	eef0 7a40 	vmov.f32	s15, s0
 8009cda:	e7f7      	b.n	8009ccc <xflowf+0x6>

08009cdc <__math_uflowf>:
 8009cdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ce4 <__math_uflowf+0x8>
 8009ce0:	f7ff bff1 	b.w	8009cc6 <xflowf>
 8009ce4:	10000000 	.word	0x10000000

08009ce8 <__math_may_uflowf>:
 8009ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009cf0 <__math_may_uflowf+0x8>
 8009cec:	f7ff bfeb 	b.w	8009cc6 <xflowf>
 8009cf0:	1a200000 	.word	0x1a200000

08009cf4 <__math_oflowf>:
 8009cf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009cfc <__math_oflowf+0x8>
 8009cf8:	f7ff bfe5 	b.w	8009cc6 <xflowf>
 8009cfc:	70000000 	.word	0x70000000

08009d00 <__math_divzerof>:
 8009d00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009d04:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8009d0e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8009d1c <__math_divzerof+0x1c>
 8009d12:	2022      	movs	r0, #34	; 0x22
 8009d14:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009d18:	f7ff bfca 	b.w	8009cb0 <with_errnof>
 8009d1c:	00000000 	.word	0x00000000

08009d20 <__math_invalidf>:
 8009d20:	eef0 7a40 	vmov.f32	s15, s0
 8009d24:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009d28:	eef4 7a67 	vcmp.f32	s15, s15
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009d34:	d602      	bvs.n	8009d3c <__math_invalidf+0x1c>
 8009d36:	2021      	movs	r0, #33	; 0x21
 8009d38:	f7ff bfba 	b.w	8009cb0 <with_errnof>
 8009d3c:	4770      	bx	lr
	...

08009d40 <_init>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr

08009d4c <_fini>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr
