
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7f8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800fac8  0800fac8  0001fac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800fe18  0800fe18  0001fe18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800fe1c  0800fe1c  0001fe1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004f0  24000000  0800fe20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RAM_D3       00008000  240004f0  08010310  000204f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000191dc  240084f0  08018310  000284f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240216cc  08018310  000316cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000284f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000312e1  00000000  00000000  0002851e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044d1  00000000  00000000  000597ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ce0  00000000  00000000  0005dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ba0  00000000  00000000  0005f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035d92  00000000  00000000  00061550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ea30  00000000  00000000  000972e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001548ab  00000000  00000000  000b5d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  0020a5bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007bb8  00000000  00000000  0020a690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240084f0 	.word	0x240084f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fab0 	.word	0x0800fab0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240084f4 	.word	0x240084f4
 800030c:	0800fab0 	.word	0x0800fab0

08000310 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800031a:	2303      	movs	r3, #3
 800031c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f103 0018 	add.w	r0, r3, #24
 8000324:	f107 020a 	add.w	r2, r7, #10
 8000328:	2302      	movs	r3, #2
 800032a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800032e:	f001 fdb9 	bl	8001ea4 <wm8994_write_reg>
 8000332:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000334:	2300      	movs	r3, #0
 8000336:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0018 	add.w	r0, r3, #24
 800033e:	f107 020a 	add.w	r2, r7, #10
 8000342:	2302      	movs	r3, #2
 8000344:	f640 0117 	movw	r1, #2071	; 0x817
 8000348:	f001 fdac 	bl	8001ea4 <wm8994_write_reg>
 800034c:	4602      	mov	r2, r0
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0018 	add.w	r0, r3, #24
 800035a:	f107 020a 	add.w	r2, r7, #10
 800035e:	2302      	movs	r3, #2
 8000360:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000364:	f001 fd9e 	bl	8001ea4 <wm8994_write_reg>
 8000368:	4602      	mov	r2, r0
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000370:	236c      	movs	r3, #108	; 0x6c
 8000372:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0018 	add.w	r0, r3, #24
 800037a:	f107 020a 	add.w	r2, r7, #10
 800037e:	2302      	movs	r3, #2
 8000380:	2139      	movs	r1, #57	; 0x39
 8000382:	f001 fd8f 	bl	8001ea4 <wm8994_write_reg>
 8000386:	4602      	mov	r2, r0
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000396:	2313      	movs	r3, #19
 8000398:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f103 0018 	add.w	r0, r3, #24
 80003a0:	f107 020a 	add.w	r2, r7, #10
 80003a4:	2302      	movs	r3, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	f001 fd7c 	bl	8001ea4 <wm8994_write_reg>
 80003ac:	4602      	mov	r2, r0
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00e      	b.n	80003d4 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80003b6:	2303      	movs	r3, #3
 80003b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 0018 	add.w	r0, r3, #24
 80003c0:	f107 020a 	add.w	r2, r7, #10
 80003c4:	2302      	movs	r3, #2
 80003c6:	2101      	movs	r1, #1
 80003c8:	f001 fd6c 	bl	8001ea4 <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80003d4:	2132      	movs	r1, #50	; 0x32
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f001 fcec 	bl	8001db4 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 8141 	bhi.w	8000668 <WM8994_Init+0x358>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <WM8994_Init+0xdc>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000703 	.word	0x08000703
 80003f0:	080003fd 	.word	0x080003fd
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000531 	.word	0x08000531
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80003fc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000400:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f103 0018 	add.w	r0, r3, #24
 8000408:	f107 020a 	add.w	r2, r7, #10
 800040c:	2302      	movs	r3, #2
 800040e:	2105      	movs	r1, #5
 8000410:	f001 fd48 	bl	8001ea4 <wm8994_write_reg>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800041c:	2300      	movs	r3, #0
 800041e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 0018 	add.w	r0, r3, #24
 8000426:	f107 020a 	add.w	r2, r7, #10
 800042a:	2302      	movs	r3, #2
 800042c:	f240 6101 	movw	r1, #1537	; 0x601
 8000430:	f001 fd38 	bl	8001ea4 <wm8994_write_reg>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f103 0018 	add.w	r0, r3, #24
 8000442:	f107 020a 	add.w	r2, r7, #10
 8000446:	2302      	movs	r3, #2
 8000448:	f240 6102 	movw	r1, #1538	; 0x602
 800044c:	f001 fd2a 	bl	8001ea4 <wm8994_write_reg>
 8000450:	4602      	mov	r2, r0
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000458:	2302      	movs	r3, #2
 800045a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0018 	add.w	r0, r3, #24
 8000462:	f107 020a 	add.w	r2, r7, #10
 8000466:	2302      	movs	r3, #2
 8000468:	f240 6104 	movw	r1, #1540	; 0x604
 800046c:	f001 fd1a 	bl	8001ea4 <wm8994_write_reg>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0018 	add.w	r0, r3, #24
 800047e:	f107 020a 	add.w	r2, r7, #10
 8000482:	2302      	movs	r3, #2
 8000484:	f240 6105 	movw	r1, #1541	; 0x605
 8000488:	f001 fd0c 	bl	8001ea4 <wm8994_write_reg>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    break;
 8000494:	e136      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000496:	f240 3303 	movw	r3, #771	; 0x303
 800049a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f103 0018 	add.w	r0, r3, #24
 80004a2:	f107 020a 	add.w	r2, r7, #10
 80004a6:	2302      	movs	r3, #2
 80004a8:	2105      	movs	r1, #5
 80004aa:	f001 fcfb 	bl	8001ea4 <wm8994_write_reg>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80004b6:	2301      	movs	r3, #1
 80004b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0018 	add.w	r0, r3, #24
 80004c0:	f107 020a 	add.w	r2, r7, #10
 80004c4:	2302      	movs	r3, #2
 80004c6:	f240 6101 	movw	r1, #1537	; 0x601
 80004ca:	f001 fceb 	bl	8001ea4 <wm8994_write_reg>
 80004ce:	4602      	mov	r2, r0
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0018 	add.w	r0, r3, #24
 80004dc:	f107 020a 	add.w	r2, r7, #10
 80004e0:	2302      	movs	r3, #2
 80004e2:	f240 6102 	movw	r1, #1538	; 0x602
 80004e6:	f001 fcdd 	bl	8001ea4 <wm8994_write_reg>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0018 	add.w	r0, r3, #24
 80004fc:	f107 020a 	add.w	r2, r7, #10
 8000500:	2302      	movs	r3, #2
 8000502:	f240 6104 	movw	r1, #1540	; 0x604
 8000506:	f001 fccd 	bl	8001ea4 <wm8994_write_reg>
 800050a:	4602      	mov	r2, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0018 	add.w	r0, r3, #24
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	2302      	movs	r3, #2
 800051e:	f240 6105 	movw	r1, #1541	; 0x605
 8000522:	f001 fcbf 	bl	8001ea4 <wm8994_write_reg>
 8000526:	4602      	mov	r2, r0
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    break;
 800052e:	e0e9      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d14a      	bne.n	80005ce <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000538:	f640 730f 	movw	r3, #3855	; 0xf0f
 800053c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0018 	add.w	r0, r3, #24
 8000544:	f107 020a 	add.w	r2, r7, #10
 8000548:	2302      	movs	r3, #2
 800054a:	2105      	movs	r1, #5
 800054c:	f001 fcaa 	bl	8001ea4 <wm8994_write_reg>
 8000550:	4602      	mov	r2, r0
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000558:	2303      	movs	r3, #3
 800055a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0018 	add.w	r0, r3, #24
 8000562:	f107 020a 	add.w	r2, r7, #10
 8000566:	2302      	movs	r3, #2
 8000568:	f240 6101 	movw	r1, #1537	; 0x601
 800056c:	f001 fc9a 	bl	8001ea4 <wm8994_write_reg>
 8000570:	4602      	mov	r2, r0
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0018 	add.w	r0, r3, #24
 800057e:	f107 020a 	add.w	r2, r7, #10
 8000582:	2302      	movs	r3, #2
 8000584:	f240 6102 	movw	r1, #1538	; 0x602
 8000588:	f001 fc8c 	bl	8001ea4 <wm8994_write_reg>
 800058c:	4602      	mov	r2, r0
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0018 	add.w	r0, r3, #24
 800059a:	f107 020a 	add.w	r2, r7, #10
 800059e:	2302      	movs	r3, #2
 80005a0:	f240 6104 	movw	r1, #1540	; 0x604
 80005a4:	f001 fc7e 	bl	8001ea4 <wm8994_write_reg>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 020a 	add.w	r2, r7, #10
 80005ba:	2302      	movs	r3, #2
 80005bc:	f240 6105 	movw	r1, #1541	; 0x605
 80005c0:	f001 fc70 	bl	8001ea4 <wm8994_write_reg>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80005cc:	e09a      	b.n	8000704 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80005ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80005d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020a 	add.w	r2, r7, #10
 80005de:	2302      	movs	r3, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	f001 fc5f 	bl	8001ea4 <wm8994_write_reg>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80005ee:	2301      	movs	r3, #1
 80005f0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0018 	add.w	r0, r3, #24
 80005f8:	f107 020a 	add.w	r2, r7, #10
 80005fc:	2302      	movs	r3, #2
 80005fe:	f240 6101 	movw	r1, #1537	; 0x601
 8000602:	f001 fc4f 	bl	8001ea4 <wm8994_write_reg>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0018 	add.w	r0, r3, #24
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	2302      	movs	r3, #2
 800061a:	f240 6102 	movw	r1, #1538	; 0x602
 800061e:	f001 fc41 	bl	8001ea4 <wm8994_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800062a:	2302      	movs	r3, #2
 800062c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0018 	add.w	r0, r3, #24
 8000634:	f107 020a 	add.w	r2, r7, #10
 8000638:	2302      	movs	r3, #2
 800063a:	f240 6104 	movw	r1, #1540	; 0x604
 800063e:	f001 fc31 	bl	8001ea4 <wm8994_write_reg>
 8000642:	4602      	mov	r2, r0
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0018 	add.w	r0, r3, #24
 8000650:	f107 020a 	add.w	r2, r7, #10
 8000654:	2302      	movs	r3, #2
 8000656:	f240 6105 	movw	r1, #1541	; 0x605
 800065a:	f001 fc23 	bl	8001ea4 <wm8994_write_reg>
 800065e:	4602      	mov	r2, r0
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
    break;
 8000666:	e04d      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000668:	f240 3303 	movw	r3, #771	; 0x303
 800066c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0018 	add.w	r0, r3, #24
 8000674:	f107 020a 	add.w	r2, r7, #10
 8000678:	2302      	movs	r3, #2
 800067a:	2105      	movs	r1, #5
 800067c:	f001 fc12 	bl	8001ea4 <wm8994_write_reg>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000688:	2301      	movs	r3, #1
 800068a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 0018 	add.w	r0, r3, #24
 8000692:	f107 020a 	add.w	r2, r7, #10
 8000696:	2302      	movs	r3, #2
 8000698:	f240 6101 	movw	r1, #1537	; 0x601
 800069c:	f001 fc02 	bl	8001ea4 <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0018 	add.w	r0, r3, #24
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	2302      	movs	r3, #2
 80006b4:	f240 6102 	movw	r1, #1538	; 0x602
 80006b8:	f001 fbf4 	bl	8001ea4 <wm8994_write_reg>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 0018 	add.w	r0, r3, #24
 80006ce:	f107 020a 	add.w	r2, r7, #10
 80006d2:	2302      	movs	r3, #2
 80006d4:	f240 6104 	movw	r1, #1540	; 0x604
 80006d8:	f001 fbe4 	bl	8001ea4 <wm8994_write_reg>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0018 	add.w	r0, r3, #24
 80006ea:	f107 020a 	add.w	r2, r7, #10
 80006ee:	2302      	movs	r3, #2
 80006f0:	f240 6105 	movw	r1, #1541	; 0x605
 80006f4:	f001 fbd6 	bl	8001ea4 <wm8994_write_reg>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    break;
 8000700:	e000      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
 8000702:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2b04      	cmp	r3, #4
 800070c:	f200 81e0 	bhi.w	8000ad0 <WM8994_Init+0x7c0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <WM8994_Init+0x408>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000901 	.word	0x08000901
 800071c:	0800072d 	.word	0x0800072d
 8000720:	080007eb 	.word	0x080007eb
 8000724:	08000ad1 	.word	0x08000ad1
 8000728:	080009bf 	.word	0x080009bf
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 800072c:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000730:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0018 	add.w	r0, r3, #24
 8000738:	f107 020a 	add.w	r2, r7, #10
 800073c:	2302      	movs	r3, #2
 800073e:	2104      	movs	r1, #4
 8000740:	f001 fbb0 	bl	8001ea4 <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800074c:	23db      	movs	r3, #219	; 0xdb
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000760:	f001 fba0 	bl	8001ea4 <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800076c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000770:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0018 	add.w	r0, r3, #24
 8000778:	f107 020a 	add.w	r2, r7, #10
 800077c:	2302      	movs	r3, #2
 800077e:	2102      	movs	r1, #2
 8000780:	f001 fb90 	bl	8001ea4 <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800078c:	2302      	movs	r3, #2
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007a0:	f001 fb80 	bl	8001ea4 <wm8994_write_reg>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0018 	add.w	r0, r3, #24
 80007b2:	f107 020a 	add.w	r2, r7, #10
 80007b6:	2302      	movs	r3, #2
 80007b8:	f240 6109 	movw	r1, #1545	; 0x609
 80007bc:	f001 fb72 	bl	8001ea4 <wm8994_write_reg>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80007c8:	230e      	movs	r3, #14
 80007ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 0018 	add.w	r0, r3, #24
 80007d2:	f107 020a 	add.w	r2, r7, #10
 80007d6:	2302      	movs	r3, #2
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	f001 fb62 	bl	8001ea4 <wm8994_write_reg>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    break;
 80007e8:	e173      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80007ea:	2311      	movs	r3, #17
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	f001 fb52 	bl	8001ea4 <wm8994_write_reg>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000808:	2335      	movs	r3, #53	; 0x35
 800080a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0018 	add.w	r0, r3, #24
 8000812:	f107 020a 	add.w	r2, r7, #10
 8000816:	2302      	movs	r3, #2
 8000818:	2129      	movs	r1, #41	; 0x29
 800081a:	f001 fb43 	bl	8001ea4 <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0018 	add.w	r0, r3, #24
 800082c:	f107 020a 	add.w	r2, r7, #10
 8000830:	2302      	movs	r3, #2
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	f001 fb36 	bl	8001ea4 <wm8994_write_reg>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000840:	f240 3303 	movw	r3, #771	; 0x303
 8000844:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0018 	add.w	r0, r3, #24
 800084c:	f107 020a 	add.w	r2, r7, #10
 8000850:	2302      	movs	r3, #2
 8000852:	2104      	movs	r1, #4
 8000854:	f001 fb26 	bl	8001ea4 <wm8994_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000860:	23db      	movs	r3, #219	; 0xdb
 8000862:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0018 	add.w	r0, r3, #24
 800086a:	f107 020a 	add.w	r2, r7, #10
 800086e:	2302      	movs	r3, #2
 8000870:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000874:	f001 fb16 	bl	8001ea4 <wm8994_write_reg>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000880:	f246 3350 	movw	r3, #25424	; 0x6350
 8000884:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0018 	add.w	r0, r3, #24
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	2302      	movs	r3, #2
 8000892:	2102      	movs	r1, #2
 8000894:	f001 fb06 	bl	8001ea4 <wm8994_write_reg>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80008a0:	2302      	movs	r3, #2
 80008a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6106 	movw	r1, #1542	; 0x606
 80008b4:	f001 faf6 	bl	8001ea4 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f103 0018 	add.w	r0, r3, #24
 80008c6:	f107 020a 	add.w	r2, r7, #10
 80008ca:	2302      	movs	r3, #2
 80008cc:	f240 6107 	movw	r1, #1543	; 0x607
 80008d0:	f001 fae8 	bl	8001ea4 <wm8994_write_reg>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80008dc:	f248 030d 	movw	r3, #32781	; 0x800d
 80008e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0018 	add.w	r0, r3, #24
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	2302      	movs	r3, #2
 80008ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008f2:	f001 fad7 	bl	8001ea4 <wm8994_write_reg>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    break;
 80008fe:	e0e8      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000900:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2104      	movs	r1, #4
 8000914:	f001 fac6 	bl	8001ea4 <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000920:	23db      	movs	r3, #219	; 0xdb
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000934:	f001 fab6 	bl	8001ea4 <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000940:	f246 3350 	movw	r3, #25424	; 0x6350
 8000944:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0018 	add.w	r0, r3, #24
 800094c:	f107 020a 	add.w	r2, r7, #10
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f001 faa6 	bl	8001ea4 <wm8994_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000960:	2302      	movs	r3, #2
 8000962:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0018 	add.w	r0, r3, #24
 800096a:	f107 020a 	add.w	r2, r7, #10
 800096e:	2302      	movs	r3, #2
 8000970:	f240 6106 	movw	r1, #1542	; 0x606
 8000974:	f001 fa96 	bl	8001ea4 <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6107 	movw	r1, #1543	; 0x607
 8000990:	f001 fa88 	bl	8001ea4 <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800099c:	230d      	movs	r3, #13
 800099e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b0:	f001 fa78 	bl	8001ea4 <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    break;
 80009bc:	e089      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80009be:	f640 733c 	movw	r3, #3900	; 0xf3c
 80009c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0018 	add.w	r0, r3, #24
 80009ca:	f107 020a 	add.w	r2, r7, #10
 80009ce:	2302      	movs	r3, #2
 80009d0:	2104      	movs	r1, #4
 80009d2:	f001 fa67 	bl	8001ea4 <wm8994_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80009de:	23db      	movs	r3, #219	; 0xdb
 80009e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0018 	add.w	r0, r3, #24
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	2302      	movs	r3, #2
 80009ee:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80009f2:	f001 fa57 	bl	8001ea4 <wm8994_write_reg>
 80009f6:	4602      	mov	r2, r0
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f103 0018 	add.w	r0, r3, #24
 8000a04:	f107 020a 	add.w	r2, r7, #10
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a0e:	f001 fa49 	bl	8001ea4 <wm8994_write_reg>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a1a:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	f001 fa39 	bl	8001ea4 <wm8994_write_reg>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f103 0018 	add.w	r0, r3, #24
 8000a44:	f107 020a 	add.w	r2, r7, #10
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f240 6106 	movw	r1, #1542	; 0x606
 8000a4e:	f001 fa29 	bl	8001ea4 <wm8994_write_reg>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0018 	add.w	r0, r3, #24
 8000a60:	f107 020a 	add.w	r2, r7, #10
 8000a64:	2302      	movs	r3, #2
 8000a66:	f240 6107 	movw	r1, #1543	; 0x607
 8000a6a:	f001 fa1b 	bl	8001ea4 <wm8994_write_reg>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0018 	add.w	r0, r3, #24
 8000a7c:	f107 020a 	add.w	r2, r7, #10
 8000a80:	2302      	movs	r3, #2
 8000a82:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a86:	f001 fa0d 	bl	8001ea4 <wm8994_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0018 	add.w	r0, r3, #24
 8000a98:	f107 020a 	add.w	r2, r7, #10
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f240 6109 	movw	r1, #1545	; 0x609
 8000aa2:	f001 f9ff 	bl	8001ea4 <wm8994_write_reg>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f103 0018 	add.w	r0, r3, #24
 8000ab8:	f107 020a 	add.w	r2, r7, #10
 8000abc:	2302      	movs	r3, #2
 8000abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac2:	f001 f9ef 	bl	8001ea4 <wm8994_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000ace:	e000      	b.n	8000ad2 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000ad0:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fff9 	bl	8001ad0 <WM8994_SetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d11a      	bne.n	8000b24 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 ff59 	bl	80019a8 <WM8994_SetResolution>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000afe:	2103      	movs	r1, #3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 ffab 	bl	8001a5c <WM8994_SetProtocol>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 faf3 	bl	8002100 <wm8994_aif1_control1_adcr_src>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e01b      	b.n	8000b5c <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 ff3c 	bl	80019a8 <WM8994_SetResolution>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 ff8e 	bl	8001a5c <WM8994_SetProtocol>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fad6 	bl	8002100 <wm8994_aif1_control1_adcr_src>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0018 	add.w	r0, r3, #24
 8000b66:	f107 020a 	add.w	r2, r7, #10
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f240 3102 	movw	r1, #770	; 0x302
 8000b70:	f001 f998 	bl	8001ea4 <wm8994_write_reg>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000b90:	f001 f988 	bl	8001ea4 <wm8994_write_reg>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0018 	add.w	r0, r3, #24
 8000ba6:	f107 020a 	add.w	r2, r7, #10
 8000baa:	2302      	movs	r3, #2
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	f001 f978 	bl	8001ea4 <wm8994_write_reg>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 81c6 	beq.w	8000f52 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d164      	bne.n	8000c98 <WM8994_Init+0x988>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d160      	bne.n	8000c98 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 0018 	add.w	r0, r3, #24
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	2302      	movs	r3, #2
 8000be8:	212d      	movs	r1, #45	; 0x2d
 8000bea:	f001 f95b 	bl	8001ea4 <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 0018 	add.w	r0, r3, #24
 8000bfc:	f107 020a 	add.w	r2, r7, #10
 8000c00:	2302      	movs	r3, #2
 8000c02:	212e      	movs	r1, #46	; 0x2e
 8000c04:	f001 f94e 	bl	8001ea4 <wm8994_write_reg>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d119      	bne.n	8000c4c <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c1c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0018 	add.w	r0, r3, #24
 8000c24:	f107 020a 	add.w	r2, r7, #10
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c2e:	f001 f939 	bl	8001ea4 <wm8994_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000c40:	f240 1145 	movw	r1, #325	; 0x145
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f001 f8b5 	bl	8001db4 <WM8994_Delay>
 8000c4a:	e014      	b.n	8000c76 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000c4c:	f248 1308 	movw	r3, #33032	; 0x8108
 8000c50:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f103 0018 	add.w	r0, r3, #24
 8000c58:	f107 020a 	add.w	r2, r7, #10
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c62:	f001 f91f 	bl	8001ea4 <wm8994_write_reg>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f001 f89f 	bl	8001db4 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000c76:	2300      	movs	r3, #0
 8000c78:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f103 0018 	add.w	r0, r3, #24
 8000c80:	f107 020a 	add.w	r2, r7, #10
 8000c84:	2302      	movs	r3, #2
 8000c86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c8a:	f001 f90b 	bl	8001ea4 <wm8994_write_reg>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e0f4      	b.n	8000e82 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2103      	movs	r1, #3
 8000cac:	f001 f8fa 	bl	8001ea4 <wm8994_write_reg>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	f001 f8eb 	bl	8001ea4 <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	f107 020a 	add.w	r2, r7, #10
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	f001 f8de 	bl	8001ea4 <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	2136      	movs	r1, #54	; 0x36
 8000d04:	f001 f8ce 	bl	8001ea4 <wm8994_write_reg>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d10:	f243 0303 	movw	r3, #12291	; 0x3003
 8000d14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0018 	add.w	r0, r3, #24
 8000d1c:	f107 020a 	add.w	r2, r7, #10
 8000d20:	2302      	movs	r3, #2
 8000d22:	2101      	movs	r1, #1
 8000d24:	f001 f8be 	bl	8001ea4 <wm8994_write_reg>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d113      	bne.n	8000d60 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000d38:	f240 2305 	movw	r3, #517	; 0x205
 8000d3c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 0018 	add.w	r0, r3, #24
 8000d44:	f107 020a 	add.w	r2, r7, #10
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2151      	movs	r1, #81	; 0x51
 8000d4c:	f001 f8aa 	bl	8001ea4 <wm8994_write_reg>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <WM8994_Init+0xa6e>
 8000d5a:	bf00      	nop
 8000d5c:	24000448 	.word	0x24000448
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000d60:	2305      	movs	r3, #5
 8000d62:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0018 	add.w	r0, r3, #24
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	2302      	movs	r3, #2
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	f001 f897 	bl	8001ea4 <wm8994_write_reg>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000d7e:	f243 3303 	movw	r3, #13059	; 0x3303
 8000d82:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2101      	movs	r1, #1
 8000d92:	f001 f887 	bl	8001ea4 <wm8994_write_reg>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0018 	add.w	r0, r3, #24
 8000da8:	f107 020a 	add.w	r2, r7, #10
 8000dac:	2302      	movs	r3, #2
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f001 f878 	bl	8001ea4 <wm8994_write_reg>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000dbc:	f649 7325 	movw	r3, #40741	; 0x9f25
 8000dc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0018 	add.w	r0, r3, #24
 8000dc8:	f107 020a 	add.w	r2, r7, #10
 8000dcc:	2302      	movs	r3, #2
 8000dce:	214c      	movs	r1, #76	; 0x4c
 8000dd0:	f001 f868 	bl	8001ea4 <wm8994_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 ffe8 	bl	8001db4 <WM8994_Delay>
      
      tmp = 0x0001;
 8000de4:	2301      	movs	r3, #1
 8000de6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0018 	add.w	r0, r3, #24
 8000dee:	f107 020a 	add.w	r2, r7, #10
 8000df2:	2302      	movs	r3, #2
 8000df4:	212d      	movs	r1, #45	; 0x2d
 8000df6:	f001 f855 	bl	8001ea4 <wm8994_write_reg>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	212e      	movs	r1, #46	; 0x2e
 8000e10:	f001 f848 	bl	8001ea4 <wm8994_write_reg>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e1c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2103      	movs	r1, #3
 8000e30:	f001 f838 	bl	8001ea4 <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0018 	add.w	r0, r3, #24
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2154      	movs	r1, #84	; 0x54
 8000e4e:	f001 f829 	bl	8001ea4 <wm8994_write_reg>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000e5a:	f240 1101 	movw	r1, #257	; 0x101
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 ffa8 	bl	8001db4 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000e64:	23ee      	movs	r3, #238	; 0xee
 8000e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	2160      	movs	r1, #96	; 0x60
 8000e76:	f001 f815 	bl	8001ea4 <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f103 0018 	add.w	r0, r3, #24
 8000e8c:	f107 020a 	add.w	r2, r7, #10
 8000e90:	2302      	movs	r3, #2
 8000e92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000e96:	f001 f805 	bl	8001ea4 <wm8994_write_reg>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb2:	f000 fff7 	bl	8001ea4 <wm8994_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0018 	add.w	r0, r3, #24
 8000ec8:	f107 020a 	add.w	r2, r7, #10
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ed2:	f000 ffe7 	bl	8001ea4 <wm8994_write_reg>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0018 	add.w	r0, r3, #24
 8000ee8:	f107 020a 	add.w	r2, r7, #10
 8000eec:	2302      	movs	r3, #2
 8000eee:	f240 6112 	movw	r1, #1554	; 0x612
 8000ef2:	f000 ffd7 	bl	8001ea4 <wm8994_write_reg>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0018 	add.w	r0, r3, #24
 8000f04:	f107 020a 	add.w	r2, r7, #10
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8000f0e:	f000 ffc9 	bl	8001ea4 <wm8994_write_reg>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f103 0018 	add.w	r0, r3, #24
 8000f24:	f107 020a 	add.w	r2, r7, #10
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f240 4122 	movw	r1, #1058	; 0x422
 8000f2e:	f000 ffb9 	bl	8001ea4 <wm8994_write_reg>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f99f 	bl	8001288 <WM8994_SetVolume>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b5 	beq.w	80010c6 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <WM8994_Init+0xc5c>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000f6c:	2313      	movs	r3, #19
 8000f6e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0018 	add.w	r0, r3, #24
 8000f76:	f107 020a 	add.w	r2, r7, #10
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f000 ff91 	bl	8001ea4 <wm8994_write_reg>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0018 	add.w	r0, r3, #24
 8000f94:	f107 020a 	add.w	r2, r7, #10
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f9e:	f000 ff81 	bl	8001ea4 <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f103 0018 	add.w	r0, r3, #24
 8000fb6:	f107 020a 	add.w	r2, r7, #10
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f240 4111 	movw	r1, #1041	; 0x411
 8000fc0:	f000 ff70 	bl	8001ea4 <wm8994_write_reg>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e06f      	b.n	80010ae <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d13e      	bne.n	8001054 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f103 0018 	add.w	r0, r3, #24
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f000 ff5c 	bl	8001ea4 <wm8994_write_reg>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 0018 	add.w	r0, r3, #24
 8000ffe:	f107 020a 	add.w	r2, r7, #10
 8001002:	2302      	movs	r3, #2
 8001004:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001008:	f000 ff4c 	bl	8001ea4 <wm8994_write_reg>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001018:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0018 	add.w	r0, r3, #24
 8001020:	f107 020a 	add.w	r2, r7, #10
 8001024:	2302      	movs	r3, #2
 8001026:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800102a:	f000 ff3b 	bl	8001ea4 <wm8994_write_reg>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	f240 4111 	movw	r1, #1041	; 0x411
 8001046:	f000 ff2d 	bl	8001ea4 <wm8994_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e02c      	b.n	80010ae <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8001054:	230b      	movs	r3, #11
 8001056:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0018 	add.w	r0, r3, #24
 800105e:	f107 020a 	add.w	r2, r7, #10
 8001062:	2302      	movs	r3, #2
 8001064:	2118      	movs	r1, #24
 8001066:	f000 ff1d 	bl	8001ea4 <wm8994_write_reg>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f103 0018 	add.w	r0, r3, #24
 8001078:	f107 020a 	add.w	r2, r7, #10
 800107c:	2302      	movs	r3, #2
 800107e:	211a      	movs	r1, #26
 8001080:	f000 ff10 	bl	8001ea4 <wm8994_write_reg>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800108c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010a2:	f000 feff 	bl	8001ea4 <wm8994_write_reg>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8e5 	bl	8001288 <WM8994_SetVolume>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f861 	bl	80011ae <WM8994_Stop>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3318      	adds	r3, #24
 800110a:	f107 020a 	add.w	r2, r7, #10
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f000 ff00 	bl	8001f16 <wm8994_sw_reset_r>
 8001116:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	601a      	str	r2, [r3, #0]
  
  return ret;
 8001120:	68fb      	ldr	r3, [r7, #12]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f9d3 	bl	80014e0 <WM8994_SetMute>
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 800114c:	2301      	movs	r3, #1
 800114e:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8001150:	2101      	movs	r1, #1
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f9c4 	bl	80014e0 <WM8994_SetMute>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e011      	b.n	800118a <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f103 0018 	add.w	r0, r3, #24
 800116c:	f107 020a 	add.w	r2, r7, #10
 8001170:	2302      	movs	r3, #2
 8001172:	2102      	movs	r1, #2
 8001174:	f000 fe96 	bl	8001ea4 <wm8994_write_reg>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e001      	b.n	800118a <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800119c:	2100      	movs	r1, #0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f99e 	bl	80014e0 <WM8994_SetMute>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 80011b8:	2101      	movs	r1, #1
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f990 	bl	80014e0 <WM8994_SetMute>
 80011c0:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d054      	beq.n	8001272 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 80011c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011cc:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f103 0018 	add.w	r0, r3, #24
 80011d4:	f107 020a 	add.w	r2, r7, #10
 80011d8:	2302      	movs	r3, #2
 80011da:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011de:	f000 fe61 	bl	8001ea4 <wm8994_write_reg>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f103 0018 	add.w	r0, r3, #24
 80011f0:	f107 020a 	add.w	r2, r7, #10
 80011f4:	2302      	movs	r3, #2
 80011f6:	f240 4122 	movw	r1, #1058	; 0x422
 80011fa:	f000 fe53 	bl	8001ea4 <wm8994_write_reg>
 80011fe:	4602      	mov	r2, r0
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 8001206:	2300      	movs	r3, #0
 8001208:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f103 0018 	add.w	r0, r3, #24
 8001210:	f107 020a 	add.w	r2, r7, #10
 8001214:	2302      	movs	r3, #2
 8001216:	212d      	movs	r1, #45	; 0x2d
 8001218:	f000 fe44 	bl	8001ea4 <wm8994_write_reg>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f103 0018 	add.w	r0, r3, #24
 800122a:	f107 020a 	add.w	r2, r7, #10
 800122e:	2302      	movs	r3, #2
 8001230:	212e      	movs	r1, #46	; 0x2e
 8001232:	f000 fe37 	bl	8001ea4 <wm8994_write_reg>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0018 	add.w	r0, r3, #24
 8001244:	f107 020a 	add.w	r2, r7, #10
 8001248:	2302      	movs	r3, #2
 800124a:	2105      	movs	r1, #5
 800124c:	f000 fe2a 	bl	8001ea4 <wm8994_write_reg>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 0018 	add.w	r0, r3, #24
 800125e:	f107 020a 	add.w	r2, r7, #10
 8001262:	2302      	movs	r3, #2
 8001264:	2100      	movs	r1, #0
 8001266:	f000 fe1d 	bl	8001ea4 <wm8994_write_reg>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 8089 	bne.w	80013b0 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b3e      	cmp	r3, #62	; 0x3e
 80012a2:	d93c      	bls.n	800131e <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80012a4:	2100      	movs	r1, #0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f91a 	bl	80014e0 <WM8994_SetMute>
 80012ac:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 80012ae:	f240 137f 	movw	r3, #383	; 0x17f
 80012b2:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f103 0018 	add.w	r0, r3, #24
 80012ba:	f107 0212 	add.w	r2, r7, #18
 80012be:	2302      	movs	r3, #2
 80012c0:	211c      	movs	r1, #28
 80012c2:	f000 fdef 	bl	8001ea4 <wm8994_write_reg>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f103 0018 	add.w	r0, r3, #24
 80012d4:	f107 0212 	add.w	r2, r7, #18
 80012d8:	2302      	movs	r3, #2
 80012da:	211d      	movs	r1, #29
 80012dc:	f000 fde2 	bl	8001ea4 <wm8994_write_reg>
 80012e0:	4602      	mov	r2, r0
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f103 0018 	add.w	r0, r3, #24
 80012ee:	f107 0212 	add.w	r2, r7, #18
 80012f2:	2302      	movs	r3, #2
 80012f4:	2126      	movs	r1, #38	; 0x26
 80012f6:	f000 fdd5 	bl	8001ea4 <wm8994_write_reg>
 80012fa:	4602      	mov	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f103 0018 	add.w	r0, r3, #24
 8001308:	f107 0212 	add.w	r2, r7, #18
 800130c:	2302      	movs	r3, #2
 800130e:	2127      	movs	r1, #39	; 0x27
 8001310:	f000 fdc8 	bl	8001ea4 <wm8994_write_reg>
 8001314:	4602      	mov	r2, r0
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e083      	b.n	8001426 <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001324:	2101      	movs	r1, #1
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f8da 	bl	80014e0 <WM8994_SetMute>
 800132c:	6178      	str	r0, [r7, #20]
 800132e:	e07a      	b.n	8001426 <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001330:	2100      	movs	r1, #0
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f8d4 	bl	80014e0 <WM8994_SetMute>
 8001338:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	b29b      	uxth	r3, r3
 800133e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001342:	b29b      	uxth	r3, r3
 8001344:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 0018 	add.w	r0, r3, #24
 800134c:	f107 0212 	add.w	r2, r7, #18
 8001350:	2302      	movs	r3, #2
 8001352:	211c      	movs	r1, #28
 8001354:	f000 fda6 	bl	8001ea4 <wm8994_write_reg>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f103 0018 	add.w	r0, r3, #24
 8001366:	f107 0212 	add.w	r2, r7, #18
 800136a:	2302      	movs	r3, #2
 800136c:	211d      	movs	r1, #29
 800136e:	f000 fd99 	bl	8001ea4 <wm8994_write_reg>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f103 0018 	add.w	r0, r3, #24
 8001380:	f107 0212 	add.w	r2, r7, #18
 8001384:	2302      	movs	r3, #2
 8001386:	2126      	movs	r1, #38	; 0x26
 8001388:	f000 fd8c 	bl	8001ea4 <wm8994_write_reg>
 800138c:	4602      	mov	r2, r0
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f103 0018 	add.w	r0, r3, #24
 800139a:	f107 0212 	add.w	r2, r7, #18
 800139e:	2302      	movs	r3, #2
 80013a0:	2127      	movs	r1, #39	; 0x27
 80013a2:	f000 fd7f 	bl	8001ea4 <wm8994_write_reg>
 80013a6:	4602      	mov	r2, r0
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4413      	add	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e03a      	b.n	8001426 <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f103 0018 	add.w	r0, r3, #24
 80013c2:	f107 0212 	add.w	r2, r7, #18
 80013c6:	2302      	movs	r3, #2
 80013c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013cc:	f000 fd6a 	bl	8001ea4 <wm8994_write_reg>
 80013d0:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f103 0018 	add.w	r0, r3, #24
 80013d8:	f107 0212 	add.w	r2, r7, #18
 80013dc:	2302      	movs	r3, #2
 80013de:	f240 4101 	movw	r1, #1025	; 0x401
 80013e2:	f000 fd5f 	bl	8001ea4 <wm8994_write_reg>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f103 0018 	add.w	r0, r3, #24
 80013f4:	f107 0212 	add.w	r2, r7, #18
 80013f8:	2302      	movs	r3, #2
 80013fa:	f240 4104 	movw	r1, #1028	; 0x404
 80013fe:	f000 fd51 	bl	8001ea4 <wm8994_write_reg>
 8001402:	4602      	mov	r2, r0
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f103 0018 	add.w	r0, r3, #24
 8001410:	f107 0212 	add.w	r2, r7, #18
 8001414:	2302      	movs	r3, #2
 8001416:	f240 4105 	movw	r1, #1029	; 0x405
 800141a:	f000 fd43 	bl	8001ea4 <wm8994_write_reg>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001430:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001432:	697b      	ldr	r3, [r7, #20]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d11e      	bne.n	8001490 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3318      	adds	r3, #24
 8001456:	f107 0212 	add.w	r2, r7, #18
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fd6a 	bl	8001f36 <wm8994_lo_hpout1l_vol_r>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e02d      	b.n	80014cc <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8001470:	8a7b      	ldrh	r3, [r7, #18]
 8001472:	461a      	mov	r2, r3
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	fb03 f302 	mul.w	r3, r3, r2
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <WM8994_GetVolume+0x9c>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	441a      	add	r2, r3
 8001482:	1152      	asrs	r2, r2, #5
 8001484:	17db      	asrs	r3, r3, #31
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b2da      	uxtb	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e01d      	b.n	80014cc <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3318      	adds	r3, #24
 8001494:	f107 0212 	add.w	r2, r7, #18
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe60 	bl	8002160 <wm8994_aif1_adc1_left_vol_adc1l_r>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e00e      	b.n	80014cc <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	fb03 f302 	mul.w	r3, r3, r2
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <WM8994_GetVolume+0xa0>)
 80014ba:	fb82 1203 	smull	r1, r2, r2, r3
 80014be:	441a      	add	r2, r3
 80014c0:	11d2      	asrs	r2, r2, #7
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80014cc:	697b      	ldr	r3, [r7, #20]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	82082083 	.word	0x82082083
 80014dc:	891ac73b 	.word	0x891ac73b

080014e0 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d11c      	bne.n	800152a <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80014f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f4:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f103 0018 	add.w	r0, r3, #24
 80014fc:	f107 020a 	add.w	r2, r7, #10
 8001500:	2302      	movs	r3, #2
 8001502:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001506:	f000 fccd 	bl	8001ea4 <wm8994_write_reg>
 800150a:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f103 0018 	add.w	r0, r3, #24
 8001512:	f107 020a 	add.w	r2, r7, #10
 8001516:	2302      	movs	r3, #2
 8001518:	f240 4122 	movw	r1, #1058	; 0x422
 800151c:	f000 fcc2 	bl	8001ea4 <wm8994_write_reg>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e01a      	b.n	8001560 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800152a:	2310      	movs	r3, #16
 800152c:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f103 0018 	add.w	r0, r3, #24
 8001534:	f107 020a 	add.w	r2, r7, #10
 8001538:	2302      	movs	r3, #2
 800153a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800153e:	f000 fcb1 	bl	8001ea4 <wm8994_write_reg>
 8001542:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f103 0018 	add.w	r0, r3, #24
 800154a:	f107 020a 	add.w	r2, r7, #10
 800154e:	2302      	movs	r3, #2
 8001550:	f240 4122 	movw	r1, #1058	; 0x422
 8001554:	f000 fca6 	bl	8001ea4 <wm8994_write_reg>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <WM8994_SetOutputMode+0x18>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b04      	cmp	r3, #4
 800158a:	f040 809c 	bne.w	80016c6 <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 800158e:	2300      	movs	r3, #0
 8001590:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f103 0018 	add.w	r0, r3, #24
 8001598:	f107 020a 	add.w	r2, r7, #10
 800159c:	2302      	movs	r3, #2
 800159e:	2101      	movs	r1, #1
 80015a0:	f000 fc80 	bl	8001ea4 <wm8994_write_reg>
 80015a4:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 80015a6:	f240 3303 	movw	r3, #771	; 0x303
 80015aa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f103 0018 	add.w	r0, r3, #24
 80015b2:	f107 020a 	add.w	r2, r7, #10
 80015b6:	2302      	movs	r3, #2
 80015b8:	2105      	movs	r1, #5
 80015ba:	f000 fc73 	bl	8001ea4 <wm8994_write_reg>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80015c6:	2301      	movs	r3, #1
 80015c8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 0018 	add.w	r0, r3, #24
 80015d0:	f107 020a 	add.w	r2, r7, #10
 80015d4:	2302      	movs	r3, #2
 80015d6:	f240 6101 	movw	r1, #1537	; 0x601
 80015da:	f000 fc63 	bl	8001ea4 <wm8994_write_reg>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f103 0018 	add.w	r0, r3, #24
 80015ec:	f107 020a 	add.w	r2, r7, #10
 80015f0:	2302      	movs	r3, #2
 80015f2:	f240 6102 	movw	r1, #1538	; 0x602
 80015f6:	f000 fc55 	bl	8001ea4 <wm8994_write_reg>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8001602:	2300      	movs	r3, #0
 8001604:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f103 0018 	add.w	r0, r3, #24
 800160c:	f107 020a 	add.w	r2, r7, #10
 8001610:	2302      	movs	r3, #2
 8001612:	f240 6104 	movw	r1, #1540	; 0x604
 8001616:	f000 fc45 	bl	8001ea4 <wm8994_write_reg>
 800161a:	4602      	mov	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f103 0018 	add.w	r0, r3, #24
 8001628:	f107 020a 	add.w	r2, r7, #10
 800162c:	2302      	movs	r3, #2
 800162e:	f240 6105 	movw	r1, #1541	; 0x605
 8001632:	f000 fc37 	bl	8001ea4 <wm8994_write_reg>
 8001636:	4602      	mov	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 800163e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001642:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f103 0018 	add.w	r0, r3, #24
 800164a:	f107 020a 	add.w	r2, r7, #10
 800164e:	2302      	movs	r3, #2
 8001650:	212d      	movs	r1, #45	; 0x2d
 8001652:	f000 fc27 	bl	8001ea4 <wm8994_write_reg>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0018 	add.w	r0, r3, #24
 8001664:	f107 020a 	add.w	r2, r7, #10
 8001668:	2302      	movs	r3, #2
 800166a:	212e      	movs	r1, #46	; 0x2e
 800166c:	f000 fc1a 	bl	8001ea4 <wm8994_write_reg>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 8001678:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800167c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f103 0018 	add.w	r0, r3, #24
 8001684:	f107 020a 	add.w	r2, r7, #10
 8001688:	2302      	movs	r3, #2
 800168a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800168e:	f000 fc09 	bl	8001ea4 <wm8994_write_reg>
 8001692:	4602      	mov	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800169a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fb88 	bl	8001db4 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 80016a4:	2300      	movs	r3, #0
 80016a6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f103 0018 	add.w	r0, r3, #24
 80016ae:	f107 020a 	add.w	r2, r7, #10
 80016b2:	2302      	movs	r3, #2
 80016b4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80016b8:	f000 fbf4 	bl	8001ea4 <wm8994_write_reg>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e165      	b.n	8001992 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d149      	bne.n	8001760 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80016cc:	f640 430c 	movw	r3, #3084	; 0xc0c
 80016d0:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f103 0018 	add.w	r0, r3, #24
 80016d8:	f107 020a 	add.w	r2, r7, #10
 80016dc:	2302      	movs	r3, #2
 80016de:	2105      	movs	r1, #5
 80016e0:	f000 fbe0 	bl	8001ea4 <wm8994_write_reg>
 80016e4:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80016e6:	2300      	movs	r3, #0
 80016e8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f103 0018 	add.w	r0, r3, #24
 80016f0:	f107 020a 	add.w	r2, r7, #10
 80016f4:	2302      	movs	r3, #2
 80016f6:	f240 6101 	movw	r1, #1537	; 0x601
 80016fa:	f000 fbd3 	bl	8001ea4 <wm8994_write_reg>
 80016fe:	4602      	mov	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f103 0018 	add.w	r0, r3, #24
 800170c:	f107 020a 	add.w	r2, r7, #10
 8001710:	2302      	movs	r3, #2
 8001712:	f240 6102 	movw	r1, #1538	; 0x602
 8001716:	f000 fbc5 	bl	8001ea4 <wm8994_write_reg>
 800171a:	4602      	mov	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001722:	2302      	movs	r3, #2
 8001724:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f103 0018 	add.w	r0, r3, #24
 800172c:	f107 020a 	add.w	r2, r7, #10
 8001730:	2302      	movs	r3, #2
 8001732:	f240 6104 	movw	r1, #1540	; 0x604
 8001736:	f000 fbb5 	bl	8001ea4 <wm8994_write_reg>
 800173a:	4602      	mov	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f103 0018 	add.w	r0, r3, #24
 8001748:	f107 020a 	add.w	r2, r7, #10
 800174c:	2302      	movs	r3, #2
 800174e:	f240 6105 	movw	r1, #1541	; 0x605
 8001752:	f000 fba7 	bl	8001ea4 <wm8994_write_reg>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
      break;
 800175e:	e03b      	b.n	80017d8 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8001760:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001764:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f103 0018 	add.w	r0, r3, #24
 800176c:	f107 020a 	add.w	r2, r7, #10
 8001770:	2302      	movs	r3, #2
 8001772:	2105      	movs	r1, #5
 8001774:	f000 fb96 	bl	8001ea4 <wm8994_write_reg>
 8001778:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 800177a:	2301      	movs	r3, #1
 800177c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0018 	add.w	r0, r3, #24
 8001784:	f107 020a 	add.w	r2, r7, #10
 8001788:	2302      	movs	r3, #2
 800178a:	f240 6101 	movw	r1, #1537	; 0x601
 800178e:	f000 fb89 	bl	8001ea4 <wm8994_write_reg>
 8001792:	4602      	mov	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0018 	add.w	r0, r3, #24
 80017a0:	f107 020a 	add.w	r2, r7, #10
 80017a4:	2302      	movs	r3, #2
 80017a6:	f240 6102 	movw	r1, #1538	; 0x602
 80017aa:	f000 fb7b 	bl	8001ea4 <wm8994_write_reg>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 80017b6:	2302      	movs	r3, #2
 80017b8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f103 0018 	add.w	r0, r3, #24
 80017c0:	f107 020a 	add.w	r2, r7, #10
 80017c4:	2302      	movs	r3, #2
 80017c6:	f240 6104 	movw	r1, #1540	; 0x604
 80017ca:	f000 fb6b 	bl	8001ea4 <wm8994_write_reg>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
      break;
 80017d6:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 80017d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017dc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f103 0018 	add.w	r0, r3, #24
 80017e4:	f107 020a 	add.w	r2, r7, #10
 80017e8:	2302      	movs	r3, #2
 80017ea:	2103      	movs	r1, #3
 80017ec:	f000 fb5a 	bl	8001ea4 <wm8994_write_reg>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 80017f8:	2300      	movs	r3, #0
 80017fa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0018 	add.w	r0, r3, #24
 8001802:	f107 020a 	add.w	r2, r7, #10
 8001806:	2302      	movs	r3, #2
 8001808:	2122      	movs	r1, #34	; 0x22
 800180a:	f000 fb4b 	bl	8001ea4 <wm8994_write_reg>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 0018 	add.w	r0, r3, #24
 800181c:	f107 020a 	add.w	r2, r7, #10
 8001820:	2302      	movs	r3, #2
 8001822:	2123      	movs	r1, #35	; 0x23
 8001824:	f000 fb3e 	bl	8001ea4 <wm8994_write_reg>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f103 0018 	add.w	r0, r3, #24
 800183c:	f107 020a 	add.w	r2, r7, #10
 8001840:	2302      	movs	r3, #2
 8001842:	2136      	movs	r1, #54	; 0x36
 8001844:	f000 fb2e 	bl	8001ea4 <wm8994_write_reg>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8001850:	f243 0303 	movw	r3, #12291	; 0x3003
 8001854:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f103 0018 	add.w	r0, r3, #24
 800185c:	f107 020a 	add.w	r2, r7, #10
 8001860:	2302      	movs	r3, #2
 8001862:	2101      	movs	r1, #1
 8001864:	f000 fb1e 	bl	8001ea4 <wm8994_write_reg>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8001870:	2305      	movs	r3, #5
 8001872:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f103 0018 	add.w	r0, r3, #24
 800187a:	f107 020a 	add.w	r2, r7, #10
 800187e:	2302      	movs	r3, #2
 8001880:	2151      	movs	r1, #81	; 0x51
 8001882:	f000 fb0f 	bl	8001ea4 <wm8994_write_reg>
 8001886:	4602      	mov	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 800188e:	f243 3303 	movw	r3, #13059	; 0x3303
 8001892:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f103 0018 	add.w	r0, r3, #24
 800189a:	f107 020a 	add.w	r2, r7, #10
 800189e:	2302      	movs	r3, #2
 80018a0:	2101      	movs	r1, #1
 80018a2:	f000 faff 	bl	8001ea4 <wm8994_write_reg>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 80018ae:	2322      	movs	r3, #34	; 0x22
 80018b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0018 	add.w	r0, r3, #24
 80018b8:	f107 020a 	add.w	r2, r7, #10
 80018bc:	2302      	movs	r3, #2
 80018be:	2160      	movs	r1, #96	; 0x60
 80018c0:	f000 faf0 	bl	8001ea4 <wm8994_write_reg>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 80018cc:	f649 7325 	movw	r3, #40741	; 0x9f25
 80018d0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f103 0018 	add.w	r0, r3, #24
 80018d8:	f107 020a 	add.w	r2, r7, #10
 80018dc:	2302      	movs	r3, #2
 80018de:	214c      	movs	r1, #76	; 0x4c
 80018e0:	f000 fae0 	bl	8001ea4 <wm8994_write_reg>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 80018ec:	210f      	movs	r1, #15
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa60 	bl	8001db4 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 80018f4:	2301      	movs	r3, #1
 80018f6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f103 0018 	add.w	r0, r3, #24
 80018fe:	f107 020a 	add.w	r2, r7, #10
 8001902:	2302      	movs	r3, #2
 8001904:	212d      	movs	r1, #45	; 0x2d
 8001906:	f000 facd 	bl	8001ea4 <wm8994_write_reg>
 800190a:	4602      	mov	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f103 0018 	add.w	r0, r3, #24
 8001918:	f107 020a 	add.w	r2, r7, #10
 800191c:	2302      	movs	r3, #2
 800191e:	212e      	movs	r1, #46	; 0x2e
 8001920:	f000 fac0 	bl	8001ea4 <wm8994_write_reg>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 800192c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001930:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f103 0018 	add.w	r0, r3, #24
 8001938:	f107 020a 	add.w	r2, r7, #10
 800193c:	2302      	movs	r3, #2
 800193e:	2103      	movs	r1, #3
 8001940:	f000 fab0 	bl	8001ea4 <wm8994_write_reg>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 800194c:	2333      	movs	r3, #51	; 0x33
 800194e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f103 0018 	add.w	r0, r3, #24
 8001956:	f107 020a 	add.w	r2, r7, #10
 800195a:	2302      	movs	r3, #2
 800195c:	2154      	movs	r1, #84	; 0x54
 800195e:	f000 faa1 	bl	8001ea4 <wm8994_write_reg>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 800196a:	f240 1101 	movw	r1, #257	; 0x101
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa20 	bl	8001db4 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8001974:	23ee      	movs	r3, #238	; 0xee
 8001976:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f103 0018 	add.w	r0, r3, #24
 800197e:	f107 020a 	add.w	r2, r7, #10
 8001982:	2302      	movs	r3, #2
 8001984:	2160      	movs	r1, #96	; 0x60
 8001986:	f000 fa8d 	bl	8001ea4 <wm8994_write_reg>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3318      	adds	r3, #24
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	b292      	uxth	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fb4b 	bl	800205c <wm8994_aif1_control1_wl>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3318      	adds	r3, #24
 80019f2:	f107 020a 	add.w	r2, r7, #10
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fb5f 	bl	80020bc <wm8994_aif1_control1_wl_r>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e021      	b.n	8001a50 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d81a      	bhi.n	8001a48 <WM8994_GetResolution+0x6c>
 8001a12:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <WM8994_GetResolution+0x3c>)
 8001a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a31 	.word	0x08001a31
 8001a20:	08001a39 	.word	0x08001a39
 8001a24:	08001a41 	.word	0x08001a41
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
      break;
 8001a2e:	e00f      	b.n	8001a50 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
      break;
 8001a36:	e00b      	b.n	8001a50 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
      break;
 8001a3e:	e007      	b.n	8001a50 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2203      	movs	r2, #3
 8001a44:	601a      	str	r2, [r3, #0]
      break; 
 8001a46:	e003      	b.n	8001a50 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
      break;
 8001a4e:	bf00      	nop
    }
  }
  
  return ret;
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop

08001a5c <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	b292      	uxth	r2, r2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fa9f 	bl	8001fb8 <wm8994_aif1_control1_fmt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a84:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	f107 020a 	add.w	r2, r7, #10
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fab5 	bl	8002018 <wm8994_aif1_control1_fmt_r>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e003      	b.n	8001ac4 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8001abc:	897b      	ldrh	r3, [r7, #10]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <WM8994_SetFrequency+0x164>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d05d      	beq.n	8001b9e <WM8994_SetFrequency+0xce>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	4a53      	ldr	r2, [pc, #332]	; (8001c34 <WM8994_SetFrequency+0x164>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f200 8091 	bhi.w	8001c0e <WM8994_SetFrequency+0x13e>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d07d      	beq.n	8001bf2 <WM8994_SetFrequency+0x122>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001afc:	4293      	cmp	r3, r2
 8001afe:	f200 8086 	bhi.w	8001c0e <WM8994_SetFrequency+0x13e>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001b08:	d03b      	beq.n	8001b82 <WM8994_SetFrequency+0xb2>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001b10:	d87d      	bhi.n	8001c0e <WM8994_SetFrequency+0x13e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f245 6222 	movw	r2, #22050	; 0x5622
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d05c      	beq.n	8001bd6 <WM8994_SetFrequency+0x106>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d873      	bhi.n	8001c0e <WM8994_SetFrequency+0x13e>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001b2c:	d01b      	beq.n	8001b66 <WM8994_SetFrequency+0x96>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001b34:	d86b      	bhi.n	8001c0e <WM8994_SetFrequency+0x13e>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001b3c:	d005      	beq.n	8001b4a <WM8994_SetFrequency+0x7a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d038      	beq.n	8001bba <WM8994_SetFrequency+0xea>
 8001b48:	e061      	b.n	8001c0e <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 0018 	add.w	r0, r3, #24
 8001b54:	f107 020a 	add.w	r2, r7, #10
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b5e:	f000 f9a1 	bl	8001ea4 <wm8994_write_reg>
 8001b62:	60f8      	str	r0, [r7, #12]
    break;
 8001b64:	e061      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001b66:	2333      	movs	r3, #51	; 0x33
 8001b68:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 0018 	add.w	r0, r3, #24
 8001b70:	f107 020a 	add.w	r2, r7, #10
 8001b74:	2302      	movs	r3, #2
 8001b76:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b7a:	f000 f993 	bl	8001ea4 <wm8994_write_reg>
 8001b7e:	60f8      	str	r0, [r7, #12]
    break;
 8001b80:	e053      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001b82:	2363      	movs	r3, #99	; 0x63
 8001b84:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 0018 	add.w	r0, r3, #24
 8001b8c:	f107 020a 	add.w	r2, r7, #10
 8001b90:	2302      	movs	r3, #2
 8001b92:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b96:	f000 f985 	bl	8001ea4 <wm8994_write_reg>
 8001b9a:	60f8      	str	r0, [r7, #12]
    break;
 8001b9c:	e045      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001b9e:	23a3      	movs	r3, #163	; 0xa3
 8001ba0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0018 	add.w	r0, r3, #24
 8001ba8:	f107 020a 	add.w	r2, r7, #10
 8001bac:	2302      	movs	r3, #2
 8001bae:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001bb2:	f000 f977 	bl	8001ea4 <wm8994_write_reg>
 8001bb6:	60f8      	str	r0, [r7, #12]
    break;
 8001bb8:	e037      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8001bba:	2313      	movs	r3, #19
 8001bbc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0018 	add.w	r0, r3, #24
 8001bc4:	f107 020a 	add.w	r2, r7, #10
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001bce:	f000 f969 	bl	8001ea4 <wm8994_write_reg>
 8001bd2:	60f8      	str	r0, [r7, #12]
    break;
 8001bd4:	e029      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001bd6:	2343      	movs	r3, #67	; 0x43
 8001bd8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f103 0018 	add.w	r0, r3, #24
 8001be0:	f107 020a 	add.w	r2, r7, #10
 8001be4:	2302      	movs	r3, #2
 8001be6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001bea:	f000 f95b 	bl	8001ea4 <wm8994_write_reg>
 8001bee:	60f8      	str	r0, [r7, #12]
    break;
 8001bf0:	e01b      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8001bf2:	2373      	movs	r3, #115	; 0x73
 8001bf4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 0018 	add.w	r0, r3, #24
 8001bfc:	f107 020a 	add.w	r2, r7, #10
 8001c00:	2302      	movs	r3, #2
 8001c02:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001c06:	f000 f94d 	bl	8001ea4 <wm8994_write_reg>
 8001c0a:	60f8      	str	r0, [r7, #12]
    break; 
 8001c0c:	e00d      	b.n	8001c2a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001c0e:	2383      	movs	r3, #131	; 0x83
 8001c10:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 0018 	add.w	r0, r3, #24
 8001c18:	f107 020a 	add.w	r2, r7, #10
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001c22:	f000 f93f 	bl	8001ea4 <wm8994_write_reg>
 8001c26:	60f8      	str	r0, [r7, #12]
    break; 
 8001c28:	bf00      	nop
  }
  
  return ret;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	00017700 	.word	0x00017700

08001c38 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	f107 020a 	add.w	r2, r7, #10
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f98d 	bl	8001f74 <wm8994_aif1_sr_r>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e043      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8001c68:	897b      	ldrh	r3, [r7, #10]
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d83f      	bhi.n	8001cee <WM8994_GetFrequency+0xb6>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <WM8994_GetFrequency+0x3c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001ca1 	.word	0x08001ca1
 8001c78:	08001cab 	.word	0x08001cab
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cb5 	.word	0x08001cb5
 8001c84:	08001cbf 	.word	0x08001cbf
 8001c88:	08001cef 	.word	0x08001cef
 8001c8c:	08001cc9 	.word	0x08001cc9
 8001c90:	08001cd3 	.word	0x08001cd3
 8001c94:	08001cdd 	.word	0x08001cdd
 8001c98:	08001cef 	.word	0x08001cef
 8001c9c:	08001ce7 	.word	0x08001ce7
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ca6:	601a      	str	r2, [r3, #0]
      break;
 8001ca8:	e022      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001cb0:	601a      	str	r2, [r3, #0]
      break;    
 8001cb2:	e01d      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001cba:	601a      	str	r2, [r3, #0]
      break;
 8001cbc:	e018      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f245 6222 	movw	r2, #22050	; 0x5622
 8001cc4:	601a      	str	r2, [r3, #0]
      break; 
 8001cc6:	e013      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001cce:	601a      	str	r2, [r3, #0]
      break; 
 8001cd0:	e00e      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001cd8:	601a      	str	r2, [r3, #0]
      break;    
 8001cda:	e009      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001ce2:	601a      	str	r2, [r3, #0]
      break;
 8001ce4:	e004      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <WM8994_GetFrequency+0xc4>)
 8001cea:	601a      	str	r2, [r3, #0]
      break;    
 8001cec:	e000      	b.n	8001cf0 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8001cee:	bf00      	nop
    }
  }
  
  return ret;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00017700 	.word	0x00017700

08001d00 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3318      	adds	r3, #24
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f8ee 	bl	8001ef4 <wm8994_sw_reset_w>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d22:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d103      	bne.n	8001d48 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e02c      	b.n	8001da2 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	891a      	ldrh	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <WM8994_RegisterBusIO+0x7c>)
 8001d7c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <WM8994_RegisterBusIO+0x80>)
 8001d82:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4798      	blx	r3
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	e002      	b.n	8001da2 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	08001de9 	.word	0x08001de9
 8001db0:	08001e1b 	.word	0x08001e1b

08001db4 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001dc8:	bf00      	nop
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d8f5      	bhi.n	8001dca <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	461a      	mov	r2, r3
 8001df4:	460b      	mov	r3, r1
 8001df6:	817b      	strh	r3, [r7, #10]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	691c      	ldr	r4, [r3, #16]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	8918      	ldrh	r0, [r3, #8]
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	47a0      	blx	r4
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}

08001e1a <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001e1a:	b590      	push	{r4, r7, lr}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	461a      	mov	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	817b      	strh	r3, [r7, #10]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	68dc      	ldr	r4, [r3, #12]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	8918      	ldrh	r0, [r3, #8]
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	47a0      	blx	r4
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}

08001e4c <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	817b      	strh	r3, [r7, #10]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685c      	ldr	r4, [r3, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6898      	ldr	r0, [r3, #8]
 8001e68:	893b      	ldrh	r3, [r7, #8]
 8001e6a:	8979      	ldrh	r1, [r7, #10]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	47a0      	blx	r4
 8001e70:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db10      	blt.n	8001e9a <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8a7a      	ldrh	r2, [r7, #18]
 8001e98:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8001e9a:	697b      	ldr	r3, [r7, #20]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}

08001ea4 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	8afb      	ldrh	r3, [r7, #22]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6898      	ldr	r0, [r3, #8]
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	f107 0216 	add.w	r2, r7, #22
 8001ee6:	8979      	ldrh	r1, [r7, #10]
 8001ee8:	47a0      	blx	r4
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8001f00:	1cba      	adds	r2, r7, #2
 8001f02:	2302      	movs	r3, #2
 8001f04:	2100      	movs	r1, #0
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffcc 	bl	8001ea4 <wm8994_write_reg>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8001f20:	2302      	movs	r3, #2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff90 	bl	8001e4c <wm8994_read_reg>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8001f40:	2302      	movs	r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	211c      	movs	r1, #28
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff80 	bl	8001e4c <wm8994_read_reg>
 8001f4c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8001f7e:	2302      	movs	r3, #2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff60 	bl	8001e4c <wm8994_read_reg>
 8001f8c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10c      	bne.n	8001fae <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001fc8:	f107 020a 	add.w	r2, r7, #10
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff3a 	bl	8001e4c <wm8994_read_reg>
 8001fd8:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d116      	bne.n	800200e <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8001fe0:	897b      	ldrh	r3, [r7, #10]
 8001fe2:	f023 0318 	bic.w	r3, r3, #24
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001ffc:	f107 020a 	add.w	r2, r7, #10
 8002000:	2302      	movs	r3, #2
 8002002:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff4c 	bl	8001ea4 <wm8994_write_reg>
 800200c:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8002022:	2302      	movs	r3, #2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	f44f 7140 	mov.w	r1, #768	; 0x300
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff0e 	bl	8001e4c <wm8994_read_reg>
 8002030:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10c      	bne.n	8002052 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f003 0318 	and.w	r3, r3, #24
 8002040:	b29a      	uxth	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	b29a      	uxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800206c:	f107 020a 	add.w	r2, r7, #10
 8002070:	2302      	movs	r3, #2
 8002072:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fee8 	bl	8001e4c <wm8994_read_reg>
 800207c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d116      	bne.n	80020b2 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800208a:	b29b      	uxth	r3, r3
 800208c:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	015b      	lsls	r3, r3, #5
 8002092:	b21a      	sxth	r2, r3
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b21b      	sxth	r3, r3
 800209c:	b29b      	uxth	r3, r3
 800209e:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80020a0:	f107 020a 	add.w	r2, r7, #10
 80020a4:	2302      	movs	r3, #2
 80020a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fefa 	bl	8001ea4 <wm8994_write_reg>
 80020b0:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80020c6:	2302      	movs	r3, #2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	f44f 7140 	mov.w	r1, #768	; 0x300
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff febc 	bl	8001e4c <wm8994_read_reg>
 80020d4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10c      	bne.n	80020f6 <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002110:	f107 020a 	add.w	r2, r7, #10
 8002114:	2302      	movs	r3, #2
 8002116:	f44f 7140 	mov.w	r1, #768	; 0x300
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe96 	bl	8001e4c <wm8994_read_reg>
 8002120:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d116      	bne.n	8002156 <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 8002128:	897b      	ldrh	r3, [r7, #10]
 800212a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800212e:	b29b      	uxth	r3, r3
 8002130:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	039b      	lsls	r3, r3, #14
 8002136:	b21a      	sxth	r2, r3
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002144:	f107 020a 	add.w	r2, r7, #10
 8002148:	2302      	movs	r3, #2
 800214a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fea8 	bl	8001ea4 <wm8994_write_reg>
 8002154:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 800216a:	2302      	movs	r3, #2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fe6a 	bl	8001e4c <wm8994_read_reg>
 8002178:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	b29a      	uxth	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	881a      	ldrh	r2, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10f      	bne.n	80021d4 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <BSP_LED_Init+0xb0>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ba:	4a25      	ldr	r2, [pc, #148]	; (8002250 <BSP_LED_Init+0xb0>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <BSP_LED_Init+0xb0>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	e015      	b.n	8002200 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10f      	bne.n	80021fa <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <BSP_LED_Init+0xb0>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <BSP_LED_Init+0xb0>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <BSP_LED_Init+0xb0>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	e002      	b.n	8002200 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021fa:	f06f 0301 	mvn.w	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <BSP_LED_Init+0xb4>)
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <BSP_LED_Init+0xb8>)
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	f107 0210 	add.w	r2, r7, #16
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f004 fb61 	bl	80068ec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <BSP_LED_Init+0xb8>)
 800222e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <BSP_LED_Init+0xb4>)
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	b29b      	uxth	r3, r3
 800223c:	2201      	movs	r2, #1
 800223e:	4619      	mov	r1, r3
 8002240:	f004 fdfe 	bl	8006e40 <HAL_GPIO_WritePin>

  return ret;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002246:	4618      	mov	r0, r3
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	58024400 	.word	0x58024400
 8002254:	0800fb00 	.word	0x0800fb00
 8002258:	2400044c 	.word	0x2400044c

0800225c <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <BSP_LED_On+0x34>)
 800226e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <BSP_LED_On+0x38>)
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	b29b      	uxth	r3, r3
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	f004 fdde 	bl	8006e40 <HAL_GPIO_WritePin>
  return ret;
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2400044c 	.word	0x2400044c
 8002294:	0800fb00 	.word	0x0800fb00

08002298 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <BSP_LED_Off+0x34>)
 80022aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <BSP_LED_Off+0x38>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	4619      	mov	r1, r3
 80022bc:	f004 fdc0 	bl	8006e40 <HAL_GPIO_WritePin>
  return ret;
 80022c0:	68fb      	ldr	r3, [r7, #12]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2400044c 	.word	0x2400044c
 80022d0:	0800fb00 	.word	0x0800fb00

080022d4 <BSP_AUDIO_OUT_Init>:
  * @param  Instance   AUDIO OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit  AUDIO OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b094      	sub	sp, #80	; 0x50
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80022de:	2300      	movs	r3, #0
 80022e0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022e8:	f06f 0301 	mvn.w	r3, #1
 80022ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022ee:	e0f8      	b.n	80024e2 <BSP_AUDIO_OUT_Init+0x20e>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	487d      	ldr	r0, [pc, #500]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4403      	add	r3, r0
 8002302:	3304      	adds	r3, #4
 8002304:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 8002306:	4979      	ldr	r1, [pc, #484]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	4873      	ldr	r0, [pc, #460]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4403      	add	r3, r0
 800232a:	3308      	adds	r3, #8
 800232c:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	486e      	ldr	r0, [pc, #440]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4403      	add	r3, r0
 8002340:	330c      	adds	r3, #12
 8002342:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	4868      	ldr	r0, [pc, #416]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4403      	add	r3, r0
 8002356:	3314      	adds	r3, #20
 8002358:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6919      	ldr	r1, [r3, #16]
 800235e:	4863      	ldr	r0, [pc, #396]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4403      	add	r3, r0
 800236c:	3310      	adds	r3, #16
 800236e:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 8002370:	495e      	ldr	r1, [pc, #376]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	331c      	adds	r3, #28
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET)
 8002384:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <BSP_AUDIO_OUT_Init+0x21c>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <BSP_AUDIO_OUT_Init+0xc8>
    {
      if(WM8994_Probe() != BSP_ERROR_NONE)
 800238c:	f000 fa1a 	bl	80027c4 <WM8994_Probe>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <BSP_AUDIO_OUT_Init+0xc8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002396:	f06f 0304 	mvn.w	r3, #4
 800239a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
#endif
    if(ret == BSP_ERROR_NONE)
 800239c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 809f 	bne.w	80024e2 <BSP_AUDIO_OUT_Init+0x20e>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4852      	ldr	r0, [pc, #328]	; (80024f4 <BSP_AUDIO_OUT_Init+0x220>)
 80023ac:	f000 f93c 	bl	8002628 <MX_SAI1_ClockConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <BSP_AUDIO_OUT_Init+0xea>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 80023b6:	f06f 0308 	mvn.w	r3, #8
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023bc:	e005      	b.n	80023ca <BSP_AUDIO_OUT_Init+0xf6>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80023be:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <BSP_AUDIO_OUT_Init+0x220>)
 80023c0:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <BSP_AUDIO_OUT_Init+0x224>)
 80023c2:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_out_sai);
 80023c4:	484b      	ldr	r0, [pc, #300]	; (80024f4 <BSP_AUDIO_OUT_Init+0x220>)
 80023c6:	f000 fa57 	bl	8002878 <SAI_MspInit>
#endif
      }


      if(ret == BSP_ERROR_NONE)
 80023ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f040 8088 	bne.w	80024e2 <BSP_AUDIO_OUT_Init+0x20e>
      {
        MX_SAI_Config mx_sai_config;

        /* Prepare haudio_out_sai handle */
        mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]
        mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
        mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80023dc:	2301      	movs	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
        mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <BSP_AUDIO_OUT_Init+0x11a>
 80023e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ec:	e000      	b.n	80023f0 <BSP_AUDIO_OUT_Init+0x11c>
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
        if (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d106      	bne.n	8002408 <BSP_AUDIO_OUT_Init+0x134>
        {
          mx_sai_config.DataSize          = SAI_DATASIZE_32;
 80023fa:	23e0      	movs	r3, #224	; 0xe0
 80023fc:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 8002402:	2340      	movs	r3, #64	; 0x40
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
 8002406:	e005      	b.n	8002414 <BSP_AUDIO_OUT_Init+0x140>
        }
        else
        {
          mx_sai_config.DataSize          = SAI_DATASIZE_16;
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 64;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_sai_config.ActiveFrameLength = 32;
 8002410:	2320      	movs	r3, #32
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
        }

        mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 8002414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
        mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
        mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
        switch(AudioInit->Device)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <BSP_AUDIO_OUT_Init+0x166>
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <BSP_AUDIO_OUT_Init+0x16c>
 800242e:	3b03      	subs	r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d805      	bhi.n	8002440 <BSP_AUDIO_OUT_Init+0x16c>
        {
        case AUDIO_OUT_DEVICE_SPK_HP:
        case AUDIO_OUT_DEVICE_AUTO:
          mx_sai_config.SlotActive         = CODEC_AUDIOFRAME_SLOT_0123;
 8002434:	230f      	movs	r3, #15
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002438:	e005      	b.n	8002446 <BSP_AUDIO_OUT_Init+0x172>
        case AUDIO_OUT_DEVICE_SPEAKER:
          mx_sai_config.SlotActive         = CODEC_AUDIOFRAME_SLOT_13;
 800243a:	230a      	movs	r3, #10
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800243e:	e002      	b.n	8002446 <BSP_AUDIO_OUT_Init+0x172>
        case AUDIO_OUT_DEVICE_HEADPHONE:
        default:
          mx_sai_config.SlotActive         = CODEC_AUDIOFRAME_SLOT_02;
 8002440:	2305      	movs	r3, #5
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8002444:	bf00      	nop
        }

        /* SAI peripheral initialization: this __weak function can be redefined by the application  */
        if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	4829      	ldr	r0, [pc, #164]	; (80024f4 <BSP_AUDIO_OUT_Init+0x220>)
 800244e:	f000 f85b 	bl	8002508 <MX_SAI1_Block_B_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <BSP_AUDIO_OUT_Init+0x18a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8002458:	f06f 0303 	mvn.w	r3, #3
 800245c:	64fb      	str	r3, [r7, #76]	; 0x4c
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#endif

        if(ret == BSP_ERROR_NONE)
 800245e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d13e      	bne.n	80024e2 <BSP_AUDIO_OUT_Init+0x20e>
        {
#if (USE_AUDIO_CODEC_WM8994 == 1)
          WM8994_Init_t codec_init;
          /* Fill codec_init structure */
          codec_init.InputDevice  = (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET) ? WM8994_IN_NONE : WM8994_IN_LINE1;
 8002464:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <BSP_AUDIO_OUT_Init+0x21c>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <BSP_AUDIO_OUT_Init+0x19c>
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <BSP_AUDIO_OUT_Init+0x19e>
 8002470:	2303      	movs	r3, #3
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
          codec_init.OutputDevice = WM8994_OUT_HEADPHONE;
 8002474:	2302      	movs	r3, #2
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
          codec_init.Frequency    = AudioInit->SampleRate;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
          codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b20      	cmp	r3, #32
 8002484:	d101      	bne.n	800248a <BSP_AUDIO_OUT_Init+0x1b6>
 8002486:	2303      	movs	r3, #3
 8002488:	e000      	b.n	800248c <BSP_AUDIO_OUT_Init+0x1b8>
 800248a:	2300      	movs	r3, #0
 800248c:	647b      	str	r3, [r7, #68]	; 0x44
          /* Convert volume before sending to the codec */
          codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d80a      	bhi.n	80024ac <BSP_AUDIO_OUT_Init+0x1d8>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	4613      	mov	r3, r2
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <BSP_AUDIO_OUT_Init+0x228>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e000      	b.n	80024ae <BSP_AUDIO_OUT_Init+0x1da>
 80024ac:	233f      	movs	r3, #63	; 0x3f
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
          /* Initialize the codec internal registers */
          if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <BSP_AUDIO_OUT_Init+0x22c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <BSP_AUDIO_OUT_Init+0x230>)
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024be:	4610      	mov	r0, r2
 80024c0:	4798      	blx	r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da02      	bge.n	80024ce <BSP_AUDIO_OUT_Init+0x1fa>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80024c8:	f06f 0304 	mvn.w	r3, #4
 80024cc:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
#endif
          /* Update BSP AUDIO OUT state */
          Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 80024ce:	4907      	ldr	r1, [pc, #28]	; (80024ec <BSP_AUDIO_OUT_Init+0x218>)
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	331c      	adds	r3, #28
 80024de:	2202      	movs	r2, #2
 80024e0:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }

  return ret;
 80024e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3750      	adds	r7, #80	; 0x50
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2401922c 	.word	0x2401922c
 80024f0:	24019250 	.word	0x24019250
 80024f4:	24008514 	.word	0x24008514
 80024f8:	40015824 	.word	0x40015824
 80024fc:	51eb851f 	.word	0x51eb851f
 8002500:	240086e8 	.word	0x240086e8
 8002504:	24008510 	.word	0x24008510

08002508 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002524:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002596:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b18      	cmp	r3, #24
 80025d8:	d003      	beq.n	80025e2 <MX_SAI1_Block_B_Init+0xda>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d103      	bne.n	80025ea <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80025e8:	e002      	b.n	80025f0 <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f009 fab6 	bl	800bb70 <HAL_SAI_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800261c:	601a      	str	r2, [r3, #0]

  return ret;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0b0      	sub	sp, #192	; 0xc0
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4618      	mov	r0, r3
 8002638:	f007 ff82 	bl	800a540 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <MX_SAI1_ClockConfig+0x32>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f245 6222 	movw	r2, #22050	; 0x5622
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <MX_SAI1_ClockConfig+0x32>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002656:	4293      	cmp	r3, r2
 8002658:	d104      	bne.n	8002664 <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 800265a:	2324      	movs	r3, #36	; 0x24
 800265c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 800265e:	2324      	movs	r3, #36	; 0x24
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e003      	b.n	800266c <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 8002664:	2308      	movs	r3, #8
 8002666:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 8002668:	2308      	movs	r3, #8
 800266a:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 800266c:	2350      	movs	r3, #80	; 0x50
 800266e:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002674:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002676:	2301      	movs	r3, #1
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 800267a:	2302      	movs	r3, #2
 800267c:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 800267e:	2305      	movs	r3, #5
 8002680:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002686:	2320      	movs	r3, #32
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	4618      	mov	r0, r3
 8002694:	f007 f85a 	bl	800974c <HAL_RCCEx_PeriphCLKConfig>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	37c0      	adds	r7, #192	; 0xc0
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <BSP_AUDIO_OUT_Play+0x36>
 80026ba:	492d      	ldr	r1, [pc, #180]	; (8002770 <BSP_AUDIO_OUT_Play+0xcc>)
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	330c      	adds	r3, #12
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d303      	bcc.n	80026e2 <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80026da:	f06f 0301 	mvn.w	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e040      	b.n	8002764 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 80026e2:	4923      	ldr	r1, [pc, #140]	; (8002770 <BSP_AUDIO_OUT_Play+0xcc>)
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	331c      	adds	r3, #28
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d003      	beq.n	8002700 <BSP_AUDIO_OUT_Play+0x5c>
  {
    ret = BSP_ERROR_BUSY;
 80026f8:	f06f 0302 	mvn.w	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e031      	b.n	8002764 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8002700:	491b      	ldr	r1, [pc, #108]	; (8002770 <BSP_AUDIO_OUT_Play+0xcc>)
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	330c      	adds	r3, #12
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	08db      	lsrs	r3, r3, #3
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	4814      	ldr	r0, [pc, #80]	; (8002774 <BSP_AUDIO_OUT_Play+0xd0>)
 8002722:	f009 fc39 	bl	800bf98 <HAL_SAI_Transmit_DMA>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <BSP_AUDIO_OUT_Play+0x90>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800272c:	f06f 0303 	mvn.w	r3, #3
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e017      	b.n	8002764 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if(Audio_Drv->Play(Audio_CompObj) < 0)
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <BSP_AUDIO_OUT_Play+0xd4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <BSP_AUDIO_OUT_Play+0xd8>)
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4610      	mov	r0, r2
 8002740:	4798      	blx	r3
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	da03      	bge.n	8002750 <BSP_AUDIO_OUT_Play+0xac>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002748:	f06f 0304 	mvn.w	r3, #4
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e009      	b.n	8002764 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8002750:	4907      	ldr	r1, [pc, #28]	; (8002770 <BSP_AUDIO_OUT_Play+0xcc>)
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	331c      	adds	r3, #28
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8002764:	697b      	ldr	r3, [r7, #20]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2401922c 	.word	0x2401922c
 8002774:	24008514 	.word	0x24008514
 8002778:	240086e8 	.word	0x240086e8
 800277c:	24008510 	.word	0x24008510

08002780 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8002788:	2000      	movs	r0, #0
 800278a:	f00a fd09 	bl	800d1a0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_SAI_ErrorCallback+0x28>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d103      	bne.n	80027b2 <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f00a fd10 	bl	800d1d0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80027b0:	e002      	b.n	80027b8 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 faef 	bl	8002d96 <BSP_AUDIO_IN_Error_CallBack>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40015824 	.word	0x40015824

080027c4 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 80027ce:	2334      	movs	r3, #52	; 0x34
 80027d0:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <WM8994_Probe+0x90>)
 80027d4:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <WM8994_Probe+0x94>)
 80027d8:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <WM8994_Probe+0x98>)
 80027dc:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <WM8994_Probe+0x9c>)
 80027e0:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <WM8994_Probe+0xa0>)
 80027e4:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	481f      	ldr	r0, [pc, #124]	; (8002868 <WM8994_Probe+0xa4>)
 80027ec:	f7ff faa0 	bl	8001d30 <WM8994_RegisterBusIO>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80027f6:	f06f 0307 	mvn.w	r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e024      	b.n	8002848 <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 80027fe:	481a      	ldr	r0, [pc, #104]	; (8002868 <WM8994_Probe+0xa4>)
 8002800:	f7ff fa7e 	bl	8001d00 <WM8994_Reset>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800280a:	f06f 0304 	mvn.w	r3, #4
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e01a      	b.n	8002848 <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 8002812:	463b      	mov	r3, r7
 8002814:	4619      	mov	r1, r3
 8002816:	4814      	ldr	r0, [pc, #80]	; (8002868 <WM8994_Probe+0xa4>)
 8002818:	f7fe fc6d 	bl	80010f6 <WM8994_ReadID>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002822:	f06f 0304 	mvn.w	r3, #4
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	e00e      	b.n	8002848 <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f648 1294 	movw	r2, #35220	; 0x8994
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002834:	f06f 0306 	mvn.w	r3, #6
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e005      	b.n	8002848 <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <WM8994_Probe+0xa8>)
 800283e:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <WM8994_Probe+0xac>)
 8002840:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <WM8994_Probe+0xb0>)
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <WM8994_Probe+0xa4>)
 8002846:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8002848:	69fb      	ldr	r3, [r7, #28]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	08002dad 	.word	0x08002dad
 8002858:	08002e21 	.word	0x08002e21
 800285c:	08002f51 	.word	0x08002f51
 8002860:	08002ef5 	.word	0x08002ef5
 8002864:	08002fad 	.word	0x08002fad
 8002868:	240086ec 	.word	0x240086ec
 800286c:	240086e8 	.word	0x240086e8
 8002870:	24000400 	.word	0x24000400
 8002874:	24008510 	.word	0x24008510

08002878 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b096      	sub	sp, #88	; 0x58
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002880:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <SAI_MspInit+0x190>)
 8002882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002886:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <SAI_MspInit+0x190>)
 8002888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800288c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002890:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <SAI_MspInit+0x190>)
 8002892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
 800289c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800289e:	4b5a      	ldr	r3, [pc, #360]	; (8002a08 <SAI_MspInit+0x190>)
 80028a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <SAI_MspInit+0x190>)
 80028a6:	f043 0320 	orr.w	r3, r3, #32
 80028aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ae:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <SAI_MspInit+0x190>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 80028bc:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <SAI_MspInit+0x190>)
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c2:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <SAI_MspInit+0x190>)
 80028c4:	f043 0320 	orr.w	r3, r3, #32
 80028c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028cc:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <SAI_MspInit+0x190>)
 80028ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <SAI_MspInit+0x190>)
 80028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <SAI_MspInit+0x190>)
 80028e2:	f043 0320 	orr.w	r3, r3, #32
 80028e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <SAI_MspInit+0x190>)
 80028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <SAI_MspInit+0x190>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fe:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <SAI_MspInit+0x190>)
 8002900:	f043 0320 	orr.w	r3, r3, #32
 8002904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002908:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <SAI_MspInit+0x190>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8002928:	2306      	movs	r3, #6
 800292a:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800292c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002930:	4619      	mov	r1, r3
 8002932:	4836      	ldr	r0, [pc, #216]	; (8002a0c <SAI_MspInit+0x194>)
 8002934:	f003 ffda 	bl	80068ec <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800293e:	2306      	movs	r3, #6
 8002940:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 8002942:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002946:	4619      	mov	r1, r3
 8002948:	4830      	ldr	r0, [pc, #192]	; (8002a0c <SAI_MspInit+0x194>)
 800294a:	f003 ffcf 	bl	80068ec <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800294e:	2340      	movs	r3, #64	; 0x40
 8002950:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 8002952:	2306      	movs	r3, #6
 8002954:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002956:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800295a:	4619      	mov	r1, r3
 800295c:	482b      	ldr	r0, [pc, #172]	; (8002a0c <SAI_MspInit+0x194>)
 800295e:	f003 ffc5 	bl	80068ec <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <SAI_MspInit+0x198>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d01e      	beq.n	80029aa <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 800296c:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <SAI_MspInit+0x19c>)
 800296e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d018      	beq.n	80029aa <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <SAI_MspInit+0x190>)
 800297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297e:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <SAI_MspInit+0x190>)
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <SAI_MspInit+0x190>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 800299a:	2306      	movs	r3, #6
 800299c:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800299e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029a2:	4619      	mov	r1, r3
 80029a4:	4819      	ldr	r0, [pc, #100]	; (8002a0c <SAI_MspInit+0x194>)
 80029a6:	f003 ffa1 	bl	80068ec <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <SAI_MspInit+0x1a0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d16b      	bne.n	8002a8c <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <SAI_MspInit+0x190>)
 80029b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <SAI_MspInit+0x190>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029c4:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <SAI_MspInit+0x190>)
 80029c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <SAI_MspInit+0x1a4>)
 80029d4:	2258      	movs	r2, #88	; 0x58
 80029d6:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <SAI_MspInit+0x1a4>)
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <SAI_MspInit+0x1a4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <SAI_MspInit+0x1a4>)
 80029e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ea:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <SAI_MspInit+0x1a8>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d117      	bne.n	8002a24 <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <SAI_MspInit+0x1a4>)
 80029f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fa:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <SAI_MspInit+0x1a4>)
 80029fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	e016      	b.n	8002a34 <SAI_MspInit+0x1bc>
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58021400 	.word	0x58021400
 8002a10:	58005404 	.word	0x58005404
 8002a14:	240085b0 	.word	0x240085b0
 8002a18:	40015824 	.word	0x40015824
 8002a1c:	24008714 	.word	0x24008714
 8002a20:	2401922c 	.word	0x2401922c
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a2a:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a2c:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a32:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002a34:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a42:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a46:	2204      	movs	r2, #4
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a50:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8002a5c:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a5e:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <SAI_MspInit+0x300>)
 8002a60:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a6a:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8002a70:	4840      	ldr	r0, [pc, #256]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a72:	f001 fc93 	bl	800439c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 8002a76:	483f      	ldr	r0, [pc, #252]	; (8002b74 <SAI_MspInit+0x2fc>)
 8002a78:	f001 f936 	bl	8003ce8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	210e      	movs	r1, #14
 8002a80:	2045      	movs	r0, #69	; 0x45
 8002a82:	f000 ff88 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8002a86:	2045      	movs	r0, #69	; 0x45
 8002a88:	f000 ff9f 	bl	80039ca <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <SAI_MspInit+0x304>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f040 809b 	bne.w	8002bce <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <SAI_MspInit+0x308>)
 8002a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a9e:	4a38      	ldr	r2, [pc, #224]	; (8002b80 <SAI_MspInit+0x308>)
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <SAI_MspInit+0x308>)
 8002aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8002ab6:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <SAI_MspInit+0x308>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abc:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <SAI_MspInit+0x308>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <SAI_MspInit+0x308>)
 8002ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	623b      	str	r3, [r7, #32]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8002ae4:	2306      	movs	r3, #6
 8002ae6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002ae8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aec:	4619      	mov	r1, r3
 8002aee:	4825      	ldr	r0, [pc, #148]	; (8002b84 <SAI_MspInit+0x30c>)
 8002af0:	f003 fefc 	bl	80068ec <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <SAI_MspInit+0x308>)
 8002af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002afa:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <SAI_MspInit+0x308>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <SAI_MspInit+0x308>)
 8002b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAIx_DMAx_STREAM;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <SAI_MspInit+0x310>)
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <SAI_MspInit+0x314>)
 8002b16:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <SAI_MspInit+0x310>)
 8002b1a:	2257      	movs	r2, #87	; 0x57
 8002b1c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <SAI_MspInit+0x310>)
 8002b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b24:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <SAI_MspInit+0x310>)
 8002b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <SAI_MspInit+0x310>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <SAI_MspInit+0x310>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <SAI_MspInit+0x310>)
 8002b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b40:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <SAI_MspInit+0x310>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <SAI_MspInit+0x310>)
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <SAI_MspInit+0x310>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <SAI_MspInit+0x310>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <SAI_MspInit+0x318>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d118      	bne.n	8002b94 <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <SAI_MspInit+0x310>)
 8002b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b68:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <SAI_MspInit+0x310>)
 8002b6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b70:	619a      	str	r2, [r3, #24]
 8002b72:	e017      	b.n	8002ba4 <SAI_MspInit+0x32c>
 8002b74:	24008714 	.word	0x24008714
 8002b78:	400204a0 	.word	0x400204a0
 8002b7c:	40015804 	.word	0x40015804
 8002b80:	58024400 	.word	0x58024400
 8002b84:	58021000 	.word	0x58021000
 8002b88:	2400878c 	.word	0x2400878c
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	24019250 	.word	0x24019250
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b94:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b9a:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b9c:	4b6d      	ldr	r3, [pc, #436]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba2:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a6b      	ldr	r2, [pc, #428]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002bac:	4a69      	ldr	r2, [pc, #420]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 8002bb2:	4868      	ldr	r0, [pc, #416]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002bb4:	f001 fbf2 	bl	800439c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8002bb8:	4866      	ldr	r0, [pc, #408]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002bba:	f001 f895 	bl	8003ce8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	203c      	movs	r0, #60	; 0x3c
 8002bc4:	f000 fee7 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002bc8:	203c      	movs	r0, #60	; 0x3c
 8002bca:	f000 fefe 	bl	80039ca <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a61      	ldr	r2, [pc, #388]	; (8002d58 <SAI_MspInit+0x4e0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	f040 80b8 	bne.w	8002d4a <SAI_MspInit+0x4d2>
  {
     /* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8002bda:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002be0:	4a5e      	ldr	r2, [pc, #376]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002be2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bea:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	69bb      	ldr	r3, [r7, #24]

    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8002bf8:	4b58      	ldr	r3, [pc, #352]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfe:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c08:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8002c16:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1c:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c26:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	693b      	ldr	r3, [r7, #16]

    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 8002c34:	2304      	movs	r3, #4
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c40:	2302      	movs	r3, #2
 8002c42:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 8002c44:	230a      	movs	r3, #10
 8002c46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 8002c48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4844      	ldr	r0, [pc, #272]	; (8002d60 <SAI_MspInit+0x4e8>)
 8002c50:	f003 fe4c 	bl	80068ec <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8002c60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c64:	4619      	mov	r1, r3
 8002c66:	483f      	ldr	r0, [pc, #252]	; (8002d64 <SAI_MspInit+0x4ec>)
 8002c68:	f003 fe40 	bl	80068ec <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c72:	4a3a      	ldr	r2, [pc, #232]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7c:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 8002c8a:	2330      	movs	r3, #48	; 0x30
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c96:	2302      	movs	r3, #2
 8002c98:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8002c9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	482e      	ldr	r0, [pc, #184]	; (8002d60 <SAI_MspInit+0x4e8>)
 8002ca6:	f003 fe21 	bl	80068ec <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <SAI_MspInit+0x4e4>)
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cca:	220f      	movs	r2, #15
 8002ccc:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002cd4:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d00:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <SAI_MspInit+0x4f0>)
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d28:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002d2e:	4809      	ldr	r0, [pc, #36]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d30:	f001 fb34 	bl	800439c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002d34:	4807      	ldr	r0, [pc, #28]	; (8002d54 <SAI_MspInit+0x4dc>)
 8002d36:	f000 ffd7 	bl	8003ce8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	2082      	movs	r0, #130	; 0x82
 8002d40:	f000 fe29 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8002d44:	2082      	movs	r0, #130	; 0x82
 8002d46:	f000 fe40 	bl	80039ca <HAL_NVIC_EnableIRQ>
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3758      	adds	r7, #88	; 0x58
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	2400878c 	.word	0x2400878c
 8002d58:	58005404 	.word	0x58005404
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	58021000 	.word	0x58021000
 8002d64:	58020800 	.word	0x58020800
 8002d68:	5802541c 	.word	0x5802541c

08002d6c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f000 f804 	bl	8002d82 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <BSP_I2C4_Init+0x64>)
 8002db8:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <BSP_I2C4_Init+0x68>)
 8002dba:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <BSP_I2C4_Init+0x6c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	4915      	ldr	r1, [pc, #84]	; (8002e18 <BSP_I2C4_Init+0x6c>)
 8002dc4:	600a      	str	r2, [r1, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002dca:	4811      	ldr	r0, [pc, #68]	; (8002e10 <BSP_I2C4_Init+0x64>)
 8002dcc:	f004 fc05 	bl	80075da <HAL_I2C_GetState>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d117      	bne.n	8002e06 <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002dd6:	480e      	ldr	r0, [pc, #56]	; (8002e10 <BSP_I2C4_Init+0x64>)
 8002dd8:	f000 fb66 	bl	80034a8 <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d111      	bne.n	8002e06 <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002de2:	f006 fc9d 	bl	8009720 <HAL_RCC_GetPCLK2Freq>
 8002de6:	4603      	mov	r3, r0
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <BSP_I2C4_Init+0x70>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f8e6 	bl	8002fbc <I2C_GetTiming>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4619      	mov	r1, r3
 8002df4:	4806      	ldr	r0, [pc, #24]	; (8002e10 <BSP_I2C4_Init+0x64>)
 8002df6:	f000 f83b 	bl	8002e70 <MX_I2C4_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002e00:	f06f 0307 	mvn.w	r3, #7
 8002e04:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 8002e06:	687b      	ldr	r3, [r7, #4]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	240192e0 	.word	0x240192e0
 8002e14:	58001c00 	.word	0x58001c00
 8002e18:	24008804 	.word	0x24008804
 8002e1c:	000186a0 	.word	0x000186a0

08002e20 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]

  if (I2c4InitCounter > 0U)
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <BSP_I2C4_DeInit+0x48>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d014      	beq.n	8002e5c <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2c4InitCounter == 0U)
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <BSP_I2C4_DeInit+0x48>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <BSP_I2C4_DeInit+0x48>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <BSP_I2C4_DeInit+0x48>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <BSP_I2C4_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C4_MspDeInit(&hbus_i2c4);
 8002e44:	4809      	ldr	r0, [pc, #36]	; (8002e6c <BSP_I2C4_DeInit+0x4c>)
 8002e46:	f000 fb95 	bl	8003574 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

      /* Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002e4a:	4808      	ldr	r0, [pc, #32]	; (8002e6c <BSP_I2C4_DeInit+0x4c>)
 8002e4c:	f004 f8c6 	bl	8006fdc <HAL_I2C_DeInit>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002e56:	f06f 0307 	mvn.w	r3, #7
 8002e5a:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return ret;
 8002e5c:	687b      	ldr	r3, [r7, #4]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	24008804 	.word	0x24008804
 8002e6c:	240192e0 	.word	0x240192e0

08002e70 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f004 f804 	bl	8006ebc <HAL_I2C_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e014      	b.n	8002eea <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f005 fbee 	bl	80086a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e008      	b.n	8002eea <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f005 fc2f 	bl	800873e <HAL_I2CEx_ConfigDigitalFilter>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60ba      	str	r2, [r7, #8]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	81fb      	strh	r3, [r7, #14]
 8002f02:	460b      	mov	r3, r1
 8002f04:	81bb      	strh	r3, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002f0a:	89b9      	ldrh	r1, [r7, #12]
 8002f0c:	89f8      	ldrh	r0, [r7, #14]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f000 fb51 	bl	80035bc <I2C4_WriteReg>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e00c      	b.n	8002f40 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002f26:	4809      	ldr	r0, [pc, #36]	; (8002f4c <BSP_I2C4_WriteReg16+0x58>)
 8002f28:	f004 fb65 	bl	80075f6 <HAL_I2C_GetError>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d103      	bne.n	8002f3a <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f32:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e002      	b.n	8002f40 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002f3a:	f06f 0303 	mvn.w	r3, #3
 8002f3e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002f40:	697b      	ldr	r3, [r7, #20]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	240192e0 	.word	0x240192e0

08002f50 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60ba      	str	r2, [r7, #8]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	81fb      	strh	r3, [r7, #14]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	81bb      	strh	r3, [r7, #12]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002f66:	89b9      	ldrh	r1, [r7, #12]
 8002f68:	89f8      	ldrh	r0, [r7, #14]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f000 fb49 	bl	8003608 <I2C4_ReadReg>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e00c      	b.n	8002f9c <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <BSP_I2C4_ReadReg16+0x58>)
 8002f84:	f004 fb37 	bl	80075f6 <HAL_I2C_GetError>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d103      	bne.n	8002f96 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f8e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	e002      	b.n	8002f9c <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002f96:	f06f 0303 	mvn.w	r3, #3
 8002f9a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002f9c:	697b      	ldr	r3, [r7, #20]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	240192e0 	.word	0x240192e0

08002fac <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002fb0:	f000 fbd6 	bl	8003760 <HAL_GetTick>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d06b      	beq.n	80030a8 <I2C_GetTiming+0xec>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d068      	beq.n	80030a8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e060      	b.n	800309e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002fdc:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <I2C_GetTiming+0xf8>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d352      	bcc.n	8003098 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002ff2:	4a30      	ldr	r2, [pc, #192]	; (80030b4 <I2C_GetTiming+0xf8>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d847      	bhi.n	8003098 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003008:	6939      	ldr	r1, [r7, #16]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f856 	bl	80030bc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003010:	6939      	ldr	r1, [r7, #16]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f940 	bl	8003298 <I2C_Compute_SCLL_SCLH>
 8003018:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b7f      	cmp	r3, #127	; 0x7f
 800301e:	d842      	bhi.n	80030a6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003020:	4925      	ldr	r1, [pc, #148]	; (80030b8 <I2C_GetTiming+0xfc>)
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003032:	4821      	ldr	r0, [pc, #132]	; (80030b8 <I2C_GetTiming+0xfc>)
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4403      	add	r3, r0
 8003040:	3304      	adds	r3, #4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	051b      	lsls	r3, r3, #20
 8003046:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800304a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800304c:	481a      	ldr	r0, [pc, #104]	; (80030b8 <I2C_GetTiming+0xfc>)
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4403      	add	r3, r0
 800305a:	3308      	adds	r3, #8
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003064:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003066:	4814      	ldr	r0, [pc, #80]	; (80030b8 <I2C_GetTiming+0xfc>)
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4403      	add	r3, r0
 8003074:	330c      	adds	r3, #12
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800307c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800307e:	480e      	ldr	r0, [pc, #56]	; (80030b8 <I2C_GetTiming+0xfc>)
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4403      	add	r3, r0
 800308c:	3310      	adds	r3, #16
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003092:	430b      	orrs	r3, r1
 8003094:	617b      	str	r3, [r7, #20]
        }
        break;
 8003096:	e006      	b.n	80030a6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3301      	adds	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d99b      	bls.n	8002fdc <I2C_GetTiming+0x20>
 80030a4:	e000      	b.n	80030a8 <I2C_GetTiming+0xec>
        break;
 80030a6:	bf00      	nop
      }
    }
  }

  return ret;
 80030a8:	697b      	ldr	r3, [r7, #20]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	0800fb08 	.word	0x0800fb08
 80030b8:	24008808 	.word	0x24008808

080030bc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80030bc:	b480      	push	{r7}
 80030be:	b08f      	sub	sp, #60	; 0x3c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80030c6:	2310      	movs	r3, #16
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	085a      	lsrs	r2, r3, #1
 80030ce:	4b6e      	ldr	r3, [pc, #440]	; (8003288 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80030d0:	4413      	add	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80030da:	2332      	movs	r3, #50	; 0x32
 80030dc:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 80030de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80030e2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80030e4:	4a69      	ldr	r2, [pc, #420]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3324      	adds	r3, #36	; 0x24
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	4a65      	ldr	r2, [pc, #404]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	330c      	adds	r3, #12
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003108:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800310a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800310c:	495f      	ldr	r1, [pc, #380]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	202c      	movs	r0, #44	; 0x2c
 8003112:	fb00 f303 	mul.w	r3, r0, r3
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3303      	adds	r3, #3
 800311e:	69f9      	ldr	r1, [r7, #28]
 8003120:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3310      	adds	r3, #16
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	4a54      	ldr	r2, [pc, #336]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3320      	adds	r3, #32
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800314c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800314e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003150:	494e      	ldr	r1, [pc, #312]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	202c      	movs	r0, #44	; 0x2c
 8003156:	fb00 f303 	mul.w	r3, r0, r3
 800315a:	440b      	add	r3, r1
 800315c:	3328      	adds	r3, #40	; 0x28
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3304      	adds	r3, #4
 8003162:	69f9      	ldr	r1, [r7, #28]
 8003164:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800316c:	4a47      	ldr	r2, [pc, #284]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3320      	adds	r3, #32
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	4a43      	ldr	r2, [pc, #268]	; (800328c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3314      	adds	r3, #20
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4403      	add	r3, r0
 8003190:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	dc01      	bgt.n	800319c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dc01      	bgt.n	80031a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031aa:	e062      	b.n	8003272 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	e059      	b.n	8003266 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	3301      	adds	r3, #1
 80031b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b8:	3201      	adds	r2, #1
 80031ba:	fb02 f203 	mul.w	r2, r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d348      	bcc.n	8003260 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
 80031d2:	e042      	b.n	800325a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	3301      	adds	r3, #1
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	fb02 f203 	mul.w	r2, r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d332      	bcc.n	8003254 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d82e      	bhi.n	8003254 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80031f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d02a      	beq.n	8003254 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4924      	ldr	r1, [pc, #144]	; (8003294 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003210:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003212:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	491f      	ldr	r1, [pc, #124]	; (8003294 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3304      	adds	r3, #4
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4919      	ldr	r1, [pc, #100]	; (8003294 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	3308      	adds	r3, #8
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	4a11      	ldr	r2, [pc, #68]	; (8003290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800324a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b7f      	cmp	r3, #127	; 0x7f
 8003252:	d812      	bhi.n	800327a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	3301      	adds	r3, #1
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d9b9      	bls.n	80031d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3301      	adds	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d9a2      	bls.n	80031b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	3301      	adds	r3, #1
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d999      	bls.n	80031ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003278:	e000      	b.n	800327c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800327a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800327c:	373c      	adds	r7, #60	; 0x3c
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	3b9aca00 	.word	0x3b9aca00
 800328c:	0800fb08 	.word	0x0800fb08
 8003290:	24009208 	.word	0x24009208
 8003294:	24008808 	.word	0x24008808

08003298 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003298:	b480      	push	{r7}
 800329a:	b093      	sub	sp, #76	; 0x4c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	085a      	lsrs	r2, r3, #1
 80032ac:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <I2C_Compute_SCLL_SCLH+0x200>)
 80032ae:	4413      	add	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80032b8:	4a78      	ldr	r2, [pc, #480]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	085a      	lsrs	r2, r3, #1
 80032c8:	4b73      	ldr	r3, [pc, #460]	; (8003498 <I2C_Compute_SCLL_SCLH+0x200>)
 80032ca:	4413      	add	r3, r2
 80032cc:	4973      	ldr	r1, [pc, #460]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	202c      	movs	r0, #44	; 0x2c
 80032d2:	fb00 f202 	mul.w	r2, r0, r2
 80032d6:	440a      	add	r2, r1
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	fbb3 f3f2 	udiv	r3, r3, r2
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80032e0:	2332      	movs	r3, #50	; 0x32
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80032e4:	4a6d      	ldr	r2, [pc, #436]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	3328      	adds	r3, #40	; 0x28
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80032fc:	4a67      	ldr	r2, [pc, #412]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a62      	ldr	r2, [pc, #392]	; (8003498 <I2C_Compute_SCLL_SCLH+0x200>)
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003314:	4a61      	ldr	r2, [pc, #388]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3308      	adds	r3, #8
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <I2C_Compute_SCLL_SCLH+0x200>)
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003330:	2300      	movs	r3, #0
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
 8003334:	e0a3      	b.n	800347e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003336:	495a      	ldr	r1, [pc, #360]	; (80034a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003350:	2300      	movs	r3, #0
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	e08c      	b.n	8003470 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	441a      	add	r2, r3
 800335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335e:	3301      	adds	r3, #1
 8003360:	6979      	ldr	r1, [r7, #20]
 8003362:	fb01 f103 	mul.w	r1, r1, r3
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	440b      	add	r3, r1
 800336c:	4413      	add	r3, r2
 800336e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003370:	4a4a      	ldr	r2, [pc, #296]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3318      	adds	r3, #24
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d971      	bls.n	800346a <I2C_Compute_SCLL_SCLH+0x1d2>
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003394:	429a      	cmp	r2, r3
 8003396:	d268      	bcs.n	800346a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003398:	2300      	movs	r3, #0
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
 800339c:	e062      	b.n	8003464 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	441a      	add	r2, r3
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	3301      	adds	r3, #1
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	fb01 f103 	mul.w	r1, r1, r3
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	440b      	add	r3, r1
 80033b4:	4413      	add	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	441a      	add	r2, r3
 80033be:	4937      	ldr	r1, [pc, #220]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	202c      	movs	r0, #44	; 0x2c
 80033c4:	fb00 f303 	mul.w	r3, r0, r3
 80033c8:	440b      	add	r3, r1
 80033ca:	3320      	adds	r3, #32
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	441a      	add	r2, r3
 80033d0:	4932      	ldr	r1, [pc, #200]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	202c      	movs	r0, #44	; 0x2c
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	440b      	add	r3, r1
 80033dc:	3324      	adds	r3, #36	; 0x24
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d338      	bcc.n	800345e <I2C_Compute_SCLL_SCLH+0x1c6>
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d834      	bhi.n	800345e <I2C_Compute_SCLL_SCLH+0x1c6>
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <I2C_Compute_SCLL_SCLH+0x204>)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	212c      	movs	r1, #44	; 0x2c
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	4413      	add	r3, r2
 8003400:	331c      	adds	r3, #28
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d329      	bcc.n	800345e <I2C_Compute_SCLL_SCLH+0x1c6>
 800340a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	429a      	cmp	r2, r3
 8003410:	d225      	bcs.n	800345e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2b00      	cmp	r3, #0
 800341e:	da02      	bge.n	8003426 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	425b      	negs	r3, r3
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800342a:	429a      	cmp	r2, r3
 800342c:	d917      	bls.n	800345e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003432:	491b      	ldr	r1, [pc, #108]	; (80034a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3310      	adds	r3, #16
 8003442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003444:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003446:	4916      	ldr	r1, [pc, #88]	; (80034a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	330c      	adds	r3, #12
 8003456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003458:	601a      	str	r2, [r3, #0]
              ret = count;
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	3301      	adds	r3, #1
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	2bff      	cmp	r3, #255	; 0xff
 8003468:	d999      	bls.n	800339e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800346a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346c:	3301      	adds	r3, #1
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003472:	2bff      	cmp	r3, #255	; 0xff
 8003474:	f67f af6f 	bls.w	8003356 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	3301      	adds	r3, #1
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003484:	429a      	cmp	r2, r3
 8003486:	f4ff af56 	bcc.w	8003336 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800348a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800348c:	4618      	mov	r0, r3
 800348e:	374c      	adds	r7, #76	; 0x4c
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	3b9aca00 	.word	0x3b9aca00
 800349c:	0800fb08 	.word	0x0800fb08
 80034a0:	24008808 	.word	0x24008808
 80034a4:	24009208 	.word	0x24009208

080034a8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80034b0:	4b2e      	ldr	r3, [pc, #184]	; (800356c <I2C4_MspInit+0xc4>)
 80034b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b6:	4a2d      	ldr	r2, [pc, #180]	; (800356c <I2C4_MspInit+0xc4>)
 80034b8:	f043 0320 	orr.w	r3, r3, #32
 80034bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <I2C4_MspInit+0xc4>)
 80034c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <I2C4_MspInit+0xc4>)
 80034d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <I2C4_MspInit+0xc4>)
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034de:	4b23      	ldr	r3, [pc, #140]	; (800356c <I2C4_MspInit+0xc4>)
 80034e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80034ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80034f2:	2312      	movs	r3, #18
 80034f4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80034fa:	2302      	movs	r3, #2
 80034fc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80034fe:	2304      	movs	r3, #4
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	4619      	mov	r1, r3
 8003508:	4819      	ldr	r0, [pc, #100]	; (8003570 <I2C4_MspInit+0xc8>)
 800350a:	f003 f9ef 	bl	80068ec <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003514:	2304      	movs	r3, #4
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4814      	ldr	r0, [pc, #80]	; (8003570 <I2C4_MspInit+0xc8>)
 8003520:	f003 f9e4 	bl	80068ec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <I2C4_MspInit+0xc4>)
 8003526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800352a:	4a10      	ldr	r2, [pc, #64]	; (800356c <I2C4_MspInit+0xc4>)
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <I2C4_MspInit+0xc4>)
 8003536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <I2C4_MspInit+0xc4>)
 8003544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003548:	4a08      	ldr	r2, [pc, #32]	; (800356c <I2C4_MspInit+0xc4>)
 800354a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <I2C4_MspInit+0xc4>)
 8003554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <I2C4_MspInit+0xc4>)
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	58024400 	.word	0x58024400
 8003570:	58021400 	.word	0x58021400

08003574 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800357c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003580:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4619      	mov	r1, r3
 8003586:	480b      	ldr	r0, [pc, #44]	; (80035b4 <I2C4_MspDeInit+0x40>)
 8003588:	f003 fb58 	bl	8006c3c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800358c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003590:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4619      	mov	r1, r3
 8003596:	4807      	ldr	r0, [pc, #28]	; (80035b4 <I2C4_MspDeInit+0x40>)
 8003598:	f003 fb50 	bl	8006c3c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <I2C4_MspDeInit+0x44>)
 800359e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <I2C4_MspDeInit+0x44>)
 80035a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 80035ac:	bf00      	nop
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58021400 	.word	0x58021400
 80035b8:	58024400 	.word	0x58024400

080035bc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	4603      	mov	r3, r0
 80035c6:	81fb      	strh	r3, [r7, #14]
 80035c8:	460b      	mov	r3, r1
 80035ca:	81bb      	strh	r3, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80035d0:	8978      	ldrh	r0, [r7, #10]
 80035d2:	89ba      	ldrh	r2, [r7, #12]
 80035d4:	89f9      	ldrh	r1, [r7, #14]
 80035d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035da:	9302      	str	r3, [sp, #8]
 80035dc:	8b3b      	ldrh	r3, [r7, #24]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	4807      	ldr	r0, [pc, #28]	; (8003604 <I2C4_WriteReg+0x48>)
 80035e8:	f003 fd28 	bl	800703c <HAL_I2C_Mem_Write>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e001      	b.n	80035fa <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80035f6:	f06f 0307 	mvn.w	r3, #7
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	240192e0 	.word	0x240192e0

08003608 <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af04      	add	r7, sp, #16
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	4603      	mov	r3, r0
 8003612:	81fb      	strh	r3, [r7, #14]
 8003614:	460b      	mov	r3, r1
 8003616:	81bb      	strh	r3, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800361c:	8978      	ldrh	r0, [r7, #10]
 800361e:	89ba      	ldrh	r2, [r7, #12]
 8003620:	89f9      	ldrh	r1, [r7, #14]
 8003622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	8b3b      	ldrh	r3, [r7, #24]
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4603      	mov	r3, r0
 8003632:	4807      	ldr	r0, [pc, #28]	; (8003650 <I2C4_ReadReg+0x48>)
 8003634:	f003 fe16 	bl	8007264 <HAL_I2C_Mem_Read>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800363e:	2300      	movs	r3, #0
 8003640:	e001      	b.n	8003646 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003642:	f06f 0307 	mvn.w	r3, #7
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	240192e0 	.word	0x240192e0

08003654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800365a:	2003      	movs	r0, #3
 800365c:	f000 f990 	bl	8003980 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003660:	f005 feb4 	bl	80093cc <HAL_RCC_GetSysClockFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_Init+0x68>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	4913      	ldr	r1, [pc, #76]	; (80036c0 <HAL_Init+0x6c>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_Init+0x68>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <HAL_Init+0x6c>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <HAL_Init+0x70>)
 8003696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_Init+0x74>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800369e:	2000      	movs	r0, #0
 80036a0:	f000 f814 	bl	80036cc <HAL_InitTick>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e002      	b.n	80036b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036ae:	f009 fdc3 	bl	800d238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	58024400 	.word	0x58024400
 80036c0:	0800fb94 	.word	0x0800fb94
 80036c4:	24000488 	.word	0x24000488
 80036c8:	24000484 	.word	0x24000484

080036cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_InitTick+0x60>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e021      	b.n	8003724 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_InitTick+0x64>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_InitTick+0x60>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f983 	bl	8003a02 <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003714:	f000 f93f 	bl	8003996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <HAL_InitTick+0x68>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	24000458 	.word	0x24000458
 8003730:	24000484 	.word	0x24000484
 8003734:	24000454 	.word	0x24000454

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	24000458 	.word	0x24000458
 800375c:	2401932c 	.word	0x2401932c

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2401932c 	.word	0x2401932c

08003778 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_EnableCompensationCell+0x1c>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_EnableCompensationCell+0x1c>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6213      	str	r3, [r2, #32]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	58000400 	.word	0x58000400

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <__NVIC_SetPriorityGrouping+0x40>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <__NVIC_SetPriorityGrouping+0x40>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00
 80037dc:	05fa0000 	.word	0x05fa0000

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4907      	ldr	r1, [pc, #28]	; (8003834 <__NVIC_EnableIRQ+0x38>)
 8003816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2001      	movs	r0, #1
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db12      	blt.n	8003870 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	490a      	ldr	r1, [pc, #40]	; (800387c <__NVIC_DisableIRQ+0x44>)
 8003852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	3320      	adds	r3, #32
 8003860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003864:	f3bf 8f4f 	dsb	sy
}
 8003868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800386a:	f3bf 8f6f 	isb	sy
}
 800386e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100

08003880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800388c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003890:	2b00      	cmp	r3, #0
 8003892:	db0a      	blt.n	80038aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	490c      	ldr	r1, [pc, #48]	; (80038cc <__NVIC_SetPriority+0x4c>)
 800389a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a8:	e00a      	b.n	80038c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4908      	ldr	r1, [pc, #32]	; (80038d0 <__NVIC_SetPriority+0x50>)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3b04      	subs	r3, #4
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	440b      	add	r3, r1
 80038be:	761a      	strb	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0307 	rsb	r3, r3, #7
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf28      	it	cs
 80038f2:	2304      	movcs	r3, #4
 80038f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d902      	bls.n	8003904 <NVIC_EncodePriority+0x30>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b03      	subs	r3, #3
 8003902:	e000      	b.n	8003906 <NVIC_EncodePriority+0x32>
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800391c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	43d9      	mvns	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	4313      	orrs	r3, r2
         );
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800394c:	d301      	bcc.n	8003952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394e:	2301      	movs	r3, #1
 8003950:	e00f      	b.n	8003972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <SysTick_Config+0x40>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395a:	210f      	movs	r1, #15
 800395c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003960:	f7ff ff8e 	bl	8003880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <SysTick_Config+0x40>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396a:	4b04      	ldr	r3, [pc, #16]	; (800397c <SysTick_Config+0x40>)
 800396c:	2207      	movs	r2, #7
 800396e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	e000e010 	.word	0xe000e010

08003980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff05 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039a4:	f7ff ff1c 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 80039a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff ff90 	bl	80038d4 <NVIC_EncodePriority>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff5f 	bl	8003880 <__NVIC_SetPriority>
}
 80039c2:	bf00      	nop
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff0f 	bl	80037fc <__NVIC_EnableIRQ>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff1f 	bl	8003838 <__NVIC_DisableIRQ>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ff96 	bl	800393c <SysTick_Config>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003a20:	f3bf 8f5f 	dmb	sy
}
 8003a24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_MPU_Disable+0x28>)
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <HAL_MPU_Disable+0x28>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a30:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_MPU_Disable+0x2c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	605a      	str	r2, [r3, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00
 8003a48:	e000ed90 	.word	0xe000ed90

08003a4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_MPU_Enable+0x38>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_MPU_Enable+0x3c>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_MPU_Enable+0x3c>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003a6a:	f3bf 8f4f 	dsb	sy
}
 8003a6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a70:	f3bf 8f6f 	isb	sy
}
 8003a74:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed90 	.word	0xe000ed90
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	785a      	ldrb	r2, [r3, #1]
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_MPU_ConfigRegion+0x84>)
 8003a9a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d029      	beq.n	8003af8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <HAL_MPU_ConfigRegion+0x84>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7b1b      	ldrb	r3, [r3, #12]
 8003ab0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7adb      	ldrb	r3, [r3, #11]
 8003ab6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ab8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7a9b      	ldrb	r3, [r3, #10]
 8003abe:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ac0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7b5b      	ldrb	r3, [r3, #13]
 8003ac6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ac8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7b9b      	ldrb	r3, [r3, #14]
 8003ace:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ad0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7bdb      	ldrb	r3, [r3, #15]
 8003ad6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ad8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7a5b      	ldrb	r3, [r3, #9]
 8003ade:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ae0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7a1b      	ldrb	r3, [r3, #8]
 8003ae6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ae8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003af0:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003af2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003af4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003af6:	e005      	b.n	8003b04 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_MPU_ConfigRegion+0x84>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003afe:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <HAL_MPU_ConfigRegion+0x84>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	611a      	str	r2, [r3, #16]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed90 	.word	0xe000ed90

08003b14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e054      	b.n	8003bd0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7f5b      	ldrb	r3, [r3, #29]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f009 fb98 	bl	800d26c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	791b      	ldrb	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_CRC_Init+0xc4>)
 8003b50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0218 	bic.w	r2, r2, #24
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	e00c      	b.n	8003b7e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6899      	ldr	r1, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f834 	bl	8003bdc <HAL_CRCEx_Polynomial_Set>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e028      	b.n	8003bd0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	795b      	ldrb	r3, [r3, #5]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	e004      	b.n	8003b9c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6912      	ldr	r2, [r2, #16]
 8003b9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	04c11db7 	.word	0x04c11db7

08003bdc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003bec:	231f      	movs	r3, #31
 8003bee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003bf0:	bf00      	nop
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	613a      	str	r2, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_CRCEx_Polynomial_Set+0x34>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_CRCEx_Polynomial_Set+0x16>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b18      	cmp	r3, #24
 8003c14:	d846      	bhi.n	8003ca4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003cab 	.word	0x08003cab
 8003c20:	08003ca5 	.word	0x08003ca5
 8003c24:	08003ca5 	.word	0x08003ca5
 8003c28:	08003ca5 	.word	0x08003ca5
 8003c2c:	08003ca5 	.word	0x08003ca5
 8003c30:	08003ca5 	.word	0x08003ca5
 8003c34:	08003ca5 	.word	0x08003ca5
 8003c38:	08003ca5 	.word	0x08003ca5
 8003c3c:	08003c99 	.word	0x08003c99
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003ca5 	.word	0x08003ca5
 8003c48:	08003ca5 	.word	0x08003ca5
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003ca5 	.word	0x08003ca5
 8003c5c:	08003c8d 	.word	0x08003c8d
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003ca5 	.word	0x08003ca5
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003ca5 	.word	0x08003ca5
 8003c7c:	08003c81 	.word	0x08003c81
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d913      	bls.n	8003cae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c8a:	e010      	b.n	8003cae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	d90f      	bls.n	8003cb2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c96:	e00c      	b.n	8003cb2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	d90b      	bls.n	8003cb6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ca2:	e008      	b.n	8003cb6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca8:	e006      	b.n	8003cb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003caa:	bf00      	nop
 8003cac:	e004      	b.n	8003cb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003cb6:	bf00      	nop
  }
  if (status == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 0118 	bic.w	r1, r3, #24
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff fd36 	bl	8003760 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e314      	b.n	800432a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a66      	ldr	r2, [pc, #408]	; (8003ea0 <HAL_DMA_Init+0x1b8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_DMA_Init+0x1bc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <HAL_DMA_Init+0x1c0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_DMA_Init+0x1c4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a60      	ldr	r2, [pc, #384]	; (8003eb0 <HAL_DMA_Init+0x1c8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a5f      	ldr	r2, [pc, #380]	; (8003eb4 <HAL_DMA_Init+0x1cc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a5d      	ldr	r2, [pc, #372]	; (8003eb8 <HAL_DMA_Init+0x1d0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5c      	ldr	r2, [pc, #368]	; (8003ebc <HAL_DMA_Init+0x1d4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_DMA_Init+0x1d8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a59      	ldr	r2, [pc, #356]	; (8003ec4 <HAL_DMA_Init+0x1dc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_DMA_Init+0x1e0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a56      	ldr	r2, [pc, #344]	; (8003ecc <HAL_DMA_Init+0x1e4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <HAL_DMA_Init+0x1e8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a53      	ldr	r2, [pc, #332]	; (8003ed4 <HAL_DMA_Init+0x1ec>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a51      	ldr	r2, [pc, #324]	; (8003ed8 <HAL_DMA_Init+0x1f0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_Init+0xb8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a50      	ldr	r2, [pc, #320]	; (8003edc <HAL_DMA_Init+0x1f4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_DMA_Init+0xbc>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_DMA_Init+0xbe>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 813c 	beq.w	8004024 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a37      	ldr	r2, [pc, #220]	; (8003ea0 <HAL_DMA_Init+0x1b8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d04a      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a36      	ldr	r2, [pc, #216]	; (8003ea4 <HAL_DMA_Init+0x1bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d045      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a34      	ldr	r2, [pc, #208]	; (8003ea8 <HAL_DMA_Init+0x1c0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d040      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a33      	ldr	r2, [pc, #204]	; (8003eac <HAL_DMA_Init+0x1c4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d03b      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a31      	ldr	r2, [pc, #196]	; (8003eb0 <HAL_DMA_Init+0x1c8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d036      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <HAL_DMA_Init+0x1cc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d031      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2e      	ldr	r2, [pc, #184]	; (8003eb8 <HAL_DMA_Init+0x1d0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02c      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2d      	ldr	r2, [pc, #180]	; (8003ebc <HAL_DMA_Init+0x1d4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d027      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_DMA_Init+0x1d8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <HAL_DMA_Init+0x1dc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d01d      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_DMA_Init+0x1e0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d018      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_DMA_Init+0x1e4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_DMA_Init+0x1e8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <HAL_DMA_Init+0x1ec>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_DMA_Init+0x1f0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_DMA_Init+0x174>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_DMA_Init+0x1f4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <HAL_DMA_Init+0x186>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e007      	b.n	8003e7e <HAL_DMA_Init+0x196>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e7e:	e02f      	b.n	8003ee0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e80:	f7ff fc6e 	bl	8003760 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d928      	bls.n	8003ee0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2203      	movs	r2, #3
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e244      	b.n	800432a <HAL_DMA_Init+0x642>
 8003ea0:	40020010 	.word	0x40020010
 8003ea4:	40020028 	.word	0x40020028
 8003ea8:	40020040 	.word	0x40020040
 8003eac:	40020058 	.word	0x40020058
 8003eb0:	40020070 	.word	0x40020070
 8003eb4:	40020088 	.word	0x40020088
 8003eb8:	400200a0 	.word	0x400200a0
 8003ebc:	400200b8 	.word	0x400200b8
 8003ec0:	40020410 	.word	0x40020410
 8003ec4:	40020428 	.word	0x40020428
 8003ec8:	40020440 	.word	0x40020440
 8003ecc:	40020458 	.word	0x40020458
 8003ed0:	40020470 	.word	0x40020470
 8003ed4:	40020488 	.word	0x40020488
 8003ed8:	400204a0 	.word	0x400204a0
 8003edc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1c8      	bne.n	8003e80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4b84      	ldr	r3, [pc, #528]	; (800410c <HAL_DMA_Init+0x424>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d107      	bne.n	8003f44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b28      	cmp	r3, #40	; 0x28
 8003f4a:	d903      	bls.n	8003f54 <HAL_DMA_Init+0x26c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b2e      	cmp	r3, #46	; 0x2e
 8003f52:	d91f      	bls.n	8003f94 <HAL_DMA_Init+0x2ac>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b3e      	cmp	r3, #62	; 0x3e
 8003f5a:	d903      	bls.n	8003f64 <HAL_DMA_Init+0x27c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b42      	cmp	r3, #66	; 0x42
 8003f62:	d917      	bls.n	8003f94 <HAL_DMA_Init+0x2ac>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b46      	cmp	r3, #70	; 0x46
 8003f6a:	d903      	bls.n	8003f74 <HAL_DMA_Init+0x28c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b48      	cmp	r3, #72	; 0x48
 8003f72:	d90f      	bls.n	8003f94 <HAL_DMA_Init+0x2ac>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b4e      	cmp	r3, #78	; 0x4e
 8003f7a:	d903      	bls.n	8003f84 <HAL_DMA_Init+0x29c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b52      	cmp	r3, #82	; 0x52
 8003f82:	d907      	bls.n	8003f94 <HAL_DMA_Init+0x2ac>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b73      	cmp	r3, #115	; 0x73
 8003f8a:	d905      	bls.n	8003f98 <HAL_DMA_Init+0x2b0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b77      	cmp	r3, #119	; 0x77
 8003f92:	d801      	bhi.n	8003f98 <HAL_DMA_Init+0x2b0>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_DMA_Init+0x2b2>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0307 	bic.w	r3, r3, #7
 8003fbc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d117      	bne.n	8004000 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00e      	beq.n	8004000 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f002 f9e0 	bl	80063a8 <DMA_CheckFifoParam>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2240      	movs	r2, #64	; 0x40
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e194      	b.n	800432a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f002 f91b 	bl	8006244 <DMA_CalcBaseAndBitshift>
 800400e:	4603      	mov	r3, r0
 8004010:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	223f      	movs	r2, #63	; 0x3f
 800401c:	409a      	lsls	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	e0ca      	b.n	80041ba <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a39      	ldr	r2, [pc, #228]	; (8004110 <HAL_DMA_Init+0x428>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <HAL_DMA_Init+0x42c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a36      	ldr	r2, [pc, #216]	; (8004118 <HAL_DMA_Init+0x430>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a35      	ldr	r2, [pc, #212]	; (800411c <HAL_DMA_Init+0x434>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a33      	ldr	r2, [pc, #204]	; (8004120 <HAL_DMA_Init+0x438>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a32      	ldr	r2, [pc, #200]	; (8004124 <HAL_DMA_Init+0x43c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a30      	ldr	r2, [pc, #192]	; (8004128 <HAL_DMA_Init+0x440>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_DMA_Init+0x38c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2f      	ldr	r2, [pc, #188]	; (800412c <HAL_DMA_Init+0x444>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_DMA_Init+0x390>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_DMA_Init+0x392>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8094 	beq.w	80041a8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_DMA_Init+0x428>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d021      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a21      	ldr	r2, [pc, #132]	; (8004114 <HAL_DMA_Init+0x42c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d01c      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_DMA_Init+0x430>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d017      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1e      	ldr	r2, [pc, #120]	; (800411c <HAL_DMA_Init+0x434>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d012      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_DMA_Init+0x438>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00d      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_DMA_Init+0x43c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d008      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_DMA_Init+0x440>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <HAL_DMA_Init+0x3e6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_DMA_Init+0x444>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_DMA_Init+0x448>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d01d      	beq.n	8004134 <HAL_DMA_Init+0x44c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d102      	bne.n	8004106 <HAL_DMA_Init+0x41e>
 8004100:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004104:	e017      	b.n	8004136 <HAL_DMA_Init+0x44e>
 8004106:	2300      	movs	r3, #0
 8004108:	e015      	b.n	8004136 <HAL_DMA_Init+0x44e>
 800410a:	bf00      	nop
 800410c:	fe10803f 	.word	0xfe10803f
 8004110:	58025408 	.word	0x58025408
 8004114:	5802541c 	.word	0x5802541c
 8004118:	58025430 	.word	0x58025430
 800411c:	58025444 	.word	0x58025444
 8004120:	58025458 	.word	0x58025458
 8004124:	5802546c 	.word	0x5802546c
 8004128:	58025480 	.word	0x58025480
 800412c:	58025494 	.word	0x58025494
 8004130:	fffe000f 	.word	0xfffe000f
 8004134:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800413c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800414c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800415c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004164:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b6e      	ldr	r3, [pc, #440]	; (8004334 <HAL_DMA_Init+0x64c>)
 800417c:	4413      	add	r3, r2
 800417e:	4a6e      	ldr	r2, [pc, #440]	; (8004338 <HAL_DMA_Init+0x650>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f002 f859 	bl	8006244 <DMA_CalcBaseAndBitshift>
 8004192:	4603      	mov	r3, r0
 8004194:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	e008      	b.n	80041ba <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0b7      	b.n	800432a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5f      	ldr	r2, [pc, #380]	; (800433c <HAL_DMA_Init+0x654>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d072      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	; (8004340 <HAL_DMA_Init+0x658>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d06d      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5c      	ldr	r2, [pc, #368]	; (8004344 <HAL_DMA_Init+0x65c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d068      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5a      	ldr	r2, [pc, #360]	; (8004348 <HAL_DMA_Init+0x660>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d063      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a59      	ldr	r2, [pc, #356]	; (800434c <HAL_DMA_Init+0x664>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d05e      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_DMA_Init+0x668>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d059      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_DMA_Init+0x66c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d054      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a54      	ldr	r2, [pc, #336]	; (8004358 <HAL_DMA_Init+0x670>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04f      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a53      	ldr	r2, [pc, #332]	; (800435c <HAL_DMA_Init+0x674>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d04a      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <HAL_DMA_Init+0x678>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d045      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a50      	ldr	r2, [pc, #320]	; (8004364 <HAL_DMA_Init+0x67c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d040      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4e      	ldr	r2, [pc, #312]	; (8004368 <HAL_DMA_Init+0x680>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d03b      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4d      	ldr	r2, [pc, #308]	; (800436c <HAL_DMA_Init+0x684>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d036      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_DMA_Init+0x688>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d031      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4a      	ldr	r2, [pc, #296]	; (8004374 <HAL_DMA_Init+0x68c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d02c      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a48      	ldr	r2, [pc, #288]	; (8004378 <HAL_DMA_Init+0x690>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d027      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a47      	ldr	r2, [pc, #284]	; (800437c <HAL_DMA_Init+0x694>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a45      	ldr	r2, [pc, #276]	; (8004380 <HAL_DMA_Init+0x698>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a44      	ldr	r2, [pc, #272]	; (8004384 <HAL_DMA_Init+0x69c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <HAL_DMA_Init+0x6a0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a41      	ldr	r2, [pc, #260]	; (800438c <HAL_DMA_Init+0x6a4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3f      	ldr	r2, [pc, #252]	; (8004390 <HAL_DMA_Init+0x6a8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3e      	ldr	r2, [pc, #248]	; (8004394 <HAL_DMA_Init+0x6ac>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_Init+0x5c2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3c      	ldr	r2, [pc, #240]	; (8004398 <HAL_DMA_Init+0x6b0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_DMA_Init+0x5c6>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_DMA_Init+0x5c8>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d032      	beq.n	800431a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f002 f8f3 	bl	80064a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d102      	bne.n	80042c8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d010      	beq.n	8004308 <HAL_DMA_Init+0x620>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d80c      	bhi.n	8004308 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f002 f970 	bl	80065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e008      	b.n	800431a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	a7fdabf8 	.word	0xa7fdabf8
 8004338:	cccccccd 	.word	0xcccccccd
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	58025408 	.word	0x58025408
 8004380:	5802541c 	.word	0x5802541c
 8004384:	58025430 	.word	0x58025430
 8004388:	58025444 	.word	0x58025444
 800438c:	58025458 	.word	0x58025458
 8004390:	5802546c 	.word	0x5802546c
 8004394:	58025480 	.word	0x58025480
 8004398:	58025494 	.word	0x58025494

0800439c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1a8      	b.n	8004700 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a82      	ldr	r2, [pc, #520]	; (80045bc <HAL_DMA_DeInit+0x220>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d04a      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_DMA_DeInit+0x224>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d045      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7f      	ldr	r2, [pc, #508]	; (80045c4 <HAL_DMA_DeInit+0x228>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d040      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7d      	ldr	r2, [pc, #500]	; (80045c8 <HAL_DMA_DeInit+0x22c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d03b      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_DMA_DeInit+0x230>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d036      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a7a      	ldr	r2, [pc, #488]	; (80045d0 <HAL_DMA_DeInit+0x234>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d031      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a79      	ldr	r2, [pc, #484]	; (80045d4 <HAL_DMA_DeInit+0x238>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d02c      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a77      	ldr	r2, [pc, #476]	; (80045d8 <HAL_DMA_DeInit+0x23c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d027      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a76      	ldr	r2, [pc, #472]	; (80045dc <HAL_DMA_DeInit+0x240>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d022      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a74      	ldr	r2, [pc, #464]	; (80045e0 <HAL_DMA_DeInit+0x244>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01d      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a73      	ldr	r2, [pc, #460]	; (80045e4 <HAL_DMA_DeInit+0x248>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d018      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a71      	ldr	r2, [pc, #452]	; (80045e8 <HAL_DMA_DeInit+0x24c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a70      	ldr	r2, [pc, #448]	; (80045ec <HAL_DMA_DeInit+0x250>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_DMA_DeInit+0x254>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6d      	ldr	r2, [pc, #436]	; (80045f4 <HAL_DMA_DeInit+0x258>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_DMA_DeInit+0xb2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6b      	ldr	r2, [pc, #428]	; (80045f8 <HAL_DMA_DeInit+0x25c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <HAL_DMA_DeInit+0xc4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e007      	b.n	8004470 <HAL_DMA_DeInit+0xd4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a51      	ldr	r2, [pc, #324]	; (80045bc <HAL_DMA_DeInit+0x220>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d04a      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a50      	ldr	r2, [pc, #320]	; (80045c0 <HAL_DMA_DeInit+0x224>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d045      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a4e      	ldr	r2, [pc, #312]	; (80045c4 <HAL_DMA_DeInit+0x228>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d040      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4d      	ldr	r2, [pc, #308]	; (80045c8 <HAL_DMA_DeInit+0x22c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d03b      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a4b      	ldr	r2, [pc, #300]	; (80045cc <HAL_DMA_DeInit+0x230>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d036      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a4a      	ldr	r2, [pc, #296]	; (80045d0 <HAL_DMA_DeInit+0x234>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d031      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a48      	ldr	r2, [pc, #288]	; (80045d4 <HAL_DMA_DeInit+0x238>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d02c      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a47      	ldr	r2, [pc, #284]	; (80045d8 <HAL_DMA_DeInit+0x23c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d027      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a45      	ldr	r2, [pc, #276]	; (80045dc <HAL_DMA_DeInit+0x240>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d022      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <HAL_DMA_DeInit+0x244>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d01d      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a42      	ldr	r2, [pc, #264]	; (80045e4 <HAL_DMA_DeInit+0x248>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a41      	ldr	r2, [pc, #260]	; (80045e8 <HAL_DMA_DeInit+0x24c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3f      	ldr	r2, [pc, #252]	; (80045ec <HAL_DMA_DeInit+0x250>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00e      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3e      	ldr	r2, [pc, #248]	; (80045f0 <HAL_DMA_DeInit+0x254>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3c      	ldr	r2, [pc, #240]	; (80045f4 <HAL_DMA_DeInit+0x258>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_DMA_DeInit+0x174>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3b      	ldr	r2, [pc, #236]	; (80045f8 <HAL_DMA_DeInit+0x25c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <HAL_DMA_DeInit+0x178>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_DMA_DeInit+0x17a>
 8004514:	2300      	movs	r3, #0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d025      	beq.n	8004566 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2221      	movs	r2, #33	; 0x21
 8004548:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fe7a 	bl	8006244 <DMA_CalcBaseAndBitshift>
 8004550:	4603      	mov	r3, r0
 8004552:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	223f      	movs	r2, #63	; 0x3f
 800455e:	409a      	lsls	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e081      	b.n	800466a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a24      	ldr	r2, [pc, #144]	; (80045fc <HAL_DMA_DeInit+0x260>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d022      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a22      	ldr	r2, [pc, #136]	; (8004600 <HAL_DMA_DeInit+0x264>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01d      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	; (8004604 <HAL_DMA_DeInit+0x268>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d018      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_DMA_DeInit+0x26c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_DMA_DeInit+0x270>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00e      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_DMA_DeInit+0x274>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_DMA_DeInit+0x278>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_DMA_DeInit+0x21a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_DMA_DeInit+0x27c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d132      	bne.n	800461c <HAL_DMA_DeInit+0x280>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e031      	b.n	800461e <HAL_DMA_DeInit+0x282>
 80045ba:	bf00      	nop
 80045bc:	40020010 	.word	0x40020010
 80045c0:	40020028 	.word	0x40020028
 80045c4:	40020040 	.word	0x40020040
 80045c8:	40020058 	.word	0x40020058
 80045cc:	40020070 	.word	0x40020070
 80045d0:	40020088 	.word	0x40020088
 80045d4:	400200a0 	.word	0x400200a0
 80045d8:	400200b8 	.word	0x400200b8
 80045dc:	40020410 	.word	0x40020410
 80045e0:	40020428 	.word	0x40020428
 80045e4:	40020440 	.word	0x40020440
 80045e8:	40020458 	.word	0x40020458
 80045ec:	40020470 	.word	0x40020470
 80045f0:	40020488 	.word	0x40020488
 80045f4:	400204a0 	.word	0x400204a0
 80045f8:	400204b8 	.word	0x400204b8
 80045fc:	58025408 	.word	0x58025408
 8004600:	5802541c 	.word	0x5802541c
 8004604:	58025430 	.word	0x58025430
 8004608:	58025444 	.word	0x58025444
 800460c:	58025458 	.word	0x58025458
 8004610:	5802546c 	.word	0x5802546c
 8004614:	58025480 	.word	0x58025480
 8004618:	58025494 	.word	0x58025494
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d021      	beq.n	8004666 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 fdfa 	bl	8006244 <DMA_CalcBaseAndBitshift>
 8004650:	4603      	mov	r3, r0
 8004652:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	e001      	b.n	800466a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e04a      	b.n	8004700 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f001 ff18 	bl	80064a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004688:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00f      	beq.n	80046b2 <HAL_DMA_DeInit+0x316>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d80b      	bhi.n	80046b2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 ff9a 	bl	80065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046b0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e226      	b.n	8004b72 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_DMA_Start_IT+0x2a>
 800472e:	2302      	movs	r3, #2
 8004730:	e21f      	b.n	8004b72 <HAL_DMA_Start_IT+0x46a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	f040 820a 	bne.w	8004b5c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a68      	ldr	r2, [pc, #416]	; (80048fc <HAL_DMA_Start_IT+0x1f4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04a      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a66      	ldr	r2, [pc, #408]	; (8004900 <HAL_DMA_Start_IT+0x1f8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d045      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a65      	ldr	r2, [pc, #404]	; (8004904 <HAL_DMA_Start_IT+0x1fc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d040      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a63      	ldr	r2, [pc, #396]	; (8004908 <HAL_DMA_Start_IT+0x200>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d03b      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a62      	ldr	r2, [pc, #392]	; (800490c <HAL_DMA_Start_IT+0x204>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d036      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a60      	ldr	r2, [pc, #384]	; (8004910 <HAL_DMA_Start_IT+0x208>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a5f      	ldr	r2, [pc, #380]	; (8004914 <HAL_DMA_Start_IT+0x20c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d02c      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_DMA_Start_IT+0x210>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a5c      	ldr	r2, [pc, #368]	; (800491c <HAL_DMA_Start_IT+0x214>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a5a      	ldr	r2, [pc, #360]	; (8004920 <HAL_DMA_Start_IT+0x218>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a59      	ldr	r2, [pc, #356]	; (8004924 <HAL_DMA_Start_IT+0x21c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a57      	ldr	r2, [pc, #348]	; (8004928 <HAL_DMA_Start_IT+0x220>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a56      	ldr	r2, [pc, #344]	; (800492c <HAL_DMA_Start_IT+0x224>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a54      	ldr	r2, [pc, #336]	; (8004930 <HAL_DMA_Start_IT+0x228>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a53      	ldr	r2, [pc, #332]	; (8004934 <HAL_DMA_Start_IT+0x22c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_Start_IT+0xee>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a51      	ldr	r2, [pc, #324]	; (8004938 <HAL_DMA_Start_IT+0x230>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <HAL_DMA_Start_IT+0x100>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e007      	b.n	8004818 <HAL_DMA_Start_IT+0x110>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f001 fb64 	bl	8005eec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a34      	ldr	r2, [pc, #208]	; (80048fc <HAL_DMA_Start_IT+0x1f4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d04a      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a33      	ldr	r2, [pc, #204]	; (8004900 <HAL_DMA_Start_IT+0x1f8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d045      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a31      	ldr	r2, [pc, #196]	; (8004904 <HAL_DMA_Start_IT+0x1fc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d040      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_DMA_Start_IT+0x200>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d03b      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2e      	ldr	r2, [pc, #184]	; (800490c <HAL_DMA_Start_IT+0x204>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d036      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HAL_DMA_Start_IT+0x208>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d031      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <HAL_DMA_Start_IT+0x20c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d02c      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <HAL_DMA_Start_IT+0x210>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d027      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a28      	ldr	r2, [pc, #160]	; (800491c <HAL_DMA_Start_IT+0x214>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d022      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a27      	ldr	r2, [pc, #156]	; (8004920 <HAL_DMA_Start_IT+0x218>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d01d      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <HAL_DMA_Start_IT+0x21c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d018      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a24      	ldr	r2, [pc, #144]	; (8004928 <HAL_DMA_Start_IT+0x220>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a22      	ldr	r2, [pc, #136]	; (800492c <HAL_DMA_Start_IT+0x224>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a21      	ldr	r2, [pc, #132]	; (8004930 <HAL_DMA_Start_IT+0x228>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <HAL_DMA_Start_IT+0x22c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_DMA_Start_IT+0x1bc>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <HAL_DMA_Start_IT+0x230>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA_Start_IT+0x1c0>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_DMA_Start_IT+0x1c2>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d036      	beq.n	800493c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 021e 	bic.w	r2, r3, #30
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0216 	orr.w	r2, r2, #22
 80048e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d03e      	beq.n	8004968 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0208 	orr.w	r2, r2, #8
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e035      	b.n	8004968 <HAL_DMA_Start_IT+0x260>
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 020e 	bic.w	r2, r3, #14
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 020a 	orr.w	r2, r2, #10
 800494e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0204 	orr.w	r2, r2, #4
 8004966:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a83      	ldr	r2, [pc, #524]	; (8004b7c <HAL_DMA_Start_IT+0x474>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d072      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a82      	ldr	r2, [pc, #520]	; (8004b80 <HAL_DMA_Start_IT+0x478>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d06d      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a80      	ldr	r2, [pc, #512]	; (8004b84 <HAL_DMA_Start_IT+0x47c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d068      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7f      	ldr	r2, [pc, #508]	; (8004b88 <HAL_DMA_Start_IT+0x480>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d063      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7d      	ldr	r2, [pc, #500]	; (8004b8c <HAL_DMA_Start_IT+0x484>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d05e      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7c      	ldr	r2, [pc, #496]	; (8004b90 <HAL_DMA_Start_IT+0x488>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d059      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a7a      	ldr	r2, [pc, #488]	; (8004b94 <HAL_DMA_Start_IT+0x48c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d054      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a79      	ldr	r2, [pc, #484]	; (8004b98 <HAL_DMA_Start_IT+0x490>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d04f      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a77      	ldr	r2, [pc, #476]	; (8004b9c <HAL_DMA_Start_IT+0x494>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d04a      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a76      	ldr	r2, [pc, #472]	; (8004ba0 <HAL_DMA_Start_IT+0x498>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d045      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a74      	ldr	r2, [pc, #464]	; (8004ba4 <HAL_DMA_Start_IT+0x49c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d040      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a73      	ldr	r2, [pc, #460]	; (8004ba8 <HAL_DMA_Start_IT+0x4a0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d03b      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a71      	ldr	r2, [pc, #452]	; (8004bac <HAL_DMA_Start_IT+0x4a4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d036      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a70      	ldr	r2, [pc, #448]	; (8004bb0 <HAL_DMA_Start_IT+0x4a8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d031      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a6e      	ldr	r2, [pc, #440]	; (8004bb4 <HAL_DMA_Start_IT+0x4ac>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d02c      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6d      	ldr	r2, [pc, #436]	; (8004bb8 <HAL_DMA_Start_IT+0x4b0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d027      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6b      	ldr	r2, [pc, #428]	; (8004bbc <HAL_DMA_Start_IT+0x4b4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d022      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6a      	ldr	r2, [pc, #424]	; (8004bc0 <HAL_DMA_Start_IT+0x4b8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d01d      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a68      	ldr	r2, [pc, #416]	; (8004bc4 <HAL_DMA_Start_IT+0x4bc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d018      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a67      	ldr	r2, [pc, #412]	; (8004bc8 <HAL_DMA_Start_IT+0x4c0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a65      	ldr	r2, [pc, #404]	; (8004bcc <HAL_DMA_Start_IT+0x4c4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00e      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a64      	ldr	r2, [pc, #400]	; (8004bd0 <HAL_DMA_Start_IT+0x4c8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a62      	ldr	r2, [pc, #392]	; (8004bd4 <HAL_DMA_Start_IT+0x4cc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_DMA_Start_IT+0x350>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a61      	ldr	r2, [pc, #388]	; (8004bd8 <HAL_DMA_Start_IT+0x4d0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d101      	bne.n	8004a5c <HAL_DMA_Start_IT+0x354>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_DMA_Start_IT+0x356>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a37      	ldr	r2, [pc, #220]	; (8004b7c <HAL_DMA_Start_IT+0x474>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a36      	ldr	r2, [pc, #216]	; (8004b80 <HAL_DMA_Start_IT+0x478>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a34      	ldr	r2, [pc, #208]	; (8004b84 <HAL_DMA_Start_IT+0x47c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a33      	ldr	r2, [pc, #204]	; (8004b88 <HAL_DMA_Start_IT+0x480>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a31      	ldr	r2, [pc, #196]	; (8004b8c <HAL_DMA_Start_IT+0x484>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a30      	ldr	r2, [pc, #192]	; (8004b90 <HAL_DMA_Start_IT+0x488>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	; (8004b94 <HAL_DMA_Start_IT+0x48c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2d      	ldr	r2, [pc, #180]	; (8004b98 <HAL_DMA_Start_IT+0x490>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <HAL_DMA_Start_IT+0x494>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <HAL_DMA_Start_IT+0x498>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a28      	ldr	r2, [pc, #160]	; (8004ba4 <HAL_DMA_Start_IT+0x49c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a27      	ldr	r2, [pc, #156]	; (8004ba8 <HAL_DMA_Start_IT+0x4a0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <HAL_DMA_Start_IT+0x4a4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <HAL_DMA_Start_IT+0x4a8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a22      	ldr	r2, [pc, #136]	; (8004bb4 <HAL_DMA_Start_IT+0x4ac>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_DMA_Start_IT+0x430>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a21      	ldr	r2, [pc, #132]	; (8004bb8 <HAL_DMA_Start_IT+0x4b0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d108      	bne.n	8004b4a <HAL_DMA_Start_IT+0x442>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e012      	b.n	8004b70 <HAL_DMA_Start_IT+0x468>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e009      	b.n	8004b70 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40020010 	.word	0x40020010
 8004b80:	40020028 	.word	0x40020028
 8004b84:	40020040 	.word	0x40020040
 8004b88:	40020058 	.word	0x40020058
 8004b8c:	40020070 	.word	0x40020070
 8004b90:	40020088 	.word	0x40020088
 8004b94:	400200a0 	.word	0x400200a0
 8004b98:	400200b8 	.word	0x400200b8
 8004b9c:	40020410 	.word	0x40020410
 8004ba0:	40020428 	.word	0x40020428
 8004ba4:	40020440 	.word	0x40020440
 8004ba8:	40020458 	.word	0x40020458
 8004bac:	40020470 	.word	0x40020470
 8004bb0:	40020488 	.word	0x40020488
 8004bb4:	400204a0 	.word	0x400204a0
 8004bb8:	400204b8 	.word	0x400204b8
 8004bbc:	58025408 	.word	0x58025408
 8004bc0:	5802541c 	.word	0x5802541c
 8004bc4:	58025430 	.word	0x58025430
 8004bc8:	58025444 	.word	0x58025444
 8004bcc:	58025458 	.word	0x58025458
 8004bd0:	5802546c 	.word	0x5802546c
 8004bd4:	58025480 	.word	0x58025480
 8004bd8:	58025494 	.word	0x58025494

08004bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e205      	b.n	8004ffa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2280      	movs	r2, #128	; 0x80
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e1fa      	b.n	8004ffa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a8c      	ldr	r2, [pc, #560]	; (8004e3c <HAL_DMA_Abort_IT+0x260>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d04a      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a8b      	ldr	r2, [pc, #556]	; (8004e40 <HAL_DMA_Abort_IT+0x264>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d045      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a89      	ldr	r2, [pc, #548]	; (8004e44 <HAL_DMA_Abort_IT+0x268>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d040      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a88      	ldr	r2, [pc, #544]	; (8004e48 <HAL_DMA_Abort_IT+0x26c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d03b      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a86      	ldr	r2, [pc, #536]	; (8004e4c <HAL_DMA_Abort_IT+0x270>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d036      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a85      	ldr	r2, [pc, #532]	; (8004e50 <HAL_DMA_Abort_IT+0x274>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d031      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a83      	ldr	r2, [pc, #524]	; (8004e54 <HAL_DMA_Abort_IT+0x278>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02c      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a82      	ldr	r2, [pc, #520]	; (8004e58 <HAL_DMA_Abort_IT+0x27c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d027      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a80      	ldr	r2, [pc, #512]	; (8004e5c <HAL_DMA_Abort_IT+0x280>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d022      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a7f      	ldr	r2, [pc, #508]	; (8004e60 <HAL_DMA_Abort_IT+0x284>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01d      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_DMA_Abort_IT+0x288>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d018      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7c      	ldr	r2, [pc, #496]	; (8004e68 <HAL_DMA_Abort_IT+0x28c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a7a      	ldr	r2, [pc, #488]	; (8004e6c <HAL_DMA_Abort_IT+0x290>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a79      	ldr	r2, [pc, #484]	; (8004e70 <HAL_DMA_Abort_IT+0x294>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a77      	ldr	r2, [pc, #476]	; (8004e74 <HAL_DMA_Abort_IT+0x298>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a76      	ldr	r2, [pc, #472]	; (8004e78 <HAL_DMA_Abort_IT+0x29c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_DMA_Abort_IT+0xcc>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_DMA_Abort_IT+0xce>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d065      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a60      	ldr	r2, [pc, #384]	; (8004e3c <HAL_DMA_Abort_IT+0x260>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d04a      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5e      	ldr	r2, [pc, #376]	; (8004e40 <HAL_DMA_Abort_IT+0x264>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d045      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5d      	ldr	r2, [pc, #372]	; (8004e44 <HAL_DMA_Abort_IT+0x268>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d040      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5b      	ldr	r2, [pc, #364]	; (8004e48 <HAL_DMA_Abort_IT+0x26c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d03b      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5a      	ldr	r2, [pc, #360]	; (8004e4c <HAL_DMA_Abort_IT+0x270>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d036      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a58      	ldr	r2, [pc, #352]	; (8004e50 <HAL_DMA_Abort_IT+0x274>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d031      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a57      	ldr	r2, [pc, #348]	; (8004e54 <HAL_DMA_Abort_IT+0x278>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02c      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a55      	ldr	r2, [pc, #340]	; (8004e58 <HAL_DMA_Abort_IT+0x27c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d027      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a54      	ldr	r2, [pc, #336]	; (8004e5c <HAL_DMA_Abort_IT+0x280>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a52      	ldr	r2, [pc, #328]	; (8004e60 <HAL_DMA_Abort_IT+0x284>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a51      	ldr	r2, [pc, #324]	; (8004e64 <HAL_DMA_Abort_IT+0x288>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a4f      	ldr	r2, [pc, #316]	; (8004e68 <HAL_DMA_Abort_IT+0x28c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a4e      	ldr	r2, [pc, #312]	; (8004e6c <HAL_DMA_Abort_IT+0x290>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a4c      	ldr	r2, [pc, #304]	; (8004e70 <HAL_DMA_Abort_IT+0x294>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a4b      	ldr	r2, [pc, #300]	; (8004e74 <HAL_DMA_Abort_IT+0x298>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_DMA_Abort_IT+0x17a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a49      	ldr	r2, [pc, #292]	; (8004e78 <HAL_DMA_Abort_IT+0x29c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <HAL_DMA_Abort_IT+0x18c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e147      	b.n	8004ff8 <HAL_DMA_Abort_IT+0x41c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e13e      	b.n	8004ff8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 020e 	bic.w	r2, r2, #14
 8004d88:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <HAL_DMA_Abort_IT+0x260>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_DMA_Abort_IT+0x264>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <HAL_DMA_Abort_IT+0x268>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_DMA_Abort_IT+0x26c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <HAL_DMA_Abort_IT+0x270>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <HAL_DMA_Abort_IT+0x274>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_DMA_Abort_IT+0x278>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <HAL_DMA_Abort_IT+0x27c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <HAL_DMA_Abort_IT+0x280>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <HAL_DMA_Abort_IT+0x284>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_DMA_Abort_IT+0x288>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <HAL_DMA_Abort_IT+0x28c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <HAL_DMA_Abort_IT+0x290>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <HAL_DMA_Abort_IT+0x294>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_DMA_Abort_IT+0x298>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x24e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <HAL_DMA_Abort_IT+0x29c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d128      	bne.n	8004e7c <HAL_DMA_Abort_IT+0x2a0>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e027      	b.n	8004e8c <HAL_DMA_Abort_IT+0x2b0>
 8004e3c:	40020010 	.word	0x40020010
 8004e40:	40020028 	.word	0x40020028
 8004e44:	40020040 	.word	0x40020040
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	40020070 	.word	0x40020070
 8004e50:	40020088 	.word	0x40020088
 8004e54:	400200a0 	.word	0x400200a0
 8004e58:	400200b8 	.word	0x400200b8
 8004e5c:	40020410 	.word	0x40020410
 8004e60:	40020428 	.word	0x40020428
 8004e64:	40020440 	.word	0x40020440
 8004e68:	40020458 	.word	0x40020458
 8004e6c:	40020470 	.word	0x40020470
 8004e70:	40020488 	.word	0x40020488
 8004e74:	400204a0 	.word	0x400204a0
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5c      	ldr	r2, [pc, #368]	; (8005004 <HAL_DMA_Abort_IT+0x428>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d072      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a5b      	ldr	r2, [pc, #364]	; (8005008 <HAL_DMA_Abort_IT+0x42c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d06d      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a59      	ldr	r2, [pc, #356]	; (800500c <HAL_DMA_Abort_IT+0x430>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d068      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a58      	ldr	r2, [pc, #352]	; (8005010 <HAL_DMA_Abort_IT+0x434>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d063      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a56      	ldr	r2, [pc, #344]	; (8005014 <HAL_DMA_Abort_IT+0x438>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d05e      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a55      	ldr	r2, [pc, #340]	; (8005018 <HAL_DMA_Abort_IT+0x43c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d059      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a53      	ldr	r2, [pc, #332]	; (800501c <HAL_DMA_Abort_IT+0x440>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d054      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_DMA_Abort_IT+0x444>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d04f      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a50      	ldr	r2, [pc, #320]	; (8005024 <HAL_DMA_Abort_IT+0x448>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d04a      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a4f      	ldr	r2, [pc, #316]	; (8005028 <HAL_DMA_Abort_IT+0x44c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d045      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a4d      	ldr	r2, [pc, #308]	; (800502c <HAL_DMA_Abort_IT+0x450>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d040      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a4c      	ldr	r2, [pc, #304]	; (8005030 <HAL_DMA_Abort_IT+0x454>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a4a      	ldr	r2, [pc, #296]	; (8005034 <HAL_DMA_Abort_IT+0x458>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d036      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a49      	ldr	r2, [pc, #292]	; (8005038 <HAL_DMA_Abort_IT+0x45c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d031      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a47      	ldr	r2, [pc, #284]	; (800503c <HAL_DMA_Abort_IT+0x460>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02c      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a46      	ldr	r2, [pc, #280]	; (8005040 <HAL_DMA_Abort_IT+0x464>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d027      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a44      	ldr	r2, [pc, #272]	; (8005044 <HAL_DMA_Abort_IT+0x468>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_DMA_Abort_IT+0x46c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01d      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a41      	ldr	r2, [pc, #260]	; (800504c <HAL_DMA_Abort_IT+0x470>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a40      	ldr	r2, [pc, #256]	; (8005050 <HAL_DMA_Abort_IT+0x474>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a3e      	ldr	r2, [pc, #248]	; (8005054 <HAL_DMA_Abort_IT+0x478>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3d      	ldr	r2, [pc, #244]	; (8005058 <HAL_DMA_Abort_IT+0x47c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3b      	ldr	r2, [pc, #236]	; (800505c <HAL_DMA_Abort_IT+0x480>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_DMA_Abort_IT+0x3a0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <HAL_DMA_Abort_IT+0x484>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_DMA_Abort_IT+0x3a4>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_DMA_Abort_IT+0x3a6>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d028      	beq.n	8004fd8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fcc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40020010 	.word	0x40020010
 8005008:	40020028 	.word	0x40020028
 800500c:	40020040 	.word	0x40020040
 8005010:	40020058 	.word	0x40020058
 8005014:	40020070 	.word	0x40020070
 8005018:	40020088 	.word	0x40020088
 800501c:	400200a0 	.word	0x400200a0
 8005020:	400200b8 	.word	0x400200b8
 8005024:	40020410 	.word	0x40020410
 8005028:	40020428 	.word	0x40020428
 800502c:	40020440 	.word	0x40020440
 8005030:	40020458 	.word	0x40020458
 8005034:	40020470 	.word	0x40020470
 8005038:	40020488 	.word	0x40020488
 800503c:	400204a0 	.word	0x400204a0
 8005040:	400204b8 	.word	0x400204b8
 8005044:	58025408 	.word	0x58025408
 8005048:	5802541c 	.word	0x5802541c
 800504c:	58025430 	.word	0x58025430
 8005050:	58025444 	.word	0x58025444
 8005054:	58025458 	.word	0x58025458
 8005058:	5802546c 	.word	0x5802546c
 800505c:	58025480 	.word	0x58025480
 8005060:	58025494 	.word	0x58025494

08005064 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_DMA_IRQHandler+0x1ac>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a67      	ldr	r2, [pc, #412]	; (8005214 <HAL_DMA_IRQHandler+0x1b0>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a9b      	lsrs	r3, r3, #10
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a5f      	ldr	r2, [pc, #380]	; (8005218 <HAL_DMA_IRQHandler+0x1b4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04a      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a5d      	ldr	r2, [pc, #372]	; (800521c <HAL_DMA_IRQHandler+0x1b8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d045      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a5c      	ldr	r2, [pc, #368]	; (8005220 <HAL_DMA_IRQHandler+0x1bc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d040      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5a      	ldr	r2, [pc, #360]	; (8005224 <HAL_DMA_IRQHandler+0x1c0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d03b      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a59      	ldr	r2, [pc, #356]	; (8005228 <HAL_DMA_IRQHandler+0x1c4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d036      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a57      	ldr	r2, [pc, #348]	; (800522c <HAL_DMA_IRQHandler+0x1c8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d031      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a56      	ldr	r2, [pc, #344]	; (8005230 <HAL_DMA_IRQHandler+0x1cc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d02c      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a54      	ldr	r2, [pc, #336]	; (8005234 <HAL_DMA_IRQHandler+0x1d0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d027      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a53      	ldr	r2, [pc, #332]	; (8005238 <HAL_DMA_IRQHandler+0x1d4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a51      	ldr	r2, [pc, #324]	; (800523c <HAL_DMA_IRQHandler+0x1d8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01d      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a50      	ldr	r2, [pc, #320]	; (8005240 <HAL_DMA_IRQHandler+0x1dc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a4e      	ldr	r2, [pc, #312]	; (8005244 <HAL_DMA_IRQHandler+0x1e0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a4d      	ldr	r2, [pc, #308]	; (8005248 <HAL_DMA_IRQHandler+0x1e4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a4b      	ldr	r2, [pc, #300]	; (800524c <HAL_DMA_IRQHandler+0x1e8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a4a      	ldr	r2, [pc, #296]	; (8005250 <HAL_DMA_IRQHandler+0x1ec>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_DMA_IRQHandler+0xd2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a48      	ldr	r2, [pc, #288]	; (8005254 <HAL_DMA_IRQHandler+0x1f0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_DMA_IRQHandler+0xd6>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_DMA_IRQHandler+0xd8>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 842b 	beq.w	8005998 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2208      	movs	r2, #8
 800514c:	409a      	lsls	r2, r3
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80a2 	beq.w	800529c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2e      	ldr	r2, [pc, #184]	; (8005218 <HAL_DMA_IRQHandler+0x1b4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d04a      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <HAL_DMA_IRQHandler+0x1b8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d045      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <HAL_DMA_IRQHandler+0x1bc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d040      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <HAL_DMA_IRQHandler+0x1c0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d03b      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_DMA_IRQHandler+0x1c4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d036      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a27      	ldr	r2, [pc, #156]	; (800522c <HAL_DMA_IRQHandler+0x1c8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d031      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a25      	ldr	r2, [pc, #148]	; (8005230 <HAL_DMA_IRQHandler+0x1cc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d02c      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a24      	ldr	r2, [pc, #144]	; (8005234 <HAL_DMA_IRQHandler+0x1d0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d027      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a22      	ldr	r2, [pc, #136]	; (8005238 <HAL_DMA_IRQHandler+0x1d4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a21      	ldr	r2, [pc, #132]	; (800523c <HAL_DMA_IRQHandler+0x1d8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_DMA_IRQHandler+0x1dc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <HAL_DMA_IRQHandler+0x1e0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <HAL_DMA_IRQHandler+0x1e4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1b      	ldr	r2, [pc, #108]	; (800524c <HAL_DMA_IRQHandler+0x1e8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <HAL_DMA_IRQHandler+0x1ec>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x194>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a18      	ldr	r2, [pc, #96]	; (8005254 <HAL_DMA_IRQHandler+0x1f0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d12f      	bne.n	8005258 <HAL_DMA_IRQHandler+0x1f4>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e02e      	b.n	800526c <HAL_DMA_IRQHandler+0x208>
 800520e:	bf00      	nop
 8005210:	24000484 	.word	0x24000484
 8005214:	1b4e81b5 	.word	0x1b4e81b5
 8005218:	40020010 	.word	0x40020010
 800521c:	40020028 	.word	0x40020028
 8005220:	40020040 	.word	0x40020040
 8005224:	40020058 	.word	0x40020058
 8005228:	40020070 	.word	0x40020070
 800522c:	40020088 	.word	0x40020088
 8005230:	400200a0 	.word	0x400200a0
 8005234:	400200b8 	.word	0x400200b8
 8005238:	40020410 	.word	0x40020410
 800523c:	40020428 	.word	0x40020428
 8005240:	40020440 	.word	0x40020440
 8005244:	40020458 	.word	0x40020458
 8005248:	40020470 	.word	0x40020470
 800524c:	40020488 	.word	0x40020488
 8005250:	400204a0 	.word	0x400204a0
 8005254:	400204b8 	.word	0x400204b8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	bf14      	ite	ne
 8005266:	2301      	movne	r3, #1
 8005268:	2300      	moveq	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d015      	beq.n	800529c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0204 	bic.w	r2, r2, #4
 800527e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2208      	movs	r2, #8
 800528a:	409a      	lsls	r2, r3
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d06e      	beq.n	8005390 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a69      	ldr	r2, [pc, #420]	; (800545c <HAL_DMA_IRQHandler+0x3f8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d04a      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a67      	ldr	r2, [pc, #412]	; (8005460 <HAL_DMA_IRQHandler+0x3fc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d045      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a66      	ldr	r2, [pc, #408]	; (8005464 <HAL_DMA_IRQHandler+0x400>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d040      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a64      	ldr	r2, [pc, #400]	; (8005468 <HAL_DMA_IRQHandler+0x404>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d03b      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a63      	ldr	r2, [pc, #396]	; (800546c <HAL_DMA_IRQHandler+0x408>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d036      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a61      	ldr	r2, [pc, #388]	; (8005470 <HAL_DMA_IRQHandler+0x40c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d031      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a60      	ldr	r2, [pc, #384]	; (8005474 <HAL_DMA_IRQHandler+0x410>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d02c      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5e      	ldr	r2, [pc, #376]	; (8005478 <HAL_DMA_IRQHandler+0x414>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d027      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a5d      	ldr	r2, [pc, #372]	; (800547c <HAL_DMA_IRQHandler+0x418>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a5b      	ldr	r2, [pc, #364]	; (8005480 <HAL_DMA_IRQHandler+0x41c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01d      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5a      	ldr	r2, [pc, #360]	; (8005484 <HAL_DMA_IRQHandler+0x420>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a58      	ldr	r2, [pc, #352]	; (8005488 <HAL_DMA_IRQHandler+0x424>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a57      	ldr	r2, [pc, #348]	; (800548c <HAL_DMA_IRQHandler+0x428>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a55      	ldr	r2, [pc, #340]	; (8005490 <HAL_DMA_IRQHandler+0x42c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a54      	ldr	r2, [pc, #336]	; (8005494 <HAL_DMA_IRQHandler+0x430>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2ee>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a52      	ldr	r2, [pc, #328]	; (8005498 <HAL_DMA_IRQHandler+0x434>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10a      	bne.n	8005368 <HAL_DMA_IRQHandler+0x304>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e003      	b.n	8005370 <HAL_DMA_IRQHandler+0x30c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2201      	movs	r2, #1
 800537e:	409a      	lsls	r2, r3
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	f043 0202 	orr.w	r2, r3, #2
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2204      	movs	r2, #4
 800539a:	409a      	lsls	r2, r3
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 808f 	beq.w	80054c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2c      	ldr	r2, [pc, #176]	; (800545c <HAL_DMA_IRQHandler+0x3f8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d04a      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <HAL_DMA_IRQHandler+0x3fc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d045      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a29      	ldr	r2, [pc, #164]	; (8005464 <HAL_DMA_IRQHandler+0x400>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d040      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a27      	ldr	r2, [pc, #156]	; (8005468 <HAL_DMA_IRQHandler+0x404>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d03b      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a26      	ldr	r2, [pc, #152]	; (800546c <HAL_DMA_IRQHandler+0x408>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d036      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a24      	ldr	r2, [pc, #144]	; (8005470 <HAL_DMA_IRQHandler+0x40c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d031      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a23      	ldr	r2, [pc, #140]	; (8005474 <HAL_DMA_IRQHandler+0x410>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d02c      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_DMA_IRQHandler+0x414>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d027      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a20      	ldr	r2, [pc, #128]	; (800547c <HAL_DMA_IRQHandler+0x418>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <HAL_DMA_IRQHandler+0x41c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01d      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <HAL_DMA_IRQHandler+0x420>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <HAL_DMA_IRQHandler+0x424>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <HAL_DMA_IRQHandler+0x428>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_DMA_IRQHandler+0x42c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a17      	ldr	r2, [pc, #92]	; (8005494 <HAL_DMA_IRQHandler+0x430>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_DMA_IRQHandler+0x3e2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <HAL_DMA_IRQHandler+0x434>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d12a      	bne.n	800549c <HAL_DMA_IRQHandler+0x438>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf14      	ite	ne
 8005454:	2301      	movne	r3, #1
 8005456:	2300      	moveq	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e023      	b.n	80054a4 <HAL_DMA_IRQHandler+0x440>
 800545c:	40020010 	.word	0x40020010
 8005460:	40020028 	.word	0x40020028
 8005464:	40020040 	.word	0x40020040
 8005468:	40020058 	.word	0x40020058
 800546c:	40020070 	.word	0x40020070
 8005470:	40020088 	.word	0x40020088
 8005474:	400200a0 	.word	0x400200a0
 8005478:	400200b8 	.word	0x400200b8
 800547c:	40020410 	.word	0x40020410
 8005480:	40020428 	.word	0x40020428
 8005484:	40020440 	.word	0x40020440
 8005488:	40020458 	.word	0x40020458
 800548c:	40020470 	.word	0x40020470
 8005490:	40020488 	.word	0x40020488
 8005494:	400204a0 	.word	0x400204a0
 8005498:	400204b8 	.word	0x400204b8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00d      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	2204      	movs	r2, #4
 80054b2:	409a      	lsls	r2, r3
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	f043 0204 	orr.w	r2, r3, #4
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2210      	movs	r2, #16
 80054ce:	409a      	lsls	r2, r3
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80a6 	beq.w	8005626 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a85      	ldr	r2, [pc, #532]	; (80056f4 <HAL_DMA_IRQHandler+0x690>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04a      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a83      	ldr	r2, [pc, #524]	; (80056f8 <HAL_DMA_IRQHandler+0x694>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d045      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a82      	ldr	r2, [pc, #520]	; (80056fc <HAL_DMA_IRQHandler+0x698>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a80      	ldr	r2, [pc, #512]	; (8005700 <HAL_DMA_IRQHandler+0x69c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d03b      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a7f      	ldr	r2, [pc, #508]	; (8005704 <HAL_DMA_IRQHandler+0x6a0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d036      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a7d      	ldr	r2, [pc, #500]	; (8005708 <HAL_DMA_IRQHandler+0x6a4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d031      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a7c      	ldr	r2, [pc, #496]	; (800570c <HAL_DMA_IRQHandler+0x6a8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d02c      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a7a      	ldr	r2, [pc, #488]	; (8005710 <HAL_DMA_IRQHandler+0x6ac>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d027      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a79      	ldr	r2, [pc, #484]	; (8005714 <HAL_DMA_IRQHandler+0x6b0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a77      	ldr	r2, [pc, #476]	; (8005718 <HAL_DMA_IRQHandler+0x6b4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a76      	ldr	r2, [pc, #472]	; (800571c <HAL_DMA_IRQHandler+0x6b8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a74      	ldr	r2, [pc, #464]	; (8005720 <HAL_DMA_IRQHandler+0x6bc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a73      	ldr	r2, [pc, #460]	; (8005724 <HAL_DMA_IRQHandler+0x6c0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a71      	ldr	r2, [pc, #452]	; (8005728 <HAL_DMA_IRQHandler+0x6c4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a70      	ldr	r2, [pc, #448]	; (800572c <HAL_DMA_IRQHandler+0x6c8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_DMA_IRQHandler+0x516>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6e      	ldr	r2, [pc, #440]	; (8005730 <HAL_DMA_IRQHandler+0x6cc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d10a      	bne.n	8005590 <HAL_DMA_IRQHandler+0x52c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e009      	b.n	80055a4 <HAL_DMA_IRQHandler+0x540>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf14      	ite	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	2300      	moveq	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d03e      	beq.n	8005626 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	2210      	movs	r2, #16
 80055b2:	409a      	lsls	r2, r3
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d108      	bne.n	80055e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d024      	beq.n	8005626 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
 80055e4:	e01f      	b.n	8005626 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
 80055f6:	e016      	b.n	8005626 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0208 	bic.w	r2, r2, #8
 8005614:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	2220      	movs	r2, #32
 8005630:	409a      	lsls	r2, r3
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8110 	beq.w	800585c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <HAL_DMA_IRQHandler+0x690>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d04a      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <HAL_DMA_IRQHandler+0x694>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d045      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a29      	ldr	r2, [pc, #164]	; (80056fc <HAL_DMA_IRQHandler+0x698>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d040      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a28      	ldr	r2, [pc, #160]	; (8005700 <HAL_DMA_IRQHandler+0x69c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d03b      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a26      	ldr	r2, [pc, #152]	; (8005704 <HAL_DMA_IRQHandler+0x6a0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d036      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a25      	ldr	r2, [pc, #148]	; (8005708 <HAL_DMA_IRQHandler+0x6a4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d031      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a23      	ldr	r2, [pc, #140]	; (800570c <HAL_DMA_IRQHandler+0x6a8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d02c      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a22      	ldr	r2, [pc, #136]	; (8005710 <HAL_DMA_IRQHandler+0x6ac>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d027      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a20      	ldr	r2, [pc, #128]	; (8005714 <HAL_DMA_IRQHandler+0x6b0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1f      	ldr	r2, [pc, #124]	; (8005718 <HAL_DMA_IRQHandler+0x6b4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01d      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_DMA_IRQHandler+0x6b8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_DMA_IRQHandler+0x6bc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_DMA_IRQHandler+0x6c0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a19      	ldr	r2, [pc, #100]	; (8005728 <HAL_DMA_IRQHandler+0x6c4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a17      	ldr	r2, [pc, #92]	; (800572c <HAL_DMA_IRQHandler+0x6c8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_DMA_IRQHandler+0x678>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <HAL_DMA_IRQHandler+0x6cc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d12b      	bne.n	8005734 <HAL_DMA_IRQHandler+0x6d0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e02a      	b.n	8005748 <HAL_DMA_IRQHandler+0x6e4>
 80056f2:	bf00      	nop
 80056f4:	40020010 	.word	0x40020010
 80056f8:	40020028 	.word	0x40020028
 80056fc:	40020040 	.word	0x40020040
 8005700:	40020058 	.word	0x40020058
 8005704:	40020070 	.word	0x40020070
 8005708:	40020088 	.word	0x40020088
 800570c:	400200a0 	.word	0x400200a0
 8005710:	400200b8 	.word	0x400200b8
 8005714:	40020410 	.word	0x40020410
 8005718:	40020428 	.word	0x40020428
 800571c:	40020440 	.word	0x40020440
 8005720:	40020458 	.word	0x40020458
 8005724:	40020470 	.word	0x40020470
 8005728:	40020488 	.word	0x40020488
 800572c:	400204a0 	.word	0x400204a0
 8005730:	400204b8 	.word	0x400204b8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8087 	beq.w	800585c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2220      	movs	r2, #32
 8005758:	409a      	lsls	r2, r3
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b04      	cmp	r3, #4
 8005768:	d139      	bne.n	80057de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0216 	bic.w	r2, r2, #22
 8005778:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005788:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_DMA_IRQHandler+0x736>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0208 	bic.w	r2, r2, #8
 80057a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	223f      	movs	r2, #63	; 0x3f
 80057b4:	409a      	lsls	r2, r3
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 834a 	beq.w	8005e68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
          }
          return;
 80057dc:	e344      	b.n	8005e68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d018      	beq.n	800581e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d02c      	beq.n	800585c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
 800580a:	e027      	b.n	800585c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d023      	beq.n	800585c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
 800581c:	e01e      	b.n	800585c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0210 	bic.w	r2, r2, #16
 800583a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8306 	beq.w	8005e72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8088 	beq.w	8005984 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2204      	movs	r2, #4
 8005878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a7a      	ldr	r2, [pc, #488]	; (8005a6c <HAL_DMA_IRQHandler+0xa08>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d04a      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a79      	ldr	r2, [pc, #484]	; (8005a70 <HAL_DMA_IRQHandler+0xa0c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d045      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a77      	ldr	r2, [pc, #476]	; (8005a74 <HAL_DMA_IRQHandler+0xa10>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d040      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a76      	ldr	r2, [pc, #472]	; (8005a78 <HAL_DMA_IRQHandler+0xa14>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d03b      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a74      	ldr	r2, [pc, #464]	; (8005a7c <HAL_DMA_IRQHandler+0xa18>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d036      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a73      	ldr	r2, [pc, #460]	; (8005a80 <HAL_DMA_IRQHandler+0xa1c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d031      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a71      	ldr	r2, [pc, #452]	; (8005a84 <HAL_DMA_IRQHandler+0xa20>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02c      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a70      	ldr	r2, [pc, #448]	; (8005a88 <HAL_DMA_IRQHandler+0xa24>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d027      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a6e      	ldr	r2, [pc, #440]	; (8005a8c <HAL_DMA_IRQHandler+0xa28>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6d      	ldr	r2, [pc, #436]	; (8005a90 <HAL_DMA_IRQHandler+0xa2c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01d      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a6b      	ldr	r2, [pc, #428]	; (8005a94 <HAL_DMA_IRQHandler+0xa30>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6a      	ldr	r2, [pc, #424]	; (8005a98 <HAL_DMA_IRQHandler+0xa34>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a68      	ldr	r2, [pc, #416]	; (8005a9c <HAL_DMA_IRQHandler+0xa38>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a67      	ldr	r2, [pc, #412]	; (8005aa0 <HAL_DMA_IRQHandler+0xa3c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a65      	ldr	r2, [pc, #404]	; (8005aa4 <HAL_DMA_IRQHandler+0xa40>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_DMA_IRQHandler+0x8b8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a64      	ldr	r2, [pc, #400]	; (8005aa8 <HAL_DMA_IRQHandler+0xa44>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d108      	bne.n	800592e <HAL_DMA_IRQHandler+0x8ca>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e007      	b.n	800593e <HAL_DMA_IRQHandler+0x8da>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	429a      	cmp	r2, r3
 8005948:	d307      	bcc.n	800595a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f2      	bne.n	800593e <HAL_DMA_IRQHandler+0x8da>
 8005958:	e000      	b.n	800595c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800595a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2203      	movs	r2, #3
 800596e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005972:	e003      	b.n	800597c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8272 	beq.w	8005e72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
 8005996:	e26c      	b.n	8005e72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a43      	ldr	r2, [pc, #268]	; (8005aac <HAL_DMA_IRQHandler+0xa48>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d022      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a42      	ldr	r2, [pc, #264]	; (8005ab0 <HAL_DMA_IRQHandler+0xa4c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d01d      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a40      	ldr	r2, [pc, #256]	; (8005ab4 <HAL_DMA_IRQHandler+0xa50>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3f      	ldr	r2, [pc, #252]	; (8005ab8 <HAL_DMA_IRQHandler+0xa54>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a3d      	ldr	r2, [pc, #244]	; (8005abc <HAL_DMA_IRQHandler+0xa58>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <HAL_DMA_IRQHandler+0xa5c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3a      	ldr	r2, [pc, #232]	; (8005ac4 <HAL_DMA_IRQHandler+0xa60>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x984>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a39      	ldr	r2, [pc, #228]	; (8005ac8 <HAL_DMA_IRQHandler+0xa64>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_IRQHandler+0x988>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_DMA_IRQHandler+0x98a>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 823f 	beq.w	8005e72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2204      	movs	r2, #4
 8005a06:	409a      	lsls	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80cd 	beq.w	8005bac <HAL_DMA_IRQHandler+0xb48>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80c7 	beq.w	8005bac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2204      	movs	r2, #4
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d049      	beq.n	8005acc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d109      	bne.n	8005a56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 8210 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a54:	e20a      	b.n	8005e6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8206 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a68:	e200      	b.n	8005e6c <HAL_DMA_IRQHandler+0xe08>
 8005a6a:	bf00      	nop
 8005a6c:	40020010 	.word	0x40020010
 8005a70:	40020028 	.word	0x40020028
 8005a74:	40020040 	.word	0x40020040
 8005a78:	40020058 	.word	0x40020058
 8005a7c:	40020070 	.word	0x40020070
 8005a80:	40020088 	.word	0x40020088
 8005a84:	400200a0 	.word	0x400200a0
 8005a88:	400200b8 	.word	0x400200b8
 8005a8c:	40020410 	.word	0x40020410
 8005a90:	40020428 	.word	0x40020428
 8005a94:	40020440 	.word	0x40020440
 8005a98:	40020458 	.word	0x40020458
 8005a9c:	40020470 	.word	0x40020470
 8005aa0:	40020488 	.word	0x40020488
 8005aa4:	400204a0 	.word	0x400204a0
 8005aa8:	400204b8 	.word	0x400204b8
 8005aac:	58025408 	.word	0x58025408
 8005ab0:	5802541c 	.word	0x5802541c
 8005ab4:	58025430 	.word	0x58025430
 8005ab8:	58025444 	.word	0x58025444
 8005abc:	58025458 	.word	0x58025458
 8005ac0:	5802546c 	.word	0x5802546c
 8005ac4:	58025480 	.word	0x58025480
 8005ac8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d160      	bne.n	8005b98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a8c      	ldr	r2, [pc, #560]	; (8005d0c <HAL_DMA_IRQHandler+0xca8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a8a      	ldr	r2, [pc, #552]	; (8005d10 <HAL_DMA_IRQHandler+0xcac>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a89      	ldr	r2, [pc, #548]	; (8005d14 <HAL_DMA_IRQHandler+0xcb0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a87      	ldr	r2, [pc, #540]	; (8005d18 <HAL_DMA_IRQHandler+0xcb4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a86      	ldr	r2, [pc, #536]	; (8005d1c <HAL_DMA_IRQHandler+0xcb8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a84      	ldr	r2, [pc, #528]	; (8005d20 <HAL_DMA_IRQHandler+0xcbc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a83      	ldr	r2, [pc, #524]	; (8005d24 <HAL_DMA_IRQHandler+0xcc0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a81      	ldr	r2, [pc, #516]	; (8005d28 <HAL_DMA_IRQHandler+0xcc4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a80      	ldr	r2, [pc, #512]	; (8005d2c <HAL_DMA_IRQHandler+0xcc8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a7e      	ldr	r2, [pc, #504]	; (8005d30 <HAL_DMA_IRQHandler+0xccc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7d      	ldr	r2, [pc, #500]	; (8005d34 <HAL_DMA_IRQHandler+0xcd0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7b      	ldr	r2, [pc, #492]	; (8005d38 <HAL_DMA_IRQHandler+0xcd4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7a      	ldr	r2, [pc, #488]	; (8005d3c <HAL_DMA_IRQHandler+0xcd8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a78      	ldr	r2, [pc, #480]	; (8005d40 <HAL_DMA_IRQHandler+0xcdc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a77      	ldr	r2, [pc, #476]	; (8005d44 <HAL_DMA_IRQHandler+0xce0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xb12>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a75      	ldr	r2, [pc, #468]	; (8005d48 <HAL_DMA_IRQHandler+0xce4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d108      	bne.n	8005b88 <HAL_DMA_IRQHandler+0xb24>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0208 	bic.w	r2, r2, #8
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e007      	b.n	8005b98 <HAL_DMA_IRQHandler+0xb34>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8165 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005baa:	e15f      	b.n	8005e6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80c5 	beq.w	8005d4c <HAL_DMA_IRQHandler+0xce8>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80bf 	beq.w	8005d4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d018      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 813a 	beq.w	8005e70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c04:	e134      	b.n	8005e70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8130 	beq.w	8005e70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c18:	e12a      	b.n	8005e70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d168      	bne.n	8005cf6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a38      	ldr	r2, [pc, #224]	; (8005d0c <HAL_DMA_IRQHandler+0xca8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d04a      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a37      	ldr	r2, [pc, #220]	; (8005d10 <HAL_DMA_IRQHandler+0xcac>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d045      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a35      	ldr	r2, [pc, #212]	; (8005d14 <HAL_DMA_IRQHandler+0xcb0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d040      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <HAL_DMA_IRQHandler+0xcb4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d03b      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a32      	ldr	r2, [pc, #200]	; (8005d1c <HAL_DMA_IRQHandler+0xcb8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d036      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <HAL_DMA_IRQHandler+0xcbc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d031      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2f      	ldr	r2, [pc, #188]	; (8005d24 <HAL_DMA_IRQHandler+0xcc0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d02c      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2e      	ldr	r2, [pc, #184]	; (8005d28 <HAL_DMA_IRQHandler+0xcc4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d027      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <HAL_DMA_IRQHandler+0xcc8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d022      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <HAL_DMA_IRQHandler+0xccc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d01d      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <HAL_DMA_IRQHandler+0xcd0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a28      	ldr	r2, [pc, #160]	; (8005d38 <HAL_DMA_IRQHandler+0xcd4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <HAL_DMA_IRQHandler+0xcd8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <HAL_DMA_IRQHandler+0xcdc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	; (8005d44 <HAL_DMA_IRQHandler+0xce0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xc60>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <HAL_DMA_IRQHandler+0xce4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <HAL_DMA_IRQHandler+0xc72>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0214 	bic.w	r2, r2, #20
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e007      	b.n	8005ce6 <HAL_DMA_IRQHandler+0xc82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 020a 	bic.w	r2, r2, #10
 8005ce4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80b8 	beq.w	8005e70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d08:	e0b2      	b.n	8005e70 <HAL_DMA_IRQHandler+0xe0c>
 8005d0a:	bf00      	nop
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2208      	movs	r2, #8
 8005d56:	409a      	lsls	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8088 	beq.w	8005e72 <HAL_DMA_IRQHandler+0xe0e>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8082 	beq.w	8005e72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a41      	ldr	r2, [pc, #260]	; (8005e78 <HAL_DMA_IRQHandler+0xe14>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d04a      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <HAL_DMA_IRQHandler+0xe18>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d045      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <HAL_DMA_IRQHandler+0xe1c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d040      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a3c      	ldr	r2, [pc, #240]	; (8005e84 <HAL_DMA_IRQHandler+0xe20>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d03b      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3b      	ldr	r2, [pc, #236]	; (8005e88 <HAL_DMA_IRQHandler+0xe24>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d036      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a39      	ldr	r2, [pc, #228]	; (8005e8c <HAL_DMA_IRQHandler+0xe28>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d031      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a38      	ldr	r2, [pc, #224]	; (8005e90 <HAL_DMA_IRQHandler+0xe2c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d02c      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a36      	ldr	r2, [pc, #216]	; (8005e94 <HAL_DMA_IRQHandler+0xe30>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d027      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a35      	ldr	r2, [pc, #212]	; (8005e98 <HAL_DMA_IRQHandler+0xe34>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a33      	ldr	r2, [pc, #204]	; (8005e9c <HAL_DMA_IRQHandler+0xe38>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01d      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a32      	ldr	r2, [pc, #200]	; (8005ea0 <HAL_DMA_IRQHandler+0xe3c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a30      	ldr	r2, [pc, #192]	; (8005ea4 <HAL_DMA_IRQHandler+0xe40>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2f      	ldr	r2, [pc, #188]	; (8005ea8 <HAL_DMA_IRQHandler+0xe44>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2d      	ldr	r2, [pc, #180]	; (8005eac <HAL_DMA_IRQHandler+0xe48>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2c      	ldr	r2, [pc, #176]	; (8005eb0 <HAL_DMA_IRQHandler+0xe4c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xdaa>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2a      	ldr	r2, [pc, #168]	; (8005eb4 <HAL_DMA_IRQHandler+0xe50>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d108      	bne.n	8005e20 <HAL_DMA_IRQHandler+0xdbc>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 021c 	bic.w	r2, r2, #28
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e007      	b.n	8005e30 <HAL_DMA_IRQHandler+0xdcc>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 020e 	bic.w	r2, r2, #14
 8005e2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	e004      	b.n	8005e72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e68:	bf00      	nop
 8005e6a:	e002      	b.n	8005e72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e6c:	bf00      	nop
 8005e6e:	e000      	b.n	8005e72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e72:	3728      	adds	r7, #40	; 0x28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8

08005eb8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ec6:	b2db      	uxtb	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a84      	ldr	r2, [pc, #528]	; (800611c <DMA_SetConfig+0x230>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d072      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a82      	ldr	r2, [pc, #520]	; (8006120 <DMA_SetConfig+0x234>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d06d      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a81      	ldr	r2, [pc, #516]	; (8006124 <DMA_SetConfig+0x238>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d068      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7f      	ldr	r2, [pc, #508]	; (8006128 <DMA_SetConfig+0x23c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d063      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7e      	ldr	r2, [pc, #504]	; (800612c <DMA_SetConfig+0x240>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d05e      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a7c      	ldr	r2, [pc, #496]	; (8006130 <DMA_SetConfig+0x244>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d059      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a7b      	ldr	r2, [pc, #492]	; (8006134 <DMA_SetConfig+0x248>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d054      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a79      	ldr	r2, [pc, #484]	; (8006138 <DMA_SetConfig+0x24c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04f      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a78      	ldr	r2, [pc, #480]	; (800613c <DMA_SetConfig+0x250>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d04a      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a76      	ldr	r2, [pc, #472]	; (8006140 <DMA_SetConfig+0x254>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d045      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a75      	ldr	r2, [pc, #468]	; (8006144 <DMA_SetConfig+0x258>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d040      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a73      	ldr	r2, [pc, #460]	; (8006148 <DMA_SetConfig+0x25c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d03b      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a72      	ldr	r2, [pc, #456]	; (800614c <DMA_SetConfig+0x260>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d036      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a70      	ldr	r2, [pc, #448]	; (8006150 <DMA_SetConfig+0x264>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d031      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6f      	ldr	r2, [pc, #444]	; (8006154 <DMA_SetConfig+0x268>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d02c      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a6d      	ldr	r2, [pc, #436]	; (8006158 <DMA_SetConfig+0x26c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d027      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6c      	ldr	r2, [pc, #432]	; (800615c <DMA_SetConfig+0x270>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a6a      	ldr	r2, [pc, #424]	; (8006160 <DMA_SetConfig+0x274>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a69      	ldr	r2, [pc, #420]	; (8006164 <DMA_SetConfig+0x278>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a67      	ldr	r2, [pc, #412]	; (8006168 <DMA_SetConfig+0x27c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a66      	ldr	r2, [pc, #408]	; (800616c <DMA_SetConfig+0x280>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a64      	ldr	r2, [pc, #400]	; (8006170 <DMA_SetConfig+0x284>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a63      	ldr	r2, [pc, #396]	; (8006174 <DMA_SetConfig+0x288>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a61      	ldr	r2, [pc, #388]	; (8006178 <DMA_SetConfig+0x28c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <DMA_SetConfig+0x10e>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <DMA_SetConfig+0x110>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006008:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800601a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a3e      	ldr	r2, [pc, #248]	; (800611c <DMA_SetConfig+0x230>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d04a      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a3d      	ldr	r2, [pc, #244]	; (8006120 <DMA_SetConfig+0x234>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d045      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a3b      	ldr	r2, [pc, #236]	; (8006124 <DMA_SetConfig+0x238>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d040      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a3a      	ldr	r2, [pc, #232]	; (8006128 <DMA_SetConfig+0x23c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d03b      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a38      	ldr	r2, [pc, #224]	; (800612c <DMA_SetConfig+0x240>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d036      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a37      	ldr	r2, [pc, #220]	; (8006130 <DMA_SetConfig+0x244>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d031      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a35      	ldr	r2, [pc, #212]	; (8006134 <DMA_SetConfig+0x248>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d02c      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a34      	ldr	r2, [pc, #208]	; (8006138 <DMA_SetConfig+0x24c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d027      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a32      	ldr	r2, [pc, #200]	; (800613c <DMA_SetConfig+0x250>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a31      	ldr	r2, [pc, #196]	; (8006140 <DMA_SetConfig+0x254>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d01d      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <DMA_SetConfig+0x258>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2e      	ldr	r2, [pc, #184]	; (8006148 <DMA_SetConfig+0x25c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2c      	ldr	r2, [pc, #176]	; (800614c <DMA_SetConfig+0x260>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <DMA_SetConfig+0x264>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a29      	ldr	r2, [pc, #164]	; (8006154 <DMA_SetConfig+0x268>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a28      	ldr	r2, [pc, #160]	; (8006158 <DMA_SetConfig+0x26c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <DMA_SetConfig+0x1d4>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <DMA_SetConfig+0x1d6>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d05a      	beq.n	800617c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	223f      	movs	r2, #63	; 0x3f
 80060d0:	409a      	lsls	r2, r3
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d108      	bne.n	8006108 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006106:	e087      	b.n	8006218 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]
}
 8006118:	e07e      	b.n	8006218 <DMA_SetConfig+0x32c>
 800611a:	bf00      	nop
 800611c:	40020010 	.word	0x40020010
 8006120:	40020028 	.word	0x40020028
 8006124:	40020040 	.word	0x40020040
 8006128:	40020058 	.word	0x40020058
 800612c:	40020070 	.word	0x40020070
 8006130:	40020088 	.word	0x40020088
 8006134:	400200a0 	.word	0x400200a0
 8006138:	400200b8 	.word	0x400200b8
 800613c:	40020410 	.word	0x40020410
 8006140:	40020428 	.word	0x40020428
 8006144:	40020440 	.word	0x40020440
 8006148:	40020458 	.word	0x40020458
 800614c:	40020470 	.word	0x40020470
 8006150:	40020488 	.word	0x40020488
 8006154:	400204a0 	.word	0x400204a0
 8006158:	400204b8 	.word	0x400204b8
 800615c:	58025408 	.word	0x58025408
 8006160:	5802541c 	.word	0x5802541c
 8006164:	58025430 	.word	0x58025430
 8006168:	58025444 	.word	0x58025444
 800616c:	58025458 	.word	0x58025458
 8006170:	5802546c 	.word	0x5802546c
 8006174:	58025480 	.word	0x58025480
 8006178:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a28      	ldr	r2, [pc, #160]	; (8006224 <DMA_SetConfig+0x338>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d022      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a27      	ldr	r2, [pc, #156]	; (8006228 <DMA_SetConfig+0x33c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d01d      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a25      	ldr	r2, [pc, #148]	; (800622c <DMA_SetConfig+0x340>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d018      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a24      	ldr	r2, [pc, #144]	; (8006230 <DMA_SetConfig+0x344>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d013      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a22      	ldr	r2, [pc, #136]	; (8006234 <DMA_SetConfig+0x348>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00e      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a21      	ldr	r2, [pc, #132]	; (8006238 <DMA_SetConfig+0x34c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d009      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1f      	ldr	r2, [pc, #124]	; (800623c <DMA_SetConfig+0x350>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <DMA_SetConfig+0x2e0>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <DMA_SetConfig+0x354>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <DMA_SetConfig+0x2e4>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <DMA_SetConfig+0x2e6>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d020      	beq.n	8006218 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2201      	movs	r2, #1
 80061e0:	409a      	lsls	r2, r3
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d108      	bne.n	8006208 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	60da      	str	r2, [r3, #12]
}
 8006206:	e007      	b.n	8006218 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	58025408 	.word	0x58025408
 8006228:	5802541c 	.word	0x5802541c
 800622c:	58025430 	.word	0x58025430
 8006230:	58025444 	.word	0x58025444
 8006234:	58025458 	.word	0x58025458
 8006238:	5802546c 	.word	0x5802546c
 800623c:	58025480 	.word	0x58025480
 8006240:	58025494 	.word	0x58025494

08006244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a42      	ldr	r2, [pc, #264]	; (800635c <DMA_CalcBaseAndBitshift+0x118>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d04a      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a41      	ldr	r2, [pc, #260]	; (8006360 <DMA_CalcBaseAndBitshift+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d045      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <DMA_CalcBaseAndBitshift+0x120>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d040      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3e      	ldr	r2, [pc, #248]	; (8006368 <DMA_CalcBaseAndBitshift+0x124>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d03b      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a3c      	ldr	r2, [pc, #240]	; (800636c <DMA_CalcBaseAndBitshift+0x128>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d036      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a3b      	ldr	r2, [pc, #236]	; (8006370 <DMA_CalcBaseAndBitshift+0x12c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d031      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a39      	ldr	r2, [pc, #228]	; (8006374 <DMA_CalcBaseAndBitshift+0x130>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d02c      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a38      	ldr	r2, [pc, #224]	; (8006378 <DMA_CalcBaseAndBitshift+0x134>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d027      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a36      	ldr	r2, [pc, #216]	; (800637c <DMA_CalcBaseAndBitshift+0x138>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a35      	ldr	r2, [pc, #212]	; (8006380 <DMA_CalcBaseAndBitshift+0x13c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d01d      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a33      	ldr	r2, [pc, #204]	; (8006384 <DMA_CalcBaseAndBitshift+0x140>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a32      	ldr	r2, [pc, #200]	; (8006388 <DMA_CalcBaseAndBitshift+0x144>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a30      	ldr	r2, [pc, #192]	; (800638c <DMA_CalcBaseAndBitshift+0x148>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <DMA_CalcBaseAndBitshift+0x14c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <DMA_CalcBaseAndBitshift+0x150>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xa8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <DMA_CalcBaseAndBitshift+0x154>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d101      	bne.n	80062f0 <DMA_CalcBaseAndBitshift+0xac>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <DMA_CalcBaseAndBitshift+0xae>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d024      	beq.n	8006340 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3b10      	subs	r3, #16
 80062fe:	4a27      	ldr	r2, [pc, #156]	; (800639c <DMA_CalcBaseAndBitshift+0x158>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	4a24      	ldr	r2, [pc, #144]	; (80063a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006310:	5cd3      	ldrb	r3, [r2, r3]
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d908      	bls.n	8006330 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <DMA_CalcBaseAndBitshift+0x160>)
 8006326:	4013      	ands	r3, r2
 8006328:	1d1a      	adds	r2, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	659a      	str	r2, [r3, #88]	; 0x58
 800632e:	e00d      	b.n	800634c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <DMA_CalcBaseAndBitshift+0x160>)
 8006338:	4013      	ands	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6593      	str	r3, [r2, #88]	; 0x58
 800633e:	e005      	b.n	800634c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40020010 	.word	0x40020010
 8006360:	40020028 	.word	0x40020028
 8006364:	40020040 	.word	0x40020040
 8006368:	40020058 	.word	0x40020058
 800636c:	40020070 	.word	0x40020070
 8006370:	40020088 	.word	0x40020088
 8006374:	400200a0 	.word	0x400200a0
 8006378:	400200b8 	.word	0x400200b8
 800637c:	40020410 	.word	0x40020410
 8006380:	40020428 	.word	0x40020428
 8006384:	40020440 	.word	0x40020440
 8006388:	40020458 	.word	0x40020458
 800638c:	40020470 	.word	0x40020470
 8006390:	40020488 	.word	0x40020488
 8006394:	400204a0 	.word	0x400204a0
 8006398:	400204b8 	.word	0x400204b8
 800639c:	aaaaaaab 	.word	0xaaaaaaab
 80063a0:	0800fb8c 	.word	0x0800fb8c
 80063a4:	fffffc00 	.word	0xfffffc00

080063a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d120      	bne.n	80063fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d858      	bhi.n	8006476 <DMA_CheckFifoParam+0xce>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <DMA_CheckFifoParam+0x24>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063dd 	.word	0x080063dd
 80063d0:	080063ef 	.word	0x080063ef
 80063d4:	080063dd 	.word	0x080063dd
 80063d8:	08006477 	.word	0x08006477
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d048      	beq.n	800647a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063ec:	e045      	b.n	800647a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063f6:	d142      	bne.n	800647e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063fc:	e03f      	b.n	800647e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d123      	bne.n	8006450 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	2b03      	cmp	r3, #3
 800640e:	d838      	bhi.n	8006482 <DMA_CheckFifoParam+0xda>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <DMA_CheckFifoParam+0x70>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006429 	.word	0x08006429
 800641c:	0800642f 	.word	0x0800642f
 8006420:	08006429 	.word	0x08006429
 8006424:	08006441 	.word	0x08006441
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
        break;
 800642c:	e030      	b.n	8006490 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d025      	beq.n	8006486 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800643e:	e022      	b.n	8006486 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006448:	d11f      	bne.n	800648a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800644e:	e01c      	b.n	800648a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	2b02      	cmp	r3, #2
 8006456:	d902      	bls.n	800645e <DMA_CheckFifoParam+0xb6>
 8006458:	2b03      	cmp	r3, #3
 800645a:	d003      	beq.n	8006464 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800645c:	e018      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
        break;
 8006462:	e015      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
    break;
 8006474:	e00b      	b.n	800648e <DMA_CheckFifoParam+0xe6>
        break;
 8006476:	bf00      	nop
 8006478:	e00a      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        break;
 800647a:	bf00      	nop
 800647c:	e008      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        break;
 800647e:	bf00      	nop
 8006480:	e006      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
        break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
    break;
 800648e:	bf00      	nop
    }
  }

  return status;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop

080064a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a38      	ldr	r2, [pc, #224]	; (8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d022      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a36      	ldr	r2, [pc, #216]	; (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01d      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a35      	ldr	r2, [pc, #212]	; (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a32      	ldr	r2, [pc, #200]	; (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01a      	beq.n	800653e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	3b08      	subs	r3, #8
 8006510:	4a28      	ldr	r2, [pc, #160]	; (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a24      	ldr	r2, [pc, #144]	; (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800652c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800653c:	e024      	b.n	8006588 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	3b10      	subs	r3, #16
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	091b      	lsrs	r3, r3, #4
 800654e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d806      	bhi.n	8006566 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d902      	bls.n	8006566 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3308      	adds	r3, #8
 8006564:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4b18      	ldr	r3, [pc, #96]	; (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	461a      	mov	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006578:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	2201      	movs	r2, #1
 8006582:	409a      	lsls	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006588:	bf00      	nop
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	58025408 	.word	0x58025408
 8006598:	5802541c 	.word	0x5802541c
 800659c:	58025430 	.word	0x58025430
 80065a0:	58025444 	.word	0x58025444
 80065a4:	58025458 	.word	0x58025458
 80065a8:	5802546c 	.word	0x5802546c
 80065ac:	58025480 	.word	0x58025480
 80065b0:	58025494 	.word	0x58025494
 80065b4:	cccccccd 	.word	0xcccccccd
 80065b8:	16009600 	.word	0x16009600
 80065bc:	58025880 	.word	0x58025880
 80065c0:	aaaaaaab 	.word	0xaaaaaaab
 80065c4:	400204b8 	.word	0x400204b8
 80065c8:	4002040f 	.word	0x4002040f
 80065cc:	10008200 	.word	0x10008200
 80065d0:	40020880 	.word	0x40020880

080065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d04a      	beq.n	8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d847      	bhi.n	8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d022      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a24      	ldr	r2, [pc, #144]	; (8006690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d01d      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a22      	ldr	r2, [pc, #136]	; (8006694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d018      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a21      	ldr	r2, [pc, #132]	; (8006698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00e      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d101      	bne.n	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	461a      	mov	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800665c:	671a      	str	r2, [r3, #112]	; 0x70
 800665e:	e009      	b.n	8006674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006672:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b01      	subs	r3, #1
 8006678:	2201      	movs	r2, #1
 800667a:	409a      	lsls	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	58025408 	.word	0x58025408
 8006690:	5802541c 	.word	0x5802541c
 8006694:	58025430 	.word	0x58025430
 8006698:	58025444 	.word	0x58025444
 800669c:	58025458 	.word	0x58025458
 80066a0:	5802546c 	.word	0x5802546c
 80066a4:	58025480 	.word	0x58025480
 80066a8:	58025494 	.word	0x58025494
 80066ac:	1600963f 	.word	0x1600963f
 80066b0:	58025940 	.word	0x58025940
 80066b4:	1000823f 	.word	0x1000823f
 80066b8:	40020940 	.word	0x40020940

080066bc <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	7a1b      	ldrb	r3, [r3, #8]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d155      	bne.n	8006782 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a4b      	ldr	r2, [pc, #300]	; (8006808 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d049      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a49      	ldr	r2, [pc, #292]	; (800680c <HAL_DMAEx_ConfigMuxSync+0x150>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d044      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a48      	ldr	r2, [pc, #288]	; (8006810 <HAL_DMAEx_ConfigMuxSync+0x154>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d03f      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a46      	ldr	r2, [pc, #280]	; (8006814 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d03a      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a45      	ldr	r2, [pc, #276]	; (8006818 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d035      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a43      	ldr	r2, [pc, #268]	; (800681c <HAL_DMAEx_ConfigMuxSync+0x160>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d030      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a42      	ldr	r2, [pc, #264]	; (8006820 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d02b      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a40      	ldr	r2, [pc, #256]	; (8006824 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d026      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d021      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a3d      	ldr	r2, [pc, #244]	; (800682c <HAL_DMAEx_ConfigMuxSync+0x170>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d01c      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a3c      	ldr	r2, [pc, #240]	; (8006830 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d017      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a3a      	ldr	r2, [pc, #232]	; (8006834 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d012      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a39      	ldr	r2, [pc, #228]	; (8006838 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00d      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a37      	ldr	r2, [pc, #220]	; (800683c <HAL_DMAEx_ConfigMuxSync+0x180>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d008      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a36      	ldr	r2, [pc, #216]	; (8006840 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a34      	ldr	r2, [pc, #208]	; (8006844 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8006772:	4293      	cmp	r3, r2
 8006774:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d131      	bne.n	80067f2 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_DMAEx_ConfigMuxSync+0xe0>
 8006798:	2302      	movs	r3, #2
 800679a:	e02f      	b.n	80067fc <HAL_DMAEx_ConfigMuxSync+0x140>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ae:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80067b2:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	b2d9      	uxtb	r1, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	061a      	lsls	r2, r3, #24
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	04db      	lsls	r3, r3, #19
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	7a1b      	ldrb	r3, [r3, #8]
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	431a      	orrs	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	7a5b      	ldrb	r3, [r3, #9]
 80067da:	025b      	lsls	r3, r3, #9
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e2:	430a      	orrs	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e004      	b.n	80067fc <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
  }
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40020010 	.word	0x40020010
 800680c:	40020028 	.word	0x40020028
 8006810:	40020040 	.word	0x40020040
 8006814:	40020058 	.word	0x40020058
 8006818:	40020070 	.word	0x40020070
 800681c:	40020088 	.word	0x40020088
 8006820:	400200a0 	.word	0x400200a0
 8006824:	400200b8 	.word	0x400200b8
 8006828:	40020410 	.word	0x40020410
 800682c:	40020428 	.word	0x40020428
 8006830:	40020440 	.word	0x40020440
 8006834:	40020458 	.word	0x40020458
 8006838:	40020470 	.word	0x40020470
 800683c:	40020488 	.word	0x40020488
 8006840:	400204a0 	.word	0x400204a0
 8006844:	400204b8 	.word	0x400204b8

08006848 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01a      	beq.n	8006896 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800686e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006878:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d022      	beq.n	80068e4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01a      	beq.n	80068e4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
      }
    }
  }
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	; 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068fa:	4b86      	ldr	r3, [pc, #536]	; (8006b14 <HAL_GPIO_Init+0x228>)
 80068fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068fe:	e18c      	b.n	8006c1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	2101      	movs	r1, #1
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	4013      	ands	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 817e 	beq.w	8006c14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	2b01      	cmp	r3, #1
 8006922:	d005      	beq.n	8006930 <HAL_GPIO_Init+0x44>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d130      	bne.n	8006992 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	2203      	movs	r2, #3
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	43db      	mvns	r3, r3
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	4013      	ands	r3, r2
 8006946:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4313      	orrs	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006966:	2201      	movs	r2, #1
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43db      	mvns	r3, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 0201 	and.w	r2, r3, #1
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4313      	orrs	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	2b03      	cmp	r3, #3
 800699c:	d017      	beq.n	80069ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	2203      	movs	r2, #3
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4013      	ands	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d123      	bne.n	8006a22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	08da      	lsrs	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3208      	adds	r2, #8
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	220f      	movs	r2, #15
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4013      	ands	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	08da      	lsrs	r2, r3, #3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3208      	adds	r2, #8
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f003 0203 	and.w	r2, r3, #3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80d8 	beq.w	8006c14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a64:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <HAL_GPIO_Init+0x22c>)
 8006a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a6a:	4a2b      	ldr	r2, [pc, #172]	; (8006b18 <HAL_GPIO_Init+0x22c>)
 8006a6c:	f043 0302 	orr.w	r3, r3, #2
 8006a70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <HAL_GPIO_Init+0x22c>)
 8006a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a82:	4a26      	ldr	r2, [pc, #152]	; (8006b1c <HAL_GPIO_Init+0x230>)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	089b      	lsrs	r3, r3, #2
 8006a88:	3302      	adds	r3, #2
 8006a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	220f      	movs	r2, #15
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <HAL_GPIO_Init+0x234>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d04a      	beq.n	8006b44 <HAL_GPIO_Init+0x258>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <HAL_GPIO_Init+0x238>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02b      	beq.n	8006b0e <HAL_GPIO_Init+0x222>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <HAL_GPIO_Init+0x23c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d025      	beq.n	8006b0a <HAL_GPIO_Init+0x21e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1a      	ldr	r2, [pc, #104]	; (8006b2c <HAL_GPIO_Init+0x240>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01f      	beq.n	8006b06 <HAL_GPIO_Init+0x21a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <HAL_GPIO_Init+0x244>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d019      	beq.n	8006b02 <HAL_GPIO_Init+0x216>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_GPIO_Init+0x248>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <HAL_GPIO_Init+0x212>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <HAL_GPIO_Init+0x24c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00d      	beq.n	8006afa <HAL_GPIO_Init+0x20e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <HAL_GPIO_Init+0x250>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <HAL_GPIO_Init+0x20a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <HAL_GPIO_Init+0x254>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d101      	bne.n	8006af2 <HAL_GPIO_Init+0x206>
 8006aee:	2309      	movs	r3, #9
 8006af0:	e029      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006af2:	230a      	movs	r3, #10
 8006af4:	e027      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006af6:	2307      	movs	r3, #7
 8006af8:	e025      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006afa:	2306      	movs	r3, #6
 8006afc:	e023      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006afe:	2305      	movs	r3, #5
 8006b00:	e021      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006b02:	2304      	movs	r3, #4
 8006b04:	e01f      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006b06:	2303      	movs	r3, #3
 8006b08:	e01d      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e01b      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e019      	b.n	8006b46 <HAL_GPIO_Init+0x25a>
 8006b12:	bf00      	nop
 8006b14:	58000080 	.word	0x58000080
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	58000400 	.word	0x58000400
 8006b20:	58020000 	.word	0x58020000
 8006b24:	58020400 	.word	0x58020400
 8006b28:	58020800 	.word	0x58020800
 8006b2c:	58020c00 	.word	0x58020c00
 8006b30:	58021000 	.word	0x58021000
 8006b34:	58021400 	.word	0x58021400
 8006b38:	58021800 	.word	0x58021800
 8006b3c:	58021c00 	.word	0x58021c00
 8006b40:	58022400 	.word	0x58022400
 8006b44:	2300      	movs	r3, #0
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	f002 0203 	and.w	r2, r2, #3
 8006b4c:	0092      	lsls	r2, r2, #2
 8006b4e:	4093      	lsls	r3, r2
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b56:	4938      	ldr	r1, [pc, #224]	; (8006c38 <HAL_GPIO_Init+0x34c>)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	4013      	ands	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f47f ae6b 	bne.w	8006900 <HAL_GPIO_Init+0x14>
  }
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	3724      	adds	r7, #36	; 0x24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	58000400 	.word	0x58000400

08006c3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c4a:	4b72      	ldr	r3, [pc, #456]	; (8006e14 <HAL_GPIO_DeInit+0x1d8>)
 8006c4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006c4e:	e0d3      	b.n	8006df8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006c50:	2201      	movs	r2, #1
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80c6 	beq.w	8006df2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006c66:	4a6c      	ldr	r2, [pc, #432]	; (8006e18 <HAL_GPIO_DeInit+0x1dc>)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c72:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	220f      	movs	r2, #15
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	4013      	ands	r3, r2
 8006c86:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a64      	ldr	r2, [pc, #400]	; (8006e1c <HAL_GPIO_DeInit+0x1e0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d031      	beq.n	8006cf4 <HAL_GPIO_DeInit+0xb8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a63      	ldr	r2, [pc, #396]	; (8006e20 <HAL_GPIO_DeInit+0x1e4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d02b      	beq.n	8006cf0 <HAL_GPIO_DeInit+0xb4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a62      	ldr	r2, [pc, #392]	; (8006e24 <HAL_GPIO_DeInit+0x1e8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d025      	beq.n	8006cec <HAL_GPIO_DeInit+0xb0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a61      	ldr	r2, [pc, #388]	; (8006e28 <HAL_GPIO_DeInit+0x1ec>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01f      	beq.n	8006ce8 <HAL_GPIO_DeInit+0xac>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a60      	ldr	r2, [pc, #384]	; (8006e2c <HAL_GPIO_DeInit+0x1f0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d019      	beq.n	8006ce4 <HAL_GPIO_DeInit+0xa8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a5f      	ldr	r2, [pc, #380]	; (8006e30 <HAL_GPIO_DeInit+0x1f4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <HAL_GPIO_DeInit+0xa4>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a5e      	ldr	r2, [pc, #376]	; (8006e34 <HAL_GPIO_DeInit+0x1f8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00d      	beq.n	8006cdc <HAL_GPIO_DeInit+0xa0>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a5d      	ldr	r2, [pc, #372]	; (8006e38 <HAL_GPIO_DeInit+0x1fc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <HAL_GPIO_DeInit+0x9c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a5c      	ldr	r2, [pc, #368]	; (8006e3c <HAL_GPIO_DeInit+0x200>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d101      	bne.n	8006cd4 <HAL_GPIO_DeInit+0x98>
 8006cd0:	2309      	movs	r3, #9
 8006cd2:	e010      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006cd4:	230a      	movs	r3, #10
 8006cd6:	e00e      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006cd8:	2307      	movs	r3, #7
 8006cda:	e00c      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006cdc:	2306      	movs	r3, #6
 8006cde:	e00a      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006ce0:	2305      	movs	r3, #5
 8006ce2:	e008      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	e006      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e004      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e002      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_GPIO_DeInit+0xba>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	f002 0203 	and.w	r2, r2, #3
 8006cfc:	0092      	lsls	r2, r2, #2
 8006cfe:	4093      	lsls	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d136      	bne.n	8006d74 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	401a      	ands	r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	401a      	ands	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d30:	4013      	ands	r3, r2
 8006d32:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d42:	4013      	ands	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	220f      	movs	r2, #15
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d56:	4a30      	ldr	r2, [pc, #192]	; (8006e18 <HAL_GPIO_DeInit+0x1dc>)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	089b      	lsrs	r3, r3, #2
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	43da      	mvns	r2, r3
 8006d66:	482c      	ldr	r0, [pc, #176]	; (8006e18 <HAL_GPIO_DeInit+0x1dc>)
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	089b      	lsrs	r3, r3, #2
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	3302      	adds	r3, #2
 8006d70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	2103      	movs	r1, #3
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	08da      	lsrs	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3208      	adds	r2, #8
 8006d90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	220f      	movs	r2, #15
 8006d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006da2:	43db      	mvns	r3, r3
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	08d2      	lsrs	r2, r2, #3
 8006da8:	4019      	ands	r1, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3208      	adds	r2, #8
 8006dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	2103      	movs	r1, #3
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	2101      	movs	r1, #1
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	401a      	ands	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	2103      	movs	r1, #3
 8006de6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dea:	43db      	mvns	r3, r3
 8006dec:	401a      	ands	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	3301      	adds	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f af25 	bne.w	8006c50 <HAL_GPIO_DeInit+0x14>
  }
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	58000080 	.word	0x58000080
 8006e18:	58000400 	.word	0x58000400
 8006e1c:	58020000 	.word	0x58020000
 8006e20:	58020400 	.word	0x58020400
 8006e24:	58020800 	.word	0x58020800
 8006e28:	58020c00 	.word	0x58020c00
 8006e2c:	58021000 	.word	0x58021000
 8006e30:	58021400 	.word	0x58021400
 8006e34:	58021800 	.word	0x58021800
 8006e38:	58021c00 	.word	0x58021c00
 8006e3c:	58022400 	.word	0x58022400

08006e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	807b      	strh	r3, [r7, #2]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e50:	787b      	ldrb	r3, [r7, #1]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e56:	887a      	ldrh	r2, [r7, #2]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006e5c:	e003      	b.n	8006e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	041a      	lsls	r2, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	619a      	str	r2, [r3, #24]
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	4603      	mov	r3, r0
 8006e7a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 f804 	bl	8006ea6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	4603      	mov	r3, r0
 8006eae:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e07f      	b.n	8006fce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f006 f9e4 	bl	800d2b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2224      	movs	r2, #36	; 0x24
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	e006      	b.n	8006f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d104      	bne.n	8006f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <HAL_I2C_Init+0x11c>)
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69d9      	ldr	r1, [r3, #28]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1a      	ldr	r2, [r3, #32]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	02008000 	.word	0x02008000

08006fdc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e021      	b.n	8007032 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2224      	movs	r2, #36	; 0x24
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f006 f9c0 	bl	800d38c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	4608      	mov	r0, r1
 8007046:	4611      	mov	r1, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4603      	mov	r3, r0
 800704c:	817b      	strh	r3, [r7, #10]
 800704e:	460b      	mov	r3, r1
 8007050:	813b      	strh	r3, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b20      	cmp	r3, #32
 8007060:	f040 80f9 	bne.w	8007256 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <HAL_I2C_Mem_Write+0x34>
 800706a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007076:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e0ed      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_I2C_Mem_Write+0x4e>
 8007086:	2302      	movs	r3, #2
 8007088:	e0e6      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007092:	f7fc fb65 	bl	8003760 <HAL_GetTick>
 8007096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	2319      	movs	r3, #25
 800709e:	2201      	movs	r2, #1
 80070a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f001 f8c6 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0d1      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2221      	movs	r2, #33	; 0x21
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2240      	movs	r2, #64	; 0x40
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a3a      	ldr	r2, [r7, #32]
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070dc:	88f8      	ldrh	r0, [r7, #6]
 80070de:	893a      	ldrh	r2, [r7, #8]
 80070e0:	8979      	ldrh	r1, [r7, #10]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	4603      	mov	r3, r0
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fb91 	bl	8007814 <I2C_RequestMemoryWrite>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e0a9      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	2bff      	cmp	r3, #255	; 0xff
 800710c:	d90e      	bls.n	800712c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007118:	b2da      	uxtb	r2, r3
 800711a:	8979      	ldrh	r1, [r7, #10]
 800711c:	2300      	movs	r3, #0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f001 fa2f 	bl	8008588 <I2C_TransferConfig>
 800712a:	e00f      	b.n	800714c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713a:	b2da      	uxtb	r2, r3
 800713c:	8979      	ldrh	r1, [r7, #10]
 800713e:	2300      	movs	r3, #0
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fa1e 	bl	8008588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f001 f8b0 	bl	80082b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e07b      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d034      	beq.n	8007204 <HAL_I2C_Mem_Write+0x1c8>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d130      	bne.n	8007204 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2200      	movs	r2, #0
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f001 f842 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e04d      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2bff      	cmp	r3, #255	; 0xff
 80071c4:	d90e      	bls.n	80071e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	22ff      	movs	r2, #255	; 0xff
 80071ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	8979      	ldrh	r1, [r7, #10]
 80071d4:	2300      	movs	r3, #0
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f001 f9d3 	bl	8008588 <I2C_TransferConfig>
 80071e2:	e00f      	b.n	8007204 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	8979      	ldrh	r1, [r7, #10]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f001 f9c2 	bl	8008588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d19e      	bne.n	800714c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f001 f88f 	bl	8008336 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e01a      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2220      	movs	r2, #32
 8007228:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6859      	ldr	r1, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <HAL_I2C_Mem_Write+0x224>)
 8007236:	400b      	ands	r3, r1
 8007238:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	fe00e800 	.word	0xfe00e800

08007264 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	461a      	mov	r2, r3
 8007272:	4603      	mov	r3, r0
 8007274:	817b      	strh	r3, [r7, #10]
 8007276:	460b      	mov	r3, r1
 8007278:	813b      	strh	r3, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b20      	cmp	r3, #32
 8007288:	f040 80fd 	bne.w	8007486 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_I2C_Mem_Read+0x34>
 8007292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0f1      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_I2C_Mem_Read+0x4e>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e0ea      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072ba:	f7fc fa51 	bl	8003760 <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2319      	movs	r3, #25
 80072c6:	2201      	movs	r2, #1
 80072c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 ffb2 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0d5      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2222      	movs	r2, #34	; 0x22
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2240      	movs	r2, #64	; 0x40
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007304:	88f8      	ldrh	r0, [r7, #6]
 8007306:	893a      	ldrh	r2, [r7, #8]
 8007308:	8979      	ldrh	r1, [r7, #10]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4603      	mov	r3, r0
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fad1 	bl	80078bc <I2C_RequestMemoryRead>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d005      	beq.n	800732c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e0ad      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29b      	uxth	r3, r3
 8007332:	2bff      	cmp	r3, #255	; 0xff
 8007334:	d90e      	bls.n	8007354 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	22ff      	movs	r2, #255	; 0xff
 800733a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007340:	b2da      	uxtb	r2, r3
 8007342:	8979      	ldrh	r1, [r7, #10]
 8007344:	4b52      	ldr	r3, [pc, #328]	; (8007490 <HAL_I2C_Mem_Read+0x22c>)
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 f91b 	bl	8008588 <I2C_TransferConfig>
 8007352:	e00f      	b.n	8007374 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	b2da      	uxtb	r2, r3
 8007364:	8979      	ldrh	r1, [r7, #10]
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <HAL_I2C_Mem_Read+0x22c>)
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f001 f90a 	bl	8008588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	2200      	movs	r2, #0
 800737c:	2104      	movs	r1, #4
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 ff59 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e07c      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d034      	beq.n	8007434 <HAL_I2C_Mem_Read+0x1d0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d130      	bne.n	8007434 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	2200      	movs	r2, #0
 80073da:	2180      	movs	r1, #128	; 0x80
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 ff2a 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e04d      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2bff      	cmp	r3, #255	; 0xff
 80073f4:	d90e      	bls.n	8007414 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	22ff      	movs	r2, #255	; 0xff
 80073fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	b2da      	uxtb	r2, r3
 8007402:	8979      	ldrh	r1, [r7, #10]
 8007404:	2300      	movs	r3, #0
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f001 f8bb 	bl	8008588 <I2C_TransferConfig>
 8007412:	e00f      	b.n	8007434 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007422:	b2da      	uxtb	r2, r3
 8007424:	8979      	ldrh	r1, [r7, #10]
 8007426:	2300      	movs	r3, #0
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f001 f8aa 	bl	8008588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d19a      	bne.n	8007374 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 ff77 	bl	8008336 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e01a      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2220      	movs	r2, #32
 8007458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6859      	ldr	r1, [r3, #4]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <HAL_I2C_Mem_Read+0x230>)
 8007466:	400b      	ands	r3, r1
 8007468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e000      	b.n	8007488 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007486:	2302      	movs	r3, #2
  }
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	80002400 	.word	0x80002400
 8007494:	fe00e800 	.word	0xfe00e800

08007498 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d010      	beq.n	80074de <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	09db      	lsrs	r3, r3, #7
 80074c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	f043 0201 	orr.w	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	0a9b      	lsrs	r3, r3, #10
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d010      	beq.n	800750c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	09db      	lsrs	r3, r3, #7
 80074ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	f043 0208 	orr.w	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800750a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	0a5b      	lsrs	r3, r3, #9
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d010      	beq.n	800753a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	09db      	lsrs	r3, r3, #7
 800751c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	f043 0202 	orr.w	r2, r3, #2
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007538:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 030b 	and.w	r3, r3, #11
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fd39 	bl	8007fc4 <I2C_ITError>
  }
}
 8007552:	bf00      	nop
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
 800758e:	4613      	mov	r3, r2
 8007590:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e8:	b2db      	uxtb	r3, r3
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <I2C_Slave_ISR_IT+0x24>
 800762e:	2302      	movs	r3, #2
 8007630:	e0ec      	b.n	800780c <I2C_Slave_ISR_IT+0x1fe>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007652:	6939      	ldr	r1, [r7, #16]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fa67 	bl	8007b28 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d04d      	beq.n	8007702 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800766e:	2b00      	cmp	r3, #0
 8007670:	d047      	beq.n	8007702 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d128      	bne.n	80076ce <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b28      	cmp	r3, #40	; 0x28
 8007686:	d108      	bne.n	800769a <I2C_Slave_ISR_IT+0x8c>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800768e:	d104      	bne.n	800769a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007690:	6939      	ldr	r1, [r7, #16]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fc40 	bl	8007f18 <I2C_ITListenCplt>
 8007698:	e032      	b.n	8007700 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b29      	cmp	r3, #41	; 0x29
 80076a4:	d10e      	bne.n	80076c4 <I2C_Slave_ISR_IT+0xb6>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ac:	d00a      	beq.n	80076c4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2210      	movs	r2, #16
 80076b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fd7b 	bl	80081b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f9d5 	bl	8007a6c <I2C_ITSlaveSeqCplt>
 80076c2:	e01d      	b.n	8007700 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2210      	movs	r2, #16
 80076ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80076cc:	e096      	b.n	80077fc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2210      	movs	r2, #16
 80076d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	f043 0204 	orr.w	r2, r3, #4
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <I2C_Slave_ISR_IT+0xe4>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ee:	f040 8085 	bne.w	80077fc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	4619      	mov	r1, r3
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fc63 	bl	8007fc4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076fe:	e07d      	b.n	80077fc <I2C_Slave_ISR_IT+0x1ee>
 8007700:	e07c      	b.n	80077fc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	089b      	lsrs	r3, r3, #2
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d030      	beq.n	8007770 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	089b      	lsrs	r3, r3, #2
 8007712:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007716:	2b00      	cmp	r3, #0
 8007718:	d02a      	beq.n	8007770 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d018      	beq.n	8007756 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d14f      	bne.n	8007800 <I2C_Slave_ISR_IT+0x1f2>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007766:	d04b      	beq.n	8007800 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f97f 	bl	8007a6c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800776e:	e047      	b.n	8007800 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	08db      	lsrs	r3, r3, #3
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	08db      	lsrs	r3, r3, #3
 8007780:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007788:	6939      	ldr	r1, [r7, #16]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f8ea 	bl	8007964 <I2C_ITAddrCplt>
 8007790:	e037      	b.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	085b      	lsrs	r3, r3, #1
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d031      	beq.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d02b      	beq.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d018      	beq.n	80077e6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80077e4:	e00d      	b.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ec:	d002      	beq.n	80077f4 <I2C_Slave_ISR_IT+0x1e6>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f939 	bl	8007a6c <I2C_ITSlaveSeqCplt>
 80077fa:	e002      	b.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007800:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	4603      	mov	r3, r0
 8007824:	817b      	strh	r3, [r7, #10]
 8007826:	460b      	mov	r3, r1
 8007828:	813b      	strh	r3, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	8979      	ldrh	r1, [r7, #10]
 8007834:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <I2C_RequestMemoryWrite+0xa4>)
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fea3 	bl	8008588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fd35 	bl	80082b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e02c      	b.n	80078b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d105      	bne.n	8007868 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	b2da      	uxtb	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	629a      	str	r2, [r3, #40]	; 0x28
 8007866:	e015      	b.n	8007894 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	b29b      	uxth	r3, r3
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	69b9      	ldr	r1, [r7, #24]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fd1b 	bl	80082b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e012      	b.n	80078b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800788a:	893b      	ldrh	r3, [r7, #8]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2200      	movs	r2, #0
 800789c:	2180      	movs	r1, #128	; 0x80
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fcc9 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	80002000 	.word	0x80002000

080078bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	817b      	strh	r3, [r7, #10]
 80078ce:	460b      	mov	r3, r1
 80078d0:	813b      	strh	r3, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	8979      	ldrh	r1, [r7, #10]
 80078dc:	4b20      	ldr	r3, [pc, #128]	; (8007960 <I2C_RequestMemoryRead+0xa4>)
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	2300      	movs	r3, #0
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fe50 	bl	8008588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	69b9      	ldr	r1, [r7, #24]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fce2 	bl	80082b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e02c      	b.n	8007956 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d105      	bne.n	800790e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007902:	893b      	ldrh	r3, [r7, #8]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	629a      	str	r2, [r3, #40]	; 0x28
 800790c:	e015      	b.n	800793a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800790e:	893b      	ldrh	r3, [r7, #8]
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	b29b      	uxth	r3, r3
 8007914:	b2da      	uxtb	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	69b9      	ldr	r1, [r7, #24]
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fcc8 	bl	80082b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e012      	b.n	8007956 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007930:	893b      	ldrh	r3, [r7, #8]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2200      	movs	r2, #0
 8007942:	2140      	movs	r1, #64	; 0x40
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fc76 	bl	8008236 <I2C_WaitOnFlagUntilTimeout>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e000      	b.n	8007956 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	80002000 	.word	0x80002000

08007964 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007974:	b2db      	uxtb	r3, r3
 8007976:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800797a:	2b28      	cmp	r3, #40	; 0x28
 800797c:	d16a      	bne.n	8007a54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	b29b      	uxth	r3, r3
 8007998:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800799c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079aa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80079b8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d138      	bne.n	8007a34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80079c2:	897b      	ldrh	r3, [r7, #10]
 80079c4:	09db      	lsrs	r3, r3, #7
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	89bb      	ldrh	r3, [r7, #12]
 80079ca:	4053      	eors	r3, r2
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f003 0306 	and.w	r3, r3, #6
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d11c      	bne.n	8007a10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80079d6:	897b      	ldrh	r3, [r7, #10]
 80079d8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d13b      	bne.n	8007a64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2208      	movs	r2, #8
 80079f8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a02:	89ba      	ldrh	r2, [r7, #12]
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fdba 	bl	8007582 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a0e:	e029      	b.n	8007a64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007a10:	893b      	ldrh	r3, [r7, #8]
 8007a12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fde7 	bl	80085ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a26:	89ba      	ldrh	r2, [r7, #12]
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fda8 	bl	8007582 <HAL_I2C_AddrCallback>
}
 8007a32:	e017      	b.n	8007a64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fdd7 	bl	80085ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a46:	89ba      	ldrh	r2, [r7, #12]
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fd98 	bl	8007582 <HAL_I2C_AddrCallback>
}
 8007a52:	e007      	b.n	8007a64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007a64:	bf00      	nop
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	0b9b      	lsrs	r3, r3, #14
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e00d      	b.n	8007abe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	0bdb      	lsrs	r3, r3, #15
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007abc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b29      	cmp	r3, #41	; 0x29
 8007ac8:	d112      	bne.n	8007af0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2228      	movs	r2, #40	; 0x28
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2221      	movs	r2, #33	; 0x21
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ad8:	2101      	movs	r1, #1
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fd86 	bl	80085ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fd36 	bl	800755a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007aee:	e017      	b.n	8007b20 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b2a      	cmp	r3, #42	; 0x2a
 8007afa:	d111      	bne.n	8007b20 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2228      	movs	r2, #40	; 0x28
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2222      	movs	r2, #34	; 0x22
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fd6d 	bl	80085ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fd27 	bl	800756e <HAL_I2C_SlaveRxCpltCallback>
}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b44:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b21      	cmp	r3, #33	; 0x21
 8007b52:	d002      	beq.n	8007b5a <I2C_ITSlaveCplt+0x32>
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b29      	cmp	r3, #41	; 0x29
 8007b58:	d108      	bne.n	8007b6c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007b5a:	f248 0101 	movw	r1, #32769	; 0x8001
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fd44 	bl	80085ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2221      	movs	r2, #33	; 0x21
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
 8007b6a:	e00d      	b.n	8007b88 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b22      	cmp	r3, #34	; 0x22
 8007b70:	d002      	beq.n	8007b78 <I2C_ITSlaveCplt+0x50>
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b2a      	cmp	r3, #42	; 0x2a
 8007b76:	d107      	bne.n	8007b88 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007b78:	f248 0102 	movw	r1, #32770	; 0x8002
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fd35 	bl	80085ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2222      	movs	r2, #34	; 0x22
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6859      	ldr	r1, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4b80      	ldr	r3, [pc, #512]	; (8007da4 <I2C_ITSlaveCplt+0x27c>)
 8007ba4:	400b      	ands	r3, r1
 8007ba6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fb02 	bl	80081b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	0b9b      	lsrs	r3, r3, #14
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d07a      	beq.n	8007cb0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8111 	beq.w	8007df6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a73      	ldr	r2, [pc, #460]	; (8007da8 <I2C_ITSlaveCplt+0x280>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d059      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a71      	ldr	r2, [pc, #452]	; (8007dac <I2C_ITSlaveCplt+0x284>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d053      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a6f      	ldr	r2, [pc, #444]	; (8007db0 <I2C_ITSlaveCplt+0x288>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d04d      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a6d      	ldr	r2, [pc, #436]	; (8007db4 <I2C_ITSlaveCplt+0x28c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d047      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a6b      	ldr	r2, [pc, #428]	; (8007db8 <I2C_ITSlaveCplt+0x290>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d041      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a69      	ldr	r2, [pc, #420]	; (8007dbc <I2C_ITSlaveCplt+0x294>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d03b      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a67      	ldr	r2, [pc, #412]	; (8007dc0 <I2C_ITSlaveCplt+0x298>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d035      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a65      	ldr	r2, [pc, #404]	; (8007dc4 <I2C_ITSlaveCplt+0x29c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d02f      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a63      	ldr	r2, [pc, #396]	; (8007dc8 <I2C_ITSlaveCplt+0x2a0>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d029      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a61      	ldr	r2, [pc, #388]	; (8007dcc <I2C_ITSlaveCplt+0x2a4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d023      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a5f      	ldr	r2, [pc, #380]	; (8007dd0 <I2C_ITSlaveCplt+0x2a8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d01d      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a5d      	ldr	r2, [pc, #372]	; (8007dd4 <I2C_ITSlaveCplt+0x2ac>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d017      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a5b      	ldr	r2, [pc, #364]	; (8007dd8 <I2C_ITSlaveCplt+0x2b0>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d011      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a59      	ldr	r2, [pc, #356]	; (8007ddc <I2C_ITSlaveCplt+0x2b4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a57      	ldr	r2, [pc, #348]	; (8007de0 <I2C_ITSlaveCplt+0x2b8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d005      	beq.n	8007c94 <I2C_ITSlaveCplt+0x16c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a55      	ldr	r2, [pc, #340]	; (8007de4 <I2C_ITSlaveCplt+0x2bc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d105      	bne.n	8007ca0 <I2C_ITSlaveCplt+0x178>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	e004      	b.n	8007caa <I2C_ITSlaveCplt+0x182>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	8553      	strh	r3, [r2, #42]	; 0x2a
 8007cae:	e0a2      	b.n	8007df6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	0bdb      	lsrs	r3, r3, #15
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 809c 	beq.w	8007df6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ccc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 808f 	beq.w	8007df6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a32      	ldr	r2, [pc, #200]	; (8007da8 <I2C_ITSlaveCplt+0x280>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d059      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a30      	ldr	r2, [pc, #192]	; (8007dac <I2C_ITSlaveCplt+0x284>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d053      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a2e      	ldr	r2, [pc, #184]	; (8007db0 <I2C_ITSlaveCplt+0x288>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d04d      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2c      	ldr	r2, [pc, #176]	; (8007db4 <I2C_ITSlaveCplt+0x28c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d047      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <I2C_ITSlaveCplt+0x290>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d041      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a28      	ldr	r2, [pc, #160]	; (8007dbc <I2C_ITSlaveCplt+0x294>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d03b      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <I2C_ITSlaveCplt+0x298>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d035      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a24      	ldr	r2, [pc, #144]	; (8007dc4 <I2C_ITSlaveCplt+0x29c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d02f      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a22      	ldr	r2, [pc, #136]	; (8007dc8 <I2C_ITSlaveCplt+0x2a0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d029      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <I2C_ITSlaveCplt+0x2a4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d023      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <I2C_ITSlaveCplt+0x2a8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d01d      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <I2C_ITSlaveCplt+0x2ac>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d017      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a1a      	ldr	r2, [pc, #104]	; (8007dd8 <I2C_ITSlaveCplt+0x2b0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d011      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <I2C_ITSlaveCplt+0x2b4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00b      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <I2C_ITSlaveCplt+0x2b8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d005      	beq.n	8007d98 <I2C_ITSlaveCplt+0x270>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a14      	ldr	r2, [pc, #80]	; (8007de4 <I2C_ITSlaveCplt+0x2bc>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d127      	bne.n	8007de8 <I2C_ITSlaveCplt+0x2c0>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	e026      	b.n	8007df2 <I2C_ITSlaveCplt+0x2ca>
 8007da4:	fe00e800 	.word	0xfe00e800
 8007da8:	40020010 	.word	0x40020010
 8007dac:	40020028 	.word	0x40020028
 8007db0:	40020040 	.word	0x40020040
 8007db4:	40020058 	.word	0x40020058
 8007db8:	40020070 	.word	0x40020070
 8007dbc:	40020088 	.word	0x40020088
 8007dc0:	400200a0 	.word	0x400200a0
 8007dc4:	400200b8 	.word	0x400200b8
 8007dc8:	40020410 	.word	0x40020410
 8007dcc:	40020428 	.word	0x40020428
 8007dd0:	40020440 	.word	0x40020440
 8007dd4:	40020458 	.word	0x40020458
 8007dd8:	40020470 	.word	0x40020470
 8007ddc:	40020488 	.word	0x40020488
 8007de0:	400204a0 	.word	0x400204a0
 8007de4:	400204b8 	.word	0x400204b8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	089b      	lsrs	r3, r3, #2
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d020      	beq.n	8007e44 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f023 0304 	bic.w	r3, r3, #4
 8007e08:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	f043 0204 	orr.w	r2, r3, #4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d010      	beq.n	8007e92 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8a4 	bl	8007fc4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b28      	cmp	r3, #40	; 0x28
 8007e86:	d141      	bne.n	8007f0c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e88:	6979      	ldr	r1, [r7, #20]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f844 	bl	8007f18 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e90:	e03c      	b.n	8007f0c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e9a:	d014      	beq.n	8007ec6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fde5 	bl	8007a6c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <I2C_ITSlaveCplt+0x3ec>)
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fb6d 	bl	800759e <HAL_I2C_ListenCpltCallback>
}
 8007ec4:	e022      	b.n	8007f0c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b22      	cmp	r3, #34	; 0x22
 8007ed0:	d10e      	bne.n	8007ef0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fb40 	bl	800756e <HAL_I2C_SlaveRxCpltCallback>
}
 8007eee:	e00d      	b.n	8007f0c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fb27 	bl	800755a <HAL_I2C_SlaveTxCpltCallback>
}
 8007f0c:	bf00      	nop
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	ffff0000 	.word	0xffff0000

08007f18 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <I2C_ITListenCplt+0xa8>)
 8007f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	089b      	lsrs	r3, r3, #2
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d022      	beq.n	8007f96 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d012      	beq.n	8007f96 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	f043 0204 	orr.w	r2, r3, #4
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007f96:	f248 0103 	movw	r1, #32771	; 0x8003
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fb26 	bl	80085ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2210      	movs	r2, #16
 8007fa6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff faf4 	bl	800759e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	ffff0000 	.word	0xffff0000

08007fc4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a5d      	ldr	r2, [pc, #372]	; (8008158 <I2C_ITError+0x194>)
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b28      	cmp	r3, #40	; 0x28
 8007ffa:	d005      	beq.n	8008008 <I2C_ITError+0x44>
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	2b29      	cmp	r3, #41	; 0x29
 8008000:	d002      	beq.n	8008008 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b2a      	cmp	r3, #42	; 0x2a
 8008006:	d10b      	bne.n	8008020 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008008:	2103      	movs	r1, #3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 faee 	bl	80085ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2228      	movs	r2, #40	; 0x28
 8008014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a50      	ldr	r2, [pc, #320]	; (800815c <I2C_ITError+0x198>)
 800801c:	635a      	str	r2, [r3, #52]	; 0x34
 800801e:	e011      	b.n	8008044 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008020:	f248 0103 	movw	r1, #32771	; 0x8003
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fae1 	bl	80085ec <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b60      	cmp	r3, #96	; 0x60
 8008034:	d003      	beq.n	800803e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008048:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	d039      	beq.n	80080c6 <I2C_ITError+0x102>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b11      	cmp	r3, #17
 8008056:	d002      	beq.n	800805e <I2C_ITError+0x9a>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b21      	cmp	r3, #33	; 0x21
 800805c:	d133      	bne.n	80080c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800806c:	d107      	bne.n	800807e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800807c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	4618      	mov	r0, r3
 8008084:	f7fd ff18 	bl	8005eb8 <HAL_DMA_GetState>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d017      	beq.n	80080be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	4a33      	ldr	r2, [pc, #204]	; (8008160 <I2C_ITError+0x19c>)
 8008094:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fc fd9a 	bl	8004bdc <HAL_DMA_Abort_IT>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d04d      	beq.n	800814a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080bc:	e045      	b.n	800814a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f850 	bl	8008164 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080c4:	e041      	b.n	800814a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d039      	beq.n	8008142 <I2C_ITError+0x17e>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b12      	cmp	r3, #18
 80080d2:	d002      	beq.n	80080da <I2C_ITError+0x116>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b22      	cmp	r3, #34	; 0x22
 80080d8:	d133      	bne.n	8008142 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e8:	d107      	bne.n	80080fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fd feda 	bl	8005eb8 <HAL_DMA_GetState>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d017      	beq.n	800813a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	4a14      	ldr	r2, [pc, #80]	; (8008160 <I2C_ITError+0x19c>)
 8008110:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc fd5c 	bl	8004bdc <HAL_DMA_Abort_IT>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d011      	beq.n	800814e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008138:	e009      	b.n	800814e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f812 	bl	8008164 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008140:	e005      	b.n	800814e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f80e 	bl	8008164 <I2C_TreatErrorCallback>
  }
}
 8008148:	e002      	b.n	8008150 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800814e:	bf00      	nop
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	ffff0000 	.word	0xffff0000
 800815c:	0800760f 	.word	0x0800760f
 8008160:	080081fb 	.word	0x080081fb

08008164 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b60      	cmp	r3, #96	; 0x60
 8008176:	d10e      	bne.n	8008196 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff fa19 	bl	80075c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008194:	e009      	b.n	80081aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fa04 	bl	80075b2 <HAL_I2C_ErrorCallback>
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d103      	bne.n	80081d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2200      	movs	r2, #0
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d007      	beq.n	80081ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f042 0201 	orr.w	r2, r2, #1
 80081ec:	619a      	str	r2, [r3, #24]
  }
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	2200      	movs	r2, #0
 8008216:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008224:	2200      	movs	r2, #0
 8008226:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff ff9b 	bl	8008164 <I2C_TreatErrorCallback>
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	4613      	mov	r3, r2
 8008244:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008246:	e022      	b.n	800828e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800824e:	d01e      	beq.n	800828e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008250:	f7fb fa86 	bl	8003760 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d113      	bne.n	800828e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826a:	f043 0220 	orr.w	r2, r3, #32
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e00f      	b.n	80082ae <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d0cd      	beq.n	8008248 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082c2:	e02c      	b.n	800831e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f871 	bl	80083b0 <I2C_IsErrorOccurred>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e02a      	b.n	800832e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082de:	d01e      	beq.n	800831e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082e0:	f7fb fa3e 	bl	8003760 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d302      	bcc.n	80082f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d113      	bne.n	800831e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	f043 0220 	orr.w	r2, r3, #32
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e007      	b.n	800832e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d1cb      	bne.n	80082c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008342:	e028      	b.n	8008396 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f831 	bl	80083b0 <I2C_IsErrorOccurred>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e026      	b.n	80083a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008358:	f7fb fa02 	bl	8003760 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	429a      	cmp	r2, r3
 8008366:	d302      	bcc.n	800836e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d113      	bne.n	8008396 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008372:	f043 0220 	orr.w	r2, r3, #32
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e007      	b.n	80083a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d1cf      	bne.n	8008344 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d075      	beq.n	80084c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2210      	movs	r2, #16
 80083e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083e4:	e056      	b.n	8008494 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ec:	d052      	beq.n	8008494 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083ee:	f7fb f9b7 	bl	8003760 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <I2C_IsErrorOccurred+0x54>
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d147      	bne.n	8008494 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800840e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008416:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008426:	d12e      	bne.n	8008486 <I2C_IsErrorOccurred+0xd6>
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800842e:	d02a      	beq.n	8008486 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008430:	7cfb      	ldrb	r3, [r7, #19]
 8008432:	2b20      	cmp	r3, #32
 8008434:	d027      	beq.n	8008486 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008444:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008446:	f7fb f98b 	bl	8003760 <HAL_GetTick>
 800844a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800844c:	e01b      	b.n	8008486 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800844e:	f7fb f987 	bl	8003760 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b19      	cmp	r3, #25
 800845a:	d914      	bls.n	8008486 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008460:	f043 0220 	orr.w	r2, r3, #32
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b20      	cmp	r3, #32
 8008492:	d1dc      	bne.n	800844e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d003      	beq.n	80084aa <I2C_IsErrorOccurred+0xfa>
 80084a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d09d      	beq.n	80083e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80084aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d103      	bne.n	80084ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2220      	movs	r2, #32
 80084b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	f043 0304 	orr.w	r3, r3, #4
 80084c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	f043 0308 	orr.w	r3, r3, #8
 8008502:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800850c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	f043 0302 	orr.w	r3, r3, #2
 8008524:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800852e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01c      	beq.n	8008578 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fe37 	bl	80081b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <I2C_IsErrorOccurred+0x1d4>)
 8008550:	400b      	ands	r3, r1
 8008552:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	431a      	orrs	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800857c:	4618      	mov	r0, r3
 800857e:	3728      	adds	r7, #40	; 0x28
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	fe00e800 	.word	0xfe00e800

08008588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	607b      	str	r3, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	817b      	strh	r3, [r7, #10]
 8008596:	4613      	mov	r3, r2
 8008598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800859a:	897b      	ldrh	r3, [r7, #10]
 800859c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085a0:	7a7b      	ldrb	r3, [r7, #9]
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085a8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	0d5b      	lsrs	r3, r3, #21
 80085c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80085c6:	4b08      	ldr	r3, [pc, #32]	; (80085e8 <I2C_TransferConfig+0x60>)
 80085c8:	430b      	orrs	r3, r1
 80085ca:	43db      	mvns	r3, r3
 80085cc:	ea02 0103 	and.w	r1, r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	03ff63ff 	.word	0x03ff63ff

080085ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80085fc:	887b      	ldrh	r3, [r7, #2]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00f      	beq.n	8008626 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800860c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800861a:	2b28      	cmp	r3, #40	; 0x28
 800861c:	d003      	beq.n	8008626 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008624:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008626:	887b      	ldrh	r3, [r7, #2]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00f      	beq.n	8008650 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008636:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008644:	2b28      	cmp	r3, #40	; 0x28
 8008646:	d003      	beq.n	8008650 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800864e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008650:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	da03      	bge.n	8008660 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800865e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008660:	887b      	ldrh	r3, [r7, #2]
 8008662:	2b10      	cmp	r3, #16
 8008664:	d103      	bne.n	800866e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800866c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800866e:	887b      	ldrh	r3, [r7, #2]
 8008670:	2b20      	cmp	r3, #32
 8008672:	d103      	bne.n	800867c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f043 0320 	orr.w	r3, r3, #32
 800867a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800867c:	887b      	ldrh	r3, [r7, #2]
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d103      	bne.n	800868a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008688:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	43da      	mvns	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	400a      	ands	r2, r1
 800869a:	601a      	str	r2, [r3, #0]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d138      	bne.n	8008730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e032      	b.n	8008732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2224      	movs	r2, #36	; 0x24
 80086d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6819      	ldr	r1, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0201 	orr.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	e000      	b.n	8008732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
  }
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800873e:	b480      	push	{r7}
 8008740:	b085      	sub	sp, #20
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b20      	cmp	r3, #32
 8008752:	d139      	bne.n	80087c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800875e:	2302      	movs	r3, #2
 8008760:	e033      	b.n	80087ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2224      	movs	r2, #36	; 0x24
 800876e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0201 	bic.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	e000      	b.n	80087ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80087c8:	2302      	movs	r3, #2
  }
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
	...

080087d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80087e0:	4b29      	ldr	r3, [pc, #164]	; (8008888 <HAL_PWREx_ConfigSupply+0xb0>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	2b06      	cmp	r3, #6
 80087ea:	d00a      	beq.n	8008802 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087ec:	4b26      	ldr	r3, [pc, #152]	; (8008888 <HAL_PWREx_ConfigSupply+0xb0>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d001      	beq.n	80087fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e03f      	b.n	800887e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e03d      	b.n	800887e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008802:	4b21      	ldr	r3, [pc, #132]	; (8008888 <HAL_PWREx_ConfigSupply+0xb0>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800880a:	491f      	ldr	r1, [pc, #124]	; (8008888 <HAL_PWREx_ConfigSupply+0xb0>)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4313      	orrs	r3, r2
 8008810:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008812:	f7fa ffa5 	bl	8003760 <HAL_GetTick>
 8008816:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008818:	e009      	b.n	800882e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800881a:	f7fa ffa1 	bl	8003760 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008828:	d901      	bls.n	800882e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e027      	b.n	800887e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800882e:	4b16      	ldr	r3, [pc, #88]	; (8008888 <HAL_PWREx_ConfigSupply+0xb0>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883a:	d1ee      	bne.n	800881a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b1e      	cmp	r3, #30
 8008840:	d008      	beq.n	8008854 <HAL_PWREx_ConfigSupply+0x7c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b2e      	cmp	r3, #46	; 0x2e
 8008846:	d005      	beq.n	8008854 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b1d      	cmp	r3, #29
 800884c:	d002      	beq.n	8008854 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b2d      	cmp	r3, #45	; 0x2d
 8008852:	d113      	bne.n	800887c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008854:	f7fa ff84 	bl	8003760 <HAL_GetTick>
 8008858:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800885a:	e009      	b.n	8008870 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800885c:	f7fa ff80 	bl	8003760 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800886a:	d901      	bls.n	8008870 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e006      	b.n	800887e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <HAL_PWREx_ConfigSupply+0xb0>)
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0311 	and.w	r3, r3, #17
 8008878:	2b11      	cmp	r3, #17
 800887a:	d1ef      	bne.n	800885c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	58024800 	.word	0x58024800

0800888c <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e02d      	b.n	80088fa <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2202      	movs	r2, #2
 80088a2:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0220 	bic.w	r2, r2, #32
 80088b2:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088c6:	f023 030f 	bic.w	r3, r3, #15
 80088ca:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 021c 	bic.w	r2, r2, #28
 80088da:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0207 	bic.w	r2, r2, #7
 80088ea:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08c      	sub	sp, #48	; 0x30
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e397      	b.n	800904a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8087 	beq.w	8008a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008928:	4b9e      	ldr	r3, [pc, #632]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008932:	4b9c      	ldr	r3, [pc, #624]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	2b10      	cmp	r3, #16
 800893c:	d007      	beq.n	800894e <HAL_RCC_OscConfig+0x46>
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b18      	cmp	r3, #24
 8008942:	d110      	bne.n	8008966 <HAL_RCC_OscConfig+0x5e>
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d10b      	bne.n	8008966 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800894e:	4b95      	ldr	r3, [pc, #596]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d06c      	beq.n	8008a34 <HAL_RCC_OscConfig+0x12c>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d168      	bne.n	8008a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e371      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896e:	d106      	bne.n	800897e <HAL_RCC_OscConfig+0x76>
 8008970:	4b8c      	ldr	r3, [pc, #560]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a8b      	ldr	r2, [pc, #556]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	e02e      	b.n	80089dc <HAL_RCC_OscConfig+0xd4>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10c      	bne.n	80089a0 <HAL_RCC_OscConfig+0x98>
 8008986:	4b87      	ldr	r3, [pc, #540]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a86      	ldr	r2, [pc, #536]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 800898c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	4b84      	ldr	r3, [pc, #528]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a83      	ldr	r2, [pc, #524]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e01d      	b.n	80089dc <HAL_RCC_OscConfig+0xd4>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089a8:	d10c      	bne.n	80089c4 <HAL_RCC_OscConfig+0xbc>
 80089aa:	4b7e      	ldr	r3, [pc, #504]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a7d      	ldr	r2, [pc, #500]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	4b7b      	ldr	r3, [pc, #492]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a7a      	ldr	r2, [pc, #488]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	e00b      	b.n	80089dc <HAL_RCC_OscConfig+0xd4>
 80089c4:	4b77      	ldr	r3, [pc, #476]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a76      	ldr	r2, [pc, #472]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	4b74      	ldr	r3, [pc, #464]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a73      	ldr	r2, [pc, #460]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 80089d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d013      	beq.n	8008a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e4:	f7fa febc 	bl	8003760 <HAL_GetTick>
 80089e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089ea:	e008      	b.n	80089fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089ec:	f7fa feb8 	bl	8003760 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b64      	cmp	r3, #100	; 0x64
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e325      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089fe:	4b69      	ldr	r3, [pc, #420]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <HAL_RCC_OscConfig+0xe4>
 8008a0a:	e014      	b.n	8008a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7fa fea8 	bl	8003760 <HAL_GetTick>
 8008a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a14:	f7fa fea4 	bl	8003760 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b64      	cmp	r3, #100	; 0x64
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e311      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a26:	4b5f      	ldr	r3, [pc, #380]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f0      	bne.n	8008a14 <HAL_RCC_OscConfig+0x10c>
 8008a32:	e000      	b.n	8008a36 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 808a 	beq.w	8008b58 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a44:	4b57      	ldr	r3, [pc, #348]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a4e:	4b55      	ldr	r3, [pc, #340]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <HAL_RCC_OscConfig+0x162>
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	2b18      	cmp	r3, #24
 8008a5e:	d137      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x1c8>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d132      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <HAL_RCC_OscConfig+0x17a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e2e3      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a82:	4b48      	ldr	r3, [pc, #288]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f023 0219 	bic.w	r2, r3, #25
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	4945      	ldr	r1, [pc, #276]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a94:	f7fa fe64 	bl	8003760 <HAL_GetTick>
 8008a98:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a9c:	f7fa fe60 	bl	8003760 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e2cd      	b.n	800904a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aae:	4b3d      	ldr	r3, [pc, #244]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f0      	beq.n	8008a9c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aba:	4b3a      	ldr	r3, [pc, #232]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	061b      	lsls	r3, r3, #24
 8008ac8:	4936      	ldr	r1, [pc, #216]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ace:	e043      	b.n	8008b58 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d026      	beq.n	8008b26 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ad8:	4b32      	ldr	r3, [pc, #200]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f023 0219 	bic.w	r2, r3, #25
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	492f      	ldr	r1, [pc, #188]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aea:	f7fa fe39 	bl	8003760 <HAL_GetTick>
 8008aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008af2:	f7fa fe35 	bl	8003760 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e2a2      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b10:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	4921      	ldr	r1, [pc, #132]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	604b      	str	r3, [r1, #4]
 8008b24:	e018      	b.n	8008b58 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b26:	4b1f      	ldr	r3, [pc, #124]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b2c:	f023 0301 	bic.w	r3, r3, #1
 8008b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b32:	f7fa fe15 	bl	8003760 <HAL_GetTick>
 8008b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b38:	e008      	b.n	8008b4c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b3a:	f7fa fe11 	bl	8003760 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d901      	bls.n	8008b4c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e27e      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b4c:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1f0      	bne.n	8008b3a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d06d      	beq.n	8008c40 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	d007      	beq.n	8008b8a <HAL_RCC_OscConfig+0x282>
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b18      	cmp	r3, #24
 8008b7e:	d11e      	bne.n	8008bbe <HAL_RCC_OscConfig+0x2b6>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d119      	bne.n	8008bbe <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <HAL_RCC_OscConfig+0x29c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x2a0>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d004      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e253      	b.n	800904a <HAL_RCC_OscConfig+0x742>
 8008ba2:	bf00      	nop
 8008ba4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ba8:	4ba3      	ldr	r3, [pc, #652]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	061b      	lsls	r3, r3, #24
 8008bb6:	49a0      	ldr	r1, [pc, #640]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bbc:	e040      	b.n	8008c40 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d023      	beq.n	8008c0e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bc6:	4b9c      	ldr	r3, [pc, #624]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a9b      	ldr	r2, [pc, #620]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd2:	f7fa fdc5 	bl	8003760 <HAL_GetTick>
 8008bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008bda:	f7fa fdc1 	bl	8003760 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e22e      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bec:	4b92      	ldr	r3, [pc, #584]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f0      	beq.n	8008bda <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bf8:	4b8f      	ldr	r3, [pc, #572]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	061b      	lsls	r3, r3, #24
 8008c06:	498c      	ldr	r1, [pc, #560]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60cb      	str	r3, [r1, #12]
 8008c0c:	e018      	b.n	8008c40 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c0e:	4b8a      	ldr	r3, [pc, #552]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a89      	ldr	r2, [pc, #548]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c1a:	f7fa fda1 	bl	8003760 <HAL_GetTick>
 8008c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c20:	e008      	b.n	8008c34 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c22:	f7fa fd9d 	bl	8003760 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e20a      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c34:	4b80      	ldr	r3, [pc, #512]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f0      	bne.n	8008c22 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d036      	beq.n	8008cba <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d019      	beq.n	8008c88 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c54:	4b78      	ldr	r3, [pc, #480]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c58:	4a77      	ldr	r2, [pc, #476]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c60:	f7fa fd7e 	bl	8003760 <HAL_GetTick>
 8008c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c68:	f7fa fd7a 	bl	8003760 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e1e7      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c7a:	4b6f      	ldr	r3, [pc, #444]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f0      	beq.n	8008c68 <HAL_RCC_OscConfig+0x360>
 8008c86:	e018      	b.n	8008cba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c88:	4b6b      	ldr	r3, [pc, #428]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c8c:	4a6a      	ldr	r2, [pc, #424]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c94:	f7fa fd64 	bl	8003760 <HAL_GetTick>
 8008c98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c9c:	f7fa fd60 	bl	8003760 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e1cd      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cae:	4b62      	ldr	r3, [pc, #392]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f0      	bne.n	8008c9c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d036      	beq.n	8008d34 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d019      	beq.n	8008d02 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cce:	4b5a      	ldr	r3, [pc, #360]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a59      	ldr	r2, [pc, #356]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cda:	f7fa fd41 	bl	8003760 <HAL_GetTick>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ce0:	e008      	b.n	8008cf4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ce2:	f7fa fd3d 	bl	8003760 <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d901      	bls.n	8008cf4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e1aa      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cf4:	4b50      	ldr	r3, [pc, #320]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0f0      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x3da>
 8008d00:	e018      	b.n	8008d34 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d02:	4b4d      	ldr	r3, [pc, #308]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a4c      	ldr	r2, [pc, #304]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d0e:	f7fa fd27 	bl	8003760 <HAL_GetTick>
 8008d12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d14:	e008      	b.n	8008d28 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d16:	f7fa fd23 	bl	8003760 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e190      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d28:	4b43      	ldr	r3, [pc, #268]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1f0      	bne.n	8008d16 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8085 	beq.w	8008e4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d42:	4b3e      	ldr	r3, [pc, #248]	; (8008e3c <HAL_RCC_OscConfig+0x534>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a3d      	ldr	r2, [pc, #244]	; (8008e3c <HAL_RCC_OscConfig+0x534>)
 8008d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d4e:	f7fa fd07 	bl	8003760 <HAL_GetTick>
 8008d52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d56:	f7fa fd03 	bl	8003760 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b64      	cmp	r3, #100	; 0x64
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e170      	b.n	800904a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d68:	4b34      	ldr	r3, [pc, #208]	; (8008e3c <HAL_RCC_OscConfig+0x534>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0f0      	beq.n	8008d56 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d106      	bne.n	8008d8a <HAL_RCC_OscConfig+0x482>
 8008d7c:	4b2e      	ldr	r3, [pc, #184]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d80:	4a2d      	ldr	r2, [pc, #180]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d82:	f043 0301 	orr.w	r3, r3, #1
 8008d86:	6713      	str	r3, [r2, #112]	; 0x70
 8008d88:	e02d      	b.n	8008de6 <HAL_RCC_OscConfig+0x4de>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10c      	bne.n	8008dac <HAL_RCC_OscConfig+0x4a4>
 8008d92:	4b29      	ldr	r3, [pc, #164]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d9e:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	4a25      	ldr	r2, [pc, #148]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008da4:	f023 0304 	bic.w	r3, r3, #4
 8008da8:	6713      	str	r3, [r2, #112]	; 0x70
 8008daa:	e01c      	b.n	8008de6 <HAL_RCC_OscConfig+0x4de>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b05      	cmp	r3, #5
 8008db2:	d10c      	bne.n	8008dce <HAL_RCC_OscConfig+0x4c6>
 8008db4:	4b20      	ldr	r3, [pc, #128]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a1f      	ldr	r2, [pc, #124]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008dba:	f043 0304 	orr.w	r3, r3, #4
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc0:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc4:	4a1c      	ldr	r2, [pc, #112]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	6713      	str	r3, [r2, #112]	; 0x70
 8008dcc:	e00b      	b.n	8008de6 <HAL_RCC_OscConfig+0x4de>
 8008dce:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd2:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dde:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008de0:	f023 0304 	bic.w	r3, r3, #4
 8008de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d015      	beq.n	8008e1a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dee:	f7fa fcb7 	bl	8003760 <HAL_GetTick>
 8008df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008df4:	e00a      	b.n	8008e0c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008df6:	f7fa fcb3 	bl	8003760 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d901      	bls.n	8008e0c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e11e      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <HAL_RCC_OscConfig+0x530>)
 8008e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0ee      	beq.n	8008df6 <HAL_RCC_OscConfig+0x4ee>
 8008e18:	e018      	b.n	8008e4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e1a:	f7fa fca1 	bl	8003760 <HAL_GetTick>
 8008e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e20:	e00e      	b.n	8008e40 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e22:	f7fa fc9d 	bl	8003760 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d905      	bls.n	8008e40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e108      	b.n	800904a <HAL_RCC_OscConfig+0x742>
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e40:	4b84      	ldr	r3, [pc, #528]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1ea      	bne.n	8008e22 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80f9 	beq.w	8009048 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e56:	4b7f      	ldr	r3, [pc, #508]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e5e:	2b18      	cmp	r3, #24
 8008e60:	f000 80b4 	beq.w	8008fcc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	f040 8095 	bne.w	8008f98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e6e:	4b79      	ldr	r3, [pc, #484]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a78      	ldr	r2, [pc, #480]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7a:	f7fa fc71 	bl	8003760 <HAL_GetTick>
 8008e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e80:	e008      	b.n	8008e94 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e82:	f7fa fc6d 	bl	8003760 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e0da      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e94:	4b6f      	ldr	r3, [pc, #444]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1f0      	bne.n	8008e82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ea0:	4b6c      	ldr	r3, [pc, #432]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ea4:	4b6c      	ldr	r3, [pc, #432]	; (8009058 <HAL_RCC_OscConfig+0x750>)
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008eb0:	0112      	lsls	r2, r2, #4
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	4967      	ldr	r1, [pc, #412]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	628b      	str	r3, [r1, #40]	; 0x28
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	025b      	lsls	r3, r3, #9
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	041b      	lsls	r3, r3, #16
 8008ed8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008eea:	495a      	ldr	r1, [pc, #360]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ef0:	4b58      	ldr	r3, [pc, #352]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	4a57      	ldr	r2, [pc, #348]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008ef6:	f023 0301 	bic.w	r3, r3, #1
 8008efa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008efc:	4b55      	ldr	r3, [pc, #340]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f00:	4b56      	ldr	r3, [pc, #344]	; (800905c <HAL_RCC_OscConfig+0x754>)
 8008f02:	4013      	ands	r3, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f08:	00d2      	lsls	r2, r2, #3
 8008f0a:	4952      	ldr	r1, [pc, #328]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f10:	4b50      	ldr	r3, [pc, #320]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	f023 020c 	bic.w	r2, r3, #12
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1c:	494d      	ldr	r1, [pc, #308]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f22:	4b4c      	ldr	r3, [pc, #304]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f26:	f023 0202 	bic.w	r2, r3, #2
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f2e:	4949      	ldr	r1, [pc, #292]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f34:	4b47      	ldr	r3, [pc, #284]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	4a46      	ldr	r2, [pc, #280]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f40:	4b44      	ldr	r3, [pc, #272]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f44:	4a43      	ldr	r2, [pc, #268]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f4c:	4b41      	ldr	r3, [pc, #260]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a40      	ldr	r2, [pc, #256]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008f58:	4b3e      	ldr	r3, [pc, #248]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a3d      	ldr	r2, [pc, #244]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f64:	4b3b      	ldr	r3, [pc, #236]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a3a      	ldr	r2, [pc, #232]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f70:	f7fa fbf6 	bl	8003760 <HAL_GetTick>
 8008f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f78:	f7fa fbf2 	bl	8003760 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e05f      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f8a:	4b32      	ldr	r3, [pc, #200]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0x670>
 8008f96:	e057      	b.n	8009048 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f98:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a2d      	ldr	r2, [pc, #180]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa4:	f7fa fbdc 	bl	8003760 <HAL_GetTick>
 8008fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fac:	f7fa fbd8 	bl	8003760 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e045      	b.n	800904a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fbe:	4b25      	ldr	r3, [pc, #148]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f0      	bne.n	8008fac <HAL_RCC_OscConfig+0x6a4>
 8008fca:	e03d      	b.n	8009048 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fcc:	4b21      	ldr	r3, [pc, #132]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fd2:	4b20      	ldr	r3, [pc, #128]	; (8009054 <HAL_RCC_OscConfig+0x74c>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d031      	beq.n	8009044 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f003 0203 	and.w	r2, r3, #3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d12a      	bne.n	8009044 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	091b      	lsrs	r3, r3, #4
 8008ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d122      	bne.n	8009044 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009008:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800900a:	429a      	cmp	r2, r3
 800900c:	d11a      	bne.n	8009044 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	0a5b      	lsrs	r3, r3, #9
 8009012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d111      	bne.n	8009044 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	0c1b      	lsrs	r3, r3, #16
 8009024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800902e:	429a      	cmp	r2, r3
 8009030:	d108      	bne.n	8009044 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	0e1b      	lsrs	r3, r3, #24
 8009036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009040:	429a      	cmp	r2, r3
 8009042:	d001      	beq.n	8009048 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3730      	adds	r7, #48	; 0x30
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	58024400 	.word	0x58024400
 8009058:	fffffc0c 	.word	0xfffffc0c
 800905c:	ffff0007 	.word	0xffff0007

08009060 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e19c      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009074:	4b8a      	ldr	r3, [pc, #552]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d910      	bls.n	80090a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009082:	4b87      	ldr	r3, [pc, #540]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f023 020f 	bic.w	r2, r3, #15
 800908a:	4985      	ldr	r1, [pc, #532]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	4313      	orrs	r3, r2
 8009090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009092:	4b83      	ldr	r3, [pc, #524]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e184      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d010      	beq.n	80090d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	4b7b      	ldr	r3, [pc, #492]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090bc:	429a      	cmp	r2, r3
 80090be:	d908      	bls.n	80090d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090c0:	4b78      	ldr	r3, [pc, #480]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	4975      	ldr	r1, [pc, #468]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d010      	beq.n	8009100 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695a      	ldr	r2, [r3, #20]
 80090e2:	4b70      	ldr	r3, [pc, #448]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d908      	bls.n	8009100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090ee:	4b6d      	ldr	r3, [pc, #436]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	496a      	ldr	r1, [pc, #424]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	d010      	beq.n	800912e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	4b64      	ldr	r3, [pc, #400]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009118:	429a      	cmp	r2, r3
 800911a:	d908      	bls.n	800912e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800911c:	4b61      	ldr	r3, [pc, #388]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	495e      	ldr	r1, [pc, #376]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800912a:	4313      	orrs	r3, r2
 800912c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d010      	beq.n	800915c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69da      	ldr	r2, [r3, #28]
 800913e:	4b59      	ldr	r3, [pc, #356]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009146:	429a      	cmp	r2, r3
 8009148:	d908      	bls.n	800915c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800914a:	4b56      	ldr	r3, [pc, #344]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	4953      	ldr	r1, [pc, #332]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009158:	4313      	orrs	r3, r2
 800915a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d010      	beq.n	800918a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	4b4d      	ldr	r3, [pc, #308]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	429a      	cmp	r2, r3
 8009176:	d908      	bls.n	800918a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009178:	4b4a      	ldr	r3, [pc, #296]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f023 020f 	bic.w	r2, r3, #15
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	4947      	ldr	r1, [pc, #284]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009186:	4313      	orrs	r3, r2
 8009188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d055      	beq.n	8009242 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009196:	4b43      	ldr	r3, [pc, #268]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	4940      	ldr	r1, [pc, #256]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d107      	bne.n	80091c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091b0:	4b3c      	ldr	r3, [pc, #240]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d121      	bne.n	8009200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e0f6      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d107      	bne.n	80091d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091c8:	4b36      	ldr	r3, [pc, #216]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d115      	bne.n	8009200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e0ea      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d107      	bne.n	80091f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091e0:	4b30      	ldr	r3, [pc, #192]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0de      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091f0:	4b2c      	ldr	r3, [pc, #176]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0d6      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009200:	4b28      	ldr	r3, [pc, #160]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f023 0207 	bic.w	r2, r3, #7
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4925      	ldr	r1, [pc, #148]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800920e:	4313      	orrs	r3, r2
 8009210:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009212:	f7fa faa5 	bl	8003760 <HAL_GetTick>
 8009216:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009218:	e00a      	b.n	8009230 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800921a:	f7fa faa1 	bl	8003760 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	f241 3288 	movw	r2, #5000	; 0x1388
 8009228:	4293      	cmp	r3, r2
 800922a:	d901      	bls.n	8009230 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e0be      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009230:	4b1c      	ldr	r3, [pc, #112]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	429a      	cmp	r2, r3
 8009240:	d1eb      	bne.n	800921a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	4b14      	ldr	r3, [pc, #80]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	429a      	cmp	r2, r3
 800925c:	d208      	bcs.n	8009270 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f023 020f 	bic.w	r2, r3, #15
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	490e      	ldr	r1, [pc, #56]	; (80092a4 <HAL_RCC_ClockConfig+0x244>)
 800926c:	4313      	orrs	r3, r2
 800926e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	d214      	bcs.n	80092a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800927e:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f023 020f 	bic.w	r2, r3, #15
 8009286:	4906      	ldr	r1, [pc, #24]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	4313      	orrs	r3, r2
 800928c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <HAL_RCC_ClockConfig+0x240>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d005      	beq.n	80092a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e086      	b.n	80093ae <HAL_RCC_ClockConfig+0x34e>
 80092a0:	52002000 	.word	0x52002000
 80092a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d010      	beq.n	80092d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691a      	ldr	r2, [r3, #16]
 80092b8:	4b3f      	ldr	r3, [pc, #252]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d208      	bcs.n	80092d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092c4:	4b3c      	ldr	r3, [pc, #240]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	4939      	ldr	r1, [pc, #228]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d010      	beq.n	8009304 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d208      	bcs.n	8009304 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092f2:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	492e      	ldr	r1, [pc, #184]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009300:	4313      	orrs	r3, r2
 8009302:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0310 	and.w	r3, r3, #16
 800930c:	2b00      	cmp	r3, #0
 800930e:	d010      	beq.n	8009332 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	4b28      	ldr	r3, [pc, #160]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800931c:	429a      	cmp	r2, r3
 800931e:	d208      	bcs.n	8009332 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009320:	4b25      	ldr	r3, [pc, #148]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	4922      	ldr	r1, [pc, #136]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 800932e:	4313      	orrs	r3, r2
 8009330:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69da      	ldr	r2, [r3, #28]
 8009342:	4b1d      	ldr	r3, [pc, #116]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800934a:	429a      	cmp	r2, r3
 800934c:	d208      	bcs.n	8009360 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800934e:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	4917      	ldr	r1, [pc, #92]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 800935c:	4313      	orrs	r3, r2
 800935e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009360:	f000 f834 	bl	80093cc <HAL_RCC_GetSysClockFreq>
 8009364:	4602      	mov	r2, r0
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	4912      	ldr	r1, [pc, #72]	; (80093bc <HAL_RCC_ClockConfig+0x35c>)
 8009372:	5ccb      	ldrb	r3, [r1, r3]
 8009374:	f003 031f 	and.w	r3, r3, #31
 8009378:	fa22 f303 	lsr.w	r3, r2, r3
 800937c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800937e:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <HAL_RCC_ClockConfig+0x358>)
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f003 030f 	and.w	r3, r3, #15
 8009386:	4a0d      	ldr	r2, [pc, #52]	; (80093bc <HAL_RCC_ClockConfig+0x35c>)
 8009388:	5cd3      	ldrb	r3, [r2, r3]
 800938a:	f003 031f 	and.w	r3, r3, #31
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	4a0a      	ldr	r2, [pc, #40]	; (80093c0 <HAL_RCC_ClockConfig+0x360>)
 8009396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009398:	4a0a      	ldr	r2, [pc, #40]	; (80093c4 <HAL_RCC_ClockConfig+0x364>)
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800939e:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <HAL_RCC_ClockConfig+0x368>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fa f992 	bl	80036cc <HAL_InitTick>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	58024400 	.word	0x58024400
 80093bc:	0800fb94 	.word	0x0800fb94
 80093c0:	24000488 	.word	0x24000488
 80093c4:	24000484 	.word	0x24000484
 80093c8:	24000454 	.word	0x24000454

080093cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b089      	sub	sp, #36	; 0x24
 80093d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093d2:	4bb3      	ldr	r3, [pc, #716]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093da:	2b18      	cmp	r3, #24
 80093dc:	f200 8155 	bhi.w	800968a <HAL_RCC_GetSysClockFreq+0x2be>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	0800944d 	.word	0x0800944d
 80093ec:	0800968b 	.word	0x0800968b
 80093f0:	0800968b 	.word	0x0800968b
 80093f4:	0800968b 	.word	0x0800968b
 80093f8:	0800968b 	.word	0x0800968b
 80093fc:	0800968b 	.word	0x0800968b
 8009400:	0800968b 	.word	0x0800968b
 8009404:	0800968b 	.word	0x0800968b
 8009408:	08009473 	.word	0x08009473
 800940c:	0800968b 	.word	0x0800968b
 8009410:	0800968b 	.word	0x0800968b
 8009414:	0800968b 	.word	0x0800968b
 8009418:	0800968b 	.word	0x0800968b
 800941c:	0800968b 	.word	0x0800968b
 8009420:	0800968b 	.word	0x0800968b
 8009424:	0800968b 	.word	0x0800968b
 8009428:	08009479 	.word	0x08009479
 800942c:	0800968b 	.word	0x0800968b
 8009430:	0800968b 	.word	0x0800968b
 8009434:	0800968b 	.word	0x0800968b
 8009438:	0800968b 	.word	0x0800968b
 800943c:	0800968b 	.word	0x0800968b
 8009440:	0800968b 	.word	0x0800968b
 8009444:	0800968b 	.word	0x0800968b
 8009448:	0800947f 	.word	0x0800947f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944c:	4b94      	ldr	r3, [pc, #592]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009458:	4b91      	ldr	r3, [pc, #580]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	08db      	lsrs	r3, r3, #3
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	4a90      	ldr	r2, [pc, #576]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009464:	fa22 f303 	lsr.w	r3, r2, r3
 8009468:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800946a:	e111      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800946c:	4b8d      	ldr	r3, [pc, #564]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800946e:	61bb      	str	r3, [r7, #24]
    break;
 8009470:	e10e      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009472:	4b8d      	ldr	r3, [pc, #564]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009474:	61bb      	str	r3, [r7, #24]
    break;
 8009476:	e10b      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009478:	4b8c      	ldr	r3, [pc, #560]	; (80096ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800947a:	61bb      	str	r3, [r7, #24]
    break;
 800947c:	e108      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800947e:	4b88      	ldr	r3, [pc, #544]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009488:	4b85      	ldr	r3, [pc, #532]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948c:	091b      	lsrs	r3, r3, #4
 800948e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009492:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009494:	4b82      	ldr	r3, [pc, #520]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800949e:	4b80      	ldr	r3, [pc, #512]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	08db      	lsrs	r3, r3, #3
 80094a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 80e1 	beq.w	8009684 <HAL_RCC_GetSysClockFreq+0x2b8>
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	f000 8083 	beq.w	80095d0 <HAL_RCC_GetSysClockFreq+0x204>
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	f200 80a1 	bhi.w	8009614 <HAL_RCC_GetSysClockFreq+0x248>
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_RCC_GetSysClockFreq+0x114>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d056      	beq.n	800958c <HAL_RCC_GetSysClockFreq+0x1c0>
 80094de:	e099      	b.n	8009614 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094e0:	4b6f      	ldr	r3, [pc, #444]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02d      	beq.n	8009548 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094ec:	4b6c      	ldr	r3, [pc, #432]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	08db      	lsrs	r3, r3, #3
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	4a6b      	ldr	r2, [pc, #428]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
 80094fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	ee07 3a90 	vmov	s15, r3
 8009504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009516:	4b62      	ldr	r3, [pc, #392]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009526:	ed97 6a02 	vldr	s12, [r7, #8]
 800952a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80096b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800952e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800953a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800953e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009542:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009546:	e087      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	eddf 6a58 	vldr	s13, [pc, #352]	; 80096b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955a:	4b51      	ldr	r3, [pc, #324]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956a:	ed97 6a02 	vldr	s12, [r7, #8]
 800956e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80096b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800957e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800958a:	e065      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	eddf 6a48 	vldr	s13, [pc, #288]	; 80096b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800959a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959e:	4b40      	ldr	r3, [pc, #256]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80095b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80096b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ce:	e043      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80096bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80095de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e2:	4b2f      	ldr	r3, [pc, #188]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80096b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009612:	e021      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80096b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b1e      	ldr	r3, [pc, #120]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a02 	vldr	s12, [r7, #8]
 800963a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80096b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009656:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	0a5b      	lsrs	r3, r3, #9
 800965e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009662:	3301      	adds	r3, #1
 8009664:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	ee07 3a90 	vmov	s15, r3
 800966c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009670:	edd7 6a07 	vldr	s13, [r7, #28]
 8009674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800967c:	ee17 3a90 	vmov	r3, s15
 8009680:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009682:	e005      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	61bb      	str	r3, [r7, #24]
    break;
 8009688:	e002      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800968c:	61bb      	str	r3, [r7, #24]
    break;
 800968e:	bf00      	nop
  }

  return sysclockfreq;
 8009690:	69bb      	ldr	r3, [r7, #24]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3724      	adds	r7, #36	; 0x24
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	58024400 	.word	0x58024400
 80096a4:	03d09000 	.word	0x03d09000
 80096a8:	003d0900 	.word	0x003d0900
 80096ac:	017d7840 	.word	0x017d7840
 80096b0:	46000000 	.word	0x46000000
 80096b4:	4c742400 	.word	0x4c742400
 80096b8:	4a742400 	.word	0x4a742400
 80096bc:	4bbebc20 	.word	0x4bbebc20

080096c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80096c6:	f7ff fe81 	bl	80093cc <HAL_RCC_GetSysClockFreq>
 80096ca:	4602      	mov	r2, r0
 80096cc:	4b10      	ldr	r3, [pc, #64]	; (8009710 <HAL_RCC_GetHCLKFreq+0x50>)
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	490f      	ldr	r1, [pc, #60]	; (8009714 <HAL_RCC_GetHCLKFreq+0x54>)
 80096d8:	5ccb      	ldrb	r3, [r1, r3]
 80096da:	f003 031f 	and.w	r3, r3, #31
 80096de:	fa22 f303 	lsr.w	r3, r2, r3
 80096e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096e4:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <HAL_RCC_GetHCLKFreq+0x50>)
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <HAL_RCC_GetHCLKFreq+0x54>)
 80096ee:	5cd3      	ldrb	r3, [r2, r3]
 80096f0:	f003 031f 	and.w	r3, r3, #31
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	fa22 f303 	lsr.w	r3, r2, r3
 80096fa:	4a07      	ldr	r2, [pc, #28]	; (8009718 <HAL_RCC_GetHCLKFreq+0x58>)
 80096fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096fe:	4a07      	ldr	r2, [pc, #28]	; (800971c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009704:	4b04      	ldr	r3, [pc, #16]	; (8009718 <HAL_RCC_GetHCLKFreq+0x58>)
 8009706:	681b      	ldr	r3, [r3, #0]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	58024400 	.word	0x58024400
 8009714:	0800fb94 	.word	0x0800fb94
 8009718:	24000488 	.word	0x24000488
 800971c:	24000484 	.word	0x24000484

08009720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009724:	f7ff ffcc 	bl	80096c0 <HAL_RCC_GetHCLKFreq>
 8009728:	4602      	mov	r2, r0
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	f003 0307 	and.w	r3, r3, #7
 8009734:	4904      	ldr	r1, [pc, #16]	; (8009748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009736:	5ccb      	ldrb	r3, [r1, r3]
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009740:	4618      	mov	r0, r3
 8009742:	bd80      	pop	{r7, pc}
 8009744:	58024400 	.word	0x58024400
 8009748:	0800fb94 	.word	0x0800fb94

0800974c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009754:	2300      	movs	r3, #0
 8009756:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009758:	2300      	movs	r3, #0
 800975a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d03f      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009770:	d02a      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009776:	d824      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800977c:	d018      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800977e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009782:	d81e      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800978c:	d007      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800978e:	e018      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009790:	4bab      	ldr	r3, [pc, #684]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4aaa      	ldr	r2, [pc, #680]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800979a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800979c:	e015      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3304      	adds	r3, #4
 80097a2:	2102      	movs	r1, #2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f002 f84d 	bl	800b844 <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80097ae:	e00c      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	2102      	movs	r1, #2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f002 f8f6 	bl	800b9a8 <RCCEx_PLL3_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e000      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80097c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d109      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80097d0:	4b9b      	ldr	r3, [pc, #620]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097dc:	4998      	ldr	r1, [pc, #608]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	650b      	str	r3, [r1, #80]	; 0x50
 80097e2:	e001      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d03d      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d826      	bhi.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009819 	.word	0x08009819
 8009808:	08009827 	.word	0x08009827
 800980c:	08009839 	.word	0x08009839
 8009810:	08009851 	.word	0x08009851
 8009814:	08009851 	.word	0x08009851
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009818:	4b89      	ldr	r3, [pc, #548]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	4a88      	ldr	r2, [pc, #544]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800981e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009824:	e015      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3304      	adds	r3, #4
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f002 f809 	bl	800b844 <RCCEx_PLL2_Config>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009836:	e00c      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3324      	adds	r3, #36	; 0x24
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f002 f8b2 	bl	800b9a8 <RCCEx_PLL3_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009848:	e003      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
      break;
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d109      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009858:	4b79      	ldr	r3, [pc, #484]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800985a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985c:	f023 0207 	bic.w	r2, r3, #7
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009864:	4976      	ldr	r1, [pc, #472]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009866:	4313      	orrs	r3, r2
 8009868:	650b      	str	r3, [r1, #80]	; 0x50
 800986a:	e001      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009878:	2b00      	cmp	r3, #0
 800987a:	d051      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009882:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009886:	d036      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009888:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800988c:	d830      	bhi.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800988e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009892:	d032      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009898:	d82a      	bhi.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800989a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800989e:	d02e      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80098a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a4:	d824      	bhi.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80098a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098aa:	d018      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x192>
 80098ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b0:	d81e      	bhi.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x172>
 80098b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098ba:	d007      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80098bc:	e018      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098be:	4b60      	ldr	r3, [pc, #384]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	4a5f      	ldr	r2, [pc, #380]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098ca:	e019      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3304      	adds	r3, #4
 80098d0:	2100      	movs	r1, #0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 ffb6 	bl	800b844 <RCCEx_PLL2_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098dc:	e010      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3324      	adds	r3, #36	; 0x24
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f002 f85f 	bl	800b9a8 <RCCEx_PLL3_Config>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098ee:	e007      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]
      break;
 80098f4:	e004      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80098f6:	bf00      	nop
 80098f8:	e002      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80098fa:	bf00      	nop
 80098fc:	e000      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80098fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009906:	4b4e      	ldr	r3, [pc, #312]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009914:	494a      	ldr	r1, [pc, #296]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009916:	4313      	orrs	r3, r2
 8009918:	658b      	str	r3, [r1, #88]	; 0x58
 800991a:	e001      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009928:	2b00      	cmp	r3, #0
 800992a:	d051      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009932:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009936:	d036      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009938:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800993c:	d830      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800993e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009942:	d032      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009948:	d82a      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800994a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800994e:	d02e      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009954:	d824      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800995a:	d018      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800995c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009960:	d81e      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800996a:	d007      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800996c:	e018      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800996e:	4b34      	ldr	r3, [pc, #208]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	4a33      	ldr	r2, [pc, #204]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800997a:	e019      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3304      	adds	r3, #4
 8009980:	2100      	movs	r1, #0
 8009982:	4618      	mov	r0, r3
 8009984:	f001 ff5e 	bl	800b844 <RCCEx_PLL2_Config>
 8009988:	4603      	mov	r3, r0
 800998a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800998c:	e010      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3324      	adds	r3, #36	; 0x24
 8009992:	2100      	movs	r1, #0
 8009994:	4618      	mov	r0, r3
 8009996:	f002 f807 	bl	800b9a8 <RCCEx_PLL3_Config>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800999e:	e007      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	75fb      	strb	r3, [r7, #23]
      break;
 80099a4:	e004      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80099a6:	bf00      	nop
 80099a8:	e002      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80099aa:	bf00      	nop
 80099ac:	e000      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80099ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10a      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099b6:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099c4:	491e      	ldr	r1, [pc, #120]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	658b      	str	r3, [r1, #88]	; 0x58
 80099ca:	e001      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d035      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099e0:	2b30      	cmp	r3, #48	; 0x30
 80099e2:	d01c      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80099e4:	2b30      	cmp	r3, #48	; 0x30
 80099e6:	d817      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d00c      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	d813      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d016      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d10f      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f8:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	4a10      	ldr	r2, [pc, #64]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009a04:	e00e      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	2102      	movs	r1, #2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 ff19 	bl	800b844 <RCCEx_PLL2_Config>
 8009a12:	4603      	mov	r3, r0
 8009a14:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009a16:	e005      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1c:	e002      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009a1e:	bf00      	nop
 8009a20:	e000      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10c      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a36:	4902      	ldr	r1, [pc, #8]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a3c:	e004      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009a3e:	bf00      	nop
 8009a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d047      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a5c:	d030      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a62:	d82a      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009a64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a68:	d02c      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009a6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a6e:	d824      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a74:	d018      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a7a:	d81e      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a84:	d007      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a86:	e018      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a88:	4bac      	ldr	r3, [pc, #688]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4aab      	ldr	r2, [pc, #684]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a94:	e017      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 fed1 	bl	800b844 <RCCEx_PLL2_Config>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009aa6:	e00e      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3324      	adds	r3, #36	; 0x24
 8009aac:	2100      	movs	r1, #0
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 ff7a 	bl	800b9a8 <RCCEx_PLL3_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ab8:	e005      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
      break;
 8009abe:	e002      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ac0:	bf00      	nop
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d109      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009acc:	4b9b      	ldr	r3, [pc, #620]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad8:	4998      	ldr	r1, [pc, #608]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	650b      	str	r3, [r1, #80]	; 0x50
 8009ade:	e001      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d049      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009af8:	d02e      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009afe:	d828      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009b00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b04:	d02a      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b0a:	d822      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b10:	d026      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b16:	d81c      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b1c:	d010      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b22:	d816      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01d      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b2c:	d111      	bne.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3304      	adds	r3, #4
 8009b32:	2101      	movs	r1, #1
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 fe85 	bl	800b844 <RCCEx_PLL2_Config>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b3e:	e012      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3324      	adds	r3, #36	; 0x24
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 ff2e 	bl	800b9a8 <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b50:	e009      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
      break;
 8009b56:	e006      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e004      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e002      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009b60:	bf00      	nop
 8009b62:	e000      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d109      	bne.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b6c:	4b73      	ldr	r3, [pc, #460]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b78:	4970      	ldr	r1, [pc, #448]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009b7e:	e001      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d04b      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b9a:	d02e      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba0:	d828      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba6:	d02a      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bac:	d822      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bb2:	d026      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bb8:	d81c      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bbe:	d010      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc4:	d816      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01d      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bce:	d111      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fe34 	bl	800b844 <RCCEx_PLL2_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009be0:	e012      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3324      	adds	r3, #36	; 0x24
 8009be6:	2101      	movs	r1, #1
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 fedd 	bl	800b9a8 <RCCEx_PLL3_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bf2:	e009      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf8:	e006      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009bfa:	bf00      	nop
 8009bfc:	e004      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009bfe:	bf00      	nop
 8009c00:	e002      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009c02:	bf00      	nop
 8009c04:	e000      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c0e:	4b4b      	ldr	r3, [pc, #300]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009c1c:	4947      	ldr	r1, [pc, #284]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	658b      	str	r3, [r1, #88]	; 0x58
 8009c22:	e001      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d02f      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c3c:	d00e      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c42:	d814      	bhi.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d015      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c4c:	d10f      	bne.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c4e:	4b3b      	ldr	r3, [pc, #236]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c52:	4a3a      	ldr	r2, [pc, #232]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c5a:	e00c      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	2101      	movs	r1, #1
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 fdee 	bl	800b844 <RCCEx_PLL2_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c6c:	e003      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	75fb      	strb	r3, [r7, #23]
      break;
 8009c72:	e000      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d109      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c7c:	4b2f      	ldr	r3, [pc, #188]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c88:	492c      	ldr	r1, [pc, #176]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c8e:	e001      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
 8009c92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d032      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d81b      	bhi.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009ca8:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009ce7 	.word	0x08009ce7
 8009cb4:	08009cc1 	.word	0x08009cc1
 8009cb8:	08009ccf 	.word	0x08009ccf
 8009cbc:	08009ce7 	.word	0x08009ce7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc0:	4b1e      	ldr	r3, [pc, #120]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	4a1d      	ldr	r2, [pc, #116]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ccc:	e00c      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 fdb5 	bl	800b844 <RCCEx_PLL2_Config>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009cde:	e003      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce4:	e000      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d109      	bne.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cee:	4b13      	ldr	r3, [pc, #76]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf2:	f023 0203 	bic.w	r2, r3, #3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfa:	4910      	ldr	r1, [pc, #64]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d00:	e001      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 808a 	beq.w	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d20:	f7f9 fd1e 	bl	8003760 <HAL_GetTick>
 8009d24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d26:	e00d      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d28:	f7f9 fd1a 	bl	8003760 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b64      	cmp	r3, #100	; 0x64
 8009d34:	d906      	bls.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	75fb      	strb	r3, [r7, #23]
        break;
 8009d3a:	e009      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d44:	4bb9      	ldr	r3, [pc, #740]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0eb      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d166      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d56:	4bb6      	ldr	r3, [pc, #728]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d60:	4053      	eors	r3, r2
 8009d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d013      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d6a:	4bb1      	ldr	r3, [pc, #708]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d74:	4bae      	ldr	r3, [pc, #696]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	4aad      	ldr	r2, [pc, #692]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d80:	4bab      	ldr	r3, [pc, #684]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d84:	4aaa      	ldr	r2, [pc, #680]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d8c:	4aa8      	ldr	r2, [pc, #672]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d9c:	d115      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d9e:	f7f9 fcdf 	bl	8003760 <HAL_GetTick>
 8009da2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009da4:	e00b      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009da6:	f7f9 fcdb 	bl	8003760 <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d902      	bls.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	75fb      	strb	r3, [r7, #23]
            break;
 8009dbc:	e005      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dbe:	4b9c      	ldr	r3, [pc, #624]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0ed      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d126      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dde:	d10d      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009de0:	4b93      	ldr	r3, [pc, #588]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009dee:	0919      	lsrs	r1, r3, #4
 8009df0:	4b90      	ldr	r3, [pc, #576]	; (800a034 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8009df2:	400b      	ands	r3, r1
 8009df4:	498e      	ldr	r1, [pc, #568]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	610b      	str	r3, [r1, #16]
 8009dfa:	e005      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009dfc:	4b8c      	ldr	r3, [pc, #560]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	4a8b      	ldr	r2, [pc, #556]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e06:	6113      	str	r3, [r2, #16]
 8009e08:	4b89      	ldr	r3, [pc, #548]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e16:	4986      	ldr	r1, [pc, #536]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	670b      	str	r3, [r1, #112]	; 0x70
 8009e1c:	e004      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
 8009e20:	75bb      	strb	r3, [r7, #22]
 8009e22:	e001      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d07e      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e38:	2b28      	cmp	r3, #40	; 0x28
 8009e3a:	d867      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009f13 	.word	0x08009f13
 8009e48:	08009f0d 	.word	0x08009f0d
 8009e4c:	08009f0d 	.word	0x08009f0d
 8009e50:	08009f0d 	.word	0x08009f0d
 8009e54:	08009f0d 	.word	0x08009f0d
 8009e58:	08009f0d 	.word	0x08009f0d
 8009e5c:	08009f0d 	.word	0x08009f0d
 8009e60:	08009f0d 	.word	0x08009f0d
 8009e64:	08009ee9 	.word	0x08009ee9
 8009e68:	08009f0d 	.word	0x08009f0d
 8009e6c:	08009f0d 	.word	0x08009f0d
 8009e70:	08009f0d 	.word	0x08009f0d
 8009e74:	08009f0d 	.word	0x08009f0d
 8009e78:	08009f0d 	.word	0x08009f0d
 8009e7c:	08009f0d 	.word	0x08009f0d
 8009e80:	08009f0d 	.word	0x08009f0d
 8009e84:	08009efb 	.word	0x08009efb
 8009e88:	08009f0d 	.word	0x08009f0d
 8009e8c:	08009f0d 	.word	0x08009f0d
 8009e90:	08009f0d 	.word	0x08009f0d
 8009e94:	08009f0d 	.word	0x08009f0d
 8009e98:	08009f0d 	.word	0x08009f0d
 8009e9c:	08009f0d 	.word	0x08009f0d
 8009ea0:	08009f0d 	.word	0x08009f0d
 8009ea4:	08009f13 	.word	0x08009f13
 8009ea8:	08009f0d 	.word	0x08009f0d
 8009eac:	08009f0d 	.word	0x08009f0d
 8009eb0:	08009f0d 	.word	0x08009f0d
 8009eb4:	08009f0d 	.word	0x08009f0d
 8009eb8:	08009f0d 	.word	0x08009f0d
 8009ebc:	08009f0d 	.word	0x08009f0d
 8009ec0:	08009f0d 	.word	0x08009f0d
 8009ec4:	08009f13 	.word	0x08009f13
 8009ec8:	08009f0d 	.word	0x08009f0d
 8009ecc:	08009f0d 	.word	0x08009f0d
 8009ed0:	08009f0d 	.word	0x08009f0d
 8009ed4:	08009f0d 	.word	0x08009f0d
 8009ed8:	08009f0d 	.word	0x08009f0d
 8009edc:	08009f0d 	.word	0x08009f0d
 8009ee0:	08009f0d 	.word	0x08009f0d
 8009ee4:	08009f13 	.word	0x08009f13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3304      	adds	r3, #4
 8009eec:	2101      	movs	r1, #1
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f001 fca8 	bl	800b844 <RCCEx_PLL2_Config>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ef8:	e00c      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3324      	adds	r3, #36	; 0x24
 8009efe:	2101      	movs	r1, #1
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 fd51 	bl	800b9a8 <RCCEx_PLL3_Config>
 8009f06:	4603      	mov	r3, r0
 8009f08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009f0a:	e003      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f10:	e000      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8009f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f1a:	4b45      	ldr	r3, [pc, #276]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f26:	4942      	ldr	r1, [pc, #264]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f2c:	e001      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d037      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d820      	bhi.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8009f46:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f8f 	.word	0x08009f8f
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f77 	.word	0x08009f77
 8009f58:	08009f8f 	.word	0x08009f8f
 8009f5c:	08009f8f 	.word	0x08009f8f
 8009f60:	08009f8f 	.word	0x08009f8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3304      	adds	r3, #4
 8009f68:	2101      	movs	r1, #1
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 fc6a 	bl	800b844 <RCCEx_PLL2_Config>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f74:	e00c      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3324      	adds	r3, #36	; 0x24
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f001 fd13 	bl	800b9a8 <RCCEx_PLL3_Config>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f86:	e003      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8c:	e000      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8009f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f96:	4b26      	ldr	r3, [pc, #152]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9a:	f023 0207 	bic.w	r2, r3, #7
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa2:	4923      	ldr	r1, [pc, #140]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8009fa8:	e001      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0304 	and.w	r3, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d040      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc0:	2b05      	cmp	r3, #5
 8009fc2:	d821      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8009fc4:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	0800a00f 	.word	0x0800a00f
 8009fd0:	08009fe5 	.word	0x08009fe5
 8009fd4:	08009ff7 	.word	0x08009ff7
 8009fd8:	0800a00f 	.word	0x0800a00f
 8009fdc:	0800a00f 	.word	0x0800a00f
 8009fe0:	0800a00f 	.word	0x0800a00f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	2101      	movs	r1, #1
 8009fea:	4618      	mov	r0, r3
 8009fec:	f001 fc2a 	bl	800b844 <RCCEx_PLL2_Config>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ff4:	e00c      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3324      	adds	r3, #36	; 0x24
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 fcd3 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a006:	e003      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	75fb      	strb	r3, [r7, #23]
      break;
 800a00c:	e000      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800a00e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d110      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	f023 0207 	bic.w	r2, r3, #7
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a024:	4902      	ldr	r1, [pc, #8]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a026:	4313      	orrs	r3, r2
 800a028:	658b      	str	r3, [r1, #88]	; 0x58
 800a02a:	e007      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a02c:	58024800 	.word	0x58024800
 800a030:	58024400 	.word	0x58024400
 800a034:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b00      	cmp	r3, #0
 800a046:	d04b      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a052:	d02e      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a058:	d828      	bhi.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05e:	d02a      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a064:	d822      	bhi.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a06a:	d026      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a06c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a070:	d81c      	bhi.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a076:	d010      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800a078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a07c:	d816      	bhi.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01d      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a086:	d111      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3304      	adds	r3, #4
 800a08c:	2100      	movs	r1, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 fbd8 	bl	800b844 <RCCEx_PLL2_Config>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a098:	e012      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3324      	adds	r3, #36	; 0x24
 800a09e:	2102      	movs	r1, #2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 fc81 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a0aa:	e009      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b0:	e006      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a0b2:	bf00      	nop
 800a0b4:	e004      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a0b6:	bf00      	nop
 800a0b8:	e002      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a0ba:	bf00      	nop
 800a0bc:	e000      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a0be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0c6:	4bb2      	ldr	r3, [pc, #712]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d4:	49ae      	ldr	r1, [pc, #696]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	654b      	str	r3, [r1, #84]	; 0x54
 800a0da:	e001      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d04b      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0f6:	d02e      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a0f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0fc:	d828      	bhi.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a102:	d02a      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a108:	d822      	bhi.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a10a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a10e:	d026      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a114:	d81c      	bhi.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a11a:	d010      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800a11c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a120:	d816      	bhi.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d01d      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a12a:	d111      	bne.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3304      	adds	r3, #4
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f001 fb86 	bl	800b844 <RCCEx_PLL2_Config>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a13c:	e012      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3324      	adds	r3, #36	; 0x24
 800a142:	2102      	movs	r1, #2
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fc2f 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a14e:	e009      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	75fb      	strb	r3, [r7, #23]
      break;
 800a154:	e006      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a156:	bf00      	nop
 800a158:	e004      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a15a:	bf00      	nop
 800a15c:	e002      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a162:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a16a:	4b89      	ldr	r3, [pc, #548]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a178:	4985      	ldr	r1, [pc, #532]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	658b      	str	r3, [r1, #88]	; 0x58
 800a17e:	e001      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d04b      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a196:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a19a:	d02e      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a19c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1a0:	d828      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a1a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1a6:	d02a      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ac:	d822      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a1ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1b2:	d026      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a1b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1b8:	d81c      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a1ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1be:	d010      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800a1c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1c4:	d816      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01d      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800a1ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ce:	d111      	bne.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 fb34 	bl	800b844 <RCCEx_PLL2_Config>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1e0:	e012      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3324      	adds	r3, #36	; 0x24
 800a1e6:	2102      	movs	r1, #2
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 fbdd 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1f2:	e009      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f8:	e006      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a1fa:	bf00      	nop
 800a1fc:	e004      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a1fe:	bf00      	nop
 800a200:	e002      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a202:	bf00      	nop
 800a204:	e000      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a206:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a20e:	4b60      	ldr	r3, [pc, #384]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a21c:	495c      	ldr	r1, [pc, #368]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	658b      	str	r3, [r1, #88]	; 0x58
 800a222:	e001      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0308 	and.w	r3, r3, #8
 800a230:	2b00      	cmp	r3, #0
 800a232:	d018      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a23c:	d10a      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3324      	adds	r3, #36	; 0x24
 800a242:	2102      	movs	r1, #2
 800a244:	4618      	mov	r0, r3
 800a246:	f001 fbaf 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a254:	4b4e      	ldr	r3, [pc, #312]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a260:	494b      	ldr	r1, [pc, #300]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a262:	4313      	orrs	r3, r2
 800a264:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0310 	and.w	r3, r3, #16
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d01a      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27c:	d10a      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3324      	adds	r3, #36	; 0x24
 800a282:	2102      	movs	r1, #2
 800a284:	4618      	mov	r0, r3
 800a286:	f001 fb8f 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a294:	4b3e      	ldr	r3, [pc, #248]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a2:	493b      	ldr	r1, [pc, #236]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d034      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2be:	d01d      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2c4:	d817      	bhi.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a2ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ce:	d009      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a2d0:	e011      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fab3 	bl	800b844 <RCCEx_PLL2_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2e2:	e00c      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3324      	adds	r3, #36	; 0x24
 800a2e8:	2102      	movs	r1, #2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 fb5c 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2f4:	e003      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a2fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10a      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a304:	4b22      	ldr	r3, [pc, #136]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a312:	491f      	ldr	r1, [pc, #124]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a314:	4313      	orrs	r3, r2
 800a316:	658b      	str	r3, [r1, #88]	; 0x58
 800a318:	e001      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d036      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a334:	d01c      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a33a:	d816      	bhi.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a33c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a340:	d003      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a346:	d007      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a348:	e00f      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	4a10      	ldr	r2, [pc, #64]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a356:	e00c      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3324      	adds	r3, #36	; 0x24
 800a35c:	2101      	movs	r1, #1
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 fb22 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a368:	e003      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	75fb      	strb	r3, [r7, #23]
      break;
 800a36e:	e000      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a370:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10d      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a378:	4b05      	ldr	r3, [pc, #20]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a37c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a386:	4902      	ldr	r1, [pc, #8]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	654b      	str	r3, [r1, #84]	; 0x54
 800a38c:	e004      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d029      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a3ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b0:	d007      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a3b2:	e00f      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b4:	4b61      	ldr	r3, [pc, #388]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	4a60      	ldr	r2, [pc, #384]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3c0:	e00b      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	2102      	movs	r1, #2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fa3b 	bl	800b844 <RCCEx_PLL2_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3d2:	e002      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d109      	bne.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3e0:	4b56      	ldr	r3, [pc, #344]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ec:	4953      	ldr	r1, [pc, #332]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3f2:	e001      	b.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	2102      	movs	r1, #2
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 facc 	bl	800b9a8 <RCCEx_PLL3_Config>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d030      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a42a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a42e:	d017      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a434:	d811      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a43a:	d013      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a440:	d80b      	bhi.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d010      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800a446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a44a:	d106      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a44c:	4b3b      	ldr	r3, [pc, #236]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	4a3a      	ldr	r2, [pc, #232]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a458:	e007      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	75fb      	strb	r3, [r7, #23]
      break;
 800a45e:	e004      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a460:	bf00      	nop
 800a462:	e002      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a464:	bf00      	nop
 800a466:	e000      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a470:	4b32      	ldr	r3, [pc, #200]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a47c:	492f      	ldr	r1, [pc, #188]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	654b      	str	r3, [r1, #84]	; 0x54
 800a482:	e001      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d008      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a494:	4b29      	ldr	r3, [pc, #164]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a0:	4926      	ldr	r1, [pc, #152]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d008      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4b2:	4b22      	ldr	r3, [pc, #136]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4be:	491f      	ldr	r1, [pc, #124]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00d      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	4a19      	ldr	r2, [pc, #100]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4da:	6113      	str	r3, [r2, #16]
 800a4dc:	4b17      	ldr	r3, [pc, #92]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4de:	691a      	ldr	r2, [r3, #16]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4e6:	4915      	ldr	r1, [pc, #84]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	da08      	bge.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4f4:	4b11      	ldr	r3, [pc, #68]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a500:	490e      	ldr	r1, [pc, #56]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a502:	4313      	orrs	r3, r2
 800a504:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d009      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a512:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a520:	4906      	ldr	r1, [pc, #24]	; (800a53c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a522:	4313      	orrs	r3, r2
 800a524:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a526:	7dbb      	ldrb	r3, [r7, #22]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	e000      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	58024400 	.word	0x58024400

0800a540 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4aa2      	ldr	r2, [pc, #648]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 800a54c:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f043 0208 	orr.w	r2, r3, #8
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800a58a:	4b93      	ldr	r3, [pc, #588]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	0d1b      	lsrs	r3, r3, #20
 800a590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 800a598:	4b8f      	ldr	r3, [pc, #572]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 800a5a6:	4b8c      	ldr	r3, [pc, #560]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	0e1b      	lsrs	r3, r3, #24
 800a5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 800a5b6:	4b88      	ldr	r3, [pc, #544]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	0a5b      	lsrs	r3, r3, #9
 800a5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 800a5c6:	4b84      	ldr	r3, [pc, #528]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	0c1b      	lsrs	r3, r3, #16
 800a5cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800a5d6:	4b80      	ldr	r3, [pc, #512]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5da:	0a9b      	lsrs	r3, r3, #10
 800a5dc:	f003 0203 	and.w	r2, r3, #3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800a5e4:	4b7c      	ldr	r3, [pc, #496]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e8:	0a5b      	lsrs	r3, r3, #9
 800a5ea:	f003 0201 	and.w	r2, r3, #1
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 800a5f2:	4b79      	ldr	r3, [pc, #484]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f6:	0b1b      	lsrs	r3, r3, #12
 800a5f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 800a600:	4b75      	ldr	r3, [pc, #468]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 800a60e:	4b72      	ldr	r3, [pc, #456]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a612:	0e1b      	lsrs	r3, r3, #24
 800a614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 800a61e:	4b6e      	ldr	r3, [pc, #440]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	0a5b      	lsrs	r3, r3, #9
 800a624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 800a62e:	4b6a      	ldr	r3, [pc, #424]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	0c1b      	lsrs	r3, r3, #16
 800a634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800a63e:	4b66      	ldr	r3, [pc, #408]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a642:	099b      	lsrs	r3, r3, #6
 800a644:	f003 0203 	and.w	r2, r3, #3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800a64c:	4b62      	ldr	r3, [pc, #392]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	095b      	lsrs	r3, r3, #5
 800a652:	f003 0201 	and.w	r2, r3, #1
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800a65a:	4b5f      	ldr	r3, [pc, #380]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800a666:	4b5c      	ldr	r3, [pc, #368]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f003 0207 	and.w	r2, r3, #7
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 800a672:	4b59      	ldr	r3, [pc, #356]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	f003 0207 	and.w	r2, r3, #7
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 800a680:	4b55      	ldr	r3, [pc, #340]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a684:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a68c:	4b52      	ldr	r3, [pc, #328]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a690:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a69a:	4b4f      	ldr	r3, [pc, #316]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800a6a8:	4b4b      	ldr	r3, [pc, #300]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800a6b6:	4b48      	ldr	r3, [pc, #288]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ba:	f003 0207 	and.w	r2, r3, #7
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800a6c2:	4b45      	ldr	r3, [pc, #276]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c6:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 800a6d0:	4b41      	ldr	r3, [pc, #260]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 800a6de:	4b3e      	ldr	r3, [pc, #248]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 800a6ec:	4b3a      	ldr	r3, [pc, #232]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f0:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800a6fa:	4b37      	ldr	r3, [pc, #220]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800a706:	4b34      	ldr	r3, [pc, #208]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800a712:	4b31      	ldr	r3, [pc, #196]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a720:	4b2d      	ldr	r3, [pc, #180]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a724:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a72c:	4b2a      	ldr	r3, [pc, #168]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a730:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800a738:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 800a744:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a748:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 800a750:	4b21      	ldr	r3, [pc, #132]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800a75c:	4b1e      	ldr	r3, [pc, #120]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a760:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800a76a:	4b1b      	ldr	r3, [pc, #108]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76e:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800a776:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 800a784:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a788:	f003 0203 	and.w	r2, r3, #3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 800a790:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a794:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 800a79c:	4b0e      	ldr	r3, [pc, #56]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a0:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800a7a8:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800a7bc:	e004      	b.n	800a7c8 <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a7c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	c9fff1f7 	.word	0xc9fff1f7
 800a7d8:	58024400 	.word	0x58024400

0800a7dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b090      	sub	sp, #64	; 0x40
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ea:	f040 8089 	bne.w	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a7ee:	4b95      	ldr	r3, [pc, #596]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d87d      	bhi.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800a7fe:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a819 	.word	0x0800a819
 800a808:	0800a83d 	.word	0x0800a83d
 800a80c:	0800a861 	.word	0x0800a861
 800a810:	0800a8f5 	.word	0x0800a8f5
 800a814:	0800a885 	.word	0x0800a885

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a818:	4b8a      	ldr	r3, [pc, #552]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a824:	d107      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 feb8 	bl	800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a834:	e3ed      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a83a:	e3ea      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a83c:	4b81      	ldr	r3, [pc, #516]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a848:	d107      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84a:	f107 0318 	add.w	r3, r7, #24
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fbfe 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a858:	e3db      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a85e:	e3d8      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a860:	4b78      	ldr	r3, [pc, #480]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a86c:	d107      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86e:	f107 030c 	add.w	r3, r7, #12
 800a872:	4618      	mov	r0, r3
 800a874:	f000 fd40 	bl	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a87c:	e3c9      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a882:	e3c6      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a884:	4b6f      	ldr	r3, [pc, #444]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a88e:	4b6d      	ldr	r3, [pc, #436]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b04      	cmp	r3, #4
 800a898:	d10c      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d109      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8a0:	4b68      	ldr	r3, [pc, #416]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	08db      	lsrs	r3, r3, #3
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	4a67      	ldr	r2, [pc, #412]	; (800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b2:	e01e      	b.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8b4:	4b63      	ldr	r3, [pc, #396]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8c0:	d106      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8c8:	d102      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8ca:	4b60      	ldr	r3, [pc, #384]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ce:	e010      	b.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8d0:	4b5c      	ldr	r3, [pc, #368]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8dc:	d106      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e4:	d102      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8e6:	4b5a      	ldr	r3, [pc, #360]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ea:	e002      	b.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8f0:	e38f      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a8f2:	e38e      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8f4:	4b57      	ldr	r3, [pc, #348]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f8:	e38b      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8fe:	e388      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a906:	f040 80a7 	bne.w	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a90a:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a912:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a91a:	d054      	beq.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a922:	f200 808b 	bhi.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a92c:	f000 8083 	beq.w	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a936:	f200 8081 	bhi.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a940:	d02f      	beq.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a948:	d878      	bhi.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a956:	d012      	beq.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800a958:	e070      	b.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a95a:	4b3a      	ldr	r3, [pc, #232]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a966:	d107      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 fe17 	bl	800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a976:	e34c      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a97c:	e349      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a97e:	4b31      	ldr	r3, [pc, #196]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a98a:	d107      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98c:	f107 0318 	add.w	r3, r7, #24
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fb5d 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a99a:	e33a      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a0:	e337      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9a2:	4b28      	ldr	r3, [pc, #160]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b0:	f107 030c 	add.w	r3, r7, #12
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fc9f 	bl	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9be:	e328      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c4:	e325      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9c6:	4b1f      	ldr	r3, [pc, #124]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9d0:	4b1c      	ldr	r3, [pc, #112]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d10c      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d109      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9e2:	4b18      	ldr	r3, [pc, #96]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	08db      	lsrs	r3, r3, #3
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f4:	e01e      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9f6:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa02:	d106      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa0a:	d102      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa10:	e010      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa12:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa1e:	d106      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa26:	d102      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2c:	e002      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa32:	e2ee      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800aa34:	e2ed      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa3a:	e2ea      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa40:	e2e7      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800aa42:	bf00      	nop
 800aa44:	58024400 	.word	0x58024400
 800aa48:	03d09000 	.word	0x03d09000
 800aa4c:	003d0900 	.word	0x003d0900
 800aa50:	017d7840 	.word	0x017d7840
 800aa54:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa5e:	f040 809c 	bne.w	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800aa62:	4b9e      	ldr	r3, [pc, #632]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800aa64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aa6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa72:	d054      	beq.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa7a:	f200 808b 	bhi.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa84:	f000 8083 	beq.w	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa8e:	f200 8081 	bhi.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa98:	d02f      	beq.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa0:	d878      	bhi.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaae:	d012      	beq.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aab0:	e070      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab2:	4b8a      	ldr	r3, [pc, #552]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aabe:	d107      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fd6b 	bl	800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aace:	e2a0      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad4:	e29d      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aad6:	4b81      	ldr	r3, [pc, #516]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae2:	d107      	bne.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aae4:	f107 0318 	add.w	r3, r7, #24
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fab1 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800aaf2:	e28e      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf8:	e28b      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aafa:	4b78      	ldr	r3, [pc, #480]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab06:	d107      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab08:	f107 030c 	add.w	r3, r7, #12
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fbf3 	bl	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab16:	e27c      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1c:	e279      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab1e:	4b6f      	ldr	r3, [pc, #444]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ab20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab28:	4b6c      	ldr	r3, [pc, #432]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d10c      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ab34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d109      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab3a:	4b68      	ldr	r3, [pc, #416]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	4a66      	ldr	r2, [pc, #408]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab46:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab4c:	e01e      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab4e:	4b63      	ldr	r3, [pc, #396]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5a:	d106      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab62:	d102      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab64:	4b5f      	ldr	r3, [pc, #380]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab68:	e010      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab6a:	4b5c      	ldr	r3, [pc, #368]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab76:	d106      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab7e:	d102      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab80:	4b59      	ldr	r3, [pc, #356]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab84:	e002      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab8a:	e242      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ab8c:	e241      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab8e:	4b57      	ldr	r3, [pc, #348]	; (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab92:	e23e      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab98:	e23b      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aba0:	f040 80a6 	bne.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aba4:	4b4d      	ldr	r3, [pc, #308]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800aba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800abac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abb4:	d054      	beq.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abbc:	f200 808b 	bhi.w	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abc6:	f000 8083 	beq.w	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abd0:	f200 8081 	bhi.w	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abda:	d02f      	beq.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe2:	d878      	bhi.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d004      	beq.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800abea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf0:	d012      	beq.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800abf2:	e070      	b.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abf4:	4b39      	ldr	r3, [pc, #228]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac00:	d107      	bne.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 fcca 	bl	800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac10:	e1ff      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac16:	e1fc      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac18:	4b30      	ldr	r3, [pc, #192]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac24:	d107      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac26:	f107 0318 	add.w	r3, r7, #24
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fa10 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac34:	e1ed      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac3a:	e1ea      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac3c:	4b27      	ldr	r3, [pc, #156]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac48:	d107      	bne.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac4a:	f107 030c 	add.w	r3, r7, #12
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fb52 	bl	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac58:	e1db      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac5e:	e1d8      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac60:	4b1e      	ldr	r3, [pc, #120]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac6a:	4b1c      	ldr	r3, [pc, #112]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0304 	and.w	r3, r3, #4
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	d10c      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d109      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac7c:	4b17      	ldr	r3, [pc, #92]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	08db      	lsrs	r3, r3, #3
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	4a16      	ldr	r2, [pc, #88]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac88:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac8e:	e01e      	b.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac90:	4b12      	ldr	r3, [pc, #72]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac9c:	d106      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aca4:	d102      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acaa:	e010      	b.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acb8:	d106      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acc0:	d102      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc6:	e002      	b.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800accc:	e1a1      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800acce:	e1a0      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800acd0:	4b06      	ldr	r3, [pc, #24]	; (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd4:	e19d      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acda:	e19a      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800acdc:	58024400 	.word	0x58024400
 800ace0:	03d09000 	.word	0x03d09000
 800ace4:	003d0900 	.word	0x003d0900
 800ace8:	017d7840 	.word	0x017d7840
 800acec:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800acf6:	d173      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800acf8:	4b9a      	ldr	r3, [pc, #616]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800acfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad08:	d02f      	beq.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad10:	d863      	bhi.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800ad12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad1e:	d012      	beq.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800ad20:	e05b      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad22:	4b90      	ldr	r3, [pc, #576]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad2e:	d107      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad30:	f107 0318 	add.w	r3, r7, #24
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f98b 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad3e:	e168      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad44:	e165      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad46:	4b87      	ldr	r3, [pc, #540]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad52:	d107      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad54:	f107 030c 	add.w	r3, r7, #12
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 facd 	bl	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad62:	e156      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad68:	e153      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ad6a:	4b7e      	ldr	r3, [pc, #504]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ad6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad74:	4b7b      	ldr	r3, [pc, #492]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d10c      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad86:	4b77      	ldr	r3, [pc, #476]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	08db      	lsrs	r3, r3, #3
 800ad8c:	f003 0303 	and.w	r3, r3, #3
 800ad90:	4a75      	ldr	r2, [pc, #468]	; (800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ad92:	fa22 f303 	lsr.w	r3, r2, r3
 800ad96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad98:	e01e      	b.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad9a:	4b72      	ldr	r3, [pc, #456]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada6:	d106      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800ada8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adae:	d102      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800adb0:	4b6e      	ldr	r3, [pc, #440]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb4:	e010      	b.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adb6:	4b6b      	ldr	r3, [pc, #428]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adc2:	d106      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adca:	d102      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800adcc:	4b68      	ldr	r3, [pc, #416]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800adce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800add0:	e002      	b.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800add6:	e11c      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800add8:	e11b      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adde:	e118      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ade6:	d133      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ade8:	4b5e      	ldr	r3, [pc, #376]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800adea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d004      	beq.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adfe:	d012      	beq.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800ae00:	e023      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae02:	4b58      	ldr	r3, [pc, #352]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae0e:	d107      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fbc3 	bl	800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae1e:	e0f8      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae24:	e0f5      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae26:	4b4f      	ldr	r3, [pc, #316]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae32:	d107      	bne.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae34:	f107 0318 	add.w	r3, r7, #24
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f909 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae42:	e0e6      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae48:	e0e3      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae4e:	e0e0      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae56:	f040 808d 	bne.w	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ae5a:	4b42      	ldr	r3, [pc, #264]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ae62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae6a:	d06b      	beq.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae72:	d874      	bhi.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae7a:	d056      	beq.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae82:	d86c      	bhi.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae8a:	d03b      	beq.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae92:	d864      	bhi.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae9a:	d021      	beq.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea2:	d85c      	bhi.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d004      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeb0:	d004      	beq.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800aeb2:	e054      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aeb4:	f000 f8b6 	bl	800b024 <HAL_RCCEx_GetD3PCLK1Freq>
 800aeb8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aeba:	e0aa      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aebc:	4b29      	ldr	r3, [pc, #164]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aec8:	d107      	bne.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeca:	f107 0318 	add.w	r3, r7, #24
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f8be 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aed8:	e09b      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aede:	e098      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aee0:	4b20      	ldr	r3, [pc, #128]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeec:	d107      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeee:	f107 030c 	add.w	r3, r7, #12
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 fa00 	bl	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aefc:	e089      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af02:	e086      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af04:	4b17      	ldr	r3, [pc, #92]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d109      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af10:	4b14      	ldr	r3, [pc, #80]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	08db      	lsrs	r3, r3, #3
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	4a13      	ldr	r2, [pc, #76]	; (800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800af1c:	fa22 f303 	lsr.w	r3, r2, r3
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af22:	e076      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af28:	e073      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af2a:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af36:	d102      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800af38:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800af3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af3c:	e069      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800af3e:	2300      	movs	r3, #0
 800af40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af42:	e066      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af50:	d102      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800af52:	4b07      	ldr	r3, [pc, #28]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800af54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af56:	e05c      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af5c:	e059      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af62:	e056      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800af64:	58024400 	.word	0x58024400
 800af68:	03d09000 	.word	0x03d09000
 800af6c:	003d0900 	.word	0x003d0900
 800af70:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af7a:	d148      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800af7c:	4b27      	ldr	r3, [pc, #156]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af8c:	d02a      	beq.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af94:	d838      	bhi.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afa2:	d00d      	beq.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800afa4:	e030      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afa6:	4b1d      	ldr	r3, [pc, #116]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb2:	d102      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800afb4:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800afb8:	e02b      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afbe:	e028      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afc0:	4b16      	ldr	r3, [pc, #88]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afcc:	d107      	bne.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 fae4 	bl	800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800afdc:	e019      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afe2:	e016      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afe4:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aff0:	d107      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff2:	f107 0318 	add.w	r3, r7, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 f82a 	bl	800b050 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b000:	e007      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b006:	e004      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b00c:	e001      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b014:	4618      	mov	r0, r3
 800b016:	3740      	adds	r7, #64	; 0x40
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	58024400 	.word	0x58024400
 800b020:	017d7840 	.word	0x017d7840

0800b024 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b028:	f7fe fb4a 	bl	80096c0 <HAL_RCC_GetHCLKFreq>
 800b02c:	4602      	mov	r2, r0
 800b02e:	4b06      	ldr	r3, [pc, #24]	; (800b048 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	091b      	lsrs	r3, r3, #4
 800b034:	f003 0307 	and.w	r3, r3, #7
 800b038:	4904      	ldr	r1, [pc, #16]	; (800b04c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b03a:	5ccb      	ldrb	r3, [r1, r3]
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b044:	4618      	mov	r0, r3
 800b046:	bd80      	pop	{r7, pc}
 800b048:	58024400 	.word	0x58024400
 800b04c:	0800fb94 	.word	0x0800fb94

0800b050 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b050:	b480      	push	{r7}
 800b052:	b089      	sub	sp, #36	; 0x24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b058:	4ba1      	ldr	r3, [pc, #644]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05c:	f003 0303 	and.w	r3, r3, #3
 800b060:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b062:	4b9f      	ldr	r3, [pc, #636]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b066:	0b1b      	lsrs	r3, r3, #12
 800b068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b06c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b06e:	4b9c      	ldr	r3, [pc, #624]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	091b      	lsrs	r3, r3, #4
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b07a:	4b99      	ldr	r3, [pc, #612]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07e:	08db      	lsrs	r3, r3, #3
 800b080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	fb02 f303 	mul.w	r3, r2, r3
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 8111 	beq.w	800b2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	f000 8083 	beq.w	800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	f200 80a1 	bhi.w	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d056      	beq.n	800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b0ba:	e099      	b.n	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0bc:	4b88      	ldr	r3, [pc, #544]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02d      	beq.n	800b124 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0c8:	4b85      	ldr	r3, [pc, #532]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	08db      	lsrs	r3, r3, #3
 800b0ce:	f003 0303 	and.w	r3, r3, #3
 800b0d2:	4a84      	ldr	r2, [pc, #528]	; (800b2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b0d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	ee07 3a90 	vmov	s15, r3
 800b0e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f2:	4b7b      	ldr	r3, [pc, #492]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b102:	ed97 6a03 	vldr	s12, [r7, #12]
 800b106:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b122:	e087      	b.n	800b234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b6a      	ldr	r3, [pc, #424]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b166:	e065      	b.n	800b234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b59      	ldr	r3, [pc, #356]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1aa:	e043      	b.n	800b234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1be:	4b48      	ldr	r3, [pc, #288]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1ee:	e021      	b.n	800b234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b202:	4b37      	ldr	r3, [pc, #220]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b212:	ed97 6a03 	vldr	s12, [r7, #12]
 800b216:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b232:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b234:	4b2a      	ldr	r3, [pc, #168]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b238:	0a5b      	lsrs	r3, r3, #9
 800b23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b24a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b24e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b25a:	ee17 2a90 	vmov	r2, s15
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b262:	4b1f      	ldr	r3, [pc, #124]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b266:	0c1b      	lsrs	r3, r3, #16
 800b268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26c:	ee07 3a90 	vmov	s15, r3
 800b270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b27c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b288:	ee17 2a90 	vmov	r2, s15
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b290:	4b13      	ldr	r3, [pc, #76]	; (800b2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	0e1b      	lsrs	r3, r3, #24
 800b296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b6:	ee17 2a90 	vmov	r2, s15
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b2be:	e008      	b.n	800b2d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	609a      	str	r2, [r3, #8]
}
 800b2d2:	bf00      	nop
 800b2d4:	3724      	adds	r7, #36	; 0x24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	58024400 	.word	0x58024400
 800b2e4:	03d09000 	.word	0x03d09000
 800b2e8:	46000000 	.word	0x46000000
 800b2ec:	4c742400 	.word	0x4c742400
 800b2f0:	4a742400 	.word	0x4a742400
 800b2f4:	4bbebc20 	.word	0x4bbebc20

0800b2f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b089      	sub	sp, #36	; 0x24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b300:	4ba1      	ldr	r3, [pc, #644]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	f003 0303 	and.w	r3, r3, #3
 800b308:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b30a:	4b9f      	ldr	r3, [pc, #636]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30e:	0d1b      	lsrs	r3, r3, #20
 800b310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b314:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b316:	4b9c      	ldr	r3, [pc, #624]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31a:	0a1b      	lsrs	r3, r3, #8
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b322:	4b99      	ldr	r3, [pc, #612]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b326:	08db      	lsrs	r3, r3, #3
 800b328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8111 	beq.w	800b568 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	f000 8083 	beq.w	800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	2b02      	cmp	r3, #2
 800b352:	f200 80a1 	bhi.w	800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d056      	beq.n	800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b362:	e099      	b.n	800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b364:	4b88      	ldr	r3, [pc, #544]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 0320 	and.w	r3, r3, #32
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d02d      	beq.n	800b3cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b370:	4b85      	ldr	r3, [pc, #532]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	08db      	lsrs	r3, r3, #3
 800b376:	f003 0303 	and.w	r3, r3, #3
 800b37a:	4a84      	ldr	r2, [pc, #528]	; (800b58c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b37c:	fa22 f303 	lsr.w	r3, r2, r3
 800b380:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	ee07 3a90 	vmov	s15, r3
 800b388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b39a:	4b7b      	ldr	r3, [pc, #492]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a2:	ee07 3a90 	vmov	s15, r3
 800b3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b3ca:	e087      	b.n	800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b594 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3de:	4b6a      	ldr	r3, [pc, #424]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b40a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b40e:	e065      	b.n	800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	ee07 3a90 	vmov	s15, r3
 800b416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b41a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b422:	4b59      	ldr	r3, [pc, #356]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b432:	ed97 6a03 	vldr	s12, [r7, #12]
 800b436:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b452:	e043      	b.n	800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b59c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b466:	4b48      	ldr	r3, [pc, #288]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46e:	ee07 3a90 	vmov	s15, r3
 800b472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b476:	ed97 6a03 	vldr	s12, [r7, #12]
 800b47a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b47e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b496:	e021      	b.n	800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4aa:	4b37      	ldr	r3, [pc, #220]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b4dc:	4b2a      	ldr	r3, [pc, #168]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e0:	0a5b      	lsrs	r3, r3, #9
 800b4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b502:	ee17 2a90 	vmov	r2, s15
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b50a:	4b1f      	ldr	r3, [pc, #124]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50e:	0c1b      	lsrs	r3, r3, #16
 800b510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b514:	ee07 3a90 	vmov	s15, r3
 800b518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b520:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b524:	edd7 6a07 	vldr	s13, [r7, #28]
 800b528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b530:	ee17 2a90 	vmov	r2, s15
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b538:	4b13      	ldr	r3, [pc, #76]	; (800b588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53c:	0e1b      	lsrs	r3, r3, #24
 800b53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b54e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b552:	edd7 6a07 	vldr	s13, [r7, #28]
 800b556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b55e:	ee17 2a90 	vmov	r2, s15
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b566:	e008      	b.n	800b57a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	609a      	str	r2, [r3, #8]
}
 800b57a:	bf00      	nop
 800b57c:	3724      	adds	r7, #36	; 0x24
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	58024400 	.word	0x58024400
 800b58c:	03d09000 	.word	0x03d09000
 800b590:	46000000 	.word	0x46000000
 800b594:	4c742400 	.word	0x4c742400
 800b598:	4a742400 	.word	0x4a742400
 800b59c:	4bbebc20 	.word	0x4bbebc20

0800b5a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b089      	sub	sp, #36	; 0x24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5a8:	4ba0      	ldr	r3, [pc, #640]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ac:	f003 0303 	and.w	r3, r3, #3
 800b5b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b5b2:	4b9e      	ldr	r3, [pc, #632]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b6:	091b      	lsrs	r3, r3, #4
 800b5b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b5be:	4b9b      	ldr	r3, [pc, #620]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b5c8:	4b98      	ldr	r3, [pc, #608]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5cc:	08db      	lsrs	r3, r3, #3
 800b5ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	fb02 f303 	mul.w	r3, r2, r3
 800b5d8:	ee07 3a90 	vmov	s15, r3
 800b5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 8111 	beq.w	800b80e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	f000 8083 	beq.w	800b6fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	f200 80a1 	bhi.w	800b73e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d056      	beq.n	800b6b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b608:	e099      	b.n	800b73e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b60a:	4b88      	ldr	r3, [pc, #544]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0320 	and.w	r3, r3, #32
 800b612:	2b00      	cmp	r3, #0
 800b614:	d02d      	beq.n	800b672 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b616:	4b85      	ldr	r3, [pc, #532]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	08db      	lsrs	r3, r3, #3
 800b61c:	f003 0303 	and.w	r3, r3, #3
 800b620:	4a83      	ldr	r2, [pc, #524]	; (800b830 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b622:	fa22 f303 	lsr.w	r3, r2, r3
 800b626:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b640:	4b7a      	ldr	r3, [pc, #488]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b648:	ee07 3a90 	vmov	s15, r3
 800b64c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b650:	ed97 6a03 	vldr	s12, [r7, #12]
 800b654:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b670:	e087      	b.n	800b782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b838 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b684:	4b69      	ldr	r3, [pc, #420]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b694:	ed97 6a03 	vldr	s12, [r7, #12]
 800b698:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b69c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6b4:	e065      	b.n	800b782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	ee07 3a90 	vmov	s15, r3
 800b6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b83c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b6c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c8:	4b58      	ldr	r3, [pc, #352]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d0:	ee07 3a90 	vmov	s15, r3
 800b6d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6f8:	e043      	b.n	800b782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	ee07 3a90 	vmov	s15, r3
 800b700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b704:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70c:	4b47      	ldr	r3, [pc, #284]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b714:	ee07 3a90 	vmov	s15, r3
 800b718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b720:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b734:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b73c:	e021      	b.n	800b782 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	ee07 3a90 	vmov	s15, r3
 800b744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b748:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b838 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b74c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b750:	4b36      	ldr	r3, [pc, #216]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b758:	ee07 3a90 	vmov	s15, r3
 800b75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b760:	ed97 6a03 	vldr	s12, [r7, #12]
 800b764:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b834 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b780:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b782:	4b2a      	ldr	r3, [pc, #168]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b786:	0a5b      	lsrs	r3, r3, #9
 800b788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b78c:	ee07 3a90 	vmov	s15, r3
 800b790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b79c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7a8:	ee17 2a90 	vmov	r2, s15
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b7b0:	4b1e      	ldr	r3, [pc, #120]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d6:	ee17 2a90 	vmov	r2, s15
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b7de:	4b13      	ldr	r3, [pc, #76]	; (800b82c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e2:	0e1b      	lsrs	r3, r3, #24
 800b7e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b804:	ee17 2a90 	vmov	r2, s15
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b80c:	e008      	b.n	800b820 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	609a      	str	r2, [r3, #8]
}
 800b820:	bf00      	nop
 800b822:	3724      	adds	r7, #36	; 0x24
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	58024400 	.word	0x58024400
 800b830:	03d09000 	.word	0x03d09000
 800b834:	46000000 	.word	0x46000000
 800b838:	4c742400 	.word	0x4c742400
 800b83c:	4a742400 	.word	0x4a742400
 800b840:	4bbebc20 	.word	0x4bbebc20

0800b844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b852:	4b53      	ldr	r3, [pc, #332]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d101      	bne.n	800b862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e099      	b.n	800b996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b862:	4b4f      	ldr	r3, [pc, #316]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a4e      	ldr	r2, [pc, #312]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b86c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86e:	f7f7 ff77 	bl	8003760 <HAL_GetTick>
 800b872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b874:	e008      	b.n	800b888 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b876:	f7f7 ff73 	bl	8003760 <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d901      	bls.n	800b888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e086      	b.n	800b996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b888:	4b45      	ldr	r3, [pc, #276]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f0      	bne.n	800b876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b894:	4b42      	ldr	r3, [pc, #264]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	031b      	lsls	r3, r3, #12
 800b8a2:	493f      	ldr	r1, [pc, #252]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	025b      	lsls	r3, r3, #9
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	061b      	lsls	r3, r3, #24
 800b8d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8d8:	4931      	ldr	r1, [pc, #196]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b8de:	4b30      	ldr	r3, [pc, #192]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	492d      	ldr	r1, [pc, #180]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b8f0:	4b2b      	ldr	r3, [pc, #172]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	f023 0220 	bic.w	r2, r3, #32
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	4928      	ldr	r1, [pc, #160]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b902:	4b27      	ldr	r3, [pc, #156]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	4a26      	ldr	r2, [pc, #152]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b908:	f023 0310 	bic.w	r3, r3, #16
 800b90c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b90e:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b912:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <RCCEx_PLL2_Config+0x160>)
 800b914:	4013      	ands	r3, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	69d2      	ldr	r2, [r2, #28]
 800b91a:	00d2      	lsls	r2, r2, #3
 800b91c:	4920      	ldr	r1, [pc, #128]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b922:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	4a1e      	ldr	r2, [pc, #120]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b928:	f043 0310 	orr.w	r3, r3, #16
 800b92c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b934:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	4a19      	ldr	r2, [pc, #100]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b93a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b93e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b940:	e00f      	b.n	800b962 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d106      	bne.n	800b956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b948:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	4a14      	ldr	r2, [pc, #80]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b94e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b952:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b954:	e005      	b.n	800b962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b956:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	4a11      	ldr	r2, [pc, #68]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b95c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b962:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a0e      	ldr	r2, [pc, #56]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b96c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b96e:	f7f7 fef7 	bl	8003760 <HAL_GetTick>
 800b972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b974:	e008      	b.n	800b988 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b976:	f7f7 fef3 	bl	8003760 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	2b02      	cmp	r3, #2
 800b982:	d901      	bls.n	800b988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e006      	b.n	800b996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <RCCEx_PLL2_Config+0x15c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0f0      	beq.n	800b976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	58024400 	.word	0x58024400
 800b9a4:	ffff0007 	.word	0xffff0007

0800b9a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9b6:	4b53      	ldr	r3, [pc, #332]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ba:	f003 0303 	and.w	r3, r3, #3
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d101      	bne.n	800b9c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e099      	b.n	800bafa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b9c6:	4b4f      	ldr	r3, [pc, #316]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a4e      	ldr	r2, [pc, #312]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800b9cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9d2:	f7f7 fec5 	bl	8003760 <HAL_GetTick>
 800b9d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9d8:	e008      	b.n	800b9ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b9da:	f7f7 fec1 	bl	8003760 <HAL_GetTick>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d901      	bls.n	800b9ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e086      	b.n	800bafa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9ec:	4b45      	ldr	r3, [pc, #276]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1f0      	bne.n	800b9da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b9f8:	4b42      	ldr	r3, [pc, #264]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	051b      	lsls	r3, r3, #20
 800ba06:	493f      	ldr	r1, [pc, #252]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	628b      	str	r3, [r1, #40]	; 0x28
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	025b      	lsls	r3, r3, #9
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	431a      	orrs	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	061b      	lsls	r3, r3, #24
 800ba38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba3c:	4931      	ldr	r1, [pc, #196]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ba42:	4b30      	ldr	r3, [pc, #192]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	492d      	ldr	r1, [pc, #180]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba54:	4b2b      	ldr	r3, [pc, #172]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	4928      	ldr	r1, [pc, #160]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba62:	4313      	orrs	r3, r2
 800ba64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ba66:	4b27      	ldr	r3, [pc, #156]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	4a26      	ldr	r2, [pc, #152]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba72:	4b24      	ldr	r3, [pc, #144]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba76:	4b24      	ldr	r3, [pc, #144]	; (800bb08 <RCCEx_PLL3_Config+0x160>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	69d2      	ldr	r2, [r2, #28]
 800ba7e:	00d2      	lsls	r2, r2, #3
 800ba80:	4920      	ldr	r1, [pc, #128]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba86:	4b1f      	ldr	r3, [pc, #124]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	4a1e      	ldr	r2, [pc, #120]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d106      	bne.n	800baa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba98:	4b1a      	ldr	r3, [pc, #104]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9c:	4a19      	ldr	r2, [pc, #100]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800ba9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800baa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800baa4:	e00f      	b.n	800bac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d106      	bne.n	800baba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800baac:	4b15      	ldr	r3, [pc, #84]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	4a14      	ldr	r2, [pc, #80]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800bab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bab8:	e005      	b.n	800bac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800baba:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babe:	4a11      	ldr	r2, [pc, #68]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800bac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bac6:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a0e      	ldr	r2, [pc, #56]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800bacc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bad2:	f7f7 fe45 	bl	8003760 <HAL_GetTick>
 800bad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bad8:	e008      	b.n	800baec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bada:	f7f7 fe41 	bl	8003760 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d901      	bls.n	800baec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e006      	b.n	800bafa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <RCCEx_PLL3_Config+0x15c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d0f0      	beq.n	800bada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	58024400 	.word	0x58024400
 800bb08:	ffff0007 	.word	0xffff0007

0800bb0c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d904      	bls.n	800bb2a <HAL_SAI_InitProtocol+0x1e>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	3b03      	subs	r3, #3
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d812      	bhi.n	800bb4e <HAL_SAI_InitProtocol+0x42>
 800bb28:	e008      	b.n	800bb3c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fb7b 	bl	800c22c <SAI_InitI2S>
 800bb36:	4603      	mov	r3, r0
 800bb38:	75fb      	strb	r3, [r7, #23]
      break;
 800bb3a:	e00b      	b.n	800bb54 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	68b9      	ldr	r1, [r7, #8]
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f000 fc24 	bl	800c390 <SAI_InitPCM>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb4c:	e002      	b.n	800bb54 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	75fb      	strb	r3, [r7, #23]
      break;
 800bb52:	bf00      	nop
  }

  if (status == HAL_OK)
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d104      	bne.n	800bb64 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 f808 	bl	800bb70 <HAL_SAI_Init>
 800bb60:	4603      	mov	r3, r0
 800bb62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08a      	sub	sp, #40	; 0x28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e1fb      	b.n	800bf7a <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d113      	bne.n	800bbb4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a96      	ldr	r2, [pc, #600]	; (800bdec <HAL_SAI_Init+0x27c>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d004      	beq.n	800bba0 <HAL_SAI_Init+0x30>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a95      	ldr	r2, [pc, #596]	; (800bdf0 <HAL_SAI_Init+0x280>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d107      	bne.n	800bbb0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d103      	bne.n	800bbb0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e1e2      	b.n	800bf7a <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a8c      	ldr	r2, [pc, #560]	; (800bdec <HAL_SAI_Init+0x27c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d004      	beq.n	800bbc8 <HAL_SAI_Init+0x58>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a8c      	ldr	r2, [pc, #560]	; (800bdf4 <HAL_SAI_Init+0x284>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d102      	bne.n	800bbce <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800bbc8:	4b8b      	ldr	r3, [pc, #556]	; (800bdf8 <HAL_SAI_Init+0x288>)
 800bbca:	61bb      	str	r3, [r7, #24]
 800bbcc:	e00e      	b.n	800bbec <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a87      	ldr	r2, [pc, #540]	; (800bdf0 <HAL_SAI_Init+0x280>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d004      	beq.n	800bbe2 <HAL_SAI_Init+0x72>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a87      	ldr	r2, [pc, #540]	; (800bdfc <HAL_SAI_Init+0x28c>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d102      	bne.n	800bbe8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800bbe2:	4b87      	ldr	r3, [pc, #540]	; (800be00 <HAL_SAI_Init+0x290>)
 800bbe4:	61bb      	str	r3, [r7, #24]
 800bbe6:	e001      	b.n	800bbec <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e1c6      	b.n	800bf7a <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d106      	bne.n	800bc06 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f001 fbeb 	bl	800d3dc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fc7c 	bl	800c504 <SAI_Disable>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e1b1      	b.n	800bf7a <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2202      	movs	r2, #2
 800bc1a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d00c      	beq.n	800bc40 <HAL_SAI_Init+0xd0>
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d80d      	bhi.n	800bc46 <HAL_SAI_Init+0xd6>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <HAL_SAI_Init+0xc4>
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d003      	beq.n	800bc3a <HAL_SAI_Init+0xca>
 800bc32:	e008      	b.n	800bc46 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bc38:	e008      	b.n	800bc4c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc3a:	2310      	movs	r3, #16
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bc3e:	e005      	b.n	800bc4c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc40:	2320      	movs	r3, #32
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bc44:	e002      	b.n	800bc4c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bc4a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	2b05      	cmp	r3, #5
 800bc52:	d822      	bhi.n	800bc9a <HAL_SAI_Init+0x12a>
 800bc54:	a201      	add	r2, pc, #4	; (adr r2, 800bc5c <HAL_SAI_Init+0xec>)
 800bc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5a:	bf00      	nop
 800bc5c:	0800bc75 	.word	0x0800bc75
 800bc60:	0800bc7b 	.word	0x0800bc7b
 800bc64:	0800bc83 	.word	0x0800bc83
 800bc68:	0800bc9b 	.word	0x0800bc9b
 800bc6c:	0800bc9b 	.word	0x0800bc9b
 800bc70:	0800bc8b 	.word	0x0800bc8b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]
      break;
 800bc78:	e012      	b.n	800bca0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	61fb      	str	r3, [r7, #28]
      break;
 800bc80:	e00e      	b.n	800bca0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc86:	61fb      	str	r3, [r7, #28]
      break;
 800bc88:	e00a      	b.n	800bca0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc8e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	f043 0303 	orr.w	r3, r3, #3
 800bc96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bc98:	e002      	b.n	800bca0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
      break;
 800bc9e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 8084 	beq.w	800bdb8 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a4c      	ldr	r2, [pc, #304]	; (800bdec <HAL_SAI_Init+0x27c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_SAI_Init+0x158>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a4c      	ldr	r2, [pc, #304]	; (800bdf4 <HAL_SAI_Init+0x284>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d104      	bne.n	800bcd2 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bcc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bccc:	f7fe fd86 	bl	800a7dc <HAL_RCCEx_GetPeriphCLKFreq>
 800bcd0:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a46      	ldr	r2, [pc, #280]	; (800bdf0 <HAL_SAI_Init+0x280>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d104      	bne.n	800bce6 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800bcdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bce0:	f7fe fd7c 	bl	800a7dc <HAL_RCCEx_GetPeriphCLKFreq>
 800bce4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a44      	ldr	r2, [pc, #272]	; (800bdfc <HAL_SAI_Init+0x28c>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d104      	bne.n	800bcfa <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800bcf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bcf4:	f7fe fd72 	bl	800a7dc <HAL_RCCEx_GetPeriphCLKFreq>
 800bcf8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd02:	d120      	bne.n	800bd46 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d102      	bne.n	800bd12 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800bd0c:	2340      	movs	r3, #64	; 0x40
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	e00a      	b.n	800bd28 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd16:	2b08      	cmp	r3, #8
 800bd18:	d103      	bne.n	800bd22 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800bd1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e002      	b.n	800bd28 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd26:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	4619      	mov	r1, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a1b      	ldr	r3, [r3, #32]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	fb02 f303 	mul.w	r3, r2, r3
 800bd3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	e017      	b.n	800bd76 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd4e:	d101      	bne.n	800bd54 <HAL_SAI_Init+0x1e4>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e000      	b.n	800bd56 <HAL_SAI_Init+0x1e6>
 800bd54:	2301      	movs	r3, #1
 800bd56:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	005b      	lsls	r3, r3, #1
 800bd62:	4619      	mov	r1, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	fb02 f303 	mul.w	r3, r2, r3
 800bd6e:	021b      	lsls	r3, r3, #8
 800bd70:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd74:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	4a22      	ldr	r2, [pc, #136]	; (800be04 <HAL_SAI_Init+0x294>)
 800bd7a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd7e:	08da      	lsrs	r2, r3, #3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bd84:	6939      	ldr	r1, [r7, #16]
 800bd86:	4b1f      	ldr	r3, [pc, #124]	; (800be04 <HAL_SAI_Init+0x294>)
 800bd88:	fba3 2301 	umull	r2, r3, r3, r1
 800bd8c:	08da      	lsrs	r2, r3, #3
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	1aca      	subs	r2, r1, r3
 800bd98:	2a08      	cmp	r2, #8
 800bd9a:	d904      	bls.n	800bda6 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d104      	bne.n	800bdb8 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	085a      	lsrs	r2, r3, #1
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <HAL_SAI_Init+0x258>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d109      	bne.n	800bddc <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d101      	bne.n	800bdd4 <HAL_SAI_Init+0x264>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e001      	b.n	800bdd8 <HAL_SAI_Init+0x268>
 800bdd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd8:	623b      	str	r3, [r7, #32]
 800bdda:	e017      	b.n	800be0c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d111      	bne.n	800be08 <HAL_SAI_Init+0x298>
 800bde4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde8:	e00f      	b.n	800be0a <HAL_SAI_Init+0x29a>
 800bdea:	bf00      	nop
 800bdec:	40015804 	.word	0x40015804
 800bdf0:	58005404 	.word	0x58005404
 800bdf4:	40015824 	.word	0x40015824
 800bdf8:	40015800 	.word	0x40015800
 800bdfc:	58005424 	.word	0x58005424
 800be00:	58005400 	.word	0x58005400
 800be04:	cccccccd 	.word	0xcccccccd
 800be08:	2300      	movs	r3, #0
 800be0a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6819      	ldr	r1, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	4b5b      	ldr	r3, [pc, #364]	; (800bf84 <HAL_SAI_Init+0x414>)
 800be18:	400b      	ands	r3, r1
 800be1a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6819      	ldr	r1, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be2a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be30:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be36:	431a      	orrs	r2, r3
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800be44:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be50:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	051b      	lsls	r3, r3, #20
 800be58:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800be5e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6859      	ldr	r1, [r3, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	4b43      	ldr	r3, [pc, #268]	; (800bf88 <HAL_SAI_Init+0x418>)
 800be7a:	400b      	ands	r3, r1
 800be7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6859      	ldr	r1, [r3, #4]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	69da      	ldr	r2, [r3, #28]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	430a      	orrs	r2, r1
 800be9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6899      	ldr	r1, [r3, #8]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	4b39      	ldr	r3, [pc, #228]	; (800bf8c <HAL_SAI_Init+0x41c>)
 800bea8:	400b      	ands	r3, r1
 800beaa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6899      	ldr	r1, [r3, #8]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bebc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800bec2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800bec8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bece:	3b01      	subs	r3, #1
 800bed0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bed2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68d9      	ldr	r1, [r3, #12]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	f24f 0320 	movw	r3, #61472	; 0xf020
 800beea:	400b      	ands	r3, r1
 800beec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68d9      	ldr	r1, [r3, #12]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800befc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf02:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bf04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	021b      	lsls	r3, r3, #8
 800bf0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a1c      	ldr	r2, [pc, #112]	; (800bf90 <HAL_SAI_Init+0x420>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d004      	beq.n	800bf2c <HAL_SAI_Init+0x3bc>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a1b      	ldr	r2, [pc, #108]	; (800bf94 <HAL_SAI_Init+0x424>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d119      	bne.n	800bf60 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf30:	f023 0201 	bic.w	r2, r3, #1
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d10e      	bne.n	800bf60 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bf4e:	431a      	orrs	r2, r3
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf58:	f043 0201 	orr.w	r2, r3, #1
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3728      	adds	r7, #40	; 0x28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	f005c010 	.word	0xf005c010
 800bf88:	ffff1ff0 	.word	0xffff1ff0
 800bf8c:	fff88000 	.word	0xfff88000
 800bf90:	40015804 	.word	0x40015804
 800bf94:	58005404 	.word	0x58005404

0800bf98 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800bfa6:	f7f7 fbdb 	bl	8003760 <HAL_GetTick>
 800bfaa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <HAL_SAI_Transmit_DMA+0x20>
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d101      	bne.n	800bfbc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e098      	b.n	800c0ee <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	f040 8091 	bne.w	800c0ec <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d101      	bne.n	800bfd8 <HAL_SAI_Transmit_DMA+0x40>
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	e08a      	b.n	800c0ee <HAL_SAI_Transmit_DMA+0x156>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	88fa      	ldrh	r2, [r7, #6]
 800bfea:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	88fa      	ldrh	r2, [r7, #6]
 800bff2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2212      	movs	r2, #18
 800c002:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c00c:	4a3a      	ldr	r2, [pc, #232]	; (800c0f8 <HAL_SAI_Transmit_DMA+0x160>)
 800c00e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c016:	4a39      	ldr	r2, [pc, #228]	; (800c0fc <HAL_SAI_Transmit_DMA+0x164>)
 800c018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c020:	4a37      	ldr	r2, [pc, #220]	; (800c100 <HAL_SAI_Transmit_DMA+0x168>)
 800c022:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c02a:	2200      	movs	r2, #0
 800c02c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c038:	4619      	mov	r1, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	331c      	adds	r3, #28
 800c040:	461a      	mov	r2, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c048:	f7f8 fb5e 	bl	8004708 <HAL_DMA_Start_IT>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e047      	b.n	800c0ee <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c05e:	2100      	movs	r1, #0
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f000 fa17 	bl	800c494 <SAI_InterruptFlag>
 800c066:	4601      	mov	r1, r0
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691a      	ldr	r2, [r3, #16]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c084:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c086:	e015      	b.n	800c0b4 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c088:	f7f7 fb6a 	bl	8003760 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c096:	d90d      	bls.n	800c0b4 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c09e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e01c      	b.n	800c0ee <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0e2      	beq.n	800c088 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d107      	bne.n	800c0e0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c0de:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e000      	b.n	800c0ee <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800c0ec:	2302      	movs	r3, #2
  }
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	0800c5d9 	.word	0x0800c5d9
 800c0fc:	0800c579 	.word	0x0800c579
 800c100:	0800c671 	.word	0x0800c671

0800c104 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	4613      	mov	r3, r2
 800c110:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <HAL_SAI_Receive_DMA+0x1a>
 800c118:	88fb      	ldrh	r3, [r7, #6]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e079      	b.n	800c216 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d172      	bne.n	800c214 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c134:	2b01      	cmp	r3, #1
 800c136:	d101      	bne.n	800c13c <HAL_SAI_Receive_DMA+0x38>
 800c138:	2302      	movs	r3, #2
 800c13a:	e06c      	b.n	800c216 <HAL_SAI_Receive_DMA+0x112>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	88fa      	ldrh	r2, [r7, #6]
 800c14e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	88fa      	ldrh	r2, [r7, #6]
 800c156:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2222      	movs	r2, #34	; 0x22
 800c166:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c170:	4a2b      	ldr	r2, [pc, #172]	; (800c220 <HAL_SAI_Receive_DMA+0x11c>)
 800c172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c17a:	4a2a      	ldr	r2, [pc, #168]	; (800c224 <HAL_SAI_Receive_DMA+0x120>)
 800c17c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c184:	4a28      	ldr	r2, [pc, #160]	; (800c228 <HAL_SAI_Receive_DMA+0x124>)
 800c186:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c18e:	2200      	movs	r2, #0
 800c190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	331c      	adds	r3, #28
 800c19e:	4619      	mov	r1, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c1ac:	f7f8 faac 	bl	8004708 <HAL_DMA_Start_IT>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e029      	b.n	800c216 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f965 	bl	800c494 <SAI_InterruptFlag>
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	691a      	ldr	r2, [r3, #16]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c1e8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d107      	bne.n	800c208 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c206:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	e000      	b.n	800c216 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800c214:	2302      	movs	r3, #2
  }
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0800c655 	.word	0x0800c655
 800c224:	0800c5f5 	.word	0x0800c5f5
 800c228:	0800c671 	.word	0x0800c671

0800c22c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b087      	sub	sp, #28
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <SAI_InitI2S+0x2e>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	2b02      	cmp	r3, #2
 800c258:	d103      	bne.n	800c262 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	651a      	str	r2, [r3, #80]	; 0x50
 800c260:	e002      	b.n	800c268 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c26e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c276:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e077      	b.n	800c382 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d107      	bne.n	800c2a8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c2a4:	665a      	str	r2, [r3, #100]	; 0x64
 800c2a6:	e006      	b.n	800c2b6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c2ae:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	665a      	str	r2, [r3, #100]	; 0x64
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d84f      	bhi.n	800c35c <SAI_InitI2S+0x130>
 800c2bc:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <SAI_InitI2S+0x98>)
 800c2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c2:	bf00      	nop
 800c2c4:	0800c2d5 	.word	0x0800c2d5
 800c2c8:	0800c2f7 	.word	0x0800c2f7
 800c2cc:	0800c319 	.word	0x0800c319
 800c2d0:	0800c33b 	.word	0x0800c33b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2280      	movs	r2, #128	; 0x80
 800c2d8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	085b      	lsrs	r3, r3, #1
 800c2de:	015a      	lsls	r2, r3, #5
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	085b      	lsrs	r3, r3, #1
 800c2e8:	011a      	lsls	r2, r3, #4
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2240      	movs	r2, #64	; 0x40
 800c2f2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c2f4:	e035      	b.n	800c362 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2280      	movs	r2, #128	; 0x80
 800c2fa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	085b      	lsrs	r3, r3, #1
 800c300:	019a      	lsls	r2, r3, #6
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	085b      	lsrs	r3, r3, #1
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2280      	movs	r2, #128	; 0x80
 800c314:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c316:	e024      	b.n	800c362 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	22c0      	movs	r2, #192	; 0xc0
 800c31c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	085b      	lsrs	r3, r3, #1
 800c322:	019a      	lsls	r2, r3, #6
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	085b      	lsrs	r3, r3, #1
 800c32c:	015a      	lsls	r2, r3, #5
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2280      	movs	r2, #128	; 0x80
 800c336:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c338:	e013      	b.n	800c362 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	22e0      	movs	r2, #224	; 0xe0
 800c33e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	085b      	lsrs	r3, r3, #1
 800c344:	019a      	lsls	r2, r3, #6
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	085b      	lsrs	r3, r3, #1
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2280      	movs	r2, #128	; 0x80
 800c358:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c35a:	e002      	b.n	800c362 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	75fb      	strb	r3, [r7, #23]
      break;
 800c360:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d10b      	bne.n	800c380 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d102      	bne.n	800c374 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2210      	movs	r2, #16
 800c372:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b02      	cmp	r3, #2
 800c378:	d102      	bne.n	800c380 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2208      	movs	r2, #8
 800c37e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800c380:	7dfb      	ldrb	r3, [r7, #23]
}
 800c382:	4618      	mov	r0, r3
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop

0800c390 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <SAI_InitPCM+0x2e>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d103      	bne.n	800c3c6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	651a      	str	r2, [r3, #80]	; 0x50
 800c3c4:	e002      	b.n	800c3cc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3d8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c3e0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3f4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b04      	cmp	r3, #4
 800c3fa:	d103      	bne.n	800c404 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2201      	movs	r2, #1
 800c400:	659a      	str	r2, [r3, #88]	; 0x58
 800c402:	e002      	b.n	800c40a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	220d      	movs	r2, #13
 800c408:	659a      	str	r2, [r3, #88]	; 0x58
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b03      	cmp	r3, #3
 800c40e:	d837      	bhi.n	800c480 <SAI_InitPCM+0xf0>
 800c410:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <SAI_InitPCM+0x88>)
 800c412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c416:	bf00      	nop
 800c418:	0800c429 	.word	0x0800c429
 800c41c:	0800c43f 	.word	0x0800c43f
 800c420:	0800c455 	.word	0x0800c455
 800c424:	0800c46b 	.word	0x0800c46b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2280      	movs	r2, #128	; 0x80
 800c42c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	011a      	lsls	r2, r3, #4
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2240      	movs	r2, #64	; 0x40
 800c43a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c43c:	e023      	b.n	800c486 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2280      	movs	r2, #128	; 0x80
 800c442:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2280      	movs	r2, #128	; 0x80
 800c450:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c452:	e018      	b.n	800c486 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	22c0      	movs	r2, #192	; 0xc0
 800c458:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2280      	movs	r2, #128	; 0x80
 800c466:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c468:	e00d      	b.n	800c486 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	22e0      	movs	r2, #224	; 0xe0
 800c46e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2280      	movs	r2, #128	; 0x80
 800c47c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c47e:	e002      	b.n	800c486 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	75fb      	strb	r3, [r7, #23]
      break;
 800c484:	bf00      	nop
  }

  return status;
 800c486:	7dfb      	ldrb	r3, [r7, #23]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	371c      	adds	r7, #28
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d103      	bne.n	800c4b2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f043 0308 	orr.w	r3, r3, #8
 800c4b0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4b6:	2b08      	cmp	r3, #8
 800c4b8:	d10b      	bne.n	800c4d2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c4be:	2b03      	cmp	r3, #3
 800c4c0:	d003      	beq.n	800c4ca <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d103      	bne.n	800c4d2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f043 0310 	orr.w	r3, r3, #16
 800c4d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d003      	beq.n	800c4e2 <SAI_InterruptFlag+0x4e>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d104      	bne.n	800c4ec <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	e003      	b.n	800c4f4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f043 0304 	orr.w	r3, r3, #4
 800c4f2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
	...

0800c504 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c50c:	4b18      	ldr	r3, [pc, #96]	; (800c570 <SAI_Disable+0x6c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a18      	ldr	r2, [pc, #96]	; (800c574 <SAI_Disable+0x70>)
 800c512:	fba2 2303 	umull	r2, r3, r2, r3
 800c516:	0b1b      	lsrs	r3, r3, #12
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c52e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10a      	bne.n	800c54c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c53c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	72fb      	strb	r3, [r7, #11]
      break;
 800c54a:	e009      	b.n	800c560 <SAI_Disable+0x5c>
    }
    count--;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	3b01      	subs	r3, #1
 800c550:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e7      	bne.n	800c530 <SAI_Disable+0x2c>

  return status;
 800c560:	7afb      	ldrb	r3, [r7, #11]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	24000484 	.word	0x24000484
 800c574:	95cbec1b 	.word	0x95cbec1b

0800c578 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58e:	d01c      	beq.n	800c5ca <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c5a6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f7ff ff72 	bl	800c494 <SAI_InterruptFlag>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	43d9      	mvns	r1, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691a      	ldr	r2, [r3, #16]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	400a      	ands	r2, r1
 800c5c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f001 f902 	bl	800d7d4 <HAL_SAI_TxCpltCallback>
#endif
}
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f7f6 f8ca 	bl	8002780 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800c5ec:	bf00      	nop
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c600:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c60a:	d01c      	beq.n	800c646 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c61a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c624:	2100      	movs	r1, #0
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7ff ff34 	bl	800c494 <SAI_InterruptFlag>
 800c62c:	4603      	mov	r3, r0
 800c62e:	43d9      	mvns	r1, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	691a      	ldr	r2, [r3, #16]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	400a      	ands	r2, r1
 800c63c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f001 f8b6 	bl	800d7b8 <HAL_SAI_RxCpltCallback>
#endif
}
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c660:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7f6 fb82 	bl	8002d6c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7f9 fc28 	bl	8005ed4 <HAL_DMA_GetError>
 800c684:	4603      	mov	r3, r0
 800c686:	2b02      	cmp	r3, #2
 800c688:	d01d      	beq.n	800c6c6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c690:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c6a8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff ff2a 	bl	800c504 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7f6 f869 	bl	8002798 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800c6c6:	bf00      	nop
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800c6d6:	f000 fb59 	bl	800cd8c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c6da:	4b4d      	ldr	r3, [pc, #308]	; (800c810 <main+0x140>)
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d11b      	bne.n	800c71e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c6e6:	f3bf 8f4f 	dsb	sy
}
 800c6ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c6ec:	f3bf 8f6f 	isb	sy
}
 800c6f0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c6f2:	4b47      	ldr	r3, [pc, #284]	; (800c810 <main+0x140>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c6fa:	f3bf 8f4f 	dsb	sy
}
 800c6fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c700:	f3bf 8f6f 	isb	sy
}
 800c704:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c706:	4b42      	ldr	r3, [pc, #264]	; (800c810 <main+0x140>)
 800c708:	695b      	ldr	r3, [r3, #20]
 800c70a:	4a41      	ldr	r2, [pc, #260]	; (800c810 <main+0x140>)
 800c70c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c710:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c712:	f3bf 8f4f 	dsb	sy
}
 800c716:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c718:	f3bf 8f6f 	isb	sy
}
 800c71c:	e000      	b.n	800c720 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c71e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c720:	4b3b      	ldr	r3, [pc, #236]	; (800c810 <main+0x140>)
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d138      	bne.n	800c79e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800c72c:	4b38      	ldr	r3, [pc, #224]	; (800c810 <main+0x140>)
 800c72e:	2200      	movs	r2, #0
 800c730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c734:	f3bf 8f4f 	dsb	sy
}
 800c738:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c73a:	4b35      	ldr	r3, [pc, #212]	; (800c810 <main+0x140>)
 800c73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c740:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	0b5b      	lsrs	r3, r3, #13
 800c746:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c74a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	08db      	lsrs	r3, r3, #3
 800c750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c754:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	015a      	lsls	r2, r3, #5
 800c75a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c75e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c764:	492a      	ldr	r1, [pc, #168]	; (800c810 <main+0x140>)
 800c766:	4313      	orrs	r3, r2
 800c768:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	1e5a      	subs	r2, r3, #1
 800c770:	607a      	str	r2, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1ef      	bne.n	800c756 <main+0x86>
    } while(sets-- != 0U);
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	1e5a      	subs	r2, r3, #1
 800c77a:	60ba      	str	r2, [r7, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1e5      	bne.n	800c74c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800c780:	f3bf 8f4f 	dsb	sy
}
 800c784:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c786:	4b22      	ldr	r3, [pc, #136]	; (800c810 <main+0x140>)
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	4a21      	ldr	r2, [pc, #132]	; (800c810 <main+0x140>)
 800c78c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c790:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c792:	f3bf 8f4f 	dsb	sy
}
 800c796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c798:	f3bf 8f6f 	isb	sy
}
 800c79c:	e000      	b.n	800c7a0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c79e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c7a0:	f7f6 ff58 	bl	8003654 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	f7f5 fcfb 	bl	80021a0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800c7aa:	2001      	movs	r0, #1
 800c7ac:	f7f5 fcf8 	bl	80021a0 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	f7f5 fd71 	bl	8002298 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	f7f5 fd6e 	bl	8002298 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c7bc:	f000 f836 	bl	800c82c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c7c0:	f000 fa78 	bl	800ccb4 <MX_GPIO_Init>
  MX_BDMA_Init();
 800c7c4:	f000 f9ec 	bl	800cba0 <MX_BDMA_Init>
  MX_SAI4_Init();
 800c7c8:	f000 f988 	bl	800cadc <MX_SAI4_Init>
  MX_CRC_Init();
 800c7cc:	f000 f8dc 	bl	800c988 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800c7d0:	f000 fd08 	bl	800d1e4 <MX_PDM2PCM_Init>
  MX_DMA_Init();
 800c7d4:	f000 f9fe 	bl	800cbd4 <MX_DMA_Init>
  MX_SAI1_Init();
 800c7d8:	f000 f94a 	bl	800ca70 <MX_SAI1_Init>
  MX_RAMECC_Init();
 800c7dc:	f000 f916 	bl	800ca0c <MX_RAMECC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800c7e0:	f000 f8ae 	bl	800c940 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
 800c7e4:	490b      	ldr	r1, [pc, #44]	; (800c814 <main+0x144>)
 800c7e6:	4a0c      	ldr	r2, [pc, #48]	; (800c818 <main+0x148>)
 800c7e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7ec:	480b      	ldr	r0, [pc, #44]	; (800c81c <main+0x14c>)
 800c7ee:	f7f7 ff8b 	bl	8004708 <HAL_DMA_Start_IT>
  HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES);
 800c7f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c7f6:	4907      	ldr	r1, [pc, #28]	; (800c814 <main+0x144>)
 800c7f8:	4809      	ldr	r0, [pc, #36]	; (800c820 <main+0x150>)
 800c7fa:	f7ff fc83 	bl	800c104 <HAL_SAI_Receive_DMA>
//  while(!hsai_BlockA4.Ack) {}
  PDM_Filter(pdm_buffer, audio_wav, &PDM1_filter_handler);
 800c7fe:	4a09      	ldr	r2, [pc, #36]	; (800c824 <main+0x154>)
 800c800:	4909      	ldr	r1, [pc, #36]	; (800c828 <main+0x158>)
 800c802:	4805      	ldr	r0, [pc, #20]	; (800c818 <main+0x148>)
 800c804:	f002 ff44 	bl	800f690 <PDM_Filter>
  AudioPlay_demo();
 800c808:	f000 faf2 	bl	800cdf0 <AudioPlay_demo>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800c80c:	e7fe      	b.n	800c80c <main+0x13c>
 800c80e:	bf00      	nop
 800c810:	e000ed00 	.word	0xe000ed00
 800c814:	240004f0 	.word	0x240004f0
 800c818:	2400920c 	.word	0x2400920c
 800c81c:	24019390 	.word	0x24019390
 800c820:	240194cc 	.word	0x240194cc
 800c824:	24021680 	.word	0x24021680
 800c828:	2400d20c 	.word	0x2400d20c

0800c82c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b09e      	sub	sp, #120	; 0x78
 800c830:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800c838:	2004      	movs	r0, #4
 800c83a:	f7fb ffcd 	bl	80087d8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800c83e:	2300      	movs	r3, #0
 800c840:	607b      	str	r3, [r7, #4]
 800c842:	4b3d      	ldr	r3, [pc, #244]	; (800c938 <SystemClock_Config+0x10c>)
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	4a3c      	ldr	r2, [pc, #240]	; (800c938 <SystemClock_Config+0x10c>)
 800c848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800c84c:	6193      	str	r3, [r2, #24]
 800c84e:	4b3a      	ldr	r3, [pc, #232]	; (800c938 <SystemClock_Config+0x10c>)
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c856:	607b      	str	r3, [r7, #4]
 800c858:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c85a:	bf00      	nop
 800c85c:	4b36      	ldr	r3, [pc, #216]	; (800c938 <SystemClock_Config+0x10c>)
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c868:	d1f8      	bne.n	800c85c <SystemClock_Config+0x30>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c86a:	2301      	movs	r3, #1
 800c86c:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c86e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c872:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800c874:	2300      	movs	r3, #0
 800c876:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800c878:	2300      	movs	r3, #0
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c87c:	2302      	movs	r3, #2
 800c87e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c880:	2302      	movs	r3, #2
 800c882:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800c884:	2305      	movs	r3, #5
 800c886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 104;
 800c888:	2368      	movs	r3, #104	; 0x68
 800c88a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 1;
 800c890:	2301      	movs	r3, #1
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c894:	2302      	movs	r3, #2
 800c896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c898:	2304      	movs	r3, #4
 800c89a:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800c8a0:	2308      	movs	r3, #8
 800c8a2:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c8a4:	f107 0308 	add.w	r3, r7, #8
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fc f82d 	bl	8008908 <HAL_RCC_OscConfig>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800c8b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c8bc:	f000 fa93 	bl	800cde6 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800c8c0:	233f      	movs	r3, #63	; 0x3f
 800c8c2:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c8cc:	2308      	movs	r3, #8
 800c8ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c8d0:	2340      	movs	r3, #64	; 0x40
 800c8d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c8d4:	2340      	movs	r3, #64	; 0x40
 800c8d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c8de:	2340      	movs	r3, #64	; 0x40
 800c8e0:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 800c8e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c8e6:	2103      	movs	r1, #3
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fc fbb9 	bl	8009060 <HAL_RCC_ClockConfig>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800c8f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800c8fc:	f000 fa73 	bl	800cde6 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 800c900:	4b0e      	ldr	r3, [pc, #56]	; (800c93c <SystemClock_Config+0x110>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a0d      	ldr	r2, [pc, #52]	; (800c93c <SystemClock_Config+0x110>)
 800c906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c90a:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800c90c:	4b0b      	ldr	r3, [pc, #44]	; (800c93c <SystemClock_Config+0x110>)
 800c90e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c912:	4a0a      	ldr	r2, [pc, #40]	; (800c93c <SystemClock_Config+0x110>)
 800c914:	f043 0302 	orr.w	r3, r3, #2
 800c918:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c91c:	4b07      	ldr	r3, [pc, #28]	; (800c93c <SystemClock_Config+0x110>)
 800c91e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	603b      	str	r3, [r7, #0]
 800c928:	683b      	ldr	r3, [r7, #0]

  HAL_EnableCompensationCell();
 800c92a:	f7f6 ff25 	bl	8003778 <HAL_EnableCompensationCell>

}
 800c92e:	bf00      	nop
 800c930:	3778      	adds	r7, #120	; 0x78
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	58024800 	.word	0x58024800
 800c93c:	58024400 	.word	0x58024400

0800c940 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 800c944:	2200      	movs	r2, #0
 800c946:	2100      	movs	r1, #0
 800c948:	2082      	movs	r0, #130	; 0x82
 800c94a:	f7f7 f824 	bl	8003996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800c94e:	2082      	movs	r0, #130	; 0x82
 800c950:	f7f7 f83b 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c954:	2200      	movs	r2, #0
 800c956:	2100      	movs	r1, #0
 800c958:	2038      	movs	r0, #56	; 0x38
 800c95a:	f7f7 f81c 	bl	8003996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c95e:	2038      	movs	r0, #56	; 0x38
 800c960:	f7f7 f833 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800c964:	2200      	movs	r2, #0
 800c966:	2100      	movs	r1, #0
 800c968:	2006      	movs	r0, #6
 800c96a:	f7f7 f814 	bl	8003996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800c96e:	2006      	movs	r0, #6
 800c970:	f7f7 f82b 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800c974:	2200      	movs	r2, #0
 800c976:	2100      	movs	r1, #0
 800c978:	2080      	movs	r0, #128	; 0x80
 800c97a:	f7f7 f80c 	bl	8003996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800c97e:	2080      	movs	r0, #128	; 0x80
 800c980:	f7f7 f823 	bl	80039ca <HAL_NVIC_EnableIRQ>
}
 800c984:	bf00      	nop
 800c986:	bd80      	pop	{r7, pc}

0800c988 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800c98e:	4b1c      	ldr	r3, [pc, #112]	; (800ca00 <MX_CRC_Init+0x78>)
 800c990:	4a1c      	ldr	r2, [pc, #112]	; (800ca04 <MX_CRC_Init+0x7c>)
 800c992:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c994:	4b1a      	ldr	r3, [pc, #104]	; (800ca00 <MX_CRC_Init+0x78>)
 800c996:	2200      	movs	r2, #0
 800c998:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800c99a:	4b19      	ldr	r3, [pc, #100]	; (800ca00 <MX_CRC_Init+0x78>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800c9a0:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800c9a6:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800c9ac:	4b14      	ldr	r3, [pc, #80]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800c9b2:	4813      	ldr	r0, [pc, #76]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9b4:	f7f7 f8ae 	bl	8003b14 <HAL_CRC_Init>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800c9be:	f000 fa12 	bl	800cde6 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800c9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	689a      	ldr	r2, [r3, #8]
 800c9c8:	4b0d      	ldr	r3, [pc, #52]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f042 0201 	orr.w	r2, r2, #1
 800c9d0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <MX_CRC_Init+0x80>)
 800c9d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9d8:	4a0b      	ldr	r2, [pc, #44]	; (800ca08 <MX_CRC_Init+0x80>)
 800c9da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c9e2:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <MX_CRC_Init+0x80>)
 800c9e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9ec:	607b      	str	r3, [r7, #4]
 800c9ee:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800c9f0:	4803      	ldr	r0, [pc, #12]	; (800ca00 <MX_CRC_Init+0x78>)
 800c9f2:	f000 fc3b 	bl	800d26c <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800c9f6:	bf00      	nop
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	24019408 	.word	0x24019408
 800ca04:	58024c00 	.word	0x58024c00
 800ca08:	58024400 	.word	0x58024400

0800ca0c <MX_RAMECC_Init>:
//  * @brief RAMECC Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_RAMECC_Init(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800ca10:	4b11      	ldr	r3, [pc, #68]	; (800ca58 <MX_RAMECC_Init+0x4c>)
 800ca12:	4a12      	ldr	r2, [pc, #72]	; (800ca5c <MX_RAMECC_Init+0x50>)
 800ca14:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 800ca16:	4810      	ldr	r0, [pc, #64]	; (800ca58 <MX_RAMECC_Init+0x4c>)
 800ca18:	f7fb ff38 	bl	800888c <HAL_RAMECC_Init>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800ca22:	f000 f9e0 	bl	800cde6 <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 800ca26:	4b0e      	ldr	r3, [pc, #56]	; (800ca60 <MX_RAMECC_Init+0x54>)
 800ca28:	4a0e      	ldr	r2, [pc, #56]	; (800ca64 <MX_RAMECC_Init+0x58>)
 800ca2a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800ca2c:	480c      	ldr	r0, [pc, #48]	; (800ca60 <MX_RAMECC_Init+0x54>)
 800ca2e:	f7fb ff2d 	bl	800888c <HAL_RAMECC_Init>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 800ca38:	f000 f9d5 	bl	800cde6 <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800ca3c:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <MX_RAMECC_Init+0x5c>)
 800ca3e:	4a0b      	ldr	r2, [pc, #44]	; (800ca6c <MX_RAMECC_Init+0x60>)
 800ca40:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800ca42:	4809      	ldr	r0, [pc, #36]	; (800ca68 <MX_RAMECC_Init+0x5c>)
 800ca44:	f7fb ff22 	bl	800888c <HAL_RAMECC_Init>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800ca4e:	f000 f9ca 	bl	800cde6 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800ca52:	bf00      	nop
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	240195f0 	.word	0x240195f0
 800ca5c:	48023020 	.word	0x48023020
 800ca60:	24019568 	.word	0x24019568
 800ca64:	48023040 	.word	0x48023040
 800ca68:	24019380 	.word	0x24019380
 800ca6c:	58027020 	.word	0x58027020

0800ca70 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800ca74:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca76:	4a17      	ldr	r2, [pc, #92]	; (800cad4 <MX_SAI1_Init+0x64>)
 800ca78:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800ca80:	4b13      	ldr	r3, [pc, #76]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800ca86:	4b12      	ldr	r3, [pc, #72]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800ca8c:	4b10      	ldr	r3, [pc, #64]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800ca92:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800ca98:	4b0d      	ldr	r3, [pc, #52]	; (800cad0 <MX_SAI1_Init+0x60>)
 800ca9a:	4a0f      	ldr	r2, [pc, #60]	; (800cad8 <MX_SAI1_Init+0x68>)
 800ca9c:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <MX_SAI1_Init+0x60>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800caa4:	4b0a      	ldr	r3, [pc, #40]	; (800cad0 <MX_SAI1_Init+0x60>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <MX_SAI1_Init+0x60>)
 800caac:	2200      	movs	r2, #0
 800caae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <MX_SAI1_Init+0x60>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800cab6:	2302      	movs	r3, #2
 800cab8:	2200      	movs	r2, #0
 800caba:	2100      	movs	r1, #0
 800cabc:	4804      	ldr	r0, [pc, #16]	; (800cad0 <MX_SAI1_Init+0x60>)
 800cabe:	f7ff f825 	bl	800bb0c <HAL_SAI_InitProtocol>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800cac8:	f000 f98d 	bl	800cde6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800cacc:	bf00      	nop
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	24019430 	.word	0x24019430
 800cad4:	40015824 	.word	0x40015824
 800cad8:	0002ee00 	.word	0x0002ee00

0800cadc <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800cae0:	4b2d      	ldr	r3, [pc, #180]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cae2:	4a2e      	ldr	r2, [pc, #184]	; (800cb9c <MX_SAI4_Init+0xc0>)
 800cae4:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800cae6:	4b2c      	ldr	r3, [pc, #176]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cae8:	2200      	movs	r2, #0
 800caea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800caec:	4b2a      	ldr	r3, [pc, #168]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800caee:	2201      	movs	r2, #1
 800caf0:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 800caf2:	4b29      	ldr	r3, [pc, #164]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800caf4:	2280      	movs	r2, #128	; 0x80
 800caf6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800caf8:	4b27      	ldr	r3, [pc, #156]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cafe:	4b26      	ldr	r3, [pc, #152]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800cb04:	4b24      	ldr	r3, [pc, #144]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800cb0a:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 800cb10:	4b21      	ldr	r3, [pc, #132]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cb16:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800cb18:	4b1f      	ldr	r3, [pc, #124]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800cb1e:	4b1e      	ldr	r3, [pc, #120]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800cb24:	4b1c      	ldr	r3, [pc, #112]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800cb2a:	4b1b      	ldr	r3, [pc, #108]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 800cb32:	4b19      	ldr	r3, [pc, #100]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb34:	2202      	movs	r2, #2
 800cb36:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800cb38:	4b17      	ldr	r3, [pc, #92]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb3e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 64;
 800cb40:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb42:	2240      	movs	r2, #64	; 0x40
 800cb44:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 32;
 800cb46:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb48:	2220      	movs	r2, #32
 800cb4a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800cb4c:	4b12      	ldr	r3, [pc, #72]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cb52:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800cb5a:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800cb60:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800cb66:	4b0c      	ldr	r3, [pc, #48]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 4;
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb6e:	2204      	movs	r2, #4
 800cb70:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800cb72:	4b09      	ldr	r3, [pc, #36]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb78:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800cb7a:	4807      	ldr	r0, [pc, #28]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb7c:	f7fe fff8 	bl	800bb70 <HAL_SAI_Init>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 800cb86:	f000 f92e 	bl	800cde6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */
  hsai_BlockA4.Ack = 0;
 800cb8a:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <MX_SAI4_Init+0xbc>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* USER CODE END SAI4_Init 2 */

}
 800cb92:	bf00      	nop
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	240194cc 	.word	0x240194cc
 800cb9c:	58005404 	.word	0x58005404

0800cba0 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800cba6:	4b0a      	ldr	r3, [pc, #40]	; (800cbd0 <MX_BDMA_Init+0x30>)
 800cba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbac:	4a08      	ldr	r2, [pc, #32]	; (800cbd0 <MX_BDMA_Init+0x30>)
 800cbae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cbb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cbb6:	4b06      	ldr	r3, [pc, #24]	; (800cbd0 <MX_BDMA_Init+0x30>)
 800cbb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbc0:	607b      	str	r3, [r7, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]

}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	58024400 	.word	0x58024400

0800cbd4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cbda:	4b33      	ldr	r3, [pc, #204]	; (800cca8 <MX_DMA_Init+0xd4>)
 800cbdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cbe0:	4a31      	ldr	r2, [pc, #196]	; (800cca8 <MX_DMA_Init+0xd4>)
 800cbe2:	f043 0302 	orr.w	r3, r3, #2
 800cbe6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cbea:	4b2f      	ldr	r3, [pc, #188]	; (800cca8 <MX_DMA_Init+0xd4>)
 800cbec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	607b      	str	r3, [r7, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800cbf8:	4b2b      	ldr	r3, [pc, #172]	; (800cca8 <MX_DMA_Init+0xd4>)
 800cbfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cbfe:	4a2a      	ldr	r2, [pc, #168]	; (800cca8 <MX_DMA_Init+0xd4>)
 800cc00:	f043 0301 	orr.w	r3, r3, #1
 800cc04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cc08:	4b27      	ldr	r3, [pc, #156]	; (800cca8 <MX_DMA_Init+0xd4>)
 800cc0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800cc16:	4b25      	ldr	r3, [pc, #148]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc18:	4a25      	ldr	r2, [pc, #148]	; (800ccb0 <MX_DMA_Init+0xdc>)
 800cc1a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 800cc1c:	4b23      	ldr	r3, [pc, #140]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800cc22:	4b22      	ldr	r3, [pc, #136]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc24:	2280      	movs	r2, #128	; 0x80
 800cc26:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800cc28:	4b20      	ldr	r3, [pc, #128]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc2e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800cc30:	4b1e      	ldr	r3, [pc, #120]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc36:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cc38:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc3e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cc46:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800cc48:	4b18      	ldr	r3, [pc, #96]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800cc4e:	4b17      	ldr	r3, [pc, #92]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cc54:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800cc56:	4b15      	ldr	r3, [pc, #84]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc58:	2204      	movs	r2, #4
 800cc5a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800cc5c:	4b13      	ldr	r3, [pc, #76]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc5e:	2203      	movs	r2, #3
 800cc60:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800cc62:	4b12      	ldr	r3, [pc, #72]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800cc68:	4b10      	ldr	r3, [pc, #64]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800cc6e:	480f      	ldr	r0, [pc, #60]	; (800ccac <MX_DMA_Init+0xd8>)
 800cc70:	f7f7 f83a 	bl	8003ce8 <HAL_DMA_Init>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d001      	beq.n	800cc7e <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 800cc7a:	f000 f8b4 	bl	800cde6 <Error_Handler>

  // Register some callbacks for the DMA
//    HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_HALFCPLT_CB_ID, &FYDP_SAI4_RxHalfCallback);
  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2100      	movs	r1, #0
 800cc82:	200c      	movs	r0, #12
 800cc84:	f7f6 fe87 	bl	8003996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800cc88:	200c      	movs	r0, #12
 800cc8a:	f7f6 fe9e 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2100      	movs	r1, #0
 800cc92:	2066      	movs	r0, #102	; 0x66
 800cc94:	f7f6 fe7f 	bl	8003996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800cc98:	2066      	movs	r0, #102	; 0x66
 800cc9a:	f7f6 fe96 	bl	80039ca <HAL_NVIC_EnableIRQ>

}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	58024400 	.word	0x58024400
 800ccac:	24019390 	.word	0x24019390
 800ccb0:	40020410 	.word	0x40020410

0800ccb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b08a      	sub	sp, #40	; 0x28
 800ccb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccba:	f107 0314 	add.w	r3, r7, #20
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	605a      	str	r2, [r3, #4]
 800ccc4:	609a      	str	r2, [r3, #8]
 800ccc6:	60da      	str	r2, [r3, #12]
 800ccc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccca:	4b2e      	ldr	r3, [pc, #184]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccd0:	4a2c      	ldr	r2, [pc, #176]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800ccd2:	f043 0302 	orr.w	r3, r3, #2
 800ccd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ccda:	4b2a      	ldr	r3, [pc, #168]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800ccdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cce0:	f003 0302 	and.w	r3, r3, #2
 800cce4:	613b      	str	r3, [r7, #16]
 800cce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cce8:	4b26      	ldr	r3, [pc, #152]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800ccea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccee:	4a25      	ldr	r2, [pc, #148]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800ccf0:	f043 0301 	orr.w	r3, r3, #1
 800ccf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ccf8:	4b22      	ldr	r3, [pc, #136]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800ccfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cd06:	4b1f      	ldr	r3, [pc, #124]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd0c:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd0e:	f043 0310 	orr.w	r3, r3, #16
 800cd12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cd16:	4b1b      	ldr	r3, [pc, #108]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd1c:	f003 0310 	and.w	r3, r3, #16
 800cd20:	60bb      	str	r3, [r7, #8]
 800cd22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd24:	4b17      	ldr	r3, [pc, #92]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd2a:	4a16      	ldr	r2, [pc, #88]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd2c:	f043 0308 	orr.w	r3, r3, #8
 800cd30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cd34:	4b13      	ldr	r3, [pc, #76]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd3a:	f003 0308 	and.w	r3, r3, #8
 800cd3e:	607b      	str	r3, [r7, #4]
 800cd40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cd42:	4b10      	ldr	r3, [pc, #64]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd48:	4a0e      	ldr	r2, [pc, #56]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd4a:	f043 0320 	orr.w	r3, r3, #32
 800cd4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cd52:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <MX_GPIO_Init+0xd0>)
 800cd54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd58:	f003 0320 	and.w	r3, r3, #32
 800cd5c:	603b      	str	r3, [r7, #0]
 800cd5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cd60:	2301      	movs	r3, #1
 800cd62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800cd68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd6e:	f107 0314 	add.w	r3, r7, #20
 800cd72:	4619      	mov	r1, r3
 800cd74:	4804      	ldr	r0, [pc, #16]	; (800cd88 <MX_GPIO_Init+0xd4>)
 800cd76:	f7f9 fdb9 	bl	80068ec <HAL_GPIO_Init>

}
 800cd7a:	bf00      	nop
 800cd7c:	3728      	adds	r7, #40	; 0x28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	58024400 	.word	0x58024400
 800cd88:	58021000 	.word	0x58021000

0800cd8c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800cd92:	463b      	mov	r3, r7
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	605a      	str	r2, [r3, #4]
 800cd9a:	609a      	str	r2, [r3, #8]
 800cd9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800cd9e:	f7f6 fe3d 	bl	8003a1c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cda2:	2301      	movs	r3, #1
 800cda4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800cdaa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800cdae:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800cdb0:	2310      	movs	r3, #16
 800cdb2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cdd0:	463b      	mov	r3, r7
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7f6 fe5a 	bl	8003a8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 800cdd8:	2006      	movs	r0, #6
 800cdda:	f7f6 fe37 	bl	8003a4c <HAL_MPU_Enable>

}
 800cdde:	bf00      	nop
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cde6:	b480      	push	{r7}
 800cde8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800cdea:	b672      	cpsid	i
}
 800cdec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800cdee:	e7fe      	b.n	800cdee <Error_Handler+0x8>

0800cdf0 <AudioPlay_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioPlay_demo (void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
  uint32_t *AudioFreq_ptr;
  uwVolume = 70;
 800cdf6:	4b1b      	ldr	r3, [pc, #108]	; (800ce64 <AudioPlay_demo+0x74>)
 800cdf8:	2246      	movs	r2, #70	; 0x46
 800cdfa:	601a      	str	r2, [r3, #0]

#ifdef USE_SAI_INSTANCE
  AudioInstance = 0;
 800cdfc:	4b1a      	ldr	r3, [pc, #104]	; (800ce68 <AudioPlay_demo+0x78>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
  AudioFreq_ptr = &AudioFreq[5]; /* 16K*/
 800ce02:	4b1a      	ldr	r3, [pc, #104]	; (800ce6c <AudioPlay_demo+0x7c>)
 800ce04:	607b      	str	r3, [r7, #4]
  AudioInstance = 1;
  AudioFreq_ptr = &AudioFreq[0]; /* 96K*/
#endif

//  Audio_SetHint(0);
  AudioPlayInit->Device = AUDIO_OUT_DEVICE_HEADPHONE;
 800ce06:	4b1a      	ldr	r3, [pc, #104]	; (800ce70 <AudioPlay_demo+0x80>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	601a      	str	r2, [r3, #0]
  AudioPlayInit->ChannelsNbr = 2;
 800ce0e:	4b18      	ldr	r3, [pc, #96]	; (800ce70 <AudioPlay_demo+0x80>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2202      	movs	r2, #2
 800ce14:	60da      	str	r2, [r3, #12]
  AudioPlayInit->SampleRate = AUDIO_FREQUENCY_16K;
 800ce16:	4b16      	ldr	r3, [pc, #88]	; (800ce70 <AudioPlay_demo+0x80>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800ce1e:	605a      	str	r2, [r3, #4]
  AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 800ce20:	4b13      	ldr	r3, [pc, #76]	; (800ce70 <AudioPlay_demo+0x80>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2210      	movs	r2, #16
 800ce26:	609a      	str	r2, [r3, #8]
  AudioPlayInit->Volume = uwVolume;
 800ce28:	4b11      	ldr	r3, [pc, #68]	; (800ce70 <AudioPlay_demo+0x80>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a0d      	ldr	r2, [pc, #52]	; (800ce64 <AudioPlay_demo+0x74>)
 800ce2e:	6812      	ldr	r2, [r2, #0]
 800ce30:	611a      	str	r2, [r3, #16]


  if(BSP_AUDIO_OUT_Init(AudioInstance, AudioPlayInit) != 0)
 800ce32:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <AudioPlay_demo+0x78>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a0e      	ldr	r2, [pc, #56]	; (800ce70 <AudioPlay_demo+0x80>)
 800ce38:	6812      	ldr	r2, [r2, #0]
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7f5 fa49 	bl	80022d4 <BSP_AUDIO_OUT_Init>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d108      	bne.n	800ce5a <AudioPlay_demo+0x6a>
    Start playing the file from a circular buffer, once the DMA is enabled, it is
    always in running state. Application has to fill the buffer with the audio data
    using Transfer complete and/or half transfer complete interrupts callbacks
    (BSP_AUDIO_OUT_TransferComplete_CallBack() or BSP_AUDIO_OUT_HalfTransfer_CallBack()...
    */
    AUDIO_Start((uint32_t *)audio_wav + 11, (uint32_t)AUDIO_FILE_SIZE);
 800ce48:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <AudioPlay_demo+0x84>)
 800ce4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 f812 	bl	800ce78 <AUDIO_Start>

    /* Infinite loop */
    while (1)
    {
      /* IMPORTANT: AUDIO_Process() should be called within a periodic process */
      AUDIO_Process();
 800ce54:	f000 f852 	bl	800cefc <AUDIO_Process>
 800ce58:	e7fc      	b.n	800ce54 <AudioPlay_demo+0x64>
    }
    }
  }
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	2400045c 	.word	0x2400045c
 800ce68:	24019220 	.word	0x24019220
 800ce6c:	24000474 	.word	0x24000474
 800ce70:	2401942c 	.word	0x2401942c
 800ce74:	2400d238 	.word	0x2400d238

0800ce78 <AUDIO_Start>:
  * @brief  Starts Audio streaming.
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_Start(uint32_t *psrc_address, uint32_t file_size)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;

  buffer_ctl.state = BUFFER_OFFSET_NONE;
 800ce82:	4a1a      	ldr	r2, [pc, #104]	; (800ceec <AUDIO_Start+0x74>)
 800ce84:	f244 0304 	movw	r3, #16388	; 0x4004
 800ce88:	4413      	add	r3, r2
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
  buffer_ctl.AudioFileSize = file_size;
 800ce8e:	4a17      	ldr	r2, [pc, #92]	; (800ceec <AUDIO_Start+0x74>)
 800ce90:	f244 0308 	movw	r3, #16392	; 0x4008
 800ce94:	4413      	add	r3, r2
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	601a      	str	r2, [r3, #0]
  buffer_ctl.SrcAddress = psrc_address;
 800ce9a:	4a14      	ldr	r2, [pc, #80]	; (800ceec <AUDIO_Start+0x74>)
 800ce9c:	f244 030c 	movw	r3, #16396	; 0x400c
 800cea0:	4413      	add	r3, r2
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	601a      	str	r2, [r3, #0]

  bytesread = GetData( (void *)psrc_address,
 800cea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceaa:	4a11      	ldr	r2, [pc, #68]	; (800cef0 <AUDIO_Start+0x78>)
 800ceac:	2100      	movs	r1, #0
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f946 	bl	800d140 <GetData>
 800ceb4:	60f8      	str	r0, [r7, #12]
                       0,
                       (uint8_t*)&PlayBuffer[0],
                       2*AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d011      	beq.n	800cee0 <AUDIO_Start+0x68>
  {
    BSP_AUDIO_OUT_Play(AudioInstance, (uint8_t *)PlayBuffer, 2*AUDIO_BUFFER_SIZE);
 800cebc:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <AUDIO_Start+0x7c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cec4:	490a      	ldr	r1, [pc, #40]	; (800cef0 <AUDIO_Start+0x78>)
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7f5 fbec 	bl	80026a4 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <AUDIO_Start+0x80>)
 800cece:	2202      	movs	r2, #2
 800ced0:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 800ced2:	4b06      	ldr	r3, [pc, #24]	; (800ceec <AUDIO_Start+0x74>)
 800ced4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	601a      	str	r2, [r3, #0]
    return AUDIO_ERROR_NONE;
 800cedc:	2300      	movs	r3, #0
 800cede:	e000      	b.n	800cee2 <AUDIO_Start+0x6a>
  }
  return AUDIO_ERROR_IO;
 800cee0:	2302      	movs	r3, #2
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	2401520c 	.word	0x2401520c
 800cef0:	24019678 	.word	0x24019678
 800cef4:	24019220 	.word	0x24019220
 800cef8:	2401921c 	.word	0x2401921c

0800cefc <AUDIO_Process>:
  * @brief  Manages Audio process.
  * @param  None
  * @retval Audio error
  */
uint8_t AUDIO_Process(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b092      	sub	sp, #72	; 0x48
 800cf00:	af00      	add	r7, sp, #0
  uint32_t bytesread;
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  switch(audio_state)
 800cf08:	4b88      	ldr	r3, [pc, #544]	; (800d12c <AUDIO_Process+0x230>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	f040 8102 	bne.w	800d116 <AUDIO_Process+0x21a>
  {
  case AUDIO_STATE_PLAYING:

    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 800cf12:	4b87      	ldr	r3, [pc, #540]	; (800d130 <AUDIO_Process+0x234>)
 800cf14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	4985      	ldr	r1, [pc, #532]	; (800d130 <AUDIO_Process+0x234>)
 800cf1c:	f244 0308 	movw	r3, #16392	; 0x4008
 800cf20:	440b      	add	r3, r1
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d307      	bcc.n	800cf38 <AUDIO_Process+0x3c>
    {
      /* Play audio sample again ... */
      buffer_ctl.fptr = 0;
 800cf28:	4b81      	ldr	r3, [pc, #516]	; (800d130 <AUDIO_Process+0x234>)
 800cf2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]
      error_state = AUDIO_ERROR_EOF;
 800cf32:	2303      	movs	r3, #3
 800cf34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    /* 1st half buffer played; so fill it and continue playing from bottom*/
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 800cf38:	4a7d      	ldr	r2, [pc, #500]	; (800d130 <AUDIO_Process+0x234>)
 800cf3a:	f244 0304 	movw	r3, #16388	; 0x4004
 800cf3e:	4413      	add	r3, r2
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d16f      	bne.n	800d026 <AUDIO_Process+0x12a>
 800cf46:	4b7b      	ldr	r3, [pc, #492]	; (800d134 <AUDIO_Process+0x238>)
 800cf48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf4e:	63bb      	str	r3, [r7, #56]	; 0x38
    if ( dsize > 0 ) { 
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	dd1d      	ble.n	800cf92 <AUDIO_Process+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800cf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf58:	f003 021f 	and.w	r2, r3, #31
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	4413      	add	r3, r2
 800cf60:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800cf62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf64:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dsb 0xF":::"memory");
 800cf66:	f3bf 8f4f 	dsb	sy
}
 800cf6a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800cf6c:	4a72      	ldr	r2, [pc, #456]	; (800d138 <AUDIO_Process+0x23c>)
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800cf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf76:	3320      	adds	r3, #32
 800cf78:	633b      	str	r3, [r7, #48]	; 0x30
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800cf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7c:	3b20      	subs	r3, #32
 800cf7e:	637b      	str	r3, [r7, #52]	; 0x34
      } while ( op_size > 0 );
 800cf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dcf2      	bgt.n	800cf6c <AUDIO_Process+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 800cf86:	f3bf 8f4f 	dsb	sy
}
 800cf8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf8c:	f3bf 8f6f 	isb	sy
}
 800cf90:	bf00      	nop
}
 800cf92:	bf00      	nop
    {
      SCB_InvalidateDCache_by_Addr((uint32_t *)&PlayBuffer[0], AUDIO_BUFFER_SIZE);
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 800cf94:	4a66      	ldr	r2, [pc, #408]	; (800d130 <AUDIO_Process+0x234>)
 800cf96:	f244 030c 	movw	r3, #16396	; 0x400c
 800cf9a:	4413      	add	r3, r2
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	4b64      	ldr	r3, [pc, #400]	; (800d130 <AUDIO_Process+0x234>)
 800cfa0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800cfa4:	6819      	ldr	r1, [r3, #0]
 800cfa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfaa:	4a62      	ldr	r2, [pc, #392]	; (800d134 <AUDIO_Process+0x238>)
 800cfac:	f000 f8c8 	bl	800d140 <GetData>
 800cfb0:	6438      	str	r0, [r7, #64]	; 0x40
                          buffer_ctl.fptr,
                          (uint8_t*)&PlayBuffer[0],
                          AUDIO_BUFFER_SIZE );

      if( bytesread >0)
 800cfb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d036      	beq.n	800d026 <AUDIO_Process+0x12a>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 800cfb8:	4a5d      	ldr	r2, [pc, #372]	; (800d130 <AUDIO_Process+0x234>)
 800cfba:	f244 0304 	movw	r3, #16388	; 0x4004
 800cfbe:	4413      	add	r3, r2
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
        buffer_ctl.fptr += bytesread;
 800cfc4:	4b5a      	ldr	r3, [pc, #360]	; (800d130 <AUDIO_Process+0x234>)
 800cfc6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfce:	441a      	add	r2, r3
 800cfd0:	4b57      	ldr	r3, [pc, #348]	; (800d130 <AUDIO_Process+0x234>)
 800cfd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	4b56      	ldr	r3, [pc, #344]	; (800d134 <AUDIO_Process+0x238>)
 800cfda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfe0:	62bb      	str	r3, [r7, #40]	; 0x28
    if ( dsize > 0 ) { 
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd1d      	ble.n	800d024 <AUDIO_Process+0x128>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	f003 021f 	and.w	r2, r3, #31
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	4413      	add	r3, r2
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800cff8:	f3bf 8f4f 	dsb	sy
}
 800cffc:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800cffe:	4a4e      	ldr	r2, [pc, #312]	; (800d138 <AUDIO_Process+0x23c>)
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	3320      	adds	r3, #32
 800d00a:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	3b20      	subs	r3, #32
 800d010:	627b      	str	r3, [r7, #36]	; 0x24
      } while ( op_size > 0 );
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	2b00      	cmp	r3, #0
 800d016:	dcf2      	bgt.n	800cffe <AUDIO_Process+0x102>
  __ASM volatile ("dsb 0xF":::"memory");
 800d018:	f3bf 8f4f 	dsb	sy
}
 800d01c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d01e:	f3bf 8f6f 	isb	sy
}
 800d022:	bf00      	nop
}
 800d024:	bf00      	nop
        SCB_CleanDCache_by_Addr((uint32_t*)&PlayBuffer[0], AUDIO_BUFFER_SIZE);
      }
    }

    /* 2nd half buffer played; so fill it and continue playing from top */
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 800d026:	4a42      	ldr	r2, [pc, #264]	; (800d130 <AUDIO_Process+0x234>)
 800d028:	f244 0304 	movw	r3, #16388	; 0x4004
 800d02c:	4413      	add	r3, r2
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b02      	cmp	r3, #2
 800d032:	d174      	bne.n	800d11e <AUDIO_Process+0x222>
 800d034:	4b41      	ldr	r3, [pc, #260]	; (800d13c <AUDIO_Process+0x240>)
 800d036:	61fb      	str	r3, [r7, #28]
 800d038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d03c:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dd1d      	ble.n	800d080 <AUDIO_Process+0x184>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	f003 021f 	and.w	r2, r3, #31
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	4413      	add	r3, r2
 800d04e:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d054:	f3bf 8f4f 	dsb	sy
}
 800d058:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800d05a:	4a37      	ldr	r2, [pc, #220]	; (800d138 <AUDIO_Process+0x23c>)
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3320      	adds	r3, #32
 800d066:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	3b20      	subs	r3, #32
 800d06c:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dcf2      	bgt.n	800d05a <AUDIO_Process+0x15e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d074:	f3bf 8f4f 	dsb	sy
}
 800d078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d07a:	f3bf 8f6f 	isb	sy
}
 800d07e:	bf00      	nop
}
 800d080:	bf00      	nop
    {
      SCB_InvalidateDCache_by_Addr((uint32_t *)&PlayBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE);
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 800d082:	4a2b      	ldr	r2, [pc, #172]	; (800d130 <AUDIO_Process+0x234>)
 800d084:	f244 030c 	movw	r3, #16396	; 0x400c
 800d088:	4413      	add	r3, r2
 800d08a:	6818      	ldr	r0, [r3, #0]
 800d08c:	4b28      	ldr	r3, [pc, #160]	; (800d130 <AUDIO_Process+0x234>)
 800d08e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d092:	6819      	ldr	r1, [r3, #0]
 800d094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d098:	4a28      	ldr	r2, [pc, #160]	; (800d13c <AUDIO_Process+0x240>)
 800d09a:	f000 f851 	bl	800d140 <GetData>
 800d09e:	6438      	str	r0, [r7, #64]	; 0x40
                          buffer_ctl.fptr,
                          (uint8_t*)&PlayBuffer[AUDIO_BUFFER_SIZE /2],
                          AUDIO_BUFFER_SIZE );
      if( bytesread > 0)
 800d0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d03b      	beq.n	800d11e <AUDIO_Process+0x222>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 800d0a6:	4a22      	ldr	r2, [pc, #136]	; (800d130 <AUDIO_Process+0x234>)
 800d0a8:	f244 0304 	movw	r3, #16388	; 0x4004
 800d0ac:	4413      	add	r3, r2
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	701a      	strb	r2, [r3, #0]
        buffer_ctl.fptr += bytesread;
 800d0b2:	4b1f      	ldr	r3, [pc, #124]	; (800d130 <AUDIO_Process+0x234>)
 800d0b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0bc:	441a      	add	r2, r3
 800d0be:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <AUDIO_Process+0x234>)
 800d0c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d0c4:	601a      	str	r2, [r3, #0]
 800d0c6:	4b1d      	ldr	r3, [pc, #116]	; (800d13c <AUDIO_Process+0x240>)
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d0ce:	60bb      	str	r3, [r7, #8]
    if ( dsize > 0 ) { 
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dd1d      	ble.n	800d112 <AUDIO_Process+0x216>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f003 021f 	and.w	r2, r3, #31
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4413      	add	r3, r2
 800d0e0:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800d0e6:	f3bf 8f4f 	dsb	sy
}
 800d0ea:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800d0ec:	4a12      	ldr	r2, [pc, #72]	; (800d138 <AUDIO_Process+0x23c>)
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	3320      	adds	r3, #32
 800d0f8:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3b20      	subs	r3, #32
 800d0fe:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	dcf2      	bgt.n	800d0ec <AUDIO_Process+0x1f0>
  __ASM volatile ("dsb 0xF":::"memory");
 800d106:	f3bf 8f4f 	dsb	sy
}
 800d10a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d10c:	f3bf 8f6f 	isb	sy
}
 800d110:	bf00      	nop
}
 800d112:	bf00      	nop

        /* Clean Data Cache to update the content of the SRAM */
        SCB_CleanDCache_by_Addr((uint32_t*)&PlayBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE);
      }
    }
    break;
 800d114:	e003      	b.n	800d11e <AUDIO_Process+0x222>

  default:
    error_state = AUDIO_ERROR_NOTREADY;
 800d116:	2301      	movs	r3, #1
 800d118:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    break;
 800d11c:	e000      	b.n	800d120 <AUDIO_Process+0x224>
    break;
 800d11e:	bf00      	nop
  }
  return (uint8_t) error_state;
 800d120:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d124:	4618      	mov	r0, r3
 800d126:	3748      	adds	r7, #72	; 0x48
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	2401921c 	.word	0x2401921c
 800d130:	2401520c 	.word	0x2401520c
 800d134:	24019678 	.word	0x24019678
 800d138:	e000ed00 	.word	0xe000ed00
 800d13c:	2401d678 	.word	0x2401d678

0800d140 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 800d140:	b480      	push	{r7}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 800d156:	e00c      	b.n	800d172 <GetData+0x32>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 800d158:	68ba      	ldr	r2, [r7, #8]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	4413      	add	r3, r2
 800d15e:	693a      	ldr	r2, [r7, #16]
 800d160:	441a      	add	r2, r3
 800d162:	6879      	ldr	r1, [r7, #4]
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	440b      	add	r3, r1
 800d168:	7812      	ldrb	r2, [r2, #0]
 800d16a:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	3301      	adds	r3, #1
 800d170:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	441a      	add	r2, r3
 800d178:	4908      	ldr	r1, [pc, #32]	; (800d19c <GetData+0x5c>)
 800d17a:	f244 0308 	movw	r3, #16392	; 0x4008
 800d17e:	440b      	add	r3, r1
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	429a      	cmp	r2, r3
 800d184:	d203      	bcs.n	800d18e <GetData+0x4e>
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d3e4      	bcc.n	800d158 <GetData+0x18>
  }
  return ReadDataNbr;
 800d18e:	697b      	ldr	r3, [r7, #20]
}
 800d190:	4618      	mov	r0, r3
 800d192:	371c      	adds	r7, #28
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	2401520c 	.word	0x2401520c

0800d1a0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  if(audio_state == AUDIO_STATE_PLAYING)
 800d1a8:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d105      	bne.n	800d1bc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x1c>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 800d1b0:	4a06      	ldr	r2, [pc, #24]	; (800d1cc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x2c>)
 800d1b2:	f244 0304 	movw	r3, #16388	; 0x4004
 800d1b6:	4413      	add	r3, r2
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	701a      	strb	r2, [r3, #0]
  }
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	2401921c 	.word	0x2401921c
 800d1cc:	2401520c 	.word	0x2401520c

0800d1d0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
//    return;
//  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800d1e8:	4b10      	ldr	r3, [pc, #64]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800d1f4:	4b0d      	ldr	r3, [pc, #52]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d1f6:	4a0e      	ldr	r2, [pc, #56]	; (800d230 <MX_PDM2PCM_Init+0x4c>)
 800d1f8:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800d1fa:	4b0c      	ldr	r3, [pc, #48]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800d200:	4b0a      	ldr	r3, [pc, #40]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d202:	2201      	movs	r2, #1
 800d204:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800d206:	4809      	ldr	r0, [pc, #36]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d208:	f002 f878 	bl	800f2fc <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800d20c:	4b09      	ldr	r3, [pc, #36]	; (800d234 <MX_PDM2PCM_Init+0x50>)
 800d20e:	2202      	movs	r2, #2
 800d210:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800d212:	4b08      	ldr	r3, [pc, #32]	; (800d234 <MX_PDM2PCM_Init+0x50>)
 800d214:	2210      	movs	r2, #16
 800d216:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800d218:	4b06      	ldr	r3, [pc, #24]	; (800d234 <MX_PDM2PCM_Init+0x50>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800d21e:	4905      	ldr	r1, [pc, #20]	; (800d234 <MX_PDM2PCM_Init+0x50>)
 800d220:	4802      	ldr	r0, [pc, #8]	; (800d22c <MX_PDM2PCM_Init+0x48>)
 800d222:	f002 f93b 	bl	800f49c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800d226:	bf00      	nop
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	24021680 	.word	0x24021680
 800d230:	7d70a3d6 	.word	0x7d70a3d6
 800d234:	24021678 	.word	0x24021678

0800d238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d23e:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <HAL_MspInit+0x30>)
 800d240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d244:	4a08      	ldr	r2, [pc, #32]	; (800d268 <HAL_MspInit+0x30>)
 800d246:	f043 0302 	orr.w	r3, r3, #2
 800d24a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d24e:	4b06      	ldr	r3, [pc, #24]	; (800d268 <HAL_MspInit+0x30>)
 800d250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	607b      	str	r3, [r7, #4]
 800d25a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	58024400 	.word	0x58024400

0800d26c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <HAL_CRC_MspInit+0x3c>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d10e      	bne.n	800d29c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800d27e:	4b0b      	ldr	r3, [pc, #44]	; (800d2ac <HAL_CRC_MspInit+0x40>)
 800d280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d284:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <HAL_CRC_MspInit+0x40>)
 800d286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d28a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d28e:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <HAL_CRC_MspInit+0x40>)
 800d290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d298:	60fb      	str	r3, [r7, #12]
 800d29a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800d29c:	bf00      	nop
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	58024c00 	.word	0x58024c00
 800d2ac:	58024400 	.word	0x58024400

0800d2b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b0b6      	sub	sp, #216	; 0xd8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	605a      	str	r2, [r3, #4]
 800d2c2:	609a      	str	r2, [r3, #8]
 800d2c4:	60da      	str	r2, [r3, #12]
 800d2c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2c8:	f107 0310 	add.w	r3, r7, #16
 800d2cc:	22b4      	movs	r2, #180	; 0xb4
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f002 fa21 	bl	800f718 <memset>
  if(hi2c->Instance==I2C4)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a29      	ldr	r2, [pc, #164]	; (800d380 <HAL_I2C_MspInit+0xd0>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d14a      	bne.n	800d376 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800d2e0:	2310      	movs	r3, #16
 800d2e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d2ea:	f107 0310 	add.w	r3, r7, #16
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fc fa2c 	bl	800974c <HAL_RCCEx_PeriphCLKConfig>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800d2fa:	f7ff fd74 	bl	800cde6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2fe:	4b21      	ldr	r3, [pc, #132]	; (800d384 <HAL_I2C_MspInit+0xd4>)
 800d300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d304:	4a1f      	ldr	r2, [pc, #124]	; (800d384 <HAL_I2C_MspInit+0xd4>)
 800d306:	f043 0302 	orr.w	r3, r3, #2
 800d30a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d30e:	4b1d      	ldr	r3, [pc, #116]	; (800d384 <HAL_I2C_MspInit+0xd4>)
 800d310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d314:	f003 0302 	and.w	r3, r3, #2
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d31c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d324:	2312      	movs	r3, #18
 800d326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d330:	2300      	movs	r3, #0
 800d332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800d336:	2306      	movs	r3, #6
 800d338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d33c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d340:	4619      	mov	r1, r3
 800d342:	4811      	ldr	r0, [pc, #68]	; (800d388 <HAL_I2C_MspInit+0xd8>)
 800d344:	f7f9 fad2 	bl	80068ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <HAL_I2C_MspInit+0xd4>)
 800d34a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d34e:	4a0d      	ldr	r2, [pc, #52]	; (800d384 <HAL_I2C_MspInit+0xd4>)
 800d350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d354:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d358:	4b0a      	ldr	r3, [pc, #40]	; (800d384 <HAL_I2C_MspInit+0xd4>)
 800d35a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d362:	60bb      	str	r3, [r7, #8]
 800d364:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800d366:	2200      	movs	r2, #0
 800d368:	2100      	movs	r1, #0
 800d36a:	2060      	movs	r0, #96	; 0x60
 800d36c:	f7f6 fb13 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800d370:	2060      	movs	r0, #96	; 0x60
 800d372:	f7f6 fb2a 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800d376:	bf00      	nop
 800d378:	37d8      	adds	r7, #216	; 0xd8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	58001c00 	.word	0x58001c00
 800d384:	58024400 	.word	0x58024400
 800d388:	58020400 	.word	0x58020400

0800d38c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a0d      	ldr	r2, [pc, #52]	; (800d3d0 <HAL_I2C_MspDeInit+0x44>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d114      	bne.n	800d3c8 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800d39e:	4b0d      	ldr	r3, [pc, #52]	; (800d3d4 <HAL_I2C_MspDeInit+0x48>)
 800d3a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d3a4:	4a0b      	ldr	r2, [pc, #44]	; (800d3d4 <HAL_I2C_MspDeInit+0x48>)
 800d3a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800d3ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3b2:	4809      	ldr	r0, [pc, #36]	; (800d3d8 <HAL_I2C_MspDeInit+0x4c>)
 800d3b4:	f7f9 fc42 	bl	8006c3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800d3b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3bc:	4806      	ldr	r0, [pc, #24]	; (800d3d8 <HAL_I2C_MspDeInit+0x4c>)
 800d3be:	f7f9 fc3d 	bl	8006c3c <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 800d3c2:	2060      	movs	r0, #96	; 0x60
 800d3c4:	f7f6 fb0f 	bl	80039e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800d3c8:	bf00      	nop
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	58001c00 	.word	0x58001c00
 800d3d4:	58024400 	.word	0x58024400
 800d3d8:	58020400 	.word	0x58020400

0800d3dc <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b0ba      	sub	sp, #232	; 0xe8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d3e4:	f107 0310 	add.w	r3, r7, #16
 800d3e8:	22b4      	movs	r2, #180	; 0xb4
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f002 f993 	bl	800f718 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4aaa      	ldr	r2, [pc, #680]	; (800d6a0 <HAL_SAI_MspInit+0x2c4>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	f040 80a5 	bne.w	800d548 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800d3fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d402:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800d404:	2300      	movs	r3, #0
 800d406:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d408:	f107 0310 	add.w	r3, r7, #16
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fc f99d 	bl	800974c <HAL_RCCEx_PeriphCLKConfig>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d001      	beq.n	800d41c <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800d418:	f7ff fce5 	bl	800cde6 <Error_Handler>
    }

      if (SAI1_client == 0)
 800d41c:	4ba1      	ldr	r3, [pc, #644]	; (800d6a4 <HAL_SAI_MspInit+0x2c8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10e      	bne.n	800d442 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d424:	4ba0      	ldr	r3, [pc, #640]	; (800d6a8 <HAL_SAI_MspInit+0x2cc>)
 800d426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d42a:	4a9f      	ldr	r2, [pc, #636]	; (800d6a8 <HAL_SAI_MspInit+0x2cc>)
 800d42c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d430:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d434:	4b9c      	ldr	r3, [pc, #624]	; (800d6a8 <HAL_SAI_MspInit+0x2cc>)
 800d436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d43a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800d442:	4b98      	ldr	r3, [pc, #608]	; (800d6a4 <HAL_SAI_MspInit+0x2c8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3301      	adds	r3, #1
 800d448:	4a96      	ldr	r2, [pc, #600]	; (800d6a4 <HAL_SAI_MspInit+0x2c8>)
 800d44a:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d44c:	2308      	movs	r3, #8
 800d44e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d452:	2302      	movs	r3, #2
 800d454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d458:	2300      	movs	r3, #0
 800d45a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d45e:	2300      	movs	r3, #0
 800d460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d464:	2306      	movs	r3, #6
 800d466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d46a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d46e:	4619      	mov	r1, r3
 800d470:	488e      	ldr	r0, [pc, #568]	; (800d6ac <HAL_SAI_MspInit+0x2d0>)
 800d472:	f7f9 fa3b 	bl	80068ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d47a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d47e:	2302      	movs	r3, #2
 800d480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d484:	2300      	movs	r3, #0
 800d486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d48a:	2300      	movs	r3, #0
 800d48c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d490:	2306      	movs	r3, #6
 800d492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d496:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d49a:	4619      	mov	r1, r3
 800d49c:	4884      	ldr	r0, [pc, #528]	; (800d6b0 <HAL_SAI_MspInit+0x2d4>)
 800d49e:	f7f9 fa25 	bl	80068ec <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800d4a2:	4b84      	ldr	r3, [pc, #528]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4a4:	4a84      	ldr	r2, [pc, #528]	; (800d6b8 <HAL_SAI_MspInit+0x2dc>)
 800d4a6:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800d4a8:	4b82      	ldr	r3, [pc, #520]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4aa:	2258      	movs	r2, #88	; 0x58
 800d4ac:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d4ae:	4b81      	ldr	r3, [pc, #516]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4b0:	2240      	movs	r2, #64	; 0x40
 800d4b2:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800d4b4:	4b7f      	ldr	r3, [pc, #508]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800d4ba:	4b7e      	ldr	r3, [pc, #504]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4c0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d4c2:	4b7c      	ldr	r3, [pc, #496]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d4c8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d4ca:	4b7a      	ldr	r3, [pc, #488]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4d0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800d4d2:	4b78      	ldr	r3, [pc, #480]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4d8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800d4da:	4b76      	ldr	r3, [pc, #472]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d4e0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d4e2:	4b74      	ldr	r3, [pc, #464]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800d4e8:	4872      	ldr	r0, [pc, #456]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d4ea:	f7f6 fbfd 	bl	8003ce8 <HAL_DMA_Init>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 800d4f4:	f7ff fc77 	bl	800cde6 <Error_Handler>
    }
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800d4f8:	2306      	movs	r3, #6
 800d4fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800d4fe:	2300      	movs	r3, #0
 800d500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800d504:	2300      	movs	r3, #0
 800d506:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800d50a:	2301      	movs	r3, #1
 800d50c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800d510:	2301      	movs	r3, #1
 800d512:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800d516:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d51a:	4619      	mov	r1, r3
 800d51c:	4865      	ldr	r0, [pc, #404]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d51e:	f7f9 f8cd 	bl	80066bc <HAL_DMAEx_ConfigMuxSync>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 800d528:	f7ff fc5d 	bl	800cde6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a61      	ldr	r2, [pc, #388]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d534:	4a5f      	ldr	r2, [pc, #380]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a5d      	ldr	r2, [pc, #372]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d53e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800d542:	4a5c      	ldr	r2, [pc, #368]	; (800d6b4 <HAL_SAI_MspInit+0x2d8>)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a5b      	ldr	r2, [pc, #364]	; (800d6bc <HAL_SAI_MspInit+0x2e0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	f040 80a2 	bne.w	800d698 <HAL_SAI_MspInit+0x2bc>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800d554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d558:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d560:	f107 0310 	add.w	r3, r7, #16
 800d564:	4618      	mov	r0, r3
 800d566:	f7fc f8f1 	bl	800974c <HAL_RCCEx_PeriphCLKConfig>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 800d570:	f7ff fc39 	bl	800cde6 <Error_Handler>
    }

    if (SAI4_client == 0)
 800d574:	4b52      	ldr	r3, [pc, #328]	; (800d6c0 <HAL_SAI_MspInit+0x2e4>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10e      	bne.n	800d59a <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800d57c:	4b4a      	ldr	r3, [pc, #296]	; (800d6a8 <HAL_SAI_MspInit+0x2cc>)
 800d57e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d582:	4a49      	ldr	r2, [pc, #292]	; (800d6a8 <HAL_SAI_MspInit+0x2cc>)
 800d584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d588:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d58c:	4b46      	ldr	r3, [pc, #280]	; (800d6a8 <HAL_SAI_MspInit+0x2cc>)
 800d58e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d596:	60bb      	str	r3, [r7, #8]
 800d598:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800d59a:	4b49      	ldr	r3, [pc, #292]	; (800d6c0 <HAL_SAI_MspInit+0x2e4>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	4a47      	ldr	r2, [pc, #284]	; (800d6c0 <HAL_SAI_MspInit+0x2e4>)
 800d5a2:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800d5a4:	2330      	movs	r3, #48	; 0x30
 800d5a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800d5bc:	230a      	movs	r3, #10
 800d5be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d5c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4838      	ldr	r0, [pc, #224]	; (800d6ac <HAL_SAI_MspInit+0x2d0>)
 800d5ca:	f7f9 f98f 	bl	80068ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d5ce:	2340      	movs	r3, #64	; 0x40
 800d5d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d5ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4834      	ldr	r0, [pc, #208]	; (800d6c4 <HAL_SAI_MspInit+0x2e8>)
 800d5f4:	f7f9 f97a 	bl	80068ec <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800d5f8:	4b33      	ldr	r3, [pc, #204]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d5fa:	4a34      	ldr	r2, [pc, #208]	; (800d6cc <HAL_SAI_MspInit+0x2f0>)
 800d5fc:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800d5fe:	4b32      	ldr	r3, [pc, #200]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d600:	220f      	movs	r2, #15
 800d602:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d604:	4b30      	ldr	r3, [pc, #192]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d606:	2200      	movs	r2, #0
 800d608:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800d60a:	4b2f      	ldr	r3, [pc, #188]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800d610:	4b2d      	ldr	r3, [pc, #180]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d616:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800d618:	4b2b      	ldr	r3, [pc, #172]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d61a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d61e:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800d620:	4b29      	ldr	r3, [pc, #164]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d626:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800d628:	4b27      	ldr	r3, [pc, #156]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d62a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d62e:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800d630:	4b25      	ldr	r3, [pc, #148]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d632:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d636:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800d638:	4823      	ldr	r0, [pc, #140]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d63a:	f7f6 fb55 	bl	8003ce8 <HAL_DMA_Init>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 800d644:	f7ff fbcf 	bl	800cde6 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800d648:	230e      	movs	r3, #14
 800d64a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800d64e:	2300      	movs	r3, #0
 800d650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800d654:	2300      	movs	r3, #0
 800d656:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800d65a:	2301      	movs	r3, #1
 800d65c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800d660:	2301      	movs	r3, #1
 800d662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800d666:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d66a:	4619      	mov	r1, r3
 800d66c:	4816      	ldr	r0, [pc, #88]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d66e:	f7f9 f825 	bl	80066bc <HAL_DMAEx_ConfigMuxSync>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 800d678:	f7ff fbb5 	bl	800cde6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	4a12      	ldr	r2, [pc, #72]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d684:	4a10      	ldr	r2, [pc, #64]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a0e      	ldr	r2, [pc, #56]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d68e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800d692:	4a0d      	ldr	r2, [pc, #52]	; (800d6c8 <HAL_SAI_MspInit+0x2ec>)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800d698:	bf00      	nop
 800d69a:	37e8      	adds	r7, #232	; 0xe8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	40015824 	.word	0x40015824
 800d6a4:	24019224 	.word	0x24019224
 800d6a8:	58024400 	.word	0x58024400
 800d6ac:	58021000 	.word	0x58021000
 800d6b0:	58021400 	.word	0x58021400
 800d6b4:	24019600 	.word	0x24019600
 800d6b8:	40020028 	.word	0x40020028
 800d6bc:	58005404 	.word	0x58005404
 800d6c0:	24019228 	.word	0x24019228
 800d6c4:	58020c00 	.word	0x58020c00
 800d6c8:	24019578 	.word	0x24019578
 800d6cc:	5802541c 	.word	0x5802541c

0800d6d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d6d4:	e7fe      	b.n	800d6d4 <NMI_Handler+0x4>

0800d6d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d6da:	e7fe      	b.n	800d6da <HardFault_Handler+0x4>

0800d6dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d6e0:	e7fe      	b.n	800d6e0 <MemManage_Handler+0x4>

0800d6e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d6e2:	b480      	push	{r7}
 800d6e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d6e6:	e7fe      	b.n	800d6e6 <BusFault_Handler+0x4>

0800d6e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d6ec:	e7fe      	b.n	800d6ec <UsageFault_Handler+0x4>

0800d6ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d6f2:	bf00      	nop
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d700:	bf00      	nop
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d70a:	b480      	push	{r7}
 800d70c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d70e:	bf00      	nop
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d71c:	f7f6 f80c 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d720:	bf00      	nop
 800d722:	bd80      	pop	{r7, pc}

0800d724 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 800d728:	2000      	movs	r0, #0
 800d72a:	f7f4 fd97 	bl	800225c <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d72e:	2001      	movs	r0, #1
 800d730:	f7f9 fb9f 	bl	8006e72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 800d734:	bf00      	nop
 800d736:	bd80      	pop	{r7, pc}

0800d738 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800d73c:	4802      	ldr	r0, [pc, #8]	; (800d748 <DMA1_Stream1_IRQHandler+0x10>)
 800d73e:	f7f7 fc91 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800d742:	bf00      	nop
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	24019600 	.word	0x24019600

0800d74c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800d750:	4803      	ldr	r0, [pc, #12]	; (800d760 <DMA2_Stream0_IRQHandler+0x14>)
 800d752:	f7f7 fc87 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 800d756:	2000      	movs	r0, #0
 800d758:	f7f4 fd80 	bl	800225c <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d75c:	bf00      	nop
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	24019390 	.word	0x24019390

0800d764 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800d768:	4802      	ldr	r0, [pc, #8]	; (800d774 <I2C4_ER_IRQHandler+0x10>)
 800d76a:	f7f9 fe95 	bl	8007498 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800d76e:	bf00      	nop
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	24019334 	.word	0x24019334

0800d778 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800d77c:	4802      	ldr	r0, [pc, #8]	; (800d788 <DMAMUX1_OVR_IRQHandler+0x10>)
 800d77e:	f7f9 f863 	bl	8006848 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800d782:	bf00      	nop
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	24019600 	.word	0x24019600

0800d78c <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800d790:	4802      	ldr	r0, [pc, #8]	; (800d79c <DMAMUX2_OVR_IRQHandler+0x10>)
 800d792:	f7f9 f859 	bl	8006848 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800d796:	bf00      	nop
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	24019578 	.word	0x24019578

0800d7a0 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800d7a4:	4803      	ldr	r0, [pc, #12]	; (800d7b4 <BDMA_Channel1_IRQHandler+0x14>)
 800d7a6:	f7f7 fc5d 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	f7f4 fd56 	bl	800225c <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800d7b0:	bf00      	nop
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	24019578 	.word	0x24019578

0800d7b8 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//	HAL_EXTI_GenerateSWI(&hexti0);
	hsai->Ack = 1;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_SAI_TxCpltCallback>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UpdatePointer = NUM_BYTES/2;
 800d7dc:	4b04      	ldr	r3, [pc, #16]	; (800d7f0 <HAL_SAI_TxCpltCallback+0x1c>)
 800d7de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d7e2:	801a      	strh	r2, [r3, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	24000480 	.word	0x24000480

0800d7f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d7f8:	4b32      	ldr	r3, [pc, #200]	; (800d8c4 <SystemInit+0xd0>)
 800d7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7fe:	4a31      	ldr	r2, [pc, #196]	; (800d8c4 <SystemInit+0xd0>)
 800d800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d808:	4b2f      	ldr	r3, [pc, #188]	; (800d8c8 <SystemInit+0xd4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 030f 	and.w	r3, r3, #15
 800d810:	2b06      	cmp	r3, #6
 800d812:	d807      	bhi.n	800d824 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d814:	4b2c      	ldr	r3, [pc, #176]	; (800d8c8 <SystemInit+0xd4>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f023 030f 	bic.w	r3, r3, #15
 800d81c:	4a2a      	ldr	r2, [pc, #168]	; (800d8c8 <SystemInit+0xd4>)
 800d81e:	f043 0307 	orr.w	r3, r3, #7
 800d822:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d824:	4b29      	ldr	r3, [pc, #164]	; (800d8cc <SystemInit+0xd8>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a28      	ldr	r2, [pc, #160]	; (800d8cc <SystemInit+0xd8>)
 800d82a:	f043 0301 	orr.w	r3, r3, #1
 800d82e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d830:	4b26      	ldr	r3, [pc, #152]	; (800d8cc <SystemInit+0xd8>)
 800d832:	2200      	movs	r2, #0
 800d834:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d836:	4b25      	ldr	r3, [pc, #148]	; (800d8cc <SystemInit+0xd8>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	4924      	ldr	r1, [pc, #144]	; (800d8cc <SystemInit+0xd8>)
 800d83c:	4b24      	ldr	r3, [pc, #144]	; (800d8d0 <SystemInit+0xdc>)
 800d83e:	4013      	ands	r3, r2
 800d840:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d842:	4b21      	ldr	r3, [pc, #132]	; (800d8c8 <SystemInit+0xd4>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f003 0308 	and.w	r3, r3, #8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d007      	beq.n	800d85e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d84e:	4b1e      	ldr	r3, [pc, #120]	; (800d8c8 <SystemInit+0xd4>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f023 030f 	bic.w	r3, r3, #15
 800d856:	4a1c      	ldr	r2, [pc, #112]	; (800d8c8 <SystemInit+0xd4>)
 800d858:	f043 0307 	orr.w	r3, r3, #7
 800d85c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d85e:	4b1b      	ldr	r3, [pc, #108]	; (800d8cc <SystemInit+0xd8>)
 800d860:	2200      	movs	r2, #0
 800d862:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800d864:	4b19      	ldr	r3, [pc, #100]	; (800d8cc <SystemInit+0xd8>)
 800d866:	2200      	movs	r2, #0
 800d868:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800d86a:	4b18      	ldr	r3, [pc, #96]	; (800d8cc <SystemInit+0xd8>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800d870:	4b16      	ldr	r3, [pc, #88]	; (800d8cc <SystemInit+0xd8>)
 800d872:	4a18      	ldr	r2, [pc, #96]	; (800d8d4 <SystemInit+0xe0>)
 800d874:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800d876:	4b15      	ldr	r3, [pc, #84]	; (800d8cc <SystemInit+0xd8>)
 800d878:	4a17      	ldr	r2, [pc, #92]	; (800d8d8 <SystemInit+0xe4>)
 800d87a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d87c:	4b13      	ldr	r3, [pc, #76]	; (800d8cc <SystemInit+0xd8>)
 800d87e:	4a17      	ldr	r2, [pc, #92]	; (800d8dc <SystemInit+0xe8>)
 800d880:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d882:	4b12      	ldr	r3, [pc, #72]	; (800d8cc <SystemInit+0xd8>)
 800d884:	2200      	movs	r2, #0
 800d886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d888:	4b10      	ldr	r3, [pc, #64]	; (800d8cc <SystemInit+0xd8>)
 800d88a:	4a14      	ldr	r2, [pc, #80]	; (800d8dc <SystemInit+0xe8>)
 800d88c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d88e:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <SystemInit+0xd8>)
 800d890:	2200      	movs	r2, #0
 800d892:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d894:	4b0d      	ldr	r3, [pc, #52]	; (800d8cc <SystemInit+0xd8>)
 800d896:	4a11      	ldr	r2, [pc, #68]	; (800d8dc <SystemInit+0xe8>)
 800d898:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d89a:	4b0c      	ldr	r3, [pc, #48]	; (800d8cc <SystemInit+0xd8>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d8a0:	4b0a      	ldr	r3, [pc, #40]	; (800d8cc <SystemInit+0xd8>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a09      	ldr	r2, [pc, #36]	; (800d8cc <SystemInit+0xd8>)
 800d8a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d8ac:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <SystemInit+0xd8>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d8b2:	4b0b      	ldr	r3, [pc, #44]	; (800d8e0 <SystemInit+0xec>)
 800d8b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800d8b8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800d8ba:	bf00      	nop
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	e000ed00 	.word	0xe000ed00
 800d8c8:	52002000 	.word	0x52002000
 800d8cc:	58024400 	.word	0x58024400
 800d8d0:	eaf6ed7f 	.word	0xeaf6ed7f
 800d8d4:	02020200 	.word	0x02020200
 800d8d8:	01ff0000 	.word	0x01ff0000
 800d8dc:	01010280 	.word	0x01010280
 800d8e0:	52004000 	.word	0x52004000

0800d8e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800d8e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d91c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d8e8:	f7ff ff84 	bl	800d7f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d8ec:	480c      	ldr	r0, [pc, #48]	; (800d920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d8ee:	490d      	ldr	r1, [pc, #52]	; (800d924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d8f0:	4a0d      	ldr	r2, [pc, #52]	; (800d928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d8f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d8f4:	e002      	b.n	800d8fc <LoopCopyDataInit>

0800d8f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d8f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d8f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d8fa:	3304      	adds	r3, #4

0800d8fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d8fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d8fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d900:	d3f9      	bcc.n	800d8f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d902:	4a0a      	ldr	r2, [pc, #40]	; (800d92c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d904:	4c0a      	ldr	r4, [pc, #40]	; (800d930 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d906:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d908:	e001      	b.n	800d90e <LoopFillZerobss>

0800d90a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d90a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d90c:	3204      	adds	r2, #4

0800d90e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d90e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d910:	d3fb      	bcc.n	800d90a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d912:	f001 fedd 	bl	800f6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d916:	f7fe fedb 	bl	800c6d0 <main>
  bx  lr
 800d91a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d91c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800d920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800d924:	240004f0 	.word	0x240004f0
  ldr r2, =_sidata
 800d928:	0800fe20 	.word	0x0800fe20
  ldr r2, =_sbss
 800d92c:	240084f0 	.word	0x240084f0
  ldr r4, =_ebss
 800d930:	240216cc 	.word	0x240216cc

0800d934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d934:	e7fe      	b.n	800d934 <ADC3_IRQHandler>
	...

0800d938 <D16_GENERIC>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	b089      	sub	sp, #36	; 0x24
 800d93e:	6993      	ldr	r3, [r2, #24]
 800d940:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d942:	9103      	str	r1, [sp, #12]
 800d944:	9307      	str	r3, [sp, #28]
 800d946:	69d3      	ldr	r3, [r2, #28]
 800d948:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800d94c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800d950:	9106      	str	r1, [sp, #24]
 800d952:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800d956:	2d00      	cmp	r5, #0
 800d958:	d063      	beq.n	800da22 <D16_GENERIC+0xea>
 800d95a:	f001 0520 	and.w	r5, r1, #32
 800d95e:	f001 0110 	and.w	r1, r1, #16
 800d962:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800da44 <D16_GENERIC+0x10c>
 800d966:	46c1      	mov	r9, r8
 800d968:	9104      	str	r1, [sp, #16]
 800d96a:	2100      	movs	r1, #0
 800d96c:	9505      	str	r5, [sp, #20]
 800d96e:	e04d      	b.n	800da0c <D16_GENERIC+0xd4>
 800d970:	5d87      	ldrb	r7, [r0, r6]
 800d972:	7805      	ldrb	r5, [r0, #0]
 800d974:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800d978:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800d97c:	b2fe      	uxtb	r6, r7
 800d97e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800d982:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800d986:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800d98a:	441d      	add	r5, r3
 800d98c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800d990:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d994:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800d998:	0a9b      	lsrs	r3, r3, #10
 800d99a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800d99e:	4d27      	ldr	r5, [pc, #156]	; (800da3c <D16_GENERIC+0x104>)
 800d9a0:	fb26 c505 	smlad	r5, r6, r5, ip
 800d9a4:	4f26      	ldr	r7, [pc, #152]	; (800da40 <D16_GENERIC+0x108>)
 800d9a6:	fb26 fc07 	smuad	ip, r6, r7
 800d9aa:	9e04      	ldr	r6, [sp, #16]
 800d9ac:	f101 0801 	add.w	r8, r1, #1
 800d9b0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800d9b4:	b1ae      	cbz	r6, 800d9e2 <D16_GENERIC+0xaa>
 800d9b6:	442c      	add	r4, r5
 800d9b8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800d9bc:	eba4 040a 	sub.w	r4, r4, sl
 800d9c0:	46aa      	mov	sl, r5
 800d9c2:	17e7      	asrs	r7, r4, #31
 800d9c4:	fba4 450b 	umull	r4, r5, r4, fp
 800d9c8:	e9cd 4500 	strd	r4, r5, [sp]
 800d9cc:	fb0b 5407 	mla	r4, fp, r7, r5
 800d9d0:	9401      	str	r4, [sp, #4]
 800d9d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d9d6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d9da:	f145 0500 	adc.w	r5, r5, #0
 800d9de:	006c      	lsls	r4, r5, #1
 800d9e0:	4625      	mov	r5, r4
 800d9e2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800d9e6:	042d      	lsls	r5, r5, #16
 800d9e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d9ec:	2700      	movs	r7, #0
 800d9ee:	fb01 fb0b 	mul.w	fp, r1, fp
 800d9f2:	fa1f f188 	uxth.w	r1, r8
 800d9f6:	fbc9 6705 	smlal	r6, r7, r9, r5
 800d9fa:	9e03      	ldr	r6, [sp, #12]
 800d9fc:	10bd      	asrs	r5, r7, #2
 800d9fe:	f305 050f 	ssat	r5, #16, r5
 800da02:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800da06:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800da08:	428d      	cmp	r5, r1
 800da0a:	d90a      	bls.n	800da22 <D16_GENERIC+0xea>
 800da0c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800da0e:	2d01      	cmp	r5, #1
 800da10:	b2ee      	uxtb	r6, r5
 800da12:	d1ad      	bne.n	800d970 <D16_GENERIC+0x38>
 800da14:	9d05      	ldr	r5, [sp, #20]
 800da16:	f850 7b02 	ldr.w	r7, [r0], #2
 800da1a:	2d00      	cmp	r5, #0
 800da1c:	d0ae      	beq.n	800d97c <D16_GENERIC+0x44>
 800da1e:	ba7f      	rev16	r7, r7
 800da20:	e7ac      	b.n	800d97c <D16_GENERIC+0x44>
 800da22:	2000      	movs	r0, #0
 800da24:	9906      	ldr	r1, [sp, #24]
 800da26:	61d3      	str	r3, [r2, #28]
 800da28:	9b07      	ldr	r3, [sp, #28]
 800da2a:	f8c2 c008 	str.w	ip, [r2, #8]
 800da2e:	60d1      	str	r1, [r2, #12]
 800da30:	6193      	str	r3, [r2, #24]
 800da32:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800da36:	b009      	add	sp, #36	; 0x24
 800da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3c:	00030001 	.word	0x00030001
 800da40:	00010003 	.word	0x00010003
 800da44:	24000000 	.word	0x24000000

0800da48 <D24_GENERIC>:
 800da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800da50:	b089      	sub	sp, #36	; 0x24
 800da52:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800da54:	9303      	str	r3, [sp, #12]
 800da56:	6993      	ldr	r3, [r2, #24]
 800da58:	9104      	str	r1, [sp, #16]
 800da5a:	9307      	str	r3, [sp, #28]
 800da5c:	69d1      	ldr	r1, [r2, #28]
 800da5e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800da62:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800da66:	2e00      	cmp	r6, #0
 800da68:	f000 8088 	beq.w	800db7c <D24_GENERIC+0x134>
 800da6c:	f005 0620 	and.w	r6, r5, #32
 800da70:	f005 0510 	and.w	r5, r5, #16
 800da74:	f04f 0c00 	mov.w	ip, #0
 800da78:	f8df e140 	ldr.w	lr, [pc, #320]	; 800dbbc <D24_GENERIC+0x174>
 800da7c:	9606      	str	r6, [sp, #24]
 800da7e:	9505      	str	r5, [sp, #20]
 800da80:	e064      	b.n	800db4c <D24_GENERIC+0x104>
 800da82:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800da86:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800da8a:	f810 b007 	ldrb.w	fp, [r0, r7]
 800da8e:	042d      	lsls	r5, r5, #16
 800da90:	19f0      	adds	r0, r6, r7
 800da92:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800da96:	44a9      	add	r9, r5
 800da98:	fa5f f689 	uxtb.w	r6, r9
 800da9c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800daa0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800daa4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800daa8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800daac:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800dab0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800dab4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800dab8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dabc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800dac0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800dac4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800dac8:	4d3a      	ldr	r5, [pc, #232]	; (800dbb4 <D24_GENERIC+0x16c>)
 800daca:	fb26 8705 	smlad	r7, r6, r5, r8
 800dace:	4d3a      	ldr	r5, [pc, #232]	; (800dbb8 <D24_GENERIC+0x170>)
 800dad0:	fb26 3805 	smlad	r8, r6, r5, r3
 800dad4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800dad8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800dadc:	2301      	movs	r3, #1
 800dade:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800dae2:	fb26 f603 	smuad	r6, r6, r3
 800dae6:	eb0c 0903 	add.w	r9, ip, r3
 800daea:	eb0b 0306 	add.w	r3, fp, r6
 800daee:	9e05      	ldr	r6, [sp, #20]
 800daf0:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800daf4:	b1ae      	cbz	r6, 800db22 <D24_GENERIC+0xda>
 800daf6:	442c      	add	r4, r5
 800daf8:	9e03      	ldr	r6, [sp, #12]
 800dafa:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800dafe:	1ba4      	subs	r4, r4, r6
 800db00:	9503      	str	r5, [sp, #12]
 800db02:	17e7      	asrs	r7, r4, #31
 800db04:	fba4 450b 	umull	r4, r5, r4, fp
 800db08:	e9cd 4500 	strd	r4, r5, [sp]
 800db0c:	fb0b 5407 	mla	r4, fp, r7, r5
 800db10:	9401      	str	r4, [sp, #4]
 800db12:	e9dd 4500 	ldrd	r4, r5, [sp]
 800db16:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800db1a:	f145 0500 	adc.w	r5, r5, #0
 800db1e:	006c      	lsls	r4, r5, #1
 800db20:	4625      	mov	r5, r4
 800db22:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800db26:	03ad      	lsls	r5, r5, #14
 800db28:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800db2c:	2700      	movs	r7, #0
 800db2e:	fb0c fb0b 	mul.w	fp, ip, fp
 800db32:	fa1f fc89 	uxth.w	ip, r9
 800db36:	fbca 6705 	smlal	r6, r7, sl, r5
 800db3a:	9e04      	ldr	r6, [sp, #16]
 800db3c:	10bd      	asrs	r5, r7, #2
 800db3e:	f305 050f 	ssat	r5, #16, r5
 800db42:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800db46:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800db48:	4565      	cmp	r5, ip
 800db4a:	d917      	bls.n	800db7c <D24_GENERIC+0x134>
 800db4c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800db4e:	f890 9000 	ldrb.w	r9, [r0]
 800db52:	b2ef      	uxtb	r7, r5
 800db54:	2d01      	cmp	r5, #1
 800db56:	b23e      	sxth	r6, r7
 800db58:	d193      	bne.n	800da82 <D24_GENERIC+0x3a>
 800db5a:	9d06      	ldr	r5, [sp, #24]
 800db5c:	b1dd      	cbz	r5, 800db96 <D24_GENERIC+0x14e>
 800db5e:	78c7      	ldrb	r7, [r0, #3]
 800db60:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800db64:	f01c 0f01 	tst.w	ip, #1
 800db68:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800db6c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800db70:	d11a      	bne.n	800dba8 <D24_GENERIC+0x160>
 800db72:	f890 9001 	ldrb.w	r9, [r0, #1]
 800db76:	3002      	adds	r0, #2
 800db78:	44b1      	add	r9, r6
 800db7a:	e78d      	b.n	800da98 <D24_GENERIC+0x50>
 800db7c:	6093      	str	r3, [r2, #8]
 800db7e:	2000      	movs	r0, #0
 800db80:	9b03      	ldr	r3, [sp, #12]
 800db82:	f8c2 800c 	str.w	r8, [r2, #12]
 800db86:	6153      	str	r3, [r2, #20]
 800db88:	9b07      	ldr	r3, [sp, #28]
 800db8a:	61d1      	str	r1, [r2, #28]
 800db8c:	6114      	str	r4, [r2, #16]
 800db8e:	6193      	str	r3, [r2, #24]
 800db90:	b009      	add	sp, #36	; 0x24
 800db92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db96:	7845      	ldrb	r5, [r0, #1]
 800db98:	3003      	adds	r0, #3
 800db9a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800db9e:	022d      	lsls	r5, r5, #8
 800dba0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800dba4:	44a9      	add	r9, r5
 800dba6:	e777      	b.n	800da98 <D24_GENERIC+0x50>
 800dba8:	7886      	ldrb	r6, [r0, #2]
 800dbaa:	3004      	adds	r0, #4
 800dbac:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800dbb0:	44a9      	add	r9, r5
 800dbb2:	e771      	b.n	800da98 <D24_GENERIC+0x50>
 800dbb4:	00030001 	.word	0x00030001
 800dbb8:	00060007 	.word	0x00060007
 800dbbc:	24000000 	.word	0x24000000

0800dbc0 <D32_GENERIC>:
 800dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800dbc8:	b089      	sub	sp, #36	; 0x24
 800dbca:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800dbcc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800dbce:	9302      	str	r3, [sp, #8]
 800dbd0:	6993      	ldr	r3, [r2, #24]
 800dbd2:	9104      	str	r1, [sp, #16]
 800dbd4:	9307      	str	r3, [sp, #28]
 800dbd6:	9503      	str	r5, [sp, #12]
 800dbd8:	69d1      	ldr	r1, [r2, #28]
 800dbda:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800dbdc:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800dbe0:	2e00      	cmp	r6, #0
 800dbe2:	f000 8097 	beq.w	800dd14 <D32_GENERIC+0x154>
 800dbe6:	f005 0620 	and.w	r6, r5, #32
 800dbea:	f005 0510 	and.w	r5, r5, #16
 800dbee:	f04f 0e00 	mov.w	lr, #0
 800dbf2:	f8df c150 	ldr.w	ip, [pc, #336]	; 800dd44 <D32_GENERIC+0x184>
 800dbf6:	9606      	str	r6, [sp, #24]
 800dbf8:	9505      	str	r5, [sp, #20]
 800dbfa:	e079      	b.n	800dcf0 <D32_GENERIC+0x130>
 800dbfc:	783d      	ldrb	r5, [r7, #0]
 800dbfe:	f810 b009 	ldrb.w	fp, [r0, r9]
 800dc02:	042d      	lsls	r5, r5, #16
 800dc04:	f810 a006 	ldrb.w	sl, [r0, r6]
 800dc08:	f890 9000 	ldrb.w	r9, [r0]
 800dc0c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800dc10:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800dc14:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800dc18:	44a9      	add	r9, r5
 800dc1a:	fa5f f789 	uxtb.w	r7, r9
 800dc1e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800dc22:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800dc26:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800dc2a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800dc2e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800dc32:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800dc36:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800dc3a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800dc3e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800dc42:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800dc46:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800dc4a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dc4e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800dc52:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dc56:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800dc5a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800dc5e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800dc62:	4d34      	ldr	r5, [pc, #208]	; (800dd34 <D32_GENERIC+0x174>)
 800dc64:	fb29 8805 	smlad	r8, r9, r5, r8
 800dc68:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800dc6c:	fb26 8705 	smlad	r7, r6, r5, r8
 800dc70:	4d31      	ldr	r5, [pc, #196]	; (800dd38 <D32_GENERIC+0x178>)
 800dc72:	fb29 3305 	smlad	r3, r9, r5, r3
 800dc76:	4d31      	ldr	r5, [pc, #196]	; (800dd3c <D32_GENERIC+0x17c>)
 800dc78:	fb26 3805 	smlad	r8, r6, r5, r3
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	fb29 f903 	smuad	r9, r9, r3
 800dc82:	4b2f      	ldr	r3, [pc, #188]	; (800dd40 <D32_GENERIC+0x180>)
 800dc84:	fb26 9303 	smlad	r3, r6, r3, r9
 800dc88:	9e05      	ldr	r6, [sp, #20]
 800dc8a:	f10e 0901 	add.w	r9, lr, #1
 800dc8e:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800dc92:	b1ae      	cbz	r6, 800dcc0 <D32_GENERIC+0x100>
 800dc94:	442c      	add	r4, r5
 800dc96:	9e02      	ldr	r6, [sp, #8]
 800dc98:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800dc9c:	1ba4      	subs	r4, r4, r6
 800dc9e:	9502      	str	r5, [sp, #8]
 800dca0:	17e7      	asrs	r7, r4, #31
 800dca2:	fba4 450a 	umull	r4, r5, r4, sl
 800dca6:	e9cd 4500 	strd	r4, r5, [sp]
 800dcaa:	fb0a 5407 	mla	r4, sl, r7, r5
 800dcae:	9401      	str	r4, [sp, #4]
 800dcb0:	e9dd 4500 	ldrd	r4, r5, [sp]
 800dcb4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800dcb8:	f145 0500 	adc.w	r5, r5, #0
 800dcbc:	006c      	lsls	r4, r5, #1
 800dcbe:	4625      	mov	r5, r4
 800dcc0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800dcc4:	036d      	lsls	r5, r5, #13
 800dcc6:	9f03      	ldr	r7, [sp, #12]
 800dcc8:	fb0e fb0a 	mul.w	fp, lr, sl
 800dccc:	fa1f fe89 	uxth.w	lr, r9
 800dcd0:	f04f 0a00 	mov.w	sl, #0
 800dcd4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800dcd8:	9e04      	ldr	r6, [sp, #16]
 800dcda:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800dcde:	4657      	mov	r7, sl
 800dce0:	10bd      	asrs	r5, r7, #2
 800dce2:	f305 050f 	ssat	r5, #16, r5
 800dce6:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800dcea:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800dcec:	4575      	cmp	r5, lr
 800dcee:	d911      	bls.n	800dd14 <D32_GENERIC+0x154>
 800dcf0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800dcf2:	b2ee      	uxtb	r6, r5
 800dcf4:	2d01      	cmp	r5, #1
 800dcf6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800dcfa:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800dcfe:	f47f af7d 	bne.w	800dbfc <D32_GENERIC+0x3c>
 800dd02:	1d05      	adds	r5, r0, #4
 800dd04:	f8d0 9000 	ldr.w	r9, [r0]
 800dd08:	9806      	ldr	r0, [sp, #24]
 800dd0a:	b180      	cbz	r0, 800dd2e <D32_GENERIC+0x16e>
 800dd0c:	fa99 f999 	rev16.w	r9, r9
 800dd10:	4628      	mov	r0, r5
 800dd12:	e782      	b.n	800dc1a <D32_GENERIC+0x5a>
 800dd14:	6093      	str	r3, [r2, #8]
 800dd16:	2000      	movs	r0, #0
 800dd18:	9b02      	ldr	r3, [sp, #8]
 800dd1a:	f8c2 800c 	str.w	r8, [r2, #12]
 800dd1e:	6153      	str	r3, [r2, #20]
 800dd20:	9b07      	ldr	r3, [sp, #28]
 800dd22:	61d1      	str	r1, [r2, #28]
 800dd24:	6114      	str	r4, [r2, #16]
 800dd26:	6193      	str	r3, [r2, #24]
 800dd28:	b009      	add	sp, #36	; 0x24
 800dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2e:	4628      	mov	r0, r5
 800dd30:	e773      	b.n	800dc1a <D32_GENERIC+0x5a>
 800dd32:	bf00      	nop
 800dd34:	00060003 	.word	0x00060003
 800dd38:	000a000c 	.word	0x000a000c
 800dd3c:	000c000a 	.word	0x000c000a
 800dd40:	00030006 	.word	0x00030006
 800dd44:	24000000 	.word	0x24000000

0800dd48 <D48_GENERIC>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	6913      	ldr	r3, [r2, #16]
 800dd4e:	b089      	sub	sp, #36	; 0x24
 800dd50:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	6953      	ldr	r3, [r2, #20]
 800dd56:	9104      	str	r1, [sp, #16]
 800dd58:	9302      	str	r3, [sp, #8]
 800dd5a:	6993      	ldr	r3, [r2, #24]
 800dd5c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800dd60:	9307      	str	r3, [sp, #28]
 800dd62:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800dd66:	9100      	str	r1, [sp, #0]
 800dd68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800dd6a:	9103      	str	r1, [sp, #12]
 800dd6c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800dd6e:	2c00      	cmp	r4, #0
 800dd70:	f000 80be 	beq.w	800def0 <D48_GENERIC+0x1a8>
 800dd74:	f001 0420 	and.w	r4, r1, #32
 800dd78:	f001 0110 	and.w	r1, r1, #16
 800dd7c:	f04f 0e00 	mov.w	lr, #0
 800dd80:	9105      	str	r1, [sp, #20]
 800dd82:	9406      	str	r4, [sp, #24]
 800dd84:	4962      	ldr	r1, [pc, #392]	; (800df10 <D48_GENERIC+0x1c8>)
 800dd86:	e0a0      	b.n	800deca <D48_GENERIC+0x182>
 800dd88:	eb00 0608 	add.w	r6, r0, r8
 800dd8c:	f810 a008 	ldrb.w	sl, [r0, r8]
 800dd90:	f810 9005 	ldrb.w	r9, [r0, r5]
 800dd94:	5df4      	ldrb	r4, [r6, r7]
 800dd96:	443e      	add	r6, r7
 800dd98:	f890 b000 	ldrb.w	fp, [r0]
 800dd9c:	0420      	lsls	r0, r4, #16
 800dd9e:	eb06 0408 	add.w	r4, r6, r8
 800dda2:	f816 6008 	ldrb.w	r6, [r6, r8]
 800dda6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800ddaa:	f814 8007 	ldrb.w	r8, [r4, r7]
 800ddae:	4427      	add	r7, r4
 800ddb0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800ddb4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800ddb8:	eb0a 040b 	add.w	r4, sl, fp
 800ddbc:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800ddc0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800ddc4:	b2f7      	uxtb	r7, r6
 800ddc6:	b2e6      	uxtb	r6, r4
 800ddc8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800ddcc:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800ddd0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800ddd4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ddd8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800dddc:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800dde0:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800dde4:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800dde8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ddec:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800ddf0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800ddf4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ddf8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800ddfc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800de00:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800de04:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800de08:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800de0c:	9d00      	ldr	r5, [sp, #0]
 800de0e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800de12:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800de16:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800de1a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800de1e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800de22:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800de26:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800de2a:	4c3a      	ldr	r4, [pc, #232]	; (800df14 <D48_GENERIC+0x1cc>)
 800de2c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800de30:	4c39      	ldr	r4, [pc, #228]	; (800df18 <D48_GENERIC+0x1d0>)
 800de32:	fb29 aa04 	smlad	sl, r9, r4, sl
 800de36:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800de3a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800de3e:	4c37      	ldr	r4, [pc, #220]	; (800df1c <D48_GENERIC+0x1d4>)
 800de40:	fb26 3304 	smlad	r3, r6, r4, r3
 800de44:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800de48:	fb29 3304 	smlad	r3, r9, r4, r3
 800de4c:	4c34      	ldr	r4, [pc, #208]	; (800df20 <D48_GENERIC+0x1d8>)
 800de4e:	fb27 3304 	smlad	r3, r7, r4, r3
 800de52:	2501      	movs	r5, #1
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	fb26 f605 	smuad	r6, r6, r5
 800de5a:	4b32      	ldr	r3, [pc, #200]	; (800df24 <D48_GENERIC+0x1dc>)
 800de5c:	fb29 6903 	smlad	r9, r9, r3, r6
 800de60:	4b31      	ldr	r3, [pc, #196]	; (800df28 <D48_GENERIC+0x1e0>)
 800de62:	fb27 9303 	smlad	r3, r7, r3, r9
 800de66:	9c05      	ldr	r4, [sp, #20]
 800de68:	eb0e 0805 	add.w	r8, lr, r5
 800de6c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800de70:	b19c      	cbz	r4, 800de9a <D48_GENERIC+0x152>
 800de72:	9c01      	ldr	r4, [sp, #4]
 800de74:	9d02      	ldr	r5, [sp, #8]
 800de76:	4454      	add	r4, sl
 800de78:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800de7c:	f8cd a008 	str.w	sl, [sp, #8]
 800de80:	1b64      	subs	r4, r4, r5
 800de82:	fba4 ab09 	umull	sl, fp, r4, r9
 800de86:	17e7      	asrs	r7, r4, #31
 800de88:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800de8c:	fb09 bb07 	mla	fp, r9, r7, fp
 800de90:	f14b 0500 	adc.w	r5, fp, #0
 800de94:	006c      	lsls	r4, r5, #1
 800de96:	46a2      	mov	sl, r4
 800de98:	9401      	str	r4, [sp, #4]
 800de9a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800de9c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800dea0:	9d03      	ldr	r5, [sp, #12]
 800dea2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800dea6:	fb0e f606 	mul.w	r6, lr, r6
 800deaa:	fa1f fe88 	uxth.w	lr, r8
 800deae:	f04f 0800 	mov.w	r8, #0
 800deb2:	fbc5 780a 	smlal	r7, r8, r5, sl
 800deb6:	4645      	mov	r5, r8
 800deb8:	10ac      	asrs	r4, r5, #2
 800deba:	9d04      	ldr	r5, [sp, #16]
 800debc:	f304 040f 	ssat	r4, #16, r4
 800dec0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800dec4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800dec6:	4574      	cmp	r4, lr
 800dec8:	d912      	bls.n	800def0 <D48_GENERIC+0x1a8>
 800deca:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800decc:	b2e5      	uxtb	r5, r4
 800dece:	2c01      	cmp	r4, #1
 800ded0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800ded4:	f1c5 0700 	rsb	r7, r5, #0
 800ded8:	f47f af56 	bne.w	800dd88 <D48_GENERIC+0x40>
 800dedc:	9d06      	ldr	r5, [sp, #24]
 800dede:	e9d0 4600 	ldrd	r4, r6, [r0]
 800dee2:	3006      	adds	r0, #6
 800dee4:	2d00      	cmp	r5, #0
 800dee6:	f43f af6b 	beq.w	800ddc0 <D48_GENERIC+0x78>
 800deea:	ba64      	rev16	r4, r4
 800deec:	ba76      	rev16	r6, r6
 800deee:	e767      	b.n	800ddc0 <D48_GENERIC+0x78>
 800def0:	6093      	str	r3, [r2, #8]
 800def2:	2000      	movs	r0, #0
 800def4:	9b00      	ldr	r3, [sp, #0]
 800def6:	f8c2 c01c 	str.w	ip, [r2, #28]
 800defa:	60d3      	str	r3, [r2, #12]
 800defc:	9b01      	ldr	r3, [sp, #4]
 800defe:	6113      	str	r3, [r2, #16]
 800df00:	9b02      	ldr	r3, [sp, #8]
 800df02:	6153      	str	r3, [r2, #20]
 800df04:	9b07      	ldr	r3, [sp, #28]
 800df06:	6193      	str	r3, [r2, #24]
 800df08:	b009      	add	sp, #36	; 0x24
 800df0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0e:	bf00      	nop
 800df10:	24000000 	.word	0x24000000
 800df14:	000f000a 	.word	0x000f000a
 800df18:	00060003 	.word	0x00060003
 800df1c:	00150019 	.word	0x00150019
 800df20:	00190015 	.word	0x00190015
 800df24:	00030006 	.word	0x00030006
 800df28:	000a000f 	.word	0x000a000f

0800df2c <D64_GENERIC>:
 800df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	6913      	ldr	r3, [r2, #16]
 800df32:	b089      	sub	sp, #36	; 0x24
 800df34:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	6953      	ldr	r3, [r2, #20]
 800df3a:	9105      	str	r1, [sp, #20]
 800df3c:	9303      	str	r3, [sp, #12]
 800df3e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800df40:	6993      	ldr	r3, [r2, #24]
 800df42:	69d4      	ldr	r4, [r2, #28]
 800df44:	9307      	str	r3, [sp, #28]
 800df46:	9504      	str	r5, [sp, #16]
 800df48:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800df4c:	2900      	cmp	r1, #0
 800df4e:	f000 80e8 	beq.w	800e122 <D64_GENERIC+0x1f6>
 800df52:	6a11      	ldr	r1, [r2, #32]
 800df54:	2500      	movs	r5, #0
 800df56:	46b3      	mov	fp, r6
 800df58:	9302      	str	r3, [sp, #8]
 800df5a:	9106      	str	r1, [sp, #24]
 800df5c:	4978      	ldr	r1, [pc, #480]	; (800e140 <D64_GENERIC+0x214>)
 800df5e:	e0cc      	b.n	800e0fa <D64_GENERIC+0x1ce>
 800df60:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800df64:	f1ce 0c00 	rsb	ip, lr, #0
 800df68:	f890 9000 	ldrb.w	r9, [r0]
 800df6c:	eb00 0708 	add.w	r7, r0, r8
 800df70:	f810 6008 	ldrb.w	r6, [r0, r8]
 800df74:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800df78:	f817 000c 	ldrb.w	r0, [r7, ip]
 800df7c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800df80:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800df84:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800df88:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800df8c:	f817 000c 	ldrb.w	r0, [r7, ip]
 800df90:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800df94:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800df98:	0400      	lsls	r0, r0, #16
 800df9a:	4467      	add	r7, ip
 800df9c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800dfa0:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800dfa4:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800dfa8:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800dfac:	444e      	add	r6, r9
 800dfae:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800dfb2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800dfb6:	44c2      	add	sl, r8
 800dfb8:	b2f7      	uxtb	r7, r6
 800dfba:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800dfbe:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800dfc2:	0e36      	lsrs	r6, r6, #24
 800dfc4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800dfc8:	fa5f fc8a 	uxtb.w	ip, sl
 800dfcc:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800dfd0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800dfd4:	443c      	add	r4, r7
 800dfd6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800dfda:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800dfde:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800dfe2:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800dfe6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dfea:	4b56      	ldr	r3, [pc, #344]	; (800e144 <D64_GENERIC+0x218>)
 800dfec:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800dff0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800dff4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800dff8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800dffc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e000:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800e004:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800e008:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800e00c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e010:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800e014:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800e018:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800e01c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e020:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800e024:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800e028:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800e02c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e030:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800e034:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e038:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800e03c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800e040:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800e044:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800e048:	fb28 b903 	smlad	r9, r8, r3, fp
 800e04c:	4b3e      	ldr	r3, [pc, #248]	; (800e148 <D64_GENERIC+0x21c>)
 800e04e:	fb26 9903 	smlad	r9, r6, r3, r9
 800e052:	4b3e      	ldr	r3, [pc, #248]	; (800e14c <D64_GENERIC+0x220>)
 800e054:	fb2c 9703 	smlad	r7, ip, r3, r9
 800e058:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800e05c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800e060:	4f3b      	ldr	r7, [pc, #236]	; (800e150 <D64_GENERIC+0x224>)
 800e062:	9b02      	ldr	r3, [sp, #8]
 800e064:	fb28 3307 	smlad	r3, r8, r7, r3
 800e068:	fb2a 3317 	smladx	r3, sl, r7, r3
 800e06c:	4f39      	ldr	r7, [pc, #228]	; (800e154 <D64_GENERIC+0x228>)
 800e06e:	fb26 3307 	smlad	r3, r6, r7, r3
 800e072:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800e076:	f04f 0e01 	mov.w	lr, #1
 800e07a:	fb28 f80e 	smuad	r8, r8, lr
 800e07e:	4b36      	ldr	r3, [pc, #216]	; (800e158 <D64_GENERIC+0x22c>)
 800e080:	fb26 8603 	smlad	r6, r6, r3, r8
 800e084:	4b35      	ldr	r3, [pc, #212]	; (800e15c <D64_GENERIC+0x230>)
 800e086:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800e08a:	4b35      	ldr	r3, [pc, #212]	; (800e160 <D64_GENERIC+0x234>)
 800e08c:	fb2a c303 	smlad	r3, sl, r3, ip
 800e090:	9f06      	ldr	r7, [sp, #24]
 800e092:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800e096:	9302      	str	r3, [sp, #8]
 800e098:	b1cf      	cbz	r7, 800e0ce <D64_GENERIC+0x1a2>
 800e09a:	9b00      	ldr	r3, [sp, #0]
 800e09c:	444b      	add	r3, r9
 800e09e:	461e      	mov	r6, r3
 800e0a0:	9b03      	ldr	r3, [sp, #12]
 800e0a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0a6:	1af6      	subs	r6, r6, r3
 800e0a8:	46b0      	mov	r8, r6
 800e0aa:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800e0ae:	e9cd 8900 	strd	r8, r9, [sp]
 800e0b2:	fba6 8907 	umull	r8, r9, r6, r7
 800e0b6:	9e01      	ldr	r6, [sp, #4]
 800e0b8:	fb07 9306 	mla	r3, r7, r6, r9
 800e0bc:	4646      	mov	r6, r8
 800e0be:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800e0c2:	f143 0700 	adc.w	r7, r3, #0
 800e0c6:	fa07 f30e 	lsl.w	r3, r7, lr
 800e0ca:	4699      	mov	r9, r3
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800e0d2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800e0d6:	9b04      	ldr	r3, [sp, #16]
 800e0d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e0dc:	2700      	movs	r7, #0
 800e0de:	fb05 fc0c 	mul.w	ip, r5, ip
 800e0e2:	3501      	adds	r5, #1
 800e0e4:	fbc3 6709 	smlal	r6, r7, r3, r9
 800e0e8:	9b05      	ldr	r3, [sp, #20]
 800e0ea:	10be      	asrs	r6, r7, #2
 800e0ec:	f306 060f 	ssat	r6, #16, r6
 800e0f0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800e0f4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800e0f6:	42ae      	cmp	r6, r5
 800e0f8:	dd11      	ble.n	800e11e <D64_GENERIC+0x1f2>
 800e0fa:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800e0fe:	f1be 0f01 	cmp.w	lr, #1
 800e102:	f47f af2d 	bne.w	800df60 <D64_GENERIC+0x34>
 800e106:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800e108:	f100 0c08 	add.w	ip, r0, #8
 800e10c:	06bb      	lsls	r3, r7, #26
 800e10e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800e112:	d513      	bpl.n	800e13c <D64_GENERIC+0x210>
 800e114:	ba76      	rev16	r6, r6
 800e116:	fa9a fa9a 	rev16.w	sl, sl
 800e11a:	4660      	mov	r0, ip
 800e11c:	e74c      	b.n	800dfb8 <D64_GENERIC+0x8c>
 800e11e:	465e      	mov	r6, fp
 800e120:	9b02      	ldr	r3, [sp, #8]
 800e122:	6093      	str	r3, [r2, #8]
 800e124:	2000      	movs	r0, #0
 800e126:	9b00      	ldr	r3, [sp, #0]
 800e128:	60d6      	str	r6, [r2, #12]
 800e12a:	6113      	str	r3, [r2, #16]
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	61d4      	str	r4, [r2, #28]
 800e130:	6153      	str	r3, [r2, #20]
 800e132:	9b07      	ldr	r3, [sp, #28]
 800e134:	6193      	str	r3, [r2, #24]
 800e136:	b009      	add	sp, #36	; 0x24
 800e138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13c:	4660      	mov	r0, ip
 800e13e:	e73b      	b.n	800dfb8 <D64_GENERIC+0x8c>
 800e140:	24000000 	.word	0x24000000
 800e144:	001c0015 	.word	0x001c0015
 800e148:	000f000a 	.word	0x000f000a
 800e14c:	00060003 	.word	0x00060003
 800e150:	0024002a 	.word	0x0024002a
 800e154:	002e0030 	.word	0x002e0030
 800e158:	00030006 	.word	0x00030006
 800e15c:	000a000f 	.word	0x000a000f
 800e160:	0015001c 	.word	0x0015001c

0800e164 <D80_GENERIC>:
 800e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	b08b      	sub	sp, #44	; 0x2c
 800e16a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e16c:	9107      	str	r1, [sp, #28]
 800e16e:	6911      	ldr	r1, [r2, #16]
 800e170:	9104      	str	r1, [sp, #16]
 800e172:	6951      	ldr	r1, [r2, #20]
 800e174:	9105      	str	r1, [sp, #20]
 800e176:	6991      	ldr	r1, [r2, #24]
 800e178:	9109      	str	r1, [sp, #36]	; 0x24
 800e17a:	69d1      	ldr	r1, [r2, #28]
 800e17c:	9102      	str	r1, [sp, #8]
 800e17e:	6891      	ldr	r1, [r2, #8]
 800e180:	9103      	str	r1, [sp, #12]
 800e182:	68d1      	ldr	r1, [r2, #12]
 800e184:	9101      	str	r1, [sp, #4]
 800e186:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e188:	9106      	str	r1, [sp, #24]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 810b 	beq.w	800e3a6 <D80_GENERIC+0x242>
 800e190:	6a13      	ldr	r3, [r2, #32]
 800e192:	f04f 0800 	mov.w	r8, #0
 800e196:	f8df c260 	ldr.w	ip, [pc, #608]	; 800e3f8 <D80_GENERIC+0x294>
 800e19a:	9308      	str	r3, [sp, #32]
 800e19c:	9200      	str	r2, [sp, #0]
 800e19e:	e0ee      	b.n	800e37e <D80_GENERIC+0x21a>
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	f890 e000 	ldrb.w	lr, [r0]
 800e1a6:	b219      	sxth	r1, r3
 800e1a8:	425c      	negs	r4, r3
 800e1aa:	f810 9003 	ldrb.w	r9, [r0, r3]
 800e1ae:	004e      	lsls	r6, r1, #1
 800e1b0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800e1b4:	4431      	add	r1, r6
 800e1b6:	1843      	adds	r3, r0, r1
 800e1b8:	f810 b001 	ldrb.w	fp, [r0, r1]
 800e1bc:	1919      	adds	r1, r3, r4
 800e1be:	5d1b      	ldrb	r3, [r3, r4]
 800e1c0:	1948      	adds	r0, r1, r5
 800e1c2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800e1c6:	041b      	lsls	r3, r3, #16
 800e1c8:	1907      	adds	r7, r0, r4
 800e1ca:	5d01      	ldrb	r1, [r0, r4]
 800e1cc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800e1d0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800e1d4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800e1d8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800e1dc:	0409      	lsls	r1, r1, #16
 800e1de:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800e1e2:	eb0b 0905 	add.w	r9, fp, r5
 800e1e6:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800e1ea:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800e1ee:	eb09 0b04 	add.w	fp, r9, r4
 800e1f2:	f819 4004 	ldrb.w	r4, [r9, r4]
 800e1f6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800e1fa:	4473      	add	r3, lr
 800e1fc:	eb0b 0006 	add.w	r0, fp, r6
 800e200:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800e204:	4439      	add	r1, r7
 800e206:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800e20a:	b2df      	uxtb	r7, r3
 800e20c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800e210:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800e214:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800e218:	fa5f fa81 	uxtb.w	sl, r1
 800e21c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800e220:	9c02      	ldr	r4, [sp, #8]
 800e222:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800e226:	441c      	add	r4, r3
 800e228:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800e22c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800e230:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800e234:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800e238:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800e23c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e240:	b2ed      	uxtb	r5, r5
 800e242:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800e246:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e24a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800e24e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800e252:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800e256:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800e25a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800e25e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800e262:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800e266:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800e26a:	0e09      	lsrs	r1, r1, #24
 800e26c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800e270:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800e274:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800e278:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e27c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800e280:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e284:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e288:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800e28c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e290:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800e294:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800e298:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e29c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800e2a0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800e2a4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e2a8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800e2ac:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800e2b0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800e2b4:	9202      	str	r2, [sp, #8]
 800e2b6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800e2ba:	4a43      	ldr	r2, [pc, #268]	; (800e3c8 <D80_GENERIC+0x264>)
 800e2bc:	9f01      	ldr	r7, [sp, #4]
 800e2be:	fb23 7a02 	smlad	sl, r3, r2, r7
 800e2c2:	4a42      	ldr	r2, [pc, #264]	; (800e3cc <D80_GENERIC+0x268>)
 800e2c4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800e2c8:	4a41      	ldr	r2, [pc, #260]	; (800e3d0 <D80_GENERIC+0x26c>)
 800e2ca:	fb24 aa02 	smlad	sl, r4, r2, sl
 800e2ce:	4a41      	ldr	r2, [pc, #260]	; (800e3d4 <D80_GENERIC+0x270>)
 800e2d0:	fb21 a702 	smlad	r7, r1, r2, sl
 800e2d4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e2d8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800e2dc:	4a3e      	ldr	r2, [pc, #248]	; (800e3d8 <D80_GENERIC+0x274>)
 800e2de:	9f03      	ldr	r7, [sp, #12]
 800e2e0:	fb23 7e02 	smlad	lr, r3, r2, r7
 800e2e4:	4a3d      	ldr	r2, [pc, #244]	; (800e3dc <D80_GENERIC+0x278>)
 800e2e6:	fb26 ee02 	smlad	lr, r6, r2, lr
 800e2ea:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800e2ee:	fb24 e707 	smlad	r7, r4, r7, lr
 800e2f2:	4a3b      	ldr	r2, [pc, #236]	; (800e3e0 <D80_GENERIC+0x27c>)
 800e2f4:	fb21 7702 	smlad	r7, r1, r2, r7
 800e2f8:	4a3a      	ldr	r2, [pc, #232]	; (800e3e4 <D80_GENERIC+0x280>)
 800e2fa:	fb25 7202 	smlad	r2, r5, r2, r7
 800e2fe:	f04f 0901 	mov.w	r9, #1
 800e302:	9201      	str	r2, [sp, #4]
 800e304:	fb23 f909 	smuad	r9, r3, r9
 800e308:	4b37      	ldr	r3, [pc, #220]	; (800e3e8 <D80_GENERIC+0x284>)
 800e30a:	fb26 9603 	smlad	r6, r6, r3, r9
 800e30e:	4f37      	ldr	r7, [pc, #220]	; (800e3ec <D80_GENERIC+0x288>)
 800e310:	fb24 6407 	smlad	r4, r4, r7, r6
 800e314:	4f36      	ldr	r7, [pc, #216]	; (800e3f0 <D80_GENERIC+0x28c>)
 800e316:	fb21 4707 	smlad	r7, r1, r7, r4
 800e31a:	4936      	ldr	r1, [pc, #216]	; (800e3f4 <D80_GENERIC+0x290>)
 800e31c:	fb25 7301 	smlad	r3, r5, r1, r7
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800e326:	9b08      	ldr	r3, [sp, #32]
 800e328:	b193      	cbz	r3, 800e350 <D80_GENERIC+0x1ec>
 800e32a:	9a04      	ldr	r2, [sp, #16]
 800e32c:	4452      	add	r2, sl
 800e32e:	4614      	mov	r4, r2
 800e330:	9a05      	ldr	r2, [sp, #20]
 800e332:	f8cd a014 	str.w	sl, [sp, #20]
 800e336:	1aa4      	subs	r4, r4, r2
 800e338:	fba4 1203 	umull	r1, r2, r4, r3
 800e33c:	17e7      	asrs	r7, r4, #31
 800e33e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800e342:	fb03 2207 	mla	r2, r3, r7, r2
 800e346:	f142 0500 	adc.w	r5, r2, #0
 800e34a:	006b      	lsls	r3, r5, #1
 800e34c:	469a      	mov	sl, r3
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	9e00      	ldr	r6, [sp, #0]
 800e352:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800e356:	9a06      	ldr	r2, [sp, #24]
 800e358:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e35c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800e35e:	2500      	movs	r5, #0
 800e360:	fb08 f303 	mul.w	r3, r8, r3
 800e364:	fbc2 450a 	smlal	r4, r5, r2, sl
 800e368:	9a07      	ldr	r2, [sp, #28]
 800e36a:	f108 0801 	add.w	r8, r8, #1
 800e36e:	10a9      	asrs	r1, r5, #2
 800e370:	f301 010f 	ssat	r1, #16, r1
 800e374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800e378:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800e37a:	4543      	cmp	r3, r8
 800e37c:	dd12      	ble.n	800e3a4 <D80_GENERIC+0x240>
 800e37e:	9b00      	ldr	r3, [sp, #0]
 800e380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e382:	2b01      	cmp	r3, #1
 800e384:	f47f af0c 	bne.w	800e1a0 <D80_GENERIC+0x3c>
 800e388:	9b00      	ldr	r3, [sp, #0]
 800e38a:	6885      	ldr	r5, [r0, #8]
 800e38c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800e38e:	06b2      	lsls	r2, r6, #26
 800e390:	e9d0 3100 	ldrd	r3, r1, [r0]
 800e394:	f100 000a 	add.w	r0, r0, #10
 800e398:	f57f af35 	bpl.w	800e206 <D80_GENERIC+0xa2>
 800e39c:	ba5b      	rev16	r3, r3
 800e39e:	ba49      	rev16	r1, r1
 800e3a0:	ba6d      	rev16	r5, r5
 800e3a2:	e730      	b.n	800e206 <D80_GENERIC+0xa2>
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	6093      	str	r3, [r2, #8]
 800e3ac:	9b01      	ldr	r3, [sp, #4]
 800e3ae:	60d3      	str	r3, [r2, #12]
 800e3b0:	9b02      	ldr	r3, [sp, #8]
 800e3b2:	61d3      	str	r3, [r2, #28]
 800e3b4:	9b04      	ldr	r3, [sp, #16]
 800e3b6:	6113      	str	r3, [r2, #16]
 800e3b8:	9b05      	ldr	r3, [sp, #20]
 800e3ba:	6153      	str	r3, [r2, #20]
 800e3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3be:	6193      	str	r3, [r2, #24]
 800e3c0:	b00b      	add	sp, #44	; 0x2c
 800e3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c6:	bf00      	nop
 800e3c8:	002d0024 	.word	0x002d0024
 800e3cc:	001c0015 	.word	0x001c0015
 800e3d0:	000f000a 	.word	0x000f000a
 800e3d4:	00060003 	.word	0x00060003
 800e3d8:	0037003f 	.word	0x0037003f
 800e3dc:	00450049 	.word	0x00450049
 800e3e0:	00490045 	.word	0x00490045
 800e3e4:	003f0037 	.word	0x003f0037
 800e3e8:	00030006 	.word	0x00030006
 800e3ec:	000a000f 	.word	0x000a000f
 800e3f0:	0015001c 	.word	0x0015001c
 800e3f4:	0024002d 	.word	0x0024002d
 800e3f8:	24000000 	.word	0x24000000

0800e3fc <D128_GENERIC>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	b08d      	sub	sp, #52	; 0x34
 800e402:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e404:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800e408:	9109      	str	r1, [sp, #36]	; 0x24
 800e40a:	6911      	ldr	r1, [r2, #16]
 800e40c:	9201      	str	r2, [sp, #4]
 800e40e:	9106      	str	r1, [sp, #24]
 800e410:	6951      	ldr	r1, [r2, #20]
 800e412:	9107      	str	r1, [sp, #28]
 800e414:	6991      	ldr	r1, [r2, #24]
 800e416:	910b      	str	r1, [sp, #44]	; 0x2c
 800e418:	6891      	ldr	r1, [r2, #8]
 800e41a:	9103      	str	r1, [sp, #12]
 800e41c:	68d1      	ldr	r1, [r2, #12]
 800e41e:	9102      	str	r1, [sp, #8]
 800e420:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e422:	9108      	str	r1, [sp, #32]
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 8183 	beq.w	800e730 <D128_GENERIC+0x334>
 800e42a:	2300      	movs	r3, #0
 800e42c:	6a12      	ldr	r2, [r2, #32]
 800e42e:	4681      	mov	r9, r0
 800e430:	920a      	str	r2, [sp, #40]	; 0x28
 800e432:	e9cd a304 	strd	sl, r3, [sp, #16]
 800e436:	e165      	b.n	800e704 <D128_GENERIC+0x308>
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	f899 b000 	ldrb.w	fp, [r9]
 800e43e:	b213      	sxth	r3, r2
 800e440:	4255      	negs	r5, r2
 800e442:	f819 0002 	ldrb.w	r0, [r9, r2]
 800e446:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e44a:	009f      	lsls	r7, r3, #2
 800e44c:	eb09 0402 	add.w	r4, r9, r2
 800e450:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800e454:	f819 8002 	ldrb.w	r8, [r9, r2]
 800e458:	443b      	add	r3, r7
 800e45a:	1962      	adds	r2, r4, r5
 800e45c:	5d64      	ldrb	r4, [r4, r5]
 800e45e:	eb02 0c03 	add.w	ip, r2, r3
 800e462:	0424      	lsls	r4, r4, #16
 800e464:	5cd3      	ldrb	r3, [r2, r3]
 800e466:	eb0c 0e05 	add.w	lr, ip, r5
 800e46a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800e46e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800e472:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800e476:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800e47a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800e47e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800e482:	eb0c 0e06 	add.w	lr, ip, r6
 800e486:	f81c a006 	ldrb.w	sl, [ip, r6]
 800e48a:	0412      	lsls	r2, r2, #16
 800e48c:	445c      	add	r4, fp
 800e48e:	eb0e 0c05 	add.w	ip, lr, r5
 800e492:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800e496:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800e49a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800e49e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800e4a2:	041b      	lsls	r3, r3, #16
 800e4a4:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800e4a8:	eb00 0b06 	add.w	fp, r0, r6
 800e4ac:	5d80      	ldrb	r0, [r0, r6]
 800e4ae:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800e4b2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800e4b6:	eb0b 0a05 	add.w	sl, fp, r5
 800e4ba:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800e4be:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800e4c2:	0436      	lsls	r6, r6, #16
 800e4c4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800e4c8:	4442      	add	r2, r8
 800e4ca:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800e4ce:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800e4d2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800e4d6:	44b9      	add	r9, r7
 800e4d8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800e4dc:	4463      	add	r3, ip
 800e4de:	eb06 0508 	add.w	r5, r6, r8
 800e4e2:	b2e7      	uxtb	r7, r4
 800e4e4:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800e4e8:	499b      	ldr	r1, [pc, #620]	; (800e758 <D128_GENERIC+0x35c>)
 800e4ea:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800e4ee:	0e24      	lsrs	r4, r4, #24
 800e4f0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800e4f4:	b2d7      	uxtb	r7, r2
 800e4f6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800e4fa:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800e4fe:	9904      	ldr	r1, [sp, #16]
 800e500:	4461      	add	r1, ip
 800e502:	468c      	mov	ip, r1
 800e504:	4994      	ldr	r1, [pc, #592]	; (800e758 <D128_GENERIC+0x35c>)
 800e506:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800e50a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800e50e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800e512:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e516:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800e51a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800e51e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800e522:	0e12      	lsrs	r2, r2, #24
 800e524:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800e528:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800e52c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800e530:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e534:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800e538:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e542:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800e546:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e54a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e54e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800e552:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800e556:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800e55a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800e55e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e562:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800e566:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800e56a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800e56e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e572:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800e576:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e57a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800e57e:	0e1b      	lsrs	r3, r3, #24
 800e580:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800e584:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e588:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e58c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800e590:	b2eb      	uxtb	r3, r5
 800e592:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e596:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800e59a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800e59e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e5a2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800e5a6:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800e5aa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800e5ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e5b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e5b6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800e5ba:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800e5be:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800e5c2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800e5c6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800e5ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e5ce:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800e5d2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e5d6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800e5da:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800e5de:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800e5e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e5e6:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800e5ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e5ee:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800e5f2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800e5f6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800e5fa:	9104      	str	r1, [sp, #16]
 800e5fc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800e600:	9902      	ldr	r1, [sp, #8]
 800e602:	4a56      	ldr	r2, [pc, #344]	; (800e75c <D128_GENERIC+0x360>)
 800e604:	fb2b 1202 	smlad	r2, fp, r2, r1
 800e608:	4955      	ldr	r1, [pc, #340]	; (800e760 <D128_GENERIC+0x364>)
 800e60a:	fb28 2201 	smlad	r2, r8, r1, r2
 800e60e:	4955      	ldr	r1, [pc, #340]	; (800e764 <D128_GENERIC+0x368>)
 800e610:	fb27 2201 	smlad	r2, r7, r1, r2
 800e614:	4954      	ldr	r1, [pc, #336]	; (800e768 <D128_GENERIC+0x36c>)
 800e616:	fb26 2201 	smlad	r2, r6, r1, r2
 800e61a:	4954      	ldr	r1, [pc, #336]	; (800e76c <D128_GENERIC+0x370>)
 800e61c:	fb24 2201 	smlad	r2, r4, r1, r2
 800e620:	4953      	ldr	r1, [pc, #332]	; (800e770 <D128_GENERIC+0x374>)
 800e622:	fb20 2201 	smlad	r2, r0, r1, r2
 800e626:	4953      	ldr	r1, [pc, #332]	; (800e774 <D128_GENERIC+0x378>)
 800e628:	fb23 2201 	smlad	r2, r3, r1, r2
 800e62c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800e630:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800e634:	4950      	ldr	r1, [pc, #320]	; (800e778 <D128_GENERIC+0x37c>)
 800e636:	9a03      	ldr	r2, [sp, #12]
 800e638:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800e63c:	4a4f      	ldr	r2, [pc, #316]	; (800e77c <D128_GENERIC+0x380>)
 800e63e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800e642:	f8df c150 	ldr.w	ip, [pc, #336]	; 800e794 <D128_GENERIC+0x398>
 800e646:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800e64a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800e798 <D128_GENERIC+0x39c>
 800e64e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800e652:	f8df e148 	ldr.w	lr, [pc, #328]	; 800e79c <D128_GENERIC+0x3a0>
 800e656:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800e65a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800e7a0 <D128_GENERIC+0x3a4>
 800e65e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800e662:	f8df c140 	ldr.w	ip, [pc, #320]	; 800e7a4 <D128_GENERIC+0x3a8>
 800e666:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800e66a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800e7a8 <D128_GENERIC+0x3ac>
 800e66e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800e672:	f04f 0c01 	mov.w	ip, #1
 800e676:	9202      	str	r2, [sp, #8]
 800e678:	fb2b fb0c 	smuad	fp, fp, ip
 800e67c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800e7ac <D128_GENERIC+0x3b0>
 800e680:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800e684:	f8df c128 	ldr.w	ip, [pc, #296]	; 800e7b0 <D128_GENERIC+0x3b4>
 800e688:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800e68c:	4f3c      	ldr	r7, [pc, #240]	; (800e780 <D128_GENERIC+0x384>)
 800e68e:	fb26 bb07 	smlad	fp, r6, r7, fp
 800e692:	4f3c      	ldr	r7, [pc, #240]	; (800e784 <D128_GENERIC+0x388>)
 800e694:	fb24 bb07 	smlad	fp, r4, r7, fp
 800e698:	4f3b      	ldr	r7, [pc, #236]	; (800e788 <D128_GENERIC+0x38c>)
 800e69a:	fb20 bb07 	smlad	fp, r0, r7, fp
 800e69e:	4f3b      	ldr	r7, [pc, #236]	; (800e78c <D128_GENERIC+0x390>)
 800e6a0:	fb23 bb07 	smlad	fp, r3, r7, fp
 800e6a4:	4b3a      	ldr	r3, [pc, #232]	; (800e790 <D128_GENERIC+0x394>)
 800e6a6:	fb25 b303 	smlad	r3, r5, r3, fp
 800e6aa:	9303      	str	r3, [sp, #12]
 800e6ac:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800e6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6b2:	b183      	cbz	r3, 800e6d6 <D128_GENERIC+0x2da>
 800e6b4:	9a06      	ldr	r2, [sp, #24]
 800e6b6:	9907      	ldr	r1, [sp, #28]
 800e6b8:	4422      	add	r2, r4
 800e6ba:	9407      	str	r4, [sp, #28]
 800e6bc:	1a52      	subs	r2, r2, r1
 800e6be:	fba2 0103 	umull	r0, r1, r2, r3
 800e6c2:	17d5      	asrs	r5, r2, #31
 800e6c4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800e6c8:	fb03 1105 	mla	r1, r3, r5, r1
 800e6cc:	f141 0300 	adc.w	r3, r1, #0
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	461c      	mov	r4, r3
 800e6d4:	9306      	str	r3, [sp, #24]
 800e6d6:	9d01      	ldr	r5, [sp, #4]
 800e6d8:	01e4      	lsls	r4, r4, #7
 800e6da:	9e05      	ldr	r6, [sp, #20]
 800e6dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6e0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	9908      	ldr	r1, [sp, #32]
 800e6e6:	fb06 f000 	mul.w	r0, r6, r0
 800e6ea:	3601      	adds	r6, #1
 800e6ec:	fbc1 2304 	smlal	r2, r3, r1, r4
 800e6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6f2:	109b      	asrs	r3, r3, #2
 800e6f4:	9605      	str	r6, [sp, #20]
 800e6f6:	f303 030f 	ssat	r3, #16, r3
 800e6fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800e6fe:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800e700:	42b3      	cmp	r3, r6
 800e702:	dd13      	ble.n	800e72c <D128_GENERIC+0x330>
 800e704:	9b01      	ldr	r3, [sp, #4]
 800e706:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e708:	2a01      	cmp	r2, #1
 800e70a:	f47f ae95 	bne.w	800e438 <D128_GENERIC+0x3c>
 800e70e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e710:	f109 0610 	add.w	r6, r9, #16
 800e714:	0681      	lsls	r1, r0, #26
 800e716:	e9d9 4200 	ldrd	r4, r2, [r9]
 800e71a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800e71e:	d518      	bpl.n	800e752 <D128_GENERIC+0x356>
 800e720:	ba64      	rev16	r4, r4
 800e722:	ba52      	rev16	r2, r2
 800e724:	ba5b      	rev16	r3, r3
 800e726:	ba6d      	rev16	r5, r5
 800e728:	46b1      	mov	r9, r6
 800e72a:	e6da      	b.n	800e4e2 <D128_GENERIC+0xe6>
 800e72c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e730:	9b01      	ldr	r3, [sp, #4]
 800e732:	2000      	movs	r0, #0
 800e734:	9903      	ldr	r1, [sp, #12]
 800e736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e738:	6099      	str	r1, [r3, #8]
 800e73a:	9902      	ldr	r1, [sp, #8]
 800e73c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800e740:	60d9      	str	r1, [r3, #12]
 800e742:	9906      	ldr	r1, [sp, #24]
 800e744:	619a      	str	r2, [r3, #24]
 800e746:	6119      	str	r1, [r3, #16]
 800e748:	9907      	ldr	r1, [sp, #28]
 800e74a:	6159      	str	r1, [r3, #20]
 800e74c:	b00d      	add	sp, #52	; 0x34
 800e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	46b1      	mov	r9, r6
 800e754:	e6c5      	b.n	800e4e2 <D128_GENERIC+0xe6>
 800e756:	bf00      	nop
 800e758:	24000000 	.word	0x24000000
 800e75c:	00780069 	.word	0x00780069
 800e760:	005b004e 	.word	0x005b004e
 800e764:	00420037 	.word	0x00420037
 800e768:	002d0024 	.word	0x002d0024
 800e76c:	001c0015 	.word	0x001c0015
 800e770:	000f000a 	.word	0x000f000a
 800e774:	00060003 	.word	0x00060003
 800e778:	00880096 	.word	0x00880096
 800e77c:	00a200ac 	.word	0x00a200ac
 800e780:	0015001c 	.word	0x0015001c
 800e784:	0024002d 	.word	0x0024002d
 800e788:	00370042 	.word	0x00370042
 800e78c:	004e005b 	.word	0x004e005b
 800e790:	00690078 	.word	0x00690078
 800e794:	00b400ba 	.word	0x00b400ba
 800e798:	00be00c0 	.word	0x00be00c0
 800e79c:	00c000be 	.word	0x00c000be
 800e7a0:	00ba00b4 	.word	0x00ba00b4
 800e7a4:	00ac00a2 	.word	0x00ac00a2
 800e7a8:	00960088 	.word	0x00960088
 800e7ac:	00030006 	.word	0x00030006
 800e7b0:	000a000f 	.word	0x000a000f

0800e7b4 <D16_1CH_HTONS_VOL_HP>:
 800e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b8:	6993      	ldr	r3, [r2, #24]
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	4682      	mov	sl, r0
 800e7be:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800e7c0:	9304      	str	r3, [sp, #16]
 800e7c2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800e7c6:	69d3      	ldr	r3, [r2, #28]
 800e7c8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800e7cc:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800e7d0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800e7d4:	9403      	str	r4, [sp, #12]
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d054      	beq.n	800e884 <D16_1CH_HTONS_VOL_HP+0xd0>
 800e7da:	f1a1 0902 	sub.w	r9, r1, #2
 800e7de:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800e7e2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800e890 <D16_1CH_HTONS_VOL_HP+0xdc>
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	9101      	str	r1, [sp, #4]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	f8cd b008 	str.w	fp, [sp, #8]
 800e7f0:	9205      	str	r2, [sp, #20]
 800e7f2:	f850 3b02 	ldr.w	r3, [r0], #2
 800e7f6:	ba5b      	rev16	r3, r3
 800e7f8:	b2dc      	uxtb	r4, r3
 800e7fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e7fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e802:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800e806:	4419      	add	r1, r3
 800e808:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800e80c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800e810:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800e814:	0aa1      	lsrs	r1, r4, #10
 800e816:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800e81a:	4a1b      	ldr	r2, [pc, #108]	; (800e888 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800e81c:	fb23 5402 	smlad	r4, r3, r2, r5
 800e820:	4a1a      	ldr	r2, [pc, #104]	; (800e88c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800e822:	fb23 f502 	smuad	r5, r3, r2
 800e826:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800e82a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800e82e:	f04f 0b00 	mov.w	fp, #0
 800e832:	19a2      	adds	r2, r4, r6
 800e834:	eba2 020c 	sub.w	r2, r2, ip
 800e838:	46a4      	mov	ip, r4
 800e83a:	17d7      	asrs	r7, r2, #31
 800e83c:	fba2 230e 	umull	r2, r3, r2, lr
 800e840:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800e844:	fb0e 3307 	mla	r3, lr, r7, r3
 800e848:	f143 0700 	adc.w	r7, r3, #0
 800e84c:	9b02      	ldr	r3, [sp, #8]
 800e84e:	047a      	lsls	r2, r7, #17
 800e850:	007e      	lsls	r6, r7, #1
 800e852:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800e856:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800e85a:	f303 030f 	ssat	r3, #16, r3
 800e85e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800e862:	9b01      	ldr	r3, [sp, #4]
 800e864:	4298      	cmp	r0, r3
 800e866:	d1c4      	bne.n	800e7f2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800e868:	460b      	mov	r3, r1
 800e86a:	9a05      	ldr	r2, [sp, #20]
 800e86c:	2000      	movs	r0, #0
 800e86e:	9903      	ldr	r1, [sp, #12]
 800e870:	61d3      	str	r3, [r2, #28]
 800e872:	9b04      	ldr	r3, [sp, #16]
 800e874:	6095      	str	r5, [r2, #8]
 800e876:	60d1      	str	r1, [r2, #12]
 800e878:	6193      	str	r3, [r2, #24]
 800e87a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800e87e:	b007      	add	sp, #28
 800e880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e884:	4664      	mov	r4, ip
 800e886:	e7f1      	b.n	800e86c <D16_1CH_HTONS_VOL_HP+0xb8>
 800e888:	00030001 	.word	0x00030001
 800e88c:	00010003 	.word	0x00010003
 800e890:	24000000 	.word	0x24000000

0800e894 <D24_1CH_HTONS_VOL_HP>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800e89a:	b089      	sub	sp, #36	; 0x24
 800e89c:	6993      	ldr	r3, [r2, #24]
 800e89e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800e8a0:	9604      	str	r6, [sp, #16]
 800e8a2:	6a16      	ldr	r6, [r2, #32]
 800e8a4:	9306      	str	r3, [sp, #24]
 800e8a6:	9505      	str	r5, [sp, #20]
 800e8a8:	69d3      	ldr	r3, [r2, #28]
 800e8aa:	9600      	str	r6, [sp, #0]
 800e8ac:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800e8b0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800e8b4:	2d00      	cmp	r5, #0
 800e8b6:	f000 8083 	beq.w	800e9c0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800e8ba:	9207      	str	r2, [sp, #28]
 800e8bc:	2600      	movs	r6, #0
 800e8be:	4622      	mov	r2, r4
 800e8c0:	f1a1 0b02 	sub.w	fp, r1, #2
 800e8c4:	4f3f      	ldr	r7, [pc, #252]	; (800e9c4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800e8c6:	461d      	mov	r5, r3
 800e8c8:	f8cd a00c 	str.w	sl, [sp, #12]
 800e8cc:	9c00      	ldr	r4, [sp, #0]
 800e8ce:	e056      	b.n	800e97e <D24_1CH_HTONS_VOL_HP+0xea>
 800e8d0:	7841      	ldrb	r1, [r0, #1]
 800e8d2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800e8d6:	3002      	adds	r0, #2
 800e8d8:	4488      	add	r8, r1
 800e8da:	fa5f f388 	uxtb.w	r3, r8
 800e8de:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800e8e2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800e8e6:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800e8ea:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800e8ee:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800e8f2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800e8f6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800e8fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e8fe:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800e902:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800e906:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e90a:	492f      	ldr	r1, [pc, #188]	; (800e9c8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800e90c:	fb23 e901 	smlad	r9, r3, r1, lr
 800e910:	492e      	ldr	r1, [pc, #184]	; (800e9cc <D24_1CH_HTONS_VOL_HP+0x138>)
 800e912:	fb23 ce01 	smlad	lr, r3, r1, ip
 800e916:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800e91a:	2101      	movs	r1, #1
 800e91c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800e920:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800e924:	fb23 f301 	smuad	r3, r3, r1
 800e928:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800e92c:	eb08 0c03 	add.w	ip, r8, r3
 800e930:	9b03      	ldr	r3, [sp, #12]
 800e932:	f04f 0a00 	mov.w	sl, #0
 800e936:	440a      	add	r2, r1
 800e938:	3601      	adds	r6, #1
 800e93a:	9103      	str	r1, [sp, #12]
 800e93c:	1ad2      	subs	r2, r2, r3
 800e93e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800e942:	fba2 2304 	umull	r2, r3, r2, r4
 800e946:	e9cd 2300 	strd	r2, r3, [sp]
 800e94a:	fb04 3309 	mla	r3, r4, r9, r3
 800e94e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e958:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e95c:	f143 0300 	adc.w	r3, r3, #0
 800e960:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800e964:	005a      	lsls	r2, r3, #1
 800e966:	9b04      	ldr	r3, [sp, #16]
 800e968:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800e96c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800e970:	f303 030f 	ssat	r3, #16, r3
 800e974:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800e978:	9b05      	ldr	r3, [sp, #20]
 800e97a:	429e      	cmp	r6, r3
 800e97c:	d010      	beq.n	800e9a0 <D24_1CH_HTONS_VOL_HP+0x10c>
 800e97e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800e982:	f016 0f01 	tst.w	r6, #1
 800e986:	7801      	ldrb	r1, [r0, #0]
 800e988:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800e98c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800e990:	d09e      	beq.n	800e8d0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800e992:	f890 8002 	ldrb.w	r8, [r0, #2]
 800e996:	3004      	adds	r0, #4
 800e998:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800e99c:	4488      	add	r8, r1
 800e99e:	e79c      	b.n	800e8da <D24_1CH_HTONS_VOL_HP+0x46>
 800e9a0:	4614      	mov	r4, r2
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	9a07      	ldr	r2, [sp, #28]
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	61d3      	str	r3, [r2, #28]
 800e9aa:	9b06      	ldr	r3, [sp, #24]
 800e9ac:	f8c2 c008 	str.w	ip, [r2, #8]
 800e9b0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e9b4:	6193      	str	r3, [r2, #24]
 800e9b6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800e9ba:	b009      	add	sp, #36	; 0x24
 800e9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c0:	4651      	mov	r1, sl
 800e9c2:	e7f0      	b.n	800e9a6 <D24_1CH_HTONS_VOL_HP+0x112>
 800e9c4:	24000000 	.word	0x24000000
 800e9c8:	00030001 	.word	0x00030001
 800e9cc:	00060007 	.word	0x00060007

0800e9d0 <D32_1CH_HTONS_VOL_HP>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	6993      	ldr	r3, [r2, #24]
 800e9d6:	b087      	sub	sp, #28
 800e9d8:	4683      	mov	fp, r0
 800e9da:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800e9dc:	9304      	str	r3, [sp, #16]
 800e9de:	69d5      	ldr	r5, [r2, #28]
 800e9e0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e9e2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800e9e6:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800e9ea:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d077      	beq.n	800eae2 <D32_1CH_HTONS_VOL_HP+0x112>
 800e9f2:	460f      	mov	r7, r1
 800e9f4:	46f1      	mov	r9, lr
 800e9f6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800e9fa:	f8cd 8000 	str.w	r8, [sp]
 800e9fe:	4e3a      	ldr	r6, [pc, #232]	; (800eae8 <D32_1CH_HTONS_VOL_HP+0x118>)
 800ea00:	469e      	mov	lr, r3
 800ea02:	46a0      	mov	r8, r4
 800ea04:	9103      	str	r1, [sp, #12]
 800ea06:	9205      	str	r2, [sp, #20]
 800ea08:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ea0c:	ba64      	rev16	r4, r4
 800ea0e:	b2e0      	uxtb	r0, r4
 800ea10:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ea14:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ea18:	0e24      	lsrs	r4, r4, #24
 800ea1a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800ea1e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ea22:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800ea26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ea2a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800ea2e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ea32:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ea36:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ea3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea3e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ea42:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ea46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea4a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800ea4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ea52:	4826      	ldr	r0, [pc, #152]	; (800eaec <D32_1CH_HTONS_VOL_HP+0x11c>)
 800ea54:	fb23 c400 	smlad	r4, r3, r0, ip
 800ea58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ea5c:	fb21 4402 	smlad	r4, r1, r2, r4
 800ea60:	4823      	ldr	r0, [pc, #140]	; (800eaf0 <D32_1CH_HTONS_VOL_HP+0x120>)
 800ea62:	fb23 ec00 	smlad	ip, r3, r0, lr
 800ea66:	4823      	ldr	r0, [pc, #140]	; (800eaf4 <D32_1CH_HTONS_VOL_HP+0x124>)
 800ea68:	fb21 cc00 	smlad	ip, r1, r0, ip
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	fb23 f302 	smuad	r3, r3, r2
 800ea72:	4821      	ldr	r0, [pc, #132]	; (800eaf8 <D32_1CH_HTONS_VOL_HP+0x128>)
 800ea74:	fb21 3e00 	smlad	lr, r1, r0, r3
 800ea78:	9b00      	ldr	r3, [sp, #0]
 800ea7a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800ea7e:	4423      	add	r3, r4
 800ea80:	eba3 0209 	sub.w	r2, r3, r9
 800ea84:	46a1      	mov	r9, r4
 800ea86:	17d1      	asrs	r1, r2, #31
 800ea88:	fba2 230a 	umull	r2, r3, r2, sl
 800ea8c:	e9cd 2300 	strd	r2, r3, [sp]
 800ea90:	fb0a 3301 	mla	r3, sl, r1, r3
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea9a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ea9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eaa2:	f143 0300 	adc.w	r3, r3, #0
 800eaa6:	0399      	lsls	r1, r3, #14
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	2300      	movs	r3, #0
 800eaae:	fbc8 2301 	smlal	r2, r3, r8, r1
 800eab2:	109b      	asrs	r3, r3, #2
 800eab4:	f303 030f 	ssat	r3, #16, r3
 800eab8:	f827 3b02 	strh.w	r3, [r7], #2
 800eabc:	9b03      	ldr	r3, [sp, #12]
 800eabe:	429f      	cmp	r7, r3
 800eac0:	d1a2      	bne.n	800ea08 <D32_1CH_HTONS_VOL_HP+0x38>
 800eac2:	4673      	mov	r3, lr
 800eac4:	f8dd 8000 	ldr.w	r8, [sp]
 800eac8:	9a05      	ldr	r2, [sp, #20]
 800eaca:	6093      	str	r3, [r2, #8]
 800eacc:	2000      	movs	r0, #0
 800eace:	9b04      	ldr	r3, [sp, #16]
 800ead0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ead4:	61d5      	str	r5, [r2, #28]
 800ead6:	6193      	str	r3, [r2, #24]
 800ead8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800eadc:	b007      	add	sp, #28
 800eade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae2:	4674      	mov	r4, lr
 800eae4:	e7f1      	b.n	800eaca <D32_1CH_HTONS_VOL_HP+0xfa>
 800eae6:	bf00      	nop
 800eae8:	24000000 	.word	0x24000000
 800eaec:	00060003 	.word	0x00060003
 800eaf0:	000a000c 	.word	0x000a000c
 800eaf4:	000c000a 	.word	0x000c000a
 800eaf8:	00030006 	.word	0x00030006

0800eafc <D48_1CH_HTONS_VOL_HP>:
 800eafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800eb02:	b087      	sub	sp, #28
 800eb04:	6993      	ldr	r3, [r2, #24]
 800eb06:	9701      	str	r7, [sp, #4]
 800eb08:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800eb0a:	6a17      	ldr	r7, [r2, #32]
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	69d6      	ldr	r6, [r2, #28]
 800eb10:	9702      	str	r7, [sp, #8]
 800eb12:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800eb16:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800eb1a:	2d00      	cmp	r5, #0
 800eb1c:	f000 8093 	beq.w	800ec46 <D48_1CH_HTONS_VOL_HP+0x14a>
 800eb20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb24:	f1a1 0b02 	sub.w	fp, r1, #2
 800eb28:	46f2      	mov	sl, lr
 800eb2a:	4f48      	ldr	r7, [pc, #288]	; (800ec4c <D48_1CH_HTONS_VOL_HP+0x150>)
 800eb2c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800eb30:	469e      	mov	lr, r3
 800eb32:	9205      	str	r2, [sp, #20]
 800eb34:	9103      	str	r1, [sp, #12]
 800eb36:	e9d0 3200 	ldrd	r3, r2, [r0]
 800eb3a:	3006      	adds	r0, #6
 800eb3c:	ba5b      	rev16	r3, r3
 800eb3e:	fa92 f992 	rev16.w	r9, r2
 800eb42:	b2dd      	uxtb	r5, r3
 800eb44:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800eb48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb4c:	0e1b      	lsrs	r3, r3, #24
 800eb4e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800eb52:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800eb56:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800eb5a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800eb5e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800eb62:	fa5f f289 	uxtb.w	r2, r9
 800eb66:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800eb6a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800eb6e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800eb72:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800eb76:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800eb7a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800eb7e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800eb82:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800eb86:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800eb8a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800eb8e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800eb92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb96:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800eb9a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800eb9e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800eba2:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800eba6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800ebaa:	4b29      	ldr	r3, [pc, #164]	; (800ec50 <D48_1CH_HTONS_VOL_HP+0x154>)
 800ebac:	fb28 c103 	smlad	r1, r8, r3, ip
 800ebb0:	4b28      	ldr	r3, [pc, #160]	; (800ec54 <D48_1CH_HTONS_VOL_HP+0x158>)
 800ebb2:	fb25 1103 	smlad	r1, r5, r3, r1
 800ebb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ebba:	fb22 1903 	smlad	r9, r2, r3, r1
 800ebbe:	4b26      	ldr	r3, [pc, #152]	; (800ec58 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800ebc0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800ebc4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800ebc8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800ebcc:	4b23      	ldr	r3, [pc, #140]	; (800ec5c <D48_1CH_HTONS_VOL_HP+0x160>)
 800ebce:	fb22 cc03 	smlad	ip, r2, r3, ip
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	fb28 f801 	smuad	r8, r8, r1
 800ebd8:	4b21      	ldr	r3, [pc, #132]	; (800ec60 <D48_1CH_HTONS_VOL_HP+0x164>)
 800ebda:	fb25 8503 	smlad	r5, r5, r3, r8
 800ebde:	4b21      	ldr	r3, [pc, #132]	; (800ec64 <D48_1CH_HTONS_VOL_HP+0x168>)
 800ebe0:	fb22 5e03 	smlad	lr, r2, r3, r5
 800ebe4:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800ebe8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ebec:	190a      	adds	r2, r1, r4
 800ebee:	9c02      	ldr	r4, [sp, #8]
 800ebf0:	eba2 020a 	sub.w	r2, r2, sl
 800ebf4:	468a      	mov	sl, r1
 800ebf6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ebfa:	fba2 2304 	umull	r2, r3, r2, r4
 800ebfe:	fb04 3309 	mla	r3, r4, r9, r3
 800ec02:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800ec06:	f04f 0900 	mov.w	r9, #0
 800ec0a:	f143 0500 	adc.w	r5, r3, #0
 800ec0e:	9b01      	ldr	r3, [sp, #4]
 800ec10:	032a      	lsls	r2, r5, #12
 800ec12:	006c      	lsls	r4, r5, #1
 800ec14:	fbc3 8902 	smlal	r8, r9, r3, r2
 800ec18:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800ec1c:	f303 030f 	ssat	r3, #16, r3
 800ec20:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800ec24:	9b03      	ldr	r3, [sp, #12]
 800ec26:	4283      	cmp	r3, r0
 800ec28:	d185      	bne.n	800eb36 <D48_1CH_HTONS_VOL_HP+0x3a>
 800ec2a:	4673      	mov	r3, lr
 800ec2c:	9a05      	ldr	r2, [sp, #20]
 800ec2e:	6093      	str	r3, [r2, #8]
 800ec30:	2000      	movs	r0, #0
 800ec32:	9b04      	ldr	r3, [sp, #16]
 800ec34:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ec38:	61d6      	str	r6, [r2, #28]
 800ec3a:	6193      	str	r3, [r2, #24]
 800ec3c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800ec40:	b007      	add	sp, #28
 800ec42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec46:	4671      	mov	r1, lr
 800ec48:	e7f1      	b.n	800ec2e <D48_1CH_HTONS_VOL_HP+0x132>
 800ec4a:	bf00      	nop
 800ec4c:	24000000 	.word	0x24000000
 800ec50:	000f000a 	.word	0x000f000a
 800ec54:	00060003 	.word	0x00060003
 800ec58:	00150019 	.word	0x00150019
 800ec5c:	00190015 	.word	0x00190015
 800ec60:	00030006 	.word	0x00030006
 800ec64:	000a000f 	.word	0x000a000f

0800ec68 <D64_1CH_HTONS_VOL_HP>:
 800ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ec6e:	b089      	sub	sp, #36	; 0x24
 800ec70:	6993      	ldr	r3, [r2, #24]
 800ec72:	4686      	mov	lr, r0
 800ec74:	9503      	str	r5, [sp, #12]
 800ec76:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ec78:	6a15      	ldr	r5, [r2, #32]
 800ec7a:	9306      	str	r3, [sp, #24]
 800ec7c:	69d6      	ldr	r6, [r2, #28]
 800ec7e:	9504      	str	r5, [sp, #16]
 800ec80:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800ec84:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	f000 80a4 	beq.w	800edd6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800ec8e:	460f      	mov	r7, r1
 800ec90:	46f1      	mov	r9, lr
 800ec92:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ec96:	4d56      	ldr	r5, [pc, #344]	; (800edf0 <D64_1CH_HTONS_VOL_HP+0x188>)
 800ec98:	46a2      	mov	sl, r4
 800ec9a:	469e      	mov	lr, r3
 800ec9c:	9105      	str	r1, [sp, #20]
 800ec9e:	9207      	str	r2, [sp, #28]
 800eca0:	f859 1b08 	ldr.w	r1, [r9], #8
 800eca4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800eca8:	ba49      	rev16	r1, r1
 800ecaa:	fa93 fb93 	rev16.w	fp, r3
 800ecae:	b2cb      	uxtb	r3, r1
 800ecb0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800ecb4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800ecb8:	0e09      	lsrs	r1, r1, #24
 800ecba:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800ecbe:	fa5f f38b 	uxtb.w	r3, fp
 800ecc2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ecc6:	4426      	add	r6, r4
 800ecc8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800eccc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800ecd0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800ecd4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800ecd8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ecdc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ece0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800ece4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ece8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ecec:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800ecf0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ecf4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800ecf8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800ecfc:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800ed00:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ed04:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ed08:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800ed0c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800ed10:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ed14:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800ed18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ed1c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ed20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed24:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800ed28:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800ed2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ed30:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800ed34:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800ed38:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800ed3c:	482d      	ldr	r0, [pc, #180]	; (800edf4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800ed3e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800ed42:	482d      	ldr	r0, [pc, #180]	; (800edf8 <D64_1CH_HTONS_VOL_HP+0x190>)
 800ed44:	fb21 cc00 	smlad	ip, r1, r0, ip
 800ed48:	482c      	ldr	r0, [pc, #176]	; (800edfc <D64_1CH_HTONS_VOL_HP+0x194>)
 800ed4a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800ed4e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ed52:	fb2b c404 	smlad	r4, fp, r4, ip
 800ed56:	482a      	ldr	r0, [pc, #168]	; (800ee00 <D64_1CH_HTONS_VOL_HP+0x198>)
 800ed58:	fb22 ec00 	smlad	ip, r2, r0, lr
 800ed5c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800ed60:	4828      	ldr	r0, [pc, #160]	; (800ee04 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800ed62:	fb21 cc00 	smlad	ip, r1, r0, ip
 800ed66:	fb23 cc10 	smladx	ip, r3, r0, ip
 800ed6a:	f04f 0e01 	mov.w	lr, #1
 800ed6e:	fb22 f20e 	smuad	r2, r2, lr
 800ed72:	4825      	ldr	r0, [pc, #148]	; (800ee08 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800ed74:	fb21 2100 	smlad	r1, r1, r0, r2
 800ed78:	4a24      	ldr	r2, [pc, #144]	; (800ee0c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800ed7a:	fb23 1302 	smlad	r3, r3, r2, r1
 800ed7e:	4a24      	ldr	r2, [pc, #144]	; (800ee10 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800ed80:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800ed84:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800ed88:	eb04 0208 	add.w	r2, r4, r8
 800ed8c:	eba2 020a 	sub.w	r2, r2, sl
 800ed90:	46a2      	mov	sl, r4
 800ed92:	4610      	mov	r0, r2
 800ed94:	17d1      	asrs	r1, r2, #31
 800ed96:	e9cd 0100 	strd	r0, r1, [sp]
 800ed9a:	9904      	ldr	r1, [sp, #16]
 800ed9c:	9801      	ldr	r0, [sp, #4]
 800ed9e:	fba2 2301 	umull	r2, r3, r2, r1
 800eda2:	fb01 3300 	mla	r3, r1, r0, r3
 800eda6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800edaa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800edae:	f143 0100 	adc.w	r1, r3, #0
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	02ca      	lsls	r2, r1, #11
 800edb6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800edba:	2100      	movs	r1, #0
 800edbc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800edc0:	108b      	asrs	r3, r1, #2
 800edc2:	f303 030f 	ssat	r3, #16, r3
 800edc6:	f827 3b02 	strh.w	r3, [r7], #2
 800edca:	9b05      	ldr	r3, [sp, #20]
 800edcc:	429f      	cmp	r7, r3
 800edce:	f47f af67 	bne.w	800eca0 <D64_1CH_HTONS_VOL_HP+0x38>
 800edd2:	4673      	mov	r3, lr
 800edd4:	9a07      	ldr	r2, [sp, #28]
 800edd6:	6093      	str	r3, [r2, #8]
 800edd8:	2000      	movs	r0, #0
 800edda:	9b06      	ldr	r3, [sp, #24]
 800eddc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ede0:	61d6      	str	r6, [r2, #28]
 800ede2:	6193      	str	r3, [r2, #24]
 800ede4:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800ede8:	b009      	add	sp, #36	; 0x24
 800edea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edee:	bf00      	nop
 800edf0:	24000000 	.word	0x24000000
 800edf4:	001c0015 	.word	0x001c0015
 800edf8:	000f000a 	.word	0x000f000a
 800edfc:	00060003 	.word	0x00060003
 800ee00:	0024002a 	.word	0x0024002a
 800ee04:	002e0030 	.word	0x002e0030
 800ee08:	00030006 	.word	0x00030006
 800ee0c:	000a000f 	.word	0x000a000f
 800ee10:	0015001c 	.word	0x0015001c

0800ee14 <D80_1CH_HTONS_VOL_HP>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	6913      	ldr	r3, [r2, #16]
 800ee1a:	b089      	sub	sp, #36	; 0x24
 800ee1c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	9603      	str	r6, [sp, #12]
 800ee22:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ee24:	6a16      	ldr	r6, [r2, #32]
 800ee26:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800ee2a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800ee2e:	9306      	str	r3, [sp, #24]
 800ee30:	9604      	str	r6, [sp, #16]
 800ee32:	69d3      	ldr	r3, [r2, #28]
 800ee34:	2c00      	cmp	r4, #0
 800ee36:	f000 80ce 	beq.w	800efd6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800ee3a:	3902      	subs	r1, #2
 800ee3c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ee40:	4e66      	ldr	r6, [pc, #408]	; (800efdc <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800ee42:	469e      	mov	lr, r3
 800ee44:	9102      	str	r1, [sp, #8]
 800ee46:	46aa      	mov	sl, r5
 800ee48:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800ee4c:	9207      	str	r2, [sp, #28]
 800ee4e:	9105      	str	r1, [sp, #20]
 800ee50:	6883      	ldr	r3, [r0, #8]
 800ee52:	e9d0 4200 	ldrd	r4, r2, [r0]
 800ee56:	300a      	adds	r0, #10
 800ee58:	ba64      	rev16	r4, r4
 800ee5a:	ba52      	rev16	r2, r2
 800ee5c:	fa93 fb93 	rev16.w	fp, r3
 800ee60:	b2e5      	uxtb	r5, r4
 800ee62:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ee66:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800ee6a:	0e24      	lsrs	r4, r4, #24
 800ee6c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800ee70:	b2d5      	uxtb	r5, r2
 800ee72:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ee76:	44c6      	add	lr, r8
 800ee78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800ee7c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800ee80:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800ee84:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800ee88:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ee8c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800ee90:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ee94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee98:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800ee9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800eea0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800eea4:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800eea8:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800eeac:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800eeb0:	0e12      	lsrs	r2, r2, #24
 800eeb2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800eeb6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800eeba:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800eebe:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800eec2:	fa5f fb8b 	uxtb.w	fp, fp
 800eec6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800eeca:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800eece:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800eed2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800eed6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800eeda:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800eede:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800eee2:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800eee6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800eeea:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800eeee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800eef2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800eef6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800eefa:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800eefe:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800ef02:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800ef06:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800ef0a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800ef0e:	4934      	ldr	r1, [pc, #208]	; (800efe0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800ef10:	fb23 cc01 	smlad	ip, r3, r1, ip
 800ef14:	4933      	ldr	r1, [pc, #204]	; (800efe4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800ef16:	fb24 cc01 	smlad	ip, r4, r1, ip
 800ef1a:	4933      	ldr	r1, [pc, #204]	; (800efe8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800ef1c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800ef20:	4932      	ldr	r1, [pc, #200]	; (800efec <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800ef22:	fb22 cc01 	smlad	ip, r2, r1, ip
 800ef26:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ef2a:	fb2b c901 	smlad	r9, fp, r1, ip
 800ef2e:	4930      	ldr	r1, [pc, #192]	; (800eff0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800ef30:	fb23 7701 	smlad	r7, r3, r1, r7
 800ef34:	492f      	ldr	r1, [pc, #188]	; (800eff4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800ef36:	fb24 7701 	smlad	r7, r4, r1, r7
 800ef3a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800ef3e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800ef42:	492d      	ldr	r1, [pc, #180]	; (800eff8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800ef44:	fb22 cc01 	smlad	ip, r2, r1, ip
 800ef48:	492c      	ldr	r1, [pc, #176]	; (800effc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800ef4a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800ef4e:	2101      	movs	r1, #1
 800ef50:	fb23 f301 	smuad	r3, r3, r1
 800ef54:	492a      	ldr	r1, [pc, #168]	; (800f000 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800ef56:	fb24 3401 	smlad	r4, r4, r1, r3
 800ef5a:	492a      	ldr	r1, [pc, #168]	; (800f004 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800ef5c:	fb28 4101 	smlad	r1, r8, r1, r4
 800ef60:	4f29      	ldr	r7, [pc, #164]	; (800f008 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800ef62:	fb22 1207 	smlad	r2, r2, r7, r1
 800ef66:	4f29      	ldr	r7, [pc, #164]	; (800f00c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800ef68:	fb2b 2707 	smlad	r7, fp, r7, r2
 800ef6c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	9c04      	ldr	r4, [sp, #16]
 800ef74:	440b      	add	r3, r1
 800ef76:	eba3 020a 	sub.w	r2, r3, sl
 800ef7a:	468a      	mov	sl, r1
 800ef7c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ef80:	fba2 2304 	umull	r2, r3, r2, r4
 800ef84:	fb04 3309 	mla	r3, r4, r9, r3
 800ef88:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800ef8c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ef90:	f143 0500 	adc.w	r5, r3, #0
 800ef94:	006b      	lsls	r3, r5, #1
 800ef96:	02aa      	lsls	r2, r5, #10
 800ef98:	2500      	movs	r5, #0
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	fbc3 4502 	smlal	r4, r5, r3, r2
 800efa2:	9a02      	ldr	r2, [sp, #8]
 800efa4:	10ab      	asrs	r3, r5, #2
 800efa6:	f303 030f 	ssat	r3, #16, r3
 800efaa:	f822 3f02 	strh.w	r3, [r2, #2]!
 800efae:	9b05      	ldr	r3, [sp, #20]
 800efb0:	9202      	str	r2, [sp, #8]
 800efb2:	4298      	cmp	r0, r3
 800efb4:	f47f af4c 	bne.w	800ee50 <D80_1CH_HTONS_VOL_HP+0x3c>
 800efb8:	4673      	mov	r3, lr
 800efba:	9a07      	ldr	r2, [sp, #28]
 800efbc:	61d3      	str	r3, [r2, #28]
 800efbe:	2000      	movs	r0, #0
 800efc0:	9b01      	ldr	r3, [sp, #4]
 800efc2:	6097      	str	r7, [r2, #8]
 800efc4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800efc8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800efcc:	9b06      	ldr	r3, [sp, #24]
 800efce:	6193      	str	r3, [r2, #24]
 800efd0:	b009      	add	sp, #36	; 0x24
 800efd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd6:	4629      	mov	r1, r5
 800efd8:	e7f0      	b.n	800efbc <D80_1CH_HTONS_VOL_HP+0x1a8>
 800efda:	bf00      	nop
 800efdc:	24000000 	.word	0x24000000
 800efe0:	002d0024 	.word	0x002d0024
 800efe4:	001c0015 	.word	0x001c0015
 800efe8:	000f000a 	.word	0x000f000a
 800efec:	00060003 	.word	0x00060003
 800eff0:	0037003f 	.word	0x0037003f
 800eff4:	00450049 	.word	0x00450049
 800eff8:	00490045 	.word	0x00490045
 800effc:	003f0037 	.word	0x003f0037
 800f000:	00030006 	.word	0x00030006
 800f004:	000a000f 	.word	0x000a000f
 800f008:	0015001c 	.word	0x0015001c
 800f00c:	0024002d 	.word	0x0024002d

0800f010 <D128_1CH_HTONS_VOL_HP>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	6914      	ldr	r4, [r2, #16]
 800f016:	b08d      	sub	sp, #52	; 0x34
 800f018:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800f01a:	9404      	str	r4, [sp, #16]
 800f01c:	6954      	ldr	r4, [r2, #20]
 800f01e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f020:	9405      	str	r4, [sp, #20]
 800f022:	6994      	ldr	r4, [r2, #24]
 800f024:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800f028:	940a      	str	r4, [sp, #40]	; 0x28
 800f02a:	6894      	ldr	r4, [r2, #8]
 800f02c:	9403      	str	r4, [sp, #12]
 800f02e:	68d4      	ldr	r4, [r2, #12]
 800f030:	9402      	str	r4, [sp, #8]
 800f032:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800f034:	6a12      	ldr	r2, [r2, #32]
 800f036:	9407      	str	r4, [sp, #28]
 800f038:	9208      	str	r2, [sp, #32]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f000 812e 	beq.w	800f29c <D128_1CH_HTONS_VOL_HP+0x28c>
 800f040:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f044:	f100 0b10 	add.w	fp, r0, #16
 800f048:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800f2dc <D128_1CH_HTONS_VOL_HP+0x2cc>
 800f04c:	9106      	str	r1, [sp, #24]
 800f04e:	9309      	str	r3, [sp, #36]	; 0x24
 800f050:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800f054:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800f058:	ba40      	rev16	r0, r0
 800f05a:	ba52      	rev16	r2, r2
 800f05c:	ba5b      	rev16	r3, r3
 800f05e:	ba76      	rev16	r6, r6
 800f060:	b2c5      	uxtb	r5, r0
 800f062:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800f066:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f06a:	0e00      	lsrs	r0, r0, #24
 800f06c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800f070:	b2d5      	uxtb	r5, r2
 800f072:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800f076:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800f07a:	44bc      	add	ip, r7
 800f07c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f080:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800f084:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800f088:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800f08c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800f090:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800f094:	0e12      	lsrs	r2, r2, #24
 800f096:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800f09a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800f09e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800f0a2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800f0a6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800f0aa:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800f0ae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800f0b2:	b2da      	uxtb	r2, r3
 800f0b4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800f0b8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800f0bc:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800f0c0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800f0c4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800f0c8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f0cc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800f0d0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f0d4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800f0d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f0dc:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800f0e0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800f0e4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800f0e8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800f0ec:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800f0f0:	0e1b      	lsrs	r3, r3, #24
 800f0f2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800f0f6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800f0fa:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800f0fe:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800f102:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800f106:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f10a:	b2f3      	uxtb	r3, r6
 800f10c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800f110:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800f114:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f118:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800f11c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800f120:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800f124:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800f128:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f12c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800f130:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800f134:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800f138:	0e36      	lsrs	r6, r6, #24
 800f13a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800f13e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800f142:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800f146:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800f14a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800f14e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f152:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800f156:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800f15a:	9101      	str	r1, [sp, #4]
 800f15c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800f160:	9b02      	ldr	r3, [sp, #8]
 800f162:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800f166:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f16a:	4611      	mov	r1, r2
 800f16c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800f170:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800f174:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800f178:	4a49      	ldr	r2, [pc, #292]	; (800f2a0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800f17a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800f17e:	4b49      	ldr	r3, [pc, #292]	; (800f2a4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800f180:	fb27 2203 	smlad	r2, r7, r3, r2
 800f184:	4b48      	ldr	r3, [pc, #288]	; (800f2a8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800f186:	fb25 2203 	smlad	r2, r5, r3, r2
 800f18a:	4b48      	ldr	r3, [pc, #288]	; (800f2ac <D128_1CH_HTONS_VOL_HP+0x29c>)
 800f18c:	fb24 2203 	smlad	r2, r4, r3, r2
 800f190:	4b47      	ldr	r3, [pc, #284]	; (800f2b0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800f192:	fb20 2803 	smlad	r8, r0, r3, r2
 800f196:	4b47      	ldr	r3, [pc, #284]	; (800f2b4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800f198:	9a01      	ldr	r2, [sp, #4]
 800f19a:	fb22 8203 	smlad	r2, r2, r3, r8
 800f19e:	4b46      	ldr	r3, [pc, #280]	; (800f2b8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800f1a0:	9102      	str	r1, [sp, #8]
 800f1a2:	fb21 2203 	smlad	r2, r1, r3, r2
 800f1a6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800f1aa:	fb26 2308 	smlad	r3, r6, r8, r2
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	9a03      	ldr	r2, [sp, #12]
 800f1b2:	4b42      	ldr	r3, [pc, #264]	; (800f2bc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800f1b4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800f1b8:	4b41      	ldr	r3, [pc, #260]	; (800f2c0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800f1ba:	fb27 8a03 	smlad	sl, r7, r3, r8
 800f1be:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800f2e0 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800f1c2:	fb25 a808 	smlad	r8, r5, r8, sl
 800f1c6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800f2e4 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800f1ca:	fb24 880a 	smlad	r8, r4, sl, r8
 800f1ce:	f8df a118 	ldr.w	sl, [pc, #280]	; 800f2e8 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800f1d2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800f1d6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800f2ec <D128_1CH_HTONS_VOL_HP+0x2dc>
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	fb23 aa08 	smlad	sl, r3, r8, sl
 800f1e0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800f2f0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800f1e4:	9a02      	ldr	r2, [sp, #8]
 800f1e6:	fb22 a808 	smlad	r8, r2, r8, sl
 800f1ea:	f8df a108 	ldr.w	sl, [pc, #264]	; 800f2f4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800f1ee:	fb26 830a 	smlad	r3, r6, sl, r8
 800f1f2:	f04f 0801 	mov.w	r8, #1
 800f1f6:	9302      	str	r3, [sp, #8]
 800f1f8:	fb2e fe08 	smuad	lr, lr, r8
 800f1fc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800f2f8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800f200:	fb27 ee08 	smlad	lr, r7, r8, lr
 800f204:	4f2f      	ldr	r7, [pc, #188]	; (800f2c4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800f206:	fb25 ee07 	smlad	lr, r5, r7, lr
 800f20a:	4f2f      	ldr	r7, [pc, #188]	; (800f2c8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800f20c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800f210:	4f2e      	ldr	r7, [pc, #184]	; (800f2cc <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800f212:	fb20 ee07 	smlad	lr, r0, r7, lr
 800f216:	4f2e      	ldr	r7, [pc, #184]	; (800f2d0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800f218:	9b01      	ldr	r3, [sp, #4]
 800f21a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800f21e:	4f2d      	ldr	r7, [pc, #180]	; (800f2d4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800f220:	fb22 e707 	smlad	r7, r2, r7, lr
 800f224:	4b2c      	ldr	r3, [pc, #176]	; (800f2d8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800f226:	fb26 7303 	smlad	r3, r6, r3, r7
 800f22a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	9b04      	ldr	r3, [sp, #16]
 800f232:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f236:	9f08      	ldr	r7, [sp, #32]
 800f238:	2100      	movs	r1, #0
 800f23a:	4433      	add	r3, r6
 800f23c:	f10b 0b10 	add.w	fp, fp, #16
 800f240:	461a      	mov	r2, r3
 800f242:	9b05      	ldr	r3, [sp, #20]
 800f244:	9605      	str	r6, [sp, #20]
 800f246:	1ad2      	subs	r2, r2, r3
 800f248:	17d5      	asrs	r5, r2, #31
 800f24a:	fba2 2307 	umull	r2, r3, r2, r7
 800f24e:	1814      	adds	r4, r2, r0
 800f250:	fb07 3305 	mla	r3, r7, r5, r3
 800f254:	eb43 0501 	adc.w	r5, r3, r1
 800f258:	006b      	lsls	r3, r5, #1
 800f25a:	022a      	lsls	r2, r5, #8
 800f25c:	9304      	str	r3, [sp, #16]
 800f25e:	9b07      	ldr	r3, [sp, #28]
 800f260:	fbc3 0102 	smlal	r0, r1, r3, r2
 800f264:	9a06      	ldr	r2, [sp, #24]
 800f266:	108b      	asrs	r3, r1, #2
 800f268:	f303 030f 	ssat	r3, #16, r3
 800f26c:	f822 3b02 	strh.w	r3, [r2], #2
 800f270:	4613      	mov	r3, r2
 800f272:	9206      	str	r2, [sp, #24]
 800f274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f276:	4293      	cmp	r3, r2
 800f278:	f47f aeea 	bne.w	800f050 <D128_1CH_HTONS_VOL_HP+0x40>
 800f27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f27e:	2000      	movs	r0, #0
 800f280:	9903      	ldr	r1, [sp, #12]
 800f282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f284:	6099      	str	r1, [r3, #8]
 800f286:	9902      	ldr	r1, [sp, #8]
 800f288:	f8c3 c01c 	str.w	ip, [r3, #28]
 800f28c:	60d9      	str	r1, [r3, #12]
 800f28e:	9904      	ldr	r1, [sp, #16]
 800f290:	619a      	str	r2, [r3, #24]
 800f292:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800f296:	b00d      	add	sp, #52	; 0x34
 800f298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29c:	9e05      	ldr	r6, [sp, #20]
 800f29e:	e7ed      	b.n	800f27c <D128_1CH_HTONS_VOL_HP+0x26c>
 800f2a0:	00780069 	.word	0x00780069
 800f2a4:	005b004e 	.word	0x005b004e
 800f2a8:	00420037 	.word	0x00420037
 800f2ac:	002d0024 	.word	0x002d0024
 800f2b0:	001c0015 	.word	0x001c0015
 800f2b4:	000f000a 	.word	0x000f000a
 800f2b8:	00060003 	.word	0x00060003
 800f2bc:	00880096 	.word	0x00880096
 800f2c0:	00a200ac 	.word	0x00a200ac
 800f2c4:	000a000f 	.word	0x000a000f
 800f2c8:	0015001c 	.word	0x0015001c
 800f2cc:	0024002d 	.word	0x0024002d
 800f2d0:	00370042 	.word	0x00370042
 800f2d4:	004e005b 	.word	0x004e005b
 800f2d8:	00690078 	.word	0x00690078
 800f2dc:	24000000 	.word	0x24000000
 800f2e0:	00b400ba 	.word	0x00b400ba
 800f2e4:	00be00c0 	.word	0x00be00c0
 800f2e8:	00c000be 	.word	0x00c000be
 800f2ec:	00ba00b4 	.word	0x00ba00b4
 800f2f0:	00ac00a2 	.word	0x00ac00a2
 800f2f4:	00960088 	.word	0x00960088
 800f2f8:	00030006 	.word	0x00030006

0800f2fc <PDM_Filter_Init>:
 800f2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fe:	2240      	movs	r2, #64	; 0x40
 800f300:	2100      	movs	r1, #0
 800f302:	4604      	mov	r4, r0
 800f304:	300c      	adds	r0, #12
 800f306:	f000 fa07 	bl	800f718 <memset>
 800f30a:	4a56      	ldr	r2, [pc, #344]	; (800f464 <PDM_Filter_Init+0x168>)
 800f30c:	4856      	ldr	r0, [pc, #344]	; (800f468 <PDM_Filter_Init+0x16c>)
 800f30e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800f312:	6813      	ldr	r3, [r2, #0]
 800f314:	f24c 2540 	movw	r5, #49728	; 0xc240
 800f318:	f023 0301 	bic.w	r3, r3, #1
 800f31c:	6013      	str	r3, [r2, #0]
 800f31e:	6803      	ldr	r3, [r0, #0]
 800f320:	400b      	ands	r3, r1
 800f322:	42ab      	cmp	r3, r5
 800f324:	d040      	beq.n	800f3a8 <PDM_Filter_Init+0xac>
 800f326:	6803      	ldr	r3, [r0, #0]
 800f328:	f24c 2270 	movw	r2, #49776	; 0xc270
 800f32c:	4019      	ands	r1, r3
 800f32e:	4291      	cmp	r1, r2
 800f330:	d03a      	beq.n	800f3a8 <PDM_Filter_Init+0xac>
 800f332:	4b4e      	ldr	r3, [pc, #312]	; (800f46c <PDM_Filter_Init+0x170>)
 800f334:	2101      	movs	r1, #1
 800f336:	461a      	mov	r2, r3
 800f338:	6019      	str	r1, [r3, #0]
 800f33a:	6813      	ldr	r3, [r2, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1fc      	bne.n	800f33a <PDM_Filter_Init+0x3e>
 800f340:	4b4b      	ldr	r3, [pc, #300]	; (800f470 <PDM_Filter_Init+0x174>)
 800f342:	494c      	ldr	r1, [pc, #304]	; (800f474 <PDM_Filter_Init+0x178>)
 800f344:	4a4c      	ldr	r2, [pc, #304]	; (800f478 <PDM_Filter_Init+0x17c>)
 800f346:	6019      	str	r1, [r3, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	8820      	ldrh	r0, [r4, #0]
 800f34c:	4293      	cmp	r3, r2
 800f34e:	8961      	ldrh	r1, [r4, #10]
 800f350:	f04f 0300 	mov.w	r3, #0
 800f354:	8922      	ldrh	r2, [r4, #8]
 800f356:	bf14      	ite	ne
 800f358:	2500      	movne	r5, #0
 800f35a:	4d47      	ldreq	r5, [pc, #284]	; (800f478 <PDM_Filter_Init+0x17c>)
 800f35c:	2801      	cmp	r0, #1
 800f35e:	61a3      	str	r3, [r4, #24]
 800f360:	6465      	str	r5, [r4, #68]	; 0x44
 800f362:	60e3      	str	r3, [r4, #12]
 800f364:	6263      	str	r3, [r4, #36]	; 0x24
 800f366:	6423      	str	r3, [r4, #64]	; 0x40
 800f368:	86a1      	strh	r1, [r4, #52]	; 0x34
 800f36a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800f36c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800f370:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f374:	d936      	bls.n	800f3e4 <PDM_Filter_Init+0xe8>
 800f376:	2003      	movs	r0, #3
 800f378:	2302      	movs	r3, #2
 800f37a:	8862      	ldrh	r2, [r4, #2]
 800f37c:	2a01      	cmp	r2, #1
 800f37e:	d92e      	bls.n	800f3de <PDM_Filter_Init+0xe2>
 800f380:	2140      	movs	r1, #64	; 0x40
 800f382:	2300      	movs	r3, #0
 800f384:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f386:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800f38a:	d101      	bne.n	800f390 <PDM_Filter_Init+0x94>
 800f38c:	460b      	mov	r3, r1
 800f38e:	6421      	str	r1, [r4, #64]	; 0x40
 800f390:	6862      	ldr	r2, [r4, #4]
 800f392:	b11a      	cbz	r2, 800f39c <PDM_Filter_Init+0xa0>
 800f394:	f043 0310 	orr.w	r3, r3, #16
 800f398:	62e2      	str	r2, [r4, #44]	; 0x2c
 800f39a:	6423      	str	r3, [r4, #64]	; 0x40
 800f39c:	2200      	movs	r2, #0
 800f39e:	8722      	strh	r2, [r4, #56]	; 0x38
 800f3a0:	b908      	cbnz	r0, 800f3a6 <PDM_Filter_Init+0xaa>
 800f3a2:	3380      	adds	r3, #128	; 0x80
 800f3a4:	6423      	str	r3, [r4, #64]	; 0x40
 800f3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3a8:	4b34      	ldr	r3, [pc, #208]	; (800f47c <PDM_Filter_Init+0x180>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1c0      	bne.n	800f332 <PDM_Filter_Init+0x36>
 800f3b0:	4a33      	ldr	r2, [pc, #204]	; (800f480 <PDM_Filter_Init+0x184>)
 800f3b2:	6813      	ldr	r3, [r2, #0]
 800f3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f3bc:	d006      	beq.n	800f3cc <PDM_Filter_Init+0xd0>
 800f3be:	6813      	ldr	r3, [r2, #0]
 800f3c0:	f240 4283 	movw	r2, #1155	; 0x483
 800f3c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d1b2      	bne.n	800f332 <PDM_Filter_Init+0x36>
 800f3cc:	4b2d      	ldr	r3, [pc, #180]	; (800f484 <PDM_Filter_Init+0x188>)
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	6019      	str	r1, [r3, #0]
 800f3d4:	6813      	ldr	r3, [r2, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1fc      	bne.n	800f3d4 <PDM_Filter_Init+0xd8>
 800f3da:	4b2b      	ldr	r3, [pc, #172]	; (800f488 <PDM_Filter_Init+0x18c>)
 800f3dc:	e7b1      	b.n	800f342 <PDM_Filter_Init+0x46>
 800f3de:	d03a      	beq.n	800f456 <PDM_Filter_Init+0x15a>
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	e7cd      	b.n	800f380 <PDM_Filter_Init+0x84>
 800f3e4:	4d29      	ldr	r5, [pc, #164]	; (800f48c <PDM_Filter_Init+0x190>)
 800f3e6:	782a      	ldrb	r2, [r5, #0]
 800f3e8:	d01b      	beq.n	800f422 <PDM_Filter_Init+0x126>
 800f3ea:	2a01      	cmp	r2, #1
 800f3ec:	d001      	beq.n	800f3f2 <PDM_Filter_Init+0xf6>
 800f3ee:	2001      	movs	r0, #1
 800f3f0:	e7c3      	b.n	800f37a <PDM_Filter_Init+0x7e>
 800f3f2:	4927      	ldr	r1, [pc, #156]	; (800f490 <PDM_Filter_Init+0x194>)
 800f3f4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800f498 <PDM_Filter_Init+0x19c>
 800f3f8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800f3fc:	4e25      	ldr	r6, [pc, #148]	; (800f494 <PDM_Filter_Init+0x198>)
 800f3fe:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f402:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800f406:	ea02 0006 	and.w	r0, r2, r6
 800f40a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800f40e:	428f      	cmp	r7, r1
 800f410:	ea43 0300 	orr.w	r3, r3, r0
 800f414:	4413      	add	r3, r2
 800f416:	600b      	str	r3, [r1, #0]
 800f418:	d1f1      	bne.n	800f3fe <PDM_Filter_Init+0x102>
 800f41a:	2300      	movs	r3, #0
 800f41c:	2001      	movs	r0, #1
 800f41e:	702b      	strb	r3, [r5, #0]
 800f420:	e7ab      	b.n	800f37a <PDM_Filter_Init+0x7e>
 800f422:	2a00      	cmp	r2, #0
 800f424:	d1a9      	bne.n	800f37a <PDM_Filter_Init+0x7e>
 800f426:	491a      	ldr	r1, [pc, #104]	; (800f490 <PDM_Filter_Init+0x194>)
 800f428:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800f498 <PDM_Filter_Init+0x19c>
 800f42c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800f430:	4e18      	ldr	r6, [pc, #96]	; (800f494 <PDM_Filter_Init+0x198>)
 800f432:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f436:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800f43a:	ea02 0006 	and.w	r0, r2, r6
 800f43e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800f442:	428f      	cmp	r7, r1
 800f444:	ea43 0300 	orr.w	r3, r3, r0
 800f448:	4413      	add	r3, r2
 800f44a:	600b      	str	r3, [r1, #0]
 800f44c:	d1f1      	bne.n	800f432 <PDM_Filter_Init+0x136>
 800f44e:	2001      	movs	r0, #1
 800f450:	2300      	movs	r3, #0
 800f452:	7028      	strb	r0, [r5, #0]
 800f454:	e791      	b.n	800f37a <PDM_Filter_Init+0x7e>
 800f456:	2220      	movs	r2, #32
 800f458:	4618      	mov	r0, r3
 800f45a:	2160      	movs	r1, #96	; 0x60
 800f45c:	6422      	str	r2, [r4, #64]	; 0x40
 800f45e:	4613      	mov	r3, r2
 800f460:	e790      	b.n	800f384 <PDM_Filter_Init+0x88>
 800f462:	bf00      	nop
 800f464:	e0002000 	.word	0xe0002000
 800f468:	e000ed00 	.word	0xe000ed00
 800f46c:	40023008 	.word	0x40023008
 800f470:	40023000 	.word	0x40023000
 800f474:	f407a5c2 	.word	0xf407a5c2
 800f478:	b5e8b5cd 	.word	0xb5e8b5cd
 800f47c:	e0042000 	.word	0xe0042000
 800f480:	5c001000 	.word	0x5c001000
 800f484:	58024c08 	.word	0x58024c08
 800f488:	58024c00 	.word	0x58024c00
 800f48c:	2400850c 	.word	0x2400850c
 800f490:	23fffffc 	.word	0x23fffffc
 800f494:	000ffc00 	.word	0x000ffc00
 800f498:	3ff00000 	.word	0x3ff00000

0800f49c <PDM_Filter_setConfig>:
 800f49c:	4b67      	ldr	r3, [pc, #412]	; (800f63c <PDM_Filter_setConfig+0x1a0>)
 800f49e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d128      	bne.n	800f4f6 <PDM_Filter_setConfig+0x5a>
 800f4a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a8:	880e      	ldrh	r6, [r1, #0]
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800f4b2:	1e73      	subs	r3, r6, #1
 800f4b4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800f4b8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800f4bc:	2b06      	cmp	r3, #6
 800f4be:	ed2d 8b02 	vpush	{d8}
 800f4c2:	6421      	str	r1, [r4, #64]	; 0x40
 800f4c4:	b083      	sub	sp, #12
 800f4c6:	d820      	bhi.n	800f50a <PDM_Filter_setConfig+0x6e>
 800f4c8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f4ca:	42b3      	cmp	r3, r6
 800f4cc:	d03d      	beq.n	800f54a <PDM_Filter_setConfig+0xae>
 800f4ce:	4b5c      	ldr	r3, [pc, #368]	; (800f640 <PDM_Filter_setConfig+0x1a4>)
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	4333      	orrs	r3, r6
 800f4d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f4d8:	6423      	str	r3, [r4, #64]	; 0x40
 800f4da:	f003 030f 	and.w	r3, r3, #15
 800f4de:	2a70      	cmp	r2, #112	; 0x70
 800f4e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f4e4:	d009      	beq.n	800f4fa <PDM_Filter_setConfig+0x5e>
 800f4e6:	2b06      	cmp	r3, #6
 800f4e8:	d824      	bhi.n	800f534 <PDM_Filter_setConfig+0x98>
 800f4ea:	e8df f003 	tbb	[pc, r3]
 800f4ee:	878a      	.short	0x878a
 800f4f0:	7b7e8184 	.word	0x7b7e8184
 800f4f4:	78          	.byte	0x78
 800f4f5:	00          	.byte	0x00
 800f4f6:	2004      	movs	r0, #4
 800f4f8:	4770      	bx	lr
 800f4fa:	2b06      	cmp	r3, #6
 800f4fc:	d81a      	bhi.n	800f534 <PDM_Filter_setConfig+0x98>
 800f4fe:	e8df f003 	tbb	[pc, r3]
 800f502:	8f92      	.short	0x8f92
 800f504:	8617898c 	.word	0x8617898c
 800f508:	83          	.byte	0x83
 800f509:	00          	.byte	0x00
 800f50a:	4287      	cmp	r7, r0
 800f50c:	f000 808e 	beq.w	800f62c <PDM_Filter_setConfig+0x190>
 800f510:	f117 0f0c 	cmn.w	r7, #12
 800f514:	f04f 0008 	mov.w	r0, #8
 800f518:	da11      	bge.n	800f53e <PDM_Filter_setConfig+0xa2>
 800f51a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800f51e:	3040      	adds	r0, #64	; 0x40
 800f520:	80ab      	strh	r3, [r5, #4]
 800f522:	886b      	ldrh	r3, [r5, #2]
 800f524:	8626      	strh	r6, [r4, #48]	; 0x30
 800f526:	8663      	strh	r3, [r4, #50]	; 0x32
 800f528:	b003      	add	sp, #12
 800f52a:	ecbd 8b02 	vpop	{d8}
 800f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f530:	4b44      	ldr	r3, [pc, #272]	; (800f644 <PDM_Filter_setConfig+0x1a8>)
 800f532:	64a3      	str	r3, [r4, #72]	; 0x48
 800f534:	f117 0f0c 	cmn.w	r7, #12
 800f538:	f04f 0000 	mov.w	r0, #0
 800f53c:	dbed      	blt.n	800f51a <PDM_Filter_setConfig+0x7e>
 800f53e:	2f33      	cmp	r7, #51	; 0x33
 800f540:	dd10      	ble.n	800f564 <PDM_Filter_setConfig+0xc8>
 800f542:	2333      	movs	r3, #51	; 0x33
 800f544:	3040      	adds	r0, #64	; 0x40
 800f546:	80ab      	strh	r3, [r5, #4]
 800f548:	e7eb      	b.n	800f522 <PDM_Filter_setConfig+0x86>
 800f54a:	4287      	cmp	r7, r0
 800f54c:	d1f2      	bne.n	800f534 <PDM_Filter_setConfig+0x98>
 800f54e:	886b      	ldrh	r3, [r5, #2]
 800f550:	8663      	strh	r3, [r4, #50]	; 0x32
 800f552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f554:	2000      	movs	r0, #0
 800f556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f55a:	6423      	str	r3, [r4, #64]	; 0x40
 800f55c:	b003      	add	sp, #12
 800f55e:	ecbd 8b02 	vpop	{d8}
 800f562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f566:	f003 030f 	and.w	r3, r3, #15
 800f56a:	3b01      	subs	r3, #1
 800f56c:	2b06      	cmp	r3, #6
 800f56e:	d831      	bhi.n	800f5d4 <PDM_Filter_setConfig+0x138>
 800f570:	4a35      	ldr	r2, [pc, #212]	; (800f648 <PDM_Filter_setConfig+0x1ac>)
 800f572:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f576:	eddf 0a35 	vldr	s1, [pc, #212]	; 800f64c <PDM_Filter_setConfig+0x1b0>
 800f57a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f57e:	9001      	str	r0, [sp, #4]
 800f580:	edd3 7a07 	vldr	s15, [r3, #28]
 800f584:	ed93 8a00 	vldr	s16, [r3]
 800f588:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f58c:	f000 f8e4 	bl	800f758 <powf>
 800f590:	eef0 8a40 	vmov.f32	s17, s0
 800f594:	9801      	ldr	r0, [sp, #4]
 800f596:	ee07 7a90 	vmov	s15, r7
 800f59a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800f59e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f5a2:	9001      	str	r0, [sp, #4]
 800f5a4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f5a8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f650 <PDM_Filter_setConfig+0x1b4>
 800f5ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f5b0:	f000 f8d2 	bl	800f758 <powf>
 800f5b4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f5b8:	886b      	ldrh	r3, [r5, #2]
 800f5ba:	9801      	ldr	r0, [sp, #4]
 800f5bc:	feb8 8a48 	vrinta.f32	s16, s16
 800f5c0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800f5c4:	8727      	strh	r7, [r4, #56]	; 0x38
 800f5c6:	8663      	strh	r3, [r4, #50]	; 0x32
 800f5c8:	8626      	strh	r6, [r4, #48]	; 0x30
 800f5ca:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d0bf      	beq.n	800f552 <PDM_Filter_setConfig+0xb6>
 800f5d2:	e7a9      	b.n	800f528 <PDM_Filter_setConfig+0x8c>
 800f5d4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800f654 <PDM_Filter_setConfig+0x1b8>
 800f5d8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800f658 <PDM_Filter_setConfig+0x1bc>
 800f5dc:	e7db      	b.n	800f596 <PDM_Filter_setConfig+0xfa>
 800f5de:	4b1f      	ldr	r3, [pc, #124]	; (800f65c <PDM_Filter_setConfig+0x1c0>)
 800f5e0:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5e2:	e7a7      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f5e4:	4b1e      	ldr	r3, [pc, #120]	; (800f660 <PDM_Filter_setConfig+0x1c4>)
 800f5e6:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5e8:	e7a4      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f5ea:	4b1e      	ldr	r3, [pc, #120]	; (800f664 <PDM_Filter_setConfig+0x1c8>)
 800f5ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5ee:	e7a1      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f5f0:	4b1d      	ldr	r3, [pc, #116]	; (800f668 <PDM_Filter_setConfig+0x1cc>)
 800f5f2:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5f4:	e79e      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f5f6:	4b1d      	ldr	r3, [pc, #116]	; (800f66c <PDM_Filter_setConfig+0x1d0>)
 800f5f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5fa:	e79b      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f5fc:	4b1c      	ldr	r3, [pc, #112]	; (800f670 <PDM_Filter_setConfig+0x1d4>)
 800f5fe:	64a3      	str	r3, [r4, #72]	; 0x48
 800f600:	e798      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f602:	4b1c      	ldr	r3, [pc, #112]	; (800f674 <PDM_Filter_setConfig+0x1d8>)
 800f604:	64a3      	str	r3, [r4, #72]	; 0x48
 800f606:	e795      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f608:	4b1b      	ldr	r3, [pc, #108]	; (800f678 <PDM_Filter_setConfig+0x1dc>)
 800f60a:	64a3      	str	r3, [r4, #72]	; 0x48
 800f60c:	e792      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f60e:	4b1b      	ldr	r3, [pc, #108]	; (800f67c <PDM_Filter_setConfig+0x1e0>)
 800f610:	64a3      	str	r3, [r4, #72]	; 0x48
 800f612:	e78f      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f614:	4b1a      	ldr	r3, [pc, #104]	; (800f680 <PDM_Filter_setConfig+0x1e4>)
 800f616:	64a3      	str	r3, [r4, #72]	; 0x48
 800f618:	e78c      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f61a:	4b1a      	ldr	r3, [pc, #104]	; (800f684 <PDM_Filter_setConfig+0x1e8>)
 800f61c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f61e:	e789      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f620:	4b19      	ldr	r3, [pc, #100]	; (800f688 <PDM_Filter_setConfig+0x1ec>)
 800f622:	64a3      	str	r3, [r4, #72]	; 0x48
 800f624:	e786      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f626:	4b19      	ldr	r3, [pc, #100]	; (800f68c <PDM_Filter_setConfig+0x1f0>)
 800f628:	64a3      	str	r3, [r4, #72]	; 0x48
 800f62a:	e783      	b.n	800f534 <PDM_Filter_setConfig+0x98>
 800f62c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f62e:	42b3      	cmp	r3, r6
 800f630:	f47f af6e 	bne.w	800f510 <PDM_Filter_setConfig+0x74>
 800f634:	886b      	ldrh	r3, [r5, #2]
 800f636:	2008      	movs	r0, #8
 800f638:	8663      	strh	r3, [r4, #50]	; 0x32
 800f63a:	e775      	b.n	800f528 <PDM_Filter_setConfig+0x8c>
 800f63c:	b5e8b5cd 	.word	0xb5e8b5cd
 800f640:	fffffef0 	.word	0xfffffef0
 800f644:	0800e7b5 	.word	0x0800e7b5
 800f648:	0800fac8 	.word	0x0800fac8
 800f64c:	42000000 	.word	0x42000000
 800f650:	3d4ccccd 	.word	0x3d4ccccd
 800f654:	4f800000 	.word	0x4f800000
 800f658:	00000000 	.word	0x00000000
 800f65c:	0800dbc1 	.word	0x0800dbc1
 800f660:	0800da49 	.word	0x0800da49
 800f664:	0800d939 	.word	0x0800d939
 800f668:	0800e3fd 	.word	0x0800e3fd
 800f66c:	0800e165 	.word	0x0800e165
 800f670:	0800df2d 	.word	0x0800df2d
 800f674:	0800dd49 	.word	0x0800dd49
 800f678:	0800e9d1 	.word	0x0800e9d1
 800f67c:	0800e895 	.word	0x0800e895
 800f680:	0800f011 	.word	0x0800f011
 800f684:	0800ee15 	.word	0x0800ee15
 800f688:	0800ec69 	.word	0x0800ec69
 800f68c:	0800eafd 	.word	0x0800eafd

0800f690 <PDM_Filter>:
 800f690:	b410      	push	{r4}
 800f692:	4b0b      	ldr	r3, [pc, #44]	; (800f6c0 <PDM_Filter+0x30>)
 800f694:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800f696:	429c      	cmp	r4, r3
 800f698:	d107      	bne.n	800f6aa <PDM_Filter+0x1a>
 800f69a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f69c:	05dc      	lsls	r4, r3, #23
 800f69e:	d508      	bpl.n	800f6b2 <PDM_Filter+0x22>
 800f6a0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800f6a2:	320c      	adds	r2, #12
 800f6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6a8:	4718      	bx	r3
 800f6aa:	2004      	movs	r0, #4
 800f6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f6b6:	bf14      	ite	ne
 800f6b8:	2020      	movne	r0, #32
 800f6ba:	2030      	moveq	r0, #48	; 0x30
 800f6bc:	e7f6      	b.n	800f6ac <PDM_Filter+0x1c>
 800f6be:	bf00      	nop
 800f6c0:	b5e8b5cd 	.word	0xb5e8b5cd

0800f6c4 <__errno>:
 800f6c4:	4b01      	ldr	r3, [pc, #4]	; (800f6cc <__errno+0x8>)
 800f6c6:	6818      	ldr	r0, [r3, #0]
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	2400048c 	.word	0x2400048c

0800f6d0 <__libc_init_array>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	4d0d      	ldr	r5, [pc, #52]	; (800f708 <__libc_init_array+0x38>)
 800f6d4:	4c0d      	ldr	r4, [pc, #52]	; (800f70c <__libc_init_array+0x3c>)
 800f6d6:	1b64      	subs	r4, r4, r5
 800f6d8:	10a4      	asrs	r4, r4, #2
 800f6da:	2600      	movs	r6, #0
 800f6dc:	42a6      	cmp	r6, r4
 800f6de:	d109      	bne.n	800f6f4 <__libc_init_array+0x24>
 800f6e0:	4d0b      	ldr	r5, [pc, #44]	; (800f710 <__libc_init_array+0x40>)
 800f6e2:	4c0c      	ldr	r4, [pc, #48]	; (800f714 <__libc_init_array+0x44>)
 800f6e4:	f000 f9e4 	bl	800fab0 <_init>
 800f6e8:	1b64      	subs	r4, r4, r5
 800f6ea:	10a4      	asrs	r4, r4, #2
 800f6ec:	2600      	movs	r6, #0
 800f6ee:	42a6      	cmp	r6, r4
 800f6f0:	d105      	bne.n	800f6fe <__libc_init_array+0x2e>
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f8:	4798      	blx	r3
 800f6fa:	3601      	adds	r6, #1
 800f6fc:	e7ee      	b.n	800f6dc <__libc_init_array+0xc>
 800f6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f702:	4798      	blx	r3
 800f704:	3601      	adds	r6, #1
 800f706:	e7f2      	b.n	800f6ee <__libc_init_array+0x1e>
 800f708:	0800fe18 	.word	0x0800fe18
 800f70c:	0800fe18 	.word	0x0800fe18
 800f710:	0800fe18 	.word	0x0800fe18
 800f714:	0800fe1c 	.word	0x0800fe1c

0800f718 <memset>:
 800f718:	4402      	add	r2, r0
 800f71a:	4603      	mov	r3, r0
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d100      	bne.n	800f722 <memset+0xa>
 800f720:	4770      	bx	lr
 800f722:	f803 1b01 	strb.w	r1, [r3], #1
 800f726:	e7f9      	b.n	800f71c <memset+0x4>

0800f728 <checkint>:
 800f728:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f72c:	2b7e      	cmp	r3, #126	; 0x7e
 800f72e:	dd10      	ble.n	800f752 <checkint+0x2a>
 800f730:	2b96      	cmp	r3, #150	; 0x96
 800f732:	dc0c      	bgt.n	800f74e <checkint+0x26>
 800f734:	2201      	movs	r2, #1
 800f736:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f73a:	fa02 f303 	lsl.w	r3, r2, r3
 800f73e:	1e5a      	subs	r2, r3, #1
 800f740:	4202      	tst	r2, r0
 800f742:	d106      	bne.n	800f752 <checkint+0x2a>
 800f744:	4203      	tst	r3, r0
 800f746:	bf0c      	ite	eq
 800f748:	2002      	moveq	r0, #2
 800f74a:	2001      	movne	r0, #1
 800f74c:	4770      	bx	lr
 800f74e:	2002      	movs	r0, #2
 800f750:	4770      	bx	lr
 800f752:	2000      	movs	r0, #0
 800f754:	4770      	bx	lr
	...

0800f758 <powf>:
 800f758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75a:	ee10 1a10 	vmov	r1, s0
 800f75e:	ee10 6a90 	vmov	r6, s1
 800f762:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800f766:	0072      	lsls	r2, r6, #1
 800f768:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f76c:	b085      	sub	sp, #20
 800f76e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800f772:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800f776:	d256      	bcs.n	800f826 <powf+0xce>
 800f778:	4298      	cmp	r0, r3
 800f77a:	d256      	bcs.n	800f82a <powf+0xd2>
 800f77c:	2000      	movs	r0, #0
 800f77e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800f782:	4ea3      	ldr	r6, [pc, #652]	; (800fa10 <powf+0x2b8>)
 800f784:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f788:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800f78c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800f790:	0dd2      	lsrs	r2, r2, #23
 800f792:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800f796:	05d2      	lsls	r2, r2, #23
 800f798:	1a8b      	subs	r3, r1, r2
 800f79a:	ed97 5b00 	vldr	d5, [r7]
 800f79e:	ee07 3a90 	vmov	s15, r3
 800f7a2:	15d2      	asrs	r2, r2, #23
 800f7a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f7a8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f7ac:	ed97 5b02 	vldr	d5, [r7, #8]
 800f7b0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800f7b4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800f7b8:	ee07 2a90 	vmov	s15, r2
 800f7bc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800f7c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f7c4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f7c8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800f7cc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800f7d0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800f7d4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800f7d8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f7dc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800f7e0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800f7e4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800f7e8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800f7ec:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f7f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f7f4:	ee10 1a90 	vmov	r1, s1
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	2700      	movs	r7, #0
 800f7fc:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800f800:	f248 06be 	movw	r6, #32958	; 0x80be
 800f804:	429f      	cmp	r7, r3
 800f806:	bf08      	it	eq
 800f808:	4296      	cmpeq	r6, r2
 800f80a:	f080 80b1 	bcs.w	800f970 <powf+0x218>
 800f80e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800f9f0 <powf+0x298>
 800f812:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81a:	dd79      	ble.n	800f910 <powf+0x1b8>
 800f81c:	b005      	add	sp, #20
 800f81e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f822:	f000 b91f 	b.w	800fa64 <__math_oflowf>
 800f826:	4298      	cmp	r0, r3
 800f828:	d32d      	bcc.n	800f886 <powf+0x12e>
 800f82a:	b952      	cbnz	r2, 800f842 <powf+0xea>
 800f82c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800f836:	f240 80cd 	bls.w	800f9d4 <powf+0x27c>
 800f83a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f83e:	b005      	add	sp, #20
 800f840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f842:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800f846:	d105      	bne.n	800f854 <powf+0xfc>
 800f848:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f84c:	0076      	lsls	r6, r6, #1
 800f84e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f852:	e7f0      	b.n	800f836 <powf+0xde>
 800f854:	004b      	lsls	r3, r1, #1
 800f856:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800f85a:	d8ee      	bhi.n	800f83a <powf+0xe2>
 800f85c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800f860:	d1eb      	bne.n	800f83a <powf+0xe2>
 800f862:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f866:	f000 80b5 	beq.w	800f9d4 <powf+0x27c>
 800f86a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f86e:	ea6f 0606 	mvn.w	r6, r6
 800f872:	bf34      	ite	cc
 800f874:	2300      	movcc	r3, #0
 800f876:	2301      	movcs	r3, #1
 800f878:	0ff6      	lsrs	r6, r6, #31
 800f87a:	42b3      	cmp	r3, r6
 800f87c:	f040 80ad 	bne.w	800f9da <powf+0x282>
 800f880:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800f884:	e7db      	b.n	800f83e <powf+0xe6>
 800f886:	004f      	lsls	r7, r1, #1
 800f888:	1e7a      	subs	r2, r7, #1
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d31c      	bcc.n	800f8c8 <powf+0x170>
 800f88e:	2900      	cmp	r1, #0
 800f890:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f894:	da0f      	bge.n	800f8b6 <powf+0x15e>
 800f896:	ee10 0a90 	vmov	r0, s1
 800f89a:	f7ff ff45 	bl	800f728 <checkint>
 800f89e:	2801      	cmp	r0, #1
 800f8a0:	d109      	bne.n	800f8b6 <powf+0x15e>
 800f8a2:	eeb1 0a40 	vneg.f32	s0, s0
 800f8a6:	b947      	cbnz	r7, 800f8ba <powf+0x162>
 800f8a8:	2e00      	cmp	r6, #0
 800f8aa:	dac8      	bge.n	800f83e <powf+0xe6>
 800f8ac:	b005      	add	sp, #20
 800f8ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8b2:	f000 b8dd 	b.w	800fa70 <__math_divzerof>
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	e7f5      	b.n	800f8a6 <powf+0x14e>
 800f8ba:	2e00      	cmp	r6, #0
 800f8bc:	dabf      	bge.n	800f83e <powf+0xe6>
 800f8be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8c2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f8c6:	e7ba      	b.n	800f83e <powf+0xe6>
 800f8c8:	2900      	cmp	r1, #0
 800f8ca:	da1f      	bge.n	800f90c <powf+0x1b4>
 800f8cc:	ee10 0a90 	vmov	r0, s1
 800f8d0:	f7ff ff2a 	bl	800f728 <checkint>
 800f8d4:	b920      	cbnz	r0, 800f8e0 <powf+0x188>
 800f8d6:	b005      	add	sp, #20
 800f8d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8dc:	f000 b8d8 	b.w	800fa90 <__math_invalidf>
 800f8e0:	2801      	cmp	r0, #1
 800f8e2:	bf14      	ite	ne
 800f8e4:	2000      	movne	r0, #0
 800f8e6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800f8ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f8ee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800f8f2:	f4bf af44 	bcs.w	800f77e <powf+0x26>
 800f8f6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800fa14 <powf+0x2bc>
 800f8fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f8fe:	ee10 3a10 	vmov	r3, s0
 800f902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f906:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800f90a:	e738      	b.n	800f77e <powf+0x26>
 800f90c:	2000      	movs	r0, #0
 800f90e:	e7ee      	b.n	800f8ee <powf+0x196>
 800f910:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800f9f8 <powf+0x2a0>
 800f914:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91c:	dd10      	ble.n	800f940 <powf+0x1e8>
 800f91e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800f922:	2800      	cmp	r0, #0
 800f924:	d15c      	bne.n	800f9e0 <powf+0x288>
 800f926:	9302      	str	r3, [sp, #8]
 800f928:	eddd 7a02 	vldr	s15, [sp, #8]
 800f92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f930:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f934:	eef4 7a47 	vcmp.f32	s15, s14
 800f938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93c:	f47f af6e 	bne.w	800f81c <powf+0xc4>
 800f940:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800fa00 <powf+0x2a8>
 800f944:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94c:	d804      	bhi.n	800f958 <powf+0x200>
 800f94e:	b005      	add	sp, #20
 800f950:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f954:	f000 b87a 	b.w	800fa4c <__math_uflowf>
 800f958:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800fa08 <powf+0x2b0>
 800f95c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f964:	d504      	bpl.n	800f970 <powf+0x218>
 800f966:	b005      	add	sp, #20
 800f968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f96c:	f000 b874 	b.w	800fa58 <__math_may_uflowf>
 800f970:	4b29      	ldr	r3, [pc, #164]	; (800fa18 <powf+0x2c0>)
 800f972:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800f976:	ee30 6b07 	vadd.f64	d6, d0, d7
 800f97a:	ed8d 6b00 	vstr	d6, [sp]
 800f97e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f982:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f986:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f98a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f98e:	f006 011f 	and.w	r1, r6, #31
 800f992:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f996:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800f99a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800f99e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800f9a2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800f9a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f9aa:	ee27 5b07 	vmul.f64	d5, d7, d7
 800f9ae:	1836      	adds	r6, r6, r0
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	eb13 040c 	adds.w	r4, r3, ip
 800f9b6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800f9ba:	eb41 050e 	adc.w	r5, r1, lr
 800f9be:	eea7 0b04 	vfma.f64	d0, d7, d4
 800f9c2:	ec45 4b17 	vmov	d7, r4, r5
 800f9c6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f9ca:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f9ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f9d2:	e734      	b.n	800f83e <powf+0xe6>
 800f9d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f9d8:	e731      	b.n	800f83e <powf+0xe6>
 800f9da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fa1c <powf+0x2c4>
 800f9de:	e72e      	b.n	800f83e <powf+0xe6>
 800f9e0:	9303      	str	r3, [sp, #12]
 800f9e2:	eddd 7a03 	vldr	s15, [sp, #12]
 800f9e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f9ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9ee:	e7a1      	b.n	800f934 <powf+0x1dc>
 800f9f0:	ffd1d571 	.word	0xffd1d571
 800f9f4:	405fffff 	.word	0x405fffff
 800f9f8:	ffa3aae2 	.word	0xffa3aae2
 800f9fc:	405fffff 	.word	0x405fffff
 800fa00:	00000000 	.word	0x00000000
 800fa04:	c062c000 	.word	0xc062c000
 800fa08:	00000000 	.word	0x00000000
 800fa0c:	c062a000 	.word	0xc062a000
 800fa10:	0800fba8 	.word	0x0800fba8
 800fa14:	4b000000 	.word	0x4b000000
 800fa18:	0800fcd0 	.word	0x0800fcd0
 800fa1c:	00000000 	.word	0x00000000

0800fa20 <with_errnof>:
 800fa20:	b513      	push	{r0, r1, r4, lr}
 800fa22:	4604      	mov	r4, r0
 800fa24:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fa28:	f7ff fe4c 	bl	800f6c4 <__errno>
 800fa2c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fa30:	6004      	str	r4, [r0, #0]
 800fa32:	b002      	add	sp, #8
 800fa34:	bd10      	pop	{r4, pc}

0800fa36 <xflowf>:
 800fa36:	b130      	cbz	r0, 800fa46 <xflowf+0x10>
 800fa38:	eef1 7a40 	vneg.f32	s15, s0
 800fa3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fa40:	2022      	movs	r0, #34	; 0x22
 800fa42:	f7ff bfed 	b.w	800fa20 <with_errnof>
 800fa46:	eef0 7a40 	vmov.f32	s15, s0
 800fa4a:	e7f7      	b.n	800fa3c <xflowf+0x6>

0800fa4c <__math_uflowf>:
 800fa4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa54 <__math_uflowf+0x8>
 800fa50:	f7ff bff1 	b.w	800fa36 <xflowf>
 800fa54:	10000000 	.word	0x10000000

0800fa58 <__math_may_uflowf>:
 800fa58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa60 <__math_may_uflowf+0x8>
 800fa5c:	f7ff bfeb 	b.w	800fa36 <xflowf>
 800fa60:	1a200000 	.word	0x1a200000

0800fa64 <__math_oflowf>:
 800fa64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa6c <__math_oflowf+0x8>
 800fa68:	f7ff bfe5 	b.w	800fa36 <xflowf>
 800fa6c:	70000000 	.word	0x70000000

0800fa70 <__math_divzerof>:
 800fa70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa74:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800fa7e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800fa8c <__math_divzerof+0x1c>
 800fa82:	2022      	movs	r0, #34	; 0x22
 800fa84:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800fa88:	f7ff bfca 	b.w	800fa20 <with_errnof>
 800fa8c:	00000000 	.word	0x00000000

0800fa90 <__math_invalidf>:
 800fa90:	eef0 7a40 	vmov.f32	s15, s0
 800fa94:	ee30 7a40 	vsub.f32	s14, s0, s0
 800fa98:	eef4 7a67 	vcmp.f32	s15, s15
 800fa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800faa4:	d602      	bvs.n	800faac <__math_invalidf+0x1c>
 800faa6:	2021      	movs	r0, #33	; 0x21
 800faa8:	f7ff bfba 	b.w	800fa20 <with_errnof>
 800faac:	4770      	bx	lr
	...

0800fab0 <_init>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	bf00      	nop
 800fab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fab6:	bc08      	pop	{r3}
 800fab8:	469e      	mov	lr, r3
 800faba:	4770      	bx	lr

0800fabc <_fini>:
 800fabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fabe:	bf00      	nop
 800fac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fac2:	bc08      	pop	{r3}
 800fac4:	469e      	mov	lr, r3
 800fac6:	4770      	bx	lr
