
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d018  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800d2e8  0800d2e8  0001d2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d5b0  0800d5b0  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d5b4  0800d5b4  0001d5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000048c  24000000  0800d5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000418  2400048c  0800da44  0002048c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240008a4  0800da44  000208a4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002048c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002e257  00000000  00000000  000204ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f39  00000000  00000000  0004e711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c30  00000000  00000000  00052650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001ad0  00000000  00000000  00054280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035a66  00000000  00000000  00055d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001dc14  00000000  00000000  0008b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015493f  00000000  00000000  000a93ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001fdd09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000078d4  00000000  00000000  001fdddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400048c 	.word	0x2400048c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d2d0 	.word	0x0800d2d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000490 	.word	0x24000490
 800030c:	0800d2d0 	.word	0x0800d2d0

08000310 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800031a:	2303      	movs	r3, #3
 800031c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f103 0018 	add.w	r0, r3, #24
 8000324:	f107 020a 	add.w	r2, r7, #10
 8000328:	2302      	movs	r3, #2
 800032a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800032e:	f001 f9b5 	bl	800169c <wm8994_write_reg>
 8000332:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000334:	2300      	movs	r3, #0
 8000336:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0018 	add.w	r0, r3, #24
 800033e:	f107 020a 	add.w	r2, r7, #10
 8000342:	2302      	movs	r3, #2
 8000344:	f640 0117 	movw	r1, #2071	; 0x817
 8000348:	f001 f9a8 	bl	800169c <wm8994_write_reg>
 800034c:	4602      	mov	r2, r0
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0018 	add.w	r0, r3, #24
 800035a:	f107 020a 	add.w	r2, r7, #10
 800035e:	2302      	movs	r3, #2
 8000360:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000364:	f001 f99a 	bl	800169c <wm8994_write_reg>
 8000368:	4602      	mov	r2, r0
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000370:	236c      	movs	r3, #108	; 0x6c
 8000372:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0018 	add.w	r0, r3, #24
 800037a:	f107 020a 	add.w	r2, r7, #10
 800037e:	2302      	movs	r3, #2
 8000380:	2139      	movs	r1, #57	; 0x39
 8000382:	f001 f98b 	bl	800169c <wm8994_write_reg>
 8000386:	4602      	mov	r2, r0
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00f      	beq.n	80003b6 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000396:	2313      	movs	r3, #19
 8000398:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f103 0018 	add.w	r0, r3, #24
 80003a0:	f107 020a 	add.w	r2, r7, #10
 80003a4:	2302      	movs	r3, #2
 80003a6:	2101      	movs	r1, #1
 80003a8:	f001 f978 	bl	800169c <wm8994_write_reg>
 80003ac:	4602      	mov	r2, r0
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00e      	b.n	80003d4 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80003b6:	2303      	movs	r3, #3
 80003b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f103 0018 	add.w	r0, r3, #24
 80003c0:	f107 020a 	add.w	r2, r7, #10
 80003c4:	2302      	movs	r3, #2
 80003c6:	2101      	movs	r1, #1
 80003c8:	f001 f968 	bl	800169c <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80003d4:	2132      	movs	r1, #50	; 0x32
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f001 f8e8 	bl	80015ac <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 8141 	bhi.w	8000668 <WM8994_Init+0x358>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <WM8994_Init+0xdc>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000703 	.word	0x08000703
 80003f0:	080003fd 	.word	0x080003fd
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000531 	.word	0x08000531
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80003fc:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000400:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f103 0018 	add.w	r0, r3, #24
 8000408:	f107 020a 	add.w	r2, r7, #10
 800040c:	2302      	movs	r3, #2
 800040e:	2105      	movs	r1, #5
 8000410:	f001 f944 	bl	800169c <wm8994_write_reg>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800041c:	2300      	movs	r3, #0
 800041e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 0018 	add.w	r0, r3, #24
 8000426:	f107 020a 	add.w	r2, r7, #10
 800042a:	2302      	movs	r3, #2
 800042c:	f240 6101 	movw	r1, #1537	; 0x601
 8000430:	f001 f934 	bl	800169c <wm8994_write_reg>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f103 0018 	add.w	r0, r3, #24
 8000442:	f107 020a 	add.w	r2, r7, #10
 8000446:	2302      	movs	r3, #2
 8000448:	f240 6102 	movw	r1, #1538	; 0x602
 800044c:	f001 f926 	bl	800169c <wm8994_write_reg>
 8000450:	4602      	mov	r2, r0
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8000458:	2302      	movs	r3, #2
 800045a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0018 	add.w	r0, r3, #24
 8000462:	f107 020a 	add.w	r2, r7, #10
 8000466:	2302      	movs	r3, #2
 8000468:	f240 6104 	movw	r1, #1540	; 0x604
 800046c:	f001 f916 	bl	800169c <wm8994_write_reg>
 8000470:	4602      	mov	r2, r0
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0018 	add.w	r0, r3, #24
 800047e:	f107 020a 	add.w	r2, r7, #10
 8000482:	2302      	movs	r3, #2
 8000484:	f240 6105 	movw	r1, #1541	; 0x605
 8000488:	f001 f908 	bl	800169c <wm8994_write_reg>
 800048c:	4602      	mov	r2, r0
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    break;
 8000494:	e136      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000496:	f240 3303 	movw	r3, #771	; 0x303
 800049a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f103 0018 	add.w	r0, r3, #24
 80004a2:	f107 020a 	add.w	r2, r7, #10
 80004a6:	2302      	movs	r3, #2
 80004a8:	2105      	movs	r1, #5
 80004aa:	f001 f8f7 	bl	800169c <wm8994_write_reg>
 80004ae:	4602      	mov	r2, r0
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80004b6:	2301      	movs	r3, #1
 80004b8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0018 	add.w	r0, r3, #24
 80004c0:	f107 020a 	add.w	r2, r7, #10
 80004c4:	2302      	movs	r3, #2
 80004c6:	f240 6101 	movw	r1, #1537	; 0x601
 80004ca:	f001 f8e7 	bl	800169c <wm8994_write_reg>
 80004ce:	4602      	mov	r2, r0
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0018 	add.w	r0, r3, #24
 80004dc:	f107 020a 	add.w	r2, r7, #10
 80004e0:	2302      	movs	r3, #2
 80004e2:	f240 6102 	movw	r1, #1538	; 0x602
 80004e6:	f001 f8d9 	bl	800169c <wm8994_write_reg>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4413      	add	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0018 	add.w	r0, r3, #24
 80004fc:	f107 020a 	add.w	r2, r7, #10
 8000500:	2302      	movs	r3, #2
 8000502:	f240 6104 	movw	r1, #1540	; 0x604
 8000506:	f001 f8c9 	bl	800169c <wm8994_write_reg>
 800050a:	4602      	mov	r2, r0
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0018 	add.w	r0, r3, #24
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	2302      	movs	r3, #2
 800051e:	f240 6105 	movw	r1, #1541	; 0x605
 8000522:	f001 f8bb 	bl	800169c <wm8994_write_reg>
 8000526:	4602      	mov	r2, r0
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
    break;
 800052e:	e0e9      	b.n	8000704 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b05      	cmp	r3, #5
 8000536:	d14a      	bne.n	80005ce <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8000538:	f640 730f 	movw	r3, #3855	; 0xf0f
 800053c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f103 0018 	add.w	r0, r3, #24
 8000544:	f107 020a 	add.w	r2, r7, #10
 8000548:	2302      	movs	r3, #2
 800054a:	2105      	movs	r1, #5
 800054c:	f001 f8a6 	bl	800169c <wm8994_write_reg>
 8000550:	4602      	mov	r2, r0
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8000558:	2303      	movs	r3, #3
 800055a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0018 	add.w	r0, r3, #24
 8000562:	f107 020a 	add.w	r2, r7, #10
 8000566:	2302      	movs	r3, #2
 8000568:	f240 6101 	movw	r1, #1537	; 0x601
 800056c:	f001 f896 	bl	800169c <wm8994_write_reg>
 8000570:	4602      	mov	r2, r0
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0018 	add.w	r0, r3, #24
 800057e:	f107 020a 	add.w	r2, r7, #10
 8000582:	2302      	movs	r3, #2
 8000584:	f240 6102 	movw	r1, #1538	; 0x602
 8000588:	f001 f888 	bl	800169c <wm8994_write_reg>
 800058c:	4602      	mov	r2, r0
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0018 	add.w	r0, r3, #24
 800059a:	f107 020a 	add.w	r2, r7, #10
 800059e:	2302      	movs	r3, #2
 80005a0:	f240 6104 	movw	r1, #1540	; 0x604
 80005a4:	f001 f87a 	bl	800169c <wm8994_write_reg>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 0018 	add.w	r0, r3, #24
 80005b6:	f107 020a 	add.w	r2, r7, #10
 80005ba:	2302      	movs	r3, #2
 80005bc:	f240 6105 	movw	r1, #1541	; 0x605
 80005c0:	f001 f86c 	bl	800169c <wm8994_write_reg>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80005cc:	e09a      	b.n	8000704 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80005ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80005d2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020a 	add.w	r2, r7, #10
 80005de:	2302      	movs	r3, #2
 80005e0:	2105      	movs	r1, #5
 80005e2:	f001 f85b 	bl	800169c <wm8994_write_reg>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80005ee:	2301      	movs	r3, #1
 80005f0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0018 	add.w	r0, r3, #24
 80005f8:	f107 020a 	add.w	r2, r7, #10
 80005fc:	2302      	movs	r3, #2
 80005fe:	f240 6101 	movw	r1, #1537	; 0x601
 8000602:	f001 f84b 	bl	800169c <wm8994_write_reg>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0018 	add.w	r0, r3, #24
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	2302      	movs	r3, #2
 800061a:	f240 6102 	movw	r1, #1538	; 0x602
 800061e:	f001 f83d 	bl	800169c <wm8994_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800062a:	2302      	movs	r3, #2
 800062c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0018 	add.w	r0, r3, #24
 8000634:	f107 020a 	add.w	r2, r7, #10
 8000638:	2302      	movs	r3, #2
 800063a:	f240 6104 	movw	r1, #1540	; 0x604
 800063e:	f001 f82d 	bl	800169c <wm8994_write_reg>
 8000642:	4602      	mov	r2, r0
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0018 	add.w	r0, r3, #24
 8000650:	f107 020a 	add.w	r2, r7, #10
 8000654:	2302      	movs	r3, #2
 8000656:	f240 6105 	movw	r1, #1541	; 0x605
 800065a:	f001 f81f 	bl	800169c <wm8994_write_reg>
 800065e:	4602      	mov	r2, r0
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
    break;
 8000666:	e04d      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000668:	f240 3303 	movw	r3, #771	; 0x303
 800066c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0018 	add.w	r0, r3, #24
 8000674:	f107 020a 	add.w	r2, r7, #10
 8000678:	2302      	movs	r3, #2
 800067a:	2105      	movs	r1, #5
 800067c:	f001 f80e 	bl	800169c <wm8994_write_reg>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000688:	2301      	movs	r3, #1
 800068a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 0018 	add.w	r0, r3, #24
 8000692:	f107 020a 	add.w	r2, r7, #10
 8000696:	2302      	movs	r3, #2
 8000698:	f240 6101 	movw	r1, #1537	; 0x601
 800069c:	f000 fffe 	bl	800169c <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0018 	add.w	r0, r3, #24
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	2302      	movs	r3, #2
 80006b4:	f240 6102 	movw	r1, #1538	; 0x602
 80006b8:	f000 fff0 	bl	800169c <wm8994_write_reg>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80006c4:	2300      	movs	r3, #0
 80006c6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 0018 	add.w	r0, r3, #24
 80006ce:	f107 020a 	add.w	r2, r7, #10
 80006d2:	2302      	movs	r3, #2
 80006d4:	f240 6104 	movw	r1, #1540	; 0x604
 80006d8:	f000 ffe0 	bl	800169c <wm8994_write_reg>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4413      	add	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0018 	add.w	r0, r3, #24
 80006ea:	f107 020a 	add.w	r2, r7, #10
 80006ee:	2302      	movs	r3, #2
 80006f0:	f240 6105 	movw	r1, #1541	; 0x605
 80006f4:	f000 ffd2 	bl	800169c <wm8994_write_reg>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
    break;
 8000700:	e000      	b.n	8000704 <WM8994_Init+0x3f4>
    break;
 8000702:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	2b04      	cmp	r3, #4
 800070c:	f200 81e0 	bhi.w	8000ad0 <WM8994_Init+0x7c0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <WM8994_Init+0x408>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000901 	.word	0x08000901
 800071c:	0800072d 	.word	0x0800072d
 8000720:	080007eb 	.word	0x080007eb
 8000724:	08000ad1 	.word	0x08000ad1
 8000728:	080009bf 	.word	0x080009bf
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 800072c:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8000730:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0018 	add.w	r0, r3, #24
 8000738:	f107 020a 	add.w	r2, r7, #10
 800073c:	2302      	movs	r3, #2
 800073e:	2104      	movs	r1, #4
 8000740:	f000 ffac 	bl	800169c <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800074c:	23db      	movs	r3, #219	; 0xdb
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000760:	f000 ff9c 	bl	800169c <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800076c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000770:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0018 	add.w	r0, r3, #24
 8000778:	f107 020a 	add.w	r2, r7, #10
 800077c:	2302      	movs	r3, #2
 800077e:	2102      	movs	r1, #2
 8000780:	f000 ff8c 	bl	800169c <wm8994_write_reg>
 8000784:	4602      	mov	r2, r0
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800078c:	2302      	movs	r3, #2
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007a0:	f000 ff7c 	bl	800169c <wm8994_write_reg>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f103 0018 	add.w	r0, r3, #24
 80007b2:	f107 020a 	add.w	r2, r7, #10
 80007b6:	2302      	movs	r3, #2
 80007b8:	f240 6109 	movw	r1, #1545	; 0x609
 80007bc:	f000 ff6e 	bl	800169c <wm8994_write_reg>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80007c8:	230e      	movs	r3, #14
 80007ca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f103 0018 	add.w	r0, r3, #24
 80007d2:	f107 020a 	add.w	r2, r7, #10
 80007d6:	2302      	movs	r3, #2
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	f000 ff5e 	bl	800169c <wm8994_write_reg>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    break;
 80007e8:	e173      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80007ea:	2311      	movs	r3, #17
 80007ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0018 	add.w	r0, r3, #24
 80007f4:	f107 020a 	add.w	r2, r7, #10
 80007f8:	2302      	movs	r3, #2
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	f000 ff4e 	bl	800169c <wm8994_write_reg>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000808:	2335      	movs	r3, #53	; 0x35
 800080a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0018 	add.w	r0, r3, #24
 8000812:	f107 020a 	add.w	r2, r7, #10
 8000816:	2302      	movs	r3, #2
 8000818:	2129      	movs	r1, #41	; 0x29
 800081a:	f000 ff3f 	bl	800169c <wm8994_write_reg>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0018 	add.w	r0, r3, #24
 800082c:	f107 020a 	add.w	r2, r7, #10
 8000830:	2302      	movs	r3, #2
 8000832:	212a      	movs	r1, #42	; 0x2a
 8000834:	f000 ff32 	bl	800169c <wm8994_write_reg>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000840:	f240 3303 	movw	r3, #771	; 0x303
 8000844:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0018 	add.w	r0, r3, #24
 800084c:	f107 020a 	add.w	r2, r7, #10
 8000850:	2302      	movs	r3, #2
 8000852:	2104      	movs	r1, #4
 8000854:	f000 ff22 	bl	800169c <wm8994_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000860:	23db      	movs	r3, #219	; 0xdb
 8000862:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0018 	add.w	r0, r3, #24
 800086a:	f107 020a 	add.w	r2, r7, #10
 800086e:	2302      	movs	r3, #2
 8000870:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000874:	f000 ff12 	bl	800169c <wm8994_write_reg>
 8000878:	4602      	mov	r2, r0
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000880:	f246 3350 	movw	r3, #25424	; 0x6350
 8000884:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0018 	add.w	r0, r3, #24
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	2302      	movs	r3, #2
 8000892:	2102      	movs	r1, #2
 8000894:	f000 ff02 	bl	800169c <wm8994_write_reg>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80008a0:	2302      	movs	r3, #2
 80008a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6106 	movw	r1, #1542	; 0x606
 80008b4:	f000 fef2 	bl	800169c <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f103 0018 	add.w	r0, r3, #24
 80008c6:	f107 020a 	add.w	r2, r7, #10
 80008ca:	2302      	movs	r3, #2
 80008cc:	f240 6107 	movw	r1, #1543	; 0x607
 80008d0:	f000 fee4 	bl	800169c <wm8994_write_reg>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80008dc:	f248 030d 	movw	r3, #32781	; 0x800d
 80008e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0018 	add.w	r0, r3, #24
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	2302      	movs	r3, #2
 80008ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008f2:	f000 fed3 	bl	800169c <wm8994_write_reg>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    break;
 80008fe:	e0e8      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000900:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2104      	movs	r1, #4
 8000914:	f000 fec2 	bl	800169c <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000920:	23db      	movs	r3, #219	; 0xdb
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000934:	f000 feb2 	bl	800169c <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000940:	f246 3350 	movw	r3, #25424	; 0x6350
 8000944:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0018 	add.w	r0, r3, #24
 800094c:	f107 020a 	add.w	r2, r7, #10
 8000950:	2302      	movs	r3, #2
 8000952:	2102      	movs	r1, #2
 8000954:	f000 fea2 	bl	800169c <wm8994_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000960:	2302      	movs	r3, #2
 8000962:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0018 	add.w	r0, r3, #24
 800096a:	f107 020a 	add.w	r2, r7, #10
 800096e:	2302      	movs	r3, #2
 8000970:	f240 6106 	movw	r1, #1542	; 0x606
 8000974:	f000 fe92 	bl	800169c <wm8994_write_reg>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6107 	movw	r1, #1543	; 0x607
 8000990:	f000 fe84 	bl	800169c <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800099c:	230d      	movs	r3, #13
 800099e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0018 	add.w	r0, r3, #24
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	2302      	movs	r3, #2
 80009ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009b0:	f000 fe74 	bl	800169c <wm8994_write_reg>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    break;
 80009bc:	e089      	b.n	8000ad2 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 80009be:	f640 733c 	movw	r3, #3900	; 0xf3c
 80009c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0018 	add.w	r0, r3, #24
 80009ca:	f107 020a 	add.w	r2, r7, #10
 80009ce:	2302      	movs	r3, #2
 80009d0:	2104      	movs	r1, #4
 80009d2:	f000 fe63 	bl	800169c <wm8994_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80009de:	23db      	movs	r3, #219	; 0xdb
 80009e0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f103 0018 	add.w	r0, r3, #24
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	2302      	movs	r3, #2
 80009ee:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80009f2:	f000 fe53 	bl	800169c <wm8994_write_reg>
 80009f6:	4602      	mov	r2, r0
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f103 0018 	add.w	r0, r3, #24
 8000a04:	f107 020a 	add.w	r2, r7, #10
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a0e:	f000 fe45 	bl	800169c <wm8994_write_reg>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a1a:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	f000 fe35 	bl	800169c <wm8994_write_reg>
 8000a32:	4602      	mov	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f103 0018 	add.w	r0, r3, #24
 8000a44:	f107 020a 	add.w	r2, r7, #10
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f240 6106 	movw	r1, #1542	; 0x606
 8000a4e:	f000 fe25 	bl	800169c <wm8994_write_reg>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0018 	add.w	r0, r3, #24
 8000a60:	f107 020a 	add.w	r2, r7, #10
 8000a64:	2302      	movs	r3, #2
 8000a66:	f240 6107 	movw	r1, #1543	; 0x607
 8000a6a:	f000 fe17 	bl	800169c <wm8994_write_reg>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0018 	add.w	r0, r3, #24
 8000a7c:	f107 020a 	add.w	r2, r7, #10
 8000a80:	2302      	movs	r3, #2
 8000a82:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000a86:	f000 fe09 	bl	800169c <wm8994_write_reg>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0018 	add.w	r0, r3, #24
 8000a98:	f107 020a 	add.w	r2, r7, #10
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f240 6109 	movw	r1, #1545	; 0x609
 8000aa2:	f000 fdfb 	bl	800169c <wm8994_write_reg>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f103 0018 	add.w	r0, r3, #24
 8000ab8:	f107 020a 	add.w	r2, r7, #10
 8000abc:	2302      	movs	r3, #2
 8000abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac2:	f000 fdeb 	bl	800169c <wm8994_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000ace:	e000      	b.n	8000ad2 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000ad0:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fc59 	bl	8001390 <WM8994_SetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d11a      	bne.n	8000b24 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 fc18 	bl	8001326 <WM8994_SetResolution>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000afe:	2103      	movs	r1, #3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fc2a 	bl	800135a <WM8994_SetProtocol>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fe5a 	bl	80017ce <wm8994_aif1_control1_adcr_src>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e01b      	b.n	8000b5c <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fbfb 	bl	8001326 <WM8994_SetResolution>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 fc0d 	bl	800135a <WM8994_SetProtocol>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fe3d 	bl	80017ce <wm8994_aif1_control1_adcr_src>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0018 	add.w	r0, r3, #24
 8000b66:	f107 020a 	add.w	r2, r7, #10
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f240 3102 	movw	r1, #770	; 0x302
 8000b70:	f000 fd94 	bl	800169c <wm8994_write_reg>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000b90:	f000 fd84 	bl	800169c <wm8994_write_reg>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0018 	add.w	r0, r3, #24
 8000ba6:	f107 020a 	add.w	r2, r7, #10
 8000baa:	2302      	movs	r3, #2
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	f000 fd74 	bl	800169c <wm8994_write_reg>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 81c6 	beq.w	8000f52 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d164      	bne.n	8000c98 <WM8994_Init+0x988>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d160      	bne.n	8000c98 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 0018 	add.w	r0, r3, #24
 8000be2:	f107 020a 	add.w	r2, r7, #10
 8000be6:	2302      	movs	r3, #2
 8000be8:	212d      	movs	r1, #45	; 0x2d
 8000bea:	f000 fd57 	bl	800169c <wm8994_write_reg>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 0018 	add.w	r0, r3, #24
 8000bfc:	f107 020a 	add.w	r2, r7, #10
 8000c00:	2302      	movs	r3, #2
 8000c02:	212e      	movs	r1, #46	; 0x2e
 8000c04:	f000 fd4a 	bl	800169c <wm8994_write_reg>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d119      	bne.n	8000c4c <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c1c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 0018 	add.w	r0, r3, #24
 8000c24:	f107 020a 	add.w	r2, r7, #10
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c2e:	f000 fd35 	bl	800169c <wm8994_write_reg>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000c3a:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <WM8994_Init+0xa4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000c40:	f240 1145 	movw	r1, #325	; 0x145
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fcb1 	bl	80015ac <WM8994_Delay>
 8000c4a:	e014      	b.n	8000c76 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000c4c:	f248 1308 	movw	r3, #33032	; 0x8108
 8000c50:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f103 0018 	add.w	r0, r3, #24
 8000c58:	f107 020a 	add.w	r2, r7, #10
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c62:	f000 fd1b 	bl	800169c <wm8994_write_reg>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fc9b 	bl	80015ac <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000c76:	2300      	movs	r3, #0
 8000c78:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f103 0018 	add.w	r0, r3, #24
 8000c80:	f107 020a 	add.w	r2, r7, #10
 8000c84:	2302      	movs	r3, #2
 8000c86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c8a:	f000 fd07 	bl	800169c <wm8994_write_reg>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e0f4      	b.n	8000e82 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2103      	movs	r1, #3
 8000cac:	f000 fcf6 	bl	800169c <wm8994_write_reg>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0018 	add.w	r0, r3, #24
 8000cc2:	f107 020a 	add.w	r2, r7, #10
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	f000 fce7 	bl	800169c <wm8994_write_reg>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	f107 020a 	add.w	r2, r7, #10
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	f000 fcda 	bl	800169c <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0018 	add.w	r0, r3, #24
 8000cfc:	f107 020a 	add.w	r2, r7, #10
 8000d00:	2302      	movs	r3, #2
 8000d02:	2136      	movs	r1, #54	; 0x36
 8000d04:	f000 fcca 	bl	800169c <wm8994_write_reg>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d10:	f243 0303 	movw	r3, #12291	; 0x3003
 8000d14:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0018 	add.w	r0, r3, #24
 8000d1c:	f107 020a 	add.w	r2, r7, #10
 8000d20:	2302      	movs	r3, #2
 8000d22:	2101      	movs	r1, #1
 8000d24:	f000 fcba 	bl	800169c <wm8994_write_reg>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d113      	bne.n	8000d60 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000d38:	f240 2305 	movw	r3, #517	; 0x205
 8000d3c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 0018 	add.w	r0, r3, #24
 8000d44:	f107 020a 	add.w	r2, r7, #10
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2151      	movs	r1, #81	; 0x51
 8000d4c:	f000 fca6 	bl	800169c <wm8994_write_reg>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <WM8994_Init+0xa6e>
 8000d5a:	bf00      	nop
 8000d5c:	24000400 	.word	0x24000400
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000d60:	2305      	movs	r3, #5
 8000d62:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0018 	add.w	r0, r3, #24
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	2302      	movs	r3, #2
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	f000 fc93 	bl	800169c <wm8994_write_reg>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000d7e:	f243 3303 	movw	r3, #13059	; 0x3303
 8000d82:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2101      	movs	r1, #1
 8000d92:	f000 fc83 	bl	800169c <wm8994_write_reg>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000d9e:	2322      	movs	r3, #34	; 0x22
 8000da0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 0018 	add.w	r0, r3, #24
 8000da8:	f107 020a 	add.w	r2, r7, #10
 8000dac:	2302      	movs	r3, #2
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f000 fc74 	bl	800169c <wm8994_write_reg>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000dbc:	f649 7325 	movw	r3, #40741	; 0x9f25
 8000dc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0018 	add.w	r0, r3, #24
 8000dc8:	f107 020a 	add.w	r2, r7, #10
 8000dcc:	2302      	movs	r3, #2
 8000dce:	214c      	movs	r1, #76	; 0x4c
 8000dd0:	f000 fc64 	bl	800169c <wm8994_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fbe4 	bl	80015ac <WM8994_Delay>
      
      tmp = 0x0001;
 8000de4:	2301      	movs	r3, #1
 8000de6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0018 	add.w	r0, r3, #24
 8000dee:	f107 020a 	add.w	r2, r7, #10
 8000df2:	2302      	movs	r3, #2
 8000df4:	212d      	movs	r1, #45	; 0x2d
 8000df6:	f000 fc51 	bl	800169c <wm8994_write_reg>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	212e      	movs	r1, #46	; 0x2e
 8000e10:	f000 fc44 	bl	800169c <wm8994_write_reg>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e1c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2103      	movs	r1, #3
 8000e30:	f000 fc34 	bl	800169c <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0018 	add.w	r0, r3, #24
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2154      	movs	r1, #84	; 0x54
 8000e4e:	f000 fc25 	bl	800169c <wm8994_write_reg>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000e5a:	f240 1101 	movw	r1, #257	; 0x101
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fba4 	bl	80015ac <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000e64:	23ee      	movs	r3, #238	; 0xee
 8000e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	2160      	movs	r1, #96	; 0x60
 8000e76:	f000 fc11 	bl	800169c <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f103 0018 	add.w	r0, r3, #24
 8000e8c:	f107 020a 	add.w	r2, r7, #10
 8000e90:	2302      	movs	r3, #2
 8000e92:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000e96:	f000 fc01 	bl	800169c <wm8994_write_reg>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb2:	f000 fbf3 	bl	800169c <wm8994_write_reg>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0018 	add.w	r0, r3, #24
 8000ec8:	f107 020a 	add.w	r2, r7, #10
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ed2:	f000 fbe3 	bl	800169c <wm8994_write_reg>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0018 	add.w	r0, r3, #24
 8000ee8:	f107 020a 	add.w	r2, r7, #10
 8000eec:	2302      	movs	r3, #2
 8000eee:	f240 6112 	movw	r1, #1554	; 0x612
 8000ef2:	f000 fbd3 	bl	800169c <wm8994_write_reg>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0018 	add.w	r0, r3, #24
 8000f04:	f107 020a 	add.w	r2, r7, #10
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8000f0e:	f000 fbc5 	bl	800169c <wm8994_write_reg>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f103 0018 	add.w	r0, r3, #24
 8000f24:	f107 020a 	add.w	r2, r7, #10
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f240 4122 	movw	r1, #1058	; 0x422
 8000f2e:	f000 fbb5 	bl	800169c <wm8994_write_reg>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f8c9 	bl	80010dc <WM8994_SetVolume>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b5 	beq.w	80010c6 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d003      	beq.n	8000f6c <WM8994_Init+0xc5c>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000f6c:	2313      	movs	r3, #19
 8000f6e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0018 	add.w	r0, r3, #24
 8000f76:	f107 020a 	add.w	r2, r7, #10
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f000 fb8d 	bl	800169c <wm8994_write_reg>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0018 	add.w	r0, r3, #24
 8000f94:	f107 020a 	add.w	r2, r7, #10
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f9e:	f000 fb7d 	bl	800169c <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8000faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f103 0018 	add.w	r0, r3, #24
 8000fb6:	f107 020a 	add.w	r2, r7, #10
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f240 4111 	movw	r1, #1041	; 0x411
 8000fc0:	f000 fb6c 	bl	800169c <wm8994_write_reg>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e06f      	b.n	80010ae <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d13e      	bne.n	8001054 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f103 0018 	add.w	r0, r3, #24
 8000fe0:	f107 020a 	add.w	r2, r7, #10
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f000 fb58 	bl	800169c <wm8994_write_reg>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 0018 	add.w	r0, r3, #24
 8000ffe:	f107 020a 	add.w	r2, r7, #10
 8001002:	2302      	movs	r3, #2
 8001004:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001008:	f000 fb48 	bl	800169c <wm8994_write_reg>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001018:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0018 	add.w	r0, r3, #24
 8001020:	f107 020a 	add.w	r2, r7, #10
 8001024:	2302      	movs	r3, #2
 8001026:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800102a:	f000 fb37 	bl	800169c <wm8994_write_reg>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0018 	add.w	r0, r3, #24
 800103c:	f107 020a 	add.w	r2, r7, #10
 8001040:	2302      	movs	r3, #2
 8001042:	f240 4111 	movw	r1, #1041	; 0x411
 8001046:	f000 fb29 	bl	800169c <wm8994_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e02c      	b.n	80010ae <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8001054:	230b      	movs	r3, #11
 8001056:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0018 	add.w	r0, r3, #24
 800105e:	f107 020a 	add.w	r2, r7, #10
 8001062:	2302      	movs	r3, #2
 8001064:	2118      	movs	r1, #24
 8001066:	f000 fb19 	bl	800169c <wm8994_write_reg>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f103 0018 	add.w	r0, r3, #24
 8001078:	f107 020a 	add.w	r2, r7, #10
 800107c:	2302      	movs	r3, #2
 800107e:	211a      	movs	r1, #26
 8001080:	f000 fb0c 	bl	800169c <wm8994_write_reg>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800108c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010a2:	f000 fafb 	bl	800169c <wm8994_write_reg>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f80f 	bl	80010dc <WM8994_SetVolume>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8089 	bne.w	8001204 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b3e      	cmp	r3, #62	; 0x3e
 80010f6:	d93c      	bls.n	8001172 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80010f8:	2100      	movs	r1, #0
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f8c8 	bl	8001290 <WM8994_SetMute>
 8001100:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8001102:	f240 137f 	movw	r3, #383	; 0x17f
 8001106:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f103 0018 	add.w	r0, r3, #24
 800110e:	f107 0212 	add.w	r2, r7, #18
 8001112:	2302      	movs	r3, #2
 8001114:	211c      	movs	r1, #28
 8001116:	f000 fac1 	bl	800169c <wm8994_write_reg>
 800111a:	4602      	mov	r2, r0
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f103 0018 	add.w	r0, r3, #24
 8001128:	f107 0212 	add.w	r2, r7, #18
 800112c:	2302      	movs	r3, #2
 800112e:	211d      	movs	r1, #29
 8001130:	f000 fab4 	bl	800169c <wm8994_write_reg>
 8001134:	4602      	mov	r2, r0
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f103 0018 	add.w	r0, r3, #24
 8001142:	f107 0212 	add.w	r2, r7, #18
 8001146:	2302      	movs	r3, #2
 8001148:	2126      	movs	r1, #38	; 0x26
 800114a:	f000 faa7 	bl	800169c <wm8994_write_reg>
 800114e:	4602      	mov	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f103 0018 	add.w	r0, r3, #24
 800115c:	f107 0212 	add.w	r2, r7, #18
 8001160:	2302      	movs	r3, #2
 8001162:	2127      	movs	r1, #39	; 0x27
 8001164:	f000 fa9a 	bl	800169c <wm8994_write_reg>
 8001168:	4602      	mov	r2, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e083      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001178:	2101      	movs	r1, #1
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f888 	bl	8001290 <WM8994_SetMute>
 8001180:	6178      	str	r0, [r7, #20]
 8001182:	e07a      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001184:	2100      	movs	r1, #0
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f882 	bl	8001290 <WM8994_SetMute>
 800118c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001196:	b29b      	uxth	r3, r3
 8001198:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 0018 	add.w	r0, r3, #24
 80011a0:	f107 0212 	add.w	r2, r7, #18
 80011a4:	2302      	movs	r3, #2
 80011a6:	211c      	movs	r1, #28
 80011a8:	f000 fa78 	bl	800169c <wm8994_write_reg>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f103 0018 	add.w	r0, r3, #24
 80011ba:	f107 0212 	add.w	r2, r7, #18
 80011be:	2302      	movs	r3, #2
 80011c0:	211d      	movs	r1, #29
 80011c2:	f000 fa6b 	bl	800169c <wm8994_write_reg>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	4413      	add	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f103 0018 	add.w	r0, r3, #24
 80011d4:	f107 0212 	add.w	r2, r7, #18
 80011d8:	2302      	movs	r3, #2
 80011da:	2126      	movs	r1, #38	; 0x26
 80011dc:	f000 fa5e 	bl	800169c <wm8994_write_reg>
 80011e0:	4602      	mov	r2, r0
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f103 0018 	add.w	r0, r3, #24
 80011ee:	f107 0212 	add.w	r2, r7, #18
 80011f2:	2302      	movs	r3, #2
 80011f4:	2127      	movs	r1, #39	; 0x27
 80011f6:	f000 fa51 	bl	800169c <wm8994_write_reg>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e03a      	b.n	800127a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	b29b      	uxth	r3, r3
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	b29b      	uxth	r3, r3
 800120e:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f103 0018 	add.w	r0, r3, #24
 8001216:	f107 0212 	add.w	r2, r7, #18
 800121a:	2302      	movs	r3, #2
 800121c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001220:	f000 fa3c 	bl	800169c <wm8994_write_reg>
 8001224:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f103 0018 	add.w	r0, r3, #24
 800122c:	f107 0212 	add.w	r2, r7, #18
 8001230:	2302      	movs	r3, #2
 8001232:	f240 4101 	movw	r1, #1025	; 0x401
 8001236:	f000 fa31 	bl	800169c <wm8994_write_reg>
 800123a:	4602      	mov	r2, r0
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f103 0018 	add.w	r0, r3, #24
 8001248:	f107 0212 	add.w	r2, r7, #18
 800124c:	2302      	movs	r3, #2
 800124e:	f240 4104 	movw	r1, #1028	; 0x404
 8001252:	f000 fa23 	bl	800169c <wm8994_write_reg>
 8001256:	4602      	mov	r2, r0
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	4413      	add	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f103 0018 	add.w	r0, r3, #24
 8001264:	f107 0212 	add.w	r2, r7, #18
 8001268:	2302      	movs	r3, #2
 800126a:	f240 4105 	movw	r1, #1029	; 0x405
 800126e:	f000 fa15 	bl	800169c <wm8994_write_reg>
 8001272:	4602      	mov	r2, r0
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001284:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001286:	697b      	ldr	r3, [r7, #20]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d11c      	bne.n	80012da <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0018 	add.w	r0, r3, #24
 80012ac:	f107 020a 	add.w	r2, r7, #10
 80012b0:	2302      	movs	r3, #2
 80012b2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012b6:	f000 f9f1 	bl	800169c <wm8994_write_reg>
 80012ba:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f103 0018 	add.w	r0, r3, #24
 80012c2:	f107 020a 	add.w	r2, r7, #10
 80012c6:	2302      	movs	r3, #2
 80012c8:	f240 4122 	movw	r1, #1058	; 0x422
 80012cc:	f000 f9e6 	bl	800169c <wm8994_write_reg>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e01a      	b.n	8001310 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 80012da:	2310      	movs	r3, #16
 80012dc:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0018 	add.w	r0, r3, #24
 80012e4:	f107 020a 	add.w	r2, r7, #10
 80012e8:	2302      	movs	r3, #2
 80012ea:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012ee:	f000 f9d5 	bl	800169c <wm8994_write_reg>
 80012f2:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f103 0018 	add.w	r0, r3, #24
 80012fa:	f107 020a 	add.w	r2, r7, #10
 80012fe:	2302      	movs	r3, #2
 8001300:	f240 4122 	movw	r1, #1058	; 0x422
 8001304:	f000 f9ca 	bl	800169c <wm8994_write_reg>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800131c:	68fb      	ldr	r3, [r7, #12]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3318      	adds	r3, #24
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b292      	uxth	r2, r2
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fa15 	bl	800176e <wm8994_aif1_control1_wl>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3318      	adds	r3, #24
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b292      	uxth	r2, r2
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f9cb 	bl	800170e <wm8994_aif1_control1_fmt>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001382:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <WM8994_SetFrequency+0x164>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d05d      	beq.n	800145e <WM8994_SetFrequency+0xce>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	4a53      	ldr	r2, [pc, #332]	; (80014f4 <WM8994_SetFrequency+0x164>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f200 8091 	bhi.w	80014ce <WM8994_SetFrequency+0x13e>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d07d      	beq.n	80014b2 <WM8994_SetFrequency+0x122>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013bc:	4293      	cmp	r3, r2
 80013be:	f200 8086 	bhi.w	80014ce <WM8994_SetFrequency+0x13e>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013c8:	d03b      	beq.n	8001442 <WM8994_SetFrequency+0xb2>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013d0:	d87d      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f245 6222 	movw	r2, #22050	; 0x5622
 80013d8:	4293      	cmp	r3, r2
 80013da:	d05c      	beq.n	8001496 <WM8994_SetFrequency+0x106>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f245 6222 	movw	r2, #22050	; 0x5622
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d873      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013ec:	d01b      	beq.n	8001426 <WM8994_SetFrequency+0x96>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013f4:	d86b      	bhi.n	80014ce <WM8994_SetFrequency+0x13e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013fc:	d005      	beq.n	800140a <WM8994_SetFrequency+0x7a>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001404:	4293      	cmp	r3, r2
 8001406:	d038      	beq.n	800147a <WM8994_SetFrequency+0xea>
 8001408:	e061      	b.n	80014ce <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 800140a:	2303      	movs	r3, #3
 800140c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f103 0018 	add.w	r0, r3, #24
 8001414:	f107 020a 	add.w	r2, r7, #10
 8001418:	2302      	movs	r3, #2
 800141a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800141e:	f000 f93d 	bl	800169c <wm8994_write_reg>
 8001422:	60f8      	str	r0, [r7, #12]
    break;
 8001424:	e061      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001426:	2333      	movs	r3, #51	; 0x33
 8001428:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f103 0018 	add.w	r0, r3, #24
 8001430:	f107 020a 	add.w	r2, r7, #10
 8001434:	2302      	movs	r3, #2
 8001436:	f44f 7104 	mov.w	r1, #528	; 0x210
 800143a:	f000 f92f 	bl	800169c <wm8994_write_reg>
 800143e:	60f8      	str	r0, [r7, #12]
    break;
 8001440:	e053      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001442:	2363      	movs	r3, #99	; 0x63
 8001444:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 0018 	add.w	r0, r3, #24
 800144c:	f107 020a 	add.w	r2, r7, #10
 8001450:	2302      	movs	r3, #2
 8001452:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001456:	f000 f921 	bl	800169c <wm8994_write_reg>
 800145a:	60f8      	str	r0, [r7, #12]
    break;
 800145c:	e045      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 800145e:	23a3      	movs	r3, #163	; 0xa3
 8001460:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0018 	add.w	r0, r3, #24
 8001468:	f107 020a 	add.w	r2, r7, #10
 800146c:	2302      	movs	r3, #2
 800146e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001472:	f000 f913 	bl	800169c <wm8994_write_reg>
 8001476:	60f8      	str	r0, [r7, #12]
    break;
 8001478:	e037      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 800147a:	2313      	movs	r3, #19
 800147c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f103 0018 	add.w	r0, r3, #24
 8001484:	f107 020a 	add.w	r2, r7, #10
 8001488:	2302      	movs	r3, #2
 800148a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800148e:	f000 f905 	bl	800169c <wm8994_write_reg>
 8001492:	60f8      	str	r0, [r7, #12]
    break;
 8001494:	e029      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001496:	2343      	movs	r3, #67	; 0x43
 8001498:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f103 0018 	add.w	r0, r3, #24
 80014a0:	f107 020a 	add.w	r2, r7, #10
 80014a4:	2302      	movs	r3, #2
 80014a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014aa:	f000 f8f7 	bl	800169c <wm8994_write_reg>
 80014ae:	60f8      	str	r0, [r7, #12]
    break;
 80014b0:	e01b      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 80014b2:	2373      	movs	r3, #115	; 0x73
 80014b4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f103 0018 	add.w	r0, r3, #24
 80014bc:	f107 020a 	add.w	r2, r7, #10
 80014c0:	2302      	movs	r3, #2
 80014c2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014c6:	f000 f8e9 	bl	800169c <wm8994_write_reg>
 80014ca:	60f8      	str	r0, [r7, #12]
    break; 
 80014cc:	e00d      	b.n	80014ea <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 80014ce:	2383      	movs	r3, #131	; 0x83
 80014d0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f103 0018 	add.w	r0, r3, #24
 80014d8:	f107 020a 	add.w	r2, r7, #10
 80014dc:	2302      	movs	r3, #2
 80014de:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014e2:	f000 f8db 	bl	800169c <wm8994_write_reg>
 80014e6:	60f8      	str	r0, [r7, #12]
    break; 
 80014e8:	bf00      	nop
  }
  
  return ret;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	00017700 	.word	0x00017700

080014f8 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3318      	adds	r3, #24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f8ee 	bl	80016ec <wm8994_sw_reset_w>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800151a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e02c      	b.n	800159a <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	891a      	ldrh	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <WM8994_RegisterBusIO+0x7c>)
 8001574:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <WM8994_RegisterBusIO+0x80>)
 800157a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4798      	blx	r3
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	e002      	b.n	800159a <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001598:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	080015e1 	.word	0x080015e1
 80015a8:	08001613 	.word	0x08001613

080015ac <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4798      	blx	r3
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015c0:	bf00      	nop
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4798      	blx	r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d8f5      	bhi.n	80015c2 <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	461a      	mov	r2, r3
 80015ec:	460b      	mov	r3, r1
 80015ee:	817b      	strh	r3, [r7, #10]
 80015f0:	4613      	mov	r3, r2
 80015f2:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	691c      	ldr	r4, [r3, #16]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	8918      	ldrh	r0, [r3, #8]
 8001600:	893b      	ldrh	r3, [r7, #8]
 8001602:	8979      	ldrh	r1, [r7, #10]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	47a0      	blx	r4
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}

08001612 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	461a      	mov	r2, r3
 800161e:	460b      	mov	r3, r1
 8001620:	817b      	strh	r3, [r7, #10]
 8001622:	4613      	mov	r3, r2
 8001624:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	68dc      	ldr	r4, [r3, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	8918      	ldrh	r0, [r3, #8]
 8001632:	893b      	ldrh	r3, [r7, #8]
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	47a0      	blx	r4
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}

08001644 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	460b      	mov	r3, r1
 8001652:	817b      	strh	r3, [r7, #10]
 8001654:	4613      	mov	r3, r2
 8001656:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685c      	ldr	r4, [r3, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6898      	ldr	r0, [r3, #8]
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	8979      	ldrh	r1, [r7, #10]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	47a0      	blx	r4
 8001668:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db10      	blt.n	8001692 <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21a      	sxth	r2, r3
 8001682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	8a7a      	ldrh	r2, [r7, #18]
 8001690:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8001692:	697b      	ldr	r3, [r7, #20]
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}

0800169c <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	461a      	mov	r2, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	817b      	strh	r3, [r7, #10]
 80016ac:	4613      	mov	r3, r2
 80016ae:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	8afb      	ldrh	r3, [r7, #22]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	893b      	ldrh	r3, [r7, #8]
 80016da:	f107 0216 	add.w	r2, r7, #22
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	47a0      	blx	r4
 80016e2:	4603      	mov	r3, r0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 80016f8:	1cba      	adds	r2, r7, #2
 80016fa:	2302      	movs	r3, #2
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffcc 	bl	800169c <wm8994_write_reg>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800171e:	f107 020a 	add.w	r2, r7, #10
 8001722:	2302      	movs	r3, #2
 8001724:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff8b 	bl	8001644 <wm8994_read_reg>
 800172e:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	f023 0318 	bic.w	r3, r3, #24
 800173c:	b29b      	uxth	r3, r3
 800173e:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	b21a      	sxth	r2, r3
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21b      	sxth	r3, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001752:	f107 020a 	add.w	r2, r7, #10
 8001756:	2302      	movs	r3, #2
 8001758:	f44f 7140 	mov.w	r1, #768	; 0x300
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff9d 	bl	800169c <wm8994_write_reg>
 8001762:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800177e:	f107 020a 	add.w	r2, r7, #10
 8001782:	2302      	movs	r3, #2
 8001784:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff5b 	bl	8001644 <wm8994_read_reg>
 800178e:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8001796:	897b      	ldrh	r3, [r7, #10]
 8001798:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800179c:	b29b      	uxth	r3, r3
 800179e:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80017b2:	f107 020a 	add.w	r2, r7, #10
 80017b6:	2302      	movs	r3, #2
 80017b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff6d 	bl	800169c <wm8994_write_reg>
 80017c2:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80017de:	f107 020a 	add.w	r2, r7, #10
 80017e2:	2302      	movs	r3, #2
 80017e4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff2b 	bl	8001644 <wm8994_read_reg>
 80017ee:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	039b      	lsls	r3, r3, #14
 8001804:	b21a      	sxth	r2, r3
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b21b      	sxth	r3, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8001812:	f107 020a 	add.w	r2, r7, #10
 8001816:	2302      	movs	r3, #2
 8001818:	f44f 7140 	mov.w	r1, #768	; 0x300
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff3d 	bl	800169c <wm8994_write_reg>
 8001822:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8001824:	68fb      	ldr	r3, [r7, #12]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10f      	bne.n	8001864 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <BSP_LED_Init+0xb0>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <BSP_LED_Init+0xb0>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <BSP_LED_Init+0xb0>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	e015      	b.n	8001890 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10f      	bne.n	800188a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <BSP_LED_Init+0xb0>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <BSP_LED_Init+0xb0>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <BSP_LED_Init+0xb0>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	e002      	b.n	8001890 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800188a:	f06f 0301 	mvn.w	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <BSP_LED_Init+0xb4>)
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <BSP_LED_Init+0xb8>)
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	f107 0210 	add.w	r2, r7, #16
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 ffdd 	bl	8004874 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <BSP_LED_Init+0xb8>)
 80018be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <BSP_LED_Init+0xb4>)
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2201      	movs	r2, #1
 80018ce:	4619      	mov	r1, r3
 80018d0:	f003 fa7a 	bl	8004dc8 <HAL_GPIO_WritePin>

  return ret;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
 80018e4:	0800d320 	.word	0x0800d320
 80018e8:	24000404 	.word	0x24000404

080018ec <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <BSP_LED_On+0x34>)
 80018fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <BSP_LED_On+0x38>)
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	b29b      	uxth	r3, r3
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f003 fa5a 	bl	8004dc8 <HAL_GPIO_WritePin>
  return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000404 	.word	0x24000404
 8001924:	0800d320 	.word	0x0800d320

08001928 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <BSP_LED_Off+0x34>)
 800193a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <BSP_LED_Off+0x38>)
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	b29b      	uxth	r3, r3
 8001948:	2201      	movs	r2, #1
 800194a:	4619      	mov	r1, r3
 800194c:	f003 fa3c 	bl	8004dc8 <HAL_GPIO_WritePin>
  return ret;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000404 	.word	0x24000404
 8001960:	0800d320 	.word	0x0800d320

08001964 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f825 	bl	80019bc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f824 	bl	80019d0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_SAI_ErrorCallback+0x28>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d103      	bne.n	80019aa <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f81e 	bl	80019e4 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80019a8:	e002      	b.n	80019b0 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f84e 	bl	8001a4c <BSP_AUDIO_IN_Error_CallBack>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40015824 	.word	0x40015824

080019bc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f819 	bl	8001a38 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f804 	bl	8001a24 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a66:	2003      	movs	r0, #3
 8001a68:	f000 f980 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a6c:	f005 fc58 	bl	8007320 <HAL_RCC_GetSysClockFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_Init+0x68>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	4913      	ldr	r1, [pc, #76]	; (8001acc <HAL_Init+0x6c>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_Init+0x68>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_Init+0x6c>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_Init+0x70>)
 8001aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_Init+0x74>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f814 	bl	8001ad8 <HAL_InitTick>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e002      	b.n	8001ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aba:	f008 ffe3 	bl	800aa84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	0800d330 	.word	0x0800d330
 8001ad0:	24000424 	.word	0x24000424
 8001ad4:	24000420 	.word	0x24000420

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_InitTick+0x60>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e021      	b.n	8001b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_InitTick+0x64>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_InitTick+0x60>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f973 	bl	8001dee <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b20:	f000 f92f 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x68>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	24000410 	.word	0x24000410
 8001b3c:	24000420 	.word	0x24000420
 8001b40:	2400040c 	.word	0x2400040c

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	24000410 	.word	0x24000410
 8001b68:	240004b4 	.word	0x240004b4

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	240004b4 	.word	0x240004b4

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	05fa0000 	.word	0x05fa0000

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db12      	blt.n	8001c5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	490a      	ldr	r1, [pc, #40]	; (8001c68 <__NVIC_DisableIRQ+0x44>)
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	3320      	adds	r3, #32
 8001c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c50:	f3bf 8f4f 	dsb	sy
}
 8001c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c56:	f3bf 8f6f 	isb	sy
}
 8001c5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4c:	f7ff ff8e 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff05 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff1c 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff90 	bl	8001cc0 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5f 	bl	8001c6c <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff0f 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff1f 	bl	8001c24 <__NVIC_DisableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ff96 	bl	8001d28 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e054      	b.n	8001ec4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f5b      	ldrb	r3, [r3, #29]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f008 fe44 	bl	800aab8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_CRC_Init+0xc4>)
 8001e44:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0218 	bic.w	r2, r2, #24
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	e00c      	b.n	8001e72 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	461a      	mov	r2, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f834 	bl	8001ed0 <HAL_CRCEx_Polynomial_Set>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e028      	b.n	8001ec4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	795b      	ldrb	r3, [r3, #5]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	e004      	b.n	8001e90 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6912      	ldr	r2, [r2, #16]
 8001e8e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	04c11db7 	.word	0x04c11db7

08001ed0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ee0:	231f      	movs	r3, #31
 8001ee2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ee4:	bf00      	nop
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	613a      	str	r2, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <HAL_CRCEx_Polynomial_Set+0x34>
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_CRCEx_Polynomial_Set+0x16>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b18      	cmp	r3, #24
 8001f08:	d846      	bhi.n	8001f98 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f9f 	.word	0x08001f9f
 8001f14:	08001f99 	.word	0x08001f99
 8001f18:	08001f99 	.word	0x08001f99
 8001f1c:	08001f99 	.word	0x08001f99
 8001f20:	08001f99 	.word	0x08001f99
 8001f24:	08001f99 	.word	0x08001f99
 8001f28:	08001f99 	.word	0x08001f99
 8001f2c:	08001f99 	.word	0x08001f99
 8001f30:	08001f8d 	.word	0x08001f8d
 8001f34:	08001f99 	.word	0x08001f99
 8001f38:	08001f99 	.word	0x08001f99
 8001f3c:	08001f99 	.word	0x08001f99
 8001f40:	08001f99 	.word	0x08001f99
 8001f44:	08001f99 	.word	0x08001f99
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001f99 	.word	0x08001f99
 8001f50:	08001f81 	.word	0x08001f81
 8001f54:	08001f99 	.word	0x08001f99
 8001f58:	08001f99 	.word	0x08001f99
 8001f5c:	08001f99 	.word	0x08001f99
 8001f60:	08001f99 	.word	0x08001f99
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001f75 	.word	0x08001f75
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d913      	bls.n	8001fa2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f7e:	e010      	b.n	8001fa2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	d90f      	bls.n	8001fa6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f8a:	e00c      	b.n	8001fa6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b0f      	cmp	r3, #15
 8001f90:	d90b      	bls.n	8001faa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f96:	e008      	b.n	8001faa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f9c:	e006      	b.n	8001fac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e004      	b.n	8001fac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001faa:	bf00      	nop
  }
  if (status == HAL_OK)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 0118 	bic.w	r1, r3, #24
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fdc2 	bl	8001b6c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e314      	b.n	800261e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a66      	ldr	r2, [pc, #408]	; (8002194 <HAL_DMA_Init+0x1b8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d04a      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_DMA_Init+0x1bc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d045      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a63      	ldr	r2, [pc, #396]	; (800219c <HAL_DMA_Init+0x1c0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d040      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a62      	ldr	r2, [pc, #392]	; (80021a0 <HAL_DMA_Init+0x1c4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d03b      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_DMA_Init+0x1c8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d036      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5f      	ldr	r2, [pc, #380]	; (80021a8 <HAL_DMA_Init+0x1cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d031      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_DMA_Init+0x1d0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02c      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <HAL_DMA_Init+0x1d4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d027      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5a      	ldr	r2, [pc, #360]	; (80021b4 <HAL_DMA_Init+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a59      	ldr	r2, [pc, #356]	; (80021b8 <HAL_DMA_Init+0x1dc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d01d      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a57      	ldr	r2, [pc, #348]	; (80021bc <HAL_DMA_Init+0x1e0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d018      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a56      	ldr	r2, [pc, #344]	; (80021c0 <HAL_DMA_Init+0x1e4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <HAL_DMA_Init+0x1e8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00e      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <HAL_DMA_Init+0x1ec>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d009      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_DMA_Init+0x1f0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_DMA_Init+0xb8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a50      	ldr	r2, [pc, #320]	; (80021d0 <HAL_DMA_Init+0x1f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Init+0xbc>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_DMA_Init+0xbe>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 813c 	beq.w	8002318 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_DMA_Init+0x1b8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a36      	ldr	r2, [pc, #216]	; (8002198 <HAL_DMA_Init+0x1bc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d045      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_DMA_Init+0x1c0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d040      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_DMA_Init+0x1c4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d03b      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_DMA_Init+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d036      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_DMA_Init+0x1cc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d031      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_DMA_Init+0x1d0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02c      	beq.n	8002150 <HAL_DMA_Init+0x174>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_DMA_Init+0x1d4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d027      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <HAL_DMA_Init+0x1d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d022      	beq.n	8002150 <HAL_DMA_Init+0x174>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_DMA_Init+0x1dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01d      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_DMA_Init+0x1e0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d018      	beq.n	8002150 <HAL_DMA_Init+0x174>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_DMA_Init+0x1e4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <HAL_DMA_Init+0x1e8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_DMA_Init+0x1ec>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_DMA_Init+0x174>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_DMA_Init+0x1f0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Init+0x174>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <HAL_DMA_Init+0x1f4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d108      	bne.n	8002162 <HAL_DMA_Init+0x186>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e007      	b.n	8002172 <HAL_DMA_Init+0x196>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002172:	e02f      	b.n	80021d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002174:	f7ff fcfa 	bl	8001b6c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b05      	cmp	r3, #5
 8002180:	d928      	bls.n	80021d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2203      	movs	r2, #3
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e244      	b.n	800261e <HAL_DMA_Init+0x642>
 8002194:	40020010 	.word	0x40020010
 8002198:	40020028 	.word	0x40020028
 800219c:	40020040 	.word	0x40020040
 80021a0:	40020058 	.word	0x40020058
 80021a4:	40020070 	.word	0x40020070
 80021a8:	40020088 	.word	0x40020088
 80021ac:	400200a0 	.word	0x400200a0
 80021b0:	400200b8 	.word	0x400200b8
 80021b4:	40020410 	.word	0x40020410
 80021b8:	40020428 	.word	0x40020428
 80021bc:	40020440 	.word	0x40020440
 80021c0:	40020458 	.word	0x40020458
 80021c4:	40020470 	.word	0x40020470
 80021c8:	40020488 	.word	0x40020488
 80021cc:	400204a0 	.word	0x400204a0
 80021d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1c8      	bne.n	8002174 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4b84      	ldr	r3, [pc, #528]	; (8002400 <HAL_DMA_Init+0x424>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2b04      	cmp	r3, #4
 8002226:	d107      	bne.n	8002238 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4313      	orrs	r3, r2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b28      	cmp	r3, #40	; 0x28
 800223e:	d903      	bls.n	8002248 <HAL_DMA_Init+0x26c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b2e      	cmp	r3, #46	; 0x2e
 8002246:	d91f      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b3e      	cmp	r3, #62	; 0x3e
 800224e:	d903      	bls.n	8002258 <HAL_DMA_Init+0x27c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b42      	cmp	r3, #66	; 0x42
 8002256:	d917      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b46      	cmp	r3, #70	; 0x46
 800225e:	d903      	bls.n	8002268 <HAL_DMA_Init+0x28c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b48      	cmp	r3, #72	; 0x48
 8002266:	d90f      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b4e      	cmp	r3, #78	; 0x4e
 800226e:	d903      	bls.n	8002278 <HAL_DMA_Init+0x29c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b52      	cmp	r3, #82	; 0x52
 8002276:	d907      	bls.n	8002288 <HAL_DMA_Init+0x2ac>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b73      	cmp	r3, #115	; 0x73
 800227e:	d905      	bls.n	800228c <HAL_DMA_Init+0x2b0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b77      	cmp	r3, #119	; 0x77
 8002286:	d801      	bhi.n	800228c <HAL_DMA_Init+0x2b0>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_DMA_Init+0x2b2>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002298:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f023 0307 	bic.w	r3, r3, #7
 80022b0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d117      	bne.n	80022f4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f002 f82a 	bl	8004330 <DMA_CheckFifoParam>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e194      	b.n	800261e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f001 ff65 	bl	80041cc <DMA_CalcBaseAndBitshift>
 8002302:	4603      	mov	r3, r0
 8002304:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	223f      	movs	r2, #63	; 0x3f
 8002310:	409a      	lsls	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e0ca      	b.n	80024ae <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a39      	ldr	r2, [pc, #228]	; (8002404 <HAL_DMA_Init+0x428>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_DMA_Init+0x42c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d01d      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a36      	ldr	r2, [pc, #216]	; (800240c <HAL_DMA_Init+0x430>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d018      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a35      	ldr	r2, [pc, #212]	; (8002410 <HAL_DMA_Init+0x434>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a33      	ldr	r2, [pc, #204]	; (8002414 <HAL_DMA_Init+0x438>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00e      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a32      	ldr	r2, [pc, #200]	; (8002418 <HAL_DMA_Init+0x43c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_DMA_Init+0x440>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_DMA_Init+0x38c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <HAL_DMA_Init+0x444>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_DMA_Init+0x390>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_DMA_Init+0x392>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8094 	beq.w	800249c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <HAL_DMA_Init+0x428>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d021      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a21      	ldr	r2, [pc, #132]	; (8002408 <HAL_DMA_Init+0x42c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01c      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_DMA_Init+0x430>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d017      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_DMA_Init+0x434>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d012      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_DMA_Init+0x438>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_DMA_Init+0x43c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d008      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_DMA_Init+0x440>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <HAL_DMA_Init+0x3e6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_DMA_Init+0x444>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_DMA_Init+0x448>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d01d      	beq.n	8002428 <HAL_DMA_Init+0x44c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d102      	bne.n	80023fa <HAL_DMA_Init+0x41e>
 80023f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f8:	e017      	b.n	800242a <HAL_DMA_Init+0x44e>
 80023fa:	2300      	movs	r3, #0
 80023fc:	e015      	b.n	800242a <HAL_DMA_Init+0x44e>
 80023fe:	bf00      	nop
 8002400:	fe10803f 	.word	0xfe10803f
 8002404:	58025408 	.word	0x58025408
 8002408:	5802541c 	.word	0x5802541c
 800240c:	58025430 	.word	0x58025430
 8002410:	58025444 	.word	0x58025444
 8002414:	58025458 	.word	0x58025458
 8002418:	5802546c 	.word	0x5802546c
 800241c:	58025480 	.word	0x58025480
 8002420:	58025494 	.word	0x58025494
 8002424:	fffe000f 	.word	0xfffe000f
 8002428:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002458:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <HAL_DMA_Init+0x64c>)
 8002470:	4413      	add	r3, r2
 8002472:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_DMA_Init+0x650>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 fea3 	bl	80041cc <DMA_CalcBaseAndBitshift>
 8002486:	4603      	mov	r3, r0
 8002488:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	e008      	b.n	80024ae <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0b7      	b.n	800261e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5f      	ldr	r2, [pc, #380]	; (8002630 <HAL_DMA_Init+0x654>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d072      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5d      	ldr	r2, [pc, #372]	; (8002634 <HAL_DMA_Init+0x658>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d06d      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <HAL_DMA_Init+0x65c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d068      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_DMA_Init+0x660>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d063      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a59      	ldr	r2, [pc, #356]	; (8002640 <HAL_DMA_Init+0x664>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d05e      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a57      	ldr	r2, [pc, #348]	; (8002644 <HAL_DMA_Init+0x668>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d059      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a56      	ldr	r2, [pc, #344]	; (8002648 <HAL_DMA_Init+0x66c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d054      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a54      	ldr	r2, [pc, #336]	; (800264c <HAL_DMA_Init+0x670>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d04f      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a53      	ldr	r2, [pc, #332]	; (8002650 <HAL_DMA_Init+0x674>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d04a      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a51      	ldr	r2, [pc, #324]	; (8002654 <HAL_DMA_Init+0x678>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d045      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_DMA_Init+0x67c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d040      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_DMA_Init+0x680>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d03b      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <HAL_DMA_Init+0x684>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d036      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <HAL_DMA_Init+0x688>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d031      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_DMA_Init+0x68c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d02c      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_DMA_Init+0x690>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d027      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_DMA_Init+0x694>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d022      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a45      	ldr	r2, [pc, #276]	; (8002674 <HAL_DMA_Init+0x698>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01d      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a44      	ldr	r2, [pc, #272]	; (8002678 <HAL_DMA_Init+0x69c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d018      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_DMA_Init+0x6a0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a41      	ldr	r2, [pc, #260]	; (8002680 <HAL_DMA_Init+0x6a4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00e      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3f      	ldr	r2, [pc, #252]	; (8002684 <HAL_DMA_Init+0x6a8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3e      	ldr	r2, [pc, #248]	; (8002688 <HAL_DMA_Init+0x6ac>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_DMA_Init+0x5c2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <HAL_DMA_Init+0x6b0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_DMA_Init+0x5c6>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_DMA_Init+0x5c8>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d032      	beq.n	800260e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 ff3d 	bl	8004428 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b80      	cmp	r3, #128	; 0x80
 80025b4:	d102      	bne.n	80025bc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d010      	beq.n	80025fc <HAL_DMA_Init+0x620>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d80c      	bhi.n	80025fc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f001 ffba 	bl	800455c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e008      	b.n	800260e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	a7fdabf8 	.word	0xa7fdabf8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020010 	.word	0x40020010
 8002634:	40020028 	.word	0x40020028
 8002638:	40020040 	.word	0x40020040
 800263c:	40020058 	.word	0x40020058
 8002640:	40020070 	.word	0x40020070
 8002644:	40020088 	.word	0x40020088
 8002648:	400200a0 	.word	0x400200a0
 800264c:	400200b8 	.word	0x400200b8
 8002650:	40020410 	.word	0x40020410
 8002654:	40020428 	.word	0x40020428
 8002658:	40020440 	.word	0x40020440
 800265c:	40020458 	.word	0x40020458
 8002660:	40020470 	.word	0x40020470
 8002664:	40020488 	.word	0x40020488
 8002668:	400204a0 	.word	0x400204a0
 800266c:	400204b8 	.word	0x400204b8
 8002670:	58025408 	.word	0x58025408
 8002674:	5802541c 	.word	0x5802541c
 8002678:	58025430 	.word	0x58025430
 800267c:	58025444 	.word	0x58025444
 8002680:	58025458 	.word	0x58025458
 8002684:	5802546c 	.word	0x5802546c
 8002688:	58025480 	.word	0x58025480
 800268c:	58025494 	.word	0x58025494

08002690 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e226      	b.n	8002afa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Start_IT+0x2a>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e21f      	b.n	8002afa <HAL_DMA_Start_IT+0x46a>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	f040 820a 	bne.w	8002ae4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a68      	ldr	r2, [pc, #416]	; (8002884 <HAL_DMA_Start_IT+0x1f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04a      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_DMA_Start_IT+0x1f8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d045      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a65      	ldr	r2, [pc, #404]	; (800288c <HAL_DMA_Start_IT+0x1fc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d040      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_DMA_Start_IT+0x200>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d03b      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a62      	ldr	r2, [pc, #392]	; (8002894 <HAL_DMA_Start_IT+0x204>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d036      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a60      	ldr	r2, [pc, #384]	; (8002898 <HAL_DMA_Start_IT+0x208>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5f      	ldr	r2, [pc, #380]	; (800289c <HAL_DMA_Start_IT+0x20c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d02c      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5d      	ldr	r2, [pc, #372]	; (80028a0 <HAL_DMA_Start_IT+0x210>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d027      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_DMA_Start_IT+0x214>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <HAL_DMA_Start_IT+0x218>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01d      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a59      	ldr	r2, [pc, #356]	; (80028ac <HAL_DMA_Start_IT+0x21c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a57      	ldr	r2, [pc, #348]	; (80028b0 <HAL_DMA_Start_IT+0x220>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a56      	ldr	r2, [pc, #344]	; (80028b4 <HAL_DMA_Start_IT+0x224>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a54      	ldr	r2, [pc, #336]	; (80028b8 <HAL_DMA_Start_IT+0x228>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a53      	ldr	r2, [pc, #332]	; (80028bc <HAL_DMA_Start_IT+0x22c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_DMA_Start_IT+0xee>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a51      	ldr	r2, [pc, #324]	; (80028c0 <HAL_DMA_Start_IT+0x230>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <HAL_DMA_Start_IT+0x100>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e007      	b.n	80027a0 <HAL_DMA_Start_IT+0x110>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f001 fb64 	bl	8003e74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_DMA_Start_IT+0x1f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d04a      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a33      	ldr	r2, [pc, #204]	; (8002888 <HAL_DMA_Start_IT+0x1f8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d045      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_DMA_Start_IT+0x1fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d040      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a30      	ldr	r2, [pc, #192]	; (8002890 <HAL_DMA_Start_IT+0x200>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d03b      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_DMA_Start_IT+0x204>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d036      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <HAL_DMA_Start_IT+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d031      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2b      	ldr	r2, [pc, #172]	; (800289c <HAL_DMA_Start_IT+0x20c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d02c      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_DMA_Start_IT+0x210>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d027      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_DMA_Start_IT+0x214>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d022      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_DMA_Start_IT+0x218>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01d      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_DMA_Start_IT+0x21c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d018      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <HAL_DMA_Start_IT+0x220>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_DMA_Start_IT+0x224>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_DMA_Start_IT+0x228>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_DMA_Start_IT+0x22c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_DMA_Start_IT+0x1bc>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_DMA_Start_IT+0x230>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_DMA_Start_IT+0x1c0>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_DMA_Start_IT+0x1c2>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d036      	beq.n	80028c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 021e 	bic.w	r2, r3, #30
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0216 	orr.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03e      	beq.n	80028f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0208 	orr.w	r2, r2, #8
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e035      	b.n	80028f0 <HAL_DMA_Start_IT+0x260>
 8002884:	40020010 	.word	0x40020010
 8002888:	40020028 	.word	0x40020028
 800288c:	40020040 	.word	0x40020040
 8002890:	40020058 	.word	0x40020058
 8002894:	40020070 	.word	0x40020070
 8002898:	40020088 	.word	0x40020088
 800289c:	400200a0 	.word	0x400200a0
 80028a0:	400200b8 	.word	0x400200b8
 80028a4:	40020410 	.word	0x40020410
 80028a8:	40020428 	.word	0x40020428
 80028ac:	40020440 	.word	0x40020440
 80028b0:	40020458 	.word	0x40020458
 80028b4:	40020470 	.word	0x40020470
 80028b8:	40020488 	.word	0x40020488
 80028bc:	400204a0 	.word	0x400204a0
 80028c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 020e 	bic.w	r2, r3, #14
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 020a 	orr.w	r2, r2, #10
 80028d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0204 	orr.w	r2, r2, #4
 80028ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a83      	ldr	r2, [pc, #524]	; (8002b04 <HAL_DMA_Start_IT+0x474>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d072      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a82      	ldr	r2, [pc, #520]	; (8002b08 <HAL_DMA_Start_IT+0x478>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d06d      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_DMA_Start_IT+0x47c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d068      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7f      	ldr	r2, [pc, #508]	; (8002b10 <HAL_DMA_Start_IT+0x480>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d063      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7d      	ldr	r2, [pc, #500]	; (8002b14 <HAL_DMA_Start_IT+0x484>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d05e      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7c      	ldr	r2, [pc, #496]	; (8002b18 <HAL_DMA_Start_IT+0x488>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d059      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_DMA_Start_IT+0x48c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d054      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_DMA_Start_IT+0x490>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d04f      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a77      	ldr	r2, [pc, #476]	; (8002b24 <HAL_DMA_Start_IT+0x494>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04a      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a76      	ldr	r2, [pc, #472]	; (8002b28 <HAL_DMA_Start_IT+0x498>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d045      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a74      	ldr	r2, [pc, #464]	; (8002b2c <HAL_DMA_Start_IT+0x49c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d040      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a73      	ldr	r2, [pc, #460]	; (8002b30 <HAL_DMA_Start_IT+0x4a0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03b      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <HAL_DMA_Start_IT+0x4a4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d036      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a70      	ldr	r2, [pc, #448]	; (8002b38 <HAL_DMA_Start_IT+0x4a8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6e      	ldr	r2, [pc, #440]	; (8002b3c <HAL_DMA_Start_IT+0x4ac>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02c      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6d      	ldr	r2, [pc, #436]	; (8002b40 <HAL_DMA_Start_IT+0x4b0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d027      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6b      	ldr	r2, [pc, #428]	; (8002b44 <HAL_DMA_Start_IT+0x4b4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_DMA_Start_IT+0x4b8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01d      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a68      	ldr	r2, [pc, #416]	; (8002b4c <HAL_DMA_Start_IT+0x4bc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <HAL_DMA_Start_IT+0x4c0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_DMA_Start_IT+0x4c4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a64      	ldr	r2, [pc, #400]	; (8002b58 <HAL_DMA_Start_IT+0x4c8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a62      	ldr	r2, [pc, #392]	; (8002b5c <HAL_DMA_Start_IT+0x4cc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_Start_IT+0x350>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a61      	ldr	r2, [pc, #388]	; (8002b60 <HAL_DMA_Start_IT+0x4d0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Start_IT+0x354>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_Start_IT+0x356>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01a      	beq.n	8002a20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a37      	ldr	r2, [pc, #220]	; (8002b04 <HAL_DMA_Start_IT+0x474>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d04a      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <HAL_DMA_Start_IT+0x478>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d045      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <HAL_DMA_Start_IT+0x47c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d040      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_DMA_Start_IT+0x480>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d03b      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a31      	ldr	r2, [pc, #196]	; (8002b14 <HAL_DMA_Start_IT+0x484>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d036      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <HAL_DMA_Start_IT+0x488>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d031      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <HAL_DMA_Start_IT+0x48c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02c      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <HAL_DMA_Start_IT+0x490>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d027      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2b      	ldr	r2, [pc, #172]	; (8002b24 <HAL_DMA_Start_IT+0x494>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d022      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_DMA_Start_IT+0x498>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01d      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <HAL_DMA_Start_IT+0x49c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d018      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_DMA_Start_IT+0x4a0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <HAL_DMA_Start_IT+0x4a4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_DMA_Start_IT+0x4a8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <HAL_DMA_Start_IT+0x4ac>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x430>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a21      	ldr	r2, [pc, #132]	; (8002b40 <HAL_DMA_Start_IT+0x4b0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <HAL_DMA_Start_IT+0x442>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e012      	b.n	8002af8 <HAL_DMA_Start_IT+0x468>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e009      	b.n	8002af8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020010 	.word	0x40020010
 8002b08:	40020028 	.word	0x40020028
 8002b0c:	40020040 	.word	0x40020040
 8002b10:	40020058 	.word	0x40020058
 8002b14:	40020070 	.word	0x40020070
 8002b18:	40020088 	.word	0x40020088
 8002b1c:	400200a0 	.word	0x400200a0
 8002b20:	400200b8 	.word	0x400200b8
 8002b24:	40020410 	.word	0x40020410
 8002b28:	40020428 	.word	0x40020428
 8002b2c:	40020440 	.word	0x40020440
 8002b30:	40020458 	.word	0x40020458
 8002b34:	40020470 	.word	0x40020470
 8002b38:	40020488 	.word	0x40020488
 8002b3c:	400204a0 	.word	0x400204a0
 8002b40:	400204b8 	.word	0x400204b8
 8002b44:	58025408 	.word	0x58025408
 8002b48:	5802541c 	.word	0x5802541c
 8002b4c:	58025430 	.word	0x58025430
 8002b50:	58025444 	.word	0x58025444
 8002b54:	58025458 	.word	0x58025458
 8002b58:	5802546c 	.word	0x5802546c
 8002b5c:	58025480 	.word	0x58025480
 8002b60:	58025494 	.word	0x58025494

08002b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e205      	b.n	8002f82 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d004      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e1fa      	b.n	8002f82 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a8c      	ldr	r2, [pc, #560]	; (8002dc4 <HAL_DMA_Abort_IT+0x260>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04a      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a8b      	ldr	r2, [pc, #556]	; (8002dc8 <HAL_DMA_Abort_IT+0x264>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d045      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a89      	ldr	r2, [pc, #548]	; (8002dcc <HAL_DMA_Abort_IT+0x268>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a88      	ldr	r2, [pc, #544]	; (8002dd0 <HAL_DMA_Abort_IT+0x26c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d03b      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a86      	ldr	r2, [pc, #536]	; (8002dd4 <HAL_DMA_Abort_IT+0x270>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a85      	ldr	r2, [pc, #532]	; (8002dd8 <HAL_DMA_Abort_IT+0x274>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d031      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_DMA_Abort_IT+0x278>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02c      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a82      	ldr	r2, [pc, #520]	; (8002de0 <HAL_DMA_Abort_IT+0x27c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d027      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_DMA_Abort_IT+0x280>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7f      	ldr	r2, [pc, #508]	; (8002de8 <HAL_DMA_Abort_IT+0x284>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01d      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7d      	ldr	r2, [pc, #500]	; (8002dec <HAL_DMA_Abort_IT+0x288>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	; (8002df0 <HAL_DMA_Abort_IT+0x28c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_DMA_Abort_IT+0x290>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a79      	ldr	r2, [pc, #484]	; (8002df8 <HAL_DMA_Abort_IT+0x294>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <HAL_DMA_Abort_IT+0x298>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_Abort_IT+0xc8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a76      	ldr	r2, [pc, #472]	; (8002e00 <HAL_DMA_Abort_IT+0x29c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Abort_IT+0xcc>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_DMA_Abort_IT+0xce>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d065      	beq.n	8002d02 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_DMA_Abort_IT+0x260>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5e      	ldr	r2, [pc, #376]	; (8002dc8 <HAL_DMA_Abort_IT+0x264>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5d      	ldr	r2, [pc, #372]	; (8002dcc <HAL_DMA_Abort_IT+0x268>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_DMA_Abort_IT+0x26c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <HAL_DMA_Abort_IT+0x270>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a58      	ldr	r2, [pc, #352]	; (8002dd8 <HAL_DMA_Abort_IT+0x274>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_DMA_Abort_IT+0x278>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_DMA_Abort_IT+0x27c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_DMA_Abort_IT+0x280>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_DMA_Abort_IT+0x284>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_DMA_Abort_IT+0x288>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_DMA_Abort_IT+0x28c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_DMA_Abort_IT+0x290>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_DMA_Abort_IT+0x294>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_DMA_Abort_IT+0x298>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_Abort_IT+0x17a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_DMA_Abort_IT+0x29c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <HAL_DMA_Abort_IT+0x18c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e147      	b.n	8002f80 <HAL_DMA_Abort_IT+0x41c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e13e      	b.n	8002f80 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020e 	bic.w	r2, r2, #14
 8002d10:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_DMA_Abort_IT+0x260>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d04a      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <HAL_DMA_Abort_IT+0x264>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d045      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <HAL_DMA_Abort_IT+0x268>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d040      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <HAL_DMA_Abort_IT+0x26c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d03b      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_DMA_Abort_IT+0x270>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d036      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_DMA_Abort_IT+0x274>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d031      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_DMA_Abort_IT+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d02c      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <HAL_DMA_Abort_IT+0x27c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d027      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_DMA_Abort_IT+0x280>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d022      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_DMA_Abort_IT+0x284>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01d      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_DMA_Abort_IT+0x288>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d018      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_DMA_Abort_IT+0x28c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_DMA_Abort_IT+0x290>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00e      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_DMA_Abort_IT+0x294>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_DMA_Abort_IT+0x298>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x24e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_DMA_Abort_IT+0x29c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d128      	bne.n	8002e04 <HAL_DMA_Abort_IT+0x2a0>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e027      	b.n	8002e14 <HAL_DMA_Abort_IT+0x2b0>
 8002dc4:	40020010 	.word	0x40020010
 8002dc8:	40020028 	.word	0x40020028
 8002dcc:	40020040 	.word	0x40020040
 8002dd0:	40020058 	.word	0x40020058
 8002dd4:	40020070 	.word	0x40020070
 8002dd8:	40020088 	.word	0x40020088
 8002ddc:	400200a0 	.word	0x400200a0
 8002de0:	400200b8 	.word	0x400200b8
 8002de4:	40020410 	.word	0x40020410
 8002de8:	40020428 	.word	0x40020428
 8002dec:	40020440 	.word	0x40020440
 8002df0:	40020458 	.word	0x40020458
 8002df4:	40020470 	.word	0x40020470
 8002df8:	40020488 	.word	0x40020488
 8002dfc:	400204a0 	.word	0x400204a0
 8002e00:	400204b8 	.word	0x400204b8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5c      	ldr	r2, [pc, #368]	; (8002f8c <HAL_DMA_Abort_IT+0x428>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d072      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5b      	ldr	r2, [pc, #364]	; (8002f90 <HAL_DMA_Abort_IT+0x42c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d06d      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a59      	ldr	r2, [pc, #356]	; (8002f94 <HAL_DMA_Abort_IT+0x430>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d068      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_DMA_Abort_IT+0x434>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d063      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a56      	ldr	r2, [pc, #344]	; (8002f9c <HAL_DMA_Abort_IT+0x438>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d05e      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <HAL_DMA_Abort_IT+0x43c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d059      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a53      	ldr	r2, [pc, #332]	; (8002fa4 <HAL_DMA_Abort_IT+0x440>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d054      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a52      	ldr	r2, [pc, #328]	; (8002fa8 <HAL_DMA_Abort_IT+0x444>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04f      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_DMA_Abort_IT+0x448>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04a      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4f      	ldr	r2, [pc, #316]	; (8002fb0 <HAL_DMA_Abort_IT+0x44c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d045      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4d      	ldr	r2, [pc, #308]	; (8002fb4 <HAL_DMA_Abort_IT+0x450>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d040      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4c      	ldr	r2, [pc, #304]	; (8002fb8 <HAL_DMA_Abort_IT+0x454>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d03b      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_DMA_Abort_IT+0x458>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d036      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <HAL_DMA_Abort_IT+0x45c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_DMA_Abort_IT+0x460>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02c      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a46      	ldr	r2, [pc, #280]	; (8002fc8 <HAL_DMA_Abort_IT+0x464>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d027      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a44      	ldr	r2, [pc, #272]	; (8002fcc <HAL_DMA_Abort_IT+0x468>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <HAL_DMA_Abort_IT+0x46c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01d      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_DMA_Abort_IT+0x470>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a40      	ldr	r2, [pc, #256]	; (8002fd8 <HAL_DMA_Abort_IT+0x474>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <HAL_DMA_Abort_IT+0x478>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3d      	ldr	r2, [pc, #244]	; (8002fe0 <HAL_DMA_Abort_IT+0x47c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_DMA_Abort_IT+0x480>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x3a0>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3a      	ldr	r2, [pc, #232]	; (8002fe8 <HAL_DMA_Abort_IT+0x484>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_DMA_Abort_IT+0x3a4>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_Abort_IT+0x3a6>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d028      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40020010 	.word	0x40020010
 8002f90:	40020028 	.word	0x40020028
 8002f94:	40020040 	.word	0x40020040
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	40020070 	.word	0x40020070
 8002fa0:	40020088 	.word	0x40020088
 8002fa4:	400200a0 	.word	0x400200a0
 8002fa8:	400200b8 	.word	0x400200b8
 8002fac:	40020410 	.word	0x40020410
 8002fb0:	40020428 	.word	0x40020428
 8002fb4:	40020440 	.word	0x40020440
 8002fb8:	40020458 	.word	0x40020458
 8002fbc:	40020470 	.word	0x40020470
 8002fc0:	40020488 	.word	0x40020488
 8002fc4:	400204a0 	.word	0x400204a0
 8002fc8:	400204b8 	.word	0x400204b8
 8002fcc:	58025408 	.word	0x58025408
 8002fd0:	5802541c 	.word	0x5802541c
 8002fd4:	58025430 	.word	0x58025430
 8002fd8:	58025444 	.word	0x58025444
 8002fdc:	58025458 	.word	0x58025458
 8002fe0:	5802546c 	.word	0x5802546c
 8002fe4:	58025480 	.word	0x58025480
 8002fe8:	58025494 	.word	0x58025494

08002fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff8:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_DMA_IRQHandler+0x1ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a67      	ldr	r2, [pc, #412]	; (800319c <HAL_DMA_IRQHandler+0x1b0>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_DMA_IRQHandler+0x1b4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_DMA_IRQHandler+0x1b8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_DMA_IRQHandler+0x1bc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_DMA_IRQHandler+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a59      	ldr	r2, [pc, #356]	; (80031b0 <HAL_DMA_IRQHandler+0x1c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_DMA_IRQHandler+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_DMA_IRQHandler+0x1d8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <HAL_DMA_IRQHandler+0x1dc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a4e      	ldr	r2, [pc, #312]	; (80031cc <HAL_DMA_IRQHandler+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4d      	ldr	r2, [pc, #308]	; (80031d0 <HAL_DMA_IRQHandler+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4b      	ldr	r2, [pc, #300]	; (80031d4 <HAL_DMA_IRQHandler+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_DMA_IRQHandler+0x1ec>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_DMA_IRQHandler+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_DMA_IRQHandler+0xd6>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 842b 	beq.w	8003920 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2208      	movs	r2, #8
 80030d4:	409a      	lsls	r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a2 	beq.w	8003224 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_DMA_IRQHandler+0x1b4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d04a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <HAL_DMA_IRQHandler+0x1b8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d045      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <HAL_DMA_IRQHandler+0x1bc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d040      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_DMA_IRQHandler+0x1c0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d03b      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <HAL_DMA_IRQHandler+0x1c4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d036      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d031      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_DMA_IRQHandler+0x1d0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d027      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_DMA_IRQHandler+0x1d8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01d      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_DMA_IRQHandler+0x1dc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_DMA_IRQHandler+0x1e0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <HAL_DMA_IRQHandler+0x1e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_DMA_IRQHandler+0x1e8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_DMA_IRQHandler+0x1ec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_DMA_IRQHandler+0x1f0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d12f      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x1f4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e02e      	b.n	80031f4 <HAL_DMA_IRQHandler+0x208>
 8003196:	bf00      	nop
 8003198:	24000420 	.word	0x24000420
 800319c:	1b4e81b5 	.word	0x1b4e81b5
 80031a0:	40020010 	.word	0x40020010
 80031a4:	40020028 	.word	0x40020028
 80031a8:	40020040 	.word	0x40020040
 80031ac:	40020058 	.word	0x40020058
 80031b0:	40020070 	.word	0x40020070
 80031b4:	40020088 	.word	0x40020088
 80031b8:	400200a0 	.word	0x400200a0
 80031bc:	400200b8 	.word	0x400200b8
 80031c0:	40020410 	.word	0x40020410
 80031c4:	40020428 	.word	0x40020428
 80031c8:	40020440 	.word	0x40020440
 80031cc:	40020458 	.word	0x40020458
 80031d0:	40020470 	.word	0x40020470
 80031d4:	40020488 	.word	0x40020488
 80031d8:	400204a0 	.word	0x400204a0
 80031dc:	400204b8 	.word	0x400204b8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf14      	ite	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	2300      	moveq	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2208      	movs	r2, #8
 8003212:	409a      	lsls	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06e      	beq.n	8003318 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_DMA_IRQHandler+0x3fc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a66      	ldr	r2, [pc, #408]	; (80033ec <HAL_DMA_IRQHandler+0x400>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <HAL_DMA_IRQHandler+0x404>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_DMA_IRQHandler+0x408>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <HAL_DMA_IRQHandler+0x40c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_DMA_IRQHandler+0x410>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5e      	ldr	r2, [pc, #376]	; (8003400 <HAL_DMA_IRQHandler+0x414>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_DMA_IRQHandler+0x418>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5b      	ldr	r2, [pc, #364]	; (8003408 <HAL_DMA_IRQHandler+0x41c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_DMA_IRQHandler+0x420>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_DMA_IRQHandler+0x424>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_DMA_IRQHandler+0x428>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_DMA_IRQHandler+0x42c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_DMA_IRQHandler+0x430>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_DMA_IRQHandler+0x434>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10a      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x304>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e003      	b.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0202 	orr.w	r2, r3, #2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 808f 	beq.w	800344c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_DMA_IRQHandler+0x3fc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_DMA_IRQHandler+0x400>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <HAL_DMA_IRQHandler+0x404>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_DMA_IRQHandler+0x408>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_DMA_IRQHandler+0x40c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_DMA_IRQHandler+0x410>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_DMA_IRQHandler+0x414>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a20      	ldr	r2, [pc, #128]	; (8003404 <HAL_DMA_IRQHandler+0x418>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_DMA_IRQHandler+0x41c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_DMA_IRQHandler+0x420>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_DMA_IRQHandler+0x424>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_DMA_IRQHandler+0x428>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_DMA_IRQHandler+0x42c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <HAL_DMA_IRQHandler+0x430>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_DMA_IRQHandler+0x434>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12a      	bne.n	8003424 <HAL_DMA_IRQHandler+0x438>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e023      	b.n	800342c <HAL_DMA_IRQHandler+0x440>
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2204      	movs	r2, #4
 800343a:	409a      	lsls	r2, r3
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a6 	beq.w	80035ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a85      	ldr	r2, [pc, #532]	; (800367c <HAL_DMA_IRQHandler+0x690>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a83      	ldr	r2, [pc, #524]	; (8003680 <HAL_DMA_IRQHandler+0x694>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a82      	ldr	r2, [pc, #520]	; (8003684 <HAL_DMA_IRQHandler+0x698>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a80      	ldr	r2, [pc, #512]	; (8003688 <HAL_DMA_IRQHandler+0x69c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7f      	ldr	r2, [pc, #508]	; (800368c <HAL_DMA_IRQHandler+0x6a0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7d      	ldr	r2, [pc, #500]	; (8003690 <HAL_DMA_IRQHandler+0x6a4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <HAL_DMA_IRQHandler+0x6a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7a      	ldr	r2, [pc, #488]	; (8003698 <HAL_DMA_IRQHandler+0x6ac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a79      	ldr	r2, [pc, #484]	; (800369c <HAL_DMA_IRQHandler+0x6b0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a77      	ldr	r2, [pc, #476]	; (80036a0 <HAL_DMA_IRQHandler+0x6b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a76      	ldr	r2, [pc, #472]	; (80036a4 <HAL_DMA_IRQHandler+0x6b8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a74      	ldr	r2, [pc, #464]	; (80036a8 <HAL_DMA_IRQHandler+0x6bc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a73      	ldr	r2, [pc, #460]	; (80036ac <HAL_DMA_IRQHandler+0x6c0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a71      	ldr	r2, [pc, #452]	; (80036b0 <HAL_DMA_IRQHandler+0x6c4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a70      	ldr	r2, [pc, #448]	; (80036b4 <HAL_DMA_IRQHandler+0x6c8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_DMA_IRQHandler+0x6cc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10a      	bne.n	8003518 <HAL_DMA_IRQHandler+0x52c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e009      	b.n	800352c <HAL_DMA_IRQHandler+0x540>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d03e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2210      	movs	r2, #16
 800353a:	409a      	lsls	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d018      	beq.n	8003580 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d024      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e01f      	b.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e016      	b.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2220      	movs	r2, #32
 80035b8:	409a      	lsls	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8110 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2c      	ldr	r2, [pc, #176]	; (800367c <HAL_DMA_IRQHandler+0x690>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_DMA_IRQHandler+0x694>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_DMA_IRQHandler+0x698>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_DMA_IRQHandler+0x69c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a26      	ldr	r2, [pc, #152]	; (800368c <HAL_DMA_IRQHandler+0x6a0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_DMA_IRQHandler+0x6a4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <HAL_DMA_IRQHandler+0x6a8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_DMA_IRQHandler+0x6ac>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_DMA_IRQHandler+0x6b0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_DMA_IRQHandler+0x6b8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_DMA_IRQHandler+0x6c0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_DMA_IRQHandler+0x6c4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d12b      	bne.n	80036bc <HAL_DMA_IRQHandler+0x6d0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e02a      	b.n	80036d0 <HAL_DMA_IRQHandler+0x6e4>
 800367a:	bf00      	nop
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8087 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2220      	movs	r2, #32
 80036e0:	409a      	lsls	r2, r3
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d139      	bne.n	8003766 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0216 	bic.w	r2, r2, #22
 8003700:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003710:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_DMA_IRQHandler+0x736>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0208 	bic.w	r2, r2, #8
 8003730:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	223f      	movs	r2, #63	; 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 834a 	beq.w	8003df0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
          }
          return;
 8003764:	e344      	b.n	8003df0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e027      	b.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e01e      	b.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0210 	bic.w	r2, r2, #16
 80037c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8306 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8088 	beq.w	800390c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <HAL_DMA_IRQHandler+0xa08>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a77      	ldr	r2, [pc, #476]	; (80039fc <HAL_DMA_IRQHandler+0xa10>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_DMA_IRQHandler+0xa14>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a74      	ldr	r2, [pc, #464]	; (8003a04 <HAL_DMA_IRQHandler+0xa18>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a73      	ldr	r2, [pc, #460]	; (8003a08 <HAL_DMA_IRQHandler+0xa1c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <HAL_DMA_IRQHandler+0xa20>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a70      	ldr	r2, [pc, #448]	; (8003a10 <HAL_DMA_IRQHandler+0xa24>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_DMA_IRQHandler+0xa28>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6d      	ldr	r2, [pc, #436]	; (8003a18 <HAL_DMA_IRQHandler+0xa2c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6b      	ldr	r2, [pc, #428]	; (8003a1c <HAL_DMA_IRQHandler+0xa30>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6a      	ldr	r2, [pc, #424]	; (8003a20 <HAL_DMA_IRQHandler+0xa34>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <HAL_DMA_IRQHandler+0xa38>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a67      	ldr	r2, [pc, #412]	; (8003a28 <HAL_DMA_IRQHandler+0xa3c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_DMA_IRQHandler+0xa40>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <HAL_DMA_IRQHandler+0xa44>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x8ca>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <HAL_DMA_IRQHandler+0x8da>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d307      	bcc.n	80038e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f2      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x8da>
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038fa:	e003      	b.n	8003904 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8272 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e26c      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a43      	ldr	r2, [pc, #268]	; (8003a34 <HAL_DMA_IRQHandler+0xa48>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_DMA_IRQHandler+0xa4c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a40      	ldr	r2, [pc, #256]	; (8003a3c <HAL_DMA_IRQHandler+0xa50>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3f      	ldr	r2, [pc, #252]	; (8003a40 <HAL_DMA_IRQHandler+0xa54>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <HAL_DMA_IRQHandler+0xa58>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_DMA_IRQHandler+0xa5c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <HAL_DMA_IRQHandler+0xa60>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <HAL_DMA_IRQHandler+0xa64>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_DMA_IRQHandler+0x988>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x98a>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 823f 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2204      	movs	r2, #4
 800398e:	409a      	lsls	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80cd 	beq.w	8003b34 <HAL_DMA_IRQHandler+0xb48>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80c7 	beq.w	8003b34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2204      	movs	r2, #4
 80039b0:	409a      	lsls	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d049      	beq.n	8003a54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8210 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039dc:	e20a      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8206 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e200      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	58025408 	.word	0x58025408
 8003a38:	5802541c 	.word	0x5802541c
 8003a3c:	58025430 	.word	0x58025430
 8003a40:	58025444 	.word	0x58025444
 8003a44:	58025458 	.word	0x58025458
 8003a48:	5802546c 	.word	0x5802546c
 8003a4c:	58025480 	.word	0x58025480
 8003a50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d160      	bne.n	8003b20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a8c      	ldr	r2, [pc, #560]	; (8003c94 <HAL_DMA_IRQHandler+0xca8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a8a      	ldr	r2, [pc, #552]	; (8003c98 <HAL_DMA_IRQHandler+0xcac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a89      	ldr	r2, [pc, #548]	; (8003c9c <HAL_DMA_IRQHandler+0xcb0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a87      	ldr	r2, [pc, #540]	; (8003ca0 <HAL_DMA_IRQHandler+0xcb4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a86      	ldr	r2, [pc, #536]	; (8003ca4 <HAL_DMA_IRQHandler+0xcb8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a84      	ldr	r2, [pc, #528]	; (8003ca8 <HAL_DMA_IRQHandler+0xcbc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a83      	ldr	r2, [pc, #524]	; (8003cac <HAL_DMA_IRQHandler+0xcc0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a81      	ldr	r2, [pc, #516]	; (8003cb0 <HAL_DMA_IRQHandler+0xcc4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <HAL_DMA_IRQHandler+0xcc8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7e      	ldr	r2, [pc, #504]	; (8003cb8 <HAL_DMA_IRQHandler+0xccc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7d      	ldr	r2, [pc, #500]	; (8003cbc <HAL_DMA_IRQHandler+0xcd0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7b      	ldr	r2, [pc, #492]	; (8003cc0 <HAL_DMA_IRQHandler+0xcd4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7a      	ldr	r2, [pc, #488]	; (8003cc4 <HAL_DMA_IRQHandler+0xcd8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	; (8003cc8 <HAL_DMA_IRQHandler+0xcdc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a77      	ldr	r2, [pc, #476]	; (8003ccc <HAL_DMA_IRQHandler+0xce0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_DMA_IRQHandler+0xce4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_DMA_IRQHandler+0xb24>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e007      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb34>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8165 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b32:	e15f      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80c5 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xce8>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80bf 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2202      	movs	r2, #2
 8003b60:	409a      	lsls	r2, r3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 813a 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8c:	e134      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8130 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba0:	e12a      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d168      	bne.n	8003c7e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_DMA_IRQHandler+0xca8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d04a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_DMA_IRQHandler+0xcac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d045      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <HAL_DMA_IRQHandler+0xcb0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d040      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <HAL_DMA_IRQHandler+0xcb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d03b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <HAL_DMA_IRQHandler+0xcb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d036      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_DMA_IRQHandler+0xcbc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d031      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <HAL_DMA_IRQHandler+0xcc0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <HAL_DMA_IRQHandler+0xcc4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d027      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_DMA_IRQHandler+0xcc8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_DMA_IRQHandler+0xccc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01d      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_DMA_IRQHandler+0xcd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_DMA_IRQHandler+0xcd4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_DMA_IRQHandler+0xcd8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_DMA_IRQHandler+0xcdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_DMA_IRQHandler+0xce0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_DMA_IRQHandler+0xce4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <HAL_DMA_IRQHandler+0xc72>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0214 	bic.w	r2, r2, #20
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e007      	b.n	8003c6e <HAL_DMA_IRQHandler+0xc82>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020a 	bic.w	r2, r2, #10
 8003c6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b8 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c90:	e0b2      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
 8003c92:	bf00      	nop
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2208      	movs	r2, #8
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8088 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8082 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a41      	ldr	r2, [pc, #260]	; (8003e00 <HAL_DMA_IRQHandler+0xe14>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <HAL_DMA_IRQHandler+0xe18>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <HAL_DMA_IRQHandler+0xe1c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <HAL_DMA_IRQHandler+0xe20>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_DMA_IRQHandler+0xe24>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <HAL_DMA_IRQHandler+0xe28>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_DMA_IRQHandler+0xe2c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <HAL_DMA_IRQHandler+0xe30>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <HAL_DMA_IRQHandler+0xe34>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <HAL_DMA_IRQHandler+0xe38>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	; (8003e28 <HAL_DMA_IRQHandler+0xe3c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_DMA_IRQHandler+0xe40>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <HAL_DMA_IRQHandler+0xe44>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_DMA_IRQHandler+0xe48>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_DMA_IRQHandler+0xe4c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <HAL_DMA_IRQHandler+0xe50>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0xdbc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 021c 	bic.w	r2, r2, #28
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_DMA_IRQHandler+0xdcc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020e 	bic.w	r2, r2, #14
 8003db6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e004      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8

08003e40 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4e:	b2db      	uxtb	r3, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a84      	ldr	r2, [pc, #528]	; (80040a4 <DMA_SetConfig+0x230>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d072      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a82      	ldr	r2, [pc, #520]	; (80040a8 <DMA_SetConfig+0x234>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d06d      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a81      	ldr	r2, [pc, #516]	; (80040ac <DMA_SetConfig+0x238>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d068      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a7f      	ldr	r2, [pc, #508]	; (80040b0 <DMA_SetConfig+0x23c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d063      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a7e      	ldr	r2, [pc, #504]	; (80040b4 <DMA_SetConfig+0x240>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d05e      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a7c      	ldr	r2, [pc, #496]	; (80040b8 <DMA_SetConfig+0x244>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d059      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7b      	ldr	r2, [pc, #492]	; (80040bc <DMA_SetConfig+0x248>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d054      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a79      	ldr	r2, [pc, #484]	; (80040c0 <DMA_SetConfig+0x24c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04f      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a78      	ldr	r2, [pc, #480]	; (80040c4 <DMA_SetConfig+0x250>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04a      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a76      	ldr	r2, [pc, #472]	; (80040c8 <DMA_SetConfig+0x254>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d045      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	; (80040cc <DMA_SetConfig+0x258>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d040      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a73      	ldr	r2, [pc, #460]	; (80040d0 <DMA_SetConfig+0x25c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03b      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a72      	ldr	r2, [pc, #456]	; (80040d4 <DMA_SetConfig+0x260>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d036      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a70      	ldr	r2, [pc, #448]	; (80040d8 <DMA_SetConfig+0x264>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6f      	ldr	r2, [pc, #444]	; (80040dc <DMA_SetConfig+0x268>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d02c      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <DMA_SetConfig+0x26c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d027      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6c      	ldr	r2, [pc, #432]	; (80040e4 <DMA_SetConfig+0x270>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6a      	ldr	r2, [pc, #424]	; (80040e8 <DMA_SetConfig+0x274>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a69      	ldr	r2, [pc, #420]	; (80040ec <DMA_SetConfig+0x278>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a67      	ldr	r2, [pc, #412]	; (80040f0 <DMA_SetConfig+0x27c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	; (80040f4 <DMA_SetConfig+0x280>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a64      	ldr	r2, [pc, #400]	; (80040f8 <DMA_SetConfig+0x284>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a63      	ldr	r2, [pc, #396]	; (80040fc <DMA_SetConfig+0x288>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <DMA_SetConfig+0x10a>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a61      	ldr	r2, [pc, #388]	; (8004100 <DMA_SetConfig+0x28c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <DMA_SetConfig+0x10e>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <DMA_SetConfig+0x110>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fa2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a3e      	ldr	r2, [pc, #248]	; (80040a4 <DMA_SetConfig+0x230>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <DMA_SetConfig+0x234>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3b      	ldr	r2, [pc, #236]	; (80040ac <DMA_SetConfig+0x238>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3a      	ldr	r2, [pc, #232]	; (80040b0 <DMA_SetConfig+0x23c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <DMA_SetConfig+0x240>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a37      	ldr	r2, [pc, #220]	; (80040b8 <DMA_SetConfig+0x244>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a35      	ldr	r2, [pc, #212]	; (80040bc <DMA_SetConfig+0x248>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <DMA_SetConfig+0x24c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <DMA_SetConfig+0x250>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a31      	ldr	r2, [pc, #196]	; (80040c8 <DMA_SetConfig+0x254>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <DMA_SetConfig+0x258>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <DMA_SetConfig+0x25c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <DMA_SetConfig+0x260>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <DMA_SetConfig+0x264>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <DMA_SetConfig+0x268>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <DMA_SetConfig+0x1d0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a28      	ldr	r2, [pc, #160]	; (80040e0 <DMA_SetConfig+0x26c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <DMA_SetConfig+0x1d4>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <DMA_SetConfig+0x1d6>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d05a      	beq.n	8004104 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	409a      	lsls	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800406c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d108      	bne.n	8004090 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800408e:	e087      	b.n	80041a0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
}
 80040a0:	e07e      	b.n	80041a0 <DMA_SetConfig+0x32c>
 80040a2:	bf00      	nop
 80040a4:	40020010 	.word	0x40020010
 80040a8:	40020028 	.word	0x40020028
 80040ac:	40020040 	.word	0x40020040
 80040b0:	40020058 	.word	0x40020058
 80040b4:	40020070 	.word	0x40020070
 80040b8:	40020088 	.word	0x40020088
 80040bc:	400200a0 	.word	0x400200a0
 80040c0:	400200b8 	.word	0x400200b8
 80040c4:	40020410 	.word	0x40020410
 80040c8:	40020428 	.word	0x40020428
 80040cc:	40020440 	.word	0x40020440
 80040d0:	40020458 	.word	0x40020458
 80040d4:	40020470 	.word	0x40020470
 80040d8:	40020488 	.word	0x40020488
 80040dc:	400204a0 	.word	0x400204a0
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	58025408 	.word	0x58025408
 80040e8:	5802541c 	.word	0x5802541c
 80040ec:	58025430 	.word	0x58025430
 80040f0:	58025444 	.word	0x58025444
 80040f4:	58025458 	.word	0x58025458
 80040f8:	5802546c 	.word	0x5802546c
 80040fc:	58025480 	.word	0x58025480
 8004100:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a28      	ldr	r2, [pc, #160]	; (80041ac <DMA_SetConfig+0x338>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a27      	ldr	r2, [pc, #156]	; (80041b0 <DMA_SetConfig+0x33c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d01d      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <DMA_SetConfig+0x340>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <DMA_SetConfig+0x344>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <DMA_SetConfig+0x348>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <DMA_SetConfig+0x34c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <DMA_SetConfig+0x350>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <DMA_SetConfig+0x2e0>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <DMA_SetConfig+0x354>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <DMA_SetConfig+0x2e4>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <DMA_SetConfig+0x2e6>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	2201      	movs	r2, #1
 8004168:	409a      	lsls	r2, r3
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d108      	bne.n	8004190 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	60da      	str	r2, [r3, #12]
}
 800418e:	e007      	b.n	80041a0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	60da      	str	r2, [r3, #12]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	58025408 	.word	0x58025408
 80041b0:	5802541c 	.word	0x5802541c
 80041b4:	58025430 	.word	0x58025430
 80041b8:	58025444 	.word	0x58025444
 80041bc:	58025458 	.word	0x58025458
 80041c0:	5802546c 	.word	0x5802546c
 80041c4:	58025480 	.word	0x58025480
 80041c8:	58025494 	.word	0x58025494

080041cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <DMA_CalcBaseAndBitshift+0x118>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d04a      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a41      	ldr	r2, [pc, #260]	; (80042e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d045      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3f      	ldr	r2, [pc, #252]	; (80042ec <DMA_CalcBaseAndBitshift+0x120>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d040      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3e      	ldr	r2, [pc, #248]	; (80042f0 <DMA_CalcBaseAndBitshift+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d03b      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <DMA_CalcBaseAndBitshift+0x128>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d036      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d031      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a39      	ldr	r2, [pc, #228]	; (80042fc <DMA_CalcBaseAndBitshift+0x130>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02c      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a38      	ldr	r2, [pc, #224]	; (8004300 <DMA_CalcBaseAndBitshift+0x134>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d027      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a36      	ldr	r2, [pc, #216]	; (8004304 <DMA_CalcBaseAndBitshift+0x138>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d022      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a35      	ldr	r2, [pc, #212]	; (8004308 <DMA_CalcBaseAndBitshift+0x13c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01d      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a33      	ldr	r2, [pc, #204]	; (800430c <DMA_CalcBaseAndBitshift+0x140>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d018      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a32      	ldr	r2, [pc, #200]	; (8004310 <DMA_CalcBaseAndBitshift+0x144>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a30      	ldr	r2, [pc, #192]	; (8004314 <DMA_CalcBaseAndBitshift+0x148>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00e      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <DMA_CalcBaseAndBitshift+0x14c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d009      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2d      	ldr	r2, [pc, #180]	; (800431c <DMA_CalcBaseAndBitshift+0x150>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <DMA_CalcBaseAndBitshift+0xa8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <DMA_CalcBaseAndBitshift+0x154>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <DMA_CalcBaseAndBitshift+0xac>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <DMA_CalcBaseAndBitshift+0xae>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d024      	beq.n	80042c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3b10      	subs	r3, #16
 8004286:	4a27      	ldr	r2, [pc, #156]	; (8004324 <DMA_CalcBaseAndBitshift+0x158>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	4a24      	ldr	r2, [pc, #144]	; (8004328 <DMA_CalcBaseAndBitshift+0x15c>)
 8004298:	5cd3      	ldrb	r3, [r2, r3]
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d908      	bls.n	80042b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b1f      	ldr	r3, [pc, #124]	; (800432c <DMA_CalcBaseAndBitshift+0x160>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	659a      	str	r2, [r3, #88]	; 0x58
 80042b6:	e00d      	b.n	80042d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4b1b      	ldr	r3, [pc, #108]	; (800432c <DMA_CalcBaseAndBitshift+0x160>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6593      	str	r3, [r2, #88]	; 0x58
 80042c6:	e005      	b.n	80042d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40020010 	.word	0x40020010
 80042e8:	40020028 	.word	0x40020028
 80042ec:	40020040 	.word	0x40020040
 80042f0:	40020058 	.word	0x40020058
 80042f4:	40020070 	.word	0x40020070
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	400200b8 	.word	0x400200b8
 8004304:	40020410 	.word	0x40020410
 8004308:	40020428 	.word	0x40020428
 800430c:	40020440 	.word	0x40020440
 8004310:	40020458 	.word	0x40020458
 8004314:	40020470 	.word	0x40020470
 8004318:	40020488 	.word	0x40020488
 800431c:	400204a0 	.word	0x400204a0
 8004320:	400204b8 	.word	0x400204b8
 8004324:	aaaaaaab 	.word	0xaaaaaaab
 8004328:	0800d328 	.word	0x0800d328
 800432c:	fffffc00 	.word	0xfffffc00

08004330 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d120      	bne.n	8004386 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	2b03      	cmp	r3, #3
 800434a:	d858      	bhi.n	80043fe <DMA_CheckFifoParam+0xce>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <DMA_CheckFifoParam+0x24>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004365 	.word	0x08004365
 8004358:	08004377 	.word	0x08004377
 800435c:	08004365 	.word	0x08004365
 8004360:	080043ff 	.word	0x080043ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d048      	beq.n	8004402 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004374:	e045      	b.n	8004402 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800437e:	d142      	bne.n	8004406 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004384:	e03f      	b.n	8004406 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d123      	bne.n	80043d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b03      	cmp	r3, #3
 8004396:	d838      	bhi.n	800440a <DMA_CheckFifoParam+0xda>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <DMA_CheckFifoParam+0x70>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043b7 	.word	0x080043b7
 80043a8:	080043b1 	.word	0x080043b1
 80043ac:	080043c9 	.word	0x080043c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
        break;
 80043b4:	e030      	b.n	8004418 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d025      	beq.n	800440e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043c6:	e022      	b.n	800440e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043d0:	d11f      	bne.n	8004412 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d6:	e01c      	b.n	8004412 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d902      	bls.n	80043e6 <DMA_CheckFifoParam+0xb6>
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d003      	beq.n	80043ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043e4:	e018      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ea:	e015      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00e      	beq.n	8004416 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
    break;
 80043fc:	e00b      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
        break;
 80043fe:	bf00      	nop
 8004400:	e00a      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        break;
 8004402:	bf00      	nop
 8004404:	e008      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        break;
 8004406:	bf00      	nop
 8004408:	e006      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        break;
 800440a:	bf00      	nop
 800440c:	e004      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
        break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
    break;
 8004416:	bf00      	nop
    }
  }

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a36      	ldr	r2, [pc, #216]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a35      	ldr	r2, [pc, #212]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01a      	beq.n	80044c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3b08      	subs	r3, #8
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4b26      	ldr	r3, [pc, #152]	; (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a24      	ldr	r2, [pc, #144]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044c4:	e024      	b.n	8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3b10      	subs	r3, #16
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d806      	bhi.n	80044ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d902      	bls.n	80044ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3308      	adds	r3, #8
 80044ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004500:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	58025408 	.word	0x58025408
 8004520:	5802541c 	.word	0x5802541c
 8004524:	58025430 	.word	0x58025430
 8004528:	58025444 	.word	0x58025444
 800452c:	58025458 	.word	0x58025458
 8004530:	5802546c 	.word	0x5802546c
 8004534:	58025480 	.word	0x58025480
 8004538:	58025494 	.word	0x58025494
 800453c:	cccccccd 	.word	0xcccccccd
 8004540:	16009600 	.word	0x16009600
 8004544:	58025880 	.word	0x58025880
 8004548:	aaaaaaab 	.word	0xaaaaaaab
 800454c:	400204b8 	.word	0x400204b8
 8004550:	4002040f 	.word	0x4002040f
 8004554:	10008200 	.word	0x10008200
 8004558:	40020880 	.word	0x40020880

0800455c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d04a      	beq.n	8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d847      	bhi.n	8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a25      	ldr	r2, [pc, #148]	; (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d022      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a24      	ldr	r2, [pc, #144]	; (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d01d      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a22      	ldr	r2, [pc, #136]	; (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d018      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a21      	ldr	r2, [pc, #132]	; (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1c      	ldr	r2, [pc, #112]	; (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d101      	bne.n	80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4b17      	ldr	r3, [pc, #92]	; (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	461a      	mov	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a15      	ldr	r2, [pc, #84]	; (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045e4:	671a      	str	r2, [r3, #112]	; 0x70
 80045e6:	e009      	b.n	80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a11      	ldr	r2, [pc, #68]	; (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b01      	subs	r3, #1
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	58025408 	.word	0x58025408
 8004618:	5802541c 	.word	0x5802541c
 800461c:	58025430 	.word	0x58025430
 8004620:	58025444 	.word	0x58025444
 8004624:	58025458 	.word	0x58025458
 8004628:	5802546c 	.word	0x5802546c
 800462c:	58025480 	.word	0x58025480
 8004630:	58025494 	.word	0x58025494
 8004634:	1600963f 	.word	0x1600963f
 8004638:	58025940 	.word	0x58025940
 800463c:	1000823f 	.word	0x1000823f
 8004640:	40020940 	.word	0x40020940

08004644 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	7a1b      	ldrb	r3, [r3, #8]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d155      	bne.n	800470a <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a4b      	ldr	r2, [pc, #300]	; (8004790 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d049      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a49      	ldr	r2, [pc, #292]	; (8004794 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d044      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d03f      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d03a      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a45      	ldr	r2, [pc, #276]	; (80047a0 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d035      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a43      	ldr	r2, [pc, #268]	; (80047a4 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d030      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a42      	ldr	r2, [pc, #264]	; (80047a8 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d02b      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a40      	ldr	r2, [pc, #256]	; (80047ac <HAL_DMAEx_ConfigMuxSync+0x168>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d026      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3f      	ldr	r2, [pc, #252]	; (80047b0 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d021      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a3d      	ldr	r2, [pc, #244]	; (80047b4 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01c      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d017      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <HAL_DMAEx_ConfigMuxSync+0x178>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d012      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a39      	ldr	r2, [pc, #228]	; (80047c0 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00d      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a37      	ldr	r2, [pc, #220]	; (80047c4 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d008      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a36      	ldr	r2, [pc, #216]	; (80047c8 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a34      	ldr	r2, [pc, #208]	; (80047cc <HAL_DMAEx_ConfigMuxSync+0x188>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d131      	bne.n	800477a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8004720:	2302      	movs	r3, #2
 8004722:	e02f      	b.n	8004784 <HAL_DMAEx_ConfigMuxSync+0x140>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800473a:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b2d9      	uxtb	r1, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	061a      	lsls	r2, r3, #24
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	3b01      	subs	r3, #1
 800474e:	04db      	lsls	r3, r3, #19
 8004750:	431a      	orrs	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	431a      	orrs	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	7a1b      	ldrb	r3, [r3, #8]
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	431a      	orrs	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	7a5b      	ldrb	r3, [r3, #9]
 8004762:	025b      	lsls	r3, r3, #9
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	430a      	orrs	r2, r1
 800476c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e004      	b.n	8004784 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004780:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8

080047d0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01a      	beq.n	800481e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004800:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d022      	beq.n	800486c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01a      	beq.n	800486c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004844:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800484e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
      }
    }
  }
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004882:	4b86      	ldr	r3, [pc, #536]	; (8004a9c <HAL_GPIO_Init+0x228>)
 8004884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004886:	e18c      	b.n	8004ba2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 817e 	beq.w	8004b9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d005      	beq.n	80048b8 <HAL_GPIO_Init+0x44>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d130      	bne.n	800491a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2203      	movs	r2, #3
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ee:	2201      	movs	r2, #1
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 0201 	and.w	r2, r3, #1
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b03      	cmp	r3, #3
 8004924:	d017      	beq.n	8004956 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d123      	bne.n	80049aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	08da      	lsrs	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3208      	adds	r2, #8
 800496a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	08da      	lsrs	r2, r3, #3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3208      	adds	r2, #8
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2203      	movs	r2, #3
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f003 0203 	and.w	r2, r3, #3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80d8 	beq.w	8004b9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ec:	4b2c      	ldr	r3, [pc, #176]	; (8004aa0 <HAL_GPIO_Init+0x22c>)
 80049ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049f2:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <HAL_GPIO_Init+0x22c>)
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049fc:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <HAL_GPIO_Init+0x22c>)
 80049fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <HAL_GPIO_Init+0x230>)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	220f      	movs	r2, #15
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <HAL_GPIO_Init+0x234>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_GPIO_Init+0x258>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_GPIO_Init+0x238>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02b      	beq.n	8004a96 <HAL_GPIO_Init+0x222>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_GPIO_Init+0x23c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d025      	beq.n	8004a92 <HAL_GPIO_Init+0x21e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_GPIO_Init+0x240>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <HAL_GPIO_Init+0x21a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_GPIO_Init+0x244>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d019      	beq.n	8004a8a <HAL_GPIO_Init+0x216>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_GPIO_Init+0x248>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0x212>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_GPIO_Init+0x24c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00d      	beq.n	8004a82 <HAL_GPIO_Init+0x20e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <HAL_GPIO_Init+0x250>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <HAL_GPIO_Init+0x20a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_GPIO_Init+0x254>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a76:	2309      	movs	r3, #9
 8004a78:	e029      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a7a:	230a      	movs	r3, #10
 8004a7c:	e027      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a7e:	2307      	movs	r3, #7
 8004a80:	e025      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a82:	2306      	movs	r3, #6
 8004a84:	e023      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a86:	2305      	movs	r3, #5
 8004a88:	e021      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	e01f      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e01d      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e01b      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e019      	b.n	8004ace <HAL_GPIO_Init+0x25a>
 8004a9a:	bf00      	nop
 8004a9c:	58000080 	.word	0x58000080
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	58000400 	.word	0x58000400
 8004aa8:	58020000 	.word	0x58020000
 8004aac:	58020400 	.word	0x58020400
 8004ab0:	58020800 	.word	0x58020800
 8004ab4:	58020c00 	.word	0x58020c00
 8004ab8:	58021000 	.word	0x58021000
 8004abc:	58021400 	.word	0x58021400
 8004ac0:	58021800 	.word	0x58021800
 8004ac4:	58021c00 	.word	0x58021c00
 8004ac8:	58022400 	.word	0x58022400
 8004acc:	2300      	movs	r3, #0
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	f002 0203 	and.w	r2, r2, #3
 8004ad4:	0092      	lsls	r2, r2, #2
 8004ad6:	4093      	lsls	r3, r2
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ade:	4938      	ldr	r1, [pc, #224]	; (8004bc0 <HAL_GPIO_Init+0x34c>)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f47f ae6b 	bne.w	8004888 <HAL_GPIO_Init+0x14>
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	3724      	adds	r7, #36	; 0x24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	58000400 	.word	0x58000400

08004bc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bd2:	4b72      	ldr	r3, [pc, #456]	; (8004d9c <HAL_GPIO_DeInit+0x1d8>)
 8004bd4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004bd6:	e0d3      	b.n	8004d80 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004bd8:	2201      	movs	r2, #1
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	4013      	ands	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80c6 	beq.w	8004d7a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004bee:	4a6c      	ldr	r2, [pc, #432]	; (8004da0 <HAL_GPIO_DeInit+0x1dc>)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	220f      	movs	r2, #15
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a64      	ldr	r2, [pc, #400]	; (8004da4 <HAL_GPIO_DeInit+0x1e0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d031      	beq.n	8004c7c <HAL_GPIO_DeInit+0xb8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a63      	ldr	r2, [pc, #396]	; (8004da8 <HAL_GPIO_DeInit+0x1e4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02b      	beq.n	8004c78 <HAL_GPIO_DeInit+0xb4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a62      	ldr	r2, [pc, #392]	; (8004dac <HAL_GPIO_DeInit+0x1e8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d025      	beq.n	8004c74 <HAL_GPIO_DeInit+0xb0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a61      	ldr	r2, [pc, #388]	; (8004db0 <HAL_GPIO_DeInit+0x1ec>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01f      	beq.n	8004c70 <HAL_GPIO_DeInit+0xac>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a60      	ldr	r2, [pc, #384]	; (8004db4 <HAL_GPIO_DeInit+0x1f0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d019      	beq.n	8004c6c <HAL_GPIO_DeInit+0xa8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a5f      	ldr	r2, [pc, #380]	; (8004db8 <HAL_GPIO_DeInit+0x1f4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_GPIO_DeInit+0xa4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a5e      	ldr	r2, [pc, #376]	; (8004dbc <HAL_GPIO_DeInit+0x1f8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00d      	beq.n	8004c64 <HAL_GPIO_DeInit+0xa0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a5d      	ldr	r2, [pc, #372]	; (8004dc0 <HAL_GPIO_DeInit+0x1fc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <HAL_GPIO_DeInit+0x9c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a5c      	ldr	r2, [pc, #368]	; (8004dc4 <HAL_GPIO_DeInit+0x200>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_GPIO_DeInit+0x98>
 8004c58:	2309      	movs	r3, #9
 8004c5a:	e010      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c5c:	230a      	movs	r3, #10
 8004c5e:	e00e      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c60:	2307      	movs	r3, #7
 8004c62:	e00c      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c64:	2306      	movs	r3, #6
 8004c66:	e00a      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c68:	2305      	movs	r3, #5
 8004c6a:	e008      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	e006      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c70:	2303      	movs	r3, #3
 8004c72:	e004      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e002      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_GPIO_DeInit+0xba>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	f002 0203 	and.w	r2, r2, #3
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	4093      	lsls	r3, r2
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d136      	bne.n	8004cfc <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cb8:	4013      	ands	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cca:	4013      	ands	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	220f      	movs	r2, #15
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004cde:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <HAL_GPIO_DeInit+0x1dc>)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	43da      	mvns	r2, r3
 8004cee:	482c      	ldr	r0, [pc, #176]	; (8004da0 <HAL_GPIO_DeInit+0x1dc>)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	2103      	movs	r1, #3
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	08d2      	lsrs	r2, r2, #3
 8004d30:	4019      	ands	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3208      	adds	r2, #8
 8004d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	2103      	movs	r1, #3
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	2101      	movs	r1, #1
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2103      	movs	r1, #3
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	401a      	ands	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f47f af25 	bne.w	8004bd8 <HAL_GPIO_DeInit+0x14>
  }
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	58000080 	.word	0x58000080
 8004da0:	58000400 	.word	0x58000400
 8004da4:	58020000 	.word	0x58020000
 8004da8:	58020400 	.word	0x58020400
 8004dac:	58020800 	.word	0x58020800
 8004db0:	58020c00 	.word	0x58020c00
 8004db4:	58021000 	.word	0x58021000
 8004db8:	58021400 	.word	0x58021400
 8004dbc:	58021800 	.word	0x58021800
 8004dc0:	58021c00 	.word	0x58021c00
 8004dc4:	58022400 	.word	0x58022400

08004dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004de4:	e003      	b.n	8004dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	041a      	lsls	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	619a      	str	r2, [r3, #24]
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f804 	bl	8004e2e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	4603      	mov	r3, r0
 8004e36:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e07f      	b.n	8004f56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f005 fe46 	bl	800aafc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	e006      	b.n	8004ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d104      	bne.n	8004ede <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_I2C_Init+0x11c>)
 8004eea:	430b      	orrs	r3, r1
 8004eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	02008000 	.word	0x02008000

08004f64 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e021      	b.n	8004fba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2224      	movs	r2, #36	; 0x24
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f005 fe22 	bl	800abd8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	817b      	strh	r3, [r7, #10]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	813b      	strh	r3, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	f040 80f9 	bne.w	80051de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x34>
 8004ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0ed      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_I2C_Mem_Write+0x4e>
 800500e:	2302      	movs	r3, #2
 8005010:	e0e6      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800501a:	f7fc fda7 	bl	8001b6c <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2319      	movs	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f001 f8ac 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0d1      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2221      	movs	r2, #33	; 0x21
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2240      	movs	r2, #64	; 0x40
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005064:	88f8      	ldrh	r0, [r7, #6]
 8005066:	893a      	ldrh	r2, [r7, #8]
 8005068:	8979      	ldrh	r1, [r7, #10]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	4603      	mov	r3, r0
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fb77 	bl	8005768 <I2C_RequestMemoryWrite>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0a9      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	2bff      	cmp	r3, #255	; 0xff
 8005094:	d90e      	bls.n	80050b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	22ff      	movs	r2, #255	; 0xff
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	8979      	ldrh	r1, [r7, #10]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f001 fa15 	bl	80064dc <I2C_TransferConfig>
 80050b2:	e00f      	b.n	80050d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	8979      	ldrh	r1, [r7, #10]
 80050c6:	2300      	movs	r3, #0
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f001 fa04 	bl	80064dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f001 f896 	bl	800620a <I2C_WaitOnTXISFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e07b      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d034      	beq.n	800518c <HAL_I2C_Mem_Write+0x1c8>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	2b00      	cmp	r3, #0
 8005128:	d130      	bne.n	800518c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f001 f828 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e04d      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2bff      	cmp	r3, #255	; 0xff
 800514c:	d90e      	bls.n	800516c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	22ff      	movs	r2, #255	; 0xff
 8005152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	b2da      	uxtb	r2, r3
 800515a:	8979      	ldrh	r1, [r7, #10]
 800515c:	2300      	movs	r3, #0
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f001 f9b9 	bl	80064dc <I2C_TransferConfig>
 800516a:	e00f      	b.n	800518c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	b2da      	uxtb	r2, r3
 800517c:	8979      	ldrh	r1, [r7, #10]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f001 f9a8 	bl	80064dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d19e      	bne.n	80050d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f001 f875 	bl	800628a <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e01a      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2220      	movs	r2, #32
 80051b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6859      	ldr	r1, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <HAL_I2C_Mem_Write+0x224>)
 80051be:	400b      	ands	r3, r1
 80051c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fe00e800 	.word	0xfe00e800

080051ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	4608      	mov	r0, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	817b      	strh	r3, [r7, #10]
 80051fe:	460b      	mov	r3, r1
 8005200:	813b      	strh	r3, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	f040 80fd 	bne.w	800540e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_I2C_Mem_Read+0x34>
 800521a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005226:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0f1      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_I2C_Mem_Read+0x4e>
 8005236:	2302      	movs	r3, #2
 8005238:	e0ea      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005242:	f7fc fc93 	bl	8001b6c <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2319      	movs	r3, #25
 800524e:	2201      	movs	r2, #1
 8005250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 ff98 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0d5      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2222      	movs	r2, #34	; 0x22
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2240      	movs	r2, #64	; 0x40
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800528c:	88f8      	ldrh	r0, [r7, #6]
 800528e:	893a      	ldrh	r2, [r7, #8]
 8005290:	8979      	ldrh	r1, [r7, #10]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4603      	mov	r3, r0
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fab7 	bl	8005810 <I2C_RequestMemoryRead>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0ad      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2bff      	cmp	r3, #255	; 0xff
 80052bc:	d90e      	bls.n	80052dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	4b52      	ldr	r3, [pc, #328]	; (8005418 <HAL_I2C_Mem_Read+0x22c>)
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f001 f901 	bl	80064dc <I2C_TransferConfig>
 80052da:	e00f      	b.n	80052fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	4b4a      	ldr	r3, [pc, #296]	; (8005418 <HAL_I2C_Mem_Read+0x22c>)
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 f8f0 	bl	80064dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2200      	movs	r2, #0
 8005304:	2104      	movs	r1, #4
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 ff3f 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e07c      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d034      	beq.n	80053bc <HAL_I2C_Mem_Read+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005356:	2b00      	cmp	r3, #0
 8005358:	d130      	bne.n	80053bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	2200      	movs	r2, #0
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 ff10 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e04d      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2bff      	cmp	r3, #255	; 0xff
 800537c:	d90e      	bls.n	800539c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	b2da      	uxtb	r2, r3
 800538a:	8979      	ldrh	r1, [r7, #10]
 800538c:	2300      	movs	r3, #0
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f001 f8a1 	bl	80064dc <I2C_TransferConfig>
 800539a:	e00f      	b.n	80053bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	8979      	ldrh	r1, [r7, #10]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f001 f890 	bl	80064dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d19a      	bne.n	80052fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 ff5d 	bl	800628a <I2C_WaitOnSTOPFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e01a      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2220      	movs	r2, #32
 80053e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6859      	ldr	r1, [r3, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_I2C_Mem_Read+0x230>)
 80053ee:	400b      	ands	r3, r1
 80053f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
  }
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	80002400 	.word	0x80002400
 800541c:	fe00e800 	.word	0xfe00e800

08005420 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d010      	beq.n	8005466 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	09db      	lsrs	r3, r3, #7
 8005448:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	f043 0201 	orr.w	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005464:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	0a9b      	lsrs	r3, r3, #10
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	09db      	lsrs	r3, r3, #7
 8005476:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005492:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	0a5b      	lsrs	r3, r3, #9
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	09db      	lsrs	r3, r3, #7
 80054a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0202 	orr.w	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 030b 	and.w	r3, r3, #11
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fd1f 	bl	8005f18 <I2C_ITError>
  }
}
 80054da:	bf00      	nop
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
 8005516:	4613      	mov	r3, r2
 8005518:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <I2C_Slave_ISR_IT+0x24>
 8005582:	2302      	movs	r3, #2
 8005584:	e0ec      	b.n	8005760 <I2C_Slave_ISR_IT+0x1fe>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80055a6:	6939      	ldr	r1, [r7, #16]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fa67 	bl	8005a7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04d      	beq.n	8005656 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d047      	beq.n	8005656 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d128      	bne.n	8005622 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b28      	cmp	r3, #40	; 0x28
 80055da:	d108      	bne.n	80055ee <I2C_Slave_ISR_IT+0x8c>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e2:	d104      	bne.n	80055ee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055e4:	6939      	ldr	r1, [r7, #16]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fc40 	bl	8005e6c <I2C_ITListenCplt>
 80055ec:	e032      	b.n	8005654 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b29      	cmp	r3, #41	; 0x29
 80055f8:	d10e      	bne.n	8005618 <I2C_Slave_ISR_IT+0xb6>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005600:	d00a      	beq.n	8005618 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2210      	movs	r2, #16
 8005608:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fd7b 	bl	8006106 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f9d5 	bl	80059c0 <I2C_ITSlaveSeqCplt>
 8005616:	e01d      	b.n	8005654 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2210      	movs	r2, #16
 800561e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005620:	e096      	b.n	8005750 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2210      	movs	r2, #16
 8005628:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <I2C_Slave_ISR_IT+0xe4>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005642:	f040 8085 	bne.w	8005750 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fc63 	bl	8005f18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005652:	e07d      	b.n	8005750 <I2C_Slave_ISR_IT+0x1ee>
 8005654:	e07c      	b.n	8005750 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d030      	beq.n	80056c4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02a      	beq.n	80056c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d018      	beq.n	80056aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d14f      	bne.n	8005754 <I2C_Slave_ISR_IT+0x1f2>
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056ba:	d04b      	beq.n	8005754 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f97f 	bl	80059c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80056c2:	e047      	b.n	8005754 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056dc:	6939      	ldr	r1, [r7, #16]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f8ea 	bl	80058b8 <I2C_ITAddrCplt>
 80056e4:	e037      	b.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d031      	beq.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02b      	beq.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d018      	beq.n	800573a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	781a      	ldrb	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	851a      	strh	r2, [r3, #40]	; 0x28
 8005738:	e00d      	b.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005740:	d002      	beq.n	8005748 <I2C_Slave_ISR_IT+0x1e6>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f939 	bl	80059c0 <I2C_ITSlaveSeqCplt>
 800574e:	e002      	b.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005754:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	8979      	ldrh	r1, [r7, #10]
 8005788:	4b20      	ldr	r3, [pc, #128]	; (800580c <I2C_RequestMemoryWrite+0xa4>)
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fea3 	bl	80064dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fd35 	bl	800620a <I2C_WaitOnTXISFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e02c      	b.n	8005804 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d105      	bne.n	80057bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057b0:	893b      	ldrh	r3, [r7, #8]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	629a      	str	r2, [r3, #40]	; 0x28
 80057ba:	e015      	b.n	80057e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fd1b 	bl	800620a <I2C_WaitOnTXISFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e012      	b.n	8005804 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2200      	movs	r2, #0
 80057f0:	2180      	movs	r1, #128	; 0x80
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fcc9 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	80002000 	.word	0x80002000

08005810 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	4603      	mov	r3, r0
 8005820:	817b      	strh	r3, [r7, #10]
 8005822:	460b      	mov	r3, r1
 8005824:	813b      	strh	r3, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	8979      	ldrh	r1, [r7, #10]
 8005830:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <I2C_RequestMemoryRead+0xa4>)
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fe50 	bl	80064dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fce2 	bl	800620a <I2C_WaitOnTXISFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e02c      	b.n	80058aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005856:	893b      	ldrh	r3, [r7, #8]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
 8005860:	e015      	b.n	800588e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005862:	893b      	ldrh	r3, [r7, #8]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	69b9      	ldr	r1, [r7, #24]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fcc8 	bl	800620a <I2C_WaitOnTXISFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e012      	b.n	80058aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005884:	893b      	ldrh	r3, [r7, #8]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2200      	movs	r2, #0
 8005896:	2140      	movs	r1, #64	; 0x40
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fc76 	bl	800618a <I2C_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	80002000 	.word	0x80002000

080058b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058ce:	2b28      	cmp	r3, #40	; 0x28
 80058d0:	d16a      	bne.n	80059a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	0c1b      	lsrs	r3, r3, #16
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80058f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800590c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d138      	bne.n	8005988 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005916:	897b      	ldrh	r3, [r7, #10]
 8005918:	09db      	lsrs	r3, r3, #7
 800591a:	b29a      	uxth	r2, r3
 800591c:	89bb      	ldrh	r3, [r7, #12]
 800591e:	4053      	eors	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	f003 0306 	and.w	r3, r3, #6
 8005926:	2b00      	cmp	r3, #0
 8005928:	d11c      	bne.n	8005964 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593c:	2b02      	cmp	r3, #2
 800593e:	d13b      	bne.n	80059b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2208      	movs	r2, #8
 800594c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005956:	89ba      	ldrh	r2, [r7, #12]
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fdd4 	bl	800550a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005962:	e029      	b.n	80059b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005964:	893b      	ldrh	r3, [r7, #8]
 8005966:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fde7 	bl	8006540 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800597a:	89ba      	ldrh	r2, [r7, #12]
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fdc2 	bl	800550a <HAL_I2C_AddrCallback>
}
 8005986:	e017      	b.n	80059b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fdd7 	bl	8006540 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800599a:	89ba      	ldrh	r2, [r7, #12]
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff fdb2 	bl	800550a <HAL_I2C_AddrCallback>
}
 80059a6:	e007      	b.n	80059b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2208      	movs	r2, #8
 80059ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	0b9b      	lsrs	r3, r3, #14
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e00d      	b.n	8005a12 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	0bdb      	lsrs	r3, r3, #15
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b29      	cmp	r3, #41	; 0x29
 8005a1c:	d112      	bne.n	8005a44 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2228      	movs	r2, #40	; 0x28
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2221      	movs	r2, #33	; 0x21
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fd86 	bl	8006540 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff fd50 	bl	80054e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a42:	e017      	b.n	8005a74 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4e:	d111      	bne.n	8005a74 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2228      	movs	r2, #40	; 0x28
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2222      	movs	r2, #34	; 0x22
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a5e:	2102      	movs	r1, #2
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fd6d 	bl	8006540 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff fd41 	bl	80054f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a98:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b21      	cmp	r3, #33	; 0x21
 8005aa6:	d002      	beq.n	8005aae <I2C_ITSlaveCplt+0x32>
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b29      	cmp	r3, #41	; 0x29
 8005aac:	d108      	bne.n	8005ac0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005aae:	f248 0101 	movw	r1, #32769	; 0x8001
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fd44 	bl	8006540 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2221      	movs	r2, #33	; 0x21
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
 8005abe:	e00d      	b.n	8005adc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b22      	cmp	r3, #34	; 0x22
 8005ac4:	d002      	beq.n	8005acc <I2C_ITSlaveCplt+0x50>
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aca:	d107      	bne.n	8005adc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005acc:	f248 0102 	movw	r1, #32770	; 0x8002
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fd35 	bl	8006540 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2222      	movs	r2, #34	; 0x22
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b80      	ldr	r3, [pc, #512]	; (8005cf8 <I2C_ITSlaveCplt+0x27c>)
 8005af8:	400b      	ands	r3, r1
 8005afa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb02 	bl	8006106 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	0b9b      	lsrs	r3, r3, #14
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d07a      	beq.n	8005c04 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8111 	beq.w	8005d4a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a73      	ldr	r2, [pc, #460]	; (8005cfc <I2C_ITSlaveCplt+0x280>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d059      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a71      	ldr	r2, [pc, #452]	; (8005d00 <I2C_ITSlaveCplt+0x284>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d053      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6f      	ldr	r2, [pc, #444]	; (8005d04 <I2C_ITSlaveCplt+0x288>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04d      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6d      	ldr	r2, [pc, #436]	; (8005d08 <I2C_ITSlaveCplt+0x28c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d047      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a6b      	ldr	r2, [pc, #428]	; (8005d0c <I2C_ITSlaveCplt+0x290>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d041      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a69      	ldr	r2, [pc, #420]	; (8005d10 <I2C_ITSlaveCplt+0x294>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d03b      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a67      	ldr	r2, [pc, #412]	; (8005d14 <I2C_ITSlaveCplt+0x298>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d035      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <I2C_ITSlaveCplt+0x29c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02f      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <I2C_ITSlaveCplt+0x2a0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d029      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a61      	ldr	r2, [pc, #388]	; (8005d20 <I2C_ITSlaveCplt+0x2a4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d023      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5f      	ldr	r2, [pc, #380]	; (8005d24 <I2C_ITSlaveCplt+0x2a8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d01d      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5d      	ldr	r2, [pc, #372]	; (8005d28 <I2C_ITSlaveCplt+0x2ac>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d017      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5b      	ldr	r2, [pc, #364]	; (8005d2c <I2C_ITSlaveCplt+0x2b0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d011      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a59      	ldr	r2, [pc, #356]	; (8005d30 <I2C_ITSlaveCplt+0x2b4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a57      	ldr	r2, [pc, #348]	; (8005d34 <I2C_ITSlaveCplt+0x2b8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d005      	beq.n	8005be8 <I2C_ITSlaveCplt+0x16c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a55      	ldr	r2, [pc, #340]	; (8005d38 <I2C_ITSlaveCplt+0x2bc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d105      	bne.n	8005bf4 <I2C_ITSlaveCplt+0x178>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	e004      	b.n	8005bfe <I2C_ITSlaveCplt+0x182>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005c02:	e0a2      	b.n	8005d4a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	0bdb      	lsrs	r3, r3, #15
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 809c 	beq.w	8005d4a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 808f 	beq.w	8005d4a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <I2C_ITSlaveCplt+0x280>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d059      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a30      	ldr	r2, [pc, #192]	; (8005d00 <I2C_ITSlaveCplt+0x284>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d053      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2e      	ldr	r2, [pc, #184]	; (8005d04 <I2C_ITSlaveCplt+0x288>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04d      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2c      	ldr	r2, [pc, #176]	; (8005d08 <I2C_ITSlaveCplt+0x28c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d047      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a2a      	ldr	r2, [pc, #168]	; (8005d0c <I2C_ITSlaveCplt+0x290>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d041      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <I2C_ITSlaveCplt+0x294>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d03b      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <I2C_ITSlaveCplt+0x298>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d035      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a24      	ldr	r2, [pc, #144]	; (8005d18 <I2C_ITSlaveCplt+0x29c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d02f      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <I2C_ITSlaveCplt+0x2a0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d029      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a20      	ldr	r2, [pc, #128]	; (8005d20 <I2C_ITSlaveCplt+0x2a4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d023      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <I2C_ITSlaveCplt+0x2a8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d01d      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <I2C_ITSlaveCplt+0x2ac>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d017      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1a      	ldr	r2, [pc, #104]	; (8005d2c <I2C_ITSlaveCplt+0x2b0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d011      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <I2C_ITSlaveCplt+0x2b4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <I2C_ITSlaveCplt+0x2b8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d005      	beq.n	8005cec <I2C_ITSlaveCplt+0x270>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <I2C_ITSlaveCplt+0x2bc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d127      	bne.n	8005d3c <I2C_ITSlaveCplt+0x2c0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	e026      	b.n	8005d46 <I2C_ITSlaveCplt+0x2ca>
 8005cf8:	fe00e800 	.word	0xfe00e800
 8005cfc:	40020010 	.word	0x40020010
 8005d00:	40020028 	.word	0x40020028
 8005d04:	40020040 	.word	0x40020040
 8005d08:	40020058 	.word	0x40020058
 8005d0c:	40020070 	.word	0x40020070
 8005d10:	40020088 	.word	0x40020088
 8005d14:	400200a0 	.word	0x400200a0
 8005d18:	400200b8 	.word	0x400200b8
 8005d1c:	40020410 	.word	0x40020410
 8005d20:	40020428 	.word	0x40020428
 8005d24:	40020440 	.word	0x40020440
 8005d28:	40020458 	.word	0x40020458
 8005d2c:	40020470 	.word	0x40020470
 8005d30:	40020488 	.word	0x40020488
 8005d34:	400204a0 	.word	0x400204a0
 8005d38:	400204b8 	.word	0x400204b8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	089b      	lsrs	r3, r3, #2
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d020      	beq.n	8005d98 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0304 	bic.w	r3, r3, #4
 8005d5c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	f043 0204 	orr.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d010      	beq.n	8005de6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8a4 	bl	8005f18 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b28      	cmp	r3, #40	; 0x28
 8005dda:	d141      	bne.n	8005e60 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f844 	bl	8005e6c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005de4:	e03c      	b.n	8005e60 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dee:	d014      	beq.n	8005e1a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff fde5 	bl	80059c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <I2C_ITSlaveCplt+0x3ec>)
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fb87 	bl	8005526 <HAL_I2C_ListenCpltCallback>
}
 8005e18:	e022      	b.n	8005e60 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b22      	cmp	r3, #34	; 0x22
 8005e24:	d10e      	bne.n	8005e44 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fb5a 	bl	80054f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e42:	e00d      	b.n	8005e60 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fb41 	bl	80054e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e60:	bf00      	nop
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	ffff0000 	.word	0xffff0000

08005e6c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <I2C_ITListenCplt+0xa8>)
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d022      	beq.n	8005eea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d012      	beq.n	8005eea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005eea:	f248 0103 	movw	r1, #32771	; 0x8003
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fb26 	bl	8006540 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2210      	movs	r2, #16
 8005efa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff fb0e 	bl	8005526 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	ffff0000 	.word	0xffff0000

08005f18 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a5d      	ldr	r2, [pc, #372]	; (80060ac <I2C_ITError+0x194>)
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b28      	cmp	r3, #40	; 0x28
 8005f4e:	d005      	beq.n	8005f5c <I2C_ITError+0x44>
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b29      	cmp	r3, #41	; 0x29
 8005f54:	d002      	beq.n	8005f5c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b2a      	cmp	r3, #42	; 0x2a
 8005f5a:	d10b      	bne.n	8005f74 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f5c:	2103      	movs	r1, #3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 faee 	bl	8006540 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2228      	movs	r2, #40	; 0x28
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a50      	ldr	r2, [pc, #320]	; (80060b0 <I2C_ITError+0x198>)
 8005f70:	635a      	str	r2, [r3, #52]	; 0x34
 8005f72:	e011      	b.n	8005f98 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f74:	f248 0103 	movw	r1, #32771	; 0x8003
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fae1 	bl	8006540 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b60      	cmp	r3, #96	; 0x60
 8005f88:	d003      	beq.n	8005f92 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d039      	beq.n	800601a <I2C_ITError+0x102>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b11      	cmp	r3, #17
 8005faa:	d002      	beq.n	8005fb2 <I2C_ITError+0x9a>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b21      	cmp	r3, #33	; 0x21
 8005fb0:	d133      	bne.n	800601a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc0:	d107      	bne.n	8005fd2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fd0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fd ff32 	bl	8003e40 <HAL_DMA_GetState>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d017      	beq.n	8006012 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4a33      	ldr	r2, [pc, #204]	; (80060b4 <I2C_ITError+0x19c>)
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fc fdb4 	bl	8002b64 <HAL_DMA_Abort_IT>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04d      	beq.n	800609e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006010:	e045      	b.n	800609e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f850 	bl	80060b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006018:	e041      	b.n	800609e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d039      	beq.n	8006096 <I2C_ITError+0x17e>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b12      	cmp	r3, #18
 8006026:	d002      	beq.n	800602e <I2C_ITError+0x116>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b22      	cmp	r3, #34	; 0x22
 800602c:	d133      	bne.n	8006096 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d107      	bne.n	800604e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	4618      	mov	r0, r3
 8006054:	f7fd fef4 	bl	8003e40 <HAL_DMA_GetState>
 8006058:	4603      	mov	r3, r0
 800605a:	2b01      	cmp	r3, #1
 800605c:	d017      	beq.n	800608e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <I2C_ITError+0x19c>)
 8006064:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	4618      	mov	r0, r3
 8006074:	f7fc fd76 	bl	8002b64 <HAL_DMA_Abort_IT>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d011      	beq.n	80060a2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800608c:	e009      	b.n	80060a2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f812 	bl	80060b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006094:	e005      	b.n	80060a2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f80e 	bl	80060b8 <I2C_TreatErrorCallback>
  }
}
 800609c:	e002      	b.n	80060a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060a2:	bf00      	nop
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	ffff0000 	.word	0xffff0000
 80060b0:	08005563 	.word	0x08005563
 80060b4:	0800614f 	.word	0x0800614f

080060b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b60      	cmp	r3, #96	; 0x60
 80060ca:	d10e      	bne.n	80060ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fa33 	bl	800554e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060e8:	e009      	b.n	80060fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fa1e 	bl	800553a <HAL_I2C_ErrorCallback>
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d103      	bne.n	8006124 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2200      	movs	r2, #0
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d007      	beq.n	8006142 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	619a      	str	r2, [r3, #24]
  }
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	2200      	movs	r2, #0
 800616a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	2200      	movs	r2, #0
 800617a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff ff9b 	bl	80060b8 <I2C_TreatErrorCallback>
}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800619a:	e022      	b.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a2:	d01e      	beq.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a4:	f7fb fce2 	bl	8001b6c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x30>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d113      	bne.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e00f      	b.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	bf0c      	ite	eq
 80061f2:	2301      	moveq	r3, #1
 80061f4:	2300      	movne	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d0cd      	beq.n	800619c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006216:	e02c      	b.n	8006272 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f871 	bl	8006304 <I2C_IsErrorOccurred>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e02a      	b.n	8006282 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006232:	d01e      	beq.n	8006272 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006234:	f7fb fc9a 	bl	8001b6c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d113      	bne.n	8006272 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e007      	b.n	8006282 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d1cb      	bne.n	8006218 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006296:	e028      	b.n	80062ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f831 	bl	8006304 <I2C_IsErrorOccurred>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e026      	b.n	80062fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ac:	f7fb fc5e 	bl	8001b6c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d113      	bne.n	80062ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e007      	b.n	80062fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d1cf      	bne.n	8006298 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d075      	beq.n	800641c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2210      	movs	r2, #16
 8006336:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006338:	e056      	b.n	80063e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006340:	d052      	beq.n	80063e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fb fc13 	bl	8001b6c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_IsErrorOccurred+0x54>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d147      	bne.n	80063e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006362:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800636a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637a:	d12e      	bne.n	80063da <I2C_IsErrorOccurred+0xd6>
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006382:	d02a      	beq.n	80063da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	2b20      	cmp	r3, #32
 8006388:	d027      	beq.n	80063da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006398:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800639a:	f7fb fbe7 	bl	8001b6c <HAL_GetTick>
 800639e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a0:	e01b      	b.n	80063da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063a2:	f7fb fbe3 	bl	8001b6c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b19      	cmp	r3, #25
 80063ae:	d914      	bls.n	80063da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d1dc      	bne.n	80063a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d003      	beq.n	80063fe <I2C_IsErrorOccurred+0xfa>
 80063f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d09d      	beq.n	800633a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2220      	movs	r2, #32
 800640c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f043 0304 	orr.w	r3, r3, #4
 8006414:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800643e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f043 0308 	orr.w	r3, r3, #8
 8006456:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800648a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01c      	beq.n	80064cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff fe37 	bl	8006106 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <I2C_IsErrorOccurred+0x1d4>)
 80064a4:	400b      	ands	r3, r1
 80064a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80064cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3728      	adds	r7, #40	; 0x28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	fe00e800 	.word	0xfe00e800

080064dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	817b      	strh	r3, [r7, #10]
 80064ea:	4613      	mov	r3, r2
 80064ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ee:	897b      	ldrh	r3, [r7, #10]
 80064f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064f4:	7a7b      	ldrb	r3, [r7, #9]
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064fc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	4313      	orrs	r3, r2
 8006506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800650a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	0d5b      	lsrs	r3, r3, #21
 8006516:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <I2C_TransferConfig+0x60>)
 800651c:	430b      	orrs	r3, r1
 800651e:	43db      	mvns	r3, r3
 8006520:	ea02 0103 	and.w	r1, r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	03ff63ff 	.word	0x03ff63ff

08006540 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006550:	887b      	ldrh	r3, [r7, #2]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006560:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800656e:	2b28      	cmp	r3, #40	; 0x28
 8006570:	d003      	beq.n	800657a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006578:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800658a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006598:	2b28      	cmp	r3, #40	; 0x28
 800659a:	d003      	beq.n	80065a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80065a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da03      	bge.n	80065b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065b4:	887b      	ldrh	r3, [r7, #2]
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d103      	bne.n	80065c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80065c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065c2:	887b      	ldrh	r3, [r7, #2]
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d103      	bne.n	80065d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f043 0320 	orr.w	r3, r3, #32
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065d0:	887b      	ldrh	r3, [r7, #2]
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d103      	bne.n	80065de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	43da      	mvns	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	400a      	ands	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b20      	cmp	r3, #32
 8006610:	d138      	bne.n	8006684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800661c:	2302      	movs	r3, #2
 800661e:	e032      	b.n	8006686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2224      	movs	r2, #36	; 0x24
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800664e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	e000      	b.n	8006686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006684:	2302      	movs	r3, #2
  }
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d139      	bne.n	800671c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e033      	b.n	800671e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2224      	movs	r2, #36	; 0x24
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006734:	4b29      	ldr	r3, [pc, #164]	; (80067dc <HAL_PWREx_ConfigSupply+0xb0>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	2b06      	cmp	r3, #6
 800673e:	d00a      	beq.n	8006756 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006740:	4b26      	ldr	r3, [pc, #152]	; (80067dc <HAL_PWREx_ConfigSupply+0xb0>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d001      	beq.n	8006752 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e03f      	b.n	80067d2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e03d      	b.n	80067d2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006756:	4b21      	ldr	r3, [pc, #132]	; (80067dc <HAL_PWREx_ConfigSupply+0xb0>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800675e:	491f      	ldr	r1, [pc, #124]	; (80067dc <HAL_PWREx_ConfigSupply+0xb0>)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4313      	orrs	r3, r2
 8006764:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006766:	f7fb fa01 	bl	8001b6c <HAL_GetTick>
 800676a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800676c:	e009      	b.n	8006782 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800676e:	f7fb f9fd 	bl	8001b6c <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677c:	d901      	bls.n	8006782 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e027      	b.n	80067d2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006782:	4b16      	ldr	r3, [pc, #88]	; (80067dc <HAL_PWREx_ConfigSupply+0xb0>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800678a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678e:	d1ee      	bne.n	800676e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b1e      	cmp	r3, #30
 8006794:	d008      	beq.n	80067a8 <HAL_PWREx_ConfigSupply+0x7c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b2e      	cmp	r3, #46	; 0x2e
 800679a:	d005      	beq.n	80067a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b1d      	cmp	r3, #29
 80067a0:	d002      	beq.n	80067a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b2d      	cmp	r3, #45	; 0x2d
 80067a6:	d113      	bne.n	80067d0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80067a8:	f7fb f9e0 	bl	8001b6c <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80067ae:	e009      	b.n	80067c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067b0:	f7fb f9dc 	bl	8001b6c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067be:	d901      	bls.n	80067c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e006      	b.n	80067d2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_PWREx_ConfigSupply+0xb0>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0311 	and.w	r3, r3, #17
 80067cc:	2b11      	cmp	r3, #17
 80067ce:	d1ef      	bne.n	80067b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	58024800 	.word	0x58024800

080067e0 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e02d      	b.n	800684e <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0220 	bic.w	r2, r2, #32
 8006806:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800681a:	f023 030f 	bic.w	r3, r3, #15
 800681e:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 021c 	bic.w	r2, r2, #28
 800682e:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0207 	bic.w	r2, r2, #7
 800683e:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	; 0x30
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e397      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8087 	beq.w	800698a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800687c:	4b9e      	ldr	r3, [pc, #632]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006886:	4b9c      	ldr	r3, [pc, #624]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b10      	cmp	r3, #16
 8006890:	d007      	beq.n	80068a2 <HAL_RCC_OscConfig+0x46>
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	2b18      	cmp	r3, #24
 8006896:	d110      	bne.n	80068ba <HAL_RCC_OscConfig+0x5e>
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d10b      	bne.n	80068ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a2:	4b95      	ldr	r3, [pc, #596]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d06c      	beq.n	8006988 <HAL_RCC_OscConfig+0x12c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d168      	bne.n	8006988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e371      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c2:	d106      	bne.n	80068d2 <HAL_RCC_OscConfig+0x76>
 80068c4:	4b8c      	ldr	r3, [pc, #560]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a8b      	ldr	r2, [pc, #556]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	e02e      	b.n	8006930 <HAL_RCC_OscConfig+0xd4>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCC_OscConfig+0x98>
 80068da:	4b87      	ldr	r3, [pc, #540]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a86      	ldr	r2, [pc, #536]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4b84      	ldr	r3, [pc, #528]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a83      	ldr	r2, [pc, #524]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80068ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e01d      	b.n	8006930 <HAL_RCC_OscConfig+0xd4>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068fc:	d10c      	bne.n	8006918 <HAL_RCC_OscConfig+0xbc>
 80068fe:	4b7e      	ldr	r3, [pc, #504]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a7d      	ldr	r2, [pc, #500]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7a      	ldr	r2, [pc, #488]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e00b      	b.n	8006930 <HAL_RCC_OscConfig+0xd4>
 8006918:	4b77      	ldr	r3, [pc, #476]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a76      	ldr	r2, [pc, #472]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800691e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	4b74      	ldr	r3, [pc, #464]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a73      	ldr	r2, [pc, #460]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800692a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800692e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fb f918 	bl	8001b6c <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006940:	f7fb f914 	bl	8001b6c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e325      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006952:	4b69      	ldr	r3, [pc, #420]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0xe4>
 800695e:	e014      	b.n	800698a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fb f904 	bl	8001b6c <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006968:	f7fb f900 	bl	8001b6c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b64      	cmp	r3, #100	; 0x64
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e311      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800697a:	4b5f      	ldr	r3, [pc, #380]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x10c>
 8006986:	e000      	b.n	800698a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 808a 	beq.w	8006aac <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006998:	4b57      	ldr	r3, [pc, #348]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069a2:	4b55      	ldr	r3, [pc, #340]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <HAL_RCC_OscConfig+0x162>
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	2b18      	cmp	r3, #24
 80069b2:	d137      	bne.n	8006a24 <HAL_RCC_OscConfig+0x1c8>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d132      	bne.n	8006a24 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069be:	4b4e      	ldr	r3, [pc, #312]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCC_OscConfig+0x17a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e2e3      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069d6:	4b48      	ldr	r3, [pc, #288]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 0219 	bic.w	r2, r3, #25
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	4945      	ldr	r1, [pc, #276]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069e8:	f7fb f8c0 	bl	8001b6c <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069f0:	f7fb f8bc 	bl	8001b6c <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e2cd      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	4b3a      	ldr	r3, [pc, #232]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	061b      	lsls	r3, r3, #24
 8006a1c:	4936      	ldr	r1, [pc, #216]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a22:	e043      	b.n	8006aac <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d026      	beq.n	8006a7a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 0219 	bic.w	r2, r3, #25
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	492f      	ldr	r1, [pc, #188]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3e:	f7fb f895 	bl	8001b6c <HAL_GetTick>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a46:	f7fb f891 	bl	8001b6c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e2a2      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a64:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	061b      	lsls	r3, r3, #24
 8006a72:	4921      	ldr	r1, [pc, #132]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	604b      	str	r3, [r1, #4]
 8006a78:	e018      	b.n	8006aac <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a7a:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a86:	f7fb f871 	bl	8001b6c <HAL_GetTick>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8e:	f7fb f86d 	bl	8001b6c <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e27e      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006aa0:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1f0      	bne.n	8006a8e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d06d      	beq.n	8006b94 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d007      	beq.n	8006ade <HAL_RCC_OscConfig+0x282>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b18      	cmp	r3, #24
 8006ad2:	d11e      	bne.n	8006b12 <HAL_RCC_OscConfig+0x2b6>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d119      	bne.n	8006b12 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_RCC_OscConfig+0x29c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_RCC_OscConfig+0x2a0>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	d004      	beq.n	8006afc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e253      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
 8006af6:	bf00      	nop
 8006af8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006afc:	4ba3      	ldr	r3, [pc, #652]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	061b      	lsls	r3, r3, #24
 8006b0a:	49a0      	ldr	r1, [pc, #640]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b10:	e040      	b.n	8006b94 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d023      	beq.n	8006b62 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b1a:	4b9c      	ldr	r3, [pc, #624]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a9b      	ldr	r2, [pc, #620]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b26:	f7fb f821 	bl	8001b6c <HAL_GetTick>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b2e:	f7fb f81d 	bl	8001b6c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e22e      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b40:	4b92      	ldr	r3, [pc, #584]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b4c:	4b8f      	ldr	r3, [pc, #572]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	061b      	lsls	r3, r3, #24
 8006b5a:	498c      	ldr	r1, [pc, #560]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60cb      	str	r3, [r1, #12]
 8006b60:	e018      	b.n	8006b94 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b62:	4b8a      	ldr	r3, [pc, #552]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a89      	ldr	r2, [pc, #548]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fa fffd 	bl	8001b6c <HAL_GetTick>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b76:	f7fa fff9 	bl	8001b6c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e20a      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b88:	4b80      	ldr	r3, [pc, #512]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d036      	beq.n	8006c0e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d019      	beq.n	8006bdc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba8:	4b78      	ldr	r3, [pc, #480]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bac:	4a77      	ldr	r2, [pc, #476]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb4:	f7fa ffda 	bl	8001b6c <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fa ffd6 	bl	8001b6c <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e1e7      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bce:	4b6f      	ldr	r3, [pc, #444]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x360>
 8006bda:	e018      	b.n	8006c0e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bdc:	4b6b      	ldr	r3, [pc, #428]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be0:	4a6a      	ldr	r2, [pc, #424]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fa ffc0 	bl	8001b6c <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bf0:	f7fa ffbc 	bl	8001b6c <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e1cd      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c02:	4b62      	ldr	r3, [pc, #392]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d036      	beq.n	8006c88 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d019      	beq.n	8006c56 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c22:	4b5a      	ldr	r3, [pc, #360]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a59      	ldr	r2, [pc, #356]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c2e:	f7fa ff9d 	bl	8001b6c <HAL_GetTick>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c36:	f7fa ff99 	bl	8001b6c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e1aa      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c48:	4b50      	ldr	r3, [pc, #320]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x3da>
 8006c54:	e018      	b.n	8006c88 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c56:	4b4d      	ldr	r3, [pc, #308]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a4c      	ldr	r2, [pc, #304]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c62:	f7fa ff83 	bl	8001b6c <HAL_GetTick>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c6a:	f7fa ff7f 	bl	8001b6c <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e190      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c7c:	4b43      	ldr	r3, [pc, #268]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1f0      	bne.n	8006c6a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8085 	beq.w	8006da0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c96:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <HAL_RCC_OscConfig+0x534>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <HAL_RCC_OscConfig+0x534>)
 8006c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ca2:	f7fa ff63 	bl	8001b6c <HAL_GetTick>
 8006ca6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006caa:	f7fa ff5f 	bl	8001b6c <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b64      	cmp	r3, #100	; 0x64
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e170      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cbc:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <HAL_RCC_OscConfig+0x534>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d106      	bne.n	8006cde <HAL_RCC_OscConfig+0x482>
 8006cd0:	4b2e      	ldr	r3, [pc, #184]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	6713      	str	r3, [r2, #112]	; 0x70
 8006cdc:	e02d      	b.n	8006d3a <HAL_RCC_OscConfig+0x4de>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10c      	bne.n	8006d00 <HAL_RCC_OscConfig+0x4a4>
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf2:	4b26      	ldr	r3, [pc, #152]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4a25      	ldr	r2, [pc, #148]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006cf8:	f023 0304 	bic.w	r3, r3, #4
 8006cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006cfe:	e01c      	b.n	8006d3a <HAL_RCC_OscConfig+0x4de>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d10c      	bne.n	8006d22 <HAL_RCC_OscConfig+0x4c6>
 8006d08:	4b20      	ldr	r3, [pc, #128]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d0e:	f043 0304 	orr.w	r3, r3, #4
 8006d12:	6713      	str	r3, [r2, #112]	; 0x70
 8006d14:	4b1d      	ldr	r3, [pc, #116]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d18:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d20:	e00b      	b.n	8006d3a <HAL_RCC_OscConfig+0x4de>
 8006d22:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2e:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d015      	beq.n	8006d6e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d42:	f7fa ff13 	bl	8001b6c <HAL_GetTick>
 8006d46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d48:	e00a      	b.n	8006d60 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fa ff0f 	bl	8001b6c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e11e      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <HAL_RCC_OscConfig+0x530>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ee      	beq.n	8006d4a <HAL_RCC_OscConfig+0x4ee>
 8006d6c:	e018      	b.n	8006da0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fa fefd 	bl	8001b6c <HAL_GetTick>
 8006d72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d74:	e00e      	b.n	8006d94 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d76:	f7fa fef9 	bl	8001b6c <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d905      	bls.n	8006d94 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e108      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d94:	4b84      	ldr	r3, [pc, #528]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1ea      	bne.n	8006d76 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80f9 	beq.w	8006f9c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006daa:	4b7f      	ldr	r3, [pc, #508]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db2:	2b18      	cmp	r3, #24
 8006db4:	f000 80b4 	beq.w	8006f20 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	f040 8095 	bne.w	8006eec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc2:	4b79      	ldr	r3, [pc, #484]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a78      	ldr	r2, [pc, #480]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dce:	f7fa fecd 	bl	8001b6c <HAL_GetTick>
 8006dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd6:	f7fa fec9 	bl	8001b6c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e0da      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006de8:	4b6f      	ldr	r3, [pc, #444]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1f0      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df4:	4b6c      	ldr	r3, [pc, #432]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df8:	4b6c      	ldr	r3, [pc, #432]	; (8006fac <HAL_RCC_OscConfig+0x750>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e04:	0112      	lsls	r2, r2, #4
 8006e06:	430a      	orrs	r2, r1
 8006e08:	4967      	ldr	r1, [pc, #412]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	628b      	str	r3, [r1, #40]	; 0x28
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	3b01      	subs	r3, #1
 8006e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	025b      	lsls	r3, r3, #9
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	3b01      	subs	r3, #1
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e3e:	495a      	ldr	r1, [pc, #360]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e44:	4b58      	ldr	r3, [pc, #352]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	4a57      	ldr	r2, [pc, #348]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e50:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e54:	4b56      	ldr	r3, [pc, #344]	; (8006fb0 <HAL_RCC_OscConfig+0x754>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e5c:	00d2      	lsls	r2, r2, #3
 8006e5e:	4952      	ldr	r1, [pc, #328]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e64:	4b50      	ldr	r3, [pc, #320]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	f023 020c 	bic.w	r2, r3, #12
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	494d      	ldr	r1, [pc, #308]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e76:	4b4c      	ldr	r3, [pc, #304]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	f023 0202 	bic.w	r2, r3, #2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	4949      	ldr	r1, [pc, #292]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e88:	4b47      	ldr	r3, [pc, #284]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a46      	ldr	r2, [pc, #280]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e94:	4b44      	ldr	r3, [pc, #272]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	4a43      	ldr	r2, [pc, #268]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ea0:	4b41      	ldr	r3, [pc, #260]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4a40      	ldr	r2, [pc, #256]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006eac:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a3d      	ldr	r2, [pc, #244]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb8:	4b3b      	ldr	r3, [pc, #236]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a3a      	ldr	r2, [pc, #232]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fa fe52 	bl	8001b6c <HAL_GetTick>
 8006ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ecc:	f7fa fe4e 	bl	8001b6c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e05f      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ede:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f0      	beq.n	8006ecc <HAL_RCC_OscConfig+0x670>
 8006eea:	e057      	b.n	8006f9c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eec:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef8:	f7fa fe38 	bl	8001b6c <HAL_GetTick>
 8006efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f00:	f7fa fe34 	bl	8001b6c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e045      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f12:	4b25      	ldr	r3, [pc, #148]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f0      	bne.n	8006f00 <HAL_RCC_OscConfig+0x6a4>
 8006f1e:	e03d      	b.n	8006f9c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f20:	4b21      	ldr	r3, [pc, #132]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f26:	4b20      	ldr	r3, [pc, #128]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d031      	beq.n	8006f98 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f003 0203 	and.w	r2, r3, #3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d12a      	bne.n	8006f98 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d122      	bne.n	8006f98 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d11a      	bne.n	8006f98 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	0a5b      	lsrs	r3, r3, #9
 8006f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d111      	bne.n	8006f98 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	0c1b      	lsrs	r3, r3, #16
 8006f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d108      	bne.n	8006f98 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3730      	adds	r7, #48	; 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	fffffc0c 	.word	0xfffffc0c
 8006fb0:	ffff0007 	.word	0xffff0007

08006fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e19c      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b8a      	ldr	r3, [pc, #552]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d910      	bls.n	8006ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b87      	ldr	r3, [pc, #540]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 020f 	bic.w	r2, r3, #15
 8006fde:	4985      	ldr	r1, [pc, #532]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b83      	ldr	r3, [pc, #524]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e184      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	4b7b      	ldr	r3, [pc, #492]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007010:	429a      	cmp	r2, r3
 8007012:	d908      	bls.n	8007026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007014:	4b78      	ldr	r3, [pc, #480]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4975      	ldr	r1, [pc, #468]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007022:	4313      	orrs	r3, r2
 8007024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d010      	beq.n	8007054 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	4b70      	ldr	r3, [pc, #448]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800703e:	429a      	cmp	r2, r3
 8007040:	d908      	bls.n	8007054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007042:	4b6d      	ldr	r3, [pc, #436]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	496a      	ldr	r1, [pc, #424]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007050:	4313      	orrs	r3, r2
 8007052:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	4b64      	ldr	r3, [pc, #400]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800706c:	429a      	cmp	r2, r3
 800706e:	d908      	bls.n	8007082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007070:	4b61      	ldr	r3, [pc, #388]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	495e      	ldr	r1, [pc, #376]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 800707e:	4313      	orrs	r3, r2
 8007080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d010      	beq.n	80070b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800709a:	429a      	cmp	r2, r3
 800709c:	d908      	bls.n	80070b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800709e:	4b56      	ldr	r3, [pc, #344]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	4953      	ldr	r1, [pc, #332]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	4b4d      	ldr	r3, [pc, #308]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d908      	bls.n	80070de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070cc:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f023 020f 	bic.w	r2, r3, #15
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4947      	ldr	r1, [pc, #284]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d055      	beq.n	8007196 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070ea:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	4940      	ldr	r1, [pc, #256]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d107      	bne.n	8007114 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007104:	4b3c      	ldr	r3, [pc, #240]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d121      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0f6      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d107      	bne.n	800712c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800711c:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d115      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0ea      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d107      	bne.n	8007144 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007134:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0de      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007144:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e0d6      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007154:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f023 0207 	bic.w	r2, r3, #7
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4925      	ldr	r1, [pc, #148]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007162:	4313      	orrs	r3, r2
 8007164:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007166:	f7fa fd01 	bl	8001b6c <HAL_GetTick>
 800716a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716c:	e00a      	b.n	8007184 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716e:	f7fa fcfd 	bl	8001b6c <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	; 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e0be      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007184:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	429a      	cmp	r2, r3
 8007194:	d1eb      	bne.n	800716e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d208      	bcs.n	80071c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071b2:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f023 020f 	bic.w	r2, r3, #15
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	490e      	ldr	r1, [pc, #56]	; (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d214      	bcs.n	80071fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f023 020f 	bic.w	r2, r3, #15
 80071da:	4906      	ldr	r1, [pc, #24]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	4313      	orrs	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e2:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e086      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
 80071f4:	52002000 	.word	0x52002000
 80071f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	4b3f      	ldr	r3, [pc, #252]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007214:	429a      	cmp	r2, r3
 8007216:	d208      	bcs.n	800722a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007218:	4b3c      	ldr	r3, [pc, #240]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4939      	ldr	r1, [pc, #228]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 8007226:	4313      	orrs	r3, r2
 8007228:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d010      	beq.n	8007258 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	4b34      	ldr	r3, [pc, #208]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007242:	429a      	cmp	r2, r3
 8007244:	d208      	bcs.n	8007258 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007246:	4b31      	ldr	r3, [pc, #196]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	492e      	ldr	r1, [pc, #184]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 8007254:	4313      	orrs	r3, r2
 8007256:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699a      	ldr	r2, [r3, #24]
 8007268:	4b28      	ldr	r3, [pc, #160]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007270:	429a      	cmp	r2, r3
 8007272:	d208      	bcs.n	8007286 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	4922      	ldr	r1, [pc, #136]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 8007282:	4313      	orrs	r3, r2
 8007284:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d010      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69da      	ldr	r2, [r3, #28]
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800729e:	429a      	cmp	r2, r3
 80072a0:	d208      	bcs.n	80072b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072a2:	4b1a      	ldr	r3, [pc, #104]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	4917      	ldr	r1, [pc, #92]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072b4:	f000 f834 	bl	8007320 <HAL_RCC_GetSysClockFreq>
 80072b8:	4602      	mov	r2, r0
 80072ba:	4b14      	ldr	r3, [pc, #80]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	4912      	ldr	r1, [pc, #72]	; (8007310 <HAL_RCC_ClockConfig+0x35c>)
 80072c6:	5ccb      	ldrb	r3, [r1, r3]
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
 80072d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <HAL_RCC_ClockConfig+0x358>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	4a0d      	ldr	r2, [pc, #52]	; (8007310 <HAL_RCC_ClockConfig+0x35c>)
 80072dc:	5cd3      	ldrb	r3, [r2, r3]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
 80072e8:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <HAL_RCC_ClockConfig+0x360>)
 80072ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ec:	4a0a      	ldr	r2, [pc, #40]	; (8007318 <HAL_RCC_ClockConfig+0x364>)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <HAL_RCC_ClockConfig+0x368>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fa fbee 	bl	8001ad8 <HAL_InitTick>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	0800d330 	.word	0x0800d330
 8007314:	24000424 	.word	0x24000424
 8007318:	24000420 	.word	0x24000420
 800731c:	2400040c 	.word	0x2400040c

08007320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	; 0x24
 8007324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007326:	4bb3      	ldr	r3, [pc, #716]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800732e:	2b18      	cmp	r3, #24
 8007330:	f200 8155 	bhi.w	80075de <HAL_RCC_GetSysClockFreq+0x2be>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	080073a1 	.word	0x080073a1
 8007340:	080075df 	.word	0x080075df
 8007344:	080075df 	.word	0x080075df
 8007348:	080075df 	.word	0x080075df
 800734c:	080075df 	.word	0x080075df
 8007350:	080075df 	.word	0x080075df
 8007354:	080075df 	.word	0x080075df
 8007358:	080075df 	.word	0x080075df
 800735c:	080073c7 	.word	0x080073c7
 8007360:	080075df 	.word	0x080075df
 8007364:	080075df 	.word	0x080075df
 8007368:	080075df 	.word	0x080075df
 800736c:	080075df 	.word	0x080075df
 8007370:	080075df 	.word	0x080075df
 8007374:	080075df 	.word	0x080075df
 8007378:	080075df 	.word	0x080075df
 800737c:	080073cd 	.word	0x080073cd
 8007380:	080075df 	.word	0x080075df
 8007384:	080075df 	.word	0x080075df
 8007388:	080075df 	.word	0x080075df
 800738c:	080075df 	.word	0x080075df
 8007390:	080075df 	.word	0x080075df
 8007394:	080075df 	.word	0x080075df
 8007398:	080075df 	.word	0x080075df
 800739c:	080073d3 	.word	0x080073d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a0:	4b94      	ldr	r3, [pc, #592]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073ac:	4b91      	ldr	r3, [pc, #580]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	08db      	lsrs	r3, r3, #3
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	4a90      	ldr	r2, [pc, #576]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
 80073bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80073be:	e111      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073c0:	4b8d      	ldr	r3, [pc, #564]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073c2:	61bb      	str	r3, [r7, #24]
    break;
 80073c4:	e10e      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80073c6:	4b8d      	ldr	r3, [pc, #564]	; (80075fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073c8:	61bb      	str	r3, [r7, #24]
    break;
 80073ca:	e10b      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80073cc:	4b8c      	ldr	r3, [pc, #560]	; (8007600 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073ce:	61bb      	str	r3, [r7, #24]
    break;
 80073d0:	e108      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073d2:	4b88      	ldr	r3, [pc, #544]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80073dc:	4b85      	ldr	r3, [pc, #532]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	091b      	lsrs	r3, r3, #4
 80073e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073e8:	4b82      	ldr	r3, [pc, #520]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073f2:	4b80      	ldr	r3, [pc, #512]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80e1 	beq.w	80075d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b02      	cmp	r3, #2
 800741a:	f000 8083 	beq.w	8007524 <HAL_RCC_GetSysClockFreq+0x204>
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b02      	cmp	r3, #2
 8007422:	f200 80a1 	bhi.w	8007568 <HAL_RCC_GetSysClockFreq+0x248>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x114>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d056      	beq.n	80074e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007432:	e099      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007434:	4b6f      	ldr	r3, [pc, #444]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02d      	beq.n	800749c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007440:	4b6c      	ldr	r3, [pc, #432]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	08db      	lsrs	r3, r3, #3
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	4a6b      	ldr	r2, [pc, #428]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
 8007450:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746a:	4b62      	ldr	r3, [pc, #392]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	ed97 6a02 	vldr	s12, [r7, #8]
 800747e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800749a:	e087      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007608 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ae:	4b51      	ldr	r3, [pc, #324]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074be:	ed97 6a02 	vldr	s12, [r7, #8]
 80074c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007604 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074de:	e065      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800760c <HAL_RCC_GetSysClockFreq+0x2ec>
 80074ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f2:	4b40      	ldr	r3, [pc, #256]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007502:	ed97 6a02 	vldr	s12, [r7, #8]
 8007506:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800750a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007522:	e043      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007610 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007536:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007546:	ed97 6a02 	vldr	s12, [r7, #8]
 800754a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800754e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007566:	e021      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	eddf 6a26 	vldr	s13, [pc, #152]	; 800760c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757a:	4b1e      	ldr	r3, [pc, #120]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758a:	ed97 6a02 	vldr	s12, [r7, #8]
 800758e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800759e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	0a5b      	lsrs	r3, r3, #9
 80075b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b6:	3301      	adds	r3, #1
 80075b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d0:	ee17 3a90 	vmov	r3, s15
 80075d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80075d6:	e005      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
    break;
 80075dc:	e002      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075e0:	61bb      	str	r3, [r7, #24]
    break;
 80075e2:	bf00      	nop
  }

  return sysclockfreq;
 80075e4:	69bb      	ldr	r3, [r7, #24]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3724      	adds	r7, #36	; 0x24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
 80075f8:	03d09000 	.word	0x03d09000
 80075fc:	003d0900 	.word	0x003d0900
 8007600:	017d7840 	.word	0x017d7840
 8007604:	46000000 	.word	0x46000000
 8007608:	4c742400 	.word	0x4c742400
 800760c:	4a742400 	.word	0x4a742400
 8007610:	4bbebc20 	.word	0x4bbebc20

08007614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800761a:	f7ff fe81 	bl	8007320 <HAL_RCC_GetSysClockFreq>
 800761e:	4602      	mov	r2, r0
 8007620:	4b10      	ldr	r3, [pc, #64]	; (8007664 <HAL_RCC_GetHCLKFreq+0x50>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	0a1b      	lsrs	r3, r3, #8
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	490f      	ldr	r1, [pc, #60]	; (8007668 <HAL_RCC_GetHCLKFreq+0x54>)
 800762c:	5ccb      	ldrb	r3, [r1, r3]
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <HAL_RCC_GetHCLKFreq+0x50>)
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	4a09      	ldr	r2, [pc, #36]	; (8007668 <HAL_RCC_GetHCLKFreq+0x54>)
 8007642:	5cd3      	ldrb	r3, [r2, r3]
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	4a07      	ldr	r2, [pc, #28]	; (800766c <HAL_RCC_GetHCLKFreq+0x58>)
 8007650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007652:	4a07      	ldr	r2, [pc, #28]	; (8007670 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <HAL_RCC_GetHCLKFreq+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	58024400 	.word	0x58024400
 8007668:	0800d330 	.word	0x0800d330
 800766c:	24000424 	.word	0x24000424
 8007670:	24000420 	.word	0x24000420

08007674 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800767c:	2300      	movs	r3, #0
 800767e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007680:	2300      	movs	r3, #0
 8007682:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d03f      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007694:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007698:	d02a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800769a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800769e:	d824      	bhi.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076a4:	d018      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076aa:	d81e      	bhi.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80076b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076b4:	d007      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80076b6:	e018      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b8:	4bab      	ldr	r3, [pc, #684]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4aaa      	ldr	r2, [pc, #680]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076c4:	e015      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3304      	adds	r3, #4
 80076ca:	2102      	movs	r1, #2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 feff 	bl	80094d0 <RCCEx_PLL2_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076d6:	e00c      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3324      	adds	r3, #36	; 0x24
 80076dc:	2102      	movs	r1, #2
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 ffa8 	bl	8009634 <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076e8:	e003      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
      break;
 80076ee:	e000      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80076f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80076f8:	4b9b      	ldr	r3, [pc, #620]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007704:	4998      	ldr	r1, [pc, #608]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007706:	4313      	orrs	r3, r2
 8007708:	650b      	str	r3, [r1, #80]	; 0x50
 800770a:	e001      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007718:	2b00      	cmp	r3, #0
 800771a:	d03d      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	2b04      	cmp	r3, #4
 8007722:	d826      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007741 	.word	0x08007741
 8007730:	0800774f 	.word	0x0800774f
 8007734:	08007761 	.word	0x08007761
 8007738:	08007779 	.word	0x08007779
 800773c:	08007779 	.word	0x08007779
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007740:	4b89      	ldr	r3, [pc, #548]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007744:	4a88      	ldr	r2, [pc, #544]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800774a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800774c:	e015      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3304      	adds	r3, #4
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f001 febb 	bl	80094d0 <RCCEx_PLL2_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800775e:	e00c      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3324      	adds	r3, #36	; 0x24
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f001 ff64 	bl	8009634 <RCCEx_PLL3_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007770:	e003      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
      break;
 8007776:	e000      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007780:	4b79      	ldr	r3, [pc, #484]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007784:	f023 0207 	bic.w	r2, r3, #7
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	4976      	ldr	r1, [pc, #472]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800778e:	4313      	orrs	r3, r2
 8007790:	650b      	str	r3, [r1, #80]	; 0x50
 8007792:	e001      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d051      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077aa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80077ae:	d036      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80077b0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80077b4:	d830      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80077b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077ba:	d032      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80077bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077c0:	d82a      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80077c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077c6:	d02e      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80077c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077cc:	d824      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80077ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d2:	d018      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80077d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d8:	d81e      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80077de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e2:	d007      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80077e4:	e018      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e6:	4b60      	ldr	r3, [pc, #384]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	4a5f      	ldr	r2, [pc, #380]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077f2:	e019      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3304      	adds	r3, #4
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 fe68 	bl	80094d0 <RCCEx_PLL2_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007804:	e010      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3324      	adds	r3, #36	; 0x24
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f001 ff11 	bl	8009634 <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007816:	e007      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
      break;
 800781c:	e004      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800781e:	bf00      	nop
 8007820:	e002      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007822:	bf00      	nop
 8007824:	e000      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800782e:	4b4e      	ldr	r3, [pc, #312]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800783c:	494a      	ldr	r1, [pc, #296]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800783e:	4313      	orrs	r3, r2
 8007840:	658b      	str	r3, [r1, #88]	; 0x58
 8007842:	e001      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007850:	2b00      	cmp	r3, #0
 8007852:	d051      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800785a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800785e:	d036      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007860:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007864:	d830      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800786a:	d032      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800786c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007870:	d82a      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007876:	d02e      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800787c:	d824      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800787e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007882:	d018      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007888:	d81e      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800788e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007892:	d007      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007894:	e018      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007896:	4b34      	ldr	r3, [pc, #208]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	4a33      	ldr	r2, [pc, #204]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800789c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078a2:	e019      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fe10 	bl	80094d0 <RCCEx_PLL2_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078b4:	e010      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3324      	adds	r3, #36	; 0x24
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 feb9 	bl	8009634 <RCCEx_PLL3_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078c6:	e007      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
      break;
 80078cc:	e004      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80078ce:	bf00      	nop
 80078d0:	e002      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80078d2:	bf00      	nop
 80078d4:	e000      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80078d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10a      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80078de:	4b22      	ldr	r3, [pc, #136]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078ec:	491e      	ldr	r1, [pc, #120]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	658b      	str	r3, [r1, #88]	; 0x58
 80078f2:	e001      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d035      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007908:	2b30      	cmp	r3, #48	; 0x30
 800790a:	d01c      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800790c:	2b30      	cmp	r3, #48	; 0x30
 800790e:	d817      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007910:	2b20      	cmp	r3, #32
 8007912:	d00c      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007914:	2b20      	cmp	r3, #32
 8007916:	d813      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d016      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800791c:	2b10      	cmp	r3, #16
 800791e:	d10f      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007920:	4b11      	ldr	r3, [pc, #68]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	4a10      	ldr	r2, [pc, #64]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800792a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800792c:	e00e      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	2102      	movs	r1, #2
 8007934:	4618      	mov	r0, r3
 8007936:	f001 fdcb 	bl	80094d0 <RCCEx_PLL2_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800793e:	e005      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	e002      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800794a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10c      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007956:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	4902      	ldr	r1, [pc, #8]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007960:	4313      	orrs	r3, r2
 8007962:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007964:	e004      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d047      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007984:	d030      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800798a:	d82a      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800798c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007990:	d02c      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007996:	d824      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799c:	d018      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800799e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a2:	d81e      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80079a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ac:	d007      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80079ae:	e018      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4bac      	ldr	r3, [pc, #688]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4aab      	ldr	r2, [pc, #684]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079bc:	e017      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3304      	adds	r3, #4
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 fd83 	bl	80094d0 <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079ce:	e00e      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3324      	adds	r3, #36	; 0x24
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fe2c 	bl	8009634 <RCCEx_PLL3_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079e0:	e005      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
      break;
 80079e6:	e002      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80079e8:	bf00      	nop
 80079ea:	e000      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80079ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079f4:	4b9b      	ldr	r3, [pc, #620]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	4998      	ldr	r1, [pc, #608]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	650b      	str	r3, [r1, #80]	; 0x50
 8007a06:	e001      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d049      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a20:	d02e      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007a22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a26:	d828      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a2c:	d02a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a32:	d822      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a38:	d026      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007a3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a3e:	d81c      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a44:	d010      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a4a:	d816      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01d      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a54:	d111      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fd37 	bl	80094d0 <RCCEx_PLL2_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a66:	e012      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3324      	adds	r3, #36	; 0x24
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f001 fde0 	bl	8009634 <RCCEx_PLL3_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a78:	e009      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7e:	e006      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007a80:	bf00      	nop
 8007a82:	e004      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007a84:	bf00      	nop
 8007a86:	e002      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e000      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a94:	4b73      	ldr	r3, [pc, #460]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa0:	4970      	ldr	r1, [pc, #448]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8007aa6:	e001      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d04b      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac2:	d02e      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac8:	d828      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ace:	d02a      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d822      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ada:	d026      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007adc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ae0:	d81c      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae6:	d010      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aec:	d816      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01d      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af6:	d111      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	2101      	movs	r1, #1
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 fce6 	bl	80094d0 <RCCEx_PLL2_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007b08:	e012      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4618      	mov	r0, r3
 8007b12:	f001 fd8f 	bl	8009634 <RCCEx_PLL3_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007b1a:	e009      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b36:	4b4b      	ldr	r3, [pc, #300]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b44:	4947      	ldr	r1, [pc, #284]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	658b      	str	r3, [r1, #88]	; 0x58
 8007b4a:	e001      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d02f      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b64:	d00e      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b6a:	d814      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d015      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b74:	d10f      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b76:	4b3b      	ldr	r3, [pc, #236]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a3a      	ldr	r2, [pc, #232]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b82:	e00c      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fca0 	bl	80094d0 <RCCEx_PLL2_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b94:	e003      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ba4:	4b2f      	ldr	r3, [pc, #188]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb0:	492c      	ldr	r1, [pc, #176]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	650b      	str	r3, [r1, #80]	; 0x50
 8007bb6:	e001      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d032      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d81b      	bhi.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007c0f 	.word	0x08007c0f
 8007bdc:	08007be9 	.word	0x08007be9
 8007be0:	08007bf7 	.word	0x08007bf7
 8007be4:	08007c0f 	.word	0x08007c0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007bf4:	e00c      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	2102      	movs	r1, #2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 fc67 	bl	80094d0 <RCCEx_PLL2_Config>
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007c06:	e003      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1a:	f023 0203 	bic.w	r2, r3, #3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c22:	4910      	ldr	r1, [pc, #64]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c28:	e001      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 808a 	beq.w	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c48:	f7f9 ff90 	bl	8001b6c <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c4e:	e00d      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c50:	f7f9 ff8c 	bl	8001b6c <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b64      	cmp	r3, #100	; 0x64
 8007c5c:	d906      	bls.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	75fb      	strb	r3, [r7, #23]
        break;
 8007c62:	e009      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007c64:	58024400 	.word	0x58024400
 8007c68:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c6c:	4bb9      	ldr	r3, [pc, #740]	; (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0eb      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d166      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c7e:	4bb6      	ldr	r3, [pc, #728]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c88:	4053      	eors	r3, r2
 8007c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c92:	4bb1      	ldr	r3, [pc, #708]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c9c:	4bae      	ldr	r3, [pc, #696]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca0:	4aad      	ldr	r2, [pc, #692]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ca6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ca8:	4bab      	ldr	r3, [pc, #684]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cac:	4aaa      	ldr	r2, [pc, #680]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cb4:	4aa8      	ldr	r2, [pc, #672]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc4:	d115      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc6:	f7f9 ff51 	bl	8001b6c <HAL_GetTick>
 8007cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ccc:	e00b      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cce:	f7f9 ff4d 	bl	8001b6c <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d902      	bls.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ce4:	e005      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ce6:	4b9c      	ldr	r3, [pc, #624]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0ed      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d126      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d06:	d10d      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007d08:	4b93      	ldr	r3, [pc, #588]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d16:	0919      	lsrs	r1, r3, #4
 8007d18:	4b90      	ldr	r3, [pc, #576]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	498e      	ldr	r1, [pc, #568]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	610b      	str	r3, [r1, #16]
 8007d22:	e005      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007d24:	4b8c      	ldr	r3, [pc, #560]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	4a8b      	ldr	r2, [pc, #556]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d2e:	6113      	str	r3, [r2, #16]
 8007d30:	4b89      	ldr	r3, [pc, #548]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d3e:	4986      	ldr	r1, [pc, #536]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	670b      	str	r3, [r1, #112]	; 0x70
 8007d44:	e004      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	75bb      	strb	r3, [r7, #22]
 8007d4a:	e001      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d07e      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d60:	2b28      	cmp	r3, #40	; 0x28
 8007d62:	d867      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007e3b 	.word	0x08007e3b
 8007d70:	08007e35 	.word	0x08007e35
 8007d74:	08007e35 	.word	0x08007e35
 8007d78:	08007e35 	.word	0x08007e35
 8007d7c:	08007e35 	.word	0x08007e35
 8007d80:	08007e35 	.word	0x08007e35
 8007d84:	08007e35 	.word	0x08007e35
 8007d88:	08007e35 	.word	0x08007e35
 8007d8c:	08007e11 	.word	0x08007e11
 8007d90:	08007e35 	.word	0x08007e35
 8007d94:	08007e35 	.word	0x08007e35
 8007d98:	08007e35 	.word	0x08007e35
 8007d9c:	08007e35 	.word	0x08007e35
 8007da0:	08007e35 	.word	0x08007e35
 8007da4:	08007e35 	.word	0x08007e35
 8007da8:	08007e35 	.word	0x08007e35
 8007dac:	08007e23 	.word	0x08007e23
 8007db0:	08007e35 	.word	0x08007e35
 8007db4:	08007e35 	.word	0x08007e35
 8007db8:	08007e35 	.word	0x08007e35
 8007dbc:	08007e35 	.word	0x08007e35
 8007dc0:	08007e35 	.word	0x08007e35
 8007dc4:	08007e35 	.word	0x08007e35
 8007dc8:	08007e35 	.word	0x08007e35
 8007dcc:	08007e3b 	.word	0x08007e3b
 8007dd0:	08007e35 	.word	0x08007e35
 8007dd4:	08007e35 	.word	0x08007e35
 8007dd8:	08007e35 	.word	0x08007e35
 8007ddc:	08007e35 	.word	0x08007e35
 8007de0:	08007e35 	.word	0x08007e35
 8007de4:	08007e35 	.word	0x08007e35
 8007de8:	08007e35 	.word	0x08007e35
 8007dec:	08007e3b 	.word	0x08007e3b
 8007df0:	08007e35 	.word	0x08007e35
 8007df4:	08007e35 	.word	0x08007e35
 8007df8:	08007e35 	.word	0x08007e35
 8007dfc:	08007e35 	.word	0x08007e35
 8007e00:	08007e35 	.word	0x08007e35
 8007e04:	08007e35 	.word	0x08007e35
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	08007e3b 	.word	0x08007e3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	2101      	movs	r1, #1
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fb5a 	bl	80094d0 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007e20:	e00c      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3324      	adds	r3, #36	; 0x24
 8007e26:	2101      	movs	r1, #1
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 fc03 	bl	8009634 <RCCEx_PLL3_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
      break;
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e42:	4b45      	ldr	r3, [pc, #276]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e4e:	4942      	ldr	r1, [pc, #264]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	654b      	str	r3, [r1, #84]	; 0x54
 8007e54:	e001      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d037      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d820      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007eb7 	.word	0x08007eb7
 8007e78:	08007e8d 	.word	0x08007e8d
 8007e7c:	08007e9f 	.word	0x08007e9f
 8007e80:	08007eb7 	.word	0x08007eb7
 8007e84:	08007eb7 	.word	0x08007eb7
 8007e88:	08007eb7 	.word	0x08007eb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	2101      	movs	r1, #1
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fb1c 	bl	80094d0 <RCCEx_PLL2_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007e9c:	e00c      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3324      	adds	r3, #36	; 0x24
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 fbc5 	bl	8009634 <RCCEx_PLL3_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007eae:	e003      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb4:	e000      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ebe:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec2:	f023 0207 	bic.w	r2, r3, #7
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	4923      	ldr	r1, [pc, #140]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	654b      	str	r3, [r1, #84]	; 0x54
 8007ed0:	e001      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d040      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee8:	2b05      	cmp	r3, #5
 8007eea:	d821      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007eec:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef2:	bf00      	nop
 8007ef4:	08007f37 	.word	0x08007f37
 8007ef8:	08007f0d 	.word	0x08007f0d
 8007efc:	08007f1f 	.word	0x08007f1f
 8007f00:	08007f37 	.word	0x08007f37
 8007f04:	08007f37 	.word	0x08007f37
 8007f08:	08007f37 	.word	0x08007f37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	2101      	movs	r1, #1
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fadc 	bl	80094d0 <RCCEx_PLL2_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f1c:	e00c      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3324      	adds	r3, #36	; 0x24
 8007f22:	2101      	movs	r1, #1
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fb85 	bl	8009634 <RCCEx_PLL3_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
      break;
 8007f34:	e000      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d110      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f42:	f023 0207 	bic.w	r2, r3, #7
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f4c:	4902      	ldr	r1, [pc, #8]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	658b      	str	r3, [r1, #88]	; 0x58
 8007f52:	e007      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007f54:	58024800 	.word	0x58024800
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d04b      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f7a:	d02e      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f80:	d828      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f86:	d02a      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8c:	d822      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f92:	d026      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f98:	d81c      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9e:	d010      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa4:	d816      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01d      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fae:	d111      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fa8a 	bl	80094d0 <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007fc0:	e012      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3324      	adds	r3, #36	; 0x24
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 fb33 	bl	8009634 <RCCEx_PLL3_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007fd2:	e009      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007fda:	bf00      	nop
 8007fdc:	e004      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fee:	4bb2      	ldr	r3, [pc, #712]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffc:	49ae      	ldr	r1, [pc, #696]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	654b      	str	r3, [r1, #84]	; 0x54
 8008002:	e001      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d04b      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800801a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800801e:	d02e      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008020:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008024:	d828      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802a:	d02a      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800802c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008030:	d822      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008036:	d026      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800803c:	d81c      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800803e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008042:	d010      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008048:	d816      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01d      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800804e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008052:	d111      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fa38 	bl	80094d0 <RCCEx_PLL2_Config>
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008064:	e012      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3324      	adds	r3, #36	; 0x24
 800806a:	2102      	movs	r1, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f001 fae1 	bl	8009634 <RCCEx_PLL3_Config>
 8008072:	4603      	mov	r3, r0
 8008074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008076:	e009      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	e006      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800807e:	bf00      	nop
 8008080:	e004      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008082:	bf00      	nop
 8008084:	e002      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008086:	bf00      	nop
 8008088:	e000      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800808a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008092:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080a0:	4985      	ldr	r1, [pc, #532]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	658b      	str	r3, [r1, #88]	; 0x58
 80080a6:	e001      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d04b      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080c2:	d02e      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80080c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080c8:	d828      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80080ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ce:	d02a      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80080d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d4:	d822      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80080d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080da:	d026      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80080dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080e0:	d81c      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80080e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080e6:	d010      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80080e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ec:	d816      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01d      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80080f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f6:	d111      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 f9e6 	bl	80094d0 <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008108:	e012      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	2102      	movs	r1, #2
 8008110:	4618      	mov	r0, r3
 8008112:	f001 fa8f 	bl	8009634 <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800811a:	e009      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
      break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008122:	bf00      	nop
 8008124:	e004      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800812e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008136:	4b60      	ldr	r3, [pc, #384]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008144:	495c      	ldr	r1, [pc, #368]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008146:	4313      	orrs	r3, r2
 8008148:	658b      	str	r3, [r1, #88]	; 0x58
 800814a:	e001      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d018      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008164:	d10a      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3324      	adds	r3, #36	; 0x24
 800816a:	2102      	movs	r1, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fa61 	bl	8009634 <RCCEx_PLL3_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800817c:	4b4e      	ldr	r3, [pc, #312]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800817e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008188:	494b      	ldr	r1, [pc, #300]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800818a:	4313      	orrs	r3, r2
 800818c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01a      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a4:	d10a      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3324      	adds	r3, #36	; 0x24
 80081aa:	2102      	movs	r1, #2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 fa41 	bl	8009634 <RCCEx_PLL3_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081bc:	4b3e      	ldr	r3, [pc, #248]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80081be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ca:	493b      	ldr	r1, [pc, #236]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d034      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e6:	d01d      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80081e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ec:	d817      	bhi.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80081f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f6:	d009      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081f8:	e011      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3304      	adds	r3, #4
 80081fe:	2100      	movs	r1, #0
 8008200:	4618      	mov	r0, r3
 8008202:	f001 f965 	bl	80094d0 <RCCEx_PLL2_Config>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800820a:	e00c      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3324      	adds	r3, #36	; 0x24
 8008210:	2102      	movs	r1, #2
 8008212:	4618      	mov	r0, r3
 8008214:	f001 fa0e 	bl	8009634 <RCCEx_PLL3_Config>
 8008218:	4603      	mov	r3, r0
 800821a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800821c:	e003      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]
      break;
 8008222:	e000      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800822c:	4b22      	ldr	r3, [pc, #136]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800823a:	491f      	ldr	r1, [pc, #124]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800823c:	4313      	orrs	r3, r2
 800823e:	658b      	str	r3, [r1, #88]	; 0x58
 8008240:	e001      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d036      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800825c:	d01c      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800825e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008262:	d816      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008268:	d003      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800826a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800826e:	d007      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008270:	e00f      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008272:	4b11      	ldr	r3, [pc, #68]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008276:	4a10      	ldr	r2, [pc, #64]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800827c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800827e:	e00c      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3324      	adds	r3, #36	; 0x24
 8008284:	2101      	movs	r1, #1
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f9d4 	bl	8009634 <RCCEx_PLL3_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008290:	e003      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	75fb      	strb	r3, [r7, #23]
      break;
 8008296:	e000      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10d      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ae:	4902      	ldr	r1, [pc, #8]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	654b      	str	r3, [r1, #84]	; 0x54
 80082b4:	e004      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80082b6:	bf00      	nop
 80082b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d029      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80082d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d8:	d007      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80082da:	e00f      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082dc:	4b61      	ldr	r3, [pc, #388]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	4a60      	ldr	r2, [pc, #384]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082e8:	e00b      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3304      	adds	r3, #4
 80082ee:	2102      	movs	r1, #2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f8ed 	bl	80094d0 <RCCEx_PLL2_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082fa:	e002      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d109      	bne.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008308:	4b56      	ldr	r3, [pc, #344]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800830a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008314:	4953      	ldr	r1, [pc, #332]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008316:	4313      	orrs	r3, r2
 8008318:	64cb      	str	r3, [r1, #76]	; 0x4c
 800831a:	e001      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	2102      	movs	r1, #2
 8008332:	4618      	mov	r0, r3
 8008334:	f001 f97e 	bl	8009634 <RCCEx_PLL3_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d030      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008356:	d017      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800835c:	d811      	bhi.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800835e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008362:	d013      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008368:	d80b      	bhi.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d010      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800836e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008372:	d106      	bne.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008374:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a3a      	ldr	r2, [pc, #232]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008380:	e007      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
      break;
 8008386:	e004      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008388:	bf00      	nop
 800838a:	e002      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800838c:	bf00      	nop
 800838e:	e000      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008398:	4b32      	ldr	r3, [pc, #200]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800839a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a4:	492f      	ldr	r1, [pc, #188]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	654b      	str	r3, [r1, #84]	; 0x54
 80083aa:	e001      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d008      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083bc:	4b29      	ldr	r3, [pc, #164]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c8:	4926      	ldr	r1, [pc, #152]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d008      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083da:	4b22      	ldr	r3, [pc, #136]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e6:	491f      	ldr	r1, [pc, #124]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00d      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083f8:	4b1a      	ldr	r3, [pc, #104]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	4a19      	ldr	r2, [pc, #100]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008402:	6113      	str	r3, [r2, #16]
 8008404:	4b17      	ldr	r3, [pc, #92]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800840e:	4915      	ldr	r1, [pc, #84]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008410:	4313      	orrs	r3, r2
 8008412:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	da08      	bge.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800841c:	4b11      	ldr	r3, [pc, #68]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800841e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008420:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008428:	490e      	ldr	r1, [pc, #56]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800842a:	4313      	orrs	r3, r2
 800842c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800843a:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800843c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008448:	4906      	ldr	r1, [pc, #24]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800844a:	4313      	orrs	r3, r2
 800844c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800844e:	7dbb      	ldrb	r3, [r7, #22]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e000      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400

08008468 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b090      	sub	sp, #64	; 0x40
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008476:	f040 8089 	bne.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800847a:	4b95      	ldr	r3, [pc, #596]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800847c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	633b      	str	r3, [r7, #48]	; 0x30
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2b04      	cmp	r3, #4
 8008488:	d87d      	bhi.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084a5 	.word	0x080084a5
 8008494:	080084c9 	.word	0x080084c9
 8008498:	080084ed 	.word	0x080084ed
 800849c:	08008581 	.word	0x08008581
 80084a0:	08008511 	.word	0x08008511

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084a4:	4b8a      	ldr	r3, [pc, #552]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084b0:	d107      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 feb8 	bl	800922c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084c0:	e3ed      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c6:	e3ea      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084c8:	4b81      	ldr	r3, [pc, #516]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084d4:	d107      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d6:	f107 0318 	add.w	r3, r7, #24
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fbfe 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084e4:	e3db      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ea:	e3d8      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ec:	4b78      	ldr	r3, [pc, #480]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f8:	d107      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd40 	bl	8008f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008508:	e3c9      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800850e:	e3c6      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008510:	4b6f      	ldr	r3, [pc, #444]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008518:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800851a:	4b6d      	ldr	r3, [pc, #436]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b04      	cmp	r3, #4
 8008524:	d10c      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	2b00      	cmp	r3, #0
 800852a:	d109      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800852c:	4b68      	ldr	r3, [pc, #416]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	08db      	lsrs	r3, r3, #3
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	4a67      	ldr	r2, [pc, #412]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853e:	e01e      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008540:	4b63      	ldr	r3, [pc, #396]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854c:	d106      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008554:	d102      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008556:	4b60      	ldr	r3, [pc, #384]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855a:	e010      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800855c:	4b5c      	ldr	r3, [pc, #368]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008568:	d106      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800856a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008570:	d102      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008572:	4b5a      	ldr	r3, [pc, #360]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008576:	e002      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800857c:	e38f      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800857e:	e38e      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008580:	4b57      	ldr	r3, [pc, #348]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008584:	e38b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800858a:	e388      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008592:	f040 80a7 	bne.w	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008596:	4b4e      	ldr	r3, [pc, #312]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800859e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085a6:	d054      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ae:	f200 808b 	bhi.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085b8:	f000 8083 	beq.w	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085c2:	f200 8081 	bhi.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085cc:	d02f      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085d4:	d878      	bhi.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085e2:	d012      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80085e4:	e070      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085e6:	4b3a      	ldr	r3, [pc, #232]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f2:	d107      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fe17 	bl	800922c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008602:	e34c      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008608:	e349      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800860a:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008616:	d107      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008618:	f107 0318 	add.w	r3, r7, #24
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fb5d 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008626:	e33a      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800862c:	e337      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800862e:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800863a:	d107      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800863c:	f107 030c 	add.w	r3, r7, #12
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fc9f 	bl	8008f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800864a:	e328      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008650:	e325      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008652:	4b1f      	ldr	r3, [pc, #124]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800865a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800865c:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b04      	cmp	r3, #4
 8008666:	d10c      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	2b00      	cmp	r3, #0
 800866c:	d109      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800866e:	4b18      	ldr	r3, [pc, #96]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	4a16      	ldr	r2, [pc, #88]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008680:	e01e      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008682:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800868e:	d106      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008696:	d102      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800869c:	e010      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800869e:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086aa:	d106      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086b2:	d102      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80086b4:	4b09      	ldr	r3, [pc, #36]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b8:	e002      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086be:	e2ee      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80086c0:	e2ed      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086c2:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086c6:	e2ea      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086cc:	e2e7      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80086ce:	bf00      	nop
 80086d0:	58024400 	.word	0x58024400
 80086d4:	03d09000 	.word	0x03d09000
 80086d8:	003d0900 	.word	0x003d0900
 80086dc:	017d7840 	.word	0x017d7840
 80086e0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ea:	f040 809c 	bne.w	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80086ee:	4b9e      	ldr	r3, [pc, #632]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80086f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086fe:	d054      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008706:	f200 808b 	bhi.w	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008710:	f000 8083 	beq.w	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800871a:	f200 8081 	bhi.w	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008724:	d02f      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872c:	d878      	bhi.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800873a:	d012      	beq.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800873c:	e070      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800873e:	4b8a      	ldr	r3, [pc, #552]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800874a:	d107      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800874c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fd6b 	bl	800922c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800875a:	e2a0      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008760:	e29d      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008762:	4b81      	ldr	r3, [pc, #516]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800876a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800876e:	d107      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008770:	f107 0318 	add.w	r3, r7, #24
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fab1 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800877e:	e28e      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008784:	e28b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008786:	4b78      	ldr	r3, [pc, #480]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800878e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008792:	d107      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fbf3 	bl	8008f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087a2:	e27c      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a8:	e279      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087aa:	4b6f      	ldr	r3, [pc, #444]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087b4:	4b6c      	ldr	r3, [pc, #432]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d10c      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d109      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087c6:	4b68      	ldr	r3, [pc, #416]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	4a66      	ldr	r2, [pc, #408]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80087d2:	fa22 f303 	lsr.w	r3, r2, r3
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d8:	e01e      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087da:	4b63      	ldr	r3, [pc, #396]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e6:	d106      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ee:	d102      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087f0:	4b5f      	ldr	r3, [pc, #380]	; (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f4:	e010      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087f6:	4b5c      	ldr	r3, [pc, #368]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008802:	d106      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880a:	d102      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800880c:	4b59      	ldr	r3, [pc, #356]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008810:	e002      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008816:	e242      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008818:	e241      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800881a:	4b57      	ldr	r3, [pc, #348]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800881e:	e23e      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008824:	e23b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882c:	f040 80a6 	bne.w	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008830:	4b4d      	ldr	r3, [pc, #308]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008834:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008838:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008840:	d054      	beq.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008848:	f200 808b 	bhi.w	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008852:	f000 8083 	beq.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800885c:	f200 8081 	bhi.w	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008866:	d02f      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800886e:	d878      	bhi.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887c:	d012      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800887e:	e070      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008880:	4b39      	ldr	r3, [pc, #228]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800888c:	d107      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fcca 	bl	800922c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800889c:	e1ff      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a2:	e1fc      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a4:	4b30      	ldr	r3, [pc, #192]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b2:	f107 0318 	add.w	r3, r7, #24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fa10 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088c0:	e1ed      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c6:	e1ea      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088c8:	4b27      	ldr	r3, [pc, #156]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d4:	d107      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d6:	f107 030c 	add.w	r3, r7, #12
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fb52 	bl	8008f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088e4:	e1db      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088ea:	e1d8      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088ec:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088f6:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0304 	and.w	r3, r3, #4
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d10c      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008908:	4b17      	ldr	r3, [pc, #92]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a16      	ldr	r2, [pc, #88]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891a:	e01e      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008928:	d106      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008930:	d102      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008932:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008936:	e010      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008938:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008944:	d106      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008952:	e002      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008958:	e1a1      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800895a:	e1a0      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008960:	e19d      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008966:	e19a      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008968:	58024400 	.word	0x58024400
 800896c:	03d09000 	.word	0x03d09000
 8008970:	003d0900 	.word	0x003d0900
 8008974:	017d7840 	.word	0x017d7840
 8008978:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008982:	d173      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008984:	4b9a      	ldr	r3, [pc, #616]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800898c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008994:	d02f      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800899c:	d863      	bhi.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089aa:	d012      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80089ac:	e05b      	b.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ae:	4b90      	ldr	r3, [pc, #576]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ba:	d107      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089bc:	f107 0318 	add.w	r3, r7, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 f98b 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ca:	e168      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d0:	e165      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089d2:	4b87      	ldr	r3, [pc, #540]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089de:	d107      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e0:	f107 030c 	add.w	r3, r7, #12
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 facd 	bl	8008f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ee:	e156      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f4:	e153      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089f6:	4b7e      	ldr	r3, [pc, #504]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a00:	4b7b      	ldr	r3, [pc, #492]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a12:	4b77      	ldr	r3, [pc, #476]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	08db      	lsrs	r3, r3, #3
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	4a75      	ldr	r2, [pc, #468]	; (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a24:	e01e      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a26:	4b72      	ldr	r3, [pc, #456]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a32:	d106      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a3a:	d102      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a3c:	4b6e      	ldr	r3, [pc, #440]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a40:	e010      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a42:	4b6b      	ldr	r3, [pc, #428]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a4e:	d106      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a56:	d102      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a58:	4b68      	ldr	r3, [pc, #416]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a5c:	e002      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a62:	e11c      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a64:	e11b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6a:	e118      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a72:	d133      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008a74:	4b5e      	ldr	r3, [pc, #376]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8a:	d012      	beq.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008a8c:	e023      	b.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a8e:	4b58      	ldr	r3, [pc, #352]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a9a:	d107      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fbc3 	bl	800922c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aaa:	e0f8      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab0:	e0f5      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ab2:	4b4f      	ldr	r3, [pc, #316]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008abe:	d107      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac0:	f107 0318 	add.w	r3, r7, #24
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f909 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ace:	e0e6      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ad4:	e0e3      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ada:	e0e0      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae2:	f040 808d 	bne.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008ae6:	4b42      	ldr	r3, [pc, #264]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008aee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008af6:	d06b      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008afe:	d874      	bhi.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b06:	d056      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0e:	d86c      	bhi.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b16:	d03b      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b1e:	d864      	bhi.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b26:	d021      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b2e:	d85c      	bhi.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b3c:	d004      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008b3e:	e054      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b40:	f000 f8b6 	bl	8008cb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b44:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008b46:	e0aa      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b48:	4b29      	ldr	r3, [pc, #164]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b54:	d107      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b56:	f107 0318 	add.w	r3, r7, #24
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f8be 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b64:	e09b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b6a:	e098      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b6c:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b78:	d107      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b7a:	f107 030c 	add.w	r3, r7, #12
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fa00 	bl	8008f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b88:	e089      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8e:	e086      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b90:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d109      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b9c:	4b14      	ldr	r3, [pc, #80]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a13      	ldr	r2, [pc, #76]	; (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bae:	e076      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb4:	e073      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bb6:	4b0e      	ldr	r3, [pc, #56]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc2:	d102      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bc8:	e069      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bce:	e066      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bdc:	d102      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008bde:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008be2:	e05c      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be8:	e059      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bee:	e056      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008bf0:	58024400 	.word	0x58024400
 8008bf4:	03d09000 	.word	0x03d09000
 8008bf8:	003d0900 	.word	0x003d0900
 8008bfc:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c06:	d148      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008c08:	4b27      	ldr	r3, [pc, #156]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c18:	d02a      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c20:	d838      	bhi.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d004      	beq.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c2e:	d00d      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008c30:	e030      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c32:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c3e:	d102      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008c40:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c44:	e02b      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4a:	e028      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c4c:	4b16      	ldr	r3, [pc, #88]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c58:	d107      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fae4 	bl	800922c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c68:	e019      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6e:	e016      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c7c:	d107      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7e:	f107 0318 	add.w	r3, r7, #24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f82a 	bl	8008cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c8c:	e007      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c92:	e004      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c98:	e001      	b.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3740      	adds	r7, #64	; 0x40
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	017d7840 	.word	0x017d7840

08008cb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cb4:	f7fe fcae 	bl	8007614 <HAL_RCC_GetHCLKFreq>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	091b      	lsrs	r3, r3, #4
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	4904      	ldr	r1, [pc, #16]	; (8008cd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cc6:	5ccb      	ldrb	r3, [r1, r3]
 8008cc8:	f003 031f 	and.w	r3, r3, #31
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	58024400 	.word	0x58024400
 8008cd8:	0800d330 	.word	0x0800d330

08008cdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b089      	sub	sp, #36	; 0x24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ce4:	4ba1      	ldr	r3, [pc, #644]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	f003 0303 	and.w	r3, r3, #3
 8008cec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008cee:	4b9f      	ldr	r3, [pc, #636]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	0b1b      	lsrs	r3, r3, #12
 8008cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008cfa:	4b9c      	ldr	r3, [pc, #624]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	091b      	lsrs	r3, r3, #4
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d06:	4b99      	ldr	r3, [pc, #612]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	fb02 f303 	mul.w	r3, r2, r3
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8111 	beq.w	8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	f000 8083 	beq.w	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	f200 80a1 	bhi.w	8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d056      	beq.n	8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d46:	e099      	b.n	8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d48:	4b88      	ldr	r3, [pc, #544]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d02d      	beq.n	8008db0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d54:	4b85      	ldr	r3, [pc, #532]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	08db      	lsrs	r3, r3, #3
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	4a84      	ldr	r2, [pc, #528]	; (8008f70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7e:	4b7b      	ldr	r3, [pc, #492]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008dae:	e087      	b.n	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b6a      	ldr	r3, [pc, #424]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008df2:	e065      	b.n	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b59      	ldr	r3, [pc, #356]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e36:	e043      	b.n	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b48      	ldr	r3, [pc, #288]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e7a:	e021      	b.n	8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b37      	ldr	r3, [pc, #220]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ebe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	0a5b      	lsrs	r3, r3, #9
 8008ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee6:	ee17 2a90 	vmov	r2, s15
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008eee:	4b1f      	ldr	r3, [pc, #124]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	0c1b      	lsrs	r3, r3, #16
 8008ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef8:	ee07 3a90 	vmov	s15, r3
 8008efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f14:	ee17 2a90 	vmov	r2, s15
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f1c:	4b13      	ldr	r3, [pc, #76]	; (8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	0e1b      	lsrs	r3, r3, #24
 8008f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f42:	ee17 2a90 	vmov	r2, s15
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f4a:	e008      	b.n	8008f5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	609a      	str	r2, [r3, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	3724      	adds	r7, #36	; 0x24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	58024400 	.word	0x58024400
 8008f70:	03d09000 	.word	0x03d09000
 8008f74:	46000000 	.word	0x46000000
 8008f78:	4c742400 	.word	0x4c742400
 8008f7c:	4a742400 	.word	0x4a742400
 8008f80:	4bbebc20 	.word	0x4bbebc20

08008f84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b089      	sub	sp, #36	; 0x24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f8c:	4ba1      	ldr	r3, [pc, #644]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f96:	4b9f      	ldr	r3, [pc, #636]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9a:	0d1b      	lsrs	r3, r3, #20
 8008f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fa2:	4b9c      	ldr	r3, [pc, #624]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008fae:	4b99      	ldr	r3, [pc, #612]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	08db      	lsrs	r3, r3, #3
 8008fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8111 	beq.w	80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	f000 8083 	beq.w	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	f200 80a1 	bhi.w	8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d056      	beq.n	800909c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fee:	e099      	b.n	8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff0:	4b88      	ldr	r3, [pc, #544]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d02d      	beq.n	8009058 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ffc:	4b85      	ldr	r3, [pc, #532]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	08db      	lsrs	r3, r3, #3
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	4a84      	ldr	r2, [pc, #528]	; (8009218 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009008:	fa22 f303 	lsr.w	r3, r2, r3
 800900c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009026:	4b7b      	ldr	r3, [pc, #492]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009036:	ed97 6a03 	vldr	s12, [r7, #12]
 800903a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800921c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800903e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800904a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009052:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009056:	e087      	b.n	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009220 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906a:	4b6a      	ldr	r3, [pc, #424]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907a:	ed97 6a03 	vldr	s12, [r7, #12]
 800907e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800921c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800909a:	e065      	b.n	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ae:	4b59      	ldr	r3, [pc, #356]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800921c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090de:	e043      	b.n	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f2:	4b48      	ldr	r3, [pc, #288]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009102:	ed97 6a03 	vldr	s12, [r7, #12]
 8009106:	eddf 5a45 	vldr	s11, [pc, #276]	; 800921c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800910a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009122:	e021      	b.n	8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b37      	ldr	r3, [pc, #220]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a03 	vldr	s12, [r7, #12]
 800914a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800921c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009166:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009168:	4b2a      	ldr	r3, [pc, #168]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800916a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916c:	0a5b      	lsrs	r3, r3, #9
 800916e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800917e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009182:	edd7 6a07 	vldr	s13, [r7, #28]
 8009186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800918a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800918e:	ee17 2a90 	vmov	r2, s15
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009196:	4b1f      	ldr	r3, [pc, #124]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	0c1b      	lsrs	r3, r3, #16
 800919c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091bc:	ee17 2a90 	vmov	r2, s15
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091c4:	4b13      	ldr	r3, [pc, #76]	; (8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c8:	0e1b      	lsrs	r3, r3, #24
 80091ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091de:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ea:	ee17 2a90 	vmov	r2, s15
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091f2:	e008      	b.n	8009206 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	609a      	str	r2, [r3, #8]
}
 8009206:	bf00      	nop
 8009208:	3724      	adds	r7, #36	; 0x24
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	58024400 	.word	0x58024400
 8009218:	03d09000 	.word	0x03d09000
 800921c:	46000000 	.word	0x46000000
 8009220:	4c742400 	.word	0x4c742400
 8009224:	4a742400 	.word	0x4a742400
 8009228:	4bbebc20 	.word	0x4bbebc20

0800922c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800922c:	b480      	push	{r7}
 800922e:	b089      	sub	sp, #36	; 0x24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009234:	4ba0      	ldr	r3, [pc, #640]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800923e:	4b9e      	ldr	r3, [pc, #632]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	091b      	lsrs	r3, r3, #4
 8009244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009248:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800924a:	4b9b      	ldr	r3, [pc, #620]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009254:	4b98      	ldr	r3, [pc, #608]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	ee07 3a90 	vmov	s15, r3
 8009268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8111 	beq.w	800949a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b02      	cmp	r3, #2
 800927c:	f000 8083 	beq.w	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	2b02      	cmp	r3, #2
 8009284:	f200 80a1 	bhi.w	80093ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d056      	beq.n	8009342 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009294:	e099      	b.n	80093ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009296:	4b88      	ldr	r3, [pc, #544]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d02d      	beq.n	80092fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092a2:	4b85      	ldr	r3, [pc, #532]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	08db      	lsrs	r3, r3, #3
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	4a83      	ldr	r2, [pc, #524]	; (80094bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	ee07 3a90 	vmov	s15, r3
 80092ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092cc:	4b7a      	ldr	r3, [pc, #488]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092fc:	e087      	b.n	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009308:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800930c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009310:	4b69      	ldr	r3, [pc, #420]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009318:	ee07 3a90 	vmov	s15, r3
 800931c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009320:	ed97 6a03 	vldr	s12, [r7, #12]
 8009324:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009340:	e065      	b.n	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009354:	4b58      	ldr	r3, [pc, #352]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009364:	ed97 6a03 	vldr	s12, [r7, #12]
 8009368:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800936c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009380:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009384:	e043      	b.n	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009390:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009398:	4b47      	ldr	r3, [pc, #284]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093c8:	e021      	b.n	800940e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093dc:	4b36      	ldr	r3, [pc, #216]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009408:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800940c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800940e:	4b2a      	ldr	r3, [pc, #168]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	0a5b      	lsrs	r3, r3, #9
 8009414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009418:	ee07 3a90 	vmov	s15, r3
 800941c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009428:	edd7 6a07 	vldr	s13, [r7, #28]
 800942c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009434:	ee17 2a90 	vmov	r2, s15
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800943c:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800943e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009440:	0c1b      	lsrs	r3, r3, #16
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009456:	edd7 6a07 	vldr	s13, [r7, #28]
 800945a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009462:	ee17 2a90 	vmov	r2, s15
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800946a:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946e:	0e1b      	lsrs	r3, r3, #24
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009484:	edd7 6a07 	vldr	s13, [r7, #28]
 8009488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009490:	ee17 2a90 	vmov	r2, s15
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009498:	e008      	b.n	80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	609a      	str	r2, [r3, #8]
}
 80094ac:	bf00      	nop
 80094ae:	3724      	adds	r7, #36	; 0x24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	58024400 	.word	0x58024400
 80094bc:	03d09000 	.word	0x03d09000
 80094c0:	46000000 	.word	0x46000000
 80094c4:	4c742400 	.word	0x4c742400
 80094c8:	4a742400 	.word	0x4a742400
 80094cc:	4bbebc20 	.word	0x4bbebc20

080094d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094de:	4b53      	ldr	r3, [pc, #332]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d101      	bne.n	80094ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e099      	b.n	8009622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80094ee:	4b4f      	ldr	r3, [pc, #316]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a4e      	ldr	r2, [pc, #312]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80094f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094fa:	f7f8 fb37 	bl	8001b6c <HAL_GetTick>
 80094fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009500:	e008      	b.n	8009514 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009502:	f7f8 fb33 	bl	8001b6c <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d901      	bls.n	8009514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e086      	b.n	8009622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009514:	4b45      	ldr	r3, [pc, #276]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f0      	bne.n	8009502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009520:	4b42      	ldr	r3, [pc, #264]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	031b      	lsls	r3, r3, #12
 800952e:	493f      	ldr	r1, [pc, #252]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009530:	4313      	orrs	r3, r2
 8009532:	628b      	str	r3, [r1, #40]	; 0x28
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	3b01      	subs	r3, #1
 800953a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	3b01      	subs	r3, #1
 8009544:	025b      	lsls	r3, r3, #9
 8009546:	b29b      	uxth	r3, r3
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	3b01      	subs	r3, #1
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	3b01      	subs	r3, #1
 800955e:	061b      	lsls	r3, r3, #24
 8009560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009564:	4931      	ldr	r1, [pc, #196]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009566:	4313      	orrs	r3, r2
 8009568:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800956a:	4b30      	ldr	r3, [pc, #192]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	492d      	ldr	r1, [pc, #180]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009578:	4313      	orrs	r3, r2
 800957a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800957c:	4b2b      	ldr	r3, [pc, #172]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	f023 0220 	bic.w	r2, r3, #32
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	4928      	ldr	r1, [pc, #160]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 800958a:	4313      	orrs	r3, r2
 800958c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800958e:	4b27      	ldr	r3, [pc, #156]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	4a26      	ldr	r2, [pc, #152]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009594:	f023 0310 	bic.w	r3, r3, #16
 8009598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800959a:	4b24      	ldr	r3, [pc, #144]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 800959c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800959e:	4b24      	ldr	r3, [pc, #144]	; (8009630 <RCCEx_PLL2_Config+0x160>)
 80095a0:	4013      	ands	r3, r2
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	69d2      	ldr	r2, [r2, #28]
 80095a6:	00d2      	lsls	r2, r2, #3
 80095a8:	4920      	ldr	r1, [pc, #128]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095ae:	4b1f      	ldr	r3, [pc, #124]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	4a1e      	ldr	r2, [pc, #120]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095b4:	f043 0310 	orr.w	r3, r3, #16
 80095b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095c0:	4b1a      	ldr	r3, [pc, #104]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	4a19      	ldr	r2, [pc, #100]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095cc:	e00f      	b.n	80095ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d106      	bne.n	80095e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095d4:	4b15      	ldr	r3, [pc, #84]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	4a14      	ldr	r2, [pc, #80]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095e0:	e005      	b.n	80095ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e6:	4a11      	ldr	r2, [pc, #68]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80095ee:	4b0f      	ldr	r3, [pc, #60]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a0e      	ldr	r2, [pc, #56]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 80095f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095fa:	f7f8 fab7 	bl	8001b6c <HAL_GetTick>
 80095fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009600:	e008      	b.n	8009614 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009602:	f7f8 fab3 	bl	8001b6c <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d901      	bls.n	8009614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e006      	b.n	8009622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009614:	4b05      	ldr	r3, [pc, #20]	; (800962c <RCCEx_PLL2_Config+0x15c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0f0      	beq.n	8009602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	58024400 	.word	0x58024400
 8009630:	ffff0007 	.word	0xffff0007

08009634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009642:	4b53      	ldr	r3, [pc, #332]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	2b03      	cmp	r3, #3
 800964c:	d101      	bne.n	8009652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e099      	b.n	8009786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009652:	4b4f      	ldr	r3, [pc, #316]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a4e      	ldr	r2, [pc, #312]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800965c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800965e:	f7f8 fa85 	bl	8001b6c <HAL_GetTick>
 8009662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009664:	e008      	b.n	8009678 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009666:	f7f8 fa81 	bl	8001b6c <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d901      	bls.n	8009678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e086      	b.n	8009786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009678:	4b45      	ldr	r3, [pc, #276]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1f0      	bne.n	8009666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009684:	4b42      	ldr	r3, [pc, #264]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	051b      	lsls	r3, r3, #20
 8009692:	493f      	ldr	r1, [pc, #252]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009694:	4313      	orrs	r3, r2
 8009696:	628b      	str	r3, [r1, #40]	; 0x28
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	3b01      	subs	r3, #1
 800969e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	025b      	lsls	r3, r3, #9
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	041b      	lsls	r3, r3, #16
 80096b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	061b      	lsls	r3, r3, #24
 80096c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096c8:	4931      	ldr	r1, [pc, #196]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096ce:	4b30      	ldr	r3, [pc, #192]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	492d      	ldr	r1, [pc, #180]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80096e0:	4b2b      	ldr	r3, [pc, #172]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	4928      	ldr	r1, [pc, #160]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80096f2:	4b27      	ldr	r3, [pc, #156]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a26      	ldr	r2, [pc, #152]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 80096f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096fe:	4b24      	ldr	r3, [pc, #144]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009702:	4b24      	ldr	r3, [pc, #144]	; (8009794 <RCCEx_PLL3_Config+0x160>)
 8009704:	4013      	ands	r3, r2
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	69d2      	ldr	r2, [r2, #28]
 800970a:	00d2      	lsls	r2, r2, #3
 800970c:	4920      	ldr	r1, [pc, #128]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800970e:	4313      	orrs	r3, r2
 8009710:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009712:	4b1f      	ldr	r3, [pc, #124]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800971c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d106      	bne.n	8009732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	4a19      	ldr	r2, [pc, #100]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800972a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800972e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009730:	e00f      	b.n	8009752 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d106      	bne.n	8009746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	4a14      	ldr	r2, [pc, #80]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800973e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009744:	e005      	b.n	8009752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009746:	4b12      	ldr	r3, [pc, #72]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	4a11      	ldr	r2, [pc, #68]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800974c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009752:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a0e      	ldr	r2, [pc, #56]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 8009758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800975e:	f7f8 fa05 	bl	8001b6c <HAL_GetTick>
 8009762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009764:	e008      	b.n	8009778 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009766:	f7f8 fa01 	bl	8001b6c <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d901      	bls.n	8009778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e006      	b.n	8009786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <RCCEx_PLL3_Config+0x15c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0f0      	beq.n	8009766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	58024400 	.word	0x58024400
 8009794:	ffff0007 	.word	0xffff0007

08009798 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d904      	bls.n	80097b6 <HAL_SAI_InitProtocol+0x1e>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	3b03      	subs	r3, #3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d812      	bhi.n	80097da <HAL_SAI_InitProtocol+0x42>
 80097b4:	e008      	b.n	80097c8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 fb7b 	bl	8009eb8 <SAI_InitI2S>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e00b      	b.n	80097e0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fc24 	bl	800a01c <SAI_InitPCM>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]
      break;
 80097d8:	e002      	b.n	80097e0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
      break;
 80097de:	bf00      	nop
  }

  if (status == HAL_OK)
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f808 	bl	80097fc <HAL_SAI_Init>
 80097ec:	4603      	mov	r3, r0
 80097ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08a      	sub	sp, #40	; 0x28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e1fb      	b.n	8009c06 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009814:	2b01      	cmp	r3, #1
 8009816:	d113      	bne.n	8009840 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a96      	ldr	r2, [pc, #600]	; (8009a78 <HAL_SAI_Init+0x27c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d004      	beq.n	800982c <HAL_SAI_Init+0x30>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a95      	ldr	r2, [pc, #596]	; (8009a7c <HAL_SAI_Init+0x280>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d107      	bne.n	800983c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009830:	2b01      	cmp	r3, #1
 8009832:	d103      	bne.n	800983c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e1e2      	b.n	8009c06 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a8c      	ldr	r2, [pc, #560]	; (8009a78 <HAL_SAI_Init+0x27c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d004      	beq.n	8009854 <HAL_SAI_Init+0x58>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a8c      	ldr	r2, [pc, #560]	; (8009a80 <HAL_SAI_Init+0x284>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d102      	bne.n	800985a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8009854:	4b8b      	ldr	r3, [pc, #556]	; (8009a84 <HAL_SAI_Init+0x288>)
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	e00e      	b.n	8009878 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a87      	ldr	r2, [pc, #540]	; (8009a7c <HAL_SAI_Init+0x280>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d004      	beq.n	800986e <HAL_SAI_Init+0x72>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a87      	ldr	r2, [pc, #540]	; (8009a88 <HAL_SAI_Init+0x28c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d102      	bne.n	8009874 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800986e:	4b87      	ldr	r3, [pc, #540]	; (8009a8c <HAL_SAI_Init+0x290>)
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	e001      	b.n	8009878 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e1c6      	b.n	8009c06 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 f9cb 	bl	800ac28 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fc7c 	bl	800a190 <SAI_Disable>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e1b1      	b.n	8009c06 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2202      	movs	r2, #2
 80098a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d00c      	beq.n	80098cc <HAL_SAI_Init+0xd0>
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d80d      	bhi.n	80098d2 <HAL_SAI_Init+0xd6>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <HAL_SAI_Init+0xc4>
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d003      	beq.n	80098c6 <HAL_SAI_Init+0xca>
 80098be:	e008      	b.n	80098d2 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098c4:	e008      	b.n	80098d8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80098c6:	2310      	movs	r3, #16
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098ca:	e005      	b.n	80098d8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80098cc:	2320      	movs	r3, #32
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098d0:	e002      	b.n	80098d8 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098d6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b05      	cmp	r3, #5
 80098de:	d822      	bhi.n	8009926 <HAL_SAI_Init+0x12a>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <HAL_SAI_Init+0xec>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	08009901 	.word	0x08009901
 80098ec:	08009907 	.word	0x08009907
 80098f0:	0800990f 	.word	0x0800990f
 80098f4:	08009927 	.word	0x08009927
 80098f8:	08009927 	.word	0x08009927
 80098fc:	08009917 	.word	0x08009917
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]
      break;
 8009904:	e012      	b.n	800992c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800990a:	61fb      	str	r3, [r7, #28]
      break;
 800990c:	e00e      	b.n	800992c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800990e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009912:	61fb      	str	r3, [r7, #28]
      break;
 8009914:	e00a      	b.n	800992c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800991a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	f043 0303 	orr.w	r3, r3, #3
 8009922:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009924:	e002      	b.n	800992c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
      break;
 800992a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009930:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8084 	beq.w	8009a44 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a4c      	ldr	r2, [pc, #304]	; (8009a78 <HAL_SAI_Init+0x27c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d004      	beq.n	8009954 <HAL_SAI_Init+0x158>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a4c      	ldr	r2, [pc, #304]	; (8009a80 <HAL_SAI_Init+0x284>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d104      	bne.n	800995e <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009954:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009958:	f7fe fd86 	bl	8008468 <HAL_RCCEx_GetPeriphCLKFreq>
 800995c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a46      	ldr	r2, [pc, #280]	; (8009a7c <HAL_SAI_Init+0x280>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d104      	bne.n	8009972 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009968:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800996c:	f7fe fd7c 	bl	8008468 <HAL_RCCEx_GetPeriphCLKFreq>
 8009970:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a44      	ldr	r2, [pc, #272]	; (8009a88 <HAL_SAI_Init+0x28c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d104      	bne.n	8009986 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800997c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009980:	f7fe fd72 	bl	8008468 <HAL_RCCEx_GetPeriphCLKFreq>
 8009984:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800998e:	d120      	bne.n	80099d2 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009994:	2b04      	cmp	r3, #4
 8009996:	d102      	bne.n	800999e <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	e00a      	b.n	80099b4 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	2b08      	cmp	r3, #8
 80099a4:	d103      	bne.n	80099ae <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80099a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e002      	b.n	80099b4 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4619      	mov	r1, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e017      	b.n	8009a02 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099da:	d101      	bne.n	80099e0 <HAL_SAI_Init+0x1e4>
 80099dc:	2302      	movs	r3, #2
 80099de:	e000      	b.n	80099e2 <HAL_SAI_Init+0x1e6>
 80099e0:	2301      	movs	r3, #1
 80099e2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	4619      	mov	r1, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	fb02 f303 	mul.w	r3, r2, r3
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a00:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4a22      	ldr	r2, [pc, #136]	; (8009a90 <HAL_SAI_Init+0x294>)
 8009a06:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0a:	08da      	lsrs	r2, r3, #3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009a10:	6939      	ldr	r1, [r7, #16]
 8009a12:	4b1f      	ldr	r3, [pc, #124]	; (8009a90 <HAL_SAI_Init+0x294>)
 8009a14:	fba3 2301 	umull	r2, r3, r3, r1
 8009a18:	08da      	lsrs	r2, r3, #3
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	1aca      	subs	r2, r1, r3
 8009a24:	2a08      	cmp	r2, #8
 8009a26:	d904      	bls.n	8009a32 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d104      	bne.n	8009a44 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	085a      	lsrs	r2, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_SAI_Init+0x258>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d109      	bne.n	8009a68 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d101      	bne.n	8009a60 <HAL_SAI_Init+0x264>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e001      	b.n	8009a64 <HAL_SAI_Init+0x268>
 8009a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a64:	623b      	str	r3, [r7, #32]
 8009a66:	e017      	b.n	8009a98 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d111      	bne.n	8009a94 <HAL_SAI_Init+0x298>
 8009a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a74:	e00f      	b.n	8009a96 <HAL_SAI_Init+0x29a>
 8009a76:	bf00      	nop
 8009a78:	40015804 	.word	0x40015804
 8009a7c:	58005404 	.word	0x58005404
 8009a80:	40015824 	.word	0x40015824
 8009a84:	40015800 	.word	0x40015800
 8009a88:	58005424 	.word	0x58005424
 8009a8c:	58005400 	.word	0x58005400
 8009a90:	cccccccd 	.word	0xcccccccd
 8009a94:	2300      	movs	r3, #0
 8009a96:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b5b      	ldr	r3, [pc, #364]	; (8009c10 <HAL_SAI_Init+0x414>)
 8009aa4:	400b      	ands	r3, r1
 8009aa6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6819      	ldr	r1, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009abc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009ad0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009adc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	051b      	lsls	r3, r3, #20
 8009ae4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009aea:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6859      	ldr	r1, [r3, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b43      	ldr	r3, [pc, #268]	; (8009c14 <HAL_SAI_Init+0x418>)
 8009b06:	400b      	ands	r3, r1
 8009b08:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6859      	ldr	r1, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6899      	ldr	r1, [r3, #8]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <HAL_SAI_Init+0x41c>)
 8009b34:	400b      	ands	r3, r1
 8009b36:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6899      	ldr	r1, [r3, #8]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b48:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009b4e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009b54:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009b5e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68d9      	ldr	r1, [r3, #12]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009b76:	400b      	ands	r3, r1
 8009b78:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68d9      	ldr	r1, [r3, #12]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b88:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b90:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b96:	3b01      	subs	r3, #1
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1c      	ldr	r2, [pc, #112]	; (8009c1c <HAL_SAI_Init+0x420>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d004      	beq.n	8009bb8 <HAL_SAI_Init+0x3bc>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_SAI_Init+0x424>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d119      	bne.n	8009bec <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbc:	f023 0201 	bic.w	r2, r3, #1
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d10e      	bne.n	8009bec <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be4:	f043 0201 	orr.w	r2, r3, #1
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3728      	adds	r7, #40	; 0x28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	f005c010 	.word	0xf005c010
 8009c14:	ffff1ff0 	.word	0xffff1ff0
 8009c18:	fff88000 	.word	0xfff88000
 8009c1c:	40015804 	.word	0x40015804
 8009c20:	58005404 	.word	0x58005404

08009c24 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009c32:	f7f7 ff9b 	bl	8001b6c <HAL_GetTick>
 8009c36:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_SAI_Transmit_DMA+0x20>
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e098      	b.n	8009d7a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	f040 8091 	bne.w	8009d78 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_SAI_Transmit_DMA+0x40>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e08a      	b.n	8009d7a <HAL_SAI_Transmit_DMA+0x156>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	88fa      	ldrh	r2, [r7, #6]
 8009c76:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	88fa      	ldrh	r2, [r7, #6]
 8009c7e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2212      	movs	r2, #18
 8009c8e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c98:	4a3a      	ldr	r2, [pc, #232]	; (8009d84 <HAL_SAI_Transmit_DMA+0x160>)
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca2:	4a39      	ldr	r2, [pc, #228]	; (8009d88 <HAL_SAI_Transmit_DMA+0x164>)
 8009ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cac:	4a37      	ldr	r2, [pc, #220]	; (8009d8c <HAL_SAI_Transmit_DMA+0x168>)
 8009cae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	331c      	adds	r3, #28
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009cd4:	f7f8 fcdc 	bl	8002690 <HAL_DMA_Start_IT>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e047      	b.n	8009d7a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009cea:	2100      	movs	r1, #0
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 fa17 	bl	800a120 <SAI_InterruptFlag>
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d10:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009d12:	e015      	b.n	8009d40 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009d14:	f7f7 ff2a 	bl	8001b6c <HAL_GetTick>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d22:	d90d      	bls.n	8009d40 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e01c      	b.n	8009d7a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0e2      	beq.n	8009d14 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d107      	bne.n	8009d6c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d6a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e000      	b.n	8009d7a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8009d78:	2302      	movs	r3, #2
  }
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	0800a265 	.word	0x0800a265
 8009d88:	0800a205 	.word	0x0800a205
 8009d8c:	0800a2fd 	.word	0x0800a2fd

08009d90 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_SAI_Receive_DMA+0x1a>
 8009da4:	88fb      	ldrh	r3, [r7, #6]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e079      	b.n	8009ea2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d172      	bne.n	8009ea0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_SAI_Receive_DMA+0x38>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e06c      	b.n	8009ea2 <HAL_SAI_Receive_DMA+0x112>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	88fa      	ldrh	r2, [r7, #6]
 8009dda:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	88fa      	ldrh	r2, [r7, #6]
 8009de2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2222      	movs	r2, #34	; 0x22
 8009df2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dfc:	4a2b      	ldr	r2, [pc, #172]	; (8009eac <HAL_SAI_Receive_DMA+0x11c>)
 8009dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e06:	4a2a      	ldr	r2, [pc, #168]	; (8009eb0 <HAL_SAI_Receive_DMA+0x120>)
 8009e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e10:	4a28      	ldr	r2, [pc, #160]	; (8009eb4 <HAL_SAI_Receive_DMA+0x124>)
 8009e12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	331c      	adds	r3, #28
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e30:	461a      	mov	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8009e38:	f7f8 fc2a 	bl	8002690 <HAL_DMA_Start_IT>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e029      	b.n	8009ea2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009e4e:	2100      	movs	r1, #0
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f965 	bl	800a120 <SAI_InterruptFlag>
 8009e56:	4601      	mov	r1, r0
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691a      	ldr	r2, [r3, #16]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009e74:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d107      	bne.n	8009e94 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e92:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e000      	b.n	8009ea2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800a2e1 	.word	0x0800a2e1
 8009eb0:	0800a281 	.word	0x0800a281
 8009eb4:	0800a2fd 	.word	0x0800a2fd

08009eb8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <SAI_InitI2S+0x2e>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d103      	bne.n	8009eee <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	651a      	str	r2, [r3, #80]	; 0x50
 8009eec:	e002      	b.n	8009ef4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009efa:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f02:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e077      	b.n	800a00e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d107      	bne.n	8009f34 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009f30:	665a      	str	r2, [r3, #100]	; 0x64
 8009f32:	e006      	b.n	8009f42 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009f3a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	665a      	str	r2, [r3, #100]	; 0x64
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d84f      	bhi.n	8009fe8 <SAI_InitI2S+0x130>
 8009f48:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <SAI_InitI2S+0x98>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009f61 	.word	0x08009f61
 8009f54:	08009f83 	.word	0x08009f83
 8009f58:	08009fa5 	.word	0x08009fa5
 8009f5c:	08009fc7 	.word	0x08009fc7

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2280      	movs	r2, #128	; 0x80
 8009f64:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	085b      	lsrs	r3, r3, #1
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	085b      	lsrs	r3, r3, #1
 8009f74:	011a      	lsls	r2, r3, #4
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2240      	movs	r2, #64	; 0x40
 8009f7e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009f80:	e035      	b.n	8009fee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2280      	movs	r2, #128	; 0x80
 8009f86:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	085b      	lsrs	r3, r3, #1
 8009f8c:	019a      	lsls	r2, r3, #6
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	085b      	lsrs	r3, r3, #1
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2280      	movs	r2, #128	; 0x80
 8009fa0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009fa2:	e024      	b.n	8009fee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	22c0      	movs	r2, #192	; 0xc0
 8009fa8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	019a      	lsls	r2, r3, #6
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	085b      	lsrs	r3, r3, #1
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2280      	movs	r2, #128	; 0x80
 8009fc2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009fc4:	e013      	b.n	8009fee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	22e0      	movs	r2, #224	; 0xe0
 8009fca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	019a      	lsls	r2, r3, #6
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	085b      	lsrs	r3, r3, #1
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2280      	movs	r2, #128	; 0x80
 8009fe4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009fe6:	e002      	b.n	8009fee <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	75fb      	strb	r3, [r7, #23]
      break;
 8009fec:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d10b      	bne.n	800a00c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d102      	bne.n	800a000 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2210      	movs	r2, #16
 8009ffe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b02      	cmp	r3, #2
 800a004:	d102      	bne.n	800a00c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2208      	movs	r2, #8
 800a00a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop

0800a01c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <SAI_InitPCM+0x2e>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d103      	bne.n	800a052 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2201      	movs	r2, #1
 800a04e:	651a      	str	r2, [r3, #80]	; 0x50
 800a050:	e002      	b.n	800a058 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a064:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a06c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a080:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b04      	cmp	r3, #4
 800a086:	d103      	bne.n	800a090 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2201      	movs	r2, #1
 800a08c:	659a      	str	r2, [r3, #88]	; 0x58
 800a08e:	e002      	b.n	800a096 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	220d      	movs	r2, #13
 800a094:	659a      	str	r2, [r3, #88]	; 0x58
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d837      	bhi.n	800a10c <SAI_InitPCM+0xf0>
 800a09c:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <SAI_InitPCM+0x88>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a0b5 	.word	0x0800a0b5
 800a0a8:	0800a0cb 	.word	0x0800a0cb
 800a0ac:	0800a0e1 	.word	0x0800a0e1
 800a0b0:	0800a0f7 	.word	0x0800a0f7
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2280      	movs	r2, #128	; 0x80
 800a0b8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	011a      	lsls	r2, r3, #4
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2240      	movs	r2, #64	; 0x40
 800a0c6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a0c8:	e023      	b.n	800a112 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2280      	movs	r2, #128	; 0x80
 800a0ce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2280      	movs	r2, #128	; 0x80
 800a0dc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a0de:	e018      	b.n	800a112 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	22c0      	movs	r2, #192	; 0xc0
 800a0e4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2280      	movs	r2, #128	; 0x80
 800a0f2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a0f4:	e00d      	b.n	800a112 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	22e0      	movs	r2, #224	; 0xe0
 800a0fa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2280      	movs	r2, #128	; 0x80
 800a108:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a10a:	e002      	b.n	800a112 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
      break;
 800a110:	bf00      	nop
  }

  return status;
 800a112:	7dfb      	ldrb	r3, [r7, #23]
}
 800a114:	4618      	mov	r0, r3
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d103      	bne.n	800a13e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f043 0308 	orr.w	r3, r3, #8
 800a13c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a142:	2b08      	cmp	r3, #8
 800a144:	d10b      	bne.n	800a15e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d003      	beq.n	800a156 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d103      	bne.n	800a15e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f043 0310 	orr.w	r3, r3, #16
 800a15c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b03      	cmp	r3, #3
 800a164:	d003      	beq.n	800a16e <SAI_InterruptFlag+0x4e>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d104      	bne.n	800a178 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a174:	60fb      	str	r3, [r7, #12]
 800a176:	e003      	b.n	800a180 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f043 0304 	orr.w	r3, r3, #4
 800a17e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a198:	4b18      	ldr	r3, [pc, #96]	; (800a1fc <SAI_Disable+0x6c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a18      	ldr	r2, [pc, #96]	; (800a200 <SAI_Disable+0x70>)
 800a19e:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a2:	0b1b      	lsrs	r3, r3, #12
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a1ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	72fb      	strb	r3, [r7, #11]
      break;
 800a1d6:	e009      	b.n	800a1ec <SAI_Disable+0x5c>
    }
    count--;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e7      	bne.n	800a1bc <SAI_Disable+0x2c>

  return status;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	24000420 	.word	0x24000420
 800a200:	95cbec1b 	.word	0x95cbec1b

0800a204 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a210:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21a:	d01c      	beq.n	800a256 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a232:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a234:	2100      	movs	r1, #0
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f7ff ff72 	bl	800a120 <SAI_InterruptFlag>
 800a23c:	4603      	mov	r3, r0
 800a23e:	43d9      	mvns	r1, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691a      	ldr	r2, [r3, #16]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	400a      	ands	r2, r1
 800a24c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7f7 fb84 	bl	8001964 <HAL_SAI_TxCpltCallback>
#endif
}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7f7 fb81 	bl	800197a <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a278:	bf00      	nop
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a296:	d01c      	beq.n	800a2d2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a2a6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7ff ff34 	bl	800a120 <SAI_InterruptFlag>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	43d9      	mvns	r1, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7f7 fb9b 	bl	8001a0e <HAL_SAI_RxCpltCallback>
#endif
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7f7 fb82 	bl	80019f8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a308:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7f9 fda6 	bl	8003e5c <HAL_DMA_GetError>
 800a310:	4603      	mov	r3, r0
 800a312:	2b02      	cmp	r3, #2
 800a314:	d01d      	beq.n	800a352 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a31c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a334:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7ff ff2a 	bl	800a190 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7f7 fb1f 	bl	8001990 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a360:	f7f7 fb7e 	bl	8001a60 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 800a364:	2000      	movs	r0, #0
 800a366:	f7f7 fa63 	bl	8001830 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800a36a:	2001      	movs	r0, #1
 800a36c:	f7f7 fa60 	bl	8001830 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800a370:	2000      	movs	r0, #0
 800a372:	f7f7 fad9 	bl	8001928 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800a376:	2001      	movs	r0, #1
 800a378:	f7f7 fad6 	bl	8001928 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a37c:	f000 f852 	bl	800a424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a380:	f000 fab4 	bl	800a8ec <MX_GPIO_Init>
  MX_BDMA_Init();
 800a384:	f000 fa28 	bl	800a7d8 <MX_BDMA_Init>
  MX_SAI4_Init();
 800a388:	f000 f9c8 	bl	800a71c <MX_SAI4_Init>
  MX_CRC_Init();
 800a38c:	f000 f8dc 	bl	800a548 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800a390:	f000 fb4e 	bl	800aa30 <MX_PDM2PCM_Init>
  MX_SAI1_Init();
 800a394:	f000 f98c 	bl	800a6b0 <MX_SAI1_Init>
  MX_DMA_Init();
 800a398:	f000 fa38 	bl	800a80c <MX_DMA_Init>
  MX_RAMECC_Init();
 800a39c:	f000 f956 	bl	800a64c <MX_RAMECC_Init>
  MX_I2C4_Init();
 800a3a0:	f000 f914 	bl	800a5cc <MX_I2C4_Init>
//  MX_DFSDM1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 800a3a4:	f000 f8ac 	bl	800a500 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CODEC_Init();
 800a3a8:	f000 fb0c 	bl	800a9c4 <CODEC_Init>
  HAL_SAI_MspInit(&hsai_BlockA4);
 800a3ac:	4817      	ldr	r0, [pc, #92]	; (800a40c <main+0xb0>)
 800a3ae:	f000 fc3b 	bl	800ac28 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockA4);
 800a3b2:	4816      	ldr	r0, [pc, #88]	; (800a40c <main+0xb0>)
 800a3b4:	f7ff fa22 	bl	80097fc <HAL_SAI_Init>
  HAL_SAI_MspInit(&hsai_BlockB1);
 800a3b8:	4815      	ldr	r0, [pc, #84]	; (800a410 <main+0xb4>)
 800a3ba:	f000 fc35 	bl	800ac28 <HAL_SAI_MspInit>
  HAL_SAI_Init(&hsai_BlockB1);
 800a3be:	4814      	ldr	r0, [pc, #80]	; (800a410 <main+0xb4>)
 800a3c0:	f7ff fa1c 	bl	80097fc <HAL_SAI_Init>

  // need to move data from D3 into D2 (where SAI1 is)

  if(HAL_SAI_Receive_DMA(&hsai_BlockA4, input_buffer, NUM_BYTES) == HAL_OK)
 800a3c4:	4b13      	ldr	r3, [pc, #76]	; (800a414 <main+0xb8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	480f      	ldr	r0, [pc, #60]	; (800a40c <main+0xb0>)
 800a3ce:	f7ff fcdf 	bl	8009d90 <HAL_SAI_Receive_DMA>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d117      	bne.n	800a408 <main+0xac>
  {
//	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, input_buffer, pdm_buffer, NUM_BYTES);
	  PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <main+0xbc>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a0f      	ldr	r2, [pc, #60]	; (800a41c <main+0xc0>)
 800a3de:	6811      	ldr	r1, [r2, #0]
 800a3e0:	4a0f      	ldr	r2, [pc, #60]	; (800a420 <main+0xc4>)
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f002 fd64 	bl	800ceb0 <PDM_Filter>
	  BSP_LED_On(LED2);
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	f7f7 fa7f 	bl	80018ec <BSP_LED_On>
	  if(HAL_SAI_Transmit_DMA(&hsai_BlockB1, pcm_buffer, NUM_BYTES) == HAL_OK)
 800a3ee:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <main+0xc0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4806      	ldr	r0, [pc, #24]	; (800a410 <main+0xb4>)
 800a3f8:	f7ff fc14 	bl	8009c24 <HAL_SAI_Transmit_DMA>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <main+0xac>
	  {
		  BSP_LED_Off(LED2);
 800a402:	2001      	movs	r0, #1
 800a404:	f7f7 fa90 	bl	8001928 <BSP_LED_Off>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800a408:	e7fe      	b.n	800a408 <main+0xac>
 800a40a:	bf00      	nop
 800a40c:	24000648 	.word	0x24000648
 800a410:	240005b0 	.word	0x240005b0
 800a414:	24000414 	.word	0x24000414
 800a418:	24000418 	.word	0x24000418
 800a41c:	2400041c 	.word	0x2400041c
 800a420:	24000858 	.word	0x24000858

0800a424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b09c      	sub	sp, #112	; 0x70
 800a428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a42e:	224c      	movs	r2, #76	; 0x4c
 800a430:	2100      	movs	r1, #0
 800a432:	4618      	mov	r0, r3
 800a434:	f002 fd80 	bl	800cf38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a438:	1d3b      	adds	r3, r7, #4
 800a43a:	2220      	movs	r2, #32
 800a43c:	2100      	movs	r1, #0
 800a43e:	4618      	mov	r0, r3
 800a440:	f002 fd7a 	bl	800cf38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800a444:	2004      	movs	r0, #4
 800a446:	f7fc f971 	bl	800672c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a44a:	2300      	movs	r3, #0
 800a44c:	603b      	str	r3, [r7, #0]
 800a44e:	4b2b      	ldr	r3, [pc, #172]	; (800a4fc <SystemClock_Config+0xd8>)
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	4a2a      	ldr	r2, [pc, #168]	; (800a4fc <SystemClock_Config+0xd8>)
 800a454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a458:	6193      	str	r3, [r2, #24]
 800a45a:	4b28      	ldr	r3, [pc, #160]	; (800a4fc <SystemClock_Config+0xd8>)
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a466:	bf00      	nop
 800a468:	4b24      	ldr	r3, [pc, #144]	; (800a4fc <SystemClock_Config+0xd8>)
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a474:	d1f8      	bne.n	800a468 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a476:	2302      	movs	r3, #2
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800a47a:	2301      	movs	r3, #1
 800a47c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a47e:	2340      	movs	r3, #64	; 0x40
 800a480:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a482:	2302      	movs	r3, #2
 800a484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a486:	2300      	movs	r3, #0
 800a488:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a48a:	2304      	movs	r3, #4
 800a48c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800a48e:	2318      	movs	r3, #24
 800a490:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800a492:	2301      	movs	r3, #1
 800a494:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 800a496:	237d      	movs	r3, #125	; 0x7d
 800a498:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a49a:	2302      	movs	r3, #2
 800a49c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a49e:	230c      	movs	r3, #12
 800a4a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a4aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fc f9d4 	bl	800685c <HAL_RCC_OscConfig>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800a4ba:	f000 fab3 	bl	800aa24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a4be:	233f      	movs	r3, #63	; 0x3f
 800a4c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a4ce:	2340      	movs	r3, #64	; 0x40
 800a4d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a4d2:	2340      	movs	r3, #64	; 0x40
 800a4d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a4d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a4dc:	2340      	movs	r3, #64	; 0x40
 800a4de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a4e0:	1d3b      	adds	r3, r7, #4
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fc fd65 	bl	8006fb4 <HAL_RCC_ClockConfig>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800a4f0:	f000 fa98 	bl	800aa24 <Error_Handler>
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	3770      	adds	r7, #112	; 0x70
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	58024800 	.word	0x58024800

0800a500 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 800a504:	2200      	movs	r2, #0
 800a506:	2100      	movs	r1, #0
 800a508:	2082      	movs	r0, #130	; 0x82
 800a50a:	f7f7 fc3a 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 800a50e:	2082      	movs	r0, #130	; 0x82
 800a510:	f7f7 fc51 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	2038      	movs	r0, #56	; 0x38
 800a51a:	f7f7 fc32 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a51e:	2038      	movs	r0, #56	; 0x38
 800a520:	f7f7 fc49 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	2006      	movs	r0, #6
 800a52a:	f7f7 fc2a 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a52e:	2006      	movs	r0, #6
 800a530:	f7f7 fc41 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	2080      	movs	r0, #128	; 0x80
 800a53a:	f7f7 fc22 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 800a53e:	2080      	movs	r0, #128	; 0x80
 800a540:	f7f7 fc39 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 800a544:	bf00      	nop
 800a546:	bd80      	pop	{r7, pc}

0800a548 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a54e:	4b1c      	ldr	r3, [pc, #112]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a550:	4a1c      	ldr	r2, [pc, #112]	; (800a5c4 <MX_CRC_Init+0x7c>)
 800a552:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a554:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a556:	2200      	movs	r2, #0
 800a558:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a55a:	4b19      	ldr	r3, [pc, #100]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a560:	4b17      	ldr	r3, [pc, #92]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a562:	2200      	movs	r2, #0
 800a564:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a566:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a568:	2200      	movs	r2, #0
 800a56a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a56c:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a56e:	2201      	movs	r2, #1
 800a570:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a572:	4813      	ldr	r0, [pc, #76]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a574:	f7f7 fc48 	bl	8001e08 <HAL_CRC_Init>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 800a57e:	f000 fa51 	bl	800aa24 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800a582:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 0201 	orr.w	r2, r2, #1
 800a590:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800a592:	4b0d      	ldr	r3, [pc, #52]	; (800a5c8 <MX_CRC_Init+0x80>)
 800a594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a598:	4a0b      	ldr	r2, [pc, #44]	; (800a5c8 <MX_CRC_Init+0x80>)
 800a59a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a59e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <MX_CRC_Init+0x80>)
 800a5a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5ac:	607b      	str	r3, [r7, #4]
 800a5ae:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 800a5b0:	4803      	ldr	r0, [pc, #12]	; (800a5c0 <MX_CRC_Init+0x78>)
 800a5b2:	f000 fa81 	bl	800aab8 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	2400058c 	.word	0x2400058c
 800a5c4:	58024c00 	.word	0x58024c00
 800a5c8:	58024400 	.word	0x58024400

0800a5cc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800a5d0:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5d2:	4a1c      	ldr	r2, [pc, #112]	; (800a644 <MX_I2C4_Init+0x78>)
 800a5d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 800a5d6:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5d8:	4a1b      	ldr	r2, [pc, #108]	; (800a648 <MX_I2C4_Init+0x7c>)
 800a5da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 104;
 800a5dc:	4b18      	ldr	r3, [pc, #96]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5de:	2268      	movs	r2, #104	; 0x68
 800a5e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a5e2:	4b17      	ldr	r3, [pc, #92]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a5e8:	4b15      	ldr	r3, [pc, #84]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800a5ee:	4b14      	ldr	r3, [pc, #80]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a5f4:	4b12      	ldr	r3, [pc, #72]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a5fa:	4b11      	ldr	r3, [pc, #68]	; (800a640 <MX_I2C4_Init+0x74>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <MX_I2C4_Init+0x74>)
 800a602:	2200      	movs	r2, #0
 800a604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800a606:	480e      	ldr	r0, [pc, #56]	; (800a640 <MX_I2C4_Init+0x74>)
 800a608:	f7fa fc1c 	bl	8004e44 <HAL_I2C_Init>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800a612:	f000 fa07 	bl	800aa24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a616:	2100      	movs	r1, #0
 800a618:	4809      	ldr	r0, [pc, #36]	; (800a640 <MX_I2C4_Init+0x74>)
 800a61a:	f7fb ffef 	bl	80065fc <HAL_I2CEx_ConfigAnalogFilter>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800a624:	f000 f9fe 	bl	800aa24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800a628:	2100      	movs	r1, #0
 800a62a:	4805      	ldr	r0, [pc, #20]	; (800a640 <MX_I2C4_Init+0x74>)
 800a62c:	f7fc f831 	bl	8006692 <HAL_I2CEx_ConfigDigitalFilter>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800a636:	f000 f9f5 	bl	800aa24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800a63a:	bf00      	nop
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	240004b8 	.word	0x240004b8
 800a644:	58001c00 	.word	0x58001c00
 800a648:	10b0dcfb 	.word	0x10b0dcfb

0800a64c <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800a650:	4b11      	ldr	r3, [pc, #68]	; (800a698 <MX_RAMECC_Init+0x4c>)
 800a652:	4a12      	ldr	r2, [pc, #72]	; (800a69c <MX_RAMECC_Init+0x50>)
 800a654:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 800a656:	4810      	ldr	r0, [pc, #64]	; (800a698 <MX_RAMECC_Init+0x4c>)
 800a658:	f7fc f8c2 	bl	80067e0 <HAL_RAMECC_Init>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800a662:	f000 f9df 	bl	800aa24 <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 800a666:	4b0e      	ldr	r3, [pc, #56]	; (800a6a0 <MX_RAMECC_Init+0x54>)
 800a668:	4a0e      	ldr	r2, [pc, #56]	; (800a6a4 <MX_RAMECC_Init+0x58>)
 800a66a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800a66c:	480c      	ldr	r0, [pc, #48]	; (800a6a0 <MX_RAMECC_Init+0x54>)
 800a66e:	f7fc f8b7 	bl	80067e0 <HAL_RAMECC_Init>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 800a678:	f000 f9d4 	bl	800aa24 <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <MX_RAMECC_Init+0x5c>)
 800a67e:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <MX_RAMECC_Init+0x60>)
 800a680:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800a682:	4809      	ldr	r0, [pc, #36]	; (800a6a8 <MX_RAMECC_Init+0x5c>)
 800a684:	f7fc f8ac 	bl	80067e0 <HAL_RAMECC_Init>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 800a68e:	f000 f9c9 	bl	800aa24 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800a692:	bf00      	nop
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	24000768 	.word	0x24000768
 800a69c:	48023020 	.word	0x48023020
 800a6a0:	240006e0 	.word	0x240006e0
 800a6a4:	48023040 	.word	0x48023040
 800a6a8:	24000504 	.word	0x24000504
 800a6ac:	58027020 	.word	0x58027020

0800a6b0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800a6b4:	4b17      	ldr	r3, [pc, #92]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6b6:	4a18      	ldr	r2, [pc, #96]	; (800a718 <MX_SAI1_Init+0x68>)
 800a6b8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800a6ba:	4b16      	ldr	r3, [pc, #88]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800a6c0:	4b14      	ldr	r3, [pc, #80]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a6c6:	4b13      	ldr	r3, [pc, #76]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a6cc:	4b11      	ldr	r3, [pc, #68]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a6d2:	4b10      	ldr	r3, [pc, #64]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800a6d8:	4b0e      	ldr	r3, [pc, #56]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6da:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800a6de:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 800a6e6:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a6f4:	4b07      	ldr	r3, [pc, #28]	; (800a714 <MX_SAI1_Init+0x64>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_PCM_LONG, SAI_PROTOCOL_DATASIZE_32BIT, 1) != HAL_OK)
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	2203      	movs	r2, #3
 800a6fe:	2103      	movs	r1, #3
 800a700:	4804      	ldr	r0, [pc, #16]	; (800a714 <MX_SAI1_Init+0x64>)
 800a702:	f7ff f849 	bl	8009798 <HAL_SAI_InitProtocol>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 800a70c:	f000 f98a 	bl	800aa24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800a710:	bf00      	nop
 800a712:	bd80      	pop	{r7, pc}
 800a714:	240005b0 	.word	0x240005b0
 800a718:	40015824 	.word	0x40015824

0800a71c <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 800a720:	4b2b      	ldr	r3, [pc, #172]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a722:	4a2c      	ldr	r2, [pc, #176]	; (800a7d4 <MX_SAI4_Init+0xb8>)
 800a724:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800a726:	4b2a      	ldr	r3, [pc, #168]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a728:	2200      	movs	r2, #0
 800a72a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 800a72c:	4b28      	ldr	r3, [pc, #160]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a72e:	2201      	movs	r2, #1
 800a730:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 800a732:	4b27      	ldr	r3, [pc, #156]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a734:	2240      	movs	r2, #64	; 0x40
 800a736:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800a738:	4b25      	ldr	r3, [pc, #148]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a73e:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a740:	2200      	movs	r2, #0
 800a742:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 800a744:	4b22      	ldr	r3, [pc, #136]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a746:	2200      	movs	r2, #0
 800a748:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a74a:	4b21      	ldr	r3, [pc, #132]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 800a750:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a752:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a756:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800a758:	4b1d      	ldr	r3, [pc, #116]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800a75e:	4b1c      	ldr	r3, [pc, #112]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a760:	2200      	movs	r2, #0
 800a762:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800a764:	4b1a      	ldr	r3, [pc, #104]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a766:	2200      	movs	r2, #0
 800a768:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 800a76a:	4b19      	ldr	r3, [pc, #100]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 2;
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a774:	2202      	movs	r2, #2
 800a776:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 800a778:	4b15      	ldr	r3, [pc, #84]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a77a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a77e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 800a780:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a782:	2208      	movs	r2, #8
 800a784:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 800a786:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a788:	2201      	movs	r2, #1
 800a78a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a78e:	2200      	movs	r2, #0
 800a790:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a792:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a794:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a798:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800a79a:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800a7a0:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 800a7ac:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 800a7b2:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a7b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7b8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 800a7ba:	4805      	ldr	r0, [pc, #20]	; (800a7d0 <MX_SAI4_Init+0xb4>)
 800a7bc:	f7ff f81e 	bl	80097fc <HAL_SAI_Init>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 800a7c6:	f000 f92d 	bl	800aa24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 800a7ca:	bf00      	nop
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	24000648 	.word	0x24000648
 800a7d4:	58005404 	.word	0x58005404

0800a7d8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800a7de:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <MX_BDMA_Init+0x30>)
 800a7e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7e4:	4a08      	ldr	r2, [pc, #32]	; (800a808 <MX_BDMA_Init+0x30>)
 800a7e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7ee:	4b06      	ldr	r3, [pc, #24]	; (800a808 <MX_BDMA_Init+0x30>)
 800a7f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7f8:	607b      	str	r3, [r7, #4]
 800a7fa:	687b      	ldr	r3, [r7, #4]

}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	58024400 	.word	0x58024400

0800a80c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a812:	4b33      	ldr	r3, [pc, #204]	; (800a8e0 <MX_DMA_Init+0xd4>)
 800a814:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a818:	4a31      	ldr	r2, [pc, #196]	; (800a8e0 <MX_DMA_Init+0xd4>)
 800a81a:	f043 0302 	orr.w	r3, r3, #2
 800a81e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a822:	4b2f      	ldr	r3, [pc, #188]	; (800a8e0 <MX_DMA_Init+0xd4>)
 800a824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a830:	4b2b      	ldr	r3, [pc, #172]	; (800a8e0 <MX_DMA_Init+0xd4>)
 800a832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a836:	4a2a      	ldr	r2, [pc, #168]	; (800a8e0 <MX_DMA_Init+0xd4>)
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a840:	4b27      	ldr	r3, [pc, #156]	; (800a8e0 <MX_DMA_Init+0xd4>)
 800a842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800a84e:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a850:	4a25      	ldr	r2, [pc, #148]	; (800a8e8 <MX_DMA_Init+0xdc>)
 800a852:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 800a854:	4b23      	ldr	r3, [pc, #140]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a856:	2200      	movs	r2, #0
 800a858:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800a85a:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a85c:	2280      	movs	r2, #128	; 0x80
 800a85e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800a860:	4b20      	ldr	r3, [pc, #128]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a862:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a866:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800a868:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a86a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a86e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a870:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a876:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a878:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a87a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a87e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800a880:	4b18      	ldr	r3, [pc, #96]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a882:	2200      	movs	r2, #0
 800a884:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800a886:	4b17      	ldr	r3, [pc, #92]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a88c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a88e:	4b15      	ldr	r3, [pc, #84]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a890:	2204      	movs	r2, #4
 800a892:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a894:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a896:	2203      	movs	r2, #3
 800a898:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800a89a:	4b12      	ldr	r3, [pc, #72]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a8a0:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800a8a6:	480f      	ldr	r0, [pc, #60]	; (800a8e4 <MX_DMA_Init+0xd8>)
 800a8a8:	f7f7 fb98 	bl	8001fdc <HAL_DMA_Init>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 800a8b2:	f000 f8b7 	bl	800aa24 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	200c      	movs	r0, #12
 800a8bc:	f7f7 fa61 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a8c0:	200c      	movs	r0, #12
 800a8c2:	f7f7 fa78 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	2066      	movs	r0, #102	; 0x66
 800a8cc:	f7f7 fa59 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800a8d0:	2066      	movs	r0, #102	; 0x66
 800a8d2:	f7f7 fa70 	bl	8001db6 <HAL_NVIC_EnableIRQ>

}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	58024400 	.word	0x58024400
 800a8e4:	24000514 	.word	0x24000514
 800a8e8:	40020410 	.word	0x40020410

0800a8ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8f2:	f107 0314 	add.w	r3, r7, #20
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	605a      	str	r2, [r3, #4]
 800a8fc:	609a      	str	r2, [r3, #8]
 800a8fe:	60da      	str	r2, [r3, #12]
 800a900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a902:	4b2e      	ldr	r3, [pc, #184]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a908:	4a2c      	ldr	r2, [pc, #176]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a90a:	f043 0302 	orr.w	r3, r3, #2
 800a90e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a912:	4b2a      	ldr	r3, [pc, #168]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a920:	4b26      	ldr	r3, [pc, #152]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a926:	4a25      	ldr	r2, [pc, #148]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a928:	f043 0301 	orr.w	r3, r3, #1
 800a92c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a930:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a93e:	4b1f      	ldr	r3, [pc, #124]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a944:	4a1d      	ldr	r2, [pc, #116]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a946:	f043 0310 	orr.w	r3, r3, #16
 800a94a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a94e:	4b1b      	ldr	r3, [pc, #108]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	60bb      	str	r3, [r7, #8]
 800a95a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a95c:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a95e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a962:	4a16      	ldr	r2, [pc, #88]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a964:	f043 0308 	orr.w	r3, r3, #8
 800a968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a96c:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a96e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a972:	f003 0308 	and.w	r3, r3, #8
 800a976:	607b      	str	r3, [r7, #4]
 800a978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a97c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a980:	4a0e      	ldr	r2, [pc, #56]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a982:	f043 0320 	orr.w	r3, r3, #32
 800a986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <MX_GPIO_Init+0xd0>)
 800a98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a990:	f003 0320 	and.w	r3, r3, #32
 800a994:	603b      	str	r3, [r7, #0]
 800a996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a998:	2301      	movs	r3, #1
 800a99a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a99c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a9a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9a6:	f107 0314 	add.w	r3, r7, #20
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4804      	ldr	r0, [pc, #16]	; (800a9c0 <MX_GPIO_Init+0xd4>)
 800a9ae:	f7f9 ff61 	bl	8004874 <HAL_GPIO_Init>

}
 800a9b2:	bf00      	nop
 800a9b4:	3728      	adds	r7, #40	; 0x28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	58024400 	.word	0x58024400
 800a9c0:	58021000 	.word	0x58021000

0800a9c4 <CODEC_Init>:

/* USER CODE BEGIN 4 */

static void CODEC_Init(void) {
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08c      	sub	sp, #48	; 0x30
 800a9c8:	af00      	add	r7, sp, #0

	// cancel up to 1khz
	int32_t ret = BSP_ERROR_NONE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	// WM8994_Object_t hcodec;
	WM8994_Init_t hcodec_init;
	WM8994_IO_t	  hcodec_io;
	uint32_t id;

	hcodec_io.Address	 = CODEC_I2C;
 800a9ce:	2334      	movs	r3, #52	; 0x34
 800a9d0:	813b      	strh	r3, [r7, #8]
	hcodec_io.ReadReg	 = HAL_I2C_Mem_Read;
 800a9d2:	4b0e      	ldr	r3, [pc, #56]	; (800aa0c <CODEC_Init+0x48>)
 800a9d4:	613b      	str	r3, [r7, #16]
	hcodec_io.WriteReg	 = HAL_I2C_Mem_Write;
 800a9d6:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <CODEC_Init+0x4c>)
 800a9d8:	60fb      	str	r3, [r7, #12]
	hcodec_io.Init		 = HAL_I2C_Init;
 800a9da:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <CODEC_Init+0x50>)
 800a9dc:	603b      	str	r3, [r7, #0]
	hcodec_io.DeInit	 = HAL_I2C_DeInit;
 800a9de:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <CODEC_Init+0x54>)
 800a9e0:	607b      	str	r3, [r7, #4]
	hcodec_io.GetTick	 = HAL_GetTick;
 800a9e2:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <CODEC_Init+0x58>)
 800a9e4:	617b      	str	r3, [r7, #20]

	WM8994_RegisterBusIO(&hcodec, &hcodec_io);
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	480d      	ldr	r0, [pc, #52]	; (800aa20 <CODEC_Init+0x5c>)
 800a9ec:	f7f6 fd9c 	bl	8001528 <WM8994_RegisterBusIO>
	WM8994_Init(&hcodec, &hcodec_init);
 800a9f0:	f107 0318 	add.w	r3, r7, #24
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	480a      	ldr	r0, [pc, #40]	; (800aa20 <CODEC_Init+0x5c>)
 800a9f8:	f7f5 fc8a 	bl	8000310 <WM8994_Init>
	WM8994_Reset(&hcodec);
 800a9fc:	4808      	ldr	r0, [pc, #32]	; (800aa20 <CODEC_Init+0x5c>)
 800a9fe:	f7f6 fd7b 	bl	80014f8 <WM8994_Reset>
}
 800aa02:	bf00      	nop
 800aa04:	3730      	adds	r7, #48	; 0x30
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	080051ed 	.word	0x080051ed
 800aa10:	08004fc5 	.word	0x08004fc5
 800aa14:	08004e45 	.word	0x08004e45
 800aa18:	08004f65 	.word	0x08004f65
 800aa1c:	08001b6d 	.word	0x08001b6d
 800aa20:	24000828 	.word	0x24000828

0800aa24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800aa28:	b672      	cpsid	i
}
 800aa2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aa2c:	e7fe      	b.n	800aa2c <Error_Handler+0x8>
	...

0800aa30 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800aa34:	4b10      	ldr	r3, [pc, #64]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800aa40:	4b0d      	ldr	r3, [pc, #52]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa42:	4a0e      	ldr	r2, [pc, #56]	; (800aa7c <MX_PDM2PCM_Init+0x4c>)
 800aa44:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800aa46:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa4e:	2201      	movs	r2, #1
 800aa50:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800aa52:	4809      	ldr	r0, [pc, #36]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa54:	f002 f862 	bl	800cb1c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800aa58:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <MX_PDM2PCM_Init+0x50>)
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800aa5e:	4b08      	ldr	r3, [pc, #32]	; (800aa80 <MX_PDM2PCM_Init+0x50>)
 800aa60:	2210      	movs	r2, #16
 800aa62:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800aa64:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <MX_PDM2PCM_Init+0x50>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800aa6a:	4905      	ldr	r1, [pc, #20]	; (800aa80 <MX_PDM2PCM_Init+0x50>)
 800aa6c:	4802      	ldr	r0, [pc, #8]	; (800aa78 <MX_PDM2PCM_Init+0x48>)
 800aa6e:	f002 f925 	bl	800ccbc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800aa72:	bf00      	nop
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	24000858 	.word	0x24000858
 800aa7c:	7d70a3d6 	.word	0x7d70a3d6
 800aa80:	24000850 	.word	0x24000850

0800aa84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa8a:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <HAL_MspInit+0x30>)
 800aa8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa90:	4a08      	ldr	r2, [pc, #32]	; (800aab4 <HAL_MspInit+0x30>)
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <HAL_MspInit+0x30>)
 800aa9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aaa0:	f003 0302 	and.w	r3, r3, #2
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	58024400 	.word	0x58024400

0800aab8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a0b      	ldr	r2, [pc, #44]	; (800aaf4 <HAL_CRC_MspInit+0x3c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10e      	bne.n	800aae8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800aaca:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <HAL_CRC_MspInit+0x40>)
 800aacc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aad0:	4a09      	ldr	r2, [pc, #36]	; (800aaf8 <HAL_CRC_MspInit+0x40>)
 800aad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <HAL_CRC_MspInit+0x40>)
 800aadc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800aae8:	bf00      	nop
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	58024c00 	.word	0x58024c00
 800aaf8:	58024400 	.word	0x58024400

0800aafc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b0b6      	sub	sp, #216	; 0xd8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	605a      	str	r2, [r3, #4]
 800ab0e:	609a      	str	r2, [r3, #8]
 800ab10:	60da      	str	r2, [r3, #12]
 800ab12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab14:	f107 0310 	add.w	r3, r7, #16
 800ab18:	22b4      	movs	r2, #180	; 0xb4
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f002 fa0b 	bl	800cf38 <memset>
  if(hi2c->Instance==I2C4)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a29      	ldr	r2, [pc, #164]	; (800abcc <HAL_I2C_MspInit+0xd0>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d14a      	bne.n	800abc2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800ab30:	2300      	movs	r3, #0
 800ab32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ab36:	f107 0310 	add.w	r3, r7, #16
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fc fd9a 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800ab46:	f7ff ff6d 	bl	800aa24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab4a:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <HAL_I2C_MspInit+0xd4>)
 800ab4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab50:	4a1f      	ldr	r2, [pc, #124]	; (800abd0 <HAL_I2C_MspInit+0xd4>)
 800ab52:	f043 0302 	orr.w	r3, r3, #2
 800ab56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab5a:	4b1d      	ldr	r3, [pc, #116]	; (800abd0 <HAL_I2C_MspInit+0xd4>)
 800ab5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ab68:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab70:	2312      	movs	r3, #18
 800ab72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800ab82:	2306      	movs	r3, #6
 800ab84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4811      	ldr	r0, [pc, #68]	; (800abd4 <HAL_I2C_MspInit+0xd8>)
 800ab90:	f7f9 fe70 	bl	8004874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800ab94:	4b0e      	ldr	r3, [pc, #56]	; (800abd0 <HAL_I2C_MspInit+0xd4>)
 800ab96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab9a:	4a0d      	ldr	r2, [pc, #52]	; (800abd0 <HAL_I2C_MspInit+0xd4>)
 800ab9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aba4:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <HAL_I2C_MspInit+0xd4>)
 800aba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abae:	60bb      	str	r3, [r7, #8]
 800abb0:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	2060      	movs	r0, #96	; 0x60
 800abb8:	f7f7 f8e3 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800abbc:	2060      	movs	r0, #96	; 0x60
 800abbe:	f7f7 f8fa 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800abc2:	bf00      	nop
 800abc4:	37d8      	adds	r7, #216	; 0xd8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	58001c00 	.word	0x58001c00
 800abd0:	58024400 	.word	0x58024400
 800abd4:	58020400 	.word	0x58020400

0800abd8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a0d      	ldr	r2, [pc, #52]	; (800ac1c <HAL_I2C_MspDeInit+0x44>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d114      	bne.n	800ac14 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800abea:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <HAL_I2C_MspDeInit+0x48>)
 800abec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abf0:	4a0b      	ldr	r2, [pc, #44]	; (800ac20 <HAL_I2C_MspDeInit+0x48>)
 800abf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800abfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abfe:	4809      	ldr	r0, [pc, #36]	; (800ac24 <HAL_I2C_MspDeInit+0x4c>)
 800ac00:	f7f9 ffe0 	bl	8004bc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800ac04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac08:	4806      	ldr	r0, [pc, #24]	; (800ac24 <HAL_I2C_MspDeInit+0x4c>)
 800ac0a:	f7f9 ffdb 	bl	8004bc4 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 800ac0e:	2060      	movs	r0, #96	; 0x60
 800ac10:	f7f7 f8df 	bl	8001dd2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	58001c00 	.word	0x58001c00
 800ac20:	58024400 	.word	0x58024400
 800ac24:	58020400 	.word	0x58020400

0800ac28 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b0ba      	sub	sp, #232	; 0xe8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac30:	f107 0310 	add.w	r3, r7, #16
 800ac34:	22b4      	movs	r2, #180	; 0xb4
 800ac36:	2100      	movs	r1, #0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f002 f97d 	bl	800cf38 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4aae      	ldr	r2, [pc, #696]	; (800aefc <HAL_SAI_MspInit+0x2d4>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	f040 80ae 	bne.w	800ada6 <HAL_SAI_MspInit+0x17e>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800ac4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac54:	f107 0310 	add.w	r3, r7, #16
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fc fd0b 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 800ac64:	f7ff fede 	bl	800aa24 <Error_Handler>
    }

      if (SAI1_client == 0)
 800ac68:	4ba5      	ldr	r3, [pc, #660]	; (800af00 <HAL_SAI_MspInit+0x2d8>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10e      	bne.n	800ac8e <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ac70:	4ba4      	ldr	r3, [pc, #656]	; (800af04 <HAL_SAI_MspInit+0x2dc>)
 800ac72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac76:	4aa3      	ldr	r2, [pc, #652]	; (800af04 <HAL_SAI_MspInit+0x2dc>)
 800ac78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ac80:	4ba0      	ldr	r3, [pc, #640]	; (800af04 <HAL_SAI_MspInit+0x2dc>)
 800ac82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac8a:	60fb      	str	r3, [r7, #12]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800ac8e:	4b9c      	ldr	r3, [pc, #624]	; (800af00 <HAL_SAI_MspInit+0x2d8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	4a9a      	ldr	r2, [pc, #616]	; (800af00 <HAL_SAI_MspInit+0x2d8>)
 800ac96:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ac98:	2308      	movs	r3, #8
 800ac9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acaa:	2300      	movs	r3, #0
 800acac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800acb0:	2306      	movs	r3, #6
 800acb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800acb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800acba:	4619      	mov	r1, r3
 800acbc:	4892      	ldr	r0, [pc, #584]	; (800af08 <HAL_SAI_MspInit+0x2e0>)
 800acbe:	f7f9 fdd9 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800acc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800acc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acca:	2302      	movs	r3, #2
 800accc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800acdc:	2306      	movs	r3, #6
 800acde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ace2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4888      	ldr	r0, [pc, #544]	; (800af0c <HAL_SAI_MspInit+0x2e4>)
 800acea:	f7f9 fdc3 	bl	8004874 <HAL_GPIO_Init>

      /* Peripheral DMA init*/
    // copied from discovery audio code

    hdma_sai1_b.Instance = DMA1_Stream1;
 800acee:	4b88      	ldr	r3, [pc, #544]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800acf0:	4a88      	ldr	r2, [pc, #544]	; (800af14 <HAL_SAI_MspInit+0x2ec>)
 800acf2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800acf4:	4b86      	ldr	r3, [pc, #536]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800acf6:	2258      	movs	r2, #88	; 0x58
 800acf8:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acfa:	4b85      	ldr	r3, [pc, #532]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800acfc:	2240      	movs	r2, #64	; 0x40
 800acfe:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad00:	4b83      	ldr	r3, [pc, #524]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800ad06:	4b82      	ldr	r3, [pc, #520]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad0c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad0e:	4b80      	ldr	r3, [pc, #512]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad14:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ad16:	4b7e      	ldr	r3, [pc, #504]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ad1c:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800ad1e:	4b7c      	ldr	r3, [pc, #496]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad24:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 800ad26:	4b7a      	ldr	r3, [pc, #488]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ad2c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad2e:	4b78      	ldr	r3, [pc, #480]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ad34:	4b76      	ldr	r3, [pc, #472]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad36:	2203      	movs	r2, #3
 800ad38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800ad3a:	4b75      	ldr	r3, [pc, #468]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ad40:	4b73      	ldr	r3, [pc, #460]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800ad46:	4872      	ldr	r0, [pc, #456]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad48:	f7f7 f948 	bl	8001fdc <HAL_DMA_Init>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <HAL_SAI_MspInit+0x12e>
    {
      Error_Handler();
 800ad52:	f7ff fe67 	bl	800aa24 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800ad56:	2306      	movs	r3, #6
 800ad58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800ad74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4865      	ldr	r0, [pc, #404]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad7c:	f7f9 fc62 	bl	8004644 <HAL_DMAEx_ConfigMuxSync>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <HAL_SAI_MspInit+0x162>
    {
      Error_Handler();
 800ad86:	f7ff fe4d 	bl	800aa24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a60      	ldr	r2, [pc, #384]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ad92:	4a5f      	ldr	r2, [pc, #380]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a5d      	ldr	r2, [pc, #372]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ad9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ada0:	4a5b      	ldr	r2, [pc, #364]	; (800af10 <HAL_SAI_MspInit+0x2e8>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a5b      	ldr	r2, [pc, #364]	; (800af18 <HAL_SAI_MspInit+0x2f0>)
 800adac:	4293      	cmp	r3, r2
 800adae:	f040 80a1 	bne.w	800aef4 <HAL_SAI_MspInit+0x2cc>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800adb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 800adb8:	2300      	movs	r3, #0
 800adba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800adbe:	f107 0310 	add.w	r3, r7, #16
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fc fc56 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 800adce:	f7ff fe29 	bl	800aa24 <Error_Handler>
    }

    if (SAI4_client == 0)
 800add2:	4b52      	ldr	r3, [pc, #328]	; (800af1c <HAL_SAI_MspInit+0x2f4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10e      	bne.n	800adf8 <HAL_SAI_MspInit+0x1d0>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 800adda:	4b4a      	ldr	r3, [pc, #296]	; (800af04 <HAL_SAI_MspInit+0x2dc>)
 800addc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ade0:	4a48      	ldr	r2, [pc, #288]	; (800af04 <HAL_SAI_MspInit+0x2dc>)
 800ade2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ade6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800adea:	4b46      	ldr	r3, [pc, #280]	; (800af04 <HAL_SAI_MspInit+0x2dc>)
 800adec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adf4:	60bb      	str	r3, [r7, #8]
 800adf6:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 800adf8:	4b48      	ldr	r3, [pc, #288]	; (800af1c <HAL_SAI_MspInit+0x2f4>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3301      	adds	r3, #1
 800adfe:	4a47      	ldr	r2, [pc, #284]	; (800af1c <HAL_SAI_MspInit+0x2f4>)
 800ae00:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ae02:	2330      	movs	r3, #48	; 0x30
 800ae04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae14:	2300      	movs	r3, #0
 800ae16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ae24:	4619      	mov	r1, r3
 800ae26:	4838      	ldr	r0, [pc, #224]	; (800af08 <HAL_SAI_MspInit+0x2e0>)
 800ae28:	f7f9 fd24 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae32:	2302      	movs	r3, #2
 800ae34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4833      	ldr	r0, [pc, #204]	; (800af20 <HAL_SAI_MspInit+0x2f8>)
 800ae52:	f7f9 fd0f 	bl	8004874 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800ae56:	4b33      	ldr	r3, [pc, #204]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae58:	4a33      	ldr	r2, [pc, #204]	; (800af28 <HAL_SAI_MspInit+0x300>)
 800ae5a:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 800ae5c:	4b31      	ldr	r3, [pc, #196]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae5e:	220f      	movs	r2, #15
 800ae60:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae62:	4b30      	ldr	r3, [pc, #192]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae68:	4b2e      	ldr	r3, [pc, #184]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 800ae6e:	4b2d      	ldr	r3, [pc, #180]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae74:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae76:	4b2b      	ldr	r3, [pc, #172]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ae7c:	4b29      	ldr	r3, [pc, #164]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae82:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800ae84:	4b27      	ldr	r3, [pc, #156]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae8a:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae8c:	4b25      	ldr	r3, [pc, #148]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ae92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800ae94:	4823      	ldr	r0, [pc, #140]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800ae96:	f7f7 f8a1 	bl	8001fdc <HAL_DMA_Init>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_SAI_MspInit+0x27c>
    {
      Error_Handler();
 800aea0:	f7ff fdc0 	bl	800aa24 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800aea4:	230e      	movs	r3, #14
 800aea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 800aebc:	2301      	movs	r3, #1
 800aebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800aec2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800aec6:	4619      	mov	r1, r3
 800aec8:	4816      	ldr	r0, [pc, #88]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800aeca:	f7f9 fbbb 	bl	8004644 <HAL_DMAEx_ConfigMuxSync>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <HAL_SAI_MspInit+0x2b0>
    {
      Error_Handler();
 800aed4:	f7ff fda6 	bl	800aa24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a12      	ldr	r2, [pc, #72]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800aedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800aee0:	4a10      	ldr	r2, [pc, #64]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a0e      	ldr	r2, [pc, #56]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800aeea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800aeee:	4a0d      	ldr	r2, [pc, #52]	; (800af24 <HAL_SAI_MspInit+0x2fc>)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800aef4:	bf00      	nop
 800aef6:	37e8      	adds	r7, #232	; 0xe8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	40015824 	.word	0x40015824
 800af00:	240004ac 	.word	0x240004ac
 800af04:	58024400 	.word	0x58024400
 800af08:	58021000 	.word	0x58021000
 800af0c:	58021400 	.word	0x58021400
 800af10:	240007b0 	.word	0x240007b0
 800af14:	40020028 	.word	0x40020028
 800af18:	58005404 	.word	0x58005404
 800af1c:	240004b0 	.word	0x240004b0
 800af20:	58020c00 	.word	0x58020c00
 800af24:	240006f0 	.word	0x240006f0
 800af28:	5802541c 	.word	0x5802541c

0800af2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800af30:	e7fe      	b.n	800af30 <NMI_Handler+0x4>

0800af32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af32:	b480      	push	{r7}
 800af34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af36:	e7fe      	b.n	800af36 <HardFault_Handler+0x4>

0800af38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af3c:	e7fe      	b.n	800af3c <MemManage_Handler+0x4>

0800af3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af3e:	b480      	push	{r7}
 800af40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af42:	e7fe      	b.n	800af42 <BusFault_Handler+0x4>

0800af44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af48:	e7fe      	b.n	800af48 <UsageFault_Handler+0x4>

0800af4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800af4a:	b480      	push	{r7}
 800af4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af4e:	bf00      	nop
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af5c:	bf00      	nop
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af66:	b480      	push	{r7}
 800af68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af6a:	bf00      	nop
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af78:	f7f6 fde4 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af7c:	bf00      	nop
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 800af84:	2000      	movs	r0, #0
 800af86:	f7f6 fcb1 	bl	80018ec <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800af8a:	2001      	movs	r0, #1
 800af8c:	f7f9 ff35 	bl	8004dfa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 800af90:	bf00      	nop
 800af92:	bd80      	pop	{r7, pc}

0800af94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800af98:	4802      	ldr	r0, [pc, #8]	; (800afa4 <DMA1_Stream1_IRQHandler+0x10>)
 800af9a:	f7f8 f827 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800af9e:	bf00      	nop
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	240007b0 	.word	0x240007b0

0800afa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800afac:	4803      	ldr	r0, [pc, #12]	; (800afbc <DMA2_Stream0_IRQHandler+0x14>)
 800afae:	f7f8 f81d 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 800afb2:	2000      	movs	r0, #0
 800afb4:	f7f6 fc9a 	bl	80018ec <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800afb8:	bf00      	nop
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	24000514 	.word	0x24000514

0800afc0 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800afc4:	4802      	ldr	r0, [pc, #8]	; (800afd0 <I2C4_ER_IRQHandler+0x10>)
 800afc6:	f7fa fa2b 	bl	8005420 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800afca:	bf00      	nop
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	240004b8 	.word	0x240004b8

0800afd4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 800afd8:	4802      	ldr	r0, [pc, #8]	; (800afe4 <DMAMUX1_OVR_IRQHandler+0x10>)
 800afda:	f7f9 fbf9 	bl	80047d0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800afde:	bf00      	nop
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	240007b0 	.word	0x240007b0

0800afe8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 800afec:	4802      	ldr	r0, [pc, #8]	; (800aff8 <DMAMUX2_OVR_IRQHandler+0x10>)
 800afee:	f7f9 fbef 	bl	80047d0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800aff2:	bf00      	nop
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	240006f0 	.word	0x240006f0

0800affc <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800b000:	4803      	ldr	r0, [pc, #12]	; (800b010 <BDMA_Channel1_IRQHandler+0x14>)
 800b002:	f7f7 fff3 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 800b006:	2001      	movs	r0, #1
 800b008:	f7f6 fc70 	bl	80018ec <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800b00c:	bf00      	nop
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	240006f0 	.word	0x240006f0

0800b014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b014:	b480      	push	{r7}
 800b016:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b018:	4b32      	ldr	r3, [pc, #200]	; (800b0e4 <SystemInit+0xd0>)
 800b01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b01e:	4a31      	ldr	r2, [pc, #196]	; (800b0e4 <SystemInit+0xd0>)
 800b020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b028:	4b2f      	ldr	r3, [pc, #188]	; (800b0e8 <SystemInit+0xd4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 030f 	and.w	r3, r3, #15
 800b030:	2b06      	cmp	r3, #6
 800b032:	d807      	bhi.n	800b044 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b034:	4b2c      	ldr	r3, [pc, #176]	; (800b0e8 <SystemInit+0xd4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f023 030f 	bic.w	r3, r3, #15
 800b03c:	4a2a      	ldr	r2, [pc, #168]	; (800b0e8 <SystemInit+0xd4>)
 800b03e:	f043 0307 	orr.w	r3, r3, #7
 800b042:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b044:	4b29      	ldr	r3, [pc, #164]	; (800b0ec <SystemInit+0xd8>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a28      	ldr	r2, [pc, #160]	; (800b0ec <SystemInit+0xd8>)
 800b04a:	f043 0301 	orr.w	r3, r3, #1
 800b04e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b050:	4b26      	ldr	r3, [pc, #152]	; (800b0ec <SystemInit+0xd8>)
 800b052:	2200      	movs	r2, #0
 800b054:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b056:	4b25      	ldr	r3, [pc, #148]	; (800b0ec <SystemInit+0xd8>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	4924      	ldr	r1, [pc, #144]	; (800b0ec <SystemInit+0xd8>)
 800b05c:	4b24      	ldr	r3, [pc, #144]	; (800b0f0 <SystemInit+0xdc>)
 800b05e:	4013      	ands	r3, r2
 800b060:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b062:	4b21      	ldr	r3, [pc, #132]	; (800b0e8 <SystemInit+0xd4>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b06e:	4b1e      	ldr	r3, [pc, #120]	; (800b0e8 <SystemInit+0xd4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f023 030f 	bic.w	r3, r3, #15
 800b076:	4a1c      	ldr	r2, [pc, #112]	; (800b0e8 <SystemInit+0xd4>)
 800b078:	f043 0307 	orr.w	r3, r3, #7
 800b07c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b07e:	4b1b      	ldr	r3, [pc, #108]	; (800b0ec <SystemInit+0xd8>)
 800b080:	2200      	movs	r2, #0
 800b082:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b084:	4b19      	ldr	r3, [pc, #100]	; (800b0ec <SystemInit+0xd8>)
 800b086:	2200      	movs	r2, #0
 800b088:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b08a:	4b18      	ldr	r3, [pc, #96]	; (800b0ec <SystemInit+0xd8>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b090:	4b16      	ldr	r3, [pc, #88]	; (800b0ec <SystemInit+0xd8>)
 800b092:	4a18      	ldr	r2, [pc, #96]	; (800b0f4 <SystemInit+0xe0>)
 800b094:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b096:	4b15      	ldr	r3, [pc, #84]	; (800b0ec <SystemInit+0xd8>)
 800b098:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <SystemInit+0xe4>)
 800b09a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b09c:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <SystemInit+0xd8>)
 800b09e:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <SystemInit+0xe8>)
 800b0a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b0a2:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <SystemInit+0xd8>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b0a8:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <SystemInit+0xd8>)
 800b0aa:	4a14      	ldr	r2, [pc, #80]	; (800b0fc <SystemInit+0xe8>)
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b0ae:	4b0f      	ldr	r3, [pc, #60]	; (800b0ec <SystemInit+0xd8>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b0b4:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <SystemInit+0xd8>)
 800b0b6:	4a11      	ldr	r2, [pc, #68]	; (800b0fc <SystemInit+0xe8>)
 800b0b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b0ba:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <SystemInit+0xd8>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b0c0:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <SystemInit+0xd8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a09      	ldr	r2, [pc, #36]	; (800b0ec <SystemInit+0xd8>)
 800b0c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b0cc:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <SystemInit+0xd8>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b0d2:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <SystemInit+0xec>)
 800b0d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b0d8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b0da:	bf00      	nop
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	e000ed00 	.word	0xe000ed00
 800b0e8:	52002000 	.word	0x52002000
 800b0ec:	58024400 	.word	0x58024400
 800b0f0:	eaf6ed7f 	.word	0xeaf6ed7f
 800b0f4:	02020200 	.word	0x02020200
 800b0f8:	01ff0000 	.word	0x01ff0000
 800b0fc:	01010280 	.word	0x01010280
 800b100:	52004000 	.word	0x52004000

0800b104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b13c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b108:	f7ff ff84 	bl	800b014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b10c:	480c      	ldr	r0, [pc, #48]	; (800b140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b10e:	490d      	ldr	r1, [pc, #52]	; (800b144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b110:	4a0d      	ldr	r2, [pc, #52]	; (800b148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b114:	e002      	b.n	800b11c <LoopCopyDataInit>

0800b116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b11a:	3304      	adds	r3, #4

0800b11c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b11c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b11e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b120:	d3f9      	bcc.n	800b116 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b122:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b124:	4c0a      	ldr	r4, [pc, #40]	; (800b150 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b126:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b128:	e001      	b.n	800b12e <LoopFillZerobss>

0800b12a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b12a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b12c:	3204      	adds	r2, #4

0800b12e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b12e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b130:	d3fb      	bcc.n	800b12a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b132:	f001 fedd 	bl	800cef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b136:	f7ff f911 	bl	800a35c <main>
  bx  lr
 800b13a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b13c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800b140:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b144:	2400048c 	.word	0x2400048c
  ldr r2, =_sidata
 800b148:	0800d5b8 	.word	0x0800d5b8
  ldr r2, =_sbss
 800b14c:	2400048c 	.word	0x2400048c
  ldr r4, =_ebss
 800b150:	240008a4 	.word	0x240008a4

0800b154 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b154:	e7fe      	b.n	800b154 <ADC3_IRQHandler>
	...

0800b158 <D16_GENERIC>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	b089      	sub	sp, #36	; 0x24
 800b15e:	6993      	ldr	r3, [r2, #24]
 800b160:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b162:	9103      	str	r1, [sp, #12]
 800b164:	9307      	str	r3, [sp, #28]
 800b166:	69d3      	ldr	r3, [r2, #28]
 800b168:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 800b16c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800b170:	9106      	str	r1, [sp, #24]
 800b172:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800b176:	2d00      	cmp	r5, #0
 800b178:	d063      	beq.n	800b242 <D16_GENERIC+0xea>
 800b17a:	f001 0520 	and.w	r5, r1, #32
 800b17e:	f001 0110 	and.w	r1, r1, #16
 800b182:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800b264 <D16_GENERIC+0x10c>
 800b186:	46c1      	mov	r9, r8
 800b188:	9104      	str	r1, [sp, #16]
 800b18a:	2100      	movs	r1, #0
 800b18c:	9505      	str	r5, [sp, #20]
 800b18e:	e04d      	b.n	800b22c <D16_GENERIC+0xd4>
 800b190:	5d87      	ldrb	r7, [r0, r6]
 800b192:	7805      	ldrb	r5, [r0, #0]
 800b194:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800b198:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800b19c:	b2fe      	uxtb	r6, r7
 800b19e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800b1a2:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800b1a6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 800b1aa:	441d      	add	r5, r3
 800b1ac:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800b1b0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b1b4:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800b1b8:	0a9b      	lsrs	r3, r3, #10
 800b1ba:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800b1be:	4d27      	ldr	r5, [pc, #156]	; (800b25c <D16_GENERIC+0x104>)
 800b1c0:	fb26 c505 	smlad	r5, r6, r5, ip
 800b1c4:	4f26      	ldr	r7, [pc, #152]	; (800b260 <D16_GENERIC+0x108>)
 800b1c6:	fb26 fc07 	smuad	ip, r6, r7
 800b1ca:	9e04      	ldr	r6, [sp, #16]
 800b1cc:	f101 0801 	add.w	r8, r1, #1
 800b1d0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800b1d4:	b1ae      	cbz	r6, 800b202 <D16_GENERIC+0xaa>
 800b1d6:	442c      	add	r4, r5
 800b1d8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b1dc:	eba4 040a 	sub.w	r4, r4, sl
 800b1e0:	46aa      	mov	sl, r5
 800b1e2:	17e7      	asrs	r7, r4, #31
 800b1e4:	fba4 450b 	umull	r4, r5, r4, fp
 800b1e8:	e9cd 4500 	strd	r4, r5, [sp]
 800b1ec:	fb0b 5407 	mla	r4, fp, r7, r5
 800b1f0:	9401      	str	r4, [sp, #4]
 800b1f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b1f6:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b1fa:	f145 0500 	adc.w	r5, r5, #0
 800b1fe:	006c      	lsls	r4, r5, #1
 800b200:	4625      	mov	r5, r4
 800b202:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b206:	042d      	lsls	r5, r5, #16
 800b208:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b20c:	2700      	movs	r7, #0
 800b20e:	fb01 fb0b 	mul.w	fp, r1, fp
 800b212:	fa1f f188 	uxth.w	r1, r8
 800b216:	fbc9 6705 	smlal	r6, r7, r9, r5
 800b21a:	9e03      	ldr	r6, [sp, #12]
 800b21c:	10bd      	asrs	r5, r7, #2
 800b21e:	f305 050f 	ssat	r5, #16, r5
 800b222:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b226:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b228:	428d      	cmp	r5, r1
 800b22a:	d90a      	bls.n	800b242 <D16_GENERIC+0xea>
 800b22c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b22e:	2d01      	cmp	r5, #1
 800b230:	b2ee      	uxtb	r6, r5
 800b232:	d1ad      	bne.n	800b190 <D16_GENERIC+0x38>
 800b234:	9d05      	ldr	r5, [sp, #20]
 800b236:	f850 7b02 	ldr.w	r7, [r0], #2
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	d0ae      	beq.n	800b19c <D16_GENERIC+0x44>
 800b23e:	ba7f      	rev16	r7, r7
 800b240:	e7ac      	b.n	800b19c <D16_GENERIC+0x44>
 800b242:	2000      	movs	r0, #0
 800b244:	9906      	ldr	r1, [sp, #24]
 800b246:	61d3      	str	r3, [r2, #28]
 800b248:	9b07      	ldr	r3, [sp, #28]
 800b24a:	f8c2 c008 	str.w	ip, [r2, #8]
 800b24e:	60d1      	str	r1, [r2, #12]
 800b250:	6193      	str	r3, [r2, #24]
 800b252:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800b256:	b009      	add	sp, #36	; 0x24
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	00030001 	.word	0x00030001
 800b260:	00010003 	.word	0x00010003
 800b264:	24000000 	.word	0x24000000

0800b268 <D24_GENERIC>:
 800b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b270:	b089      	sub	sp, #36	; 0x24
 800b272:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	6993      	ldr	r3, [r2, #24]
 800b278:	9104      	str	r1, [sp, #16]
 800b27a:	9307      	str	r3, [sp, #28]
 800b27c:	69d1      	ldr	r1, [r2, #28]
 800b27e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b282:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800b286:	2e00      	cmp	r6, #0
 800b288:	f000 8088 	beq.w	800b39c <D24_GENERIC+0x134>
 800b28c:	f005 0620 	and.w	r6, r5, #32
 800b290:	f005 0510 	and.w	r5, r5, #16
 800b294:	f04f 0c00 	mov.w	ip, #0
 800b298:	f8df e140 	ldr.w	lr, [pc, #320]	; 800b3dc <D24_GENERIC+0x174>
 800b29c:	9606      	str	r6, [sp, #24]
 800b29e:	9505      	str	r5, [sp, #20]
 800b2a0:	e064      	b.n	800b36c <D24_GENERIC+0x104>
 800b2a2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800b2a6:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800b2aa:	f810 b007 	ldrb.w	fp, [r0, r7]
 800b2ae:	042d      	lsls	r5, r5, #16
 800b2b0:	19f0      	adds	r0, r6, r7
 800b2b2:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800b2b6:	44a9      	add	r9, r5
 800b2b8:	fa5f f689 	uxtb.w	r6, r9
 800b2bc:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800b2c0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800b2c4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800b2c8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800b2cc:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800b2d0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800b2d4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b2d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b2dc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800b2e0:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b2e4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b2e8:	4d3a      	ldr	r5, [pc, #232]	; (800b3d4 <D24_GENERIC+0x16c>)
 800b2ea:	fb26 8705 	smlad	r7, r6, r5, r8
 800b2ee:	4d3a      	ldr	r5, [pc, #232]	; (800b3d8 <D24_GENERIC+0x170>)
 800b2f0:	fb26 3805 	smlad	r8, r6, r5, r3
 800b2f4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b2f8:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800b302:	fb26 f603 	smuad	r6, r6, r3
 800b306:	eb0c 0903 	add.w	r9, ip, r3
 800b30a:	eb0b 0306 	add.w	r3, fp, r6
 800b30e:	9e05      	ldr	r6, [sp, #20]
 800b310:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800b314:	b1ae      	cbz	r6, 800b342 <D24_GENERIC+0xda>
 800b316:	442c      	add	r4, r5
 800b318:	9e03      	ldr	r6, [sp, #12]
 800b31a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b31e:	1ba4      	subs	r4, r4, r6
 800b320:	9503      	str	r5, [sp, #12]
 800b322:	17e7      	asrs	r7, r4, #31
 800b324:	fba4 450b 	umull	r4, r5, r4, fp
 800b328:	e9cd 4500 	strd	r4, r5, [sp]
 800b32c:	fb0b 5407 	mla	r4, fp, r7, r5
 800b330:	9401      	str	r4, [sp, #4]
 800b332:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b336:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b33a:	f145 0500 	adc.w	r5, r5, #0
 800b33e:	006c      	lsls	r4, r5, #1
 800b340:	4625      	mov	r5, r4
 800b342:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b346:	03ad      	lsls	r5, r5, #14
 800b348:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b34c:	2700      	movs	r7, #0
 800b34e:	fb0c fb0b 	mul.w	fp, ip, fp
 800b352:	fa1f fc89 	uxth.w	ip, r9
 800b356:	fbca 6705 	smlal	r6, r7, sl, r5
 800b35a:	9e04      	ldr	r6, [sp, #16]
 800b35c:	10bd      	asrs	r5, r7, #2
 800b35e:	f305 050f 	ssat	r5, #16, r5
 800b362:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b366:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b368:	4565      	cmp	r5, ip
 800b36a:	d917      	bls.n	800b39c <D24_GENERIC+0x134>
 800b36c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b36e:	f890 9000 	ldrb.w	r9, [r0]
 800b372:	b2ef      	uxtb	r7, r5
 800b374:	2d01      	cmp	r5, #1
 800b376:	b23e      	sxth	r6, r7
 800b378:	d193      	bne.n	800b2a2 <D24_GENERIC+0x3a>
 800b37a:	9d06      	ldr	r5, [sp, #24]
 800b37c:	b1dd      	cbz	r5, 800b3b6 <D24_GENERIC+0x14e>
 800b37e:	78c7      	ldrb	r7, [r0, #3]
 800b380:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800b384:	f01c 0f01 	tst.w	ip, #1
 800b388:	ea4f 2507 	mov.w	r5, r7, lsl #8
 800b38c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 800b390:	d11a      	bne.n	800b3c8 <D24_GENERIC+0x160>
 800b392:	f890 9001 	ldrb.w	r9, [r0, #1]
 800b396:	3002      	adds	r0, #2
 800b398:	44b1      	add	r9, r6
 800b39a:	e78d      	b.n	800b2b8 <D24_GENERIC+0x50>
 800b39c:	6093      	str	r3, [r2, #8]
 800b39e:	2000      	movs	r0, #0
 800b3a0:	9b03      	ldr	r3, [sp, #12]
 800b3a2:	f8c2 800c 	str.w	r8, [r2, #12]
 800b3a6:	6153      	str	r3, [r2, #20]
 800b3a8:	9b07      	ldr	r3, [sp, #28]
 800b3aa:	61d1      	str	r1, [r2, #28]
 800b3ac:	6114      	str	r4, [r2, #16]
 800b3ae:	6193      	str	r3, [r2, #24]
 800b3b0:	b009      	add	sp, #36	; 0x24
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	7845      	ldrb	r5, [r0, #1]
 800b3b8:	3003      	adds	r0, #3
 800b3ba:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800b3be:	022d      	lsls	r5, r5, #8
 800b3c0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b3c4:	44a9      	add	r9, r5
 800b3c6:	e777      	b.n	800b2b8 <D24_GENERIC+0x50>
 800b3c8:	7886      	ldrb	r6, [r0, #2]
 800b3ca:	3004      	adds	r0, #4
 800b3cc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800b3d0:	44a9      	add	r9, r5
 800b3d2:	e771      	b.n	800b2b8 <D24_GENERIC+0x50>
 800b3d4:	00030001 	.word	0x00030001
 800b3d8:	00060007 	.word	0x00060007
 800b3dc:	24000000 	.word	0x24000000

0800b3e0 <D32_GENERIC>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800b3e8:	b089      	sub	sp, #36	; 0x24
 800b3ea:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b3ec:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b3ee:	9302      	str	r3, [sp, #8]
 800b3f0:	6993      	ldr	r3, [r2, #24]
 800b3f2:	9104      	str	r1, [sp, #16]
 800b3f4:	9307      	str	r3, [sp, #28]
 800b3f6:	9503      	str	r5, [sp, #12]
 800b3f8:	69d1      	ldr	r1, [r2, #28]
 800b3fa:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b3fc:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800b400:	2e00      	cmp	r6, #0
 800b402:	f000 8097 	beq.w	800b534 <D32_GENERIC+0x154>
 800b406:	f005 0620 	and.w	r6, r5, #32
 800b40a:	f005 0510 	and.w	r5, r5, #16
 800b40e:	f04f 0e00 	mov.w	lr, #0
 800b412:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b564 <D32_GENERIC+0x184>
 800b416:	9606      	str	r6, [sp, #24]
 800b418:	9505      	str	r5, [sp, #20]
 800b41a:	e079      	b.n	800b510 <D32_GENERIC+0x130>
 800b41c:	783d      	ldrb	r5, [r7, #0]
 800b41e:	f810 b009 	ldrb.w	fp, [r0, r9]
 800b422:	042d      	lsls	r5, r5, #16
 800b424:	f810 a006 	ldrb.w	sl, [r0, r6]
 800b428:	f890 9000 	ldrb.w	r9, [r0]
 800b42c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800b430:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800b434:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800b438:	44a9      	add	r9, r5
 800b43a:	fa5f f789 	uxtb.w	r7, r9
 800b43e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800b442:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800b446:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b44a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b44e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800b452:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800b456:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800b45a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800b45e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b462:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800b466:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b46a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b46e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800b472:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b476:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800b47a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800b47e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b482:	4d34      	ldr	r5, [pc, #208]	; (800b554 <D32_GENERIC+0x174>)
 800b484:	fb29 8805 	smlad	r8, r9, r5, r8
 800b488:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800b48c:	fb26 8705 	smlad	r7, r6, r5, r8
 800b490:	4d31      	ldr	r5, [pc, #196]	; (800b558 <D32_GENERIC+0x178>)
 800b492:	fb29 3305 	smlad	r3, r9, r5, r3
 800b496:	4d31      	ldr	r5, [pc, #196]	; (800b55c <D32_GENERIC+0x17c>)
 800b498:	fb26 3805 	smlad	r8, r6, r5, r3
 800b49c:	2301      	movs	r3, #1
 800b49e:	fb29 f903 	smuad	r9, r9, r3
 800b4a2:	4b2f      	ldr	r3, [pc, #188]	; (800b560 <D32_GENERIC+0x180>)
 800b4a4:	fb26 9303 	smlad	r3, r6, r3, r9
 800b4a8:	9e05      	ldr	r6, [sp, #20]
 800b4aa:	f10e 0901 	add.w	r9, lr, #1
 800b4ae:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800b4b2:	b1ae      	cbz	r6, 800b4e0 <D32_GENERIC+0x100>
 800b4b4:	442c      	add	r4, r5
 800b4b6:	9e02      	ldr	r6, [sp, #8]
 800b4b8:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b4bc:	1ba4      	subs	r4, r4, r6
 800b4be:	9502      	str	r5, [sp, #8]
 800b4c0:	17e7      	asrs	r7, r4, #31
 800b4c2:	fba4 450a 	umull	r4, r5, r4, sl
 800b4c6:	e9cd 4500 	strd	r4, r5, [sp]
 800b4ca:	fb0a 5407 	mla	r4, sl, r7, r5
 800b4ce:	9401      	str	r4, [sp, #4]
 800b4d0:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b4d4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b4d8:	f145 0500 	adc.w	r5, r5, #0
 800b4dc:	006c      	lsls	r4, r5, #1
 800b4de:	4625      	mov	r5, r4
 800b4e0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800b4e4:	036d      	lsls	r5, r5, #13
 800b4e6:	9f03      	ldr	r7, [sp, #12]
 800b4e8:	fb0e fb0a 	mul.w	fp, lr, sl
 800b4ec:	fa1f fe89 	uxth.w	lr, r9
 800b4f0:	f04f 0a00 	mov.w	sl, #0
 800b4f4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b4f8:	9e04      	ldr	r6, [sp, #16]
 800b4fa:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800b4fe:	4657      	mov	r7, sl
 800b500:	10bd      	asrs	r5, r7, #2
 800b502:	f305 050f 	ssat	r5, #16, r5
 800b506:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b50a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b50c:	4575      	cmp	r5, lr
 800b50e:	d911      	bls.n	800b534 <D32_GENERIC+0x154>
 800b510:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b512:	b2ee      	uxtb	r6, r5
 800b514:	2d01      	cmp	r5, #1
 800b516:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800b51a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800b51e:	f47f af7d 	bne.w	800b41c <D32_GENERIC+0x3c>
 800b522:	1d05      	adds	r5, r0, #4
 800b524:	f8d0 9000 	ldr.w	r9, [r0]
 800b528:	9806      	ldr	r0, [sp, #24]
 800b52a:	b180      	cbz	r0, 800b54e <D32_GENERIC+0x16e>
 800b52c:	fa99 f999 	rev16.w	r9, r9
 800b530:	4628      	mov	r0, r5
 800b532:	e782      	b.n	800b43a <D32_GENERIC+0x5a>
 800b534:	6093      	str	r3, [r2, #8]
 800b536:	2000      	movs	r0, #0
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	f8c2 800c 	str.w	r8, [r2, #12]
 800b53e:	6153      	str	r3, [r2, #20]
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	61d1      	str	r1, [r2, #28]
 800b544:	6114      	str	r4, [r2, #16]
 800b546:	6193      	str	r3, [r2, #24]
 800b548:	b009      	add	sp, #36	; 0x24
 800b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54e:	4628      	mov	r0, r5
 800b550:	e773      	b.n	800b43a <D32_GENERIC+0x5a>
 800b552:	bf00      	nop
 800b554:	00060003 	.word	0x00060003
 800b558:	000a000c 	.word	0x000a000c
 800b55c:	000c000a 	.word	0x000c000a
 800b560:	00030006 	.word	0x00030006
 800b564:	24000000 	.word	0x24000000

0800b568 <D48_GENERIC>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	6913      	ldr	r3, [r2, #16]
 800b56e:	b089      	sub	sp, #36	; 0x24
 800b570:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b572:	9301      	str	r3, [sp, #4]
 800b574:	6953      	ldr	r3, [r2, #20]
 800b576:	9104      	str	r1, [sp, #16]
 800b578:	9302      	str	r3, [sp, #8]
 800b57a:	6993      	ldr	r3, [r2, #24]
 800b57c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800b580:	9307      	str	r3, [sp, #28]
 800b582:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800b586:	9100      	str	r1, [sp, #0]
 800b588:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b58a:	9103      	str	r1, [sp, #12]
 800b58c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b58e:	2c00      	cmp	r4, #0
 800b590:	f000 80be 	beq.w	800b710 <D48_GENERIC+0x1a8>
 800b594:	f001 0420 	and.w	r4, r1, #32
 800b598:	f001 0110 	and.w	r1, r1, #16
 800b59c:	f04f 0e00 	mov.w	lr, #0
 800b5a0:	9105      	str	r1, [sp, #20]
 800b5a2:	9406      	str	r4, [sp, #24]
 800b5a4:	4962      	ldr	r1, [pc, #392]	; (800b730 <D48_GENERIC+0x1c8>)
 800b5a6:	e0a0      	b.n	800b6ea <D48_GENERIC+0x182>
 800b5a8:	eb00 0608 	add.w	r6, r0, r8
 800b5ac:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b5b0:	f810 9005 	ldrb.w	r9, [r0, r5]
 800b5b4:	5df4      	ldrb	r4, [r6, r7]
 800b5b6:	443e      	add	r6, r7
 800b5b8:	f890 b000 	ldrb.w	fp, [r0]
 800b5bc:	0420      	lsls	r0, r4, #16
 800b5be:	eb06 0408 	add.w	r4, r6, r8
 800b5c2:	f816 6008 	ldrb.w	r6, [r6, r8]
 800b5c6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800b5ca:	f814 8007 	ldrb.w	r8, [r4, r7]
 800b5ce:	4427      	add	r7, r4
 800b5d0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800b5d4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 800b5d8:	eb0a 040b 	add.w	r4, sl, fp
 800b5dc:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800b5e0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b5e4:	b2f7      	uxtb	r7, r6
 800b5e6:	b2e6      	uxtb	r6, r4
 800b5e8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b5ec:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b5f0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b5f4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b5f8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800b5fc:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800b600:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 800b604:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800b608:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800b60c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b610:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 800b614:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b618:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800b61c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b620:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800b624:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b628:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b62c:	9d00      	ldr	r5, [sp, #0]
 800b62e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b632:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b636:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800b63a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b63e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800b642:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800b646:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b64a:	4c3a      	ldr	r4, [pc, #232]	; (800b734 <D48_GENERIC+0x1cc>)
 800b64c:	fb26 5a04 	smlad	sl, r6, r4, r5
 800b650:	4c39      	ldr	r4, [pc, #228]	; (800b738 <D48_GENERIC+0x1d0>)
 800b652:	fb29 aa04 	smlad	sl, r9, r4, sl
 800b656:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b65a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800b65e:	4c37      	ldr	r4, [pc, #220]	; (800b73c <D48_GENERIC+0x1d4>)
 800b660:	fb26 3304 	smlad	r3, r6, r4, r3
 800b664:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b668:	fb29 3304 	smlad	r3, r9, r4, r3
 800b66c:	4c34      	ldr	r4, [pc, #208]	; (800b740 <D48_GENERIC+0x1d8>)
 800b66e:	fb27 3304 	smlad	r3, r7, r4, r3
 800b672:	2501      	movs	r5, #1
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	fb26 f605 	smuad	r6, r6, r5
 800b67a:	4b32      	ldr	r3, [pc, #200]	; (800b744 <D48_GENERIC+0x1dc>)
 800b67c:	fb29 6903 	smlad	r9, r9, r3, r6
 800b680:	4b31      	ldr	r3, [pc, #196]	; (800b748 <D48_GENERIC+0x1e0>)
 800b682:	fb27 9303 	smlad	r3, r7, r3, r9
 800b686:	9c05      	ldr	r4, [sp, #20]
 800b688:	eb0e 0805 	add.w	r8, lr, r5
 800b68c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800b690:	b19c      	cbz	r4, 800b6ba <D48_GENERIC+0x152>
 800b692:	9c01      	ldr	r4, [sp, #4]
 800b694:	9d02      	ldr	r5, [sp, #8]
 800b696:	4454      	add	r4, sl
 800b698:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800b69c:	f8cd a008 	str.w	sl, [sp, #8]
 800b6a0:	1b64      	subs	r4, r4, r5
 800b6a2:	fba4 ab09 	umull	sl, fp, r4, r9
 800b6a6:	17e7      	asrs	r7, r4, #31
 800b6a8:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800b6ac:	fb09 bb07 	mla	fp, r9, r7, fp
 800b6b0:	f14b 0500 	adc.w	r5, fp, #0
 800b6b4:	006c      	lsls	r4, r5, #1
 800b6b6:	46a2      	mov	sl, r4
 800b6b8:	9401      	str	r4, [sp, #4]
 800b6ba:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800b6bc:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800b6c0:	9d03      	ldr	r5, [sp, #12]
 800b6c2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b6c6:	fb0e f606 	mul.w	r6, lr, r6
 800b6ca:	fa1f fe88 	uxth.w	lr, r8
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	fbc5 780a 	smlal	r7, r8, r5, sl
 800b6d6:	4645      	mov	r5, r8
 800b6d8:	10ac      	asrs	r4, r5, #2
 800b6da:	9d04      	ldr	r5, [sp, #16]
 800b6dc:	f304 040f 	ssat	r4, #16, r4
 800b6e0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800b6e4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b6e6:	4574      	cmp	r4, lr
 800b6e8:	d912      	bls.n	800b710 <D48_GENERIC+0x1a8>
 800b6ea:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b6ec:	b2e5      	uxtb	r5, r4
 800b6ee:	2c01      	cmp	r4, #1
 800b6f0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b6f4:	f1c5 0700 	rsb	r7, r5, #0
 800b6f8:	f47f af56 	bne.w	800b5a8 <D48_GENERIC+0x40>
 800b6fc:	9d06      	ldr	r5, [sp, #24]
 800b6fe:	e9d0 4600 	ldrd	r4, r6, [r0]
 800b702:	3006      	adds	r0, #6
 800b704:	2d00      	cmp	r5, #0
 800b706:	f43f af6b 	beq.w	800b5e0 <D48_GENERIC+0x78>
 800b70a:	ba64      	rev16	r4, r4
 800b70c:	ba76      	rev16	r6, r6
 800b70e:	e767      	b.n	800b5e0 <D48_GENERIC+0x78>
 800b710:	6093      	str	r3, [r2, #8]
 800b712:	2000      	movs	r0, #0
 800b714:	9b00      	ldr	r3, [sp, #0]
 800b716:	f8c2 c01c 	str.w	ip, [r2, #28]
 800b71a:	60d3      	str	r3, [r2, #12]
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	6113      	str	r3, [r2, #16]
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	6153      	str	r3, [r2, #20]
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	6193      	str	r3, [r2, #24]
 800b728:	b009      	add	sp, #36	; 0x24
 800b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72e:	bf00      	nop
 800b730:	24000000 	.word	0x24000000
 800b734:	000f000a 	.word	0x000f000a
 800b738:	00060003 	.word	0x00060003
 800b73c:	00150019 	.word	0x00150019
 800b740:	00190015 	.word	0x00190015
 800b744:	00030006 	.word	0x00030006
 800b748:	000a000f 	.word	0x000a000f

0800b74c <D64_GENERIC>:
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	6913      	ldr	r3, [r2, #16]
 800b752:	b089      	sub	sp, #36	; 0x24
 800b754:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	6953      	ldr	r3, [r2, #20]
 800b75a:	9105      	str	r1, [sp, #20]
 800b75c:	9303      	str	r3, [sp, #12]
 800b75e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b760:	6993      	ldr	r3, [r2, #24]
 800b762:	69d4      	ldr	r4, [r2, #28]
 800b764:	9307      	str	r3, [sp, #28]
 800b766:	9504      	str	r5, [sp, #16]
 800b768:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800b76c:	2900      	cmp	r1, #0
 800b76e:	f000 80e8 	beq.w	800b942 <D64_GENERIC+0x1f6>
 800b772:	6a11      	ldr	r1, [r2, #32]
 800b774:	2500      	movs	r5, #0
 800b776:	46b3      	mov	fp, r6
 800b778:	9302      	str	r3, [sp, #8]
 800b77a:	9106      	str	r1, [sp, #24]
 800b77c:	4978      	ldr	r1, [pc, #480]	; (800b960 <D64_GENERIC+0x214>)
 800b77e:	e0cc      	b.n	800b91a <D64_GENERIC+0x1ce>
 800b780:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800b784:	f1ce 0c00 	rsb	ip, lr, #0
 800b788:	f890 9000 	ldrb.w	r9, [r0]
 800b78c:	eb00 0708 	add.w	r7, r0, r8
 800b790:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b794:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 800b798:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b79c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 800b7a0:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b7a4:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b7a8:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b7ac:	f817 000c 	ldrb.w	r0, [r7, ip]
 800b7b0:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b7b4:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 800b7b8:	0400      	lsls	r0, r0, #16
 800b7ba:	4467      	add	r7, ip
 800b7bc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b7c0:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b7c4:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 800b7c8:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800b7cc:	444e      	add	r6, r9
 800b7ce:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b7d2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800b7d6:	44c2      	add	sl, r8
 800b7d8:	b2f7      	uxtb	r7, r6
 800b7da:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b7de:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800b7e2:	0e36      	lsrs	r6, r6, #24
 800b7e4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b7e8:	fa5f fc8a 	uxtb.w	ip, sl
 800b7ec:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b7f0:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b7f4:	443c      	add	r4, r7
 800b7f6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800b7fa:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b7fe:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b802:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b806:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b80a:	4b56      	ldr	r3, [pc, #344]	; (800b964 <D64_GENERIC+0x218>)
 800b80c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800b810:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b814:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b818:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800b81c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b820:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b824:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b828:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b82c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b830:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b834:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b838:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800b83c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b840:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b844:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 800b848:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b84c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b850:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b854:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b858:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800b85c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b860:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b864:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b868:	fb28 b903 	smlad	r9, r8, r3, fp
 800b86c:	4b3e      	ldr	r3, [pc, #248]	; (800b968 <D64_GENERIC+0x21c>)
 800b86e:	fb26 9903 	smlad	r9, r6, r3, r9
 800b872:	4b3e      	ldr	r3, [pc, #248]	; (800b96c <D64_GENERIC+0x220>)
 800b874:	fb2c 9703 	smlad	r7, ip, r3, r9
 800b878:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b87c:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b880:	4f3b      	ldr	r7, [pc, #236]	; (800b970 <D64_GENERIC+0x224>)
 800b882:	9b02      	ldr	r3, [sp, #8]
 800b884:	fb28 3307 	smlad	r3, r8, r7, r3
 800b888:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b88c:	4f39      	ldr	r7, [pc, #228]	; (800b974 <D64_GENERIC+0x228>)
 800b88e:	fb26 3307 	smlad	r3, r6, r7, r3
 800b892:	fb2c 3b17 	smladx	fp, ip, r7, r3
 800b896:	f04f 0e01 	mov.w	lr, #1
 800b89a:	fb28 f80e 	smuad	r8, r8, lr
 800b89e:	4b36      	ldr	r3, [pc, #216]	; (800b978 <D64_GENERIC+0x22c>)
 800b8a0:	fb26 8603 	smlad	r6, r6, r3, r8
 800b8a4:	4b35      	ldr	r3, [pc, #212]	; (800b97c <D64_GENERIC+0x230>)
 800b8a6:	fb2c 6c03 	smlad	ip, ip, r3, r6
 800b8aa:	4b35      	ldr	r3, [pc, #212]	; (800b980 <D64_GENERIC+0x234>)
 800b8ac:	fb2a c303 	smlad	r3, sl, r3, ip
 800b8b0:	9f06      	ldr	r7, [sp, #24]
 800b8b2:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b8b6:	9302      	str	r3, [sp, #8]
 800b8b8:	b1cf      	cbz	r7, 800b8ee <D64_GENERIC+0x1a2>
 800b8ba:	9b00      	ldr	r3, [sp, #0]
 800b8bc:	444b      	add	r3, r9
 800b8be:	461e      	mov	r6, r3
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8c6:	1af6      	subs	r6, r6, r3
 800b8c8:	46b0      	mov	r8, r6
 800b8ca:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b8ce:	e9cd 8900 	strd	r8, r9, [sp]
 800b8d2:	fba6 8907 	umull	r8, r9, r6, r7
 800b8d6:	9e01      	ldr	r6, [sp, #4]
 800b8d8:	fb07 9306 	mla	r3, r7, r6, r9
 800b8dc:	4646      	mov	r6, r8
 800b8de:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b8e2:	f143 0700 	adc.w	r7, r3, #0
 800b8e6:	fa07 f30e 	lsl.w	r3, r7, lr
 800b8ea:	4699      	mov	r9, r3
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b8f2:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b8f6:	9b04      	ldr	r3, [sp, #16]
 800b8f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8fc:	2700      	movs	r7, #0
 800b8fe:	fb05 fc0c 	mul.w	ip, r5, ip
 800b902:	3501      	adds	r5, #1
 800b904:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b908:	9b05      	ldr	r3, [sp, #20]
 800b90a:	10be      	asrs	r6, r7, #2
 800b90c:	f306 060f 	ssat	r6, #16, r6
 800b910:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 800b914:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b916:	42ae      	cmp	r6, r5
 800b918:	dd11      	ble.n	800b93e <D64_GENERIC+0x1f2>
 800b91a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800b91e:	f1be 0f01 	cmp.w	lr, #1
 800b922:	f47f af2d 	bne.w	800b780 <D64_GENERIC+0x34>
 800b926:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b928:	f100 0c08 	add.w	ip, r0, #8
 800b92c:	06bb      	lsls	r3, r7, #26
 800b92e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800b932:	d513      	bpl.n	800b95c <D64_GENERIC+0x210>
 800b934:	ba76      	rev16	r6, r6
 800b936:	fa9a fa9a 	rev16.w	sl, sl
 800b93a:	4660      	mov	r0, ip
 800b93c:	e74c      	b.n	800b7d8 <D64_GENERIC+0x8c>
 800b93e:	465e      	mov	r6, fp
 800b940:	9b02      	ldr	r3, [sp, #8]
 800b942:	6093      	str	r3, [r2, #8]
 800b944:	2000      	movs	r0, #0
 800b946:	9b00      	ldr	r3, [sp, #0]
 800b948:	60d6      	str	r6, [r2, #12]
 800b94a:	6113      	str	r3, [r2, #16]
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	61d4      	str	r4, [r2, #28]
 800b950:	6153      	str	r3, [r2, #20]
 800b952:	9b07      	ldr	r3, [sp, #28]
 800b954:	6193      	str	r3, [r2, #24]
 800b956:	b009      	add	sp, #36	; 0x24
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	4660      	mov	r0, ip
 800b95e:	e73b      	b.n	800b7d8 <D64_GENERIC+0x8c>
 800b960:	24000000 	.word	0x24000000
 800b964:	001c0015 	.word	0x001c0015
 800b968:	000f000a 	.word	0x000f000a
 800b96c:	00060003 	.word	0x00060003
 800b970:	0024002a 	.word	0x0024002a
 800b974:	002e0030 	.word	0x002e0030
 800b978:	00030006 	.word	0x00030006
 800b97c:	000a000f 	.word	0x000a000f
 800b980:	0015001c 	.word	0x0015001c

0800b984 <D80_GENERIC>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	b08b      	sub	sp, #44	; 0x2c
 800b98a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b98c:	9107      	str	r1, [sp, #28]
 800b98e:	6911      	ldr	r1, [r2, #16]
 800b990:	9104      	str	r1, [sp, #16]
 800b992:	6951      	ldr	r1, [r2, #20]
 800b994:	9105      	str	r1, [sp, #20]
 800b996:	6991      	ldr	r1, [r2, #24]
 800b998:	9109      	str	r1, [sp, #36]	; 0x24
 800b99a:	69d1      	ldr	r1, [r2, #28]
 800b99c:	9102      	str	r1, [sp, #8]
 800b99e:	6891      	ldr	r1, [r2, #8]
 800b9a0:	9103      	str	r1, [sp, #12]
 800b9a2:	68d1      	ldr	r1, [r2, #12]
 800b9a4:	9101      	str	r1, [sp, #4]
 800b9a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b9a8:	9106      	str	r1, [sp, #24]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 810b 	beq.w	800bbc6 <D80_GENERIC+0x242>
 800b9b0:	6a13      	ldr	r3, [r2, #32]
 800b9b2:	f04f 0800 	mov.w	r8, #0
 800b9b6:	f8df c260 	ldr.w	ip, [pc, #608]	; 800bc18 <D80_GENERIC+0x294>
 800b9ba:	9308      	str	r3, [sp, #32]
 800b9bc:	9200      	str	r2, [sp, #0]
 800b9be:	e0ee      	b.n	800bb9e <D80_GENERIC+0x21a>
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	f890 e000 	ldrb.w	lr, [r0]
 800b9c6:	b219      	sxth	r1, r3
 800b9c8:	425c      	negs	r4, r3
 800b9ca:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b9ce:	004e      	lsls	r6, r1, #1
 800b9d0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b9d4:	4431      	add	r1, r6
 800b9d6:	1843      	adds	r3, r0, r1
 800b9d8:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b9dc:	1919      	adds	r1, r3, r4
 800b9de:	5d1b      	ldrb	r3, [r3, r4]
 800b9e0:	1948      	adds	r0, r1, r5
 800b9e2:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	1907      	adds	r7, r0, r4
 800b9ea:	5d01      	ldrb	r1, [r0, r4]
 800b9ec:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b9f0:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b9f4:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b9f8:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b9fc:	0409      	lsls	r1, r1, #16
 800b9fe:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800ba02:	eb0b 0905 	add.w	r9, fp, r5
 800ba06:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800ba0a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800ba0e:	eb09 0b04 	add.w	fp, r9, r4
 800ba12:	f819 4004 	ldrb.w	r4, [r9, r4]
 800ba16:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ba1a:	4473      	add	r3, lr
 800ba1c:	eb0b 0006 	add.w	r0, fp, r6
 800ba20:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800ba24:	4439      	add	r1, r7
 800ba26:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800ba2a:	b2df      	uxtb	r7, r3
 800ba2c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800ba30:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800ba34:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 800ba38:	fa5f fa81 	uxtb.w	sl, r1
 800ba3c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800ba40:	9c02      	ldr	r4, [sp, #8]
 800ba42:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 800ba46:	441c      	add	r4, r3
 800ba48:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800ba4c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800ba50:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800ba54:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ba58:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800ba5c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ba60:	b2ed      	uxtb	r5, r5
 800ba62:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800ba66:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba6a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800ba6e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800ba72:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800ba76:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ba7a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800ba7e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800ba82:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800ba86:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800ba8a:	0e09      	lsrs	r1, r1, #24
 800ba8c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ba90:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ba94:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800ba98:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ba9c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800baa0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800baa4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800baa8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800baac:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bab0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800bab4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800bab8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800babc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800bac0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800bac4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bac8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bacc:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800bad0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800bad4:	9202      	str	r2, [sp, #8]
 800bad6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800bada:	4a43      	ldr	r2, [pc, #268]	; (800bbe8 <D80_GENERIC+0x264>)
 800badc:	9f01      	ldr	r7, [sp, #4]
 800bade:	fb23 7a02 	smlad	sl, r3, r2, r7
 800bae2:	4a42      	ldr	r2, [pc, #264]	; (800bbec <D80_GENERIC+0x268>)
 800bae4:	fb26 aa02 	smlad	sl, r6, r2, sl
 800bae8:	4a41      	ldr	r2, [pc, #260]	; (800bbf0 <D80_GENERIC+0x26c>)
 800baea:	fb24 aa02 	smlad	sl, r4, r2, sl
 800baee:	4a41      	ldr	r2, [pc, #260]	; (800bbf4 <D80_GENERIC+0x270>)
 800baf0:	fb21 a702 	smlad	r7, r1, r2, sl
 800baf4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800baf8:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800bafc:	4a3e      	ldr	r2, [pc, #248]	; (800bbf8 <D80_GENERIC+0x274>)
 800bafe:	9f03      	ldr	r7, [sp, #12]
 800bb00:	fb23 7e02 	smlad	lr, r3, r2, r7
 800bb04:	4a3d      	ldr	r2, [pc, #244]	; (800bbfc <D80_GENERIC+0x278>)
 800bb06:	fb26 ee02 	smlad	lr, r6, r2, lr
 800bb0a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800bb0e:	fb24 e707 	smlad	r7, r4, r7, lr
 800bb12:	4a3b      	ldr	r2, [pc, #236]	; (800bc00 <D80_GENERIC+0x27c>)
 800bb14:	fb21 7702 	smlad	r7, r1, r2, r7
 800bb18:	4a3a      	ldr	r2, [pc, #232]	; (800bc04 <D80_GENERIC+0x280>)
 800bb1a:	fb25 7202 	smlad	r2, r5, r2, r7
 800bb1e:	f04f 0901 	mov.w	r9, #1
 800bb22:	9201      	str	r2, [sp, #4]
 800bb24:	fb23 f909 	smuad	r9, r3, r9
 800bb28:	4b37      	ldr	r3, [pc, #220]	; (800bc08 <D80_GENERIC+0x284>)
 800bb2a:	fb26 9603 	smlad	r6, r6, r3, r9
 800bb2e:	4f37      	ldr	r7, [pc, #220]	; (800bc0c <D80_GENERIC+0x288>)
 800bb30:	fb24 6407 	smlad	r4, r4, r7, r6
 800bb34:	4f36      	ldr	r7, [pc, #216]	; (800bc10 <D80_GENERIC+0x28c>)
 800bb36:	fb21 4707 	smlad	r7, r1, r7, r4
 800bb3a:	4936      	ldr	r1, [pc, #216]	; (800bc14 <D80_GENERIC+0x290>)
 800bb3c:	fb25 7301 	smlad	r3, r5, r1, r7
 800bb40:	9303      	str	r3, [sp, #12]
 800bb42:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800bb46:	9b08      	ldr	r3, [sp, #32]
 800bb48:	b193      	cbz	r3, 800bb70 <D80_GENERIC+0x1ec>
 800bb4a:	9a04      	ldr	r2, [sp, #16]
 800bb4c:	4452      	add	r2, sl
 800bb4e:	4614      	mov	r4, r2
 800bb50:	9a05      	ldr	r2, [sp, #20]
 800bb52:	f8cd a014 	str.w	sl, [sp, #20]
 800bb56:	1aa4      	subs	r4, r4, r2
 800bb58:	fba4 1203 	umull	r1, r2, r4, r3
 800bb5c:	17e7      	asrs	r7, r4, #31
 800bb5e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800bb62:	fb03 2207 	mla	r2, r3, r7, r2
 800bb66:	f142 0500 	adc.w	r5, r2, #0
 800bb6a:	006b      	lsls	r3, r5, #1
 800bb6c:	469a      	mov	sl, r3
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	9e00      	ldr	r6, [sp, #0]
 800bb72:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800bb76:	9a06      	ldr	r2, [sp, #24]
 800bb78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bb7c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800bb7e:	2500      	movs	r5, #0
 800bb80:	fb08 f303 	mul.w	r3, r8, r3
 800bb84:	fbc2 450a 	smlal	r4, r5, r2, sl
 800bb88:	9a07      	ldr	r2, [sp, #28]
 800bb8a:	f108 0801 	add.w	r8, r8, #1
 800bb8e:	10a9      	asrs	r1, r5, #2
 800bb90:	f301 010f 	ssat	r1, #16, r1
 800bb94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bb98:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800bb9a:	4543      	cmp	r3, r8
 800bb9c:	dd12      	ble.n	800bbc4 <D80_GENERIC+0x240>
 800bb9e:	9b00      	ldr	r3, [sp, #0]
 800bba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	f47f af0c 	bne.w	800b9c0 <D80_GENERIC+0x3c>
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	6885      	ldr	r5, [r0, #8]
 800bbac:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800bbae:	06b2      	lsls	r2, r6, #26
 800bbb0:	e9d0 3100 	ldrd	r3, r1, [r0]
 800bbb4:	f100 000a 	add.w	r0, r0, #10
 800bbb8:	f57f af35 	bpl.w	800ba26 <D80_GENERIC+0xa2>
 800bbbc:	ba5b      	rev16	r3, r3
 800bbbe:	ba49      	rev16	r1, r1
 800bbc0:	ba6d      	rev16	r5, r5
 800bbc2:	e730      	b.n	800ba26 <D80_GENERIC+0xa2>
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	9b03      	ldr	r3, [sp, #12]
 800bbc8:	2000      	movs	r0, #0
 800bbca:	6093      	str	r3, [r2, #8]
 800bbcc:	9b01      	ldr	r3, [sp, #4]
 800bbce:	60d3      	str	r3, [r2, #12]
 800bbd0:	9b02      	ldr	r3, [sp, #8]
 800bbd2:	61d3      	str	r3, [r2, #28]
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	6113      	str	r3, [r2, #16]
 800bbd8:	9b05      	ldr	r3, [sp, #20]
 800bbda:	6153      	str	r3, [r2, #20]
 800bbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbde:	6193      	str	r3, [r2, #24]
 800bbe0:	b00b      	add	sp, #44	; 0x2c
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	bf00      	nop
 800bbe8:	002d0024 	.word	0x002d0024
 800bbec:	001c0015 	.word	0x001c0015
 800bbf0:	000f000a 	.word	0x000f000a
 800bbf4:	00060003 	.word	0x00060003
 800bbf8:	0037003f 	.word	0x0037003f
 800bbfc:	00450049 	.word	0x00450049
 800bc00:	00490045 	.word	0x00490045
 800bc04:	003f0037 	.word	0x003f0037
 800bc08:	00030006 	.word	0x00030006
 800bc0c:	000a000f 	.word	0x000a000f
 800bc10:	0015001c 	.word	0x0015001c
 800bc14:	0024002d 	.word	0x0024002d
 800bc18:	24000000 	.word	0x24000000

0800bc1c <D128_GENERIC>:
 800bc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc20:	b08d      	sub	sp, #52	; 0x34
 800bc22:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bc24:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800bc28:	9109      	str	r1, [sp, #36]	; 0x24
 800bc2a:	6911      	ldr	r1, [r2, #16]
 800bc2c:	9201      	str	r2, [sp, #4]
 800bc2e:	9106      	str	r1, [sp, #24]
 800bc30:	6951      	ldr	r1, [r2, #20]
 800bc32:	9107      	str	r1, [sp, #28]
 800bc34:	6991      	ldr	r1, [r2, #24]
 800bc36:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc38:	6891      	ldr	r1, [r2, #8]
 800bc3a:	9103      	str	r1, [sp, #12]
 800bc3c:	68d1      	ldr	r1, [r2, #12]
 800bc3e:	9102      	str	r1, [sp, #8]
 800bc40:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800bc42:	9108      	str	r1, [sp, #32]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 8183 	beq.w	800bf50 <D128_GENERIC+0x334>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	6a12      	ldr	r2, [r2, #32]
 800bc4e:	4681      	mov	r9, r0
 800bc50:	920a      	str	r2, [sp, #40]	; 0x28
 800bc52:	e9cd a304 	strd	sl, r3, [sp, #16]
 800bc56:	e165      	b.n	800bf24 <D128_GENERIC+0x308>
 800bc58:	b2d2      	uxtb	r2, r2
 800bc5a:	f899 b000 	ldrb.w	fp, [r9]
 800bc5e:	b213      	sxth	r3, r2
 800bc60:	4255      	negs	r5, r2
 800bc62:	f819 0002 	ldrb.w	r0, [r9, r2]
 800bc66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bc6a:	009f      	lsls	r7, r3, #2
 800bc6c:	eb09 0402 	add.w	r4, r9, r2
 800bc70:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800bc74:	f819 8002 	ldrb.w	r8, [r9, r2]
 800bc78:	443b      	add	r3, r7
 800bc7a:	1962      	adds	r2, r4, r5
 800bc7c:	5d64      	ldrb	r4, [r4, r5]
 800bc7e:	eb02 0c03 	add.w	ip, r2, r3
 800bc82:	0424      	lsls	r4, r4, #16
 800bc84:	5cd3      	ldrb	r3, [r2, r3]
 800bc86:	eb0c 0e05 	add.w	lr, ip, r5
 800bc8a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 800bc8e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 800bc92:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800bc96:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 800bc9a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 800bc9e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800bca2:	eb0c 0e06 	add.w	lr, ip, r6
 800bca6:	f81c a006 	ldrb.w	sl, [ip, r6]
 800bcaa:	0412      	lsls	r2, r2, #16
 800bcac:	445c      	add	r4, fp
 800bcae:	eb0e 0c05 	add.w	ip, lr, r5
 800bcb2:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800bcb6:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800bcba:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800bcbe:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800bcc2:	041b      	lsls	r3, r3, #16
 800bcc4:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800bcc8:	eb00 0b06 	add.w	fp, r0, r6
 800bccc:	5d80      	ldrb	r0, [r0, r6]
 800bcce:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800bcd2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800bcd6:	eb0b 0a05 	add.w	sl, fp, r5
 800bcda:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800bcde:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800bce2:	0436      	lsls	r6, r6, #16
 800bce4:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800bce8:	4442      	add	r2, r8
 800bcea:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800bcee:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800bcf2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800bcf6:	44b9      	add	r9, r7
 800bcf8:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800bcfc:	4463      	add	r3, ip
 800bcfe:	eb06 0508 	add.w	r5, r6, r8
 800bd02:	b2e7      	uxtb	r7, r4
 800bd04:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800bd08:	499b      	ldr	r1, [pc, #620]	; (800bf78 <D128_GENERIC+0x35c>)
 800bd0a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800bd0e:	0e24      	lsrs	r4, r4, #24
 800bd10:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800bd14:	b2d7      	uxtb	r7, r2
 800bd16:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800bd1a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800bd1e:	9904      	ldr	r1, [sp, #16]
 800bd20:	4461      	add	r1, ip
 800bd22:	468c      	mov	ip, r1
 800bd24:	4994      	ldr	r1, [pc, #592]	; (800bf78 <D128_GENERIC+0x35c>)
 800bd26:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800bd2a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800bd2e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800bd32:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bd36:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800bd3a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800bd3e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800bd42:	0e12      	lsrs	r2, r2, #24
 800bd44:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800bd48:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800bd4c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800bd50:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bd54:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800bd58:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bd62:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800bd66:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bd6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bd6e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 800bd72:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800bd76:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800bd7a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 800bd7e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bd82:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 800bd86:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800bd8a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800bd8e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bd92:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800bd96:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bd9a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800bd9e:	0e1b      	lsrs	r3, r3, #24
 800bda0:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 800bda4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bda8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800bdac:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800bdb0:	b2eb      	uxtb	r3, r5
 800bdb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bdb6:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 800bdba:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800bdbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bdc2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800bdc6:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 800bdca:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800bdce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bdd2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bdd6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800bdda:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 800bdde:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800bde2:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800bde6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800bdea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bdee:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800bdf2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bdf6:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800bdfa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800bdfe:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800be02:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800be06:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800be0a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800be0e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 800be12:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800be16:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800be1a:	9104      	str	r1, [sp, #16]
 800be1c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800be20:	9902      	ldr	r1, [sp, #8]
 800be22:	4a56      	ldr	r2, [pc, #344]	; (800bf7c <D128_GENERIC+0x360>)
 800be24:	fb2b 1202 	smlad	r2, fp, r2, r1
 800be28:	4955      	ldr	r1, [pc, #340]	; (800bf80 <D128_GENERIC+0x364>)
 800be2a:	fb28 2201 	smlad	r2, r8, r1, r2
 800be2e:	4955      	ldr	r1, [pc, #340]	; (800bf84 <D128_GENERIC+0x368>)
 800be30:	fb27 2201 	smlad	r2, r7, r1, r2
 800be34:	4954      	ldr	r1, [pc, #336]	; (800bf88 <D128_GENERIC+0x36c>)
 800be36:	fb26 2201 	smlad	r2, r6, r1, r2
 800be3a:	4954      	ldr	r1, [pc, #336]	; (800bf8c <D128_GENERIC+0x370>)
 800be3c:	fb24 2201 	smlad	r2, r4, r1, r2
 800be40:	4953      	ldr	r1, [pc, #332]	; (800bf90 <D128_GENERIC+0x374>)
 800be42:	fb20 2201 	smlad	r2, r0, r1, r2
 800be46:	4953      	ldr	r1, [pc, #332]	; (800bf94 <D128_GENERIC+0x378>)
 800be48:	fb23 2201 	smlad	r2, r3, r1, r2
 800be4c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800be50:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800be54:	4950      	ldr	r1, [pc, #320]	; (800bf98 <D128_GENERIC+0x37c>)
 800be56:	9a03      	ldr	r2, [sp, #12]
 800be58:	fb2b 2c01 	smlad	ip, fp, r1, r2
 800be5c:	4a4f      	ldr	r2, [pc, #316]	; (800bf9c <D128_GENERIC+0x380>)
 800be5e:	fb28 ce02 	smlad	lr, r8, r2, ip
 800be62:	f8df c150 	ldr.w	ip, [pc, #336]	; 800bfb4 <D128_GENERIC+0x398>
 800be66:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800be6a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800bfb8 <D128_GENERIC+0x39c>
 800be6e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800be72:	f8df e148 	ldr.w	lr, [pc, #328]	; 800bfbc <D128_GENERIC+0x3a0>
 800be76:	fb24 ce0e 	smlad	lr, r4, lr, ip
 800be7a:	f8df c144 	ldr.w	ip, [pc, #324]	; 800bfc0 <D128_GENERIC+0x3a4>
 800be7e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800be82:	f8df c140 	ldr.w	ip, [pc, #320]	; 800bfc4 <D128_GENERIC+0x3a8>
 800be86:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800be8a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800bfc8 <D128_GENERIC+0x3ac>
 800be8e:	fb25 c20e 	smlad	r2, r5, lr, ip
 800be92:	f04f 0c01 	mov.w	ip, #1
 800be96:	9202      	str	r2, [sp, #8]
 800be98:	fb2b fb0c 	smuad	fp, fp, ip
 800be9c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800bfcc <D128_GENERIC+0x3b0>
 800bea0:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800bea4:	f8df c128 	ldr.w	ip, [pc, #296]	; 800bfd0 <D128_GENERIC+0x3b4>
 800bea8:	fb27 bb0c 	smlad	fp, r7, ip, fp
 800beac:	4f3c      	ldr	r7, [pc, #240]	; (800bfa0 <D128_GENERIC+0x384>)
 800beae:	fb26 bb07 	smlad	fp, r6, r7, fp
 800beb2:	4f3c      	ldr	r7, [pc, #240]	; (800bfa4 <D128_GENERIC+0x388>)
 800beb4:	fb24 bb07 	smlad	fp, r4, r7, fp
 800beb8:	4f3b      	ldr	r7, [pc, #236]	; (800bfa8 <D128_GENERIC+0x38c>)
 800beba:	fb20 bb07 	smlad	fp, r0, r7, fp
 800bebe:	4f3b      	ldr	r7, [pc, #236]	; (800bfac <D128_GENERIC+0x390>)
 800bec0:	fb23 bb07 	smlad	fp, r3, r7, fp
 800bec4:	4b3a      	ldr	r3, [pc, #232]	; (800bfb0 <D128_GENERIC+0x394>)
 800bec6:	fb25 b303 	smlad	r3, r5, r3, fp
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 800bed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed2:	b183      	cbz	r3, 800bef6 <D128_GENERIC+0x2da>
 800bed4:	9a06      	ldr	r2, [sp, #24]
 800bed6:	9907      	ldr	r1, [sp, #28]
 800bed8:	4422      	add	r2, r4
 800beda:	9407      	str	r4, [sp, #28]
 800bedc:	1a52      	subs	r2, r2, r1
 800bede:	fba2 0103 	umull	r0, r1, r2, r3
 800bee2:	17d5      	asrs	r5, r2, #31
 800bee4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800bee8:	fb03 1105 	mla	r1, r3, r5, r1
 800beec:	f141 0300 	adc.w	r3, r1, #0
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	461c      	mov	r4, r3
 800bef4:	9306      	str	r3, [sp, #24]
 800bef6:	9d01      	ldr	r5, [sp, #4]
 800bef8:	01e4      	lsls	r4, r4, #7
 800befa:	9e05      	ldr	r6, [sp, #20]
 800befc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf00:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800bf02:	2300      	movs	r3, #0
 800bf04:	9908      	ldr	r1, [sp, #32]
 800bf06:	fb06 f000 	mul.w	r0, r6, r0
 800bf0a:	3601      	adds	r6, #1
 800bf0c:	fbc1 2304 	smlal	r2, r3, r1, r4
 800bf10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf12:	109b      	asrs	r3, r3, #2
 800bf14:	9605      	str	r6, [sp, #20]
 800bf16:	f303 030f 	ssat	r3, #16, r3
 800bf1a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800bf1e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800bf20:	42b3      	cmp	r3, r6
 800bf22:	dd13      	ble.n	800bf4c <D128_GENERIC+0x330>
 800bf24:	9b01      	ldr	r3, [sp, #4]
 800bf26:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bf28:	2a01      	cmp	r2, #1
 800bf2a:	f47f ae95 	bne.w	800bc58 <D128_GENERIC+0x3c>
 800bf2e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bf30:	f109 0610 	add.w	r6, r9, #16
 800bf34:	0681      	lsls	r1, r0, #26
 800bf36:	e9d9 4200 	ldrd	r4, r2, [r9]
 800bf3a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 800bf3e:	d518      	bpl.n	800bf72 <D128_GENERIC+0x356>
 800bf40:	ba64      	rev16	r4, r4
 800bf42:	ba52      	rev16	r2, r2
 800bf44:	ba5b      	rev16	r3, r3
 800bf46:	ba6d      	rev16	r5, r5
 800bf48:	46b1      	mov	r9, r6
 800bf4a:	e6da      	b.n	800bd02 <D128_GENERIC+0xe6>
 800bf4c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	2000      	movs	r0, #0
 800bf54:	9903      	ldr	r1, [sp, #12]
 800bf56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf58:	6099      	str	r1, [r3, #8]
 800bf5a:	9902      	ldr	r1, [sp, #8]
 800bf5c:	f8c3 a01c 	str.w	sl, [r3, #28]
 800bf60:	60d9      	str	r1, [r3, #12]
 800bf62:	9906      	ldr	r1, [sp, #24]
 800bf64:	619a      	str	r2, [r3, #24]
 800bf66:	6119      	str	r1, [r3, #16]
 800bf68:	9907      	ldr	r1, [sp, #28]
 800bf6a:	6159      	str	r1, [r3, #20]
 800bf6c:	b00d      	add	sp, #52	; 0x34
 800bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf72:	46b1      	mov	r9, r6
 800bf74:	e6c5      	b.n	800bd02 <D128_GENERIC+0xe6>
 800bf76:	bf00      	nop
 800bf78:	24000000 	.word	0x24000000
 800bf7c:	00780069 	.word	0x00780069
 800bf80:	005b004e 	.word	0x005b004e
 800bf84:	00420037 	.word	0x00420037
 800bf88:	002d0024 	.word	0x002d0024
 800bf8c:	001c0015 	.word	0x001c0015
 800bf90:	000f000a 	.word	0x000f000a
 800bf94:	00060003 	.word	0x00060003
 800bf98:	00880096 	.word	0x00880096
 800bf9c:	00a200ac 	.word	0x00a200ac
 800bfa0:	0015001c 	.word	0x0015001c
 800bfa4:	0024002d 	.word	0x0024002d
 800bfa8:	00370042 	.word	0x00370042
 800bfac:	004e005b 	.word	0x004e005b
 800bfb0:	00690078 	.word	0x00690078
 800bfb4:	00b400ba 	.word	0x00b400ba
 800bfb8:	00be00c0 	.word	0x00be00c0
 800bfbc:	00c000be 	.word	0x00c000be
 800bfc0:	00ba00b4 	.word	0x00ba00b4
 800bfc4:	00ac00a2 	.word	0x00ac00a2
 800bfc8:	00960088 	.word	0x00960088
 800bfcc:	00030006 	.word	0x00030006
 800bfd0:	000a000f 	.word	0x000a000f

0800bfd4 <D16_1CH_HTONS_VOL_HP>:
 800bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	6993      	ldr	r3, [r2, #24]
 800bfda:	b087      	sub	sp, #28
 800bfdc:	4682      	mov	sl, r0
 800bfde:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800bfe6:	69d3      	ldr	r3, [r2, #28]
 800bfe8:	f8d2 e020 	ldr.w	lr, [r2, #32]
 800bfec:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800bff0:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 800bff4:	9403      	str	r4, [sp, #12]
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d054      	beq.n	800c0a4 <D16_1CH_HTONS_VOL_HP+0xd0>
 800bffa:	f1a1 0902 	sub.w	r9, r1, #2
 800bffe:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 800c002:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c0b0 <D16_1CH_HTONS_VOL_HP+0xdc>
 800c006:	4650      	mov	r0, sl
 800c008:	9101      	str	r1, [sp, #4]
 800c00a:	4619      	mov	r1, r3
 800c00c:	f8cd b008 	str.w	fp, [sp, #8]
 800c010:	9205      	str	r2, [sp, #20]
 800c012:	f850 3b02 	ldr.w	r3, [r0], #2
 800c016:	ba5b      	rev16	r3, r3
 800c018:	b2dc      	uxtb	r4, r3
 800c01a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c01e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c022:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800c026:	4419      	add	r1, r3
 800c028:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800c02c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800c030:	f3c4 0209 	ubfx	r2, r4, #0, #10
 800c034:	0aa1      	lsrs	r1, r4, #10
 800c036:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800c03a:	4a1b      	ldr	r2, [pc, #108]	; (800c0a8 <D16_1CH_HTONS_VOL_HP+0xd4>)
 800c03c:	fb23 5402 	smlad	r4, r3, r2, r5
 800c040:	4a1a      	ldr	r2, [pc, #104]	; (800c0ac <D16_1CH_HTONS_VOL_HP+0xd8>)
 800c042:	fb23 f502 	smuad	r5, r3, r2
 800c046:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c04a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800c04e:	f04f 0b00 	mov.w	fp, #0
 800c052:	19a2      	adds	r2, r4, r6
 800c054:	eba2 020c 	sub.w	r2, r2, ip
 800c058:	46a4      	mov	ip, r4
 800c05a:	17d7      	asrs	r7, r2, #31
 800c05c:	fba2 230e 	umull	r2, r3, r2, lr
 800c060:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800c064:	fb0e 3307 	mla	r3, lr, r7, r3
 800c068:	f143 0700 	adc.w	r7, r3, #0
 800c06c:	9b02      	ldr	r3, [sp, #8]
 800c06e:	047a      	lsls	r2, r7, #17
 800c070:	007e      	lsls	r6, r7, #1
 800c072:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800c076:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800c07a:	f303 030f 	ssat	r3, #16, r3
 800c07e:	f829 3f02 	strh.w	r3, [r9, #2]!
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	4298      	cmp	r0, r3
 800c086:	d1c4      	bne.n	800c012 <D16_1CH_HTONS_VOL_HP+0x3e>
 800c088:	460b      	mov	r3, r1
 800c08a:	9a05      	ldr	r2, [sp, #20]
 800c08c:	2000      	movs	r0, #0
 800c08e:	9903      	ldr	r1, [sp, #12]
 800c090:	61d3      	str	r3, [r2, #28]
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	6095      	str	r5, [r2, #8]
 800c096:	60d1      	str	r1, [r2, #12]
 800c098:	6193      	str	r3, [r2, #24]
 800c09a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800c09e:	b007      	add	sp, #28
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	4664      	mov	r4, ip
 800c0a6:	e7f1      	b.n	800c08c <D16_1CH_HTONS_VOL_HP+0xb8>
 800c0a8:	00030001 	.word	0x00030001
 800c0ac:	00010003 	.word	0x00010003
 800c0b0:	24000000 	.word	0x24000000

0800c0b4 <D24_1CH_HTONS_VOL_HP>:
 800c0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c0ba:	b089      	sub	sp, #36	; 0x24
 800c0bc:	6993      	ldr	r3, [r2, #24]
 800c0be:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c0c0:	9604      	str	r6, [sp, #16]
 800c0c2:	6a16      	ldr	r6, [r2, #32]
 800c0c4:	9306      	str	r3, [sp, #24]
 800c0c6:	9505      	str	r5, [sp, #20]
 800c0c8:	69d3      	ldr	r3, [r2, #28]
 800c0ca:	9600      	str	r6, [sp, #0]
 800c0cc:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 800c0d0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	f000 8083 	beq.w	800c1e0 <D24_1CH_HTONS_VOL_HP+0x12c>
 800c0da:	9207      	str	r2, [sp, #28]
 800c0dc:	2600      	movs	r6, #0
 800c0de:	4622      	mov	r2, r4
 800c0e0:	f1a1 0b02 	sub.w	fp, r1, #2
 800c0e4:	4f3f      	ldr	r7, [pc, #252]	; (800c1e4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800c0e6:	461d      	mov	r5, r3
 800c0e8:	f8cd a00c 	str.w	sl, [sp, #12]
 800c0ec:	9c00      	ldr	r4, [sp, #0]
 800c0ee:	e056      	b.n	800c19e <D24_1CH_HTONS_VOL_HP+0xea>
 800c0f0:	7841      	ldrb	r1, [r0, #1]
 800c0f2:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800c0f6:	3002      	adds	r0, #2
 800c0f8:	4488      	add	r8, r1
 800c0fa:	fa5f f388 	uxtb.w	r3, r8
 800c0fe:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800c102:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800c106:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800c10a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 800c10e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800c112:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800c116:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c11a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c11e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800c122:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800c126:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c12a:	492f      	ldr	r1, [pc, #188]	; (800c1e8 <D24_1CH_HTONS_VOL_HP+0x134>)
 800c12c:	fb23 e901 	smlad	r9, r3, r1, lr
 800c130:	492e      	ldr	r1, [pc, #184]	; (800c1ec <D24_1CH_HTONS_VOL_HP+0x138>)
 800c132:	fb23 ce01 	smlad	lr, r3, r1, ip
 800c136:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800c13a:	2101      	movs	r1, #1
 800c13c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800c140:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800c144:	fb23 f301 	smuad	r3, r3, r1
 800c148:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 800c14c:	eb08 0c03 	add.w	ip, r8, r3
 800c150:	9b03      	ldr	r3, [sp, #12]
 800c152:	f04f 0a00 	mov.w	sl, #0
 800c156:	440a      	add	r2, r1
 800c158:	3601      	adds	r6, #1
 800c15a:	9103      	str	r1, [sp, #12]
 800c15c:	1ad2      	subs	r2, r2, r3
 800c15e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c162:	fba2 2304 	umull	r2, r3, r2, r4
 800c166:	e9cd 2300 	strd	r2, r3, [sp]
 800c16a:	fb04 3309 	mla	r3, r4, r9, r3
 800c16e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800c172:	9301      	str	r3, [sp, #4]
 800c174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c178:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c17c:	f143 0300 	adc.w	r3, r3, #0
 800c180:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800c184:	005a      	lsls	r2, r3, #1
 800c186:	9b04      	ldr	r3, [sp, #16]
 800c188:	fbc3 9a08 	smlal	r9, sl, r3, r8
 800c18c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800c190:	f303 030f 	ssat	r3, #16, r3
 800c194:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c198:	9b05      	ldr	r3, [sp, #20]
 800c19a:	429e      	cmp	r6, r3
 800c19c:	d010      	beq.n	800c1c0 <D24_1CH_HTONS_VOL_HP+0x10c>
 800c19e:	f890 9003 	ldrb.w	r9, [r0, #3]
 800c1a2:	f016 0f01 	tst.w	r6, #1
 800c1a6:	7801      	ldrb	r1, [r0, #0]
 800c1a8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800c1ac:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800c1b0:	d09e      	beq.n	800c0f0 <D24_1CH_HTONS_VOL_HP+0x3c>
 800c1b2:	f890 8002 	ldrb.w	r8, [r0, #2]
 800c1b6:	3004      	adds	r0, #4
 800c1b8:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 800c1bc:	4488      	add	r8, r1
 800c1be:	e79c      	b.n	800c0fa <D24_1CH_HTONS_VOL_HP+0x46>
 800c1c0:	4614      	mov	r4, r2
 800c1c2:	462b      	mov	r3, r5
 800c1c4:	9a07      	ldr	r2, [sp, #28]
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	61d3      	str	r3, [r2, #28]
 800c1ca:	9b06      	ldr	r3, [sp, #24]
 800c1cc:	f8c2 c008 	str.w	ip, [r2, #8]
 800c1d0:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c1d4:	6193      	str	r3, [r2, #24]
 800c1d6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c1da:	b009      	add	sp, #36	; 0x24
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	4651      	mov	r1, sl
 800c1e2:	e7f0      	b.n	800c1c6 <D24_1CH_HTONS_VOL_HP+0x112>
 800c1e4:	24000000 	.word	0x24000000
 800c1e8:	00030001 	.word	0x00030001
 800c1ec:	00060007 	.word	0x00060007

0800c1f0 <D32_1CH_HTONS_VOL_HP>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	6993      	ldr	r3, [r2, #24]
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	4683      	mov	fp, r0
 800c1fa:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	69d5      	ldr	r5, [r2, #28]
 800c200:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c202:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800c206:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800c20a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c20e:	2800      	cmp	r0, #0
 800c210:	d077      	beq.n	800c302 <D32_1CH_HTONS_VOL_HP+0x112>
 800c212:	460f      	mov	r7, r1
 800c214:	46f1      	mov	r9, lr
 800c216:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c21a:	f8cd 8000 	str.w	r8, [sp]
 800c21e:	4e3a      	ldr	r6, [pc, #232]	; (800c308 <D32_1CH_HTONS_VOL_HP+0x118>)
 800c220:	469e      	mov	lr, r3
 800c222:	46a0      	mov	r8, r4
 800c224:	9103      	str	r1, [sp, #12]
 800c226:	9205      	str	r2, [sp, #20]
 800c228:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c22c:	ba64      	rev16	r4, r4
 800c22e:	b2e0      	uxtb	r0, r4
 800c230:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c234:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c238:	0e24      	lsrs	r4, r4, #24
 800c23a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800c23e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c242:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800c246:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c24a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800c24e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c252:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c256:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800c25a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c25e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c262:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c266:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c26a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800c26e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c272:	4826      	ldr	r0, [pc, #152]	; (800c30c <D32_1CH_HTONS_VOL_HP+0x11c>)
 800c274:	fb23 c400 	smlad	r4, r3, r0, ip
 800c278:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c27c:	fb21 4402 	smlad	r4, r1, r2, r4
 800c280:	4823      	ldr	r0, [pc, #140]	; (800c310 <D32_1CH_HTONS_VOL_HP+0x120>)
 800c282:	fb23 ec00 	smlad	ip, r3, r0, lr
 800c286:	4823      	ldr	r0, [pc, #140]	; (800c314 <D32_1CH_HTONS_VOL_HP+0x124>)
 800c288:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c28c:	2201      	movs	r2, #1
 800c28e:	fb23 f302 	smuad	r3, r3, r2
 800c292:	4821      	ldr	r0, [pc, #132]	; (800c318 <D32_1CH_HTONS_VOL_HP+0x128>)
 800c294:	fb21 3e00 	smlad	lr, r1, r0, r3
 800c298:	9b00      	ldr	r3, [sp, #0]
 800c29a:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800c29e:	4423      	add	r3, r4
 800c2a0:	eba3 0209 	sub.w	r2, r3, r9
 800c2a4:	46a1      	mov	r9, r4
 800c2a6:	17d1      	asrs	r1, r2, #31
 800c2a8:	fba2 230a 	umull	r2, r3, r2, sl
 800c2ac:	e9cd 2300 	strd	r2, r3, [sp]
 800c2b0:	fb0a 3301 	mla	r3, sl, r1, r3
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ba:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2c2:	f143 0300 	adc.w	r3, r3, #0
 800c2c6:	0399      	lsls	r1, r3, #14
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	fbc8 2301 	smlal	r2, r3, r8, r1
 800c2d2:	109b      	asrs	r3, r3, #2
 800c2d4:	f303 030f 	ssat	r3, #16, r3
 800c2d8:	f827 3b02 	strh.w	r3, [r7], #2
 800c2dc:	9b03      	ldr	r3, [sp, #12]
 800c2de:	429f      	cmp	r7, r3
 800c2e0:	d1a2      	bne.n	800c228 <D32_1CH_HTONS_VOL_HP+0x38>
 800c2e2:	4673      	mov	r3, lr
 800c2e4:	f8dd 8000 	ldr.w	r8, [sp]
 800c2e8:	9a05      	ldr	r2, [sp, #20]
 800c2ea:	6093      	str	r3, [r2, #8]
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c2f4:	61d5      	str	r5, [r2, #28]
 800c2f6:	6193      	str	r3, [r2, #24]
 800c2f8:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c2fc:	b007      	add	sp, #28
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c302:	4674      	mov	r4, lr
 800c304:	e7f1      	b.n	800c2ea <D32_1CH_HTONS_VOL_HP+0xfa>
 800c306:	bf00      	nop
 800c308:	24000000 	.word	0x24000000
 800c30c:	00060003 	.word	0x00060003
 800c310:	000a000c 	.word	0x000a000c
 800c314:	000c000a 	.word	0x000c000a
 800c318:	00030006 	.word	0x00030006

0800c31c <D48_1CH_HTONS_VOL_HP>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800c322:	b087      	sub	sp, #28
 800c324:	6993      	ldr	r3, [r2, #24]
 800c326:	9701      	str	r7, [sp, #4]
 800c328:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c32a:	6a17      	ldr	r7, [r2, #32]
 800c32c:	9304      	str	r3, [sp, #16]
 800c32e:	69d6      	ldr	r6, [r2, #28]
 800c330:	9702      	str	r7, [sp, #8]
 800c332:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800c336:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c33a:	2d00      	cmp	r5, #0
 800c33c:	f000 8093 	beq.w	800c466 <D48_1CH_HTONS_VOL_HP+0x14a>
 800c340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c344:	f1a1 0b02 	sub.w	fp, r1, #2
 800c348:	46f2      	mov	sl, lr
 800c34a:	4f48      	ldr	r7, [pc, #288]	; (800c46c <D48_1CH_HTONS_VOL_HP+0x150>)
 800c34c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800c350:	469e      	mov	lr, r3
 800c352:	9205      	str	r2, [sp, #20]
 800c354:	9103      	str	r1, [sp, #12]
 800c356:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c35a:	3006      	adds	r0, #6
 800c35c:	ba5b      	rev16	r3, r3
 800c35e:	fa92 f992 	rev16.w	r9, r2
 800c362:	b2dd      	uxtb	r5, r3
 800c364:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c368:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c36c:	0e1b      	lsrs	r3, r3, #24
 800c36e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800c372:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800c376:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800c37a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800c37e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c382:	fa5f f289 	uxtb.w	r2, r9
 800c386:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800c38a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800c38e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c392:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800c396:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c39a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800c39e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c3a2:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800c3a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c3aa:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c3ae:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800c3b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3b6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800c3ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c3be:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800c3c2:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c3c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c3ca:	4b29      	ldr	r3, [pc, #164]	; (800c470 <D48_1CH_HTONS_VOL_HP+0x154>)
 800c3cc:	fb28 c103 	smlad	r1, r8, r3, ip
 800c3d0:	4b28      	ldr	r3, [pc, #160]	; (800c474 <D48_1CH_HTONS_VOL_HP+0x158>)
 800c3d2:	fb25 1103 	smlad	r1, r5, r3, r1
 800c3d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c3da:	fb22 1903 	smlad	r9, r2, r3, r1
 800c3de:	4b26      	ldr	r3, [pc, #152]	; (800c478 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800c3e0:	fb28 ec03 	smlad	ip, r8, r3, lr
 800c3e4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c3e8:	fb25 cc03 	smlad	ip, r5, r3, ip
 800c3ec:	4b23      	ldr	r3, [pc, #140]	; (800c47c <D48_1CH_HTONS_VOL_HP+0x160>)
 800c3ee:	fb22 cc03 	smlad	ip, r2, r3, ip
 800c3f2:	2101      	movs	r1, #1
 800c3f4:	fb28 f801 	smuad	r8, r8, r1
 800c3f8:	4b21      	ldr	r3, [pc, #132]	; (800c480 <D48_1CH_HTONS_VOL_HP+0x164>)
 800c3fa:	fb25 8503 	smlad	r5, r5, r3, r8
 800c3fe:	4b21      	ldr	r3, [pc, #132]	; (800c484 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c400:	fb22 5e03 	smlad	lr, r2, r3, r5
 800c404:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800c408:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c40c:	190a      	adds	r2, r1, r4
 800c40e:	9c02      	ldr	r4, [sp, #8]
 800c410:	eba2 020a 	sub.w	r2, r2, sl
 800c414:	468a      	mov	sl, r1
 800c416:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c41a:	fba2 2304 	umull	r2, r3, r2, r4
 800c41e:	fb04 3309 	mla	r3, r4, r9, r3
 800c422:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c426:	f04f 0900 	mov.w	r9, #0
 800c42a:	f143 0500 	adc.w	r5, r3, #0
 800c42e:	9b01      	ldr	r3, [sp, #4]
 800c430:	032a      	lsls	r2, r5, #12
 800c432:	006c      	lsls	r4, r5, #1
 800c434:	fbc3 8902 	smlal	r8, r9, r3, r2
 800c438:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c43c:	f303 030f 	ssat	r3, #16, r3
 800c440:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	4283      	cmp	r3, r0
 800c448:	d185      	bne.n	800c356 <D48_1CH_HTONS_VOL_HP+0x3a>
 800c44a:	4673      	mov	r3, lr
 800c44c:	9a05      	ldr	r2, [sp, #20]
 800c44e:	6093      	str	r3, [r2, #8]
 800c450:	2000      	movs	r0, #0
 800c452:	9b04      	ldr	r3, [sp, #16]
 800c454:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c458:	61d6      	str	r6, [r2, #28]
 800c45a:	6193      	str	r3, [r2, #24]
 800c45c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800c460:	b007      	add	sp, #28
 800c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c466:	4671      	mov	r1, lr
 800c468:	e7f1      	b.n	800c44e <D48_1CH_HTONS_VOL_HP+0x132>
 800c46a:	bf00      	nop
 800c46c:	24000000 	.word	0x24000000
 800c470:	000f000a 	.word	0x000f000a
 800c474:	00060003 	.word	0x00060003
 800c478:	00150019 	.word	0x00150019
 800c47c:	00190015 	.word	0x00190015
 800c480:	00030006 	.word	0x00030006
 800c484:	000a000f 	.word	0x000a000f

0800c488 <D64_1CH_HTONS_VOL_HP>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c48e:	b089      	sub	sp, #36	; 0x24
 800c490:	6993      	ldr	r3, [r2, #24]
 800c492:	4686      	mov	lr, r0
 800c494:	9503      	str	r5, [sp, #12]
 800c496:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800c498:	6a15      	ldr	r5, [r2, #32]
 800c49a:	9306      	str	r3, [sp, #24]
 800c49c:	69d6      	ldr	r6, [r2, #28]
 800c49e:	9504      	str	r5, [sp, #16]
 800c4a0:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800c4a4:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f000 80a4 	beq.w	800c5f6 <D64_1CH_HTONS_VOL_HP+0x16e>
 800c4ae:	460f      	mov	r7, r1
 800c4b0:	46f1      	mov	r9, lr
 800c4b2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800c4b6:	4d56      	ldr	r5, [pc, #344]	; (800c610 <D64_1CH_HTONS_VOL_HP+0x188>)
 800c4b8:	46a2      	mov	sl, r4
 800c4ba:	469e      	mov	lr, r3
 800c4bc:	9105      	str	r1, [sp, #20]
 800c4be:	9207      	str	r2, [sp, #28]
 800c4c0:	f859 1b08 	ldr.w	r1, [r9], #8
 800c4c4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800c4c8:	ba49      	rev16	r1, r1
 800c4ca:	fa93 fb93 	rev16.w	fp, r3
 800c4ce:	b2cb      	uxtb	r3, r1
 800c4d0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c4d4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c4d8:	0e09      	lsrs	r1, r1, #24
 800c4da:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800c4de:	fa5f f38b 	uxtb.w	r3, fp
 800c4e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c4e6:	4426      	add	r6, r4
 800c4e8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800c4ec:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c4f0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800c4f4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800c4f8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c4fc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800c500:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c504:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c508:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c50c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800c510:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c514:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c518:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800c51c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800c520:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c524:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c528:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800c52c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800c530:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c534:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800c538:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c53c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c544:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800c548:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800c54c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c550:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800c554:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800c558:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800c55c:	482d      	ldr	r0, [pc, #180]	; (800c614 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800c55e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800c562:	482d      	ldr	r0, [pc, #180]	; (800c618 <D64_1CH_HTONS_VOL_HP+0x190>)
 800c564:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c568:	482c      	ldr	r0, [pc, #176]	; (800c61c <D64_1CH_HTONS_VOL_HP+0x194>)
 800c56a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800c56e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800c572:	fb2b c404 	smlad	r4, fp, r4, ip
 800c576:	482a      	ldr	r0, [pc, #168]	; (800c620 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c578:	fb22 ec00 	smlad	ip, r2, r0, lr
 800c57c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800c580:	4828      	ldr	r0, [pc, #160]	; (800c624 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c582:	fb21 cc00 	smlad	ip, r1, r0, ip
 800c586:	fb23 cc10 	smladx	ip, r3, r0, ip
 800c58a:	f04f 0e01 	mov.w	lr, #1
 800c58e:	fb22 f20e 	smuad	r2, r2, lr
 800c592:	4825      	ldr	r0, [pc, #148]	; (800c628 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c594:	fb21 2100 	smlad	r1, r1, r0, r2
 800c598:	4a24      	ldr	r2, [pc, #144]	; (800c62c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c59a:	fb23 1302 	smlad	r3, r3, r2, r1
 800c59e:	4a24      	ldr	r2, [pc, #144]	; (800c630 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c5a0:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800c5a4:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800c5a8:	eb04 0208 	add.w	r2, r4, r8
 800c5ac:	eba2 020a 	sub.w	r2, r2, sl
 800c5b0:	46a2      	mov	sl, r4
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	17d1      	asrs	r1, r2, #31
 800c5b6:	e9cd 0100 	strd	r0, r1, [sp]
 800c5ba:	9904      	ldr	r1, [sp, #16]
 800c5bc:	9801      	ldr	r0, [sp, #4]
 800c5be:	fba2 2301 	umull	r2, r3, r2, r1
 800c5c2:	fb01 3300 	mla	r3, r1, r0, r3
 800c5c6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800c5ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c5ce:	f143 0100 	adc.w	r1, r3, #0
 800c5d2:	9b03      	ldr	r3, [sp, #12]
 800c5d4:	02ca      	lsls	r2, r1, #11
 800c5d6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c5da:	2100      	movs	r1, #0
 800c5dc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c5e0:	108b      	asrs	r3, r1, #2
 800c5e2:	f303 030f 	ssat	r3, #16, r3
 800c5e6:	f827 3b02 	strh.w	r3, [r7], #2
 800c5ea:	9b05      	ldr	r3, [sp, #20]
 800c5ec:	429f      	cmp	r7, r3
 800c5ee:	f47f af67 	bne.w	800c4c0 <D64_1CH_HTONS_VOL_HP+0x38>
 800c5f2:	4673      	mov	r3, lr
 800c5f4:	9a07      	ldr	r2, [sp, #28]
 800c5f6:	6093      	str	r3, [r2, #8]
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	9b06      	ldr	r3, [sp, #24]
 800c5fc:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c600:	61d6      	str	r6, [r2, #28]
 800c602:	6193      	str	r3, [r2, #24]
 800c604:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800c608:	b009      	add	sp, #36	; 0x24
 800c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60e:	bf00      	nop
 800c610:	24000000 	.word	0x24000000
 800c614:	001c0015 	.word	0x001c0015
 800c618:	000f000a 	.word	0x000f000a
 800c61c:	00060003 	.word	0x00060003
 800c620:	0024002a 	.word	0x0024002a
 800c624:	002e0030 	.word	0x002e0030
 800c628:	00030006 	.word	0x00030006
 800c62c:	000a000f 	.word	0x000a000f
 800c630:	0015001c 	.word	0x0015001c

0800c634 <D80_1CH_HTONS_VOL_HP>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	6913      	ldr	r3, [r2, #16]
 800c63a:	b089      	sub	sp, #36	; 0x24
 800c63c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	9603      	str	r6, [sp, #12]
 800c642:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c644:	6a16      	ldr	r6, [r2, #32]
 800c646:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800c64a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800c64e:	9306      	str	r3, [sp, #24]
 800c650:	9604      	str	r6, [sp, #16]
 800c652:	69d3      	ldr	r3, [r2, #28]
 800c654:	2c00      	cmp	r4, #0
 800c656:	f000 80ce 	beq.w	800c7f6 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800c65a:	3902      	subs	r1, #2
 800c65c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c660:	4e66      	ldr	r6, [pc, #408]	; (800c7fc <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800c662:	469e      	mov	lr, r3
 800c664:	9102      	str	r1, [sp, #8]
 800c666:	46aa      	mov	sl, r5
 800c668:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800c66c:	9207      	str	r2, [sp, #28]
 800c66e:	9105      	str	r1, [sp, #20]
 800c670:	6883      	ldr	r3, [r0, #8]
 800c672:	e9d0 4200 	ldrd	r4, r2, [r0]
 800c676:	300a      	adds	r0, #10
 800c678:	ba64      	rev16	r4, r4
 800c67a:	ba52      	rev16	r2, r2
 800c67c:	fa93 fb93 	rev16.w	fp, r3
 800c680:	b2e5      	uxtb	r5, r4
 800c682:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c686:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800c68a:	0e24      	lsrs	r4, r4, #24
 800c68c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800c690:	b2d5      	uxtb	r5, r2
 800c692:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c696:	44c6      	add	lr, r8
 800c698:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c69c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800c6a0:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800c6a4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c6a8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c6ac:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800c6b0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c6b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6b8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800c6bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c6c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800c6c4:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800c6c8:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800c6cc:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800c6d0:	0e12      	lsrs	r2, r2, #24
 800c6d2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800c6d6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800c6da:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c6de:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c6e2:	fa5f fb8b 	uxtb.w	fp, fp
 800c6e6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800c6ea:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c6ee:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c6f2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c6f6:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c6fa:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c6fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c702:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800c706:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800c70a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c70e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c712:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800c716:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c71a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800c71e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800c722:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c726:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c72a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800c72e:	4934      	ldr	r1, [pc, #208]	; (800c800 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c730:	fb23 cc01 	smlad	ip, r3, r1, ip
 800c734:	4933      	ldr	r1, [pc, #204]	; (800c804 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c736:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c73a:	4933      	ldr	r1, [pc, #204]	; (800c808 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c73c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800c740:	4932      	ldr	r1, [pc, #200]	; (800c80c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c742:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c746:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c74a:	fb2b c901 	smlad	r9, fp, r1, ip
 800c74e:	4930      	ldr	r1, [pc, #192]	; (800c810 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c750:	fb23 7701 	smlad	r7, r3, r1, r7
 800c754:	492f      	ldr	r1, [pc, #188]	; (800c814 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c756:	fb24 7701 	smlad	r7, r4, r1, r7
 800c75a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800c75e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800c762:	492d      	ldr	r1, [pc, #180]	; (800c818 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c764:	fb22 cc01 	smlad	ip, r2, r1, ip
 800c768:	492c      	ldr	r1, [pc, #176]	; (800c81c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c76a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800c76e:	2101      	movs	r1, #1
 800c770:	fb23 f301 	smuad	r3, r3, r1
 800c774:	492a      	ldr	r1, [pc, #168]	; (800c820 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c776:	fb24 3401 	smlad	r4, r4, r1, r3
 800c77a:	492a      	ldr	r1, [pc, #168]	; (800c824 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c77c:	fb28 4101 	smlad	r1, r8, r1, r4
 800c780:	4f29      	ldr	r7, [pc, #164]	; (800c828 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c782:	fb22 1207 	smlad	r2, r2, r7, r1
 800c786:	4f29      	ldr	r7, [pc, #164]	; (800c82c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c788:	fb2b 2707 	smlad	r7, fp, r7, r2
 800c78c:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800c790:	9b01      	ldr	r3, [sp, #4]
 800c792:	9c04      	ldr	r4, [sp, #16]
 800c794:	440b      	add	r3, r1
 800c796:	eba3 020a 	sub.w	r2, r3, sl
 800c79a:	468a      	mov	sl, r1
 800c79c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c7a0:	fba2 2304 	umull	r2, r3, r2, r4
 800c7a4:	fb04 3309 	mla	r3, r4, r9, r3
 800c7a8:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800c7ac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c7b0:	f143 0500 	adc.w	r5, r3, #0
 800c7b4:	006b      	lsls	r3, r5, #1
 800c7b6:	02aa      	lsls	r2, r5, #10
 800c7b8:	2500      	movs	r5, #0
 800c7ba:	9301      	str	r3, [sp, #4]
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	fbc3 4502 	smlal	r4, r5, r3, r2
 800c7c2:	9a02      	ldr	r2, [sp, #8]
 800c7c4:	10ab      	asrs	r3, r5, #2
 800c7c6:	f303 030f 	ssat	r3, #16, r3
 800c7ca:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c7ce:	9b05      	ldr	r3, [sp, #20]
 800c7d0:	9202      	str	r2, [sp, #8]
 800c7d2:	4298      	cmp	r0, r3
 800c7d4:	f47f af4c 	bne.w	800c670 <D80_1CH_HTONS_VOL_HP+0x3c>
 800c7d8:	4673      	mov	r3, lr
 800c7da:	9a07      	ldr	r2, [sp, #28]
 800c7dc:	61d3      	str	r3, [r2, #28]
 800c7de:	2000      	movs	r0, #0
 800c7e0:	9b01      	ldr	r3, [sp, #4]
 800c7e2:	6097      	str	r7, [r2, #8]
 800c7e4:	f8c2 c00c 	str.w	ip, [r2, #12]
 800c7e8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800c7ec:	9b06      	ldr	r3, [sp, #24]
 800c7ee:	6193      	str	r3, [r2, #24]
 800c7f0:	b009      	add	sp, #36	; 0x24
 800c7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	e7f0      	b.n	800c7dc <D80_1CH_HTONS_VOL_HP+0x1a8>
 800c7fa:	bf00      	nop
 800c7fc:	24000000 	.word	0x24000000
 800c800:	002d0024 	.word	0x002d0024
 800c804:	001c0015 	.word	0x001c0015
 800c808:	000f000a 	.word	0x000f000a
 800c80c:	00060003 	.word	0x00060003
 800c810:	0037003f 	.word	0x0037003f
 800c814:	00450049 	.word	0x00450049
 800c818:	00490045 	.word	0x00490045
 800c81c:	003f0037 	.word	0x003f0037
 800c820:	00030006 	.word	0x00030006
 800c824:	000a000f 	.word	0x000a000f
 800c828:	0015001c 	.word	0x0015001c
 800c82c:	0024002d 	.word	0x0024002d

0800c830 <D128_1CH_HTONS_VOL_HP>:
 800c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	6914      	ldr	r4, [r2, #16]
 800c836:	b08d      	sub	sp, #52	; 0x34
 800c838:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c83a:	9404      	str	r4, [sp, #16]
 800c83c:	6954      	ldr	r4, [r2, #20]
 800c83e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c840:	9405      	str	r4, [sp, #20]
 800c842:	6994      	ldr	r4, [r2, #24]
 800c844:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800c848:	940a      	str	r4, [sp, #40]	; 0x28
 800c84a:	6894      	ldr	r4, [r2, #8]
 800c84c:	9403      	str	r4, [sp, #12]
 800c84e:	68d4      	ldr	r4, [r2, #12]
 800c850:	9402      	str	r4, [sp, #8]
 800c852:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c854:	6a12      	ldr	r2, [r2, #32]
 800c856:	9407      	str	r4, [sp, #28]
 800c858:	9208      	str	r2, [sp, #32]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 812e 	beq.w	800cabc <D128_1CH_HTONS_VOL_HP+0x28c>
 800c860:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c864:	f100 0b10 	add.w	fp, r0, #16
 800c868:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800cafc <D128_1CH_HTONS_VOL_HP+0x2cc>
 800c86c:	9106      	str	r1, [sp, #24]
 800c86e:	9309      	str	r3, [sp, #36]	; 0x24
 800c870:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800c874:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800c878:	ba40      	rev16	r0, r0
 800c87a:	ba52      	rev16	r2, r2
 800c87c:	ba5b      	rev16	r3, r3
 800c87e:	ba76      	rev16	r6, r6
 800c880:	b2c5      	uxtb	r5, r0
 800c882:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c886:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c88a:	0e00      	lsrs	r0, r0, #24
 800c88c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800c890:	b2d5      	uxtb	r5, r2
 800c892:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800c896:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c89a:	44bc      	add	ip, r7
 800c89c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c8a0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800c8a4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c8a8:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c8ac:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c8b0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c8b4:	0e12      	lsrs	r2, r2, #24
 800c8b6:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800c8ba:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c8be:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c8c2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c8c6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c8ca:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c8ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800c8d8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c8dc:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800c8e0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c8e4:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c8e8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c8ec:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c8f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c8f4:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800c8f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c8fc:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c900:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c904:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c908:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c90c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c910:	0e1b      	lsrs	r3, r3, #24
 800c912:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c916:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c91a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c91e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c922:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c926:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c92a:	b2f3      	uxtb	r3, r6
 800c92c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c930:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c934:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c938:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c93c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c940:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800c944:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c948:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c94c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c950:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800c954:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800c958:	0e36      	lsrs	r6, r6, #24
 800c95a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c95e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c962:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800c966:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c96a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800c96e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c972:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800c976:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c97a:	9101      	str	r1, [sp, #4]
 800c97c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c980:	9b02      	ldr	r3, [sp, #8]
 800c982:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800c986:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c98a:	4611      	mov	r1, r2
 800c98c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800c990:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800c994:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800c998:	4a49      	ldr	r2, [pc, #292]	; (800cac0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c99a:	fb2e 3202 	smlad	r2, lr, r2, r3
 800c99e:	4b49      	ldr	r3, [pc, #292]	; (800cac4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c9a0:	fb27 2203 	smlad	r2, r7, r3, r2
 800c9a4:	4b48      	ldr	r3, [pc, #288]	; (800cac8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800c9a6:	fb25 2203 	smlad	r2, r5, r3, r2
 800c9aa:	4b48      	ldr	r3, [pc, #288]	; (800cacc <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c9ac:	fb24 2203 	smlad	r2, r4, r3, r2
 800c9b0:	4b47      	ldr	r3, [pc, #284]	; (800cad0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c9b2:	fb20 2803 	smlad	r8, r0, r3, r2
 800c9b6:	4b47      	ldr	r3, [pc, #284]	; (800cad4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c9b8:	9a01      	ldr	r2, [sp, #4]
 800c9ba:	fb22 8203 	smlad	r2, r2, r3, r8
 800c9be:	4b46      	ldr	r3, [pc, #280]	; (800cad8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c9c0:	9102      	str	r1, [sp, #8]
 800c9c2:	fb21 2203 	smlad	r2, r1, r3, r2
 800c9c6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c9ca:	fb26 2308 	smlad	r3, r6, r8, r2
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	9a03      	ldr	r2, [sp, #12]
 800c9d2:	4b42      	ldr	r3, [pc, #264]	; (800cadc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c9d4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800c9d8:	4b41      	ldr	r3, [pc, #260]	; (800cae0 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c9da:	fb27 8a03 	smlad	sl, r7, r3, r8
 800c9de:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800cb00 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800c9e2:	fb25 a808 	smlad	r8, r5, r8, sl
 800c9e6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800cb04 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800c9ea:	fb24 880a 	smlad	r8, r4, sl, r8
 800c9ee:	f8df a118 	ldr.w	sl, [pc, #280]	; 800cb08 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800c9f2:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800c9f6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800cb0c <D128_1CH_HTONS_VOL_HP+0x2dc>
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	fb23 aa08 	smlad	sl, r3, r8, sl
 800ca00:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800cb10 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800ca04:	9a02      	ldr	r2, [sp, #8]
 800ca06:	fb22 a808 	smlad	r8, r2, r8, sl
 800ca0a:	f8df a108 	ldr.w	sl, [pc, #264]	; 800cb14 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800ca0e:	fb26 830a 	smlad	r3, r6, sl, r8
 800ca12:	f04f 0801 	mov.w	r8, #1
 800ca16:	9302      	str	r3, [sp, #8]
 800ca18:	fb2e fe08 	smuad	lr, lr, r8
 800ca1c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800cb18 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800ca20:	fb27 ee08 	smlad	lr, r7, r8, lr
 800ca24:	4f2f      	ldr	r7, [pc, #188]	; (800cae4 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800ca26:	fb25 ee07 	smlad	lr, r5, r7, lr
 800ca2a:	4f2f      	ldr	r7, [pc, #188]	; (800cae8 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800ca2c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800ca30:	4f2e      	ldr	r7, [pc, #184]	; (800caec <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800ca32:	fb20 ee07 	smlad	lr, r0, r7, lr
 800ca36:	4f2e      	ldr	r7, [pc, #184]	; (800caf0 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800ca38:	9b01      	ldr	r3, [sp, #4]
 800ca3a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800ca3e:	4f2d      	ldr	r7, [pc, #180]	; (800caf4 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800ca40:	fb22 e707 	smlad	r7, r2, r7, lr
 800ca44:	4b2c      	ldr	r3, [pc, #176]	; (800caf8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ca46:	fb26 7303 	smlad	r3, r6, r3, r7
 800ca4a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	9b04      	ldr	r3, [sp, #16]
 800ca52:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ca56:	9f08      	ldr	r7, [sp, #32]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	4433      	add	r3, r6
 800ca5c:	f10b 0b10 	add.w	fp, fp, #16
 800ca60:	461a      	mov	r2, r3
 800ca62:	9b05      	ldr	r3, [sp, #20]
 800ca64:	9605      	str	r6, [sp, #20]
 800ca66:	1ad2      	subs	r2, r2, r3
 800ca68:	17d5      	asrs	r5, r2, #31
 800ca6a:	fba2 2307 	umull	r2, r3, r2, r7
 800ca6e:	1814      	adds	r4, r2, r0
 800ca70:	fb07 3305 	mla	r3, r7, r5, r3
 800ca74:	eb43 0501 	adc.w	r5, r3, r1
 800ca78:	006b      	lsls	r3, r5, #1
 800ca7a:	022a      	lsls	r2, r5, #8
 800ca7c:	9304      	str	r3, [sp, #16]
 800ca7e:	9b07      	ldr	r3, [sp, #28]
 800ca80:	fbc3 0102 	smlal	r0, r1, r3, r2
 800ca84:	9a06      	ldr	r2, [sp, #24]
 800ca86:	108b      	asrs	r3, r1, #2
 800ca88:	f303 030f 	ssat	r3, #16, r3
 800ca8c:	f822 3b02 	strh.w	r3, [r2], #2
 800ca90:	4613      	mov	r3, r2
 800ca92:	9206      	str	r2, [sp, #24]
 800ca94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca96:	4293      	cmp	r3, r2
 800ca98:	f47f aeea 	bne.w	800c870 <D128_1CH_HTONS_VOL_HP+0x40>
 800ca9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca9e:	2000      	movs	r0, #0
 800caa0:	9903      	ldr	r1, [sp, #12]
 800caa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caa4:	6099      	str	r1, [r3, #8]
 800caa6:	9902      	ldr	r1, [sp, #8]
 800caa8:	f8c3 c01c 	str.w	ip, [r3, #28]
 800caac:	60d9      	str	r1, [r3, #12]
 800caae:	9904      	ldr	r1, [sp, #16]
 800cab0:	619a      	str	r2, [r3, #24]
 800cab2:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800cab6:	b00d      	add	sp, #52	; 0x34
 800cab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabc:	9e05      	ldr	r6, [sp, #20]
 800cabe:	e7ed      	b.n	800ca9c <D128_1CH_HTONS_VOL_HP+0x26c>
 800cac0:	00780069 	.word	0x00780069
 800cac4:	005b004e 	.word	0x005b004e
 800cac8:	00420037 	.word	0x00420037
 800cacc:	002d0024 	.word	0x002d0024
 800cad0:	001c0015 	.word	0x001c0015
 800cad4:	000f000a 	.word	0x000f000a
 800cad8:	00060003 	.word	0x00060003
 800cadc:	00880096 	.word	0x00880096
 800cae0:	00a200ac 	.word	0x00a200ac
 800cae4:	000a000f 	.word	0x000a000f
 800cae8:	0015001c 	.word	0x0015001c
 800caec:	0024002d 	.word	0x0024002d
 800caf0:	00370042 	.word	0x00370042
 800caf4:	004e005b 	.word	0x004e005b
 800caf8:	00690078 	.word	0x00690078
 800cafc:	24000000 	.word	0x24000000
 800cb00:	00b400ba 	.word	0x00b400ba
 800cb04:	00be00c0 	.word	0x00be00c0
 800cb08:	00c000be 	.word	0x00c000be
 800cb0c:	00ba00b4 	.word	0x00ba00b4
 800cb10:	00ac00a2 	.word	0x00ac00a2
 800cb14:	00960088 	.word	0x00960088
 800cb18:	00030006 	.word	0x00030006

0800cb1c <PDM_Filter_Init>:
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	2240      	movs	r2, #64	; 0x40
 800cb20:	2100      	movs	r1, #0
 800cb22:	4604      	mov	r4, r0
 800cb24:	300c      	adds	r0, #12
 800cb26:	f000 fa07 	bl	800cf38 <memset>
 800cb2a:	4a56      	ldr	r2, [pc, #344]	; (800cc84 <PDM_Filter_Init+0x168>)
 800cb2c:	4856      	ldr	r0, [pc, #344]	; (800cc88 <PDM_Filter_Init+0x16c>)
 800cb2e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800cb32:	6813      	ldr	r3, [r2, #0]
 800cb34:	f24c 2540 	movw	r5, #49728	; 0xc240
 800cb38:	f023 0301 	bic.w	r3, r3, #1
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	6803      	ldr	r3, [r0, #0]
 800cb40:	400b      	ands	r3, r1
 800cb42:	42ab      	cmp	r3, r5
 800cb44:	d040      	beq.n	800cbc8 <PDM_Filter_Init+0xac>
 800cb46:	6803      	ldr	r3, [r0, #0]
 800cb48:	f24c 2270 	movw	r2, #49776	; 0xc270
 800cb4c:	4019      	ands	r1, r3
 800cb4e:	4291      	cmp	r1, r2
 800cb50:	d03a      	beq.n	800cbc8 <PDM_Filter_Init+0xac>
 800cb52:	4b4e      	ldr	r3, [pc, #312]	; (800cc8c <PDM_Filter_Init+0x170>)
 800cb54:	2101      	movs	r1, #1
 800cb56:	461a      	mov	r2, r3
 800cb58:	6019      	str	r1, [r3, #0]
 800cb5a:	6813      	ldr	r3, [r2, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1fc      	bne.n	800cb5a <PDM_Filter_Init+0x3e>
 800cb60:	4b4b      	ldr	r3, [pc, #300]	; (800cc90 <PDM_Filter_Init+0x174>)
 800cb62:	494c      	ldr	r1, [pc, #304]	; (800cc94 <PDM_Filter_Init+0x178>)
 800cb64:	4a4c      	ldr	r2, [pc, #304]	; (800cc98 <PDM_Filter_Init+0x17c>)
 800cb66:	6019      	str	r1, [r3, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	8820      	ldrh	r0, [r4, #0]
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	8961      	ldrh	r1, [r4, #10]
 800cb70:	f04f 0300 	mov.w	r3, #0
 800cb74:	8922      	ldrh	r2, [r4, #8]
 800cb76:	bf14      	ite	ne
 800cb78:	2500      	movne	r5, #0
 800cb7a:	4d47      	ldreq	r5, [pc, #284]	; (800cc98 <PDM_Filter_Init+0x17c>)
 800cb7c:	2801      	cmp	r0, #1
 800cb7e:	61a3      	str	r3, [r4, #24]
 800cb80:	6465      	str	r5, [r4, #68]	; 0x44
 800cb82:	60e3      	str	r3, [r4, #12]
 800cb84:	6263      	str	r3, [r4, #36]	; 0x24
 800cb86:	6423      	str	r3, [r4, #64]	; 0x40
 800cb88:	86a1      	strh	r1, [r4, #52]	; 0x34
 800cb8a:	86e2      	strh	r2, [r4, #54]	; 0x36
 800cb8c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800cb90:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cb94:	d936      	bls.n	800cc04 <PDM_Filter_Init+0xe8>
 800cb96:	2003      	movs	r0, #3
 800cb98:	2302      	movs	r3, #2
 800cb9a:	8862      	ldrh	r2, [r4, #2]
 800cb9c:	2a01      	cmp	r2, #1
 800cb9e:	d92e      	bls.n	800cbfe <PDM_Filter_Init+0xe2>
 800cba0:	2140      	movs	r1, #64	; 0x40
 800cba2:	2300      	movs	r3, #0
 800cba4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cba6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800cbaa:	d101      	bne.n	800cbb0 <PDM_Filter_Init+0x94>
 800cbac:	460b      	mov	r3, r1
 800cbae:	6421      	str	r1, [r4, #64]	; 0x40
 800cbb0:	6862      	ldr	r2, [r4, #4]
 800cbb2:	b11a      	cbz	r2, 800cbbc <PDM_Filter_Init+0xa0>
 800cbb4:	f043 0310 	orr.w	r3, r3, #16
 800cbb8:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cbba:	6423      	str	r3, [r4, #64]	; 0x40
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	8722      	strh	r2, [r4, #56]	; 0x38
 800cbc0:	b908      	cbnz	r0, 800cbc6 <PDM_Filter_Init+0xaa>
 800cbc2:	3380      	adds	r3, #128	; 0x80
 800cbc4:	6423      	str	r3, [r4, #64]	; 0x40
 800cbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc8:	4b34      	ldr	r3, [pc, #208]	; (800cc9c <PDM_Filter_Init+0x180>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1c0      	bne.n	800cb52 <PDM_Filter_Init+0x36>
 800cbd0:	4a33      	ldr	r2, [pc, #204]	; (800cca0 <PDM_Filter_Init+0x184>)
 800cbd2:	6813      	ldr	r3, [r2, #0]
 800cbd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbd8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cbdc:	d006      	beq.n	800cbec <PDM_Filter_Init+0xd0>
 800cbde:	6813      	ldr	r3, [r2, #0]
 800cbe0:	f240 4283 	movw	r2, #1155	; 0x483
 800cbe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d1b2      	bne.n	800cb52 <PDM_Filter_Init+0x36>
 800cbec:	4b2d      	ldr	r3, [pc, #180]	; (800cca4 <PDM_Filter_Init+0x188>)
 800cbee:	2101      	movs	r1, #1
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6019      	str	r1, [r3, #0]
 800cbf4:	6813      	ldr	r3, [r2, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1fc      	bne.n	800cbf4 <PDM_Filter_Init+0xd8>
 800cbfa:	4b2b      	ldr	r3, [pc, #172]	; (800cca8 <PDM_Filter_Init+0x18c>)
 800cbfc:	e7b1      	b.n	800cb62 <PDM_Filter_Init+0x46>
 800cbfe:	d03a      	beq.n	800cc76 <PDM_Filter_Init+0x15a>
 800cc00:	4618      	mov	r0, r3
 800cc02:	e7cd      	b.n	800cba0 <PDM_Filter_Init+0x84>
 800cc04:	4d29      	ldr	r5, [pc, #164]	; (800ccac <PDM_Filter_Init+0x190>)
 800cc06:	782a      	ldrb	r2, [r5, #0]
 800cc08:	d01b      	beq.n	800cc42 <PDM_Filter_Init+0x126>
 800cc0a:	2a01      	cmp	r2, #1
 800cc0c:	d001      	beq.n	800cc12 <PDM_Filter_Init+0xf6>
 800cc0e:	2001      	movs	r0, #1
 800cc10:	e7c3      	b.n	800cb9a <PDM_Filter_Init+0x7e>
 800cc12:	4927      	ldr	r1, [pc, #156]	; (800ccb0 <PDM_Filter_Init+0x194>)
 800cc14:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800ccb8 <PDM_Filter_Init+0x19c>
 800cc18:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800cc1c:	4e25      	ldr	r6, [pc, #148]	; (800ccb4 <PDM_Filter_Init+0x198>)
 800cc1e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800cc22:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800cc26:	ea02 0006 	and.w	r0, r2, r6
 800cc2a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cc2e:	428f      	cmp	r7, r1
 800cc30:	ea43 0300 	orr.w	r3, r3, r0
 800cc34:	4413      	add	r3, r2
 800cc36:	600b      	str	r3, [r1, #0]
 800cc38:	d1f1      	bne.n	800cc1e <PDM_Filter_Init+0x102>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	702b      	strb	r3, [r5, #0]
 800cc40:	e7ab      	b.n	800cb9a <PDM_Filter_Init+0x7e>
 800cc42:	2a00      	cmp	r2, #0
 800cc44:	d1a9      	bne.n	800cb9a <PDM_Filter_Init+0x7e>
 800cc46:	491a      	ldr	r1, [pc, #104]	; (800ccb0 <PDM_Filter_Init+0x194>)
 800cc48:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800ccb8 <PDM_Filter_Init+0x19c>
 800cc4c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800cc50:	4e18      	ldr	r6, [pc, #96]	; (800ccb4 <PDM_Filter_Init+0x198>)
 800cc52:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800cc56:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800cc5a:	ea02 0006 	and.w	r0, r2, r6
 800cc5e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cc62:	428f      	cmp	r7, r1
 800cc64:	ea43 0300 	orr.w	r3, r3, r0
 800cc68:	4413      	add	r3, r2
 800cc6a:	600b      	str	r3, [r1, #0]
 800cc6c:	d1f1      	bne.n	800cc52 <PDM_Filter_Init+0x136>
 800cc6e:	2001      	movs	r0, #1
 800cc70:	2300      	movs	r3, #0
 800cc72:	7028      	strb	r0, [r5, #0]
 800cc74:	e791      	b.n	800cb9a <PDM_Filter_Init+0x7e>
 800cc76:	2220      	movs	r2, #32
 800cc78:	4618      	mov	r0, r3
 800cc7a:	2160      	movs	r1, #96	; 0x60
 800cc7c:	6422      	str	r2, [r4, #64]	; 0x40
 800cc7e:	4613      	mov	r3, r2
 800cc80:	e790      	b.n	800cba4 <PDM_Filter_Init+0x88>
 800cc82:	bf00      	nop
 800cc84:	e0002000 	.word	0xe0002000
 800cc88:	e000ed00 	.word	0xe000ed00
 800cc8c:	40023008 	.word	0x40023008
 800cc90:	40023000 	.word	0x40023000
 800cc94:	f407a5c2 	.word	0xf407a5c2
 800cc98:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc9c:	e0042000 	.word	0xe0042000
 800cca0:	5c001000 	.word	0x5c001000
 800cca4:	58024c08 	.word	0x58024c08
 800cca8:	58024c00 	.word	0x58024c00
 800ccac:	240004a8 	.word	0x240004a8
 800ccb0:	23fffffc 	.word	0x23fffffc
 800ccb4:	000ffc00 	.word	0x000ffc00
 800ccb8:	3ff00000 	.word	0x3ff00000

0800ccbc <PDM_Filter_setConfig>:
 800ccbc:	4b67      	ldr	r3, [pc, #412]	; (800ce5c <PDM_Filter_setConfig+0x1a0>)
 800ccbe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d128      	bne.n	800cd16 <PDM_Filter_setConfig+0x5a>
 800ccc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ccc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc8:	880e      	ldrh	r6, [r1, #0]
 800ccca:	460d      	mov	r5, r1
 800cccc:	4604      	mov	r4, r0
 800ccce:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800ccd2:	1e73      	subs	r3, r6, #1
 800ccd4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800ccd8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800ccdc:	2b06      	cmp	r3, #6
 800ccde:	ed2d 8b02 	vpush	{d8}
 800cce2:	6421      	str	r1, [r4, #64]	; 0x40
 800cce4:	b083      	sub	sp, #12
 800cce6:	d820      	bhi.n	800cd2a <PDM_Filter_setConfig+0x6e>
 800cce8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ccea:	42b3      	cmp	r3, r6
 800ccec:	d03d      	beq.n	800cd6a <PDM_Filter_setConfig+0xae>
 800ccee:	4b5c      	ldr	r3, [pc, #368]	; (800ce60 <PDM_Filter_setConfig+0x1a4>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	4333      	orrs	r3, r6
 800ccf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ccf8:	6423      	str	r3, [r4, #64]	; 0x40
 800ccfa:	f003 030f 	and.w	r3, r3, #15
 800ccfe:	2a70      	cmp	r2, #112	; 0x70
 800cd00:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800cd04:	d009      	beq.n	800cd1a <PDM_Filter_setConfig+0x5e>
 800cd06:	2b06      	cmp	r3, #6
 800cd08:	d824      	bhi.n	800cd54 <PDM_Filter_setConfig+0x98>
 800cd0a:	e8df f003 	tbb	[pc, r3]
 800cd0e:	878a      	.short	0x878a
 800cd10:	7b7e8184 	.word	0x7b7e8184
 800cd14:	78          	.byte	0x78
 800cd15:	00          	.byte	0x00
 800cd16:	2004      	movs	r0, #4
 800cd18:	4770      	bx	lr
 800cd1a:	2b06      	cmp	r3, #6
 800cd1c:	d81a      	bhi.n	800cd54 <PDM_Filter_setConfig+0x98>
 800cd1e:	e8df f003 	tbb	[pc, r3]
 800cd22:	8f92      	.short	0x8f92
 800cd24:	8617898c 	.word	0x8617898c
 800cd28:	83          	.byte	0x83
 800cd29:	00          	.byte	0x00
 800cd2a:	4287      	cmp	r7, r0
 800cd2c:	f000 808e 	beq.w	800ce4c <PDM_Filter_setConfig+0x190>
 800cd30:	f117 0f0c 	cmn.w	r7, #12
 800cd34:	f04f 0008 	mov.w	r0, #8
 800cd38:	da11      	bge.n	800cd5e <PDM_Filter_setConfig+0xa2>
 800cd3a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800cd3e:	3040      	adds	r0, #64	; 0x40
 800cd40:	80ab      	strh	r3, [r5, #4]
 800cd42:	886b      	ldrh	r3, [r5, #2]
 800cd44:	8626      	strh	r6, [r4, #48]	; 0x30
 800cd46:	8663      	strh	r3, [r4, #50]	; 0x32
 800cd48:	b003      	add	sp, #12
 800cd4a:	ecbd 8b02 	vpop	{d8}
 800cd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd50:	4b44      	ldr	r3, [pc, #272]	; (800ce64 <PDM_Filter_setConfig+0x1a8>)
 800cd52:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd54:	f117 0f0c 	cmn.w	r7, #12
 800cd58:	f04f 0000 	mov.w	r0, #0
 800cd5c:	dbed      	blt.n	800cd3a <PDM_Filter_setConfig+0x7e>
 800cd5e:	2f33      	cmp	r7, #51	; 0x33
 800cd60:	dd10      	ble.n	800cd84 <PDM_Filter_setConfig+0xc8>
 800cd62:	2333      	movs	r3, #51	; 0x33
 800cd64:	3040      	adds	r0, #64	; 0x40
 800cd66:	80ab      	strh	r3, [r5, #4]
 800cd68:	e7eb      	b.n	800cd42 <PDM_Filter_setConfig+0x86>
 800cd6a:	4287      	cmp	r7, r0
 800cd6c:	d1f2      	bne.n	800cd54 <PDM_Filter_setConfig+0x98>
 800cd6e:	886b      	ldrh	r3, [r5, #2]
 800cd70:	8663      	strh	r3, [r4, #50]	; 0x32
 800cd72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd74:	2000      	movs	r0, #0
 800cd76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd7a:	6423      	str	r3, [r4, #64]	; 0x40
 800cd7c:	b003      	add	sp, #12
 800cd7e:	ecbd 8b02 	vpop	{d8}
 800cd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd86:	f003 030f 	and.w	r3, r3, #15
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	2b06      	cmp	r3, #6
 800cd8e:	d831      	bhi.n	800cdf4 <PDM_Filter_setConfig+0x138>
 800cd90:	4a35      	ldr	r2, [pc, #212]	; (800ce68 <PDM_Filter_setConfig+0x1ac>)
 800cd92:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cd96:	eddf 0a35 	vldr	s1, [pc, #212]	; 800ce6c <PDM_Filter_setConfig+0x1b0>
 800cd9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd9e:	9001      	str	r0, [sp, #4]
 800cda0:	edd3 7a07 	vldr	s15, [r3, #28]
 800cda4:	ed93 8a00 	vldr	s16, [r3]
 800cda8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cdac:	f000 f8e4 	bl	800cf78 <powf>
 800cdb0:	eef0 8a40 	vmov.f32	s17, s0
 800cdb4:	9801      	ldr	r0, [sp, #4]
 800cdb6:	ee07 7a90 	vmov	s15, r7
 800cdba:	ee28 8a28 	vmul.f32	s16, s16, s17
 800cdbe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cdc2:	9001      	str	r0, [sp, #4]
 800cdc4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800cdc8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ce70 <PDM_Filter_setConfig+0x1b4>
 800cdcc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cdd0:	f000 f8d2 	bl	800cf78 <powf>
 800cdd4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800cdd8:	886b      	ldrh	r3, [r5, #2]
 800cdda:	9801      	ldr	r0, [sp, #4]
 800cddc:	feb8 8a48 	vrinta.f32	s16, s16
 800cde0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800cde4:	8727      	strh	r7, [r4, #56]	; 0x38
 800cde6:	8663      	strh	r3, [r4, #50]	; 0x32
 800cde8:	8626      	strh	r6, [r4, #48]	; 0x30
 800cdea:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d0bf      	beq.n	800cd72 <PDM_Filter_setConfig+0xb6>
 800cdf2:	e7a9      	b.n	800cd48 <PDM_Filter_setConfig+0x8c>
 800cdf4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800ce74 <PDM_Filter_setConfig+0x1b8>
 800cdf8:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800ce78 <PDM_Filter_setConfig+0x1bc>
 800cdfc:	e7db      	b.n	800cdb6 <PDM_Filter_setConfig+0xfa>
 800cdfe:	4b1f      	ldr	r3, [pc, #124]	; (800ce7c <PDM_Filter_setConfig+0x1c0>)
 800ce00:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce02:	e7a7      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce04:	4b1e      	ldr	r3, [pc, #120]	; (800ce80 <PDM_Filter_setConfig+0x1c4>)
 800ce06:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce08:	e7a4      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce0a:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <PDM_Filter_setConfig+0x1c8>)
 800ce0c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce0e:	e7a1      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce10:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <PDM_Filter_setConfig+0x1cc>)
 800ce12:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce14:	e79e      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce16:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <PDM_Filter_setConfig+0x1d0>)
 800ce18:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce1a:	e79b      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce1c:	4b1c      	ldr	r3, [pc, #112]	; (800ce90 <PDM_Filter_setConfig+0x1d4>)
 800ce1e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce20:	e798      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce22:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <PDM_Filter_setConfig+0x1d8>)
 800ce24:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce26:	e795      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce28:	4b1b      	ldr	r3, [pc, #108]	; (800ce98 <PDM_Filter_setConfig+0x1dc>)
 800ce2a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce2c:	e792      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce2e:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <PDM_Filter_setConfig+0x1e0>)
 800ce30:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce32:	e78f      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce34:	4b1a      	ldr	r3, [pc, #104]	; (800cea0 <PDM_Filter_setConfig+0x1e4>)
 800ce36:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce38:	e78c      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce3a:	4b1a      	ldr	r3, [pc, #104]	; (800cea4 <PDM_Filter_setConfig+0x1e8>)
 800ce3c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce3e:	e789      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce40:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <PDM_Filter_setConfig+0x1ec>)
 800ce42:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce44:	e786      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce46:	4b19      	ldr	r3, [pc, #100]	; (800ceac <PDM_Filter_setConfig+0x1f0>)
 800ce48:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce4a:	e783      	b.n	800cd54 <PDM_Filter_setConfig+0x98>
 800ce4c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ce4e:	42b3      	cmp	r3, r6
 800ce50:	f47f af6e 	bne.w	800cd30 <PDM_Filter_setConfig+0x74>
 800ce54:	886b      	ldrh	r3, [r5, #2]
 800ce56:	2008      	movs	r0, #8
 800ce58:	8663      	strh	r3, [r4, #50]	; 0x32
 800ce5a:	e775      	b.n	800cd48 <PDM_Filter_setConfig+0x8c>
 800ce5c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ce60:	fffffef0 	.word	0xfffffef0
 800ce64:	0800bfd5 	.word	0x0800bfd5
 800ce68:	0800d2e8 	.word	0x0800d2e8
 800ce6c:	42000000 	.word	0x42000000
 800ce70:	3d4ccccd 	.word	0x3d4ccccd
 800ce74:	4f800000 	.word	0x4f800000
 800ce78:	00000000 	.word	0x00000000
 800ce7c:	0800b3e1 	.word	0x0800b3e1
 800ce80:	0800b269 	.word	0x0800b269
 800ce84:	0800b159 	.word	0x0800b159
 800ce88:	0800bc1d 	.word	0x0800bc1d
 800ce8c:	0800b985 	.word	0x0800b985
 800ce90:	0800b74d 	.word	0x0800b74d
 800ce94:	0800b569 	.word	0x0800b569
 800ce98:	0800c1f1 	.word	0x0800c1f1
 800ce9c:	0800c0b5 	.word	0x0800c0b5
 800cea0:	0800c831 	.word	0x0800c831
 800cea4:	0800c635 	.word	0x0800c635
 800cea8:	0800c489 	.word	0x0800c489
 800ceac:	0800c31d 	.word	0x0800c31d

0800ceb0 <PDM_Filter>:
 800ceb0:	b410      	push	{r4}
 800ceb2:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <PDM_Filter+0x30>)
 800ceb4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ceb6:	429c      	cmp	r4, r3
 800ceb8:	d107      	bne.n	800ceca <PDM_Filter+0x1a>
 800ceba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cebc:	05dc      	lsls	r4, r3, #23
 800cebe:	d508      	bpl.n	800ced2 <PDM_Filter+0x22>
 800cec0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800cec2:	320c      	adds	r2, #12
 800cec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec8:	4718      	bx	r3
 800ceca:	2004      	movs	r0, #4
 800cecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ced6:	bf14      	ite	ne
 800ced8:	2020      	movne	r0, #32
 800ceda:	2030      	moveq	r0, #48	; 0x30
 800cedc:	e7f6      	b.n	800cecc <PDM_Filter+0x1c>
 800cede:	bf00      	nop
 800cee0:	b5e8b5cd 	.word	0xb5e8b5cd

0800cee4 <__errno>:
 800cee4:	4b01      	ldr	r3, [pc, #4]	; (800ceec <__errno+0x8>)
 800cee6:	6818      	ldr	r0, [r3, #0]
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	24000428 	.word	0x24000428

0800cef0 <__libc_init_array>:
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	4d0d      	ldr	r5, [pc, #52]	; (800cf28 <__libc_init_array+0x38>)
 800cef4:	4c0d      	ldr	r4, [pc, #52]	; (800cf2c <__libc_init_array+0x3c>)
 800cef6:	1b64      	subs	r4, r4, r5
 800cef8:	10a4      	asrs	r4, r4, #2
 800cefa:	2600      	movs	r6, #0
 800cefc:	42a6      	cmp	r6, r4
 800cefe:	d109      	bne.n	800cf14 <__libc_init_array+0x24>
 800cf00:	4d0b      	ldr	r5, [pc, #44]	; (800cf30 <__libc_init_array+0x40>)
 800cf02:	4c0c      	ldr	r4, [pc, #48]	; (800cf34 <__libc_init_array+0x44>)
 800cf04:	f000 f9e4 	bl	800d2d0 <_init>
 800cf08:	1b64      	subs	r4, r4, r5
 800cf0a:	10a4      	asrs	r4, r4, #2
 800cf0c:	2600      	movs	r6, #0
 800cf0e:	42a6      	cmp	r6, r4
 800cf10:	d105      	bne.n	800cf1e <__libc_init_array+0x2e>
 800cf12:	bd70      	pop	{r4, r5, r6, pc}
 800cf14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf18:	4798      	blx	r3
 800cf1a:	3601      	adds	r6, #1
 800cf1c:	e7ee      	b.n	800cefc <__libc_init_array+0xc>
 800cf1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf22:	4798      	blx	r3
 800cf24:	3601      	adds	r6, #1
 800cf26:	e7f2      	b.n	800cf0e <__libc_init_array+0x1e>
 800cf28:	0800d5b0 	.word	0x0800d5b0
 800cf2c:	0800d5b0 	.word	0x0800d5b0
 800cf30:	0800d5b0 	.word	0x0800d5b0
 800cf34:	0800d5b4 	.word	0x0800d5b4

0800cf38 <memset>:
 800cf38:	4402      	add	r2, r0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d100      	bne.n	800cf42 <memset+0xa>
 800cf40:	4770      	bx	lr
 800cf42:	f803 1b01 	strb.w	r1, [r3], #1
 800cf46:	e7f9      	b.n	800cf3c <memset+0x4>

0800cf48 <checkint>:
 800cf48:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cf4c:	2b7e      	cmp	r3, #126	; 0x7e
 800cf4e:	dd10      	ble.n	800cf72 <checkint+0x2a>
 800cf50:	2b96      	cmp	r3, #150	; 0x96
 800cf52:	dc0c      	bgt.n	800cf6e <checkint+0x26>
 800cf54:	2201      	movs	r2, #1
 800cf56:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cf5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5e:	1e5a      	subs	r2, r3, #1
 800cf60:	4202      	tst	r2, r0
 800cf62:	d106      	bne.n	800cf72 <checkint+0x2a>
 800cf64:	4203      	tst	r3, r0
 800cf66:	bf0c      	ite	eq
 800cf68:	2002      	moveq	r0, #2
 800cf6a:	2001      	movne	r0, #1
 800cf6c:	4770      	bx	lr
 800cf6e:	2002      	movs	r0, #2
 800cf70:	4770      	bx	lr
 800cf72:	2000      	movs	r0, #0
 800cf74:	4770      	bx	lr
	...

0800cf78 <powf>:
 800cf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf7a:	ee10 1a10 	vmov	r1, s0
 800cf7e:	ee10 6a90 	vmov	r6, s1
 800cf82:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800cf86:	0072      	lsls	r2, r6, #1
 800cf88:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cf8c:	b085      	sub	sp, #20
 800cf8e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800cf92:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800cf96:	d256      	bcs.n	800d046 <powf+0xce>
 800cf98:	4298      	cmp	r0, r3
 800cf9a:	d256      	bcs.n	800d04a <powf+0xd2>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800cfa2:	4ea3      	ldr	r6, [pc, #652]	; (800d230 <powf+0x2b8>)
 800cfa4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cfa8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800cfac:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800cfb0:	0dd2      	lsrs	r2, r2, #23
 800cfb2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800cfb6:	05d2      	lsls	r2, r2, #23
 800cfb8:	1a8b      	subs	r3, r1, r2
 800cfba:	ed97 5b00 	vldr	d5, [r7]
 800cfbe:	ee07 3a90 	vmov	s15, r3
 800cfc2:	15d2      	asrs	r2, r2, #23
 800cfc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cfc8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cfcc:	ed97 5b02 	vldr	d5, [r7, #8]
 800cfd0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800cfd4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800cfd8:	ee07 2a90 	vmov	s15, r2
 800cfdc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800cfe0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cfe4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cfe8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800cfec:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800cff0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cff4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800cff8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cffc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800d000:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800d004:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d008:	eea2 7b04 	vfma.f64	d7, d2, d4
 800d00c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d010:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d014:	ee10 1a90 	vmov	r1, s1
 800d018:	2300      	movs	r3, #0
 800d01a:	2700      	movs	r7, #0
 800d01c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800d020:	f248 06be 	movw	r6, #32958	; 0x80be
 800d024:	429f      	cmp	r7, r3
 800d026:	bf08      	it	eq
 800d028:	4296      	cmpeq	r6, r2
 800d02a:	f080 80b1 	bcs.w	800d190 <powf+0x218>
 800d02e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800d210 <powf+0x298>
 800d032:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03a:	dd79      	ble.n	800d130 <powf+0x1b8>
 800d03c:	b005      	add	sp, #20
 800d03e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d042:	f000 b91f 	b.w	800d284 <__math_oflowf>
 800d046:	4298      	cmp	r0, r3
 800d048:	d32d      	bcc.n	800d0a6 <powf+0x12e>
 800d04a:	b952      	cbnz	r2, 800d062 <powf+0xea>
 800d04c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800d056:	f240 80cd 	bls.w	800d1f4 <powf+0x27c>
 800d05a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800d05e:	b005      	add	sp, #20
 800d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d062:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800d066:	d105      	bne.n	800d074 <powf+0xfc>
 800d068:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d06c:	0076      	lsls	r6, r6, #1
 800d06e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d072:	e7f0      	b.n	800d056 <powf+0xde>
 800d074:	004b      	lsls	r3, r1, #1
 800d076:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d07a:	d8ee      	bhi.n	800d05a <powf+0xe2>
 800d07c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d080:	d1eb      	bne.n	800d05a <powf+0xe2>
 800d082:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d086:	f000 80b5 	beq.w	800d1f4 <powf+0x27c>
 800d08a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d08e:	ea6f 0606 	mvn.w	r6, r6
 800d092:	bf34      	ite	cc
 800d094:	2300      	movcc	r3, #0
 800d096:	2301      	movcs	r3, #1
 800d098:	0ff6      	lsrs	r6, r6, #31
 800d09a:	42b3      	cmp	r3, r6
 800d09c:	f040 80ad 	bne.w	800d1fa <powf+0x282>
 800d0a0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800d0a4:	e7db      	b.n	800d05e <powf+0xe6>
 800d0a6:	004f      	lsls	r7, r1, #1
 800d0a8:	1e7a      	subs	r2, r7, #1
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d31c      	bcc.n	800d0e8 <powf+0x170>
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d0b4:	da0f      	bge.n	800d0d6 <powf+0x15e>
 800d0b6:	ee10 0a90 	vmov	r0, s1
 800d0ba:	f7ff ff45 	bl	800cf48 <checkint>
 800d0be:	2801      	cmp	r0, #1
 800d0c0:	d109      	bne.n	800d0d6 <powf+0x15e>
 800d0c2:	eeb1 0a40 	vneg.f32	s0, s0
 800d0c6:	b947      	cbnz	r7, 800d0da <powf+0x162>
 800d0c8:	2e00      	cmp	r6, #0
 800d0ca:	dac8      	bge.n	800d05e <powf+0xe6>
 800d0cc:	b005      	add	sp, #20
 800d0ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0d2:	f000 b8dd 	b.w	800d290 <__math_divzerof>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e7f5      	b.n	800d0c6 <powf+0x14e>
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	dabf      	bge.n	800d05e <powf+0xe6>
 800d0de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0e2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d0e6:	e7ba      	b.n	800d05e <powf+0xe6>
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	da1f      	bge.n	800d12c <powf+0x1b4>
 800d0ec:	ee10 0a90 	vmov	r0, s1
 800d0f0:	f7ff ff2a 	bl	800cf48 <checkint>
 800d0f4:	b920      	cbnz	r0, 800d100 <powf+0x188>
 800d0f6:	b005      	add	sp, #20
 800d0f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0fc:	f000 b8d8 	b.w	800d2b0 <__math_invalidf>
 800d100:	2801      	cmp	r0, #1
 800d102:	bf14      	ite	ne
 800d104:	2000      	movne	r0, #0
 800d106:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d10a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d10e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d112:	f4bf af44 	bcs.w	800cf9e <powf+0x26>
 800d116:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d234 <powf+0x2bc>
 800d11a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d11e:	ee10 3a10 	vmov	r3, s0
 800d122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d126:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800d12a:	e738      	b.n	800cf9e <powf+0x26>
 800d12c:	2000      	movs	r0, #0
 800d12e:	e7ee      	b.n	800d10e <powf+0x196>
 800d130:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800d218 <powf+0x2a0>
 800d134:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13c:	dd10      	ble.n	800d160 <powf+0x1e8>
 800d13e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800d142:	2800      	cmp	r0, #0
 800d144:	d15c      	bne.n	800d200 <powf+0x288>
 800d146:	9302      	str	r3, [sp, #8]
 800d148:	eddd 7a02 	vldr	s15, [sp, #8]
 800d14c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d150:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d154:	eef4 7a47 	vcmp.f32	s15, s14
 800d158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15c:	f47f af6e 	bne.w	800d03c <powf+0xc4>
 800d160:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d220 <powf+0x2a8>
 800d164:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16c:	d804      	bhi.n	800d178 <powf+0x200>
 800d16e:	b005      	add	sp, #20
 800d170:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d174:	f000 b87a 	b.w	800d26c <__math_uflowf>
 800d178:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d228 <powf+0x2b0>
 800d17c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d184:	d504      	bpl.n	800d190 <powf+0x218>
 800d186:	b005      	add	sp, #20
 800d188:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d18c:	f000 b874 	b.w	800d278 <__math_may_uflowf>
 800d190:	4b29      	ldr	r3, [pc, #164]	; (800d238 <powf+0x2c0>)
 800d192:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800d196:	ee30 6b07 	vadd.f64	d6, d0, d7
 800d19a:	ed8d 6b00 	vstr	d6, [sp]
 800d19e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d1a2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d1a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d1aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d1ae:	f006 011f 	and.w	r1, r6, #31
 800d1b2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d1b6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800d1ba:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800d1be:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800d1c2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800d1c6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d1ca:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d1ce:	1836      	adds	r6, r6, r0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	eb13 040c 	adds.w	r4, r3, ip
 800d1d6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800d1da:	eb41 050e 	adc.w	r5, r1, lr
 800d1de:	eea7 0b04 	vfma.f64	d0, d7, d4
 800d1e2:	ec45 4b17 	vmov	d7, r4, r5
 800d1e6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d1ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d1ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d1f2:	e734      	b.n	800d05e <powf+0xe6>
 800d1f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1f8:	e731      	b.n	800d05e <powf+0xe6>
 800d1fa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d23c <powf+0x2c4>
 800d1fe:	e72e      	b.n	800d05e <powf+0xe6>
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	eddd 7a03 	vldr	s15, [sp, #12]
 800d206:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d20e:	e7a1      	b.n	800d154 <powf+0x1dc>
 800d210:	ffd1d571 	.word	0xffd1d571
 800d214:	405fffff 	.word	0x405fffff
 800d218:	ffa3aae2 	.word	0xffa3aae2
 800d21c:	405fffff 	.word	0x405fffff
 800d220:	00000000 	.word	0x00000000
 800d224:	c062c000 	.word	0xc062c000
 800d228:	00000000 	.word	0x00000000
 800d22c:	c062a000 	.word	0xc062a000
 800d230:	0800d340 	.word	0x0800d340
 800d234:	4b000000 	.word	0x4b000000
 800d238:	0800d468 	.word	0x0800d468
 800d23c:	00000000 	.word	0x00000000

0800d240 <with_errnof>:
 800d240:	b513      	push	{r0, r1, r4, lr}
 800d242:	4604      	mov	r4, r0
 800d244:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d248:	f7ff fe4c 	bl	800cee4 <__errno>
 800d24c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d250:	6004      	str	r4, [r0, #0]
 800d252:	b002      	add	sp, #8
 800d254:	bd10      	pop	{r4, pc}

0800d256 <xflowf>:
 800d256:	b130      	cbz	r0, 800d266 <xflowf+0x10>
 800d258:	eef1 7a40 	vneg.f32	s15, s0
 800d25c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d260:	2022      	movs	r0, #34	; 0x22
 800d262:	f7ff bfed 	b.w	800d240 <with_errnof>
 800d266:	eef0 7a40 	vmov.f32	s15, s0
 800d26a:	e7f7      	b.n	800d25c <xflowf+0x6>

0800d26c <__math_uflowf>:
 800d26c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d274 <__math_uflowf+0x8>
 800d270:	f7ff bff1 	b.w	800d256 <xflowf>
 800d274:	10000000 	.word	0x10000000

0800d278 <__math_may_uflowf>:
 800d278:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d280 <__math_may_uflowf+0x8>
 800d27c:	f7ff bfeb 	b.w	800d256 <xflowf>
 800d280:	1a200000 	.word	0x1a200000

0800d284 <__math_oflowf>:
 800d284:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d28c <__math_oflowf+0x8>
 800d288:	f7ff bfe5 	b.w	800d256 <xflowf>
 800d28c:	70000000 	.word	0x70000000

0800d290 <__math_divzerof>:
 800d290:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d294:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d298:	2800      	cmp	r0, #0
 800d29a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d29e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d2ac <__math_divzerof+0x1c>
 800d2a2:	2022      	movs	r0, #34	; 0x22
 800d2a4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d2a8:	f7ff bfca 	b.w	800d240 <with_errnof>
 800d2ac:	00000000 	.word	0x00000000

0800d2b0 <__math_invalidf>:
 800d2b0:	eef0 7a40 	vmov.f32	s15, s0
 800d2b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d2b8:	eef4 7a67 	vcmp.f32	s15, s15
 800d2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d2c4:	d602      	bvs.n	800d2cc <__math_invalidf+0x1c>
 800d2c6:	2021      	movs	r0, #33	; 0x21
 800d2c8:	f7ff bfba 	b.w	800d240 <with_errnof>
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <_init>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	bf00      	nop
 800d2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d6:	bc08      	pop	{r3}
 800d2d8:	469e      	mov	lr, r3
 800d2da:	4770      	bx	lr

0800d2dc <_fini>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	bf00      	nop
 800d2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e2:	bc08      	pop	{r3}
 800d2e4:	469e      	mov	lr, r3
 800d2e6:	4770      	bx	lr
