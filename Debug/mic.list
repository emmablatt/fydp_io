
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae08  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800b0d8  0800b0d8  0001b0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b418  0800b418  0001b418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b41c  0800b41c  0001b41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800b420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a80  2400047c  0800b89c  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000efc  0800b89c  00020efc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000219ec  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003030  00000000  00000000  00041e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f30  00000000  00000000  00044ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e40  00000000  00000000  00045df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000320f3  00000000  00000000  00046c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014611  00000000  00000000  00078d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150a49  00000000  00000000  0008d33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001ddd85  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000403c  00000000  00000000  001dde58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b0c0 	.word	0x0800b0c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	0800b0c0 	.word	0x0800b0c0

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f004 fb9b 	bl	8004ad0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f004 fd36 	bl	8004e20 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800b188 	.word	0x0800b188
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_Off+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_Off+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2201      	movs	r2, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	f004 fd16 	bl	8004e20 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800b188 	.word	0x0800b188

08000408 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	68da      	ldr	r2, [r3, #12]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	685a      	ldr	r2, [r3, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2200      	movs	r2, #0
 8000456:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2201      	movs	r2, #1
 8000474:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2200      	movs	r2, #0
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv               = 0;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000496:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	6a1a      	ldr	r2, [r3, #32]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	2b18      	cmp	r3, #24
 80004d8:	d003      	beq.n	80004e2 <MX_SAI1_Block_B_Init+0xda>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b20      	cmp	r3, #32
 80004e0:	d103      	bne.n	80004ea <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80004e8:	e002      	b.n	80004f0 <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2240      	movs	r2, #64	; 0x40
 80004ee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2204      	movs	r2, #4
 80004f4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f007 fdee 	bl	80080e0 <HAL_SAI_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800051c:	601a      	str	r2, [r3, #0]

  return ret;
 800051e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0b0      	sub	sp, #192	; 0xc0
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4618      	mov	r0, r3
 8000538:	f006 faec 	bl	8006b14 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000542:	4293      	cmp	r3, r2
 8000544:	d009      	beq.n	800055a <MX_SAI1_ClockConfig+0x32>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f245 6222 	movw	r2, #22050	; 0x5622
 800054c:	4293      	cmp	r3, r2
 800054e:	d004      	beq.n	800055a <MX_SAI1_ClockConfig+0x32>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000556:	4293      	cmp	r3, r2
 8000558:	d104      	bne.n	8000564 <MX_SAI1_ClockConfig+0x3c>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 36;
 800055a:	2324      	movs	r3, #36	; 0x24
 800055c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 36;
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	61fb      	str	r3, [r7, #28]
 8000562:	e003      	b.n	800056c <MX_SAI1_ClockConfig+0x44>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 8;
 8000564:	2308      	movs	r3, #8
 8000566:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	61fb      	str	r3, [r7, #28]
  }
  rcc_ex_clk_init_struct.PLL2.PLL2N = 80;
 800056c:	2350      	movs	r3, #80	; 0x50
 800056e:	617b      	str	r3, [r7, #20]

  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	60fb      	str	r3, [r7, #12]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8000576:	2301      	movs	r3, #1
 8000578:	663b      	str	r3, [r7, #96]	; 0x60
  rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 800057a:	2302      	movs	r3, #2
 800057c:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 5;
 800057e:	2305      	movs	r3, #5
 8000580:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  rcc_ex_clk_init_struct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000586:	2320      	movs	r3, #32
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  rcc_ex_clk_init_struct.PLL2.PLL2FRACN = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fbc4 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8000598:	4603      	mov	r3, r0
}
 800059a:	4618      	mov	r0, r3
 800059c:	37c0      	adds	r7, #192	; 0xc0
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_SAI_ErrorCallback+0x28>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d103      	bne.n	80005be <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f80a 	bl	80005d0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80005bc:	e002      	b.n	80005c4 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 f864 	bl	800168c <BSP_AUDIO_IN_Error_CallBack>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40015824 	.word	0x40015824

080005d0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx;
  extern DMA_HandleTypeDef hdma_sai4_a;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80005ec:	4b61      	ldr	r3, [pc, #388]	; (8000774 <SAI_MspInit+0x190>)
 80005ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80005f2:	4a60      	ldr	r2, [pc, #384]	; (8000774 <SAI_MspInit+0x190>)
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80005fc:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <SAI_MspInit+0x190>)
 80005fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
 8000608:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800060a:	4b5a      	ldr	r3, [pc, #360]	; (8000774 <SAI_MspInit+0x190>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	4a58      	ldr	r2, [pc, #352]	; (8000774 <SAI_MspInit+0x190>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061a:	4b56      	ldr	r3, [pc, #344]	; (8000774 <SAI_MspInit+0x190>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8000628:	4b52      	ldr	r3, [pc, #328]	; (8000774 <SAI_MspInit+0x190>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062e:	4a51      	ldr	r2, [pc, #324]	; (8000774 <SAI_MspInit+0x190>)
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000638:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <SAI_MspInit+0x190>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
 8000644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8000646:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <SAI_MspInit+0x190>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064c:	4a49      	ldr	r2, [pc, #292]	; (8000774 <SAI_MspInit+0x190>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000656:	4b47      	ldr	r3, [pc, #284]	; (8000774 <SAI_MspInit+0x190>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
 8000662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8000664:	4b43      	ldr	r3, [pc, #268]	; (8000774 <SAI_MspInit+0x190>)
 8000666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066a:	4a42      	ldr	r2, [pc, #264]	; (8000774 <SAI_MspInit+0x190>)
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000674:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <SAI_MspInit+0x190>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
 8000680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8000682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8000694:	2306      	movs	r3, #6
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8000698:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800069c:	4619      	mov	r1, r3
 800069e:	4836      	ldr	r0, [pc, #216]	; (8000778 <SAI_MspInit+0x194>)
 80006a0:	f004 fa16 	bl	8004ad0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80006a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80006aa:	2306      	movs	r3, #6
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80006ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006b2:	4619      	mov	r1, r3
 80006b4:	4830      	ldr	r0, [pc, #192]	; (8000778 <SAI_MspInit+0x194>)
 80006b6:	f004 fa0b 	bl	8004ad0 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80006be:	2306      	movs	r3, #6
 80006c0:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80006c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c6:	4619      	mov	r1, r3
 80006c8:	482b      	ldr	r0, [pc, #172]	; (8000778 <SAI_MspInit+0x194>)
 80006ca:	f004 fa01 	bl	8004ad0 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a2a      	ldr	r2, [pc, #168]	; (800077c <SAI_MspInit+0x198>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d01e      	beq.n	8000716 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SAI_MspInit+0x19c>)
 80006da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d018      	beq.n	8000716 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <SAI_MspInit+0x190>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	4a22      	ldr	r2, [pc, #136]	; (8000774 <SAI_MspInit+0x190>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SAI_MspInit+0x190>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8000706:	2306      	movs	r3, #6
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070e:	4619      	mov	r1, r3
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <SAI_MspInit+0x194>)
 8000712:	f004 f9dd 	bl	8004ad0 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <SAI_MspInit+0x1a0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d16b      	bne.n	80007f8 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <SAI_MspInit+0x190>)
 8000722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <SAI_MspInit+0x190>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <SAI_MspInit+0x190>)
 8000732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
 800073c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SAI_MspInit+0x1a4>)
 8000740:	2258      	movs	r2, #88	; 0x58
 8000742:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <SAI_MspInit+0x1a4>)
 8000746:	2240      	movs	r2, #64	; 0x40
 8000748:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SAI_MspInit+0x1a4>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <SAI_MspInit+0x1a4>)
 8000752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000756:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <SAI_MspInit+0x1a8>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	2b10      	cmp	r3, #16
 800075e:	d117      	bne.n	8000790 <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <SAI_MspInit+0x1a4>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <SAI_MspInit+0x1a4>)
 800076a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076e:	619a      	str	r2, [r3, #24]
 8000770:	e016      	b.n	80007a0 <SAI_MspInit+0x1bc>
 8000772:	bf00      	nop
 8000774:	58024400 	.word	0x58024400
 8000778:	58021400 	.word	0x58021400
 800077c:	58005404 	.word	0x58005404
 8000780:	24000538 	.word	0x24000538
 8000784:	40015824 	.word	0x40015824
 8000788:	240008f0 	.word	0x240008f0
 800078c:	24000bc8 	.word	0x24000bc8
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000790:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <SAI_MspInit+0x2fc>)
 8000792:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000796:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000798:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <SAI_MspInit+0x2fc>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80007a0:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a6:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80007a8:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007ae:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80007bc:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007ca:	4a46      	ldr	r2, [pc, #280]	; (80008e4 <SAI_MspInit+0x300>)
 80007cc:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80007d6:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 80007dc:	4840      	ldr	r0, [pc, #256]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007de:	f002 f921 	bl	8002a24 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 80007e2:	483f      	ldr	r0, [pc, #252]	; (80008e0 <SAI_MspInit+0x2fc>)
 80007e4:	f001 fdc4 	bl	8002370 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	210e      	movs	r1, #14
 80007ec:	2045      	movs	r0, #69	; 0x45
 80007ee:	f001 fb4a 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80007f2:	2045      	movs	r0, #69	; 0x45
 80007f4:	f001 fb61 	bl	8001eba <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <SAI_MspInit+0x304>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	f040 809b 	bne.w	800093a <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000804:	4b39      	ldr	r3, [pc, #228]	; (80008ec <SAI_MspInit+0x308>)
 8000806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800080a:	4a38      	ldr	r2, [pc, #224]	; (80008ec <SAI_MspInit+0x308>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000810:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <SAI_MspInit+0x308>)
 8000816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <SAI_MspInit+0x308>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	4a30      	ldr	r2, [pc, #192]	; (80008ec <SAI_MspInit+0x308>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <SAI_MspInit+0x308>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	623b      	str	r3, [r7, #32]
 800083e:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2302      	movs	r3, #2
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000850:	2306      	movs	r3, #6
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000858:	4619      	mov	r1, r3
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <SAI_MspInit+0x30c>)
 800085c:	f004 f938 	bl	8004ad0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SAI_MspInit+0x308>)
 8000862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SAI_MspInit+0x308>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <SAI_MspInit+0x308>)
 8000872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai4_a handle parameters */
    hdma_sai4_a.Instance                 = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <SAI_MspInit+0x310>)
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <SAI_MspInit+0x314>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <SAI_MspInit+0x310>)
 8000886:	220f      	movs	r2, #15
 8000888:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Mode                = DMA_CIRCULAR;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <SAI_MspInit+0x310>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority            = DMA_PRIORITY_HIGH;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <SAI_MspInit+0x310>)
 8000894:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000898:	621a      	str	r2, [r3, #32]
    hdma_sai4_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <SAI_MspInit+0x310>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <SAI_MspInit+0x310>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc              = DMA_MINC_ENABLE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <SAI_MspInit+0x310>)
 80008a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <SAI_MspInit+0x310>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai4_a.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <SAI_MspInit+0x310>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai4_a.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SAI_MspInit+0x310>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai4_a.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <SAI_MspInit+0x310>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <SAI_MspInit+0x318>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d118      	bne.n	8000900 <SAI_MspInit+0x31c>
    {
      hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <SAI_MspInit+0x310>)
 80008d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d4:	615a      	str	r2, [r3, #20]
      hdma_sai4_a.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <SAI_MspInit+0x310>)
 80008d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	e017      	b.n	8000910 <SAI_MspInit+0x32c>
 80008e0:	240008f0 	.word	0x240008f0
 80008e4:	400204a0 	.word	0x400204a0
 80008e8:	40015804 	.word	0x40015804
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58021000 	.word	0x58021000
 80008f4:	24000dd4 	.word	0x24000dd4
 80008f8:	5802541c 	.word	0x5802541c
 80008fc:	24000bec 	.word	0x24000bec
    }
    else
    {
      hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000900:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000906:	615a      	str	r2, [r3, #20]
      hdma_sai4_a.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <SAI_MspInit+0x4dc>)
 800090a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090e:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai4_a);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a6b      	ldr	r2, [pc, #428]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000918:	4a69      	ldr	r2, [pc, #420]	; (8000ac0 <SAI_MspInit+0x4dc>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai4_a);
 800091e:	4868      	ldr	r0, [pc, #416]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000920:	f002 f880 	bl	8002a24 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai4_a);
 8000924:	4866      	ldr	r0, [pc, #408]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000926:	f001 fd23 	bl	8002370 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	203c      	movs	r0, #60	; 0x3c
 8000930:	f001 faa9 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000934:	203c      	movs	r0, #60	; 0x3c
 8000936:	f001 fac0 	bl	8001eba <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a61      	ldr	r2, [pc, #388]	; (8000ac4 <SAI_MspInit+0x4e0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	f040 80b8 	bne.w	8000ab6 <SAI_MspInit+0x4d2>
  {
     /* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8000946:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800094c:	4a5e      	ldr	r2, [pc, #376]	; (8000ac8 <SAI_MspInit+0x4e4>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000956:	4b5c      	ldr	r3, [pc, #368]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800095c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	69bb      	ldr	r3, [r7, #24]

    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8000964:	4b58      	ldr	r3, [pc, #352]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a57      	ldr	r2, [pc, #348]	; (8000ac8 <SAI_MspInit+0x4e4>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8000982:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a4f      	ldr	r2, [pc, #316]	; (8000ac8 <SAI_MspInit+0x4e4>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 80009a0:	2304      	movs	r3, #4
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2302      	movs	r3, #2
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 80009b0:	230a      	movs	r3, #10
 80009b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 80009b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009b8:	4619      	mov	r1, r3
 80009ba:	4844      	ldr	r0, [pc, #272]	; (8000acc <SAI_MspInit+0x4e8>)
 80009bc:	f004 f888 	bl	8004ad0 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009c4:	2301      	movs	r3, #1
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 80009cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d0:	4619      	mov	r1, r3
 80009d2:	483f      	ldr	r0, [pc, #252]	; (8000ad0 <SAI_MspInit+0x4ec>)
 80009d4:	f004 f87c 	bl	8004ad0 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <SAI_MspInit+0x4e4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4a3a      	ldr	r2, [pc, #232]	; (8000ac8 <SAI_MspInit+0x4e4>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <SAI_MspInit+0x4e4>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 80009f6:	2330      	movs	r3, #48	; 0x30
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2302      	movs	r3, #2
 8000a04:	653b      	str	r3, [r7, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8000a06:	2308      	movs	r3, #8
 8000a08:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000a0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482e      	ldr	r0, [pc, #184]	; (8000acc <SAI_MspInit+0x4e8>)
 8000a12:	f004 f85d 	bl	8004ad0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SAI_MspInit+0x4e4>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai4_a handle parameters */
    hdma_sai4_a.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a36:	220f      	movs	r2, #15
 8000a38:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc              = DMA_MINC_ENABLE;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode                = DMA_CIRCULAR;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a64:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_sai4_a.Init.FIFOMode            = DMA_FIFOMODE_DISABLE; // FIFOMode or Direct mode
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24

    // at least 1 item to take things out, zero items to clear the flag.
    hdma_sai4_a.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai4_a.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai4_a.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai4_a.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <SAI_MspInit+0x4f0>)
 8000a8a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai4_a);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai4_a);
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000a9c:	f001 ffc2 	bl	8002a24 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai4_a);
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <SAI_MspInit+0x4dc>)
 8000aa2:	f001 fc65 	bl	8002370 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	2082      	movs	r0, #130	; 0x82
 8000aac:	f001 f9eb 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8000ab0:	2082      	movs	r0, #130	; 0x82
 8000ab2:	f001 fa02 	bl	8001eba <HAL_NVIC_EnableIRQ>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3758      	adds	r7, #88	; 0x58
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000dd4 	.word	0x24000dd4
 8000ac4:	58005404 	.word	0x58005404
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58021000 	.word	0x58021000
 8000ad0:	58020800 	.word	0x58020800
 8000ad4:	5802541c 	.word	0x5802541c

08000ad8 <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b0a9      	sub	sp, #164	; 0xa4
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d904      	bls.n	8000af8 <BSP_AUDIO_IN_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000aee:	f06f 0301 	mvn.w	r3, #1
 8000af2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000af6:	e2c4      	b.n	8001082 <BSP_AUDIO_IN_Init+0x5aa>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[PDM].Device          = AudioInit->Device;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4aa7      	ldr	r2, [pc, #668]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000afe:	6353      	str	r3, [r2, #52]	; 0x34
    Audio_In_Ctx[PDM].ChannelsNbr     = AudioInit->ChannelsNbr;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4aa5      	ldr	r2, [pc, #660]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
    Audio_In_Ctx[PDM].SampleRate      = AudioInit->SampleRate;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4aa3      	ldr	r2, [pc, #652]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000b0e:	6393      	str	r3, [r2, #56]	; 0x38
    Audio_In_Ctx[PDM].BitsPerSample   = AudioInit->BitsPerSample;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4aa1      	ldr	r2, [pc, #644]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000b16:	63d3      	str	r3, [r2, #60]	; 0x3c
    Audio_In_Ctx[PDM].Volume          = AudioInit->Volume;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	4a9f      	ldr	r2, [pc, #636]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000b1e:	6513      	str	r3, [r2, #80]	; 0x50
    Audio_In_Ctx[PDM].State           = AUDIO_IN_STATE_RESET;
 8000b20:	4b9e      	ldr	r3, [pc, #632]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54

    if(Instance == 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f040 80a8 	bne.w	8000c7e <BSP_AUDIO_IN_Init+0x1a6>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[PDM], AudioInit->SampleRate) != HAL_OK)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4619      	mov	r1, r3
 8000b34:	489a      	ldr	r0, [pc, #616]	; (8000da0 <BSP_AUDIO_IN_Init+0x2c8>)
 8000b36:	f7ff fcf7 	bl	8000528 <MX_SAI1_ClockConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <BSP_AUDIO_IN_Init+0x72>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000b40:	f06f 0308 	mvn.w	r3, #8
 8000b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b48:	e298      	b.n	800107c <BSP_AUDIO_IN_Init+0x5a4>
      }
      else
      {
        haudio_in_sai[PDM].Instance    = AUDIO_IN_SAIx;
 8000b4a:	4b96      	ldr	r3, [pc, #600]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000b4c:	4a96      	ldr	r2, [pc, #600]	; (8000da8 <BSP_AUDIO_IN_Init+0x2d0>)
 8000b4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8000b52:	4b96      	ldr	r3, [pc, #600]	; (8000dac <BSP_AUDIO_IN_Init+0x2d4>)
 8000b54:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <BSP_AUDIO_IN_Init+0x2d8>)
 8000b56:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[PDM]);
 8000b58:	4891      	ldr	r0, [pc, #580]	; (8000da0 <BSP_AUDIO_IN_Init+0x2c8>)
 8000b5a:	f7ff fd43 	bl	80005e4 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8000b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f040 828a 	bne.w	800107c <BSP_AUDIO_IN_Init+0x5a4>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[PDM].SampleRate;
 8000b68:	4b8c      	ldr	r3, [pc, #560]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b6c:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d102      	bne.n	8000b84 <BSP_AUDIO_IN_Init+0xac>
 8000b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b82:	e000      	b.n	8000b86 <BSP_AUDIO_IN_Init+0xae>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_config.ActiveFrameLength     = 64;
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[PDM], &mx_config) != HAL_OK)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	487c      	ldr	r0, [pc, #496]	; (8000da0 <BSP_AUDIO_IN_Init+0x2c8>)
 8000bae:	f000 fb61 	bl	8001274 <MX_SAI1_Block_A_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d004      	beq.n	8000bc2 <BSP_AUDIO_IN_Init+0xea>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8000bb8:	f06f 0303 	mvn.w	r3, #3
 8000bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bc0:	e010      	b.n	8000be4 <BSP_AUDIO_IN_Init+0x10c>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4876      	ldr	r0, [pc, #472]	; (8000dac <BSP_AUDIO_IN_Init+0x2d4>)
 8000bd2:	f7ff fc19 	bl	8000408 <MX_SAI1_Block_B_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <BSP_AUDIO_IN_Init+0x10c>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8000bdc:	f06f 0303 	mvn.w	r3, #3
 8000be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8000be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f040 8247 	bne.w	800107c <BSP_AUDIO_IN_Init+0x5a4>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8000bee:	4b71      	ldr	r3, [pc, #452]	; (8000db4 <BSP_AUDIO_IN_Init+0x2dc>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <BSP_AUDIO_IN_Init+0x122>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <BSP_AUDIO_IN_Init+0x124>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b20      	cmp	r3, #32
 8000c0e:	d101      	bne.n	8000c14 <BSP_AUDIO_IN_Init+0x13c>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e000      	b.n	8000c16 <BSP_AUDIO_IN_Init+0x13e>
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <BSP_AUDIO_IN_Init+0x14e>
 8000c22:	2303      	movs	r3, #3
 8000c24:	e000      	b.n	8000c28 <BSP_AUDIO_IN_Init+0x150>
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b63      	cmp	r3, #99	; 0x63
 8000c32:	d80c      	bhi.n	8000c4e <BSP_AUDIO_IN_Init+0x176>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	4a5d      	ldr	r2, [pc, #372]	; (8000db8 <BSP_AUDIO_IN_Init+0x2e0>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	095b      	lsrs	r3, r3, #5
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	e000      	b.n	8000c50 <BSP_AUDIO_IN_Init+0x178>
 8000c4e:	23ef      	movs	r3, #239	; 0xef
 8000c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8000c54:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <BSP_AUDIO_IN_Init+0x2e4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a59      	ldr	r2, [pc, #356]	; (8000dc0 <BSP_AUDIO_IN_Init+0x2e8>)
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000c62:	4610      	mov	r0, r2
 8000c64:	4798      	blx	r3
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da04      	bge.n	8000c76 <BSP_AUDIO_IN_Init+0x19e>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8000c6c:	f06f 0304 	mvn.w	r3, #4
 8000c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c74:	e202      	b.n	800107c <BSP_AUDIO_IN_Init+0x5a4>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[PDM].State = AUDIO_IN_STATE_STOP;
 8000c76:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c7c:	e1fe      	b.n	800107c <BSP_AUDIO_IN_Init+0x5a4>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d14b      	bne.n	8000d1c <BSP_AUDIO_IN_Init+0x244>
    {
      if(Audio_In_Ctx[PDM].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c88:	2b10      	cmp	r3, #16
 8000c8a:	d004      	beq.n	8000c96 <BSP_AUDIO_IN_Init+0x1be>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8000c8c:	f06f 0301 	mvn.w	r3, #1
 8000c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c94:	e1f2      	b.n	800107c <BSP_AUDIO_IN_Init+0x5a4>
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[PDM], AudioInit->SampleRate) != HAL_OK)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4840      	ldr	r0, [pc, #256]	; (8000da0 <BSP_AUDIO_IN_Init+0x2c8>)
 8000c9e:	f000 fa25 	bl	80010ec <MX_SAI4_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <BSP_AUDIO_IN_Init+0x1d6>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8000ca8:	f06f 0308 	mvn.w	r3, #8
 8000cac:	e1eb      	b.n	8001086 <BSP_AUDIO_IN_Init+0x5ae>
      }
      haudio_in_sai[PDM].Instance = AUDIO_IN_SAI_PDMx;
 8000cae:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <BSP_AUDIO_IN_Init+0x2cc>)
 8000cb0:	4a44      	ldr	r2, [pc, #272]	; (8000dc4 <BSP_AUDIO_IN_Init+0x2ec>)
 8000cb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai[PDM]);
 8000cb6:	483a      	ldr	r0, [pc, #232]	; (8000da0 <BSP_AUDIO_IN_Init+0x2c8>)
 8000cb8:	f7ff fc94 	bl	80005e4 <SAI_MspInit>

      /* Prepare haudio_in_sai handle */
      // TODO comment back in?
//      mx_config.MonoStereoMode    = SAI_STEREOMODE;
//      mx_config.DataSize          = SAI_DATASIZE_16;
      mx_config.FrameLength       = 15;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      mx_config.ActiveFrameLength = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]

      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[PDM].SampleRate*8;
 8000ccc:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24



      if(MX_SAI4_Block_A_Init(&haudio_in_sai[PDM], &mx_config) != HAL_OK)
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	482d      	ldr	r0, [pc, #180]	; (8000da0 <BSP_AUDIO_IN_Init+0x2c8>)
 8000cec:	f000 fb51 	bl	8001392 <MX_SAI4_Block_A_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <BSP_AUDIO_IN_Init+0x224>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8000cf6:	f06f 0303 	mvn.w	r3, #3
 8000cfa:	e1c4      	b.n	8001086 <BSP_AUDIO_IN_Init+0x5ae>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[PDM].ChannelsNbr, Audio_In_Ctx[PDM].ChannelsNbr) != BSP_ERROR_NONE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <BSP_AUDIO_IN_Init+0x2c4>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 fbc7 	bl	800149c <BSP_AUDIO_IN_PDMToPCM_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 81b3 	beq.w	800107c <BSP_AUDIO_IN_Init+0x5a4>
      {
        return BSP_ERROR_NO_INIT;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1a:	e1b4      	b.n	8001086 <BSP_AUDIO_IN_Init+0x5ae>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <BSP_AUDIO_IN_Init+0x2f0>)
 8000d1e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <BSP_AUDIO_IN_Init+0x2f4>)
 8000d2a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <BSP_AUDIO_IN_Init+0x2f8>)
 8000d36:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <BSP_AUDIO_IN_Init+0x2fc>)
 8000d42:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <BSP_AUDIO_IN_Init+0x300>)
 8000d4e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <BSP_AUDIO_IN_Init+0x304>)
 8000d60:	f000 f99c 	bl	800109c <MX_DFSDM1_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <BSP_AUDIO_IN_Init+0x29a>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8000d6a:	f06f 0308 	mvn.w	r3, #8
 8000d6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8000d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8180 	bne.w	800107c <BSP_AUDIO_IN_Init+0x5a4>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[PDM]);
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <BSP_AUDIO_IN_Init+0x308>)
 8000d7e:	f000 fd33 	bl	80017e8 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[PDM]);
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <BSP_AUDIO_IN_Init+0x30c>)
 8000d84:	f000 fc8c 	bl	80016a0 <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 8000d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f040 8175 	bne.w	800107c <BSP_AUDIO_IN_Init+0x5a4>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000d98:	e169      	b.n	800106e <BSP_AUDIO_IN_Init+0x596>
 8000d9a:	bf00      	nop
 8000d9c:	24000bec 	.word	0x24000bec
 8000da0:	240005d0 	.word	0x240005d0
 8000da4:	24000538 	.word	0x24000538
 8000da8:	40015804 	.word	0x40015804
 8000dac:	240004a0 	.word	0x240004a0
 8000db0:	40015824 	.word	0x40015824
 8000db4:	24000bc8 	.word	0x24000bc8
 8000db8:	51eb851f 	.word	0x51eb851f
 8000dbc:	24000668 	.word	0x24000668
 8000dc0:	2400049c 	.word	0x2400049c
 8000dc4:	58005404 	.word	0x58005404
 8000dc8:	0800b0d8 	.word	0x0800b0d8
 8000dcc:	0800b0e8 	.word	0x0800b0e8
 8000dd0:	0800b0f8 	.word	0x0800b0f8
 8000dd4:	0800b108 	.word	0x0800b108
 8000dd8:	0800b118 	.word	0x0800b118
 8000ddc:	24000998 	.word	0x24000998
 8000de0:	24000acc 	.word	0x24000acc
 8000de4:	240009d0 	.word	0x240009d0
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8000de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000df2:	4413      	add	r3, r2
 8000df4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000df8:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8000dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e04:	4413      	add	r3, r2
 8000e06:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e0a:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8000e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e16:	4413      	add	r3, r2
 8000e18:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000e1c:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8000e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e28:	4413      	add	r3, r2
 8000e2a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000e2e:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 8000e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[PDM].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8000e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <BSP_AUDIO_IN_Init+0x38e>
 8000e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d807      	bhi.n	8000e66 <BSP_AUDIO_IN_Init+0x38e>
 8000e56:	4b8e      	ldr	r3, [pc, #568]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <BSP_AUDIO_IN_Init+0x38e>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[PDM].SampleRate);
 8000e66:	4b8a      	ldr	r3, [pc, #552]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e6e:	d036      	beq.n	8000ede <BSP_AUDIO_IN_Init+0x406>
 8000e70:	4b87      	ldr	r3, [pc, #540]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e74:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d02d      	beq.n	8000ed8 <BSP_AUDIO_IN_Init+0x400>
 8000e7c:	4b84      	ldr	r3, [pc, #528]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e80:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000e84:	d025      	beq.n	8000ed2 <BSP_AUDIO_IN_Init+0x3fa>
 8000e86:	4b82      	ldr	r3, [pc, #520]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8a:	f245 6222 	movw	r2, #22050	; 0x5622
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01c      	beq.n	8000ecc <BSP_AUDIO_IN_Init+0x3f4>
 8000e92:	4b7f      	ldr	r3, [pc, #508]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e96:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000e9a:	d014      	beq.n	8000ec6 <BSP_AUDIO_IN_Init+0x3ee>
 8000e9c:	4b7c      	ldr	r3, [pc, #496]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00b      	beq.n	8000ec0 <BSP_AUDIO_IN_Init+0x3e8>
 8000ea8:	4b79      	ldr	r3, [pc, #484]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d102      	bne.n	8000eba <BSP_AUDIO_IN_Init+0x3e2>
 8000eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eb8:	e013      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000eba:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000ebe:	e010      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000ec0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ec4:	e00d      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000ec6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eca:	e00a      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000ecc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ed0:	e007      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000ed2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ed6:	e004      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000ed8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000edc:	e001      	b.n	8000ee2 <BSP_AUDIO_IN_Init+0x40a>
 8000ede:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ee2:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[PDM].SampleRate);
 8000ee4:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000eec:	d030      	beq.n	8000f50 <BSP_AUDIO_IN_Init+0x478>
 8000eee:	4b68      	ldr	r3, [pc, #416]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef2:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d027      	beq.n	8000f4a <BSP_AUDIO_IN_Init+0x472>
 8000efa:	4b65      	ldr	r3, [pc, #404]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f02:	d020      	beq.n	8000f46 <BSP_AUDIO_IN_Init+0x46e>
 8000f04:	4b62      	ldr	r3, [pc, #392]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f08:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d018      	beq.n	8000f42 <BSP_AUDIO_IN_Init+0x46a>
 8000f10:	4b5f      	ldr	r3, [pc, #380]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f18:	d011      	beq.n	8000f3e <BSP_AUDIO_IN_Init+0x466>
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d009      	beq.n	8000f3a <BSP_AUDIO_IN_Init+0x462>
 8000f26:	4b5a      	ldr	r3, [pc, #360]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <BSP_AUDIO_IN_Init+0x45e>
 8000f32:	2320      	movs	r3, #32
 8000f34:	e00e      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f36:	2310      	movs	r3, #16
 8000f38:	e00c      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	e00a      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	e008      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	e006      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	e004      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	e001      	b.n	8000f54 <BSP_AUDIO_IN_Init+0x47c>
 8000f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f54:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[PDM].SampleRate);
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000f5e:	d027      	beq.n	8000fb0 <BSP_AUDIO_IN_Init+0x4d8>
 8000f60:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f64:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d01f      	beq.n	8000fac <BSP_AUDIO_IN_Init+0x4d4>
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f70:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f74:	d018      	beq.n	8000fa8 <BSP_AUDIO_IN_Init+0x4d0>
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d010      	beq.n	8000fa4 <BSP_AUDIO_IN_Init+0x4cc>
 8000f82:	4b43      	ldr	r3, [pc, #268]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f86:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f8a:	d009      	beq.n	8000fa0 <BSP_AUDIO_IN_Init+0x4c8>
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f90:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <BSP_AUDIO_IN_Init+0x4c4>
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e00a      	b.n	8000fb2 <BSP_AUDIO_IN_Init+0x4da>
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	e008      	b.n	8000fb2 <BSP_AUDIO_IN_Init+0x4da>
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	e006      	b.n	8000fb2 <BSP_AUDIO_IN_Init+0x4da>
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	e004      	b.n	8000fb2 <BSP_AUDIO_IN_Init+0x4da>
 8000fa8:	2318      	movs	r3, #24
 8000faa:	e002      	b.n	8000fb2 <BSP_AUDIO_IN_Init+0x4da>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e000      	b.n	8000fb2 <BSP_AUDIO_IN_Init+0x4da>
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[PDM].SampleRate);
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000fbc:	d027      	beq.n	800100e <BSP_AUDIO_IN_Init+0x536>
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc2:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <BSP_AUDIO_IN_Init+0x532>
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000fd2:	d018      	beq.n	8001006 <BSP_AUDIO_IN_Init+0x52e>
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd8:	f245 6222 	movw	r2, #22050	; 0x5622
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d010      	beq.n	8001002 <BSP_AUDIO_IN_Init+0x52a>
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000fe8:	d009      	beq.n	8000ffe <BSP_AUDIO_IN_Init+0x526>
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <BSP_AUDIO_IN_Init+0x522>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e00a      	b.n	8001010 <BSP_AUDIO_IN_Init+0x538>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e008      	b.n	8001010 <BSP_AUDIO_IN_Init+0x538>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e006      	b.n	8001010 <BSP_AUDIO_IN_Init+0x538>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <BSP_AUDIO_IN_Init+0x538>
 8001006:	2303      	movs	r3, #3
 8001008:	e002      	b.n	8001010 <BSP_AUDIO_IN_Init+0x538>
 800100a:	2306      	movs	r3, #6
 800100c:	e000      	b.n	8001010 <BSP_AUDIO_IN_Init+0x538>
 800100e:	2305      	movs	r3, #5
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800101a:	fa22 f303 	lsr.w	r3, r2, r3
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	2b00      	cmp	r3, #0
 8001024:	d01a      	beq.n	800105c <BSP_AUDIO_IN_Init+0x584>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 8001026:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800102a:	2254      	movs	r2, #84	; 0x54
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <BSP_AUDIO_IN_Init+0x5bc>)
 8001032:	1898      	adds	r0, r3, r2
 8001034:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4a15      	ldr	r2, [pc, #84]	; (8001098 <BSP_AUDIO_IN_Init+0x5c0>)
 8001042:	4413      	add	r3, r2
 8001044:	f107 0208 	add.w	r2, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	f000 f894 	bl	8001176 <MX_DFSDM1_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <BSP_AUDIO_IN_Init+0x584>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 8001054:	f06f 0303 	mvn.w	r3, #3
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 800105c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10a      	bne.n	800107a <BSP_AUDIO_IN_Init+0x5a2>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8001064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001068:	3301      	adds	r3, #1
 800106a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800106e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001072:	2b03      	cmp	r3, #3
 8001074:	f67f aeb8 	bls.w	8000de8 <BSP_AUDIO_IN_Init+0x310>
 8001078:	e000      	b.n	800107c <BSP_AUDIO_IN_Init+0x5a4>
            {
              break;
 800107a:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[PDM].State = AUDIO_IN_STATE_STOP;
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <BSP_AUDIO_IN_Init+0x5b8>)
 800107e:	2202      	movs	r2, #2
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return BSP status */
  return ret;
 8001082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
}
 8001086:	4618      	mov	r0, r3
 8001088:	37a4      	adds	r7, #164	; 0xa4
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	24000bec 	.word	0x24000bec
 8001094:	24000a78 	.word	0x24000a78
 8001098:	24000998 	.word	0x24000998

0800109c <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0b0      	sub	sp, #192	; 0xc0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 fd2f 	bl	8006b14 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_DFSDM1_ClockConfig+0x44>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10a      	bne.n	80010d4 <MX_DFSDM1_ClockConfig+0x38>
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_DFSDM1_ClockConfig+0x48>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_DFSDM1_ClockConfig+0x4c>)
 80010ca:	f7ff fa2d 	bl	8000528 <MX_SAI1_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 80010d4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 80010d8:	4618      	mov	r0, r3
 80010da:	37c0      	adds	r7, #192	; 0xc0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000bc8 	.word	0x24000bc8
 80010e4:	24000bec 	.word	0x24000bec
 80010e8:	24000538 	.word	0x24000538

080010ec <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b0      	sub	sp, #192	; 0xc0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4618      	mov	r0, r3
 8001102:	f005 fd07 	bl	8006b14 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f642 3211 	movw	r2, #11025	; 0x2b11
 800110c:	4293      	cmp	r3, r2
 800110e:	d009      	beq.n	8001124 <MX_SAI4_ClockConfig+0x38>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f245 6222 	movw	r2, #22050	; 0x5622
 8001116:	4293      	cmp	r3, r2
 8001118:	d004      	beq.n	8001124 <MX_SAI4_ClockConfig+0x38>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001120:	4293      	cmp	r3, r2
 8001122:	d105      	bne.n	8001130 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 24;
 8001124:	2318      	movs	r3, #24
 8001126:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 271;
 8001128:	f240 130f 	movw	r3, #271	; 0x10f
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	e004      	b.n	800113a <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8001130:	2307      	movs	r3, #7
 8001132:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8001134:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001138:	613b      	str	r3, [r7, #16]
  }

  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	60bb      	str	r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8001140:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8001150:	2319      	movs	r3, #25
 8001152:	60fb      	str	r3, [r7, #12]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fde1 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <MX_SAI4_ClockConfig+0x7e>
  {
    ret = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  }

  return ret;
 800116a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 800116e:	4618      	mov	r0, r3
 8001170:	37c0      	adds	r7, #192	; 0xc0
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2201      	movs	r2, #1
 8001196:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b6:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80011be:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2201      	movs	r2, #1
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 ff52 	bl	8002080 <HAL_DFSDM_FilterInit>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e042      	b.n	800126c <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2204      	movs	r2, #4
 8001214:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	220a      	movs	r2, #10
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2200      	movs	r2, #0
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f000 fe54 	bl	8001ef0 <HAL_DFSDM_ChannelInit>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00c      	b.n	800126c <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 fff6 	bl	800224c <HAL_DFSDM_FilterConfigRegChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001290:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2210      	movs	r2, #16
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001302:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.PdmInit.Activation     = ENABLE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr	= 1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable	= SAI_PDM_CLOCK2_ENABLE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	641a      	str	r2, [r3, #64]	; 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001336:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001344:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	669a      	str	r2, [r3, #104]	; 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b18      	cmp	r3, #24
 8001352:	d003      	beq.n	800135c <MX_SAI1_Block_A_Init+0xe8>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b20      	cmp	r3, #32
 800135a:	d103      	bne.n	8001364 <MX_SAI1_Block_A_Init+0xf0>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	66da      	str	r2, [r3, #108]	; 0x6c
 8001362:	e002      	b.n	800136a <MX_SAI1_Block_A_Init+0xf6>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f006 feb1 	bl	80080e0 <HAL_SAI_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_SAI1_Block_A_Init+0x114>
  {
    ret = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013ae:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ce:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2210      	movs	r2, #16
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv                 = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK2_ENABLE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001432:	641a      	str	r2, [r3, #64]	; 0x40

// wrong clock config - what is master clock for
  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001450:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber         = 1; // TODO: =2? pg 2305 rm0468
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	675a      	str	r2, [r3, #116]	; 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f006 fe34 	bl	80080e0 <HAL_SAI_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001490:	601a      	str	r2, [r3, #0]

  return ret;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d002      	beq.n	80014ba <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 80014b4:	f06f 0301 	mvn.w	r3, #1
 80014b8:	e085      	b.n	80015c6 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ba:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]


    for(index = 0; index < ChnlNbrIn; index++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e06e      	b.n	80015bc <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 80014de:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	214c      	movs	r1, #76	; 0x4c
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	2201      	movs	r2, #1
 80014ec:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80014ee:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	214c      	movs	r1, #76	; 0x4c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	3302      	adds	r3, #2
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001500:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	214c      	movs	r1, #76	; 0x4c
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8001510:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b298      	uxth	r0, r3
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	214c      	movs	r1, #76	; 0x4c
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	330a      	adds	r3, #10
 8001524:	4602      	mov	r2, r0
 8001526:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	b298      	uxth	r0, r3
 800152c:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	214c      	movs	r1, #76	; 0x4c
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	3308      	adds	r3, #8
 800153a:	4602      	mov	r2, r0
 800153c:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	224c      	movs	r2, #76	; 0x4c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8001548:	4413      	add	r3, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f009 f9f6 	bl	800a93c <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	b298      	uxth	r0, r3
 800155c:	4920      	ldr	r1, [pc, #128]	; (80015e0 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	440b      	add	r3, r1
 800156a:	3302      	adds	r3, #2
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8001570:	491b      	ldr	r1, [pc, #108]	; (80015e0 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	3304      	adds	r3, #4
 8001580:	2218      	movs	r2, #24
 8001582:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	440b      	add	r3, r1
 8001592:	2202      	movs	r2, #2
 8001594:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	224c      	movs	r2, #76	; 0x4c
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80015a0:	1898      	adds	r0, r3, r2
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80015ae:	4413      	add	r3, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f009 fa93 	bl	800aadc <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d38c      	bcc.n	80014de <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	58024400 	.word	0x58024400
 80015d4:	2400084c 	.word	0x2400084c
 80015d8:	7e809d48 	.word	0x7e809d48
 80015dc:	10624dd3 	.word	0x10624dd3
 80015e0:	240008e4 	.word	0x240008e4

080015e4 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015fa:	f06f 0301 	mvn.w	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e011      	b.n	8001626 <BSP_AUDIO_IN_RecordPDM+0x42>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[PDM], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[PDM].BitsPerSample/8U))) != HAL_OK)
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <BSP_AUDIO_IN_RecordPDM+0x4c>)
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <BSP_AUDIO_IN_RecordPDM+0x50>)
 8001616:	f006 ff77 	bl	8008508 <HAL_SAI_Receive_DMA>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <BSP_AUDIO_IN_RecordPDM+0x42>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001620:	f06f 0303 	mvn.w	r3, #3
 8001624:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8001626:	697b      	ldr	r3, [r7, #20]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	24000bec 	.word	0x24000bec
 8001634:	240005d0 	.word	0x240005d0

08001638 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001640:	2000      	movs	r0, #0
 8001642:	f000 f819 	bl	8001678 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f804 	bl	8001664 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 80016b4:	4b49      	ldr	r3, [pc, #292]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ba:	4a48      	ldr	r2, [pc, #288]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016c4:	4b45      	ldr	r3, [pc, #276]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a40      	ldr	r2, [pc, #256]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 80016f0:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	4a31      	ldr	r2, [pc, #196]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <DFSDM_ChannelMspInit+0x13c>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8001768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 800176e:	2303      	movs	r3, #3
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4819      	ldr	r0, [pc, #100]	; (80017e0 <DFSDM_ChannelMspInit+0x140>)
 800177a:	f003 f9a9 	bl	8004ad0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8001782:	2303      	movs	r3, #3
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4814      	ldr	r0, [pc, #80]	; (80017e0 <DFSDM_ChannelMspInit+0x140>)
 800178e:	f003 f99f 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8001796:	2303      	movs	r3, #3
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <DFSDM_ChannelMspInit+0x140>)
 80017a2:	f003 f995 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 80017a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 80017ac:	2303      	movs	r3, #3
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <DFSDM_ChannelMspInit+0x144>)
 80017b8:	f003 f98a 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 80017c2:	2303      	movs	r3, #3
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <DFSDM_ChannelMspInit+0x144>)
 80017ce:	f003 f97f 	bl	8004ad0 <HAL_GPIO_Init>

}
 80017d2:	bf00      	nop
 80017d4:	3738      	adds	r7, #56	; 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58021000 	.word	0x58021000
 80017e4:	58021400 	.word	0x58021400

080017e8 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b0a1      	sub	sp, #132	; 0x84
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 80017f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 80017fe:	4a61      	ldr	r2, [pc, #388]	; (8001984 <DFSDM_FilterMspInit+0x19c>)
 8001800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001808:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 800180c:	4b5e      	ldr	r3, [pc, #376]	; (8001988 <DFSDM_FilterMspInit+0x1a0>)
 800180e:	f107 0420 	add.w	r4, r7, #32
 8001812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8001818:	4b5c      	ldr	r3, [pc, #368]	; (800198c <DFSDM_FilterMspInit+0x1a4>)
 800181a:	f107 0410 	add.w	r4, r7, #16
 800181e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <DFSDM_FilterMspInit+0x1a8>)
 8001826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800182a:	4a59      	ldr	r2, [pc, #356]	; (8001990 <DFSDM_FilterMspInit+0x1a8>)
 800182c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001830:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <DFSDM_FilterMspInit+0x1a8>)
 8001836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800183a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <DFSDM_FilterMspInit+0x1a8>)
 8001844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001848:	4a51      	ldr	r2, [pc, #324]	; (8001990 <DFSDM_FilterMspInit+0x1a8>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <DFSDM_FilterMspInit+0x1a8>)
 8001854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001864:	e194      	b.n	8001b90 <DFSDM_FilterMspInit+0x3a8>
 8001866:	2310      	movs	r3, #16
 8001868:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	66fb      	str	r3, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001874:	677b      	str	r3, [r7, #116]	; 0x74
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <DFSDM_FilterMspInit+0x98>
  {
    return 32U;
 800187c:	2320      	movs	r3, #32
 800187e:	e003      	b.n	8001888 <DFSDM_FilterMspInit+0xa0>
  }
  return __builtin_clz(value);
 8001880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8001888:	3b04      	subs	r3, #4
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001890:	4413      	add	r3, r2
 8001892:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d010      	beq.n	80018bc <DFSDM_FilterMspInit+0xd4>
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <DFSDM_FilterMspInit+0x1ac>)
 800189c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <DFSDM_FilterMspInit+0xd4>
    {
      mic_num = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 80018aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018b2:	4413      	add	r3, r2
 80018b4:	2201      	movs	r2, #1
 80018b6:	f843 2c48 	str.w	r2, [r3, #-72]
 80018ba:	e08c      	b.n	80019d6 <DFSDM_FilterMspInit+0x1ee>
 80018bc:	2320      	movs	r3, #32
 80018be:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80018c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80018cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <DFSDM_FilterMspInit+0xee>
    return 32U;
 80018d2:	2320      	movs	r3, #32
 80018d4:	e003      	b.n	80018de <DFSDM_FilterMspInit+0xf6>
  return __builtin_clz(value);
 80018d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 80018de:	3b04      	subs	r3, #4
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018e6:	4413      	add	r3, r2
 80018e8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d010      	beq.n	8001912 <DFSDM_FilterMspInit+0x12a>
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <DFSDM_FilterMspInit+0x1ac>)
 80018f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00a      	beq.n	8001912 <DFSDM_FilterMspInit+0x12a>
    {
      mic_num = 1U;
 80018fc:	2301      	movs	r3, #1
 80018fe:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001908:	4413      	add	r3, r2
 800190a:	2201      	movs	r2, #1
 800190c:	f843 2c48 	str.w	r2, [r3, #-72]
 8001910:	e061      	b.n	80019d6 <DFSDM_FilterMspInit+0x1ee>
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <DFSDM_FilterMspInit+0x144>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e003      	b.n	8001934 <DFSDM_FilterMspInit+0x14c>
  return __builtin_clz(value);
 800192c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8001934:	3b04      	subs	r3, #4
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800193c:	4413      	add	r3, r2
 800193e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d010      	beq.n	8001968 <DFSDM_FilterMspInit+0x180>
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <DFSDM_FilterMspInit+0x1ac>)
 8001948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <DFSDM_FilterMspInit+0x180>
    {
      mic_num = 2U;
 8001952:	2302      	movs	r3, #2
 8001954:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 8001956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800195e:	4413      	add	r3, r2
 8001960:	2201      	movs	r2, #1
 8001962:	f843 2c48 	str.w	r2, [r3, #-72]
 8001966:	e036      	b.n	80019d6 <DFSDM_FilterMspInit+0x1ee>
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001976:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <DFSDM_FilterMspInit+0x1b0>
    return 32U;
 800197e:	2320      	movs	r3, #32
 8001980:	e00e      	b.n	80019a0 <DFSDM_FilterMspInit+0x1b8>
 8001982:	bf00      	nop
 8001984:	0800b128 	.word	0x0800b128
 8001988:	0800b130 	.word	0x0800b130
 800198c:	0800b140 	.word	0x0800b140
 8001990:	58024400 	.word	0x58024400
 8001994:	24000bec 	.word	0x24000bec
  return __builtin_clz(value);
 8001998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 80019a0:	3b04      	subs	r3, #4
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019a8:	4413      	add	r3, r2
 80019aa:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f000 80f2 	beq.w	8001b98 <DFSDM_FilterMspInit+0x3b0>
 80019b4:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <DFSDM_FilterMspInit+0x3b8>)
 80019b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80eb 	beq.w	8001b98 <DFSDM_FilterMspInit+0x3b0>
    {
      mic_num = 3U;
 80019c2:	2303      	movs	r3, #3
 80019c4:	67bb      	str	r3, [r7, #120]	; 0x78
      mic_init[mic_num] = 1;
 80019c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019ce:	4413      	add	r3, r2
 80019d0:	2201      	movs	r2, #1
 80019d2:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 80019d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019de:	4413      	add	r3, r2
 80019e0:	f853 1c70 	ldr.w	r1, [r3, #-112]
 80019e4:	486f      	ldr	r0, [pc, #444]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 80019e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4403      	add	r3, r0
 80019f2:	3304      	adds	r3, #4
 80019f4:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 80019f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019fe:	4413      	add	r3, r2
 8001a00:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8001a04:	4867      	ldr	r0, [pc, #412]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4403      	add	r3, r0
 8001a12:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001a14:	4963      	ldr	r1, [pc, #396]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a16:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	3308      	adds	r3, #8
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001a28:	495e      	ldr	r1, [pc, #376]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a2a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	330c      	adds	r3, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8001a3c:	4959      	ldr	r1, [pc, #356]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a3e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a50:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a52:	4954      	ldr	r1, [pc, #336]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a56:	4613      	mov	r3, r2
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3314      	adds	r3, #20
 8001a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a66:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a68:	494e      	ldr	r1, [pc, #312]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3318      	adds	r3, #24
 8001a78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8001a7e:	4949      	ldr	r1, [pc, #292]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	331c      	adds	r3, #28
 8001a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a92:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8001a94:	4943      	ldr	r1, [pc, #268]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001a96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa8:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001aaa:	493e      	ldr	r1, [pc, #248]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001aac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001aae:	4613      	mov	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3324      	adds	r3, #36	; 0x24
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8001abe:	4939      	ldr	r1, [pc, #228]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001ac0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	332c      	adds	r3, #44	; 0x2c
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001ad2:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3330      	adds	r3, #48	; 0x30
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8001ae6:	492f      	ldr	r1, [pc, #188]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001ae8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3335      	adds	r3, #53	; 0x35
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 8001afa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001b06:	441a      	add	r2, r3
 8001b08:	4927      	ldr	r1, [pc, #156]	; (8001ba8 <DFSDM_FilterMspInit+0x3c0>)
 8001b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0c:	2054      	movs	r0, #84	; 0x54
 8001b0e:	fb00 f303 	mul.w	r3, r0, r3
 8001b12:	440b      	add	r3, r1
 8001b14:	3328      	adds	r3, #40	; 0x28
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b1a:	2254      	movs	r2, #84	; 0x54
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <DFSDM_FilterMspInit+0x3c0>)
 8001b22:	1899      	adds	r1, r3, r2
 8001b24:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001b26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b28:	4613      	mov	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4403      	add	r3, r0
 8001b32:	3338      	adds	r3, #56	; 0x38
 8001b34:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 8001b36:	491b      	ldr	r1, [pc, #108]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	3335      	adds	r3, #53	; 0x35
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 8001b4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <DFSDM_FilterMspInit+0x3bc>)
 8001b56:	4413      	add	r3, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fc09 	bl	8002370 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 8001b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b66:	4413      	add	r3, r2
 8001b68:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	210f      	movs	r1, #15
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 f988 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 8001b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b7e:	4413      	add	r3, r2
 8001b80:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f998 	bl	8001eba <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8001b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	f67f ae67 	bls.w	8001866 <DFSDM_FilterMspInit+0x7e>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3784      	adds	r7, #132	; 0x84
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	24000bec 	.word	0x24000bec
 8001ba4:	2400066c 	.word	0x2400066c
 8001ba8:	24000a78 	.word	0x24000a78

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f000 f95c 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb8:	f003 ff08 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_Init+0x68>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	4913      	ldr	r1, [pc, #76]	; (8001c18 <HAL_Init+0x6c>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_Init+0x68>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_Init+0x6c>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_Init+0x70>)
 8001bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_Init+0x74>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f814 	bl	8001c24 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e002      	b.n	8001c0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c06:	f006 feef 	bl	80089e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58024400 	.word	0x58024400
 8001c18:	0800b198 	.word	0x0800b198
 8001c1c:	24000414 	.word	0x24000414
 8001c20:	24000410 	.word	0x24000410

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_InitTick+0x60>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e021      	b.n	8001c7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_InitTick+0x64>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f941 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c6c:	f000 f90b 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x68>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2400040c 	.word	0x2400040c
 8001c88:	24000410 	.word	0x24000410
 8001c8c:	24000408 	.word	0x24000408

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2400040c 	.word	0x2400040c
 8001cb4:	24000c7c 	.word	0x24000c7c

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	24000c7c 	.word	0x24000c7c

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0000 	.word	0x05fa0000

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff40 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff33 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa4 	bl	8001e2c <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0b4      	b.n	800206c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_DFSDM_ChannelInit+0x184>)
 8001f04:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_DFSDM_ChannelInit+0x188>)
 8001f08:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	; (800207c <HAL_DFSDM_ChannelInit+0x18c>)
 8001f0c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f9e0 	bl	80022d8 <DFSDM_GetChannelFromInstance>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0a0      	b.n	800206c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 fd76 	bl	8008a1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d125      	bne.n	8001f8e <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	791b      	ldrb	r3, [r3, #4]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d108      	bne.n	8001f82 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001f9c:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fac:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fb2:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 020f 	bic.w	r2, r2, #15
 8001fca:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ff2:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f002 0207 	and.w	r2, r2, #7
 800201e:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800204a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f93d 	bl	80022d8 <DFSDM_GetChannelFromInstance>
 800205e:	4603      	mov	r3, r0
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000968 	.word	0x24000968
 8002078:	2400096c 	.word	0x2400096c
 800207c:	40017800 	.word	0x40017800

08002080 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0c8      	b.n	8002224 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_DFSDM_FilterInit+0x1ac>)
 8002094:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d109      	bne.n	80020b4 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d003      	beq.n	80020b0 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b7      	b.n	8002224 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8b3 	bl	8002238 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80020e0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7a1b      	ldrb	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e007      	b.n	800210c <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800210a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7a5b      	ldrb	r3, [r3, #9]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_DFSDM_FilterInit+0x1b0>)
 8002142:	400b      	ands	r3, r1
 8002144:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d108      	bne.n	8002160 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7c1b      	ldrb	r3, [r3, #16]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0210 	orr.w	r2, r2, #16
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e007      	b.n	800218a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0210 	bic.w	r2, r2, #16
 8002188:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7c5b      	ldrb	r3, [r3, #17]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0220 	bic.w	r2, r2, #32
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6959      	ldr	r1, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_DFSDM_FilterInit+0x1b4>)
 80021c0:	400b      	ands	r3, r1
 80021c2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6959      	ldr	r1, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021d6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80021de:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7c1a      	ldrb	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40017900 	.word	0x40017900
 8002230:	ffff80f7 	.word	0xffff80f7
 8002234:	1c00ff00 	.word	0x1c00ff00

08002238 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02c      	beq.n	80022c0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d027      	beq.n	80022c0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800227c:	400b      	ands	r3, r1
 800227e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10d      	bne.n	80022a2 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e00a      	b.n	80022b8 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
 80022be:	e001      	b.n	80022c4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	f8fbffff 	.word	0xf8fbffff

080022d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <DFSDM_GetChannelFromInstance+0x7c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e02b      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <DFSDM_GetChannelFromInstance+0x80>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d102      	bne.n	80022fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e024      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <DFSDM_GetChannelFromInstance+0x84>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d102      	bne.n	800230a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002304:	2302      	movs	r3, #2
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e01d      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <DFSDM_GetChannelFromInstance+0x88>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d102      	bne.n	8002318 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002312:	2303      	movs	r3, #3
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e016      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <DFSDM_GetChannelFromInstance+0x8c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d102      	bne.n	8002326 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002320:	2304      	movs	r3, #4
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e00f      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <DFSDM_GetChannelFromInstance+0x90>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d102      	bne.n	8002334 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800232e:	2305      	movs	r3, #5
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e008      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <DFSDM_GetChannelFromInstance+0x94>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d102      	bne.n	8002342 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800233c:	2306      	movs	r3, #6
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e001      	b.n	8002346 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002342:	2307      	movs	r3, #7
 8002344:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40017800 	.word	0x40017800
 8002358:	40017820 	.word	0x40017820
 800235c:	40017840 	.word	0x40017840
 8002360:	40017860 	.word	0x40017860
 8002364:	40017880 	.word	0x40017880
 8002368:	400178a0 	.word	0x400178a0
 800236c:	400178c0 	.word	0x400178c0

08002370 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff fc9e 	bl	8001cb8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e314      	b.n	80029b2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_DMA_Init+0x1b8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04a      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_DMA_Init+0x1bc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d045      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a63      	ldr	r2, [pc, #396]	; (8002530 <HAL_DMA_Init+0x1c0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d040      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a62      	ldr	r2, [pc, #392]	; (8002534 <HAL_DMA_Init+0x1c4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d03b      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a60      	ldr	r2, [pc, #384]	; (8002538 <HAL_DMA_Init+0x1c8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d036      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5f      	ldr	r2, [pc, #380]	; (800253c <HAL_DMA_Init+0x1cc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <HAL_DMA_Init+0x1d0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02c      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_DMA_Init+0x1d4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d027      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a5a      	ldr	r2, [pc, #360]	; (8002548 <HAL_DMA_Init+0x1d8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d022      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a59      	ldr	r2, [pc, #356]	; (800254c <HAL_DMA_Init+0x1dc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d01d      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_DMA_Init+0x1e0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_DMA_Init+0x1e4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_DMA_Init+0x1e8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a53      	ldr	r2, [pc, #332]	; (800255c <HAL_DMA_Init+0x1ec>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_DMA_Init+0x1f0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_DMA_Init+0xb8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a50      	ldr	r2, [pc, #320]	; (8002564 <HAL_DMA_Init+0x1f4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_DMA_Init+0xbc>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_DMA_Init+0xbe>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 813c 	beq.w	80026ac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a37      	ldr	r2, [pc, #220]	; (8002528 <HAL_DMA_Init+0x1b8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d04a      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a36      	ldr	r2, [pc, #216]	; (800252c <HAL_DMA_Init+0x1bc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d045      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a34      	ldr	r2, [pc, #208]	; (8002530 <HAL_DMA_Init+0x1c0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d040      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a33      	ldr	r2, [pc, #204]	; (8002534 <HAL_DMA_Init+0x1c4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d03b      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <HAL_DMA_Init+0x1c8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d036      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a30      	ldr	r2, [pc, #192]	; (800253c <HAL_DMA_Init+0x1cc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d031      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <HAL_DMA_Init+0x1d0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02c      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <HAL_DMA_Init+0x1d4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d027      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2b      	ldr	r2, [pc, #172]	; (8002548 <HAL_DMA_Init+0x1d8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d022      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2a      	ldr	r2, [pc, #168]	; (800254c <HAL_DMA_Init+0x1dc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d01d      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <HAL_DMA_Init+0x1e0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d018      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_DMA_Init+0x1e4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a25      	ldr	r2, [pc, #148]	; (8002558 <HAL_DMA_Init+0x1e8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a24      	ldr	r2, [pc, #144]	; (800255c <HAL_DMA_Init+0x1ec>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_DMA_Init+0x1f0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_Init+0x174>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_DMA_Init+0x1f4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d108      	bne.n	80024f6 <HAL_DMA_Init+0x186>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e007      	b.n	8002506 <HAL_DMA_Init+0x196>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002506:	e02f      	b.n	8002568 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002508:	f7ff fbd6 	bl	8001cb8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b05      	cmp	r3, #5
 8002514:	d928      	bls.n	8002568 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2203      	movs	r2, #3
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e244      	b.n	80029b2 <HAL_DMA_Init+0x642>
 8002528:	40020010 	.word	0x40020010
 800252c:	40020028 	.word	0x40020028
 8002530:	40020040 	.word	0x40020040
 8002534:	40020058 	.word	0x40020058
 8002538:	40020070 	.word	0x40020070
 800253c:	40020088 	.word	0x40020088
 8002540:	400200a0 	.word	0x400200a0
 8002544:	400200b8 	.word	0x400200b8
 8002548:	40020410 	.word	0x40020410
 800254c:	40020428 	.word	0x40020428
 8002550:	40020440 	.word	0x40020440
 8002554:	40020458 	.word	0x40020458
 8002558:	40020470 	.word	0x40020470
 800255c:	40020488 	.word	0x40020488
 8002560:	400204a0 	.word	0x400204a0
 8002564:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1c8      	bne.n	8002508 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <HAL_DMA_Init+0x424>)
 8002582:	4013      	ands	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800258e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d107      	bne.n	80025cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4313      	orrs	r3, r2
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b28      	cmp	r3, #40	; 0x28
 80025d2:	d903      	bls.n	80025dc <HAL_DMA_Init+0x26c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b2e      	cmp	r3, #46	; 0x2e
 80025da:	d91f      	bls.n	800261c <HAL_DMA_Init+0x2ac>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b3e      	cmp	r3, #62	; 0x3e
 80025e2:	d903      	bls.n	80025ec <HAL_DMA_Init+0x27c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b42      	cmp	r3, #66	; 0x42
 80025ea:	d917      	bls.n	800261c <HAL_DMA_Init+0x2ac>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b46      	cmp	r3, #70	; 0x46
 80025f2:	d903      	bls.n	80025fc <HAL_DMA_Init+0x28c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b48      	cmp	r3, #72	; 0x48
 80025fa:	d90f      	bls.n	800261c <HAL_DMA_Init+0x2ac>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b4e      	cmp	r3, #78	; 0x4e
 8002602:	d903      	bls.n	800260c <HAL_DMA_Init+0x29c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b52      	cmp	r3, #82	; 0x52
 800260a:	d907      	bls.n	800261c <HAL_DMA_Init+0x2ac>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b73      	cmp	r3, #115	; 0x73
 8002612:	d905      	bls.n	8002620 <HAL_DMA_Init+0x2b0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b77      	cmp	r3, #119	; 0x77
 800261a:	d801      	bhi.n	8002620 <HAL_DMA_Init+0x2b0>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_DMA_Init+0x2b2>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f023 0307 	bic.w	r3, r3, #7
 8002644:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2b04      	cmp	r3, #4
 8002656:	d117      	bne.n	8002688 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f001 ff8e 	bl	800458c <DMA_CheckFifoParam>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2240      	movs	r2, #64	; 0x40
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e194      	b.n	80029b2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f001 fec9 	bl	8004428 <DMA_CalcBaseAndBitshift>
 8002696:	4603      	mov	r3, r0
 8002698:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	223f      	movs	r2, #63	; 0x3f
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e0ca      	b.n	8002842 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a39      	ldr	r2, [pc, #228]	; (8002798 <HAL_DMA_Init+0x428>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d022      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a38      	ldr	r2, [pc, #224]	; (800279c <HAL_DMA_Init+0x42c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d01d      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <HAL_DMA_Init+0x430>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d018      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <HAL_DMA_Init+0x434>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <HAL_DMA_Init+0x438>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_DMA_Init+0x43c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a30      	ldr	r2, [pc, #192]	; (80027b0 <HAL_DMA_Init+0x440>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Init+0x38c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_DMA_Init+0x444>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_DMA_Init+0x390>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_DMA_Init+0x392>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8094 	beq.w	8002830 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_DMA_Init+0x428>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d021      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_DMA_Init+0x42c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01c      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_DMA_Init+0x430>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d017      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_DMA_Init+0x434>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d012      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_DMA_Init+0x438>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_DMA_Init+0x43c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d008      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_DMA_Init+0x440>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <HAL_DMA_Init+0x3e6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_DMA_Init+0x444>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_DMA_Init+0x448>)
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d01d      	beq.n	80027bc <HAL_DMA_Init+0x44c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d102      	bne.n	800278e <HAL_DMA_Init+0x41e>
 8002788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800278c:	e017      	b.n	80027be <HAL_DMA_Init+0x44e>
 800278e:	2300      	movs	r3, #0
 8002790:	e015      	b.n	80027be <HAL_DMA_Init+0x44e>
 8002792:	bf00      	nop
 8002794:	fe10803f 	.word	0xfe10803f
 8002798:	58025408 	.word	0x58025408
 800279c:	5802541c 	.word	0x5802541c
 80027a0:	58025430 	.word	0x58025430
 80027a4:	58025444 	.word	0x58025444
 80027a8:	58025458 	.word	0x58025458
 80027ac:	5802546c 	.word	0x5802546c
 80027b0:	58025480 	.word	0x58025480
 80027b4:	58025494 	.word	0x58025494
 80027b8:	fffe000f 	.word	0xfffe000f
 80027bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_DMA_Init+0x64c>)
 8002804:	4413      	add	r3, r2
 8002806:	4a6e      	ldr	r2, [pc, #440]	; (80029c0 <HAL_DMA_Init+0x650>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f001 fe07 	bl	8004428 <DMA_CalcBaseAndBitshift>
 800281a:	4603      	mov	r3, r0
 800281c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2201      	movs	r2, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	e008      	b.n	8002842 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2203      	movs	r2, #3
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0b7      	b.n	80029b2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5f      	ldr	r2, [pc, #380]	; (80029c4 <HAL_DMA_Init+0x654>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d072      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5d      	ldr	r2, [pc, #372]	; (80029c8 <HAL_DMA_Init+0x658>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d06d      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5c      	ldr	r2, [pc, #368]	; (80029cc <HAL_DMA_Init+0x65c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d068      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_DMA_Init+0x660>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d063      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a59      	ldr	r2, [pc, #356]	; (80029d4 <HAL_DMA_Init+0x664>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d05e      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_DMA_Init+0x668>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d059      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_DMA_Init+0x66c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d054      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <HAL_DMA_Init+0x670>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04f      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a53      	ldr	r2, [pc, #332]	; (80029e4 <HAL_DMA_Init+0x674>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d04a      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a51      	ldr	r2, [pc, #324]	; (80029e8 <HAL_DMA_Init+0x678>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d045      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a50      	ldr	r2, [pc, #320]	; (80029ec <HAL_DMA_Init+0x67c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d040      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4e      	ldr	r2, [pc, #312]	; (80029f0 <HAL_DMA_Init+0x680>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d03b      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4d      	ldr	r2, [pc, #308]	; (80029f4 <HAL_DMA_Init+0x684>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d036      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4b      	ldr	r2, [pc, #300]	; (80029f8 <HAL_DMA_Init+0x688>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d031      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <HAL_DMA_Init+0x68c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d02c      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a48      	ldr	r2, [pc, #288]	; (8002a00 <HAL_DMA_Init+0x690>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d027      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a47      	ldr	r2, [pc, #284]	; (8002a04 <HAL_DMA_Init+0x694>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <HAL_DMA_Init+0x698>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01d      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a44      	ldr	r2, [pc, #272]	; (8002a0c <HAL_DMA_Init+0x69c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d018      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_DMA_Init+0x6a0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a41      	ldr	r2, [pc, #260]	; (8002a14 <HAL_DMA_Init+0x6a4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3f      	ldr	r2, [pc, #252]	; (8002a18 <HAL_DMA_Init+0x6a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3e      	ldr	r2, [pc, #248]	; (8002a1c <HAL_DMA_Init+0x6ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_DMA_Init+0x5c2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <HAL_DMA_Init+0x6b0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_DMA_Init+0x5c6>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_DMA_Init+0x5c8>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d032      	beq.n	80029a2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f001 fea1 	bl	8004684 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d102      	bne.n	8002950 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_DMA_Init+0x620>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d80c      	bhi.n	8002990 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f001 ff1e 	bl	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	e008      	b.n	80029a2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	a7fdabf8 	.word	0xa7fdabf8
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	40020010 	.word	0x40020010
 80029c8:	40020028 	.word	0x40020028
 80029cc:	40020040 	.word	0x40020040
 80029d0:	40020058 	.word	0x40020058
 80029d4:	40020070 	.word	0x40020070
 80029d8:	40020088 	.word	0x40020088
 80029dc:	400200a0 	.word	0x400200a0
 80029e0:	400200b8 	.word	0x400200b8
 80029e4:	40020410 	.word	0x40020410
 80029e8:	40020428 	.word	0x40020428
 80029ec:	40020440 	.word	0x40020440
 80029f0:	40020458 	.word	0x40020458
 80029f4:	40020470 	.word	0x40020470
 80029f8:	40020488 	.word	0x40020488
 80029fc:	400204a0 	.word	0x400204a0
 8002a00:	400204b8 	.word	0x400204b8
 8002a04:	58025408 	.word	0x58025408
 8002a08:	5802541c 	.word	0x5802541c
 8002a0c:	58025430 	.word	0x58025430
 8002a10:	58025444 	.word	0x58025444
 8002a14:	58025458 	.word	0x58025458
 8002a18:	5802546c 	.word	0x5802546c
 8002a1c:	58025480 	.word	0x58025480
 8002a20:	58025494 	.word	0x58025494

08002a24 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e1a8      	b.n	8002d88 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <HAL_DMA_DeInit+0x220>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d04a      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a80      	ldr	r2, [pc, #512]	; (8002c48 <HAL_DMA_DeInit+0x224>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d045      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7f      	ldr	r2, [pc, #508]	; (8002c4c <HAL_DMA_DeInit+0x228>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d040      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7d      	ldr	r2, [pc, #500]	; (8002c50 <HAL_DMA_DeInit+0x22c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d03b      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_DMA_DeInit+0x230>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d036      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	; (8002c58 <HAL_DMA_DeInit+0x234>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d031      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a79      	ldr	r2, [pc, #484]	; (8002c5c <HAL_DMA_DeInit+0x238>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d02c      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a77      	ldr	r2, [pc, #476]	; (8002c60 <HAL_DMA_DeInit+0x23c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d027      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a76      	ldr	r2, [pc, #472]	; (8002c64 <HAL_DMA_DeInit+0x240>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a74      	ldr	r2, [pc, #464]	; (8002c68 <HAL_DMA_DeInit+0x244>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01d      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_DMA_DeInit+0x248>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a71      	ldr	r2, [pc, #452]	; (8002c70 <HAL_DMA_DeInit+0x24c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a70      	ldr	r2, [pc, #448]	; (8002c74 <HAL_DMA_DeInit+0x250>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_DMA_DeInit+0x254>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6d      	ldr	r2, [pc, #436]	; (8002c7c <HAL_DMA_DeInit+0x258>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_DeInit+0xb2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <HAL_DMA_DeInit+0x25c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d108      	bne.n	8002ae8 <HAL_DMA_DeInit+0xc4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e007      	b.n	8002af8 <HAL_DMA_DeInit+0xd4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a51      	ldr	r2, [pc, #324]	; (8002c44 <HAL_DMA_DeInit+0x220>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04a      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_DMA_DeInit+0x224>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d045      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_DMA_DeInit+0x228>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d040      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_DMA_DeInit+0x22c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d03b      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <HAL_DMA_DeInit+0x230>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d036      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4a      	ldr	r2, [pc, #296]	; (8002c58 <HAL_DMA_DeInit+0x234>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d031      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a48      	ldr	r2, [pc, #288]	; (8002c5c <HAL_DMA_DeInit+0x238>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02c      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a47      	ldr	r2, [pc, #284]	; (8002c60 <HAL_DMA_DeInit+0x23c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d027      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a45      	ldr	r2, [pc, #276]	; (8002c64 <HAL_DMA_DeInit+0x240>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a44      	ldr	r2, [pc, #272]	; (8002c68 <HAL_DMA_DeInit+0x244>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01d      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <HAL_DMA_DeInit+0x248>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <HAL_DMA_DeInit+0x24c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3f      	ldr	r2, [pc, #252]	; (8002c74 <HAL_DMA_DeInit+0x250>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3e      	ldr	r2, [pc, #248]	; (8002c78 <HAL_DMA_DeInit+0x254>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3c      	ldr	r2, [pc, #240]	; (8002c7c <HAL_DMA_DeInit+0x258>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_DeInit+0x174>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <HAL_DMA_DeInit+0x25c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_DeInit+0x178>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_DeInit+0x17a>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d025      	beq.n	8002bee <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f001 fc28 	bl	8004428 <DMA_CalcBaseAndBitshift>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	223f      	movs	r2, #63	; 0x3f
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e081      	b.n	8002cf2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_DMA_DeInit+0x260>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_DMA_DeInit+0x264>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01d      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_DMA_DeInit+0x268>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_DMA_DeInit+0x26c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_DMA_DeInit+0x270>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_DMA_DeInit+0x274>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_DMA_DeInit+0x278>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_DMA_DeInit+0x21a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_DMA_DeInit+0x27c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d132      	bne.n	8002ca4 <HAL_DMA_DeInit+0x280>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e031      	b.n	8002ca6 <HAL_DMA_DeInit+0x282>
 8002c42:	bf00      	nop
 8002c44:	40020010 	.word	0x40020010
 8002c48:	40020028 	.word	0x40020028
 8002c4c:	40020040 	.word	0x40020040
 8002c50:	40020058 	.word	0x40020058
 8002c54:	40020070 	.word	0x40020070
 8002c58:	40020088 	.word	0x40020088
 8002c5c:	400200a0 	.word	0x400200a0
 8002c60:	400200b8 	.word	0x400200b8
 8002c64:	40020410 	.word	0x40020410
 8002c68:	40020428 	.word	0x40020428
 8002c6c:	40020440 	.word	0x40020440
 8002c70:	40020458 	.word	0x40020458
 8002c74:	40020470 	.word	0x40020470
 8002c78:	40020488 	.word	0x40020488
 8002c7c:	400204a0 	.word	0x400204a0
 8002c80:	400204b8 	.word	0x400204b8
 8002c84:	58025408 	.word	0x58025408
 8002c88:	5802541c 	.word	0x5802541c
 8002c8c:	58025430 	.word	0x58025430
 8002c90:	58025444 	.word	0x58025444
 8002c94:	58025458 	.word	0x58025458
 8002c98:	5802546c 	.word	0x5802546c
 8002c9c:	58025480 	.word	0x58025480
 8002ca0:	58025494 	.word	0x58025494
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d021      	beq.n	8002cee <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f001 fba8 	bl	8004428 <DMA_CalcBaseAndBitshift>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	e001      	b.n	8002cf2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e04a      	b.n	8002d88 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f001 fcc6 	bl	8004684 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d10:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00f      	beq.n	8002d3a <HAL_DMA_DeInit+0x316>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d80b      	bhi.n	8002d3a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f001 fd48 	bl	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d38:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e226      	b.n	80031fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_Start_IT+0x2a>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e21f      	b.n	80031fa <HAL_DMA_Start_IT+0x46a>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f040 820a 	bne.w	80031e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a68      	ldr	r2, [pc, #416]	; (8002f84 <HAL_DMA_Start_IT+0x1f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04a      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a66      	ldr	r2, [pc, #408]	; (8002f88 <HAL_DMA_Start_IT+0x1f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d045      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a65      	ldr	r2, [pc, #404]	; (8002f8c <HAL_DMA_Start_IT+0x1fc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d040      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a63      	ldr	r2, [pc, #396]	; (8002f90 <HAL_DMA_Start_IT+0x200>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d03b      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a62      	ldr	r2, [pc, #392]	; (8002f94 <HAL_DMA_Start_IT+0x204>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d036      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a60      	ldr	r2, [pc, #384]	; (8002f98 <HAL_DMA_Start_IT+0x208>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a5f      	ldr	r2, [pc, #380]	; (8002f9c <HAL_DMA_Start_IT+0x20c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d02c      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_DMA_Start_IT+0x210>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d027      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <HAL_DMA_Start_IT+0x214>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5a      	ldr	r2, [pc, #360]	; (8002fa8 <HAL_DMA_Start_IT+0x218>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01d      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a59      	ldr	r2, [pc, #356]	; (8002fac <HAL_DMA_Start_IT+0x21c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d018      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <HAL_DMA_Start_IT+0x220>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a56      	ldr	r2, [pc, #344]	; (8002fb4 <HAL_DMA_Start_IT+0x224>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <HAL_DMA_Start_IT+0x228>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <HAL_DMA_Start_IT+0x22c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_Start_IT+0xee>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_DMA_Start_IT+0x230>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <HAL_DMA_Start_IT+0x100>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_DMA_Start_IT+0x110>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f001 f912 	bl	80040d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <HAL_DMA_Start_IT+0x1f4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d04a      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	; (8002f88 <HAL_DMA_Start_IT+0x1f8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d045      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a31      	ldr	r2, [pc, #196]	; (8002f8c <HAL_DMA_Start_IT+0x1fc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d040      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_DMA_Start_IT+0x200>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d03b      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <HAL_DMA_Start_IT+0x204>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d036      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	; (8002f98 <HAL_DMA_Start_IT+0x208>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d031      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <HAL_DMA_Start_IT+0x20c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02c      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <HAL_DMA_Start_IT+0x210>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d027      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_DMA_Start_IT+0x214>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d022      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_DMA_Start_IT+0x218>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d01d      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a25      	ldr	r2, [pc, #148]	; (8002fac <HAL_DMA_Start_IT+0x21c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <HAL_DMA_Start_IT+0x220>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_DMA_Start_IT+0x224>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <HAL_DMA_Start_IT+0x228>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <HAL_DMA_Start_IT+0x22c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_DMA_Start_IT+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_DMA_Start_IT+0x230>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_DMA_Start_IT+0x1c0>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_DMA_Start_IT+0x1c2>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 021e 	bic.w	r2, r3, #30
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0216 	orr.w	r2, r2, #22
 8002f68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03e      	beq.n	8002ff0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0208 	orr.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e035      	b.n	8002ff0 <HAL_DMA_Start_IT+0x260>
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 020e 	bic.w	r2, r3, #14
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 020a 	orr.w	r2, r2, #10
 8002fd6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0204 	orr.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a83      	ldr	r2, [pc, #524]	; (8003204 <HAL_DMA_Start_IT+0x474>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d072      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a82      	ldr	r2, [pc, #520]	; (8003208 <HAL_DMA_Start_IT+0x478>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d06d      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a80      	ldr	r2, [pc, #512]	; (800320c <HAL_DMA_Start_IT+0x47c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d068      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7f      	ldr	r2, [pc, #508]	; (8003210 <HAL_DMA_Start_IT+0x480>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d063      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7d      	ldr	r2, [pc, #500]	; (8003214 <HAL_DMA_Start_IT+0x484>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d05e      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7c      	ldr	r2, [pc, #496]	; (8003218 <HAL_DMA_Start_IT+0x488>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d059      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7a      	ldr	r2, [pc, #488]	; (800321c <HAL_DMA_Start_IT+0x48c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d054      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a79      	ldr	r2, [pc, #484]	; (8003220 <HAL_DMA_Start_IT+0x490>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04f      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_DMA_Start_IT+0x494>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d04a      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a76      	ldr	r2, [pc, #472]	; (8003228 <HAL_DMA_Start_IT+0x498>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d045      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a74      	ldr	r2, [pc, #464]	; (800322c <HAL_DMA_Start_IT+0x49c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d040      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a73      	ldr	r2, [pc, #460]	; (8003230 <HAL_DMA_Start_IT+0x4a0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d03b      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a71      	ldr	r2, [pc, #452]	; (8003234 <HAL_DMA_Start_IT+0x4a4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d036      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a70      	ldr	r2, [pc, #448]	; (8003238 <HAL_DMA_Start_IT+0x4a8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d031      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6e      	ldr	r2, [pc, #440]	; (800323c <HAL_DMA_Start_IT+0x4ac>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02c      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6d      	ldr	r2, [pc, #436]	; (8003240 <HAL_DMA_Start_IT+0x4b0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d027      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6b      	ldr	r2, [pc, #428]	; (8003244 <HAL_DMA_Start_IT+0x4b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d022      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_DMA_Start_IT+0x4b8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d01d      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <HAL_DMA_Start_IT+0x4bc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d018      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a67      	ldr	r2, [pc, #412]	; (8003250 <HAL_DMA_Start_IT+0x4c0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a65      	ldr	r2, [pc, #404]	; (8003254 <HAL_DMA_Start_IT+0x4c4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00e      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a64      	ldr	r2, [pc, #400]	; (8003258 <HAL_DMA_Start_IT+0x4c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a62      	ldr	r2, [pc, #392]	; (800325c <HAL_DMA_Start_IT+0x4cc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_DMA_Start_IT+0x350>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a61      	ldr	r2, [pc, #388]	; (8003260 <HAL_DMA_Start_IT+0x4d0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_DMA_Start_IT+0x354>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_DMA_Start_IT+0x356>
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01a      	beq.n	8003120 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003106:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a37      	ldr	r2, [pc, #220]	; (8003204 <HAL_DMA_Start_IT+0x474>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d04a      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a36      	ldr	r2, [pc, #216]	; (8003208 <HAL_DMA_Start_IT+0x478>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d045      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a34      	ldr	r2, [pc, #208]	; (800320c <HAL_DMA_Start_IT+0x47c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d040      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <HAL_DMA_Start_IT+0x480>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d03b      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_DMA_Start_IT+0x484>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d036      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a30      	ldr	r2, [pc, #192]	; (8003218 <HAL_DMA_Start_IT+0x488>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d031      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2e      	ldr	r2, [pc, #184]	; (800321c <HAL_DMA_Start_IT+0x48c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02c      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2d      	ldr	r2, [pc, #180]	; (8003220 <HAL_DMA_Start_IT+0x490>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d027      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2b      	ldr	r2, [pc, #172]	; (8003224 <HAL_DMA_Start_IT+0x494>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <HAL_DMA_Start_IT+0x498>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01d      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a28      	ldr	r2, [pc, #160]	; (800322c <HAL_DMA_Start_IT+0x49c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_DMA_Start_IT+0x4a0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <HAL_DMA_Start_IT+0x4a4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a24      	ldr	r2, [pc, #144]	; (8003238 <HAL_DMA_Start_IT+0x4a8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a22      	ldr	r2, [pc, #136]	; (800323c <HAL_DMA_Start_IT+0x4ac>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_DMA_Start_IT+0x430>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <HAL_DMA_Start_IT+0x4b0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <HAL_DMA_Start_IT+0x442>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e012      	b.n	80031f8 <HAL_DMA_Start_IT+0x468>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e009      	b.n	80031f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8
 8003244:	58025408 	.word	0x58025408
 8003248:	5802541c 	.word	0x5802541c
 800324c:	58025430 	.word	0x58025430
 8003250:	58025444 	.word	0x58025444
 8003254:	58025458 	.word	0x58025458
 8003258:	5802546c 	.word	0x5802546c
 800325c:	58025480 	.word	0x58025480
 8003260:	58025494 	.word	0x58025494

08003264 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003270:	4b67      	ldr	r3, [pc, #412]	; (8003410 <HAL_DMA_IRQHandler+0x1ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a67      	ldr	r2, [pc, #412]	; (8003414 <HAL_DMA_IRQHandler+0x1b0>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a9b      	lsrs	r3, r3, #10
 800327c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5f      	ldr	r2, [pc, #380]	; (8003418 <HAL_DMA_IRQHandler+0x1b4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_DMA_IRQHandler+0x1b8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5c      	ldr	r2, [pc, #368]	; (8003420 <HAL_DMA_IRQHandler+0x1bc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_DMA_IRQHandler+0x1c0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a59      	ldr	r2, [pc, #356]	; (8003428 <HAL_DMA_IRQHandler+0x1c4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_DMA_IRQHandler+0x1c8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a56      	ldr	r2, [pc, #344]	; (8003430 <HAL_DMA_IRQHandler+0x1cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a54      	ldr	r2, [pc, #336]	; (8003434 <HAL_DMA_IRQHandler+0x1d0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a53      	ldr	r2, [pc, #332]	; (8003438 <HAL_DMA_IRQHandler+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_DMA_IRQHandler+0x1d8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a50      	ldr	r2, [pc, #320]	; (8003440 <HAL_DMA_IRQHandler+0x1dc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_DMA_IRQHandler+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4d      	ldr	r2, [pc, #308]	; (8003448 <HAL_DMA_IRQHandler+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_DMA_IRQHandler+0x1e8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_DMA_IRQHandler+0x1ec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_IRQHandler+0xd2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_DMA_IRQHandler+0x1f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_DMA_IRQHandler+0xd6>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_DMA_IRQHandler+0xd8>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 842b 	beq.w	8003b98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2208      	movs	r2, #8
 800334c:	409a      	lsls	r2, r3
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80a2 	beq.w	800349c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <HAL_DMA_IRQHandler+0x1b4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d04a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_DMA_IRQHandler+0x1b8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d045      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_DMA_IRQHandler+0x1bc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d040      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <HAL_DMA_IRQHandler+0x1c0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d03b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_DMA_IRQHandler+0x1c4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d036      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_DMA_IRQHandler+0x1c8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d031      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_DMA_IRQHandler+0x1cc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d02c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a24      	ldr	r2, [pc, #144]	; (8003434 <HAL_DMA_IRQHandler+0x1d0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d027      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_DMA_IRQHandler+0x1d4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <HAL_DMA_IRQHandler+0x1d8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_DMA_IRQHandler+0x1dc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_DMA_IRQHandler+0x1e0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_DMA_IRQHandler+0x1e4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_DMA_IRQHandler+0x1e8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_DMA_IRQHandler+0x1ec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x194>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <HAL_DMA_IRQHandler+0x1f0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d12f      	bne.n	8003458 <HAL_DMA_IRQHandler+0x1f4>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	e02e      	b.n	800346c <HAL_DMA_IRQHandler+0x208>
 800340e:	bf00      	nop
 8003410:	24000410 	.word	0x24000410
 8003414:	1b4e81b5 	.word	0x1b4e81b5
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2208      	movs	r2, #8
 800348a:	409a      	lsls	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d06e      	beq.n	8003590 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_DMA_IRQHandler+0x3f8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a67      	ldr	r2, [pc, #412]	; (8003660 <HAL_DMA_IRQHandler+0x3fc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a66      	ldr	r2, [pc, #408]	; (8003664 <HAL_DMA_IRQHandler+0x400>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a64      	ldr	r2, [pc, #400]	; (8003668 <HAL_DMA_IRQHandler+0x404>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_DMA_IRQHandler+0x408>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a61      	ldr	r2, [pc, #388]	; (8003670 <HAL_DMA_IRQHandler+0x40c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_DMA_IRQHandler+0x410>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <HAL_DMA_IRQHandler+0x414>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_DMA_IRQHandler+0x418>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_DMA_IRQHandler+0x41c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_DMA_IRQHandler+0x420>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_DMA_IRQHandler+0x424>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a57      	ldr	r2, [pc, #348]	; (800368c <HAL_DMA_IRQHandler+0x428>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_DMA_IRQHandler+0x42c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a54      	ldr	r2, [pc, #336]	; (8003694 <HAL_DMA_IRQHandler+0x430>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ee>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_DMA_IRQHandler+0x434>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10a      	bne.n	8003568 <HAL_DMA_IRQHandler+0x304>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e003      	b.n	8003570 <HAL_DMA_IRQHandler+0x30c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0202 	orr.w	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2204      	movs	r2, #4
 800359a:	409a      	lsls	r2, r3
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 808f 	beq.w	80036c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2c      	ldr	r2, [pc, #176]	; (800365c <HAL_DMA_IRQHandler+0x3f8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04a      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <HAL_DMA_IRQHandler+0x3fc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d045      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_DMA_IRQHandler+0x400>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d040      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <HAL_DMA_IRQHandler+0x404>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d03b      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a26      	ldr	r2, [pc, #152]	; (800366c <HAL_DMA_IRQHandler+0x408>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d036      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a24      	ldr	r2, [pc, #144]	; (8003670 <HAL_DMA_IRQHandler+0x40c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_DMA_IRQHandler+0x410>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d02c      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a21      	ldr	r2, [pc, #132]	; (8003678 <HAL_DMA_IRQHandler+0x414>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d027      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a20      	ldr	r2, [pc, #128]	; (800367c <HAL_DMA_IRQHandler+0x418>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_DMA_IRQHandler+0x41c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_DMA_IRQHandler+0x420>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_DMA_IRQHandler+0x424>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_DMA_IRQHandler+0x428>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_DMA_IRQHandler+0x42c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <HAL_DMA_IRQHandler+0x430>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_DMA_IRQHandler+0x3e2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <HAL_DMA_IRQHandler+0x434>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12a      	bne.n	800369c <HAL_DMA_IRQHandler+0x438>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e023      	b.n	80036a4 <HAL_DMA_IRQHandler+0x440>
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2204      	movs	r2, #4
 80036b2:	409a      	lsls	r2, r3
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2210      	movs	r2, #16
 80036ce:	409a      	lsls	r2, r3
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a6 	beq.w	8003826 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a85      	ldr	r2, [pc, #532]	; (80038f4 <HAL_DMA_IRQHandler+0x690>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d04a      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a83      	ldr	r2, [pc, #524]	; (80038f8 <HAL_DMA_IRQHandler+0x694>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d045      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a82      	ldr	r2, [pc, #520]	; (80038fc <HAL_DMA_IRQHandler+0x698>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d040      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a80      	ldr	r2, [pc, #512]	; (8003900 <HAL_DMA_IRQHandler+0x69c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d03b      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7f      	ldr	r2, [pc, #508]	; (8003904 <HAL_DMA_IRQHandler+0x6a0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d036      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a7d      	ldr	r2, [pc, #500]	; (8003908 <HAL_DMA_IRQHandler+0x6a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d031      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7c      	ldr	r2, [pc, #496]	; (800390c <HAL_DMA_IRQHandler+0x6a8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d02c      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7a      	ldr	r2, [pc, #488]	; (8003910 <HAL_DMA_IRQHandler+0x6ac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d027      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a79      	ldr	r2, [pc, #484]	; (8003914 <HAL_DMA_IRQHandler+0x6b0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d022      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a77      	ldr	r2, [pc, #476]	; (8003918 <HAL_DMA_IRQHandler+0x6b4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01d      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a76      	ldr	r2, [pc, #472]	; (800391c <HAL_DMA_IRQHandler+0x6b8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d018      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a74      	ldr	r2, [pc, #464]	; (8003920 <HAL_DMA_IRQHandler+0x6bc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a73      	ldr	r2, [pc, #460]	; (8003924 <HAL_DMA_IRQHandler+0x6c0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00e      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a71      	ldr	r2, [pc, #452]	; (8003928 <HAL_DMA_IRQHandler+0x6c4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a70      	ldr	r2, [pc, #448]	; (800392c <HAL_DMA_IRQHandler+0x6c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_DMA_IRQHandler+0x516>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_DMA_IRQHandler+0x6cc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10a      	bne.n	8003790 <HAL_DMA_IRQHandler+0x52c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e009      	b.n	80037a4 <HAL_DMA_IRQHandler+0x540>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d03e      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2210      	movs	r2, #16
 80037b2:	409a      	lsls	r2, r3
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d018      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d024      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e01f      	b.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01b      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
 80037f6:	e016      	b.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2220      	movs	r2, #32
 8003830:	409a      	lsls	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8110 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <HAL_DMA_IRQHandler+0x690>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d04a      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_DMA_IRQHandler+0x694>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d045      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <HAL_DMA_IRQHandler+0x698>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d040      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a28      	ldr	r2, [pc, #160]	; (8003900 <HAL_DMA_IRQHandler+0x69c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d03b      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <HAL_DMA_IRQHandler+0x6a0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d036      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_DMA_IRQHandler+0x6a4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d031      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a23      	ldr	r2, [pc, #140]	; (800390c <HAL_DMA_IRQHandler+0x6a8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02c      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_DMA_IRQHandler+0x6ac>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d027      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a20      	ldr	r2, [pc, #128]	; (8003914 <HAL_DMA_IRQHandler+0x6b0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_DMA_IRQHandler+0x6b4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01d      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_DMA_IRQHandler+0x6b8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d018      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_DMA_IRQHandler+0x6bc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_DMA_IRQHandler+0x6c0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_DMA_IRQHandler+0x6c4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_DMA_IRQHandler+0x6c8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_IRQHandler+0x678>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a16      	ldr	r2, [pc, #88]	; (8003930 <HAL_DMA_IRQHandler+0x6cc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d12b      	bne.n	8003934 <HAL_DMA_IRQHandler+0x6d0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf14      	ite	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	2300      	moveq	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e02a      	b.n	8003948 <HAL_DMA_IRQHandler+0x6e4>
 80038f2:	bf00      	nop
 80038f4:	40020010 	.word	0x40020010
 80038f8:	40020028 	.word	0x40020028
 80038fc:	40020040 	.word	0x40020040
 8003900:	40020058 	.word	0x40020058
 8003904:	40020070 	.word	0x40020070
 8003908:	40020088 	.word	0x40020088
 800390c:	400200a0 	.word	0x400200a0
 8003910:	400200b8 	.word	0x400200b8
 8003914:	40020410 	.word	0x40020410
 8003918:	40020428 	.word	0x40020428
 800391c:	40020440 	.word	0x40020440
 8003920:	40020458 	.word	0x40020458
 8003924:	40020470 	.word	0x40020470
 8003928:	40020488 	.word	0x40020488
 800392c:	400204a0 	.word	0x400204a0
 8003930:	400204b8 	.word	0x400204b8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8087 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2220      	movs	r2, #32
 8003958:	409a      	lsls	r2, r3
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b04      	cmp	r3, #4
 8003968:	d139      	bne.n	80039de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0216 	bic.w	r2, r2, #22
 8003978:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <HAL_DMA_IRQHandler+0x736>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	223f      	movs	r2, #63	; 0x3f
 80039b4:	409a      	lsls	r2, r3
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 834a 	beq.w	8004068 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
          }
          return;
 80039dc:	e344      	b.n	8004068 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02c      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e027      	b.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d023      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e01e      	b.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0210 	bic.w	r2, r2, #16
 8003a3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8306 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8088 	beq.w	8003b84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2204      	movs	r2, #4
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7a      	ldr	r2, [pc, #488]	; (8003c6c <HAL_DMA_IRQHandler+0xa08>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d04a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <HAL_DMA_IRQHandler+0xa0c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d045      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_DMA_IRQHandler+0xa10>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d040      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a76      	ldr	r2, [pc, #472]	; (8003c78 <HAL_DMA_IRQHandler+0xa14>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d03b      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a74      	ldr	r2, [pc, #464]	; (8003c7c <HAL_DMA_IRQHandler+0xa18>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d036      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_DMA_IRQHandler+0xa1c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a71      	ldr	r2, [pc, #452]	; (8003c84 <HAL_DMA_IRQHandler+0xa20>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02c      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a70      	ldr	r2, [pc, #448]	; (8003c88 <HAL_DMA_IRQHandler+0xa24>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d027      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6e      	ldr	r2, [pc, #440]	; (8003c8c <HAL_DMA_IRQHandler+0xa28>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_DMA_IRQHandler+0xa2c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <HAL_DMA_IRQHandler+0xa30>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <HAL_DMA_IRQHandler+0xa34>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_DMA_IRQHandler+0xa38>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <HAL_DMA_IRQHandler+0xa3c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_DMA_IRQHandler+0xa40>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x8b8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <HAL_DMA_IRQHandler+0xa44>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x8ca>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <HAL_DMA_IRQHandler+0x8da>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d307      	bcc.n	8003b5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f2      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x8da>
 8003b58:	e000      	b.n	8003b5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b72:	e003      	b.n	8003b7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8272 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
 8003b96:	e26c      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_DMA_IRQHandler+0xa48>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <HAL_DMA_IRQHandler+0xa50>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_DMA_IRQHandler+0xa54>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <HAL_DMA_IRQHandler+0xa58>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <HAL_DMA_IRQHandler+0xa5c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <HAL_DMA_IRQHandler+0xa60>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x984>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <HAL_DMA_IRQHandler+0xa64>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_DMA_IRQHandler+0x988>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_DMA_IRQHandler+0x98a>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 823f 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2204      	movs	r2, #4
 8003c06:	409a      	lsls	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80cd 	beq.w	8003dac <HAL_DMA_IRQHandler+0xb48>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80c7 	beq.w	8003dac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2204      	movs	r2, #4
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d049      	beq.n	8003ccc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8210 	beq.w	800406c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c54:	e20a      	b.n	800406c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8206 	beq.w	800406c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c68:	e200      	b.n	800406c <HAL_DMA_IRQHandler+0xe08>
 8003c6a:	bf00      	nop
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	58025408 	.word	0x58025408
 8003cb0:	5802541c 	.word	0x5802541c
 8003cb4:	58025430 	.word	0x58025430
 8003cb8:	58025444 	.word	0x58025444
 8003cbc:	58025458 	.word	0x58025458
 8003cc0:	5802546c 	.word	0x5802546c
 8003cc4:	58025480 	.word	0x58025480
 8003cc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d160      	bne.n	8003d98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a8c      	ldr	r2, [pc, #560]	; (8003f0c <HAL_DMA_IRQHandler+0xca8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04a      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a8a      	ldr	r2, [pc, #552]	; (8003f10 <HAL_DMA_IRQHandler+0xcac>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d045      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a89      	ldr	r2, [pc, #548]	; (8003f14 <HAL_DMA_IRQHandler+0xcb0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a87      	ldr	r2, [pc, #540]	; (8003f18 <HAL_DMA_IRQHandler+0xcb4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d03b      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a86      	ldr	r2, [pc, #536]	; (8003f1c <HAL_DMA_IRQHandler+0xcb8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d036      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a84      	ldr	r2, [pc, #528]	; (8003f20 <HAL_DMA_IRQHandler+0xcbc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d031      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a83      	ldr	r2, [pc, #524]	; (8003f24 <HAL_DMA_IRQHandler+0xcc0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d02c      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a81      	ldr	r2, [pc, #516]	; (8003f28 <HAL_DMA_IRQHandler+0xcc4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d027      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a80      	ldr	r2, [pc, #512]	; (8003f2c <HAL_DMA_IRQHandler+0xcc8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7e      	ldr	r2, [pc, #504]	; (8003f30 <HAL_DMA_IRQHandler+0xccc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7d      	ldr	r2, [pc, #500]	; (8003f34 <HAL_DMA_IRQHandler+0xcd0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <HAL_DMA_IRQHandler+0xcd4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7a      	ldr	r2, [pc, #488]	; (8003f3c <HAL_DMA_IRQHandler+0xcd8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a78      	ldr	r2, [pc, #480]	; (8003f40 <HAL_DMA_IRQHandler+0xcdc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a77      	ldr	r2, [pc, #476]	; (8003f44 <HAL_DMA_IRQHandler+0xce0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xb12>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a75      	ldr	r2, [pc, #468]	; (8003f48 <HAL_DMA_IRQHandler+0xce4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d108      	bne.n	8003d88 <HAL_DMA_IRQHandler+0xb24>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0208 	bic.w	r2, r2, #8
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e007      	b.n	8003d98 <HAL_DMA_IRQHandler+0xb34>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8165 	beq.w	800406c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003daa:	e15f      	b.n	800406c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2202      	movs	r2, #2
 8003db6:	409a      	lsls	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80c5 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xce8>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80bf 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 813a 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e04:	e134      	b.n	8004070 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8130 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e18:	e12a      	b.n	8004070 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d168      	bne.n	8003ef6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <HAL_DMA_IRQHandler+0xca8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d04a      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <HAL_DMA_IRQHandler+0xcac>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d045      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <HAL_DMA_IRQHandler+0xcb0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d040      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <HAL_DMA_IRQHandler+0xcb4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d03b      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a32      	ldr	r2, [pc, #200]	; (8003f1c <HAL_DMA_IRQHandler+0xcb8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d036      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a31      	ldr	r2, [pc, #196]	; (8003f20 <HAL_DMA_IRQHandler+0xcbc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d031      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <HAL_DMA_IRQHandler+0xcc0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02c      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <HAL_DMA_IRQHandler+0xcc4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d027      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <HAL_DMA_IRQHandler+0xcc8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d022      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_DMA_IRQHandler+0xccc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d01d      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <HAL_DMA_IRQHandler+0xcd0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d018      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <HAL_DMA_IRQHandler+0xcd4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <HAL_DMA_IRQHandler+0xcd8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <HAL_DMA_IRQHandler+0xcdc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <HAL_DMA_IRQHandler+0xce0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xc60>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_DMA_IRQHandler+0xce4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0xc72>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0214 	bic.w	r2, r2, #20
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e007      	b.n	8003ee6 <HAL_DMA_IRQHandler+0xc82>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 020a 	bic.w	r2, r2, #10
 8003ee4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80b8 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f08:	e0b2      	b.n	8004070 <HAL_DMA_IRQHandler+0xe0c>
 8003f0a:	bf00      	nop
 8003f0c:	40020010 	.word	0x40020010
 8003f10:	40020028 	.word	0x40020028
 8003f14:	40020040 	.word	0x40020040
 8003f18:	40020058 	.word	0x40020058
 8003f1c:	40020070 	.word	0x40020070
 8003f20:	40020088 	.word	0x40020088
 8003f24:	400200a0 	.word	0x400200a0
 8003f28:	400200b8 	.word	0x400200b8
 8003f2c:	40020410 	.word	0x40020410
 8003f30:	40020428 	.word	0x40020428
 8003f34:	40020440 	.word	0x40020440
 8003f38:	40020458 	.word	0x40020458
 8003f3c:	40020470 	.word	0x40020470
 8003f40:	40020488 	.word	0x40020488
 8003f44:	400204a0 	.word	0x400204a0
 8003f48:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2208      	movs	r2, #8
 8003f56:	409a      	lsls	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8088 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8082 	beq.w	8004072 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a41      	ldr	r2, [pc, #260]	; (8004078 <HAL_DMA_IRQHandler+0xe14>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_DMA_IRQHandler+0xe18>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a3e      	ldr	r2, [pc, #248]	; (8004080 <HAL_DMA_IRQHandler+0xe1c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <HAL_DMA_IRQHandler+0xe20>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <HAL_DMA_IRQHandler+0xe24>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a39      	ldr	r2, [pc, #228]	; (800408c <HAL_DMA_IRQHandler+0xe28>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HAL_DMA_IRQHandler+0xe2c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <HAL_DMA_IRQHandler+0xe30>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <HAL_DMA_IRQHandler+0xe34>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a33      	ldr	r2, [pc, #204]	; (800409c <HAL_DMA_IRQHandler+0xe38>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <HAL_DMA_IRQHandler+0xe3c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_DMA_IRQHandler+0xe40>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <HAL_DMA_IRQHandler+0xe44>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <HAL_DMA_IRQHandler+0xe48>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_IRQHandler+0xdaa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <HAL_DMA_IRQHandler+0xe50>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <HAL_DMA_IRQHandler+0xdbc>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 021c 	bic.w	r2, r2, #28
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e007      	b.n	8004030 <HAL_DMA_IRQHandler+0xdcc>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 020e 	bic.w	r2, r2, #14
 800402e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e004      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004070:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8

080040b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a84      	ldr	r2, [pc, #528]	; (8004300 <DMA_SetConfig+0x230>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d072      	beq.n	80041da <DMA_SetConfig+0x10a>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a82      	ldr	r2, [pc, #520]	; (8004304 <DMA_SetConfig+0x234>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d06d      	beq.n	80041da <DMA_SetConfig+0x10a>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a81      	ldr	r2, [pc, #516]	; (8004308 <DMA_SetConfig+0x238>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d068      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7f      	ldr	r2, [pc, #508]	; (800430c <DMA_SetConfig+0x23c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d063      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7e      	ldr	r2, [pc, #504]	; (8004310 <DMA_SetConfig+0x240>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d05e      	beq.n	80041da <DMA_SetConfig+0x10a>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7c      	ldr	r2, [pc, #496]	; (8004314 <DMA_SetConfig+0x244>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d059      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7b      	ldr	r2, [pc, #492]	; (8004318 <DMA_SetConfig+0x248>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d054      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a79      	ldr	r2, [pc, #484]	; (800431c <DMA_SetConfig+0x24c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d04f      	beq.n	80041da <DMA_SetConfig+0x10a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a78      	ldr	r2, [pc, #480]	; (8004320 <DMA_SetConfig+0x250>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d04a      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a76      	ldr	r2, [pc, #472]	; (8004324 <DMA_SetConfig+0x254>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d045      	beq.n	80041da <DMA_SetConfig+0x10a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a75      	ldr	r2, [pc, #468]	; (8004328 <DMA_SetConfig+0x258>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d040      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a73      	ldr	r2, [pc, #460]	; (800432c <DMA_SetConfig+0x25c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d03b      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a72      	ldr	r2, [pc, #456]	; (8004330 <DMA_SetConfig+0x260>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d036      	beq.n	80041da <DMA_SetConfig+0x10a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a70      	ldr	r2, [pc, #448]	; (8004334 <DMA_SetConfig+0x264>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d031      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6f      	ldr	r2, [pc, #444]	; (8004338 <DMA_SetConfig+0x268>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d02c      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a6d      	ldr	r2, [pc, #436]	; (800433c <DMA_SetConfig+0x26c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d027      	beq.n	80041da <DMA_SetConfig+0x10a>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6c      	ldr	r2, [pc, #432]	; (8004340 <DMA_SetConfig+0x270>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d022      	beq.n	80041da <DMA_SetConfig+0x10a>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6a      	ldr	r2, [pc, #424]	; (8004344 <DMA_SetConfig+0x274>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01d      	beq.n	80041da <DMA_SetConfig+0x10a>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <DMA_SetConfig+0x278>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a67      	ldr	r2, [pc, #412]	; (800434c <DMA_SetConfig+0x27c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a66      	ldr	r2, [pc, #408]	; (8004350 <DMA_SetConfig+0x280>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a64      	ldr	r2, [pc, #400]	; (8004354 <DMA_SetConfig+0x284>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a63      	ldr	r2, [pc, #396]	; (8004358 <DMA_SetConfig+0x288>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <DMA_SetConfig+0x10a>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a61      	ldr	r2, [pc, #388]	; (800435c <DMA_SetConfig+0x28c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <DMA_SetConfig+0x10e>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <DMA_SetConfig+0x110>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3e      	ldr	r2, [pc, #248]	; (8004300 <DMA_SetConfig+0x230>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <DMA_SetConfig+0x234>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <DMA_SetConfig+0x238>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <DMA_SetConfig+0x23c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a38      	ldr	r2, [pc, #224]	; (8004310 <DMA_SetConfig+0x240>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a37      	ldr	r2, [pc, #220]	; (8004314 <DMA_SetConfig+0x244>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a35      	ldr	r2, [pc, #212]	; (8004318 <DMA_SetConfig+0x248>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a34      	ldr	r2, [pc, #208]	; (800431c <DMA_SetConfig+0x24c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a32      	ldr	r2, [pc, #200]	; (8004320 <DMA_SetConfig+0x250>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a31      	ldr	r2, [pc, #196]	; (8004324 <DMA_SetConfig+0x254>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <DMA_SetConfig+0x258>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2e      	ldr	r2, [pc, #184]	; (800432c <DMA_SetConfig+0x25c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <DMA_SetConfig+0x260>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <DMA_SetConfig+0x264>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a29      	ldr	r2, [pc, #164]	; (8004338 <DMA_SetConfig+0x268>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <DMA_SetConfig+0x1d0>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a28      	ldr	r2, [pc, #160]	; (800433c <DMA_SetConfig+0x26c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <DMA_SetConfig+0x1d4>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <DMA_SetConfig+0x1d6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d05a      	beq.n	8004360 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	223f      	movs	r2, #63	; 0x3f
 80042b4:	409a      	lsls	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d108      	bne.n	80042ec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042ea:	e087      	b.n	80043fc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
}
 80042fc:	e07e      	b.n	80043fc <DMA_SetConfig+0x32c>
 80042fe:	bf00      	nop
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020088 	.word	0x40020088
 8004318:	400200a0 	.word	0x400200a0
 800431c:	400200b8 	.word	0x400200b8
 8004320:	40020410 	.word	0x40020410
 8004324:	40020428 	.word	0x40020428
 8004328:	40020440 	.word	0x40020440
 800432c:	40020458 	.word	0x40020458
 8004330:	40020470 	.word	0x40020470
 8004334:	40020488 	.word	0x40020488
 8004338:	400204a0 	.word	0x400204a0
 800433c:	400204b8 	.word	0x400204b8
 8004340:	58025408 	.word	0x58025408
 8004344:	5802541c 	.word	0x5802541c
 8004348:	58025430 	.word	0x58025430
 800434c:	58025444 	.word	0x58025444
 8004350:	58025458 	.word	0x58025458
 8004354:	5802546c 	.word	0x5802546c
 8004358:	58025480 	.word	0x58025480
 800435c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <DMA_SetConfig+0x338>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a27      	ldr	r2, [pc, #156]	; (800440c <DMA_SetConfig+0x33c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a25      	ldr	r2, [pc, #148]	; (8004410 <DMA_SetConfig+0x340>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <DMA_SetConfig+0x344>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <DMA_SetConfig+0x348>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <DMA_SetConfig+0x34c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <DMA_SetConfig+0x350>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <DMA_SetConfig+0x2e0>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <DMA_SetConfig+0x354>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <DMA_SetConfig+0x2e4>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <DMA_SetConfig+0x2e6>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	2201      	movs	r2, #1
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d108      	bne.n	80043ec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	60da      	str	r2, [r3, #12]
}
 80043ea:	e007      	b.n	80043fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494

08004428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a42      	ldr	r2, [pc, #264]	; (8004540 <DMA_CalcBaseAndBitshift+0x118>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a41      	ldr	r2, [pc, #260]	; (8004544 <DMA_CalcBaseAndBitshift+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <DMA_CalcBaseAndBitshift+0x120>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a3e      	ldr	r2, [pc, #248]	; (800454c <DMA_CalcBaseAndBitshift+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3c      	ldr	r2, [pc, #240]	; (8004550 <DMA_CalcBaseAndBitshift+0x128>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <DMA_CalcBaseAndBitshift+0x12c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a39      	ldr	r2, [pc, #228]	; (8004558 <DMA_CalcBaseAndBitshift+0x130>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a38      	ldr	r2, [pc, #224]	; (800455c <DMA_CalcBaseAndBitshift+0x134>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a36      	ldr	r2, [pc, #216]	; (8004560 <DMA_CalcBaseAndBitshift+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a35      	ldr	r2, [pc, #212]	; (8004564 <DMA_CalcBaseAndBitshift+0x13c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a33      	ldr	r2, [pc, #204]	; (8004568 <DMA_CalcBaseAndBitshift+0x140>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a32      	ldr	r2, [pc, #200]	; (800456c <DMA_CalcBaseAndBitshift+0x144>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a30      	ldr	r2, [pc, #192]	; (8004570 <DMA_CalcBaseAndBitshift+0x148>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <DMA_CalcBaseAndBitshift+0x14c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2d      	ldr	r2, [pc, #180]	; (8004578 <DMA_CalcBaseAndBitshift+0x150>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <DMA_CalcBaseAndBitshift+0xa8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2c      	ldr	r2, [pc, #176]	; (800457c <DMA_CalcBaseAndBitshift+0x154>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <DMA_CalcBaseAndBitshift+0xac>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <DMA_CalcBaseAndBitshift+0xae>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d024      	beq.n	8004524 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3b10      	subs	r3, #16
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <DMA_CalcBaseAndBitshift+0x158>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <DMA_CalcBaseAndBitshift+0x15c>)
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d908      	bls.n	8004514 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <DMA_CalcBaseAndBitshift+0x160>)
 800450a:	4013      	ands	r3, r2
 800450c:	1d1a      	adds	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	659a      	str	r2, [r3, #88]	; 0x58
 8004512:	e00d      	b.n	8004530 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <DMA_CalcBaseAndBitshift+0x160>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
 8004522:	e005      	b.n	8004530 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40020010 	.word	0x40020010
 8004544:	40020028 	.word	0x40020028
 8004548:	40020040 	.word	0x40020040
 800454c:	40020058 	.word	0x40020058
 8004550:	40020070 	.word	0x40020070
 8004554:	40020088 	.word	0x40020088
 8004558:	400200a0 	.word	0x400200a0
 800455c:	400200b8 	.word	0x400200b8
 8004560:	40020410 	.word	0x40020410
 8004564:	40020428 	.word	0x40020428
 8004568:	40020440 	.word	0x40020440
 800456c:	40020458 	.word	0x40020458
 8004570:	40020470 	.word	0x40020470
 8004574:	40020488 	.word	0x40020488
 8004578:	400204a0 	.word	0x400204a0
 800457c:	400204b8 	.word	0x400204b8
 8004580:	aaaaaaab 	.word	0xaaaaaaab
 8004584:	0800b190 	.word	0x0800b190
 8004588:	fffffc00 	.word	0xfffffc00

0800458c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d120      	bne.n	80045e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d858      	bhi.n	800465a <DMA_CheckFifoParam+0xce>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <DMA_CheckFifoParam+0x24>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045d3 	.word	0x080045d3
 80045b8:	080045c1 	.word	0x080045c1
 80045bc:	0800465b 	.word	0x0800465b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d048      	beq.n	800465e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d0:	e045      	b.n	800465e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045da:	d142      	bne.n	8004662 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e0:	e03f      	b.n	8004662 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ea:	d123      	bne.n	8004634 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d838      	bhi.n	8004666 <DMA_CheckFifoParam+0xda>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <DMA_CheckFifoParam+0x70>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	08004613 	.word	0x08004613
 8004604:	0800460d 	.word	0x0800460d
 8004608:	08004625 	.word	0x08004625
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
        break;
 8004610:	e030      	b.n	8004674 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d025      	beq.n	800466a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004622:	e022      	b.n	800466a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800462c:	d11f      	bne.n	800466e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004632:	e01c      	b.n	800466e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	2b02      	cmp	r3, #2
 800463a:	d902      	bls.n	8004642 <DMA_CheckFifoParam+0xb6>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d003      	beq.n	8004648 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004640:	e018      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
        break;
 8004646:	e015      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
    break;
 8004658:	e00b      	b.n	8004672 <DMA_CheckFifoParam+0xe6>
        break;
 800465a:	bf00      	nop
 800465c:	e00a      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 800465e:	bf00      	nop
 8004660:	e008      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 8004662:	bf00      	nop
 8004664:	e006      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <DMA_CheckFifoParam+0xe8>
    break;
 8004672:	bf00      	nop
    }
  }

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a38      	ldr	r2, [pc, #224]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a36      	ldr	r2, [pc, #216]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a35      	ldr	r2, [pc, #212]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a33      	ldr	r2, [pc, #204]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a32      	ldr	r2, [pc, #200]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3b08      	subs	r3, #8
 80046f4:	4a28      	ldr	r2, [pc, #160]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4b26      	ldr	r3, [pc, #152]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004710:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2201      	movs	r2, #1
 800471a:	409a      	lsls	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004720:	e024      	b.n	800476c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3b10      	subs	r3, #16
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d806      	bhi.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d902      	bls.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3308      	adds	r3, #8
 8004748:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800475c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	58025408 	.word	0x58025408
 800477c:	5802541c 	.word	0x5802541c
 8004780:	58025430 	.word	0x58025430
 8004784:	58025444 	.word	0x58025444
 8004788:	58025458 	.word	0x58025458
 800478c:	5802546c 	.word	0x5802546c
 8004790:	58025480 	.word	0x58025480
 8004794:	58025494 	.word	0x58025494
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	16009600 	.word	0x16009600
 80047a0:	58025880 	.word	0x58025880
 80047a4:	aaaaaaab 	.word	0xaaaaaaab
 80047a8:	400204b8 	.word	0x400204b8
 80047ac:	4002040f 	.word	0x4002040f
 80047b0:	10008200 	.word	0x10008200
 80047b4:	40020880 	.word	0x40020880

080047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04a      	beq.n	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d847      	bhi.n	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a25      	ldr	r2, [pc, #148]	; (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d022      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a24      	ldr	r2, [pc, #144]	; (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d01d      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a22      	ldr	r2, [pc, #136]	; (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d018      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00e      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d009      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1b      	ldr	r2, [pc, #108]	; (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004840:	671a      	str	r2, [r3, #112]	; 0x70
 8004842:	e009      	b.n	8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004856:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b01      	subs	r3, #1
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	58025408 	.word	0x58025408
 8004874:	5802541c 	.word	0x5802541c
 8004878:	58025430 	.word	0x58025430
 800487c:	58025444 	.word	0x58025444
 8004880:	58025458 	.word	0x58025458
 8004884:	5802546c 	.word	0x5802546c
 8004888:	58025480 	.word	0x58025480
 800488c:	58025494 	.word	0x58025494
 8004890:	1600963f 	.word	0x1600963f
 8004894:	58025940 	.word	0x58025940
 8004898:	1000823f 	.word	0x1000823f
 800489c:	40020940 	.word	0x40020940

080048a0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	7a1b      	ldrb	r3, [r3, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d155      	bne.n	8004966 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4b      	ldr	r2, [pc, #300]	; (80049ec <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d049      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a49      	ldr	r2, [pc, #292]	; (80049f0 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d044      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a48      	ldr	r2, [pc, #288]	; (80049f4 <HAL_DMAEx_ConfigMuxSync+0x154>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d03f      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a46      	ldr	r2, [pc, #280]	; (80049f8 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d03a      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a45      	ldr	r2, [pc, #276]	; (80049fc <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d035      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a43      	ldr	r2, [pc, #268]	; (8004a00 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d030      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a42      	ldr	r2, [pc, #264]	; (8004a04 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d02b      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a40      	ldr	r2, [pc, #256]	; (8004a08 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d026      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d021      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3d      	ldr	r2, [pc, #244]	; (8004a10 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01c      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d017      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3a      	ldr	r2, [pc, #232]	; (8004a18 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d012      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00d      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a37      	ldr	r2, [pc, #220]	; (8004a20 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d008      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a36      	ldr	r2, [pc, #216]	; (8004a24 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8004956:	4293      	cmp	r3, r2
 8004958:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d131      	bne.n	80049d6 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DMAEx_ConfigMuxSync+0xe0>
 800497c:	2302      	movs	r3, #2
 800497e:	e02f      	b.n	80049e0 <HAL_DMAEx_ConfigMuxSync+0x140>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004992:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8004996:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	b2d9      	uxtb	r1, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	061a      	lsls	r2, r3, #24
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	04db      	lsls	r3, r3, #19
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	7a1b      	ldrb	r3, [r3, #8]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	7a5b      	ldrb	r3, [r3, #9]
 80049be:	025b      	lsls	r3, r3, #9
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e004      	b.n	80049e0 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40020010 	.word	0x40020010
 80049f0:	40020028 	.word	0x40020028
 80049f4:	40020040 	.word	0x40020040
 80049f8:	40020058 	.word	0x40020058
 80049fc:	40020070 	.word	0x40020070
 8004a00:	40020088 	.word	0x40020088
 8004a04:	400200a0 	.word	0x400200a0
 8004a08:	400200b8 	.word	0x400200b8
 8004a0c:	40020410 	.word	0x40020410
 8004a10:	40020428 	.word	0x40020428
 8004a14:	40020440 	.word	0x40020440
 8004a18:	40020458 	.word	0x40020458
 8004a1c:	40020470 	.word	0x40020470
 8004a20:	40020488 	.word	0x40020488
 8004a24:	400204a0 	.word	0x400204a0
 8004a28:	400204b8 	.word	0x400204b8

08004a2c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01a      	beq.n	8004a7a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d022      	beq.n	8004ac8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01a      	beq.n	8004ac8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
      }
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b089      	sub	sp, #36	; 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ade:	4b86      	ldr	r3, [pc, #536]	; (8004cf8 <HAL_GPIO_Init+0x228>)
 8004ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ae2:	e18c      	b.n	8004dfe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 817e 	beq.w	8004df8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d005      	beq.n	8004b14 <HAL_GPIO_Init+0x44>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d130      	bne.n	8004b76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	2203      	movs	r2, #3
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 0201 	and.w	r2, r3, #1
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d017      	beq.n	8004bb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d123      	bne.n	8004c06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	08da      	lsrs	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3208      	adds	r2, #8
 8004bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	08da      	lsrs	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3208      	adds	r2, #8
 8004c00:	69b9      	ldr	r1, [r7, #24]
 8004c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	2203      	movs	r2, #3
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80d8 	beq.w	8004df8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c48:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <HAL_GPIO_Init+0x22c>)
 8004c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c4e:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <HAL_GPIO_Init+0x22c>)
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c58:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <HAL_GPIO_Init+0x22c>)
 8004c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c66:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <HAL_GPIO_Init+0x230>)
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	089b      	lsrs	r3, r3, #2
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	220f      	movs	r2, #15
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <HAL_GPIO_Init+0x234>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d04a      	beq.n	8004d28 <HAL_GPIO_Init+0x258>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <HAL_GPIO_Init+0x238>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02b      	beq.n	8004cf2 <HAL_GPIO_Init+0x222>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <HAL_GPIO_Init+0x23c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d025      	beq.n	8004cee <HAL_GPIO_Init+0x21e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <HAL_GPIO_Init+0x240>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01f      	beq.n	8004cea <HAL_GPIO_Init+0x21a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_GPIO_Init+0x244>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d019      	beq.n	8004ce6 <HAL_GPIO_Init+0x216>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_GPIO_Init+0x248>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_GPIO_Init+0x212>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_GPIO_Init+0x24c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00d      	beq.n	8004cde <HAL_GPIO_Init+0x20e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <HAL_GPIO_Init+0x250>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <HAL_GPIO_Init+0x20a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <HAL_GPIO_Init+0x254>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_GPIO_Init+0x206>
 8004cd2:	2309      	movs	r3, #9
 8004cd4:	e029      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e027      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e025      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cde:	2306      	movs	r3, #6
 8004ce0:	e023      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	e021      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	e01f      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cea:	2303      	movs	r3, #3
 8004cec:	e01d      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e01b      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e019      	b.n	8004d2a <HAL_GPIO_Init+0x25a>
 8004cf6:	bf00      	nop
 8004cf8:	58000080 	.word	0x58000080
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	58000400 	.word	0x58000400
 8004d04:	58020000 	.word	0x58020000
 8004d08:	58020400 	.word	0x58020400
 8004d0c:	58020800 	.word	0x58020800
 8004d10:	58020c00 	.word	0x58020c00
 8004d14:	58021000 	.word	0x58021000
 8004d18:	58021400 	.word	0x58021400
 8004d1c:	58021800 	.word	0x58021800
 8004d20:	58021c00 	.word	0x58021c00
 8004d24:	58022400 	.word	0x58022400
 8004d28:	2300      	movs	r3, #0
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	f002 0203 	and.w	r2, r2, #3
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	4093      	lsls	r3, r2
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d3a:	4938      	ldr	r1, [pc, #224]	; (8004e1c <HAL_GPIO_Init+0x34c>)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	3302      	adds	r3, #2
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f47f ae6b 	bne.w	8004ae4 <HAL_GPIO_Init+0x14>
  }
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	3724      	adds	r7, #36	; 0x24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	58000400 	.word	0x58000400

08004e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e30:	787b      	ldrb	r3, [r7, #1]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e3c:	e003      	b.n	8004e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e3e:	887b      	ldrh	r3, [r7, #2]
 8004e40:	041a      	lsls	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	619a      	str	r2, [r3, #24]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e5c:	4b29      	ldr	r3, [pc, #164]	; (8004f04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	2b06      	cmp	r3, #6
 8004e66:	d00a      	beq.n	8004e7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e68:	4b26      	ldr	r3, [pc, #152]	; (8004f04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e03f      	b.n	8004efa <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e03d      	b.n	8004efa <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e7e:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004e86:	491f      	ldr	r1, [pc, #124]	; (8004f04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e8e:	f7fc ff13 	bl	8001cb8 <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e94:	e009      	b.n	8004eaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e96:	f7fc ff0f 	bl	8001cb8 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea4:	d901      	bls.n	8004eaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e027      	b.n	8004efa <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004eaa:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb6:	d1ee      	bne.n	8004e96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b1e      	cmp	r3, #30
 8004ebc:	d008      	beq.n	8004ed0 <HAL_PWREx_ConfigSupply+0x7c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ec2:	d005      	beq.n	8004ed0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b1d      	cmp	r3, #29
 8004ec8:	d002      	beq.n	8004ed0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b2d      	cmp	r3, #45	; 0x2d
 8004ece:	d113      	bne.n	8004ef8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004ed0:	f7fc fef2 	bl	8001cb8 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ed6:	e009      	b.n	8004eec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ed8:	f7fc feee 	bl	8001cb8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee6:	d901      	bls.n	8004eec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e006      	b.n	8004efa <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0311 	and.w	r3, r3, #17
 8004ef4:	2b11      	cmp	r3, #17
 8004ef6:	d1ef      	bne.n	8004ed8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	58024800 	.word	0x58024800

08004f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	; 0x30
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e397      	b.n	800564a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8087 	beq.w	8005036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f28:	4b9e      	ldr	r3, [pc, #632]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f32:	4b9c      	ldr	r3, [pc, #624]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d007      	beq.n	8004f4e <HAL_RCC_OscConfig+0x46>
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b18      	cmp	r3, #24
 8004f42:	d110      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5e>
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d10b      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	4b95      	ldr	r3, [pc, #596]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06c      	beq.n	8005034 <HAL_RCC_OscConfig+0x12c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d168      	bne.n	8005034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e371      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x76>
 8004f70:	4b8c      	ldr	r3, [pc, #560]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a8b      	ldr	r2, [pc, #556]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e02e      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x98>
 8004f86:	4b87      	ldr	r3, [pc, #540]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a86      	ldr	r2, [pc, #536]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b84      	ldr	r3, [pc, #528]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a83      	ldr	r2, [pc, #524]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xbc>
 8004faa:	4b7e      	ldr	r3, [pc, #504]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a7d      	ldr	r2, [pc, #500]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b7b      	ldr	r3, [pc, #492]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7a      	ldr	r2, [pc, #488]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004fc4:	4b77      	ldr	r3, [pc, #476]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a76      	ldr	r2, [pc, #472]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b74      	ldr	r3, [pc, #464]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a73      	ldr	r2, [pc, #460]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fe68 	bl	8001cb8 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fec:	f7fc fe64 	bl	8001cb8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	; 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e325      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ffe:	4b69      	ldr	r3, [pc, #420]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xe4>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fc fe54 	bl	8001cb8 <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005014:	f7fc fe50 	bl	8001cb8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	; 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e311      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x10c>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 808a 	beq.w	8005158 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005044:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800504c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800504e:	4b55      	ldr	r3, [pc, #340]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_RCC_OscConfig+0x162>
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	2b18      	cmp	r3, #24
 800505e:	d137      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1c8>
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d132      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800506a:	4b4e      	ldr	r3, [pc, #312]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <HAL_RCC_OscConfig+0x17a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e2e3      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005082:	4b48      	ldr	r3, [pc, #288]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 0219 	bic.w	r2, r3, #25
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	4945      	ldr	r1, [pc, #276]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005094:	f7fc fe10 	bl	8001cb8 <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800509c:	f7fc fe0c 	bl	8001cb8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e2cd      	b.n	800564a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ba:	4b3a      	ldr	r3, [pc, #232]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	061b      	lsls	r3, r3, #24
 80050c8:	4936      	ldr	r1, [pc, #216]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ce:	e043      	b.n	8005158 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d026      	beq.n	8005126 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050d8:	4b32      	ldr	r3, [pc, #200]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 0219 	bic.w	r2, r3, #25
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	492f      	ldr	r1, [pc, #188]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fc fde5 	bl	8001cb8 <HAL_GetTick>
 80050ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f2:	f7fc fde1 	bl	8001cb8 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e2a2      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	4921      	ldr	r1, [pc, #132]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]
 8005124:	e018      	b.n	8005158 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005126:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fc fdc1 	bl	8001cb8 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513a:	f7fc fdbd 	bl	8001cb8 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e27e      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800514c:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d06d      	beq.n	8005240 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800516c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b08      	cmp	r3, #8
 8005178:	d007      	beq.n	800518a <HAL_RCC_OscConfig+0x282>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b18      	cmp	r3, #24
 800517e:	d11e      	bne.n	80051be <HAL_RCC_OscConfig+0x2b6>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d119      	bne.n	80051be <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_RCC_OscConfig+0x29c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_RCC_OscConfig+0x2a0>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d004      	beq.n	80051a8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e253      	b.n	800564a <HAL_RCC_OscConfig+0x742>
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051a8:	4ba3      	ldr	r3, [pc, #652]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	49a0      	ldr	r1, [pc, #640]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051bc:	e040      	b.n	8005240 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d023      	beq.n	800520e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051c6:	4b9c      	ldr	r3, [pc, #624]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a9b      	ldr	r2, [pc, #620]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80051cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fc fd71 	bl	8001cb8 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80051da:	f7fc fd6d 	bl	8001cb8 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e22e      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051ec:	4b92      	ldr	r3, [pc, #584]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051f8:	4b8f      	ldr	r3, [pc, #572]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	061b      	lsls	r3, r3, #24
 8005206:	498c      	ldr	r1, [pc, #560]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005208:	4313      	orrs	r3, r2
 800520a:	60cb      	str	r3, [r1, #12]
 800520c:	e018      	b.n	8005240 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800520e:	4b8a      	ldr	r3, [pc, #552]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a89      	ldr	r2, [pc, #548]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521a:	f7fc fd4d 	bl	8001cb8 <HAL_GetTick>
 800521e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005222:	f7fc fd49 	bl	8001cb8 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e20a      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005234:	4b80      	ldr	r3, [pc, #512]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d036      	beq.n	80052ba <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005254:	4b78      	ldr	r3, [pc, #480]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	4a77      	ldr	r2, [pc, #476]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fc fd2a 	bl	8001cb8 <HAL_GetTick>
 8005264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005268:	f7fc fd26 	bl	8001cb8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1e7      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800527a:	4b6f      	ldr	r3, [pc, #444]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800527c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x360>
 8005286:	e018      	b.n	80052ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005288:	4b6b      	ldr	r3, [pc, #428]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528c:	4a6a      	ldr	r2, [pc, #424]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fc fd10 	bl	8001cb8 <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800529c:	f7fc fd0c 	bl	8001cb8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1cd      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ae:	4b62      	ldr	r3, [pc, #392]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80052b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d036      	beq.n	8005334 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d019      	beq.n	8005302 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052ce:	4b5a      	ldr	r3, [pc, #360]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a59      	ldr	r2, [pc, #356]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80052d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052da:	f7fc fced 	bl	8001cb8 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052e2:	f7fc fce9 	bl	8001cb8 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1aa      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052f4:	4b50      	ldr	r3, [pc, #320]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x3da>
 8005300:	e018      	b.n	8005334 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005302:	4b4d      	ldr	r3, [pc, #308]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a4c      	ldr	r2, [pc, #304]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800530e:	f7fc fcd3 	bl	8001cb8 <HAL_GetTick>
 8005312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005316:	f7fc fccf 	bl	8001cb8 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e190      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005328:	4b43      	ldr	r3, [pc, #268]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f0      	bne.n	8005316 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8085 	beq.w	800544c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005342:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCC_OscConfig+0x534>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a3d      	ldr	r2, [pc, #244]	; (800543c <HAL_RCC_OscConfig+0x534>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800534e:	f7fc fcb3 	bl	8001cb8 <HAL_GetTick>
 8005352:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005356:	f7fc fcaf 	bl	8001cb8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	; 0x64
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e170      	b.n	800564a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005368:	4b34      	ldr	r3, [pc, #208]	; (800543c <HAL_RCC_OscConfig+0x534>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x482>
 800537c:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6713      	str	r3, [r2, #112]	; 0x70
 8005388:	e02d      	b.n	80053e6 <HAL_RCC_OscConfig+0x4de>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x4a4>
 8005392:	4b29      	ldr	r3, [pc, #164]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	4a28      	ldr	r2, [pc, #160]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6713      	str	r3, [r2, #112]	; 0x70
 800539e:	4b26      	ldr	r3, [pc, #152]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a25      	ldr	r2, [pc, #148]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	e01c      	b.n	80053e6 <HAL_RCC_OscConfig+0x4de>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d10c      	bne.n	80053ce <HAL_RCC_OscConfig+0x4c6>
 80053b4:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	6713      	str	r3, [r2, #112]	; 0x70
 80053c0:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6713      	str	r3, [r2, #112]	; 0x70
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0x4de>
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	4a19      	ldr	r2, [pc, #100]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6713      	str	r3, [r2, #112]	; 0x70
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d015      	beq.n	800541a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fc fc63 	bl	8001cb8 <HAL_GetTick>
 80053f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7fc fc5f 	bl	8001cb8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e11e      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_RCC_OscConfig+0x530>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0ee      	beq.n	80053f6 <HAL_RCC_OscConfig+0x4ee>
 8005418:	e018      	b.n	800544c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541a:	f7fc fc4d 	bl	8001cb8 <HAL_GetTick>
 800541e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005420:	e00e      	b.n	8005440 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fc fc49 	bl	8001cb8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d905      	bls.n	8005440 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e108      	b.n	800564a <HAL_RCC_OscConfig+0x742>
 8005438:	58024400 	.word	0x58024400
 800543c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005440:	4b84      	ldr	r3, [pc, #528]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ea      	bne.n	8005422 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80f9 	beq.w	8005648 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005456:	4b7f      	ldr	r3, [pc, #508]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545e:	2b18      	cmp	r3, #24
 8005460:	f000 80b4 	beq.w	80055cc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2b02      	cmp	r3, #2
 800546a:	f040 8095 	bne.w	8005598 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a78      	ldr	r2, [pc, #480]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fc fc1d 	bl	8001cb8 <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005482:	f7fc fc19 	bl	8001cb8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0da      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005494:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a0:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80054a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a4:	4b6c      	ldr	r3, [pc, #432]	; (8005658 <HAL_RCC_OscConfig+0x750>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054b0:	0112      	lsls	r2, r2, #4
 80054b2:	430a      	orrs	r2, r1
 80054b4:	4967      	ldr	r1, [pc, #412]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	628b      	str	r3, [r1, #40]	; 0x28
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	3b01      	subs	r3, #1
 80054c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	3b01      	subs	r3, #1
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	3b01      	subs	r3, #1
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	3b01      	subs	r3, #1
 80054e4:	061b      	lsls	r3, r3, #24
 80054e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054ea:	495a      	ldr	r1, [pc, #360]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80054f0:	4b58      	ldr	r3, [pc, #352]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	4a57      	ldr	r2, [pc, #348]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054fc:	4b55      	ldr	r3, [pc, #340]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80054fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005500:	4b56      	ldr	r3, [pc, #344]	; (800565c <HAL_RCC_OscConfig+0x754>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005508:	00d2      	lsls	r2, r2, #3
 800550a:	4952      	ldr	r1, [pc, #328]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005510:	4b50      	ldr	r3, [pc, #320]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f023 020c 	bic.w	r2, r3, #12
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	494d      	ldr	r1, [pc, #308]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005522:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	f023 0202 	bic.w	r2, r3, #2
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552e:	4949      	ldr	r1, [pc, #292]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005534:	4b47      	ldr	r3, [pc, #284]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	4a46      	ldr	r2, [pc, #280]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800553a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005540:	4b44      	ldr	r3, [pc, #272]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4a43      	ldr	r2, [pc, #268]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800554c:	4b41      	ldr	r3, [pc, #260]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4a40      	ldr	r2, [pc, #256]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005558:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a3d      	ldr	r2, [pc, #244]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005564:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fc fba2 	bl	8001cb8 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005578:	f7fc fb9e 	bl	8001cb8 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e05f      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800558a:	4b32      	ldr	r3, [pc, #200]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x670>
 8005596:	e057      	b.n	8005648 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005598:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2d      	ldr	r2, [pc, #180]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 800559e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fc fb88 	bl	8001cb8 <HAL_GetTick>
 80055a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fc fb84 	bl	8001cb8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e045      	b.n	800564a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055be:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x6a4>
 80055ca:	e03d      	b.n	8005648 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_OscConfig+0x74c>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d031      	beq.n	8005644 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f003 0203 	and.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d12a      	bne.n	8005644 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d122      	bne.n	8005644 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d11a      	bne.n	8005644 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0a5b      	lsrs	r3, r3, #9
 8005612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d111      	bne.n	8005644 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d108      	bne.n	8005644 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
 8005658:	fffffc0c 	.word	0xfffffc0c
 800565c:	ffff0007 	.word	0xffff0007

08005660 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e19c      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b8a      	ldr	r3, [pc, #552]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d910      	bls.n	80056a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b87      	ldr	r3, [pc, #540]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 020f 	bic.w	r2, r3, #15
 800568a:	4985      	ldr	r1, [pc, #532]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b83      	ldr	r3, [pc, #524]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e184      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	4b7b      	ldr	r3, [pc, #492]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056bc:	429a      	cmp	r2, r3
 80056be:	d908      	bls.n	80056d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056c0:	4b78      	ldr	r3, [pc, #480]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	4975      	ldr	r1, [pc, #468]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	4b70      	ldr	r3, [pc, #448]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d908      	bls.n	8005700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ee:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	496a      	ldr	r1, [pc, #424]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	4b64      	ldr	r3, [pc, #400]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005718:	429a      	cmp	r2, r3
 800571a:	d908      	bls.n	800572e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800571c:	4b61      	ldr	r3, [pc, #388]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	495e      	ldr	r1, [pc, #376]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800572a:	4313      	orrs	r3, r2
 800572c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005746:	429a      	cmp	r2, r3
 8005748:	d908      	bls.n	800575c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800574a:	4b56      	ldr	r3, [pc, #344]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4953      	ldr	r1, [pc, #332]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005758:	4313      	orrs	r3, r2
 800575a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	429a      	cmp	r2, r3
 8005776:	d908      	bls.n	800578a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005778:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f023 020f 	bic.w	r2, r3, #15
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4947      	ldr	r1, [pc, #284]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005786:	4313      	orrs	r3, r2
 8005788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d055      	beq.n	8005842 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005796:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4940      	ldr	r1, [pc, #256]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057b0:	4b3c      	ldr	r3, [pc, #240]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d121      	bne.n	8005800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0f6      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057c8:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d115      	bne.n	8005800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0ea      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d107      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057e0:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0de      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057f0:	4b2c      	ldr	r3, [pc, #176]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0d6      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005800:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f023 0207 	bic.w	r2, r3, #7
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4925      	ldr	r1, [pc, #148]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800580e:	4313      	orrs	r3, r2
 8005810:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fc fa51 	bl	8001cb8 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005818:	e00a      	b.n	8005830 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581a:	f7fc fa4d 	bl	8001cb8 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0be      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005830:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	429a      	cmp	r2, r3
 8005840:	d1eb      	bne.n	800581a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	429a      	cmp	r2, r3
 800585c:	d208      	bcs.n	8005870 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f023 020f 	bic.w	r2, r3, #15
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	490e      	ldr	r1, [pc, #56]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 800586c:	4313      	orrs	r3, r2
 800586e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d214      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 020f 	bic.w	r2, r3, #15
 8005886:	4906      	ldr	r1, [pc, #24]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e086      	b.n	80059ae <HAL_RCC_ClockConfig+0x34e>
 80058a0:	52002000 	.word	0x52002000
 80058a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d208      	bcs.n	80058d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058c4:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	4939      	ldr	r1, [pc, #228]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d208      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	492e      	ldr	r1, [pc, #184]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005900:	4313      	orrs	r3, r2
 8005902:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800591c:	429a      	cmp	r2, r3
 800591e:	d208      	bcs.n	8005932 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	4922      	ldr	r1, [pc, #136]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 800592e:	4313      	orrs	r3, r2
 8005930:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800594a:	429a      	cmp	r2, r3
 800594c:	d208      	bcs.n	8005960 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4917      	ldr	r1, [pc, #92]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 800595c:	4313      	orrs	r3, r2
 800595e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005960:	f000 f834 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	4912      	ldr	r1, [pc, #72]	; (80059bc <HAL_RCC_ClockConfig+0x35c>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800597e:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <HAL_RCC_ClockConfig+0x358>)
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_RCC_ClockConfig+0x35c>)
 8005988:	5cd3      	ldrb	r3, [r2, r3]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x360>)
 8005996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005998:	4a0a      	ldr	r2, [pc, #40]	; (80059c4 <HAL_RCC_ClockConfig+0x364>)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_RCC_ClockConfig+0x368>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fc f93e 	bl	8001c24 <HAL_InitTick>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	58024400 	.word	0x58024400
 80059bc:	0800b198 	.word	0x0800b198
 80059c0:	24000414 	.word	0x24000414
 80059c4:	24000410 	.word	0x24000410
 80059c8:	24000408 	.word	0x24000408

080059cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b089      	sub	sp, #36	; 0x24
 80059d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059d2:	4bb3      	ldr	r3, [pc, #716]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059da:	2b18      	cmp	r3, #24
 80059dc:	f200 8155 	bhi.w	8005c8a <HAL_RCC_GetSysClockFreq+0x2be>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005c8b 	.word	0x08005c8b
 80059f0:	08005c8b 	.word	0x08005c8b
 80059f4:	08005c8b 	.word	0x08005c8b
 80059f8:	08005c8b 	.word	0x08005c8b
 80059fc:	08005c8b 	.word	0x08005c8b
 8005a00:	08005c8b 	.word	0x08005c8b
 8005a04:	08005c8b 	.word	0x08005c8b
 8005a08:	08005a73 	.word	0x08005a73
 8005a0c:	08005c8b 	.word	0x08005c8b
 8005a10:	08005c8b 	.word	0x08005c8b
 8005a14:	08005c8b 	.word	0x08005c8b
 8005a18:	08005c8b 	.word	0x08005c8b
 8005a1c:	08005c8b 	.word	0x08005c8b
 8005a20:	08005c8b 	.word	0x08005c8b
 8005a24:	08005c8b 	.word	0x08005c8b
 8005a28:	08005a79 	.word	0x08005a79
 8005a2c:	08005c8b 	.word	0x08005c8b
 8005a30:	08005c8b 	.word	0x08005c8b
 8005a34:	08005c8b 	.word	0x08005c8b
 8005a38:	08005c8b 	.word	0x08005c8b
 8005a3c:	08005c8b 	.word	0x08005c8b
 8005a40:	08005c8b 	.word	0x08005c8b
 8005a44:	08005c8b 	.word	0x08005c8b
 8005a48:	08005a7f 	.word	0x08005a7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a4c:	4b94      	ldr	r3, [pc, #592]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a58:	4b91      	ldr	r3, [pc, #580]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	08db      	lsrs	r3, r3, #3
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	4a90      	ldr	r2, [pc, #576]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005a6a:	e111      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a6c:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a6e:	61bb      	str	r3, [r7, #24]
    break;
 8005a70:	e10e      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005a72:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a74:	61bb      	str	r3, [r7, #24]
    break;
 8005a76:	e10b      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005a78:	4b8c      	ldr	r3, [pc, #560]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a7a:	61bb      	str	r3, [r7, #24]
    break;
 8005a7c:	e108      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a7e:	4b88      	ldr	r3, [pc, #544]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005a88:	4b85      	ldr	r3, [pc, #532]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a94:	4b82      	ldr	r3, [pc, #520]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005a9e:	4b80      	ldr	r3, [pc, #512]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	08db      	lsrs	r3, r3, #3
 8005aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80e1 	beq.w	8005c84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	f000 8083 	beq.w	8005bd0 <HAL_RCC_GetSysClockFreq+0x204>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	f200 80a1 	bhi.w	8005c14 <HAL_RCC_GetSysClockFreq+0x248>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x114>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d056      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ade:	e099      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02d      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005aec:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	08db      	lsrs	r3, r3, #3
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	4a6b      	ldr	r2, [pc, #428]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b16:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005b46:	e087      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	4b51      	ldr	r3, [pc, #324]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b8a:	e065      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9e:	4b40      	ldr	r3, [pc, #256]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bce:	e043      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bda:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be2:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bf6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c12:	e021      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	0a5b      	lsrs	r3, r3, #9
 8005c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c62:	3301      	adds	r3, #1
 8005c64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7c:	ee17 3a90 	vmov	r3, s15
 8005c80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005c82:	e005      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
    break;
 8005c88:	e002      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c8c:	61bb      	str	r3, [r7, #24]
    break;
 8005c8e:	bf00      	nop
  }

  return sysclockfreq;
 8005c90:	69bb      	ldr	r3, [r7, #24]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3724      	adds	r7, #36	; 0x24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	03d09000 	.word	0x03d09000
 8005ca8:	003d0900 	.word	0x003d0900
 8005cac:	017d7840 	.word	0x017d7840
 8005cb0:	46000000 	.word	0x46000000
 8005cb4:	4c742400 	.word	0x4c742400
 8005cb8:	4a742400 	.word	0x4a742400
 8005cbc:	4bbebc20 	.word	0x4bbebc20

08005cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005cc6:	f7ff fe81 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	490f      	ldr	r1, [pc, #60]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cd8:	5ccb      	ldrb	r3, [r1, r3]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cee:	5cd3      	ldrb	r3, [r2, r3]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d04:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d06:	681b      	ldr	r3, [r3, #0]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	58024400 	.word	0x58024400
 8005d14:	0800b198 	.word	0x0800b198
 8005d18:	24000414 	.word	0x24000414
 8005d1c:	24000410 	.word	0x24000410

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d03f      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d44:	d02a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d4a:	d824      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d50:	d018      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d56:	d81e      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d60:	d007      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d62:	e018      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d64:	4bab      	ldr	r3, [pc, #684]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	4aaa      	ldr	r2, [pc, #680]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d70:	e015      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	2102      	movs	r1, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f002 f84d 	bl	8007e18 <RCCEx_PLL2_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d82:	e00c      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3324      	adds	r3, #36	; 0x24
 8005d88:	2102      	movs	r1, #2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f002 f8f6 	bl	8007f7c <RCCEx_PLL3_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d109      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005da4:	4b9b      	ldr	r3, [pc, #620]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db0:	4998      	ldr	r1, [pc, #608]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	650b      	str	r3, [r1, #80]	; 0x50
 8005db6:	e001      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d03d      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d826      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005ded 	.word	0x08005ded
 8005ddc:	08005dfb 	.word	0x08005dfb
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e25 	.word	0x08005e25
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4b89      	ldr	r3, [pc, #548]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a88      	ldr	r2, [pc, #544]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005df8:	e015      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 f809 	bl	8007e18 <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e0a:	e00c      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f002 f8b2 	bl	8007f7c <RCCEx_PLL3_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e1c:	e003      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
      break;
 8005e22:	e000      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e2c:	4b79      	ldr	r3, [pc, #484]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	f023 0207 	bic.w	r2, r3, #7
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	4976      	ldr	r1, [pc, #472]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e3e:	e001      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d051      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e56:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005e5a:	d036      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e5c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005e60:	d830      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e66:	d032      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e6c:	d82a      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005e6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e72:	d02e      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005e74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e78:	d824      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e7e:	d018      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e84:	d81e      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e8e:	d007      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005e90:	e018      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e92:	4b60      	ldr	r3, [pc, #384]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a5f      	ldr	r2, [pc, #380]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e9e:	e019      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 ffb6 	bl	8007e18 <RCCEx_PLL2_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005eb0:	e010      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3324      	adds	r3, #36	; 0x24
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f002 f85f 	bl	8007f7c <RCCEx_PLL3_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ec2:	e007      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec8:	e004      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005eda:	4b4e      	ldr	r3, [pc, #312]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ede:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ee8:	494a      	ldr	r1, [pc, #296]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	658b      	str	r3, [r1, #88]	; 0x58
 8005eee:	e001      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d051      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f06:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f0a:	d036      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005f0c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f10:	d830      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f16:	d032      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f1c:	d82a      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005f1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f22:	d02e      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f28:	d824      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f2e:	d018      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f34:	d81e      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f3e:	d007      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005f40:	e018      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f42:	4b34      	ldr	r3, [pc, #208]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	4a33      	ldr	r2, [pc, #204]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f4e:	e019      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 ff5e 	bl	8007e18 <RCCEx_PLL2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005f60:	e010      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3324      	adds	r3, #36	; 0x24
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f002 f807 	bl	8007f7c <RCCEx_PLL3_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f72:	e007      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
      break;
 8005f78:	e004      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005f7a:	bf00      	nop
 8005f7c:	e002      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e000      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f8a:	4b22      	ldr	r3, [pc, #136]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f98:	491e      	ldr	r1, [pc, #120]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d035      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb4:	2b30      	cmp	r3, #48	; 0x30
 8005fb6:	d01c      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d817      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d00c      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d813      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d016      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d10f      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a10      	ldr	r2, [pc, #64]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005fd8:	e00e      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2102      	movs	r1, #2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 ff19 	bl	8007e18 <RCCEx_PLL2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005fea:	e005      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	e002      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ffe:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006002:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600a:	4902      	ldr	r1, [pc, #8]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800600c:	4313      	orrs	r3, r2
 800600e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006010:	e004      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006012:	bf00      	nop
 8006014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d047      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006030:	d030      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006036:	d82a      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800603c:	d02c      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800603e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006042:	d824      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006048:	d018      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d81e      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d007      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800605a:	e018      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800605c:	4bac      	ldr	r3, [pc, #688]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	4aab      	ldr	r2, [pc, #684]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006068:	e017      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fed1 	bl	8007e18 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800607a:	e00e      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3324      	adds	r3, #36	; 0x24
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f001 ff7a 	bl	8007f7c <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800608c:	e005      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
      break;
 8006092:	e002      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060a0:	4b9b      	ldr	r3, [pc, #620]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	4998      	ldr	r1, [pc, #608]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	650b      	str	r3, [r1, #80]	; 0x50
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d049      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060cc:	d02e      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80060ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d2:	d828      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80060d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060d8:	d02a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80060da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060de:	d822      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80060e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060e4:	d026      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80060e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ea:	d81c      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80060ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f0:	d010      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80060f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f6:	d816      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01d      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d111      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	2101      	movs	r1, #1
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fe85 	bl	8007e18 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006112:	e012      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3324      	adds	r3, #36	; 0x24
 8006118:	2101      	movs	r1, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f001 ff2e 	bl	8007f7c <RCCEx_PLL3_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006124:	e009      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	75fb      	strb	r3, [r7, #23]
      break;
 800612a:	e006      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800612c:	bf00      	nop
 800612e:	e004      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006130:	bf00      	nop
 8006132:	e002      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006134:	bf00      	nop
 8006136:	e000      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006140:	4b73      	ldr	r3, [pc, #460]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006144:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	4970      	ldr	r1, [pc, #448]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800614e:	4313      	orrs	r3, r2
 8006150:	650b      	str	r3, [r1, #80]	; 0x50
 8006152:	e001      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d04b      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800616a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800616e:	d02e      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006174:	d828      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617a:	d02a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d822      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006186:	d026      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800618c:	d81c      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800618e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006192:	d010      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006198:	d816      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01d      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800619e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a2:	d111      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fe34 	bl	8007e18 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80061b4:	e012      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3324      	adds	r3, #36	; 0x24
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 fedd 	bl	8007f7c <RCCEx_PLL3_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80061c6:	e009      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	e006      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80061ce:	bf00      	nop
 80061d0:	e004      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80061d2:	bf00      	nop
 80061d4:	e002      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80061d6:	bf00      	nop
 80061d8:	e000      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80061da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061e2:	4b4b      	ldr	r3, [pc, #300]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061f0:	4947      	ldr	r1, [pc, #284]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	658b      	str	r3, [r1, #88]	; 0x58
 80061f6:	e001      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02f      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006210:	d00e      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006216:	d814      	bhi.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800621c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006220:	d10f      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006222:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800622c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800622e:	e00c      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	2101      	movs	r1, #1
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fdee 	bl	8007e18 <RCCEx_PLL2_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006240:	e003      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]
      break;
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d109      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006250:	4b2f      	ldr	r3, [pc, #188]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	492c      	ldr	r1, [pc, #176]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800625e:	4313      	orrs	r3, r2
 8006260:	650b      	str	r3, [r1, #80]	; 0x50
 8006262:	e001      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d032      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006278:	2b03      	cmp	r3, #3
 800627a:	d81b      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062bb 	.word	0x080062bb
 8006288:	08006295 	.word	0x08006295
 800628c:	080062a3 	.word	0x080062a3
 8006290:	080062bb 	.word	0x080062bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80062a0:	e00c      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3304      	adds	r3, #4
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fdb5 	bl	8007e18 <RCCEx_PLL2_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
      break;
 80062b8:	e000      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80062ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80062c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c6:	f023 0203 	bic.w	r2, r3, #3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	4910      	ldr	r1, [pc, #64]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062d4:	e001      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 808a 	beq.w	80063fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062f4:	f7fb fce0 	bl	8001cb8 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062fa:	e00d      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fc:	f7fb fcdc 	bl	8001cb8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	; 0x64
 8006308:	d906      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	75fb      	strb	r3, [r7, #23]
        break;
 800630e:	e009      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006310:	58024400 	.word	0x58024400
 8006314:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006318:	4bb9      	ldr	r3, [pc, #740]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0eb      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d166      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800632a:	4bb6      	ldr	r3, [pc, #728]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800632c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006334:	4053      	eors	r3, r2
 8006336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633e:	4bb1      	ldr	r3, [pc, #708]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006346:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006348:	4bae      	ldr	r3, [pc, #696]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4aad      	ldr	r2, [pc, #692]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800634e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006354:	4bab      	ldr	r3, [pc, #684]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4aaa      	ldr	r2, [pc, #680]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800635a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006360:	4aa8      	ldr	r2, [pc, #672]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800636c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006370:	d115      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fb fca1 	bl	8001cb8 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006378:	e00b      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637a:	f7fb fc9d 	bl	8001cb8 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d902      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	75fb      	strb	r3, [r7, #23]
            break;
 8006390:	e005      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006392:	4b9c      	ldr	r3, [pc, #624]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ed      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d126      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b2:	d10d      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80063b4:	4b93      	ldr	r3, [pc, #588]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063c2:	0919      	lsrs	r1, r3, #4
 80063c4:	4b90      	ldr	r3, [pc, #576]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063c6:	400b      	ands	r3, r1
 80063c8:	498e      	ldr	r1, [pc, #568]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	610b      	str	r3, [r1, #16]
 80063ce:	e005      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80063d0:	4b8c      	ldr	r3, [pc, #560]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	4a8b      	ldr	r2, [pc, #556]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063da:	6113      	str	r3, [r2, #16]
 80063dc:	4b89      	ldr	r3, [pc, #548]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ea:	4986      	ldr	r1, [pc, #536]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	670b      	str	r3, [r1, #112]	; 0x70
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	75bb      	strb	r3, [r7, #22]
 80063f6:	e001      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d07e      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640c:	2b28      	cmp	r3, #40	; 0x28
 800640e:	d867      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	080064e7 	.word	0x080064e7
 800641c:	080064e1 	.word	0x080064e1
 8006420:	080064e1 	.word	0x080064e1
 8006424:	080064e1 	.word	0x080064e1
 8006428:	080064e1 	.word	0x080064e1
 800642c:	080064e1 	.word	0x080064e1
 8006430:	080064e1 	.word	0x080064e1
 8006434:	080064e1 	.word	0x080064e1
 8006438:	080064bd 	.word	0x080064bd
 800643c:	080064e1 	.word	0x080064e1
 8006440:	080064e1 	.word	0x080064e1
 8006444:	080064e1 	.word	0x080064e1
 8006448:	080064e1 	.word	0x080064e1
 800644c:	080064e1 	.word	0x080064e1
 8006450:	080064e1 	.word	0x080064e1
 8006454:	080064e1 	.word	0x080064e1
 8006458:	080064cf 	.word	0x080064cf
 800645c:	080064e1 	.word	0x080064e1
 8006460:	080064e1 	.word	0x080064e1
 8006464:	080064e1 	.word	0x080064e1
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080064e1 	.word	0x080064e1
 8006470:	080064e1 	.word	0x080064e1
 8006474:	080064e1 	.word	0x080064e1
 8006478:	080064e7 	.word	0x080064e7
 800647c:	080064e1 	.word	0x080064e1
 8006480:	080064e1 	.word	0x080064e1
 8006484:	080064e1 	.word	0x080064e1
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064e1 	.word	0x080064e1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064e7 	.word	0x080064e7
 800649c:	080064e1 	.word	0x080064e1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064e7 	.word	0x080064e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 fca8 	bl	8007e18 <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80064cc:	e00c      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fd51 	bl	8007f7c <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064ee:	4b45      	ldr	r3, [pc, #276]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fa:	4942      	ldr	r1, [pc, #264]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	654b      	str	r3, [r1, #84]	; 0x54
 8006500:	e001      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d037      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	2b05      	cmp	r3, #5
 8006518:	d820      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006563 	.word	0x08006563
 8006524:	08006539 	.word	0x08006539
 8006528:	0800654b 	.word	0x0800654b
 800652c:	08006563 	.word	0x08006563
 8006530:	08006563 	.word	0x08006563
 8006534:	08006563 	.word	0x08006563
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	2101      	movs	r1, #1
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fc6a 	bl	8007e18 <RCCEx_PLL2_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006548:	e00c      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fd13 	bl	8007f7c <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800655a:	e003      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
      break;
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800656a:	4b26      	ldr	r3, [pc, #152]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f023 0207 	bic.w	r2, r3, #7
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006576:	4923      	ldr	r1, [pc, #140]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006578:	4313      	orrs	r3, r2
 800657a:	654b      	str	r3, [r1, #84]	; 0x54
 800657c:	e001      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d040      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006594:	2b05      	cmp	r3, #5
 8006596:	d821      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065e3 	.word	0x080065e3
 80065a4:	080065b9 	.word	0x080065b9
 80065a8:	080065cb 	.word	0x080065cb
 80065ac:	080065e3 	.word	0x080065e3
 80065b0:	080065e3 	.word	0x080065e3
 80065b4:	080065e3 	.word	0x080065e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	2101      	movs	r1, #1
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 fc2a 	bl	8007e18 <RCCEx_PLL2_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80065c8:	e00c      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3324      	adds	r3, #36	; 0x24
 80065ce:	2101      	movs	r1, #1
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 fcd3 	bl	8007f7c <RCCEx_PLL3_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80065da:	e003      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]
      break;
 80065e0:	e000      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80065e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d110      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	f023 0207 	bic.w	r2, r3, #7
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065f8:	4902      	ldr	r1, [pc, #8]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	658b      	str	r3, [r1, #88]	; 0x58
 80065fe:	e007      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006600:	58024800 	.word	0x58024800
 8006604:	58024400 	.word	0x58024400
 8006608:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d04b      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006626:	d02e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800662c:	d828      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d02a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d822      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800663a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800663e:	d026      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006644:	d81c      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664a:	d010      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800664c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006650:	d816      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01d      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800665a:	d111      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fbd8 	bl	8007e18 <RCCEx_PLL2_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800666c:	e012      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f001 fc81 	bl	8007f7c <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800667e:	e009      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
      break;
 8006684:	e006      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006686:	bf00      	nop
 8006688:	e004      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800669a:	4bb2      	ldr	r3, [pc, #712]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	49ae      	ldr	r1, [pc, #696]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	654b      	str	r3, [r1, #84]	; 0x54
 80066ae:	e001      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d04b      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066ca:	d02e      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80066cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066d0:	d828      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d6:	d02a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d822      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80066de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e2:	d026      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e8:	d81c      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ee:	d010      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f4:	d816      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01d      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fe:	d111      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fb86 	bl	8007e18 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fc2f 	bl	8007f7c <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006722:	e009      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800672a:	bf00      	nop
 800672c:	e004      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800672e:	bf00      	nop
 8006730:	e002      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800673e:	4b89      	ldr	r3, [pc, #548]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800674c:	4985      	ldr	r1, [pc, #532]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800674e:	4313      	orrs	r3, r2
 8006750:	658b      	str	r3, [r1, #88]	; 0x58
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d04b      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800676a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800676e:	d02e      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006770:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006774:	d828      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	d02a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006780:	d822      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006782:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006786:	d026      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006788:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800678c:	d81c      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800678e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006792:	d010      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006798:	d816      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01d      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	d111      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fb34 	bl	8007e18 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fbdd 	bl	8007f7c <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80067c6:	e009      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80067da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067e2:	4b60      	ldr	r3, [pc, #384]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067f0:	495c      	ldr	r1, [pc, #368]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	658b      	str	r3, [r1, #88]	; 0x58
 80067f6:	e001      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d018      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d10a      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	2102      	movs	r1, #2
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fbaf 	bl	8007f7c <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006828:	4b4e      	ldr	r3, [pc, #312]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800682a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006834:	494b      	ldr	r1, [pc, #300]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006836:	4313      	orrs	r3, r2
 8006838:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006850:	d10a      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3324      	adds	r3, #36	; 0x24
 8006856:	2102      	movs	r1, #2
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fb8f 	bl	8007f7c <RCCEx_PLL3_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800686a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	493b      	ldr	r1, [pc, #236]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006878:	4313      	orrs	r3, r2
 800687a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d034      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800688e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006892:	d01d      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006898:	d817      	bhi.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a2:	d009      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068a4:	e011      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fab3 	bl	8007e18 <RCCEx_PLL2_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80068b6:	e00c      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3324      	adds	r3, #36	; 0x24
 80068bc:	2102      	movs	r1, #2
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fb5c 	bl	8007f7c <RCCEx_PLL3_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
      break;
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80068d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068d8:	4b22      	ldr	r3, [pc, #136]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e6:	491f      	ldr	r1, [pc, #124]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	658b      	str	r3, [r1, #88]	; 0x58
 80068ec:	e001      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d036      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006908:	d01c      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800690a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800690e:	d816      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006914:	d003      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800691a:	d007      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800691c:	e00f      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691e:	4b11      	ldr	r3, [pc, #68]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	4a10      	ldr	r2, [pc, #64]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800692a:	e00c      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	2101      	movs	r1, #1
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fb22 	bl	8007f7c <RCCEx_PLL3_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800693c:	e003      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
      break;
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	4902      	ldr	r1, [pc, #8]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800695c:	4313      	orrs	r3, r2
 800695e:	654b      	str	r3, [r1, #84]	; 0x54
 8006960:	e004      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d029      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006984:	d007      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006986:	e00f      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006988:	4b61      	ldr	r3, [pc, #388]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	4a60      	ldr	r2, [pc, #384]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800698e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006994:	e00b      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	2102      	movs	r1, #2
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fa3b 	bl	8007e18 <RCCEx_PLL2_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80069a6:	e002      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069b4:	4b56      	ldr	r3, [pc, #344]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c0:	4953      	ldr	r1, [pc, #332]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069c6:	e001      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3324      	adds	r3, #36	; 0x24
 80069dc:	2102      	movs	r1, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 facc 	bl	8007f7c <RCCEx_PLL3_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d030      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a02:	d017      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a08:	d811      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0e:	d013      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a14:	d80b      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d010      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	d106      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a20:	4b3b      	ldr	r3, [pc, #236]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	4a3a      	ldr	r2, [pc, #232]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006a2c:	e007      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
      break;
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006a34:	bf00      	nop
 8006a36:	e002      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a44:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a50:	492f      	ldr	r1, [pc, #188]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	654b      	str	r3, [r1, #84]	; 0x54
 8006a56:	e001      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a68:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a74:	4926      	ldr	r1, [pc, #152]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a86:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a92:	491f      	ldr	r1, [pc, #124]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006aaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aae:	6113      	str	r3, [r2, #16]
 8006ab0:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aba:	4915      	ldr	r1, [pc, #84]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	da08      	bge.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006acc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	490e      	ldr	r1, [pc, #56]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af4:	4906      	ldr	r1, [pc, #24]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006afa:	7dbb      	ldrb	r3, [r7, #22]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400

08006b14 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4aa2      	ldr	r2, [pc, #648]	; (8006da8 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 8006b20:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f043 0208 	orr.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 8006b5e:	4b93      	ldr	r3, [pc, #588]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	0d1b      	lsrs	r3, r3, #20
 8006b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 8006b6c:	4b8f      	ldr	r3, [pc, #572]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 8006b7a:	4b8c      	ldr	r3, [pc, #560]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	0e1b      	lsrs	r3, r3, #24
 8006b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 8006b8a:	4b88      	ldr	r3, [pc, #544]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	0a5b      	lsrs	r3, r3, #9
 8006b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 8006b9a:	4b84      	ldr	r3, [pc, #528]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	0c1b      	lsrs	r3, r3, #16
 8006ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 8006baa:	4b80      	ldr	r3, [pc, #512]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	0a9b      	lsrs	r3, r3, #10
 8006bb0:	f003 0203 	and.w	r2, r3, #3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 8006bb8:	4b7c      	ldr	r3, [pc, #496]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	0a5b      	lsrs	r3, r3, #9
 8006bbe:	f003 0201 	and.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 8006bc6:	4b79      	ldr	r3, [pc, #484]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	0b1b      	lsrs	r3, r3, #12
 8006bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8006bd4:	4b75      	ldr	r3, [pc, #468]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 8006be2:	4b72      	ldr	r3, [pc, #456]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	0e1b      	lsrs	r3, r3, #24
 8006be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 8006bf2:	4b6e      	ldr	r3, [pc, #440]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	0a5b      	lsrs	r3, r3, #9
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 8006c02:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 8006c12:	4b66      	ldr	r3, [pc, #408]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	f003 0203 	and.w	r2, r3, #3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8006c20:	4b62      	ldr	r3, [pc, #392]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f003 0201 	and.w	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 8006c2e:	4b5f      	ldr	r3, [pc, #380]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 8006c3a:	4b5c      	ldr	r3, [pc, #368]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	f003 0207 	and.w	r2, r3, #7
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c46:	4b59      	ldr	r3, [pc, #356]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	f003 0207 	and.w	r2, r3, #7
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8006c54:	4b55      	ldr	r3, [pc, #340]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	67da      	str	r2, [r3, #124]	; 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006c60:	4b52      	ldr	r3, [pc, #328]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c6e:	4b4f      	ldr	r3, [pc, #316]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c80:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 8006c8a:	4b48      	ldr	r3, [pc, #288]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	f003 0207 	and.w	r2, r3, #7
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 8006c96:	4b45      	ldr	r3, [pc, #276]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 8006ca4:	4b41      	ldr	r3, [pc, #260]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 8006cb2:	4b3e      	ldr	r3, [pc, #248]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8006cc0:	4b3a      	ldr	r3, [pc, #232]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc4:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8006cce:	4b37      	ldr	r3, [pc, #220]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8006cda:	4b34      	ldr	r3, [pc, #208]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	679a      	str	r2, [r3, #120]	; 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8006ce6:	4b31      	ldr	r3, [pc, #196]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006cf4:	4b2d      	ldr	r3, [pc, #180]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006d00:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	665a      	str	r2, [r3, #100]	; 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8006d0c:	4b27      	ldr	r3, [pc, #156]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8006d18:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 8006d24:	4b21      	ldr	r3, [pc, #132]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 8006d30:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d3e:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d42:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8006d4a:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8006d58:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5c:	f003 0203 	and.w	r2, r3, #3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 8006d64:	4b11      	ldr	r3, [pc, #68]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d68:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 8006d70:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d74:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8006d90:	e004      	b.n	8006d9c <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	c9fff1f7 	.word	0xc9fff1f7
 8006dac:	58024400 	.word	0x58024400

08006db0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b090      	sub	sp, #64	; 0x40
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbe:	f040 8089 	bne.w	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006dc2:	4b95      	ldr	r3, [pc, #596]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d87d      	bhi.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006ded 	.word	0x08006ded
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006ec9 	.word	0x08006ec9
 8006de8:	08006e59 	.word	0x08006e59

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dec:	4b8a      	ldr	r3, [pc, #552]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df8:	d107      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 feb8 	bl	8007b74 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e08:	e3ed      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e0e:	e3ea      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e10:	4b81      	ldr	r3, [pc, #516]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fbfe 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e2c:	e3db      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e32:	e3d8      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e34:	4b78      	ldr	r3, [pc, #480]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d107      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fd40 	bl	80078cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e50:	e3c9      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e56:	e3c6      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e58:	4b6f      	ldr	r3, [pc, #444]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e62:	4b6d      	ldr	r3, [pc, #436]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d10c      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e74:	4b68      	ldr	r3, [pc, #416]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	4a67      	ldr	r2, [pc, #412]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e86:	e01e      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e88:	4b63      	ldr	r3, [pc, #396]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e94:	d106      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e9c:	d102      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e9e:	4b60      	ldr	r3, [pc, #384]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea2:	e010      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ea4:	4b5c      	ldr	r3, [pc, #368]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb8:	d102      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006eba:	4b5a      	ldr	r3, [pc, #360]	; (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ebe:	e002      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ec4:	e38f      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006ec6:	e38e      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ec8:	4b57      	ldr	r3, [pc, #348]	; (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ecc:	e38b      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed2:	e388      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eda:	f040 80a7 	bne.w	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006ede:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ee6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eee:	d054      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ef6:	f200 808b 	bhi.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f00:	f000 8083 	beq.w	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f0a:	f200 8081 	bhi.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f14:	d02f      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f1c:	d878      	bhi.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f2a:	d012      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8006f2c:	e070      	b.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f2e:	4b3a      	ldr	r3, [pc, #232]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f3a:	d107      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fe17 	bl	8007b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f4a:	e34c      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f50:	e349      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f52:	4b31      	ldr	r3, [pc, #196]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f5e:	d107      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f60:	f107 0318 	add.w	r3, r7, #24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fb5d 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f6e:	e33a      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f74:	e337      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f76:	4b28      	ldr	r3, [pc, #160]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f82:	d107      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f84:	f107 030c 	add.w	r3, r7, #12
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fc9f 	bl	80078cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f92:	e328      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f98:	e325      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f9a:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fa2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d10c      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	08db      	lsrs	r3, r3, #3
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	4a16      	ldr	r2, [pc, #88]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc8:	e01e      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fde:	d102      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe4:	e010      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff2:	d106      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffa:	d102      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007006:	e2ee      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007008:	e2ed      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800700e:	e2ea      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007014:	e2e7      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
 800701c:	03d09000 	.word	0x03d09000
 8007020:	003d0900 	.word	0x003d0900
 8007024:	017d7840 	.word	0x017d7840
 8007028:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007032:	f040 809c 	bne.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007036:	4b9e      	ldr	r3, [pc, #632]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800703e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007046:	d054      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800704e:	f200 808b 	bhi.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007058:	f000 8083 	beq.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007062:	f200 8081 	bhi.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800706c:	d02f      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007074:	d878      	bhi.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007082:	d012      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007084:	e070      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007086:	4b8a      	ldr	r3, [pc, #552]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007092:	d107      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fd6b 	bl	8007b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070a2:	e2a0      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a8:	e29d      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070aa:	4b81      	ldr	r3, [pc, #516]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b6:	d107      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b8:	f107 0318 	add.w	r3, r7, #24
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fab1 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80070c6:	e28e      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070cc:	e28b      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070ce:	4b78      	ldr	r3, [pc, #480]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070da:	d107      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070dc:	f107 030c 	add.w	r3, r7, #12
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fbf3 	bl	80078cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070ea:	e27c      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f0:	e279      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070f2:	4b6f      	ldr	r3, [pc, #444]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070fc:	4b6c      	ldr	r3, [pc, #432]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b04      	cmp	r3, #4
 8007106:	d10c      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800710e:	4b68      	ldr	r3, [pc, #416]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	08db      	lsrs	r3, r3, #3
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	4a66      	ldr	r2, [pc, #408]	; (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007120:	e01e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007122:	4b63      	ldr	r3, [pc, #396]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712e:	d106      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007136:	d102      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007138:	4b5f      	ldr	r3, [pc, #380]	; (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713c:	e010      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800713e:	4b5c      	ldr	r3, [pc, #368]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800714a:	d106      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800714c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007152:	d102      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007154:	4b59      	ldr	r3, [pc, #356]	; (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800715e:	e242      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007160:	e241      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007162:	4b57      	ldr	r3, [pc, #348]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007166:	e23e      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716c:	e23b      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007174:	f040 80a6 	bne.w	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007178:	4b4d      	ldr	r3, [pc, #308]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800717a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007180:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007188:	d054      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007190:	f200 808b 	bhi.w	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800719a:	f000 8083 	beq.w	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071a4:	f200 8081 	bhi.w	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ae:	d02f      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b6:	d878      	bhi.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d004      	beq.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c4:	d012      	beq.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80071c6:	e070      	b.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071c8:	4b39      	ldr	r3, [pc, #228]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d4:	d107      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fcca 	bl	8007b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071e4:	e1ff      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ea:	e1fc      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071ec:	4b30      	ldr	r3, [pc, #192]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f8:	d107      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fa:	f107 0318 	add.w	r3, r7, #24
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fa10 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007208:	e1ed      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800720e:	e1ea      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007210:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800721c:	d107      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800721e:	f107 030c 	add.w	r3, r7, #12
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fb52 	bl	80078cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800722c:	e1db      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007232:	e1d8      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007234:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800723c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800723e:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b04      	cmp	r3, #4
 8007248:	d10c      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d109      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007250:	4b17      	ldr	r3, [pc, #92]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007262:	e01e      	b.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007264:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007270:	d106      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007278:	d102      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800727e:	e010      	b.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800728c:	d106      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007294:	d102      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729a:	e002      	b.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80072a0:	e1a1      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80072a2:	e1a0      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072a4:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a8:	e19d      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ae:	e19a      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80072b0:	58024400 	.word	0x58024400
 80072b4:	03d09000 	.word	0x03d09000
 80072b8:	003d0900 	.word	0x003d0900
 80072bc:	017d7840 	.word	0x017d7840
 80072c0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072ca:	d173      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80072cc:	4b9a      	ldr	r3, [pc, #616]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072dc:	d02f      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e4:	d863      	bhi.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f2:	d012      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80072f4:	e05b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072f6:	4b90      	ldr	r3, [pc, #576]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007302:	d107      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007304:	f107 0318 	add.w	r3, r7, #24
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f98b 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007312:	e168      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007318:	e165      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800731a:	4b87      	ldr	r3, [pc, #540]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007326:	d107      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	4618      	mov	r0, r3
 800732e:	f000 facd 	bl	80078cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007336:	e156      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800733c:	e153      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800733e:	4b7e      	ldr	r3, [pc, #504]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007346:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007348:	4b7b      	ldr	r3, [pc, #492]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b04      	cmp	r3, #4
 8007352:	d10c      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800735a:	4b77      	ldr	r3, [pc, #476]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	08db      	lsrs	r3, r3, #3
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	4a75      	ldr	r2, [pc, #468]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800736c:	e01e      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800736e:	4b72      	ldr	r3, [pc, #456]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737a:	d106      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007382:	d102      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007384:	4b6e      	ldr	r3, [pc, #440]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007388:	e010      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800738a:	4b6b      	ldr	r3, [pc, #428]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007396:	d106      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800739e:	d102      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80073a0:	4b68      	ldr	r3, [pc, #416]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a4:	e002      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80073aa:	e11c      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80073ac:	e11b      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073b2:	e118      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ba:	d133      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80073bc:	4b5e      	ldr	r3, [pc, #376]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d2:	d012      	beq.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80073d4:	e023      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073d6:	4b58      	ldr	r3, [pc, #352]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073e2:	d107      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fbc3 	bl	8007b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80073f2:	e0f8      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f8:	e0f5      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073fa:	4b4f      	ldr	r3, [pc, #316]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007406:	d107      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007408:	f107 0318 	add.w	r3, r7, #24
 800740c:	4618      	mov	r0, r3
 800740e:	f000 f909 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007416:	e0e6      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741c:	e0e3      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007422:	e0e0      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800742a:	f040 808d 	bne.w	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800742e:	4b42      	ldr	r3, [pc, #264]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800743e:	d06b      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007446:	d874      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d056      	beq.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007456:	d86c      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800745e:	d03b      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007466:	d864      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800746e:	d021      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007476:	d85c      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007484:	d004      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007486:	e054      	b.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007488:	f000 f8b6 	bl	80075f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800748c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800748e:	e0aa      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007490:	4b29      	ldr	r3, [pc, #164]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749c:	d107      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749e:	f107 0318 	add.w	r3, r7, #24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f8be 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074ac:	e09b      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b2:	e098      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074b4:	4b20      	ldr	r3, [pc, #128]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c0:	d107      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c2:	f107 030c 	add.w	r3, r7, #12
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fa00 	bl	80078cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074d0:	e089      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074d6:	e086      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074d8:	4b17      	ldr	r3, [pc, #92]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d109      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	08db      	lsrs	r3, r3, #3
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	4a13      	ldr	r2, [pc, #76]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074f6:	e076      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fc:	e073      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80074fe:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750a:	d102      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007510:	e069      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007516:	e066      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007524:	d102      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8007526:	4b07      	ldr	r3, [pc, #28]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800752a:	e05c      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007530:	e059      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007536:	e056      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007538:	58024400 	.word	0x58024400
 800753c:	03d09000 	.word	0x03d09000
 8007540:	003d0900 	.word	0x003d0900
 8007544:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754e:	d148      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007550:	4b27      	ldr	r3, [pc, #156]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007558:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007560:	d02a      	beq.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007568:	d838      	bhi.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007576:	d00d      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007578:	e030      	b.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800757a:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007586:	d102      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800758c:	e02b      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007592:	e028      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007594:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075a0:	d107      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fae4 	bl	8007b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075b0:	e019      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b6:	e016      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c4:	d107      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c6:	f107 0318 	add.w	r3, r7, #24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f82a 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075d4:	e007      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075da:	e004      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075e0:	e001      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80075e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3740      	adds	r7, #64	; 0x40
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	58024400 	.word	0x58024400
 80075f4:	017d7840 	.word	0x017d7840

080075f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075fc:	f7fe fb60 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4904      	ldr	r1, [pc, #16]	; (8007620 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007618:	4618      	mov	r0, r3
 800761a:	bd80      	pop	{r7, pc}
 800761c:	58024400 	.word	0x58024400
 8007620:	0800b198 	.word	0x0800b198

08007624 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007624:	b480      	push	{r7}
 8007626:	b089      	sub	sp, #36	; 0x24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800762c:	4ba1      	ldr	r3, [pc, #644]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007636:	4b9f      	ldr	r3, [pc, #636]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	0b1b      	lsrs	r3, r3, #12
 800763c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007640:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007642:	4b9c      	ldr	r3, [pc, #624]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800764e:	4b99      	ldr	r3, [pc, #612]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8111 	beq.w	8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b02      	cmp	r3, #2
 8007676:	f000 8083 	beq.w	8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b02      	cmp	r3, #2
 800767e:	f200 80a1 	bhi.w	80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d056      	beq.n	800773c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800768e:	e099      	b.n	80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007690:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d02d      	beq.n	80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800769c:	4b85      	ldr	r3, [pc, #532]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	08db      	lsrs	r3, r3, #3
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	4a84      	ldr	r2, [pc, #528]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c6:	4b7b      	ldr	r3, [pc, #492]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076f6:	e087      	b.n	8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770a:	4b6a      	ldr	r3, [pc, #424]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771a:	ed97 6a03 	vldr	s12, [r7, #12]
 800771e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800773a:	e065      	b.n	8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800774a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774e:	4b59      	ldr	r3, [pc, #356]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007762:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800777e:	e043      	b.n	8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800778e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007792:	4b48      	ldr	r3, [pc, #288]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077c2:	e021      	b.n	8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d6:	4b37      	ldr	r3, [pc, #220]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007806:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007808:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	0a5b      	lsrs	r3, r3, #9
 800780e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800781e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007822:	edd7 6a07 	vldr	s13, [r7, #28]
 8007826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782e:	ee17 2a90 	vmov	r2, s15
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007836:	4b1f      	ldr	r3, [pc, #124]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800784c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007850:	edd7 6a07 	vldr	s13, [r7, #28]
 8007854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785c:	ee17 2a90 	vmov	r2, s15
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007864:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	0e1b      	lsrs	r3, r3, #24
 800786a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800787a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800787e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788a:	ee17 2a90 	vmov	r2, s15
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007892:	e008      	b.n	80078a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	609a      	str	r2, [r3, #8]
}
 80078a6:	bf00      	nop
 80078a8:	3724      	adds	r7, #36	; 0x24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	58024400 	.word	0x58024400
 80078b8:	03d09000 	.word	0x03d09000
 80078bc:	46000000 	.word	0x46000000
 80078c0:	4c742400 	.word	0x4c742400
 80078c4:	4a742400 	.word	0x4a742400
 80078c8:	4bbebc20 	.word	0x4bbebc20

080078cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b089      	sub	sp, #36	; 0x24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d4:	4ba1      	ldr	r3, [pc, #644]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078de:	4b9f      	ldr	r3, [pc, #636]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	0d1b      	lsrs	r3, r3, #20
 80078e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078ea:	4b9c      	ldr	r3, [pc, #624]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078f6:	4b99      	ldr	r3, [pc, #612]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8111 	beq.w	8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	2b02      	cmp	r3, #2
 800791e:	f000 8083 	beq.w	8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b02      	cmp	r3, #2
 8007926:	f200 80a1 	bhi.w	8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d056      	beq.n	80079e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007936:	e099      	b.n	8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007938:	4b88      	ldr	r3, [pc, #544]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d02d      	beq.n	80079a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007944:	4b85      	ldr	r3, [pc, #532]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	08db      	lsrs	r3, r3, #3
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	4a84      	ldr	r2, [pc, #528]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	ee07 3a90 	vmov	s15, r3
 800795c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796e:	4b7b      	ldr	r3, [pc, #492]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007982:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800799e:	e087      	b.n	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80079ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b2:	4b6a      	ldr	r3, [pc, #424]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079e2:	e065      	b.n	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f6:	4b59      	ldr	r3, [pc, #356]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a26:	e043      	b.n	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3a:	4b48      	ldr	r3, [pc, #288]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a6a:	e021      	b.n	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7e:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007ab0:	4b2a      	ldr	r3, [pc, #168]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	0a5b      	lsrs	r3, r3, #9
 8007ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad6:	ee17 2a90 	vmov	r2, s15
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ade:	4b1f      	ldr	r3, [pc, #124]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	0c1b      	lsrs	r3, r3, #16
 8007ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007af4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b04:	ee17 2a90 	vmov	r2, s15
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007b0c:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	0e1b      	lsrs	r3, r3, #24
 8007b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b32:	ee17 2a90 	vmov	r2, s15
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b3a:	e008      	b.n	8007b4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	609a      	str	r2, [r3, #8]
}
 8007b4e:	bf00      	nop
 8007b50:	3724      	adds	r7, #36	; 0x24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	03d09000 	.word	0x03d09000
 8007b64:	46000000 	.word	0x46000000
 8007b68:	4c742400 	.word	0x4c742400
 8007b6c:	4a742400 	.word	0x4a742400
 8007b70:	4bbebc20 	.word	0x4bbebc20

08007b74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b089      	sub	sp, #36	; 0x24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b7c:	4ba0      	ldr	r3, [pc, #640]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007b86:	4b9e      	ldr	r3, [pc, #632]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	091b      	lsrs	r3, r3, #4
 8007b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b92:	4b9b      	ldr	r3, [pc, #620]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b9c:	4b98      	ldr	r3, [pc, #608]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	fb02 f303 	mul.w	r3, r2, r3
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8111 	beq.w	8007de2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	f000 8083 	beq.w	8007cce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	f200 80a1 	bhi.w	8007d12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d056      	beq.n	8007c8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007bdc:	e099      	b.n	8007d12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bde:	4b88      	ldr	r3, [pc, #544]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d02d      	beq.n	8007c46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bea:	4b85      	ldr	r3, [pc, #532]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	08db      	lsrs	r3, r3, #3
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	4a83      	ldr	r2, [pc, #524]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c14:	4b7a      	ldr	r3, [pc, #488]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c28:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c40:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c44:	e087      	b.n	8007d56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c50:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c58:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c6c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c88:	e065      	b.n	8007d56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	ee07 3a90 	vmov	s15, r3
 8007c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c94:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9c:	4b58      	ldr	r3, [pc, #352]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ccc:	e043      	b.n	8007d56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce0:	4b47      	ldr	r3, [pc, #284]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d10:	e021      	b.n	8007d56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	ee07 3a90 	vmov	s15, r3
 8007d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d24:	4b36      	ldr	r3, [pc, #216]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007d56:	4b2a      	ldr	r3, [pc, #168]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	0a5b      	lsrs	r3, r3, #9
 8007d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d7c:	ee17 2a90 	vmov	r2, s15
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007d84:	4b1e      	ldr	r3, [pc, #120]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007daa:	ee17 2a90 	vmov	r2, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007db2:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	0e1b      	lsrs	r3, r3, #24
 8007db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd8:	ee17 2a90 	vmov	r2, s15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007de0:	e008      	b.n	8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	609a      	str	r2, [r3, #8]
}
 8007df4:	bf00      	nop
 8007df6:	3724      	adds	r7, #36	; 0x24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	58024400 	.word	0x58024400
 8007e04:	03d09000 	.word	0x03d09000
 8007e08:	46000000 	.word	0x46000000
 8007e0c:	4c742400 	.word	0x4c742400
 8007e10:	4a742400 	.word	0x4a742400
 8007e14:	4bbebc20 	.word	0x4bbebc20

08007e18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e26:	4b53      	ldr	r3, [pc, #332]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d101      	bne.n	8007e36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e099      	b.n	8007f6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e36:	4b4f      	ldr	r3, [pc, #316]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a4e      	ldr	r2, [pc, #312]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e42:	f7f9 ff39 	bl	8001cb8 <HAL_GetTick>
 8007e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e48:	e008      	b.n	8007e5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e4a:	f7f9 ff35 	bl	8001cb8 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d901      	bls.n	8007e5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e086      	b.n	8007f6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e5c:	4b45      	ldr	r3, [pc, #276]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1f0      	bne.n	8007e4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e68:	4b42      	ldr	r3, [pc, #264]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	031b      	lsls	r3, r3, #12
 8007e76:	493f      	ldr	r1, [pc, #252]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	628b      	str	r3, [r1, #40]	; 0x28
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	025b      	lsls	r3, r3, #9
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	061b      	lsls	r3, r3, #24
 8007ea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007eac:	4931      	ldr	r1, [pc, #196]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007eb2:	4b30      	ldr	r3, [pc, #192]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	492d      	ldr	r1, [pc, #180]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	f023 0220 	bic.w	r2, r3, #32
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	4928      	ldr	r1, [pc, #160]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ed6:	4b27      	ldr	r3, [pc, #156]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	4a26      	ldr	r2, [pc, #152]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007edc:	f023 0310 	bic.w	r3, r3, #16
 8007ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ee2:	4b24      	ldr	r3, [pc, #144]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <RCCEx_PLL2_Config+0x160>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	69d2      	ldr	r2, [r2, #28]
 8007eee:	00d2      	lsls	r2, r2, #3
 8007ef0:	4920      	ldr	r1, [pc, #128]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ef6:	4b1f      	ldr	r3, [pc, #124]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007efc:	f043 0310 	orr.w	r3, r3, #16
 8007f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f08:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f14:	e00f      	b.n	8007f36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d106      	bne.n	8007f2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f1c:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f28:	e005      	b.n	8007f36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f2a:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a0e      	ldr	r2, [pc, #56]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f42:	f7f9 feb9 	bl	8001cb8 <HAL_GetTick>
 8007f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f48:	e008      	b.n	8007f5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f4a:	f7f9 feb5 	bl	8001cb8 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e006      	b.n	8007f6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <RCCEx_PLL2_Config+0x15c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	58024400 	.word	0x58024400
 8007f78:	ffff0007 	.word	0xffff0007

08007f7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f8a:	4b53      	ldr	r3, [pc, #332]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d101      	bne.n	8007f9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e099      	b.n	80080ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f9a:	4b4f      	ldr	r3, [pc, #316]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a4e      	ldr	r2, [pc, #312]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8007fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa6:	f7f9 fe87 	bl	8001cb8 <HAL_GetTick>
 8007faa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fac:	e008      	b.n	8007fc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007fae:	f7f9 fe83 	bl	8001cb8 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e086      	b.n	80080ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fc0:	4b45      	ldr	r3, [pc, #276]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f0      	bne.n	8007fae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fcc:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	051b      	lsls	r3, r3, #20
 8007fda:	493f      	ldr	r1, [pc, #252]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	628b      	str	r3, [r1, #40]	; 0x28
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	025b      	lsls	r3, r3, #9
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	3b01      	subs	r3, #1
 800800a:	061b      	lsls	r3, r3, #24
 800800c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008010:	4931      	ldr	r1, [pc, #196]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008016:	4b30      	ldr	r3, [pc, #192]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	492d      	ldr	r1, [pc, #180]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008024:	4313      	orrs	r3, r2
 8008026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008028:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	4928      	ldr	r1, [pc, #160]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800803a:	4b27      	ldr	r3, [pc, #156]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a26      	ldr	r2, [pc, #152]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008046:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800804a:	4b24      	ldr	r3, [pc, #144]	; (80080dc <RCCEx_PLL3_Config+0x160>)
 800804c:	4013      	ands	r3, r2
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	69d2      	ldr	r2, [r2, #28]
 8008052:	00d2      	lsls	r2, r2, #3
 8008054:	4920      	ldr	r1, [pc, #128]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800805a:	4b1f      	ldr	r3, [pc, #124]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	4a1e      	ldr	r2, [pc, #120]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a19      	ldr	r2, [pc, #100]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008078:	e00f      	b.n	800809a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d106      	bne.n	800808e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008080:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800808a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800808c:	e005      	b.n	800809a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800808e:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	4a11      	ldr	r2, [pc, #68]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 8008094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008098:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800809a:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a0e      	ldr	r2, [pc, #56]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 80080a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a6:	f7f9 fe07 	bl	8001cb8 <HAL_GetTick>
 80080aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080ac:	e008      	b.n	80080c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080ae:	f7f9 fe03 	bl	8001cb8 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e006      	b.n	80080ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <RCCEx_PLL3_Config+0x15c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400
 80080dc:	ffff0007 	.word	0xffff0007

080080e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e1fb      	b.n	80084ea <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d113      	bne.n	8008124 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a96      	ldr	r2, [pc, #600]	; (800835c <HAL_SAI_Init+0x27c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <HAL_SAI_Init+0x30>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a95      	ldr	r2, [pc, #596]	; (8008360 <HAL_SAI_Init+0x280>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d107      	bne.n	8008120 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008114:	2b01      	cmp	r3, #1
 8008116:	d103      	bne.n	8008120 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e1e2      	b.n	80084ea <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a8c      	ldr	r2, [pc, #560]	; (800835c <HAL_SAI_Init+0x27c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_SAI_Init+0x58>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a8c      	ldr	r2, [pc, #560]	; (8008364 <HAL_SAI_Init+0x284>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d102      	bne.n	800813e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8008138:	4b8b      	ldr	r3, [pc, #556]	; (8008368 <HAL_SAI_Init+0x288>)
 800813a:	61bb      	str	r3, [r7, #24]
 800813c:	e00e      	b.n	800815c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a87      	ldr	r2, [pc, #540]	; (8008360 <HAL_SAI_Init+0x280>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d004      	beq.n	8008152 <HAL_SAI_Init+0x72>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a87      	ldr	r2, [pc, #540]	; (800836c <HAL_SAI_Init+0x28c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d102      	bne.n	8008158 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8008152:	4b87      	ldr	r3, [pc, #540]	; (8008370 <HAL_SAI_Init+0x290>)
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	e001      	b.n	800815c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e1c6      	b.n	80084ea <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d106      	bne.n	8008176 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc8d 	bl	8008a90 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa92 	bl	80086a0 <SAI_Disable>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e1b1      	b.n	80084ea <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2202      	movs	r2, #2
 800818a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d00c      	beq.n	80081b0 <HAL_SAI_Init+0xd0>
 8008196:	2b02      	cmp	r3, #2
 8008198:	d80d      	bhi.n	80081b6 <HAL_SAI_Init+0xd6>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <HAL_SAI_Init+0xc4>
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d003      	beq.n	80081aa <HAL_SAI_Init+0xca>
 80081a2:	e008      	b.n	80081b6 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081a8:	e008      	b.n	80081bc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80081aa:	2310      	movs	r3, #16
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081ae:	e005      	b.n	80081bc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80081b0:	2320      	movs	r3, #32
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081b4:	e002      	b.n	80081bc <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b05      	cmp	r3, #5
 80081c2:	d822      	bhi.n	800820a <HAL_SAI_Init+0x12a>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <HAL_SAI_Init+0xec>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	080081eb 	.word	0x080081eb
 80081d4:	080081f3 	.word	0x080081f3
 80081d8:	0800820b 	.word	0x0800820b
 80081dc:	0800820b 	.word	0x0800820b
 80081e0:	080081fb 	.word	0x080081fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	61fb      	str	r3, [r7, #28]
      break;
 80081e8:	e012      	b.n	8008210 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80081ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ee:	61fb      	str	r3, [r7, #28]
      break;
 80081f0:	e00e      	b.n	8008210 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80081f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081f6:	61fb      	str	r3, [r7, #28]
      break;
 80081f8:	e00a      	b.n	8008210 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80081fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	f043 0303 	orr.w	r3, r3, #3
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008208:	e002      	b.n	8008210 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
      break;
 800820e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008214:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8084 	beq.w	8008328 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a4c      	ldr	r2, [pc, #304]	; (800835c <HAL_SAI_Init+0x27c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d004      	beq.n	8008238 <HAL_SAI_Init+0x158>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a4c      	ldr	r2, [pc, #304]	; (8008364 <HAL_SAI_Init+0x284>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d104      	bne.n	8008242 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008238:	f44f 7080 	mov.w	r0, #256	; 0x100
 800823c:	f7fe fdb8 	bl	8006db0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008240:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a46      	ldr	r2, [pc, #280]	; (8008360 <HAL_SAI_Init+0x280>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d104      	bne.n	8008256 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800824c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008250:	f7fe fdae 	bl	8006db0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008254:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a44      	ldr	r2, [pc, #272]	; (800836c <HAL_SAI_Init+0x28c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d104      	bne.n	800826a <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008260:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008264:	f7fe fda4 	bl	8006db0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008268:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008272:	d120      	bne.n	80082b6 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008278:	2b04      	cmp	r3, #4
 800827a:	d102      	bne.n	8008282 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e00a      	b.n	8008298 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	2b08      	cmp	r3, #8
 8008288:	d103      	bne.n	8008292 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800828a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e002      	b.n	8008298 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	4619      	mov	r1, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
 80082ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80082b2:	613b      	str	r3, [r7, #16]
 80082b4:	e017      	b.n	80082e6 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082be:	d101      	bne.n	80082c4 <HAL_SAI_Init+0x1e4>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e000      	b.n	80082c6 <HAL_SAI_Init+0x1e6>
 80082c4:	2301      	movs	r3, #1
 80082c6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	4619      	mov	r1, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80082e4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	4a22      	ldr	r2, [pc, #136]	; (8008374 <HAL_SAI_Init+0x294>)
 80082ea:	fba2 2303 	umull	r2, r3, r2, r3
 80082ee:	08da      	lsrs	r2, r3, #3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80082f4:	6939      	ldr	r1, [r7, #16]
 80082f6:	4b1f      	ldr	r3, [pc, #124]	; (8008374 <HAL_SAI_Init+0x294>)
 80082f8:	fba3 2301 	umull	r2, r3, r3, r1
 80082fc:	08da      	lsrs	r2, r3, #3
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	1aca      	subs	r2, r1, r3
 8008308:	2a08      	cmp	r2, #8
 800830a:	d904      	bls.n	8008316 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	2b04      	cmp	r3, #4
 800831c:	d104      	bne.n	8008328 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	085a      	lsrs	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_SAI_Init+0x258>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d109      	bne.n	800834c <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_SAI_Init+0x264>
 8008340:	2300      	movs	r3, #0
 8008342:	e001      	b.n	8008348 <HAL_SAI_Init+0x268>
 8008344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008348:	623b      	str	r3, [r7, #32]
 800834a:	e017      	b.n	800837c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008350:	2b01      	cmp	r3, #1
 8008352:	d111      	bne.n	8008378 <HAL_SAI_Init+0x298>
 8008354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008358:	e00f      	b.n	800837a <HAL_SAI_Init+0x29a>
 800835a:	bf00      	nop
 800835c:	40015804 	.word	0x40015804
 8008360:	58005404 	.word	0x58005404
 8008364:	40015824 	.word	0x40015824
 8008368:	40015800 	.word	0x40015800
 800836c:	58005424 	.word	0x58005424
 8008370:	58005400 	.word	0x58005400
 8008374:	cccccccd 	.word	0xcccccccd
 8008378:	2300      	movs	r3, #0
 800837a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b5b      	ldr	r3, [pc, #364]	; (80084f4 <HAL_SAI_Init+0x414>)
 8008388:	400b      	ands	r3, r1
 800838a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6819      	ldr	r1, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a6:	431a      	orrs	r2, r3
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80083b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	051b      	lsls	r3, r3, #20
 80083c8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083ce:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6859      	ldr	r1, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	4b43      	ldr	r3, [pc, #268]	; (80084f8 <HAL_SAI_Init+0x418>)
 80083ea:	400b      	ands	r3, r1
 80083ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69da      	ldr	r2, [r3, #28]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b39      	ldr	r3, [pc, #228]	; (80084fc <HAL_SAI_Init+0x41c>)
 8008418:	400b      	ands	r3, r1
 800841a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6899      	ldr	r1, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800842c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008432:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008438:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843e:	3b01      	subs	r3, #1
 8008440:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008442:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68d9      	ldr	r1, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	f24f 0320 	movw	r3, #61472	; 0xf020
 800845a:	400b      	ands	r3, r1
 800845c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68d9      	ldr	r1, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008472:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008474:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847a:	3b01      	subs	r3, #1
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1c      	ldr	r2, [pc, #112]	; (8008500 <HAL_SAI_Init+0x420>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <HAL_SAI_Init+0x3bc>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1b      	ldr	r2, [pc, #108]	; (8008504 <HAL_SAI_Init+0x424>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d119      	bne.n	80084d0 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a0:	f023 0201 	bic.w	r2, r3, #1
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d10e      	bne.n	80084d0 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ba:	3b01      	subs	r3, #1
 80084bc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084be:	431a      	orrs	r2, r3
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c8:	f043 0201 	orr.w	r2, r3, #1
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3728      	adds	r7, #40	; 0x28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	f005c010 	.word	0xf005c010
 80084f8:	ffff1ff0 	.word	0xffff1ff0
 80084fc:	fff88000 	.word	0xfff88000
 8008500:	40015804 	.word	0x40015804
 8008504:	58005404 	.word	0x58005404

08008508 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <HAL_SAI_Receive_DMA+0x1a>
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e079      	b.n	800861a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b01      	cmp	r3, #1
 8008530:	d172      	bne.n	8008618 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_SAI_Receive_DMA+0x38>
 800853c:	2302      	movs	r3, #2
 800853e:	e06c      	b.n	800861a <HAL_SAI_Receive_DMA+0x112>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	88fa      	ldrh	r2, [r7, #6]
 800855a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2222      	movs	r2, #34	; 0x22
 800856a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008574:	4a2b      	ldr	r2, [pc, #172]	; (8008624 <HAL_SAI_Receive_DMA+0x11c>)
 8008576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857e:	4a2a      	ldr	r2, [pc, #168]	; (8008628 <HAL_SAI_Receive_DMA+0x120>)
 8008580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008588:	4a28      	ldr	r2, [pc, #160]	; (800862c <HAL_SAI_Receive_DMA+0x124>)
 800858a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008592:	2200      	movs	r2, #0
 8008594:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	331c      	adds	r3, #28
 80085a2:	4619      	mov	r1, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085a8:	461a      	mov	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80085b0:	f7fa fbee 	bl	8002d90 <HAL_DMA_Start_IT>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e029      	b.n	800861a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80085c6:	2100      	movs	r1, #0
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 f831 	bl	8008630 <SAI_InterruptFlag>
 80085ce:	4601      	mov	r1, r0
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691a      	ldr	r2, [r3, #16]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085ec:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d107      	bne.n	800860c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800860a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	08008775 	.word	0x08008775
 8008628:	08008715 	.word	0x08008715
 800862c:	08008791 	.word	0x08008791

08008630 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800863c:	2301      	movs	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d103      	bne.n	800864e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f043 0308 	orr.w	r3, r3, #8
 800864c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008652:	2b08      	cmp	r3, #8
 8008654:	d10b      	bne.n	800866e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800865a:	2b03      	cmp	r3, #3
 800865c:	d003      	beq.n	8008666 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d103      	bne.n	800866e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f043 0310 	orr.w	r3, r3, #16
 800866c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b03      	cmp	r3, #3
 8008674:	d003      	beq.n	800867e <SAI_InterruptFlag+0x4e>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d104      	bne.n	8008688 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e003      	b.n	8008690 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f043 0304 	orr.w	r3, r3, #4
 800868e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80086a8:	4b18      	ldr	r3, [pc, #96]	; (800870c <SAI_Disable+0x6c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <SAI_Disable+0x70>)
 80086ae:	fba2 2303 	umull	r2, r3, r2, r3
 80086b2:	0b1b      	lsrs	r3, r3, #12
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	72fb      	strb	r3, [r7, #11]
      break;
 80086e6:	e009      	b.n	80086fc <SAI_Disable+0x5c>
    }
    count--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e7      	bne.n	80086cc <SAI_Disable+0x2c>

  return status;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	24000410 	.word	0x24000410
 8008710:	95cbec1b 	.word	0x95cbec1b

08008714 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872a:	d01c      	beq.n	8008766 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800873a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff ff72 	bl	8008630 <SAI_InterruptFlag>
 800874c:	4603      	mov	r3, r0
 800874e:	43d9      	mvns	r1, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691a      	ldr	r2, [r3, #16]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	400a      	ands	r2, r1
 800875c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f7f8 ff71 	bl	800164e <HAL_SAI_RxCpltCallback>
#endif
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7f8 ff58 	bl	8001638 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fb fc8a 	bl	80040b8 <HAL_DMA_GetError>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d01d      	beq.n	80087e6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80087c8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff ff68 	bl	80086a0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7f7 fedf 	bl	80005a4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b0a8      	sub	sp, #160	; 0xa0
 80087f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80087f4:	f7f9 f9da 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80087f8:	f000 f83a 	bl	8008870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80087fc:	f000 f8a6 	bl	800894c <MX_GPIO_Init>
//  MX_DMA_Init();
//  MX_PDM2PCM_Init();
//  MX_DFSDM1_Init();
//  MX_SAI1_Init();
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8008800:	2000      	movs	r0, #0
 8008802:	f7f7 fd85 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8008806:	2001      	movs	r0, #1
 8008808:	f7f7 fd82 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED_GREEN);
 800880c:	2000      	movs	r0, #0
 800880e:	f7f7 fddd 	bl	80003cc <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8008812:	2001      	movs	r0, #1
 8008814:	f7f7 fdda 	bl	80003cc <BSP_LED_Off>

  BSP_AUDIO_Init_t haudio_in;
  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8008818:	2310      	movs	r3, #16
 800881a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  haudio_in.ChannelsNbr = 1;
 800881e:	2301      	movs	r3, #1
 8008820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  haudio_in.SampleRate = AUDIO_FREQUENCY_16K;
 8008824:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8008828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_8B;
 800882c:	2308      	movs	r3, #8
 800882e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  haudio_in.Volume = 50;
 8008832:	2332      	movs	r3, #50	; 0x32
 8008834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


  uint8_t mic_buffer[PDM_BUFFER_SIZE] = {0};
 8008838:	2300      	movs	r3, #0
 800883a:	607b      	str	r3, [r7, #4]
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	227c      	movs	r2, #124	; 0x7c
 8008842:	2100      	movs	r1, #0
 8008844:	4618      	mov	r0, r3
 8008846:	f002 fa6d 	bl	800ad24 <memset>
  // uint16_t speaker_buffer[PCM_BUFFER_SIZE] = {0};
  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  uint32_t in_init_status = BSP_AUDIO_IN_Init(PDM, &haudio_in);
 800884a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800884e:	4619      	mov	r1, r3
 8008850:	2001      	movs	r0, #1
 8008852:	f7f8 f941 	bl	8000ad8 <BSP_AUDIO_IN_Init>
 8008856:	4603      	mov	r3, r0
 8008858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t record_status = BSP_AUDIO_IN_RecordPDM(PDM, mic_buffer, PDM_BUFFER_SIZE);
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	2280      	movs	r2, #128	; 0x80
 8008860:	4619      	mov	r1, r3
 8008862:	2001      	movs	r0, #1
 8008864:	f7f8 febe 	bl	80015e4 <BSP_AUDIO_IN_RecordPDM>
 8008868:	4603      	mov	r3, r0
 800886a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800886e:	e7fe      	b.n	800886e <main+0x80>

08008870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b09c      	sub	sp, #112	; 0x70
 8008874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800887a:	224c      	movs	r2, #76	; 0x4c
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f002 fa50 	bl	800ad24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	2220      	movs	r2, #32
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f002 fa4a 	bl	800ad24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8008890:	2004      	movs	r0, #4
 8008892:	f7fc fadf 	bl	8004e54 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008896:	2300      	movs	r3, #0
 8008898:	603b      	str	r3, [r7, #0]
 800889a:	4b2b      	ldr	r3, [pc, #172]	; (8008948 <SystemClock_Config+0xd8>)
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	4a2a      	ldr	r2, [pc, #168]	; (8008948 <SystemClock_Config+0xd8>)
 80088a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088a4:	6193      	str	r3, [r2, #24]
 80088a6:	4b28      	ldr	r3, [pc, #160]	; (8008948 <SystemClock_Config+0xd8>)
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80088b2:	bf00      	nop
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <SystemClock_Config+0xd8>)
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c0:	d1f8      	bne.n	80088b4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80088c2:	2302      	movs	r3, #2
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80088c6:	2301      	movs	r3, #1
 80088c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088ce:	2302      	movs	r3, #2
 80088d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80088d2:	2300      	movs	r3, #0
 80088d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80088d6:	2304      	movs	r3, #4
 80088d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80088da:	2318      	movs	r3, #24
 80088dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80088de:	2301      	movs	r3, #1
 80088e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 80088e2:	237d      	movs	r3, #125	; 0x7d
 80088e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80088e6:	2302      	movs	r3, #2
 80088e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80088ea:	230c      	movs	r3, #12
 80088ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fc fb04 	bl	8004f08 <HAL_RCC_OscConfig>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008906:	f000 f869 	bl	80089dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800890a:	233f      	movs	r3, #63	; 0x3f
 800890c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800890e:	2303      	movs	r3, #3
 8008910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008916:	2308      	movs	r3, #8
 8008918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800891a:	2340      	movs	r3, #64	; 0x40
 800891c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800891e:	2340      	movs	r3, #64	; 0x40
 8008920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800892c:	1d3b      	adds	r3, r7, #4
 800892e:	2102      	movs	r1, #2
 8008930:	4618      	mov	r0, r3
 8008932:	f7fc fe95 	bl	8005660 <HAL_RCC_ClockConfig>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800893c:	f000 f84e 	bl	80089dc <Error_Handler>
  }
}
 8008940:	bf00      	nop
 8008942:	3770      	adds	r7, #112	; 0x70
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	58024800 	.word	0x58024800

0800894c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008952:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008958:	4a1f      	ldr	r2, [pc, #124]	; (80089d8 <MX_GPIO_Init+0x8c>)
 800895a:	f043 0301 	orr.w	r3, r3, #1
 800895e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008970:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008976:	4a18      	ldr	r2, [pc, #96]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008978:	f043 0310 	orr.w	r3, r3, #16
 800897c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008980:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	60bb      	str	r3, [r7, #8]
 800898c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800898e:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008994:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <MX_GPIO_Init+0x8c>)
 8008996:	f043 0308 	orr.w	r3, r3, #8
 800899a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800899e:	4b0e      	ldr	r3, [pc, #56]	; (80089d8 <MX_GPIO_Init+0x8c>)
 80089a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <MX_GPIO_Init+0x8c>)
 80089ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <MX_GPIO_Init+0x8c>)
 80089b4:	f043 0320 	orr.w	r3, r3, #32
 80089b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <MX_GPIO_Init+0x8c>)
 80089be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]

}
 80089ca:	bf00      	nop
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	58024400 	.word	0x58024400

080089dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80089e0:	b672      	cpsid	i
}
 80089e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089e4:	e7fe      	b.n	80089e4 <Error_Handler+0x8>
	...

080089e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <HAL_MspInit+0x30>)
 80089f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089f4:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <HAL_MspInit+0x30>)
 80089f6:	f043 0302 	orr.w	r3, r3, #2
 80089fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <HAL_MspInit+0x30>)
 8008a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	58024400 	.word	0x58024400

08008a1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b0b0      	sub	sp, #192	; 0xc0
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	22b4      	movs	r2, #180	; 0xb4
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f002 f979 	bl	800ad24 <memset>
  if(DFSDM1_Init == 0)
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d122      	bne.n	8008a80 <HAL_DFSDM_ChannelMspInit+0x64>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8008a3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8008a40:	2300      	movs	r3, #0
 8008a42:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a44:	f107 030c 	add.w	r3, r7, #12
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fd f969 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <HAL_DFSDM_ChannelMspInit+0x3c>
    {
      Error_Handler();
 8008a54:	f7ff ffc2 	bl	80089dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <HAL_DFSDM_ChannelMspInit+0x70>)
 8008a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a5e:	4a0b      	ldr	r2, [pc, #44]	; (8008a8c <HAL_DFSDM_ChannelMspInit+0x70>)
 8008a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008a68:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <HAL_DFSDM_ChannelMspInit+0x70>)
 8008a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a72:	60bb      	str	r3, [r7, #8]
 8008a74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8008a76:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	4a02      	ldr	r2, [pc, #8]	; (8008a88 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8008a7e:	6013      	str	r3, [r2, #0]
  }

}
 8008a80:	bf00      	nop
 8008a82:	37c0      	adds	r7, #192	; 0xc0
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	2400098c 	.word	0x2400098c
 8008a8c:	58024400 	.word	0x58024400

08008a90 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b0ba      	sub	sp, #232	; 0xe8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a98:	f107 0310 	add.w	r3, r7, #16
 8008a9c:	22b4      	movs	r2, #180	; 0xb4
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f002 f93f 	bl	800ad24 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4aa9      	ldr	r2, [pc, #676]	; (8008d50 <HAL_SAI_MspInit+0x2c0>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	f040 80a5 	bne.w	8008bfc <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8008ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008abc:	f107 0310 	add.w	r3, r7, #16
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd f92d 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8008acc:	f7ff ff86 	bl	80089dc <Error_Handler>
    }

      if (SAI1_client == 0)
 8008ad0:	4ba0      	ldr	r3, [pc, #640]	; (8008d54 <HAL_SAI_MspInit+0x2c4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10e      	bne.n	8008af6 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008ad8:	4b9f      	ldr	r3, [pc, #636]	; (8008d58 <HAL_SAI_MspInit+0x2c8>)
 8008ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ade:	4a9e      	ldr	r2, [pc, #632]	; (8008d58 <HAL_SAI_MspInit+0x2c8>)
 8008ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ae4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008ae8:	4b9b      	ldr	r3, [pc, #620]	; (8008d58 <HAL_SAI_MspInit+0x2c8>)
 8008aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8008af6:	4b97      	ldr	r3, [pc, #604]	; (8008d54 <HAL_SAI_MspInit+0x2c4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	4a95      	ldr	r2, [pc, #596]	; (8008d54 <HAL_SAI_MspInit+0x2c4>)
 8008afe:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008b00:	2308      	movs	r3, #8
 8008b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b06:	2302      	movs	r3, #2
 8008b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b12:	2300      	movs	r3, #0
 8008b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008b18:	2306      	movs	r3, #6
 8008b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008b22:	4619      	mov	r1, r3
 8008b24:	488d      	ldr	r0, [pc, #564]	; (8008d5c <HAL_SAI_MspInit+0x2cc>)
 8008b26:	f7fb ffd3 	bl	8004ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8008b2a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b32:	2302      	movs	r3, #2
 8008b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008b44:	2306      	movs	r3, #6
 8008b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008b4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4883      	ldr	r0, [pc, #524]	; (8008d60 <HAL_SAI_MspInit+0x2d0>)
 8008b52:	f7fb ffbd 	bl	8004ad0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8008b56:	4b83      	ldr	r3, [pc, #524]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b58:	4a83      	ldr	r2, [pc, #524]	; (8008d68 <HAL_SAI_MspInit+0x2d8>)
 8008b5a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008b5c:	4b81      	ldr	r3, [pc, #516]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b5e:	2258      	movs	r2, #88	; 0x58
 8008b60:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b62:	4b80      	ldr	r3, [pc, #512]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b64:	2240      	movs	r2, #64	; 0x40
 8008b66:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b68:	4b7e      	ldr	r3, [pc, #504]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8008b6e:	4b7d      	ldr	r3, [pc, #500]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b74:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b76:	4b7b      	ldr	r3, [pc, #492]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b7c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b7e:	4b79      	ldr	r3, [pc, #484]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b84:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8008b86:	4b77      	ldr	r3, [pc, #476]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b8c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8008b8e:	4b75      	ldr	r3, [pc, #468]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b94:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b96:	4b73      	ldr	r3, [pc, #460]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008b9c:	4871      	ldr	r0, [pc, #452]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008b9e:	f7f9 fbe7 	bl	8002370 <HAL_DMA_Init>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8008ba8:	f7ff ff18 	bl	80089dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8008bac:	2306      	movs	r3, #6
 8008bae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8008bca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4864      	ldr	r0, [pc, #400]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008bd2:	f7fb fe65 	bl	80048a0 <HAL_DMAEx_ConfigMuxSync>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8008bdc:	f7ff fefe 	bl	80089dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a60      	ldr	r2, [pc, #384]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008be8:	4a5e      	ldr	r2, [pc, #376]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a5c      	ldr	r2, [pc, #368]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008bf6:	4a5b      	ldr	r2, [pc, #364]	; (8008d64 <HAL_SAI_MspInit+0x2d4>)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a5a      	ldr	r2, [pc, #360]	; (8008d6c <HAL_SAI_MspInit+0x2dc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	f040 80a0 	bne.w	8008d48 <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c14:	f107 0310 	add.w	r3, r7, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fd f881 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8008c24:	f7ff feda 	bl	80089dc <Error_Handler>
    }

    if (SAI4_client == 0)
 8008c28:	4b51      	ldr	r3, [pc, #324]	; (8008d70 <HAL_SAI_MspInit+0x2e0>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10e      	bne.n	8008c4e <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8008c30:	4b49      	ldr	r3, [pc, #292]	; (8008d58 <HAL_SAI_MspInit+0x2c8>)
 8008c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c36:	4a48      	ldr	r2, [pc, #288]	; (8008d58 <HAL_SAI_MspInit+0x2c8>)
 8008c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008c40:	4b45      	ldr	r3, [pc, #276]	; (8008d58 <HAL_SAI_MspInit+0x2c8>)
 8008c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c4a:	60bb      	str	r3, [r7, #8]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8008c4e:	4b48      	ldr	r3, [pc, #288]	; (8008d70 <HAL_SAI_MspInit+0x2e0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	4a46      	ldr	r2, [pc, #280]	; (8008d70 <HAL_SAI_MspInit+0x2e0>)
 8008c56:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008c58:	2330      	movs	r3, #48	; 0x30
 8008c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8008c70:	230a      	movs	r3, #10
 8008c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008c76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4837      	ldr	r0, [pc, #220]	; (8008d5c <HAL_SAI_MspInit+0x2cc>)
 8008c7e:	f7fb ff27 	bl	8004ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ca0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4833      	ldr	r0, [pc, #204]	; (8008d74 <HAL_SAI_MspInit+0x2e4>)
 8008ca8:	f7fb ff12 	bl	8004ad0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 8008cac:	4b32      	ldr	r3, [pc, #200]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cae:	4a33      	ldr	r2, [pc, #204]	; (8008d7c <HAL_SAI_MspInit+0x2ec>)
 8008cb0:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8008cb2:	4b31      	ldr	r3, [pc, #196]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cb4:	220f      	movs	r2, #15
 8008cb6:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cb8:	4b2f      	ldr	r3, [pc, #188]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cbe:	4b2e      	ldr	r3, [pc, #184]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8008cc4:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cca:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ccc:	4b2a      	ldr	r3, [pc, #168]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008cd2:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8008cd8:	4b27      	ldr	r3, [pc, #156]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cde:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8008ce0:	4b25      	ldr	r3, [pc, #148]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ce6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8008ce8:	4823      	ldr	r0, [pc, #140]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008cea:	f7f9 fb41 	bl	8002370 <HAL_DMA_Init>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8008cf4:	f7ff fe72 	bl	80089dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008cf8:	230e      	movs	r3, #14
 8008cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008d16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4816      	ldr	r0, [pc, #88]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008d1e:	f7fb fdbf 	bl	80048a0 <HAL_DMAEx_ConfigMuxSync>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 8008d28:	f7ff fe58 	bl	80089dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008d34:	4a10      	ldr	r2, [pc, #64]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a0e      	ldr	r2, [pc, #56]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008d42:	4a0d      	ldr	r2, [pc, #52]	; (8008d78 <HAL_SAI_MspInit+0x2e8>)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8008d48:	bf00      	nop
 8008d4a:	37e8      	adds	r7, #232	; 0xe8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40015824 	.word	0x40015824
 8008d54:	24000990 	.word	0x24000990
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	58021000 	.word	0x58021000
 8008d60:	58021400 	.word	0x58021400
 8008d64:	24000e84 	.word	0x24000e84
 8008d68:	40020028 	.word	0x40020028
 8008d6c:	58005404 	.word	0x58005404
 8008d70:	24000994 	.word	0x24000994
 8008d74:	58020c00 	.word	0x58020c00
 8008d78:	24000dd4 	.word	0x24000dd4
 8008d7c:	5802541c 	.word	0x5802541c

08008d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d84:	e7fe      	b.n	8008d84 <NMI_Handler+0x4>

08008d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d86:	b480      	push	{r7}
 8008d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d8a:	e7fe      	b.n	8008d8a <HardFault_Handler+0x4>

08008d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d90:	e7fe      	b.n	8008d90 <MemManage_Handler+0x4>

08008d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d92:	b480      	push	{r7}
 8008d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d96:	e7fe      	b.n	8008d96 <BusFault_Handler+0x4>

08008d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d9c:	e7fe      	b.n	8008d9c <UsageFault_Handler+0x4>

08008d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008da2:	bf00      	nop
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008db0:	bf00      	nop
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008dbe:	bf00      	nop
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008dcc:	f7f8 ff60 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008dd0:	bf00      	nop
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008dd8:	4802      	ldr	r0, [pc, #8]	; (8008de4 <DMA1_Stream1_IRQHandler+0x10>)
 8008dda:	f7fa fa43 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008dde:	bf00      	nop
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	24000e84 	.word	0x24000e84

08008de8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8008dec:	4802      	ldr	r0, [pc, #8]	; (8008df8 <DMAMUX1_OVR_IRQHandler+0x10>)
 8008dee:	f7fb fe1d 	bl	8004a2c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8008df2:	bf00      	nop
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	24000e84 	.word	0x24000e84

08008dfc <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8008e00:	4802      	ldr	r0, [pc, #8]	; (8008e0c <DMAMUX2_OVR_IRQHandler+0x10>)
 8008e02:	f7fb fe13 	bl	8004a2c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8008e06:	bf00      	nop
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	24000dd4 	.word	0x24000dd4

08008e10 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8008e14:	4802      	ldr	r0, [pc, #8]	; (8008e20 <BDMA_Channel1_IRQHandler+0x10>)
 8008e16:	f7fa fa25 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8008e1a:	bf00      	nop
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	24000dd4 	.word	0x24000dd4

08008e24 <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0

  /* USER CODE END SAI4_IRQn 0 */
  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 8008e28:	bf00      	nop
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008e38:	4b32      	ldr	r3, [pc, #200]	; (8008f04 <SystemInit+0xd0>)
 8008e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3e:	4a31      	ldr	r2, [pc, #196]	; (8008f04 <SystemInit+0xd0>)
 8008e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008e48:	4b2f      	ldr	r3, [pc, #188]	; (8008f08 <SystemInit+0xd4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	2b06      	cmp	r3, #6
 8008e52:	d807      	bhi.n	8008e64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008e54:	4b2c      	ldr	r3, [pc, #176]	; (8008f08 <SystemInit+0xd4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f023 030f 	bic.w	r3, r3, #15
 8008e5c:	4a2a      	ldr	r2, [pc, #168]	; (8008f08 <SystemInit+0xd4>)
 8008e5e:	f043 0307 	orr.w	r3, r3, #7
 8008e62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008e64:	4b29      	ldr	r3, [pc, #164]	; (8008f0c <SystemInit+0xd8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a28      	ldr	r2, [pc, #160]	; (8008f0c <SystemInit+0xd8>)
 8008e6a:	f043 0301 	orr.w	r3, r3, #1
 8008e6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008e70:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <SystemInit+0xd8>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008e76:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <SystemInit+0xd8>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4924      	ldr	r1, [pc, #144]	; (8008f0c <SystemInit+0xd8>)
 8008e7c:	4b24      	ldr	r3, [pc, #144]	; (8008f10 <SystemInit+0xdc>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008e82:	4b21      	ldr	r3, [pc, #132]	; (8008f08 <SystemInit+0xd4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d007      	beq.n	8008e9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008e8e:	4b1e      	ldr	r3, [pc, #120]	; (8008f08 <SystemInit+0xd4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f023 030f 	bic.w	r3, r3, #15
 8008e96:	4a1c      	ldr	r2, [pc, #112]	; (8008f08 <SystemInit+0xd4>)
 8008e98:	f043 0307 	orr.w	r3, r3, #7
 8008e9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <SystemInit+0xd8>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008ea4:	4b19      	ldr	r3, [pc, #100]	; (8008f0c <SystemInit+0xd8>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008eaa:	4b18      	ldr	r3, [pc, #96]	; (8008f0c <SystemInit+0xd8>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008eb0:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <SystemInit+0xd8>)
 8008eb2:	4a18      	ldr	r2, [pc, #96]	; (8008f14 <SystemInit+0xe0>)
 8008eb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008eb6:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <SystemInit+0xd8>)
 8008eb8:	4a17      	ldr	r2, [pc, #92]	; (8008f18 <SystemInit+0xe4>)
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008ebc:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <SystemInit+0xd8>)
 8008ebe:	4a17      	ldr	r2, [pc, #92]	; (8008f1c <SystemInit+0xe8>)
 8008ec0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008ec2:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <SystemInit+0xd8>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008ec8:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <SystemInit+0xd8>)
 8008eca:	4a14      	ldr	r2, [pc, #80]	; (8008f1c <SystemInit+0xe8>)
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <SystemInit+0xd8>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <SystemInit+0xd8>)
 8008ed6:	4a11      	ldr	r2, [pc, #68]	; (8008f1c <SystemInit+0xe8>)
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <SystemInit+0xd8>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <SystemInit+0xd8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <SystemInit+0xd8>)
 8008ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <SystemInit+0xd8>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <SystemInit+0xec>)
 8008ef4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008ef8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008efa:	bf00      	nop
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	e000ed00 	.word	0xe000ed00
 8008f08:	52002000 	.word	0x52002000
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	eaf6ed7f 	.word	0xeaf6ed7f
 8008f14:	02020200 	.word	0x02020200
 8008f18:	01ff0000 	.word	0x01ff0000
 8008f1c:	01010280 	.word	0x01010280
 8008f20:	52004000 	.word	0x52004000

08008f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008f28:	f7ff ff84 	bl	8008e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f2c:	480c      	ldr	r0, [pc, #48]	; (8008f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f2e:	490d      	ldr	r1, [pc, #52]	; (8008f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f30:	4a0d      	ldr	r2, [pc, #52]	; (8008f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f34:	e002      	b.n	8008f3c <LoopCopyDataInit>

08008f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f3a:	3304      	adds	r3, #4

08008f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f40:	d3f9      	bcc.n	8008f36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f42:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f44:	4c0a      	ldr	r4, [pc, #40]	; (8008f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f48:	e001      	b.n	8008f4e <LoopFillZerobss>

08008f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f4c:	3204      	adds	r2, #4

08008f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f50:	d3fb      	bcc.n	8008f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008f52:	f001 fec3 	bl	800acdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f56:	f7ff fc4a 	bl	80087ee <main>
  bx  lr
 8008f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008f5c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008f60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008f64:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 8008f68:	0800b420 	.word	0x0800b420
  ldr r2, =_sbss
 8008f6c:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 8008f70:	24000efc 	.word	0x24000efc

08008f74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f74:	e7fe      	b.n	8008f74 <ADC3_IRQHandler>
	...

08008f78 <D16_GENERIC>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	b089      	sub	sp, #36	; 0x24
 8008f7e:	6993      	ldr	r3, [r2, #24]
 8008f80:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008f82:	9103      	str	r1, [sp, #12]
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	69d3      	ldr	r3, [r2, #28]
 8008f88:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008f8c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008f90:	9106      	str	r1, [sp, #24]
 8008f92:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	d063      	beq.n	8009062 <D16_GENERIC+0xea>
 8008f9a:	f001 0520 	and.w	r5, r1, #32
 8008f9e:	f001 0110 	and.w	r1, r1, #16
 8008fa2:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8009084 <D16_GENERIC+0x10c>
 8008fa6:	46c1      	mov	r9, r8
 8008fa8:	9104      	str	r1, [sp, #16]
 8008faa:	2100      	movs	r1, #0
 8008fac:	9505      	str	r5, [sp, #20]
 8008fae:	e04d      	b.n	800904c <D16_GENERIC+0xd4>
 8008fb0:	5d87      	ldrb	r7, [r0, r6]
 8008fb2:	7805      	ldrb	r5, [r0, #0]
 8008fb4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008fb8:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008fbc:	b2fe      	uxtb	r6, r7
 8008fbe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8008fc2:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8008fc6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008fca:	441d      	add	r5, r3
 8008fcc:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8008fd0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008fd4:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008fd8:	0a9b      	lsrs	r3, r3, #10
 8008fda:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8008fde:	4d27      	ldr	r5, [pc, #156]	; (800907c <D16_GENERIC+0x104>)
 8008fe0:	fb26 c505 	smlad	r5, r6, r5, ip
 8008fe4:	4f26      	ldr	r7, [pc, #152]	; (8009080 <D16_GENERIC+0x108>)
 8008fe6:	fb26 fc07 	smuad	ip, r6, r7
 8008fea:	9e04      	ldr	r6, [sp, #16]
 8008fec:	f101 0801 	add.w	r8, r1, #1
 8008ff0:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008ff4:	b1ae      	cbz	r6, 8009022 <D16_GENERIC+0xaa>
 8008ff6:	442c      	add	r4, r5
 8008ff8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008ffc:	eba4 040a 	sub.w	r4, r4, sl
 8009000:	46aa      	mov	sl, r5
 8009002:	17e7      	asrs	r7, r4, #31
 8009004:	fba4 450b 	umull	r4, r5, r4, fp
 8009008:	e9cd 4500 	strd	r4, r5, [sp]
 800900c:	fb0b 5407 	mla	r4, fp, r7, r5
 8009010:	9401      	str	r4, [sp, #4]
 8009012:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009016:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800901a:	f145 0500 	adc.w	r5, r5, #0
 800901e:	006c      	lsls	r4, r5, #1
 8009020:	4625      	mov	r5, r4
 8009022:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009026:	042d      	lsls	r5, r5, #16
 8009028:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800902c:	2700      	movs	r7, #0
 800902e:	fb01 fb0b 	mul.w	fp, r1, fp
 8009032:	fa1f f188 	uxth.w	r1, r8
 8009036:	fbc9 6705 	smlal	r6, r7, r9, r5
 800903a:	9e03      	ldr	r6, [sp, #12]
 800903c:	10bd      	asrs	r5, r7, #2
 800903e:	f305 050f 	ssat	r5, #16, r5
 8009042:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009046:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009048:	428d      	cmp	r5, r1
 800904a:	d90a      	bls.n	8009062 <D16_GENERIC+0xea>
 800904c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800904e:	2d01      	cmp	r5, #1
 8009050:	b2ee      	uxtb	r6, r5
 8009052:	d1ad      	bne.n	8008fb0 <D16_GENERIC+0x38>
 8009054:	9d05      	ldr	r5, [sp, #20]
 8009056:	f850 7b02 	ldr.w	r7, [r0], #2
 800905a:	2d00      	cmp	r5, #0
 800905c:	d0ae      	beq.n	8008fbc <D16_GENERIC+0x44>
 800905e:	ba7f      	rev16	r7, r7
 8009060:	e7ac      	b.n	8008fbc <D16_GENERIC+0x44>
 8009062:	2000      	movs	r0, #0
 8009064:	9906      	ldr	r1, [sp, #24]
 8009066:	61d3      	str	r3, [r2, #28]
 8009068:	9b07      	ldr	r3, [sp, #28]
 800906a:	f8c2 c008 	str.w	ip, [r2, #8]
 800906e:	60d1      	str	r1, [r2, #12]
 8009070:	6193      	str	r3, [r2, #24]
 8009072:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8009076:	b009      	add	sp, #36	; 0x24
 8009078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907c:	00030001 	.word	0x00030001
 8009080:	00010003 	.word	0x00010003
 8009084:	24000000 	.word	0x24000000

08009088 <D24_GENERIC>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009090:	b089      	sub	sp, #36	; 0x24
 8009092:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	6993      	ldr	r3, [r2, #24]
 8009098:	9104      	str	r1, [sp, #16]
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	69d1      	ldr	r1, [r2, #28]
 800909e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80090a2:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	f000 8088 	beq.w	80091bc <D24_GENERIC+0x134>
 80090ac:	f005 0620 	and.w	r6, r5, #32
 80090b0:	f005 0510 	and.w	r5, r5, #16
 80090b4:	f04f 0c00 	mov.w	ip, #0
 80090b8:	f8df e140 	ldr.w	lr, [pc, #320]	; 80091fc <D24_GENERIC+0x174>
 80090bc:	9606      	str	r6, [sp, #24]
 80090be:	9505      	str	r5, [sp, #20]
 80090c0:	e064      	b.n	800918c <D24_GENERIC+0x104>
 80090c2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80090c6:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80090ca:	f810 b007 	ldrb.w	fp, [r0, r7]
 80090ce:	042d      	lsls	r5, r5, #16
 80090d0:	19f0      	adds	r0, r6, r7
 80090d2:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80090d6:	44a9      	add	r9, r5
 80090d8:	fa5f f689 	uxtb.w	r6, r9
 80090dc:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80090e0:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80090e4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80090e8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80090ec:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80090f0:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 80090f4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80090f8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80090fc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009100:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009104:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009108:	4d3a      	ldr	r5, [pc, #232]	; (80091f4 <D24_GENERIC+0x16c>)
 800910a:	fb26 8705 	smlad	r7, r6, r5, r8
 800910e:	4d3a      	ldr	r5, [pc, #232]	; (80091f8 <D24_GENERIC+0x170>)
 8009110:	fb26 3805 	smlad	r8, r6, r5, r3
 8009114:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009118:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800911c:	2301      	movs	r3, #1
 800911e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8009122:	fb26 f603 	smuad	r6, r6, r3
 8009126:	eb0c 0903 	add.w	r9, ip, r3
 800912a:	eb0b 0306 	add.w	r3, fp, r6
 800912e:	9e05      	ldr	r6, [sp, #20]
 8009130:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009134:	b1ae      	cbz	r6, 8009162 <D24_GENERIC+0xda>
 8009136:	442c      	add	r4, r5
 8009138:	9e03      	ldr	r6, [sp, #12]
 800913a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800913e:	1ba4      	subs	r4, r4, r6
 8009140:	9503      	str	r5, [sp, #12]
 8009142:	17e7      	asrs	r7, r4, #31
 8009144:	fba4 450b 	umull	r4, r5, r4, fp
 8009148:	e9cd 4500 	strd	r4, r5, [sp]
 800914c:	fb0b 5407 	mla	r4, fp, r7, r5
 8009150:	9401      	str	r4, [sp, #4]
 8009152:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009156:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800915a:	f145 0500 	adc.w	r5, r5, #0
 800915e:	006c      	lsls	r4, r5, #1
 8009160:	4625      	mov	r5, r4
 8009162:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8009166:	03ad      	lsls	r5, r5, #14
 8009168:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800916c:	2700      	movs	r7, #0
 800916e:	fb0c fb0b 	mul.w	fp, ip, fp
 8009172:	fa1f fc89 	uxth.w	ip, r9
 8009176:	fbca 6705 	smlal	r6, r7, sl, r5
 800917a:	9e04      	ldr	r6, [sp, #16]
 800917c:	10bd      	asrs	r5, r7, #2
 800917e:	f305 050f 	ssat	r5, #16, r5
 8009182:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009186:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009188:	4565      	cmp	r5, ip
 800918a:	d917      	bls.n	80091bc <D24_GENERIC+0x134>
 800918c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800918e:	f890 9000 	ldrb.w	r9, [r0]
 8009192:	b2ef      	uxtb	r7, r5
 8009194:	2d01      	cmp	r5, #1
 8009196:	b23e      	sxth	r6, r7
 8009198:	d193      	bne.n	80090c2 <D24_GENERIC+0x3a>
 800919a:	9d06      	ldr	r5, [sp, #24]
 800919c:	b1dd      	cbz	r5, 80091d6 <D24_GENERIC+0x14e>
 800919e:	78c7      	ldrb	r7, [r0, #3]
 80091a0:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80091a4:	f01c 0f01 	tst.w	ip, #1
 80091a8:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80091ac:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80091b0:	d11a      	bne.n	80091e8 <D24_GENERIC+0x160>
 80091b2:	f890 9001 	ldrb.w	r9, [r0, #1]
 80091b6:	3002      	adds	r0, #2
 80091b8:	44b1      	add	r9, r6
 80091ba:	e78d      	b.n	80090d8 <D24_GENERIC+0x50>
 80091bc:	6093      	str	r3, [r2, #8]
 80091be:	2000      	movs	r0, #0
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	f8c2 800c 	str.w	r8, [r2, #12]
 80091c6:	6153      	str	r3, [r2, #20]
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	61d1      	str	r1, [r2, #28]
 80091cc:	6114      	str	r4, [r2, #16]
 80091ce:	6193      	str	r3, [r2, #24]
 80091d0:	b009      	add	sp, #36	; 0x24
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d6:	7845      	ldrb	r5, [r0, #1]
 80091d8:	3003      	adds	r0, #3
 80091da:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80091de:	022d      	lsls	r5, r5, #8
 80091e0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80091e4:	44a9      	add	r9, r5
 80091e6:	e777      	b.n	80090d8 <D24_GENERIC+0x50>
 80091e8:	7886      	ldrb	r6, [r0, #2]
 80091ea:	3004      	adds	r0, #4
 80091ec:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80091f0:	44a9      	add	r9, r5
 80091f2:	e771      	b.n	80090d8 <D24_GENERIC+0x50>
 80091f4:	00030001 	.word	0x00030001
 80091f8:	00060007 	.word	0x00060007
 80091fc:	24000000 	.word	0x24000000

08009200 <D32_GENERIC>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009208:	b089      	sub	sp, #36	; 0x24
 800920a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800920c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	6993      	ldr	r3, [r2, #24]
 8009212:	9104      	str	r1, [sp, #16]
 8009214:	9307      	str	r3, [sp, #28]
 8009216:	9503      	str	r5, [sp, #12]
 8009218:	69d1      	ldr	r1, [r2, #28]
 800921a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800921c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009220:	2e00      	cmp	r6, #0
 8009222:	f000 8097 	beq.w	8009354 <D32_GENERIC+0x154>
 8009226:	f005 0620 	and.w	r6, r5, #32
 800922a:	f005 0510 	and.w	r5, r5, #16
 800922e:	f04f 0e00 	mov.w	lr, #0
 8009232:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009384 <D32_GENERIC+0x184>
 8009236:	9606      	str	r6, [sp, #24]
 8009238:	9505      	str	r5, [sp, #20]
 800923a:	e079      	b.n	8009330 <D32_GENERIC+0x130>
 800923c:	783d      	ldrb	r5, [r7, #0]
 800923e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009242:	042d      	lsls	r5, r5, #16
 8009244:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009248:	f890 9000 	ldrb.w	r9, [r0]
 800924c:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8009250:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009254:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009258:	44a9      	add	r9, r5
 800925a:	fa5f f789 	uxtb.w	r7, r9
 800925e:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8009262:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009266:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800926a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800926e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009272:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8009276:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800927a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800927e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009282:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8009286:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800928a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800928e:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8009292:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009296:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800929a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800929e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80092a2:	4d34      	ldr	r5, [pc, #208]	; (8009374 <D32_GENERIC+0x174>)
 80092a4:	fb29 8805 	smlad	r8, r9, r5, r8
 80092a8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80092ac:	fb26 8705 	smlad	r7, r6, r5, r8
 80092b0:	4d31      	ldr	r5, [pc, #196]	; (8009378 <D32_GENERIC+0x178>)
 80092b2:	fb29 3305 	smlad	r3, r9, r5, r3
 80092b6:	4d31      	ldr	r5, [pc, #196]	; (800937c <D32_GENERIC+0x17c>)
 80092b8:	fb26 3805 	smlad	r8, r6, r5, r3
 80092bc:	2301      	movs	r3, #1
 80092be:	fb29 f903 	smuad	r9, r9, r3
 80092c2:	4b2f      	ldr	r3, [pc, #188]	; (8009380 <D32_GENERIC+0x180>)
 80092c4:	fb26 9303 	smlad	r3, r6, r3, r9
 80092c8:	9e05      	ldr	r6, [sp, #20]
 80092ca:	f10e 0901 	add.w	r9, lr, #1
 80092ce:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80092d2:	b1ae      	cbz	r6, 8009300 <D32_GENERIC+0x100>
 80092d4:	442c      	add	r4, r5
 80092d6:	9e02      	ldr	r6, [sp, #8]
 80092d8:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80092dc:	1ba4      	subs	r4, r4, r6
 80092de:	9502      	str	r5, [sp, #8]
 80092e0:	17e7      	asrs	r7, r4, #31
 80092e2:	fba4 450a 	umull	r4, r5, r4, sl
 80092e6:	e9cd 4500 	strd	r4, r5, [sp]
 80092ea:	fb0a 5407 	mla	r4, sl, r7, r5
 80092ee:	9401      	str	r4, [sp, #4]
 80092f0:	e9dd 4500 	ldrd	r4, r5, [sp]
 80092f4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80092f8:	f145 0500 	adc.w	r5, r5, #0
 80092fc:	006c      	lsls	r4, r5, #1
 80092fe:	4625      	mov	r5, r4
 8009300:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8009304:	036d      	lsls	r5, r5, #13
 8009306:	9f03      	ldr	r7, [sp, #12]
 8009308:	fb0e fb0a 	mul.w	fp, lr, sl
 800930c:	fa1f fe89 	uxth.w	lr, r9
 8009310:	f04f 0a00 	mov.w	sl, #0
 8009314:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009318:	9e04      	ldr	r6, [sp, #16]
 800931a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800931e:	4657      	mov	r7, sl
 8009320:	10bd      	asrs	r5, r7, #2
 8009322:	f305 050f 	ssat	r5, #16, r5
 8009326:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800932a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800932c:	4575      	cmp	r5, lr
 800932e:	d911      	bls.n	8009354 <D32_GENERIC+0x154>
 8009330:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009332:	b2ee      	uxtb	r6, r5
 8009334:	2d01      	cmp	r5, #1
 8009336:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800933a:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800933e:	f47f af7d 	bne.w	800923c <D32_GENERIC+0x3c>
 8009342:	1d05      	adds	r5, r0, #4
 8009344:	f8d0 9000 	ldr.w	r9, [r0]
 8009348:	9806      	ldr	r0, [sp, #24]
 800934a:	b180      	cbz	r0, 800936e <D32_GENERIC+0x16e>
 800934c:	fa99 f999 	rev16.w	r9, r9
 8009350:	4628      	mov	r0, r5
 8009352:	e782      	b.n	800925a <D32_GENERIC+0x5a>
 8009354:	6093      	str	r3, [r2, #8]
 8009356:	2000      	movs	r0, #0
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	f8c2 800c 	str.w	r8, [r2, #12]
 800935e:	6153      	str	r3, [r2, #20]
 8009360:	9b07      	ldr	r3, [sp, #28]
 8009362:	61d1      	str	r1, [r2, #28]
 8009364:	6114      	str	r4, [r2, #16]
 8009366:	6193      	str	r3, [r2, #24]
 8009368:	b009      	add	sp, #36	; 0x24
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	4628      	mov	r0, r5
 8009370:	e773      	b.n	800925a <D32_GENERIC+0x5a>
 8009372:	bf00      	nop
 8009374:	00060003 	.word	0x00060003
 8009378:	000a000c 	.word	0x000a000c
 800937c:	000c000a 	.word	0x000c000a
 8009380:	00030006 	.word	0x00030006
 8009384:	24000000 	.word	0x24000000

08009388 <D48_GENERIC>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	6913      	ldr	r3, [r2, #16]
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	6953      	ldr	r3, [r2, #20]
 8009396:	9104      	str	r1, [sp, #16]
 8009398:	9302      	str	r3, [sp, #8]
 800939a:	6993      	ldr	r3, [r2, #24]
 800939c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80093a0:	9307      	str	r3, [sp, #28]
 80093a2:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80093a6:	9100      	str	r1, [sp, #0]
 80093a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80093aa:	9103      	str	r1, [sp, #12]
 80093ac:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	f000 80be 	beq.w	8009530 <D48_GENERIC+0x1a8>
 80093b4:	f001 0420 	and.w	r4, r1, #32
 80093b8:	f001 0110 	and.w	r1, r1, #16
 80093bc:	f04f 0e00 	mov.w	lr, #0
 80093c0:	9105      	str	r1, [sp, #20]
 80093c2:	9406      	str	r4, [sp, #24]
 80093c4:	4962      	ldr	r1, [pc, #392]	; (8009550 <D48_GENERIC+0x1c8>)
 80093c6:	e0a0      	b.n	800950a <D48_GENERIC+0x182>
 80093c8:	eb00 0608 	add.w	r6, r0, r8
 80093cc:	f810 a008 	ldrb.w	sl, [r0, r8]
 80093d0:	f810 9005 	ldrb.w	r9, [r0, r5]
 80093d4:	5df4      	ldrb	r4, [r6, r7]
 80093d6:	443e      	add	r6, r7
 80093d8:	f890 b000 	ldrb.w	fp, [r0]
 80093dc:	0420      	lsls	r0, r4, #16
 80093de:	eb06 0408 	add.w	r4, r6, r8
 80093e2:	f816 6008 	ldrb.w	r6, [r6, r8]
 80093e6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80093ea:	f814 8007 	ldrb.w	r8, [r4, r7]
 80093ee:	4427      	add	r7, r4
 80093f0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80093f4:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80093f8:	eb0a 040b 	add.w	r4, sl, fp
 80093fc:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8009400:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8009404:	b2f7      	uxtb	r7, r6
 8009406:	b2e6      	uxtb	r6, r4
 8009408:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800940c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8009410:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8009414:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009418:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800941c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8009420:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8009424:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8009428:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800942c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009430:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8009434:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009438:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800943c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009440:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009444:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009448:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800944c:	9d00      	ldr	r5, [sp, #0]
 800944e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009452:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009456:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800945a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800945e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8009462:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009466:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800946a:	4c3a      	ldr	r4, [pc, #232]	; (8009554 <D48_GENERIC+0x1cc>)
 800946c:	fb26 5a04 	smlad	sl, r6, r4, r5
 8009470:	4c39      	ldr	r4, [pc, #228]	; (8009558 <D48_GENERIC+0x1d0>)
 8009472:	fb29 aa04 	smlad	sl, r9, r4, sl
 8009476:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800947a:	fb27 aa04 	smlad	sl, r7, r4, sl
 800947e:	4c37      	ldr	r4, [pc, #220]	; (800955c <D48_GENERIC+0x1d4>)
 8009480:	fb26 3304 	smlad	r3, r6, r4, r3
 8009484:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8009488:	fb29 3304 	smlad	r3, r9, r4, r3
 800948c:	4c34      	ldr	r4, [pc, #208]	; (8009560 <D48_GENERIC+0x1d8>)
 800948e:	fb27 3304 	smlad	r3, r7, r4, r3
 8009492:	2501      	movs	r5, #1
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	fb26 f605 	smuad	r6, r6, r5
 800949a:	4b32      	ldr	r3, [pc, #200]	; (8009564 <D48_GENERIC+0x1dc>)
 800949c:	fb29 6903 	smlad	r9, r9, r3, r6
 80094a0:	4b31      	ldr	r3, [pc, #196]	; (8009568 <D48_GENERIC+0x1e0>)
 80094a2:	fb27 9303 	smlad	r3, r7, r3, r9
 80094a6:	9c05      	ldr	r4, [sp, #20]
 80094a8:	eb0e 0805 	add.w	r8, lr, r5
 80094ac:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 80094b0:	b19c      	cbz	r4, 80094da <D48_GENERIC+0x152>
 80094b2:	9c01      	ldr	r4, [sp, #4]
 80094b4:	9d02      	ldr	r5, [sp, #8]
 80094b6:	4454      	add	r4, sl
 80094b8:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80094bc:	f8cd a008 	str.w	sl, [sp, #8]
 80094c0:	1b64      	subs	r4, r4, r5
 80094c2:	fba4 ab09 	umull	sl, fp, r4, r9
 80094c6:	17e7      	asrs	r7, r4, #31
 80094c8:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 80094cc:	fb09 bb07 	mla	fp, r9, r7, fp
 80094d0:	f14b 0500 	adc.w	r5, fp, #0
 80094d4:	006c      	lsls	r4, r5, #1
 80094d6:	46a2      	mov	sl, r4
 80094d8:	9401      	str	r4, [sp, #4]
 80094da:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80094dc:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 80094e0:	9d03      	ldr	r5, [sp, #12]
 80094e2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80094e6:	fb0e f606 	mul.w	r6, lr, r6
 80094ea:	fa1f fe88 	uxth.w	lr, r8
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	fbc5 780a 	smlal	r7, r8, r5, sl
 80094f6:	4645      	mov	r5, r8
 80094f8:	10ac      	asrs	r4, r5, #2
 80094fa:	9d04      	ldr	r5, [sp, #16]
 80094fc:	f304 040f 	ssat	r4, #16, r4
 8009500:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8009504:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009506:	4574      	cmp	r4, lr
 8009508:	d912      	bls.n	8009530 <D48_GENERIC+0x1a8>
 800950a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800950c:	b2e5      	uxtb	r5, r4
 800950e:	2c01      	cmp	r4, #1
 8009510:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8009514:	f1c5 0700 	rsb	r7, r5, #0
 8009518:	f47f af56 	bne.w	80093c8 <D48_GENERIC+0x40>
 800951c:	9d06      	ldr	r5, [sp, #24]
 800951e:	e9d0 4600 	ldrd	r4, r6, [r0]
 8009522:	3006      	adds	r0, #6
 8009524:	2d00      	cmp	r5, #0
 8009526:	f43f af6b 	beq.w	8009400 <D48_GENERIC+0x78>
 800952a:	ba64      	rev16	r4, r4
 800952c:	ba76      	rev16	r6, r6
 800952e:	e767      	b.n	8009400 <D48_GENERIC+0x78>
 8009530:	6093      	str	r3, [r2, #8]
 8009532:	2000      	movs	r0, #0
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	f8c2 c01c 	str.w	ip, [r2, #28]
 800953a:	60d3      	str	r3, [r2, #12]
 800953c:	9b01      	ldr	r3, [sp, #4]
 800953e:	6113      	str	r3, [r2, #16]
 8009540:	9b02      	ldr	r3, [sp, #8]
 8009542:	6153      	str	r3, [r2, #20]
 8009544:	9b07      	ldr	r3, [sp, #28]
 8009546:	6193      	str	r3, [r2, #24]
 8009548:	b009      	add	sp, #36	; 0x24
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	bf00      	nop
 8009550:	24000000 	.word	0x24000000
 8009554:	000f000a 	.word	0x000f000a
 8009558:	00060003 	.word	0x00060003
 800955c:	00150019 	.word	0x00150019
 8009560:	00190015 	.word	0x00190015
 8009564:	00030006 	.word	0x00030006
 8009568:	000a000f 	.word	0x000a000f

0800956c <D64_GENERIC>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	6913      	ldr	r3, [r2, #16]
 8009572:	b089      	sub	sp, #36	; 0x24
 8009574:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	6953      	ldr	r3, [r2, #20]
 800957a:	9105      	str	r1, [sp, #20]
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8009580:	6993      	ldr	r3, [r2, #24]
 8009582:	69d4      	ldr	r4, [r2, #28]
 8009584:	9307      	str	r3, [sp, #28]
 8009586:	9504      	str	r5, [sp, #16]
 8009588:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 800958c:	2900      	cmp	r1, #0
 800958e:	f000 80e8 	beq.w	8009762 <D64_GENERIC+0x1f6>
 8009592:	6a11      	ldr	r1, [r2, #32]
 8009594:	2500      	movs	r5, #0
 8009596:	46b3      	mov	fp, r6
 8009598:	9302      	str	r3, [sp, #8]
 800959a:	9106      	str	r1, [sp, #24]
 800959c:	4978      	ldr	r1, [pc, #480]	; (8009780 <D64_GENERIC+0x214>)
 800959e:	e0cc      	b.n	800973a <D64_GENERIC+0x1ce>
 80095a0:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 80095a4:	f1ce 0c00 	rsb	ip, lr, #0
 80095a8:	f890 9000 	ldrb.w	r9, [r0]
 80095ac:	eb00 0708 	add.w	r7, r0, r8
 80095b0:	f810 6008 	ldrb.w	r6, [r0, r8]
 80095b4:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 80095b8:	f817 000c 	ldrb.w	r0, [r7, ip]
 80095bc:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 80095c0:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80095c4:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80095c8:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80095cc:	f817 000c 	ldrb.w	r0, [r7, ip]
 80095d0:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80095d4:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 80095d8:	0400      	lsls	r0, r0, #16
 80095da:	4467      	add	r7, ip
 80095dc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80095e0:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80095e4:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 80095e8:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 80095ec:	444e      	add	r6, r9
 80095ee:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 80095f2:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 80095f6:	44c2      	add	sl, r8
 80095f8:	b2f7      	uxtb	r7, r6
 80095fa:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80095fe:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8009602:	0e36      	lsrs	r6, r6, #24
 8009604:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009608:	fa5f fc8a 	uxtb.w	ip, sl
 800960c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8009610:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8009614:	443c      	add	r4, r7
 8009616:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 800961a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800961e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8009622:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8009626:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800962a:	4b56      	ldr	r3, [pc, #344]	; (8009784 <D64_GENERIC+0x218>)
 800962c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8009630:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009634:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8009638:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 800963c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009640:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8009644:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8009648:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800964c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009650:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009654:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009658:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 800965c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009660:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8009664:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8009668:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800966c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009670:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8009674:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009678:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 800967c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8009680:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8009684:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8009688:	fb28 b903 	smlad	r9, r8, r3, fp
 800968c:	4b3e      	ldr	r3, [pc, #248]	; (8009788 <D64_GENERIC+0x21c>)
 800968e:	fb26 9903 	smlad	r9, r6, r3, r9
 8009692:	4b3e      	ldr	r3, [pc, #248]	; (800978c <D64_GENERIC+0x220>)
 8009694:	fb2c 9703 	smlad	r7, ip, r3, r9
 8009698:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800969c:	fb2a 7909 	smlad	r9, sl, r9, r7
 80096a0:	4f3b      	ldr	r7, [pc, #236]	; (8009790 <D64_GENERIC+0x224>)
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	fb28 3307 	smlad	r3, r8, r7, r3
 80096a8:	fb2a 3317 	smladx	r3, sl, r7, r3
 80096ac:	4f39      	ldr	r7, [pc, #228]	; (8009794 <D64_GENERIC+0x228>)
 80096ae:	fb26 3307 	smlad	r3, r6, r7, r3
 80096b2:	fb2c 3b17 	smladx	fp, ip, r7, r3
 80096b6:	f04f 0e01 	mov.w	lr, #1
 80096ba:	fb28 f80e 	smuad	r8, r8, lr
 80096be:	4b36      	ldr	r3, [pc, #216]	; (8009798 <D64_GENERIC+0x22c>)
 80096c0:	fb26 8603 	smlad	r6, r6, r3, r8
 80096c4:	4b35      	ldr	r3, [pc, #212]	; (800979c <D64_GENERIC+0x230>)
 80096c6:	fb2c 6c03 	smlad	ip, ip, r3, r6
 80096ca:	4b35      	ldr	r3, [pc, #212]	; (80097a0 <D64_GENERIC+0x234>)
 80096cc:	fb2a c303 	smlad	r3, sl, r3, ip
 80096d0:	9f06      	ldr	r7, [sp, #24]
 80096d2:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	b1cf      	cbz	r7, 800970e <D64_GENERIC+0x1a2>
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	444b      	add	r3, r9
 80096de:	461e      	mov	r6, r3
 80096e0:	9b03      	ldr	r3, [sp, #12]
 80096e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80096e6:	1af6      	subs	r6, r6, r3
 80096e8:	46b0      	mov	r8, r6
 80096ea:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80096ee:	e9cd 8900 	strd	r8, r9, [sp]
 80096f2:	fba6 8907 	umull	r8, r9, r6, r7
 80096f6:	9e01      	ldr	r6, [sp, #4]
 80096f8:	fb07 9306 	mla	r3, r7, r6, r9
 80096fc:	4646      	mov	r6, r8
 80096fe:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8009702:	f143 0700 	adc.w	r7, r3, #0
 8009706:	fa07 f30e 	lsl.w	r3, r7, lr
 800970a:	4699      	mov	r9, r3
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8009712:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800971c:	2700      	movs	r7, #0
 800971e:	fb05 fc0c 	mul.w	ip, r5, ip
 8009722:	3501      	adds	r5, #1
 8009724:	fbc3 6709 	smlal	r6, r7, r3, r9
 8009728:	9b05      	ldr	r3, [sp, #20]
 800972a:	10be      	asrs	r6, r7, #2
 800972c:	f306 060f 	ssat	r6, #16, r6
 8009730:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8009734:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009736:	42ae      	cmp	r6, r5
 8009738:	dd11      	ble.n	800975e <D64_GENERIC+0x1f2>
 800973a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800973e:	f1be 0f01 	cmp.w	lr, #1
 8009742:	f47f af2d 	bne.w	80095a0 <D64_GENERIC+0x34>
 8009746:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009748:	f100 0c08 	add.w	ip, r0, #8
 800974c:	06bb      	lsls	r3, r7, #26
 800974e:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8009752:	d513      	bpl.n	800977c <D64_GENERIC+0x210>
 8009754:	ba76      	rev16	r6, r6
 8009756:	fa9a fa9a 	rev16.w	sl, sl
 800975a:	4660      	mov	r0, ip
 800975c:	e74c      	b.n	80095f8 <D64_GENERIC+0x8c>
 800975e:	465e      	mov	r6, fp
 8009760:	9b02      	ldr	r3, [sp, #8]
 8009762:	6093      	str	r3, [r2, #8]
 8009764:	2000      	movs	r0, #0
 8009766:	9b00      	ldr	r3, [sp, #0]
 8009768:	60d6      	str	r6, [r2, #12]
 800976a:	6113      	str	r3, [r2, #16]
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	61d4      	str	r4, [r2, #28]
 8009770:	6153      	str	r3, [r2, #20]
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	6193      	str	r3, [r2, #24]
 8009776:	b009      	add	sp, #36	; 0x24
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	4660      	mov	r0, ip
 800977e:	e73b      	b.n	80095f8 <D64_GENERIC+0x8c>
 8009780:	24000000 	.word	0x24000000
 8009784:	001c0015 	.word	0x001c0015
 8009788:	000f000a 	.word	0x000f000a
 800978c:	00060003 	.word	0x00060003
 8009790:	0024002a 	.word	0x0024002a
 8009794:	002e0030 	.word	0x002e0030
 8009798:	00030006 	.word	0x00030006
 800979c:	000a000f 	.word	0x000a000f
 80097a0:	0015001c 	.word	0x0015001c

080097a4 <D80_GENERIC>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	b08b      	sub	sp, #44	; 0x2c
 80097aa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80097ac:	9107      	str	r1, [sp, #28]
 80097ae:	6911      	ldr	r1, [r2, #16]
 80097b0:	9104      	str	r1, [sp, #16]
 80097b2:	6951      	ldr	r1, [r2, #20]
 80097b4:	9105      	str	r1, [sp, #20]
 80097b6:	6991      	ldr	r1, [r2, #24]
 80097b8:	9109      	str	r1, [sp, #36]	; 0x24
 80097ba:	69d1      	ldr	r1, [r2, #28]
 80097bc:	9102      	str	r1, [sp, #8]
 80097be:	6891      	ldr	r1, [r2, #8]
 80097c0:	9103      	str	r1, [sp, #12]
 80097c2:	68d1      	ldr	r1, [r2, #12]
 80097c4:	9101      	str	r1, [sp, #4]
 80097c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80097c8:	9106      	str	r1, [sp, #24]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 810b 	beq.w	80099e6 <D80_GENERIC+0x242>
 80097d0:	6a13      	ldr	r3, [r2, #32]
 80097d2:	f04f 0800 	mov.w	r8, #0
 80097d6:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009a38 <D80_GENERIC+0x294>
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	9200      	str	r2, [sp, #0]
 80097de:	e0ee      	b.n	80099be <D80_GENERIC+0x21a>
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f890 e000 	ldrb.w	lr, [r0]
 80097e6:	b219      	sxth	r1, r3
 80097e8:	425c      	negs	r4, r3
 80097ea:	f810 9003 	ldrb.w	r9, [r0, r3]
 80097ee:	004e      	lsls	r6, r1, #1
 80097f0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80097f4:	4431      	add	r1, r6
 80097f6:	1843      	adds	r3, r0, r1
 80097f8:	f810 b001 	ldrb.w	fp, [r0, r1]
 80097fc:	1919      	adds	r1, r3, r4
 80097fe:	5d1b      	ldrb	r3, [r3, r4]
 8009800:	1948      	adds	r0, r1, r5
 8009802:	f811 a005 	ldrb.w	sl, [r1, r5]
 8009806:	041b      	lsls	r3, r3, #16
 8009808:	1907      	adds	r7, r0, r4
 800980a:	5d01      	ldrb	r1, [r0, r4]
 800980c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8009810:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8009814:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8009818:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800981c:	0409      	lsls	r1, r1, #16
 800981e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8009822:	eb0b 0905 	add.w	r9, fp, r5
 8009826:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800982a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800982e:	eb09 0b04 	add.w	fp, r9, r4
 8009832:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009836:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800983a:	4473      	add	r3, lr
 800983c:	eb0b 0006 	add.w	r0, fp, r6
 8009840:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8009844:	4439      	add	r1, r7
 8009846:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800984a:	b2df      	uxtb	r7, r3
 800984c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8009850:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8009854:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8009858:	fa5f fa81 	uxtb.w	sl, r1
 800985c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8009860:	9c02      	ldr	r4, [sp, #8]
 8009862:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8009866:	441c      	add	r4, r3
 8009868:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 800986c:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8009870:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009874:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009878:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800987c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009880:	b2ed      	uxtb	r5, r5
 8009882:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8009886:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800988a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800988e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8009892:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8009896:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800989a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800989e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80098a2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80098a6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80098aa:	0e09      	lsrs	r1, r1, #24
 80098ac:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80098b0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80098b4:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80098b8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80098bc:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80098c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80098c4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80098c8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80098cc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80098d0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80098d4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80098d8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80098dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80098e0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80098e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80098e8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80098ec:	ea4f 229a 	mov.w	r2, sl, lsr #10
 80098f0:	f3ca 0709 	ubfx	r7, sl, #0, #10
 80098f4:	9202      	str	r2, [sp, #8]
 80098f6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80098fa:	4a43      	ldr	r2, [pc, #268]	; (8009a08 <D80_GENERIC+0x264>)
 80098fc:	9f01      	ldr	r7, [sp, #4]
 80098fe:	fb23 7a02 	smlad	sl, r3, r2, r7
 8009902:	4a42      	ldr	r2, [pc, #264]	; (8009a0c <D80_GENERIC+0x268>)
 8009904:	fb26 aa02 	smlad	sl, r6, r2, sl
 8009908:	4a41      	ldr	r2, [pc, #260]	; (8009a10 <D80_GENERIC+0x26c>)
 800990a:	fb24 aa02 	smlad	sl, r4, r2, sl
 800990e:	4a41      	ldr	r2, [pc, #260]	; (8009a14 <D80_GENERIC+0x270>)
 8009910:	fb21 a702 	smlad	r7, r1, r2, sl
 8009914:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8009918:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800991c:	4a3e      	ldr	r2, [pc, #248]	; (8009a18 <D80_GENERIC+0x274>)
 800991e:	9f03      	ldr	r7, [sp, #12]
 8009920:	fb23 7e02 	smlad	lr, r3, r2, r7
 8009924:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <D80_GENERIC+0x278>)
 8009926:	fb26 ee02 	smlad	lr, r6, r2, lr
 800992a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800992e:	fb24 e707 	smlad	r7, r4, r7, lr
 8009932:	4a3b      	ldr	r2, [pc, #236]	; (8009a20 <D80_GENERIC+0x27c>)
 8009934:	fb21 7702 	smlad	r7, r1, r2, r7
 8009938:	4a3a      	ldr	r2, [pc, #232]	; (8009a24 <D80_GENERIC+0x280>)
 800993a:	fb25 7202 	smlad	r2, r5, r2, r7
 800993e:	f04f 0901 	mov.w	r9, #1
 8009942:	9201      	str	r2, [sp, #4]
 8009944:	fb23 f909 	smuad	r9, r3, r9
 8009948:	4b37      	ldr	r3, [pc, #220]	; (8009a28 <D80_GENERIC+0x284>)
 800994a:	fb26 9603 	smlad	r6, r6, r3, r9
 800994e:	4f37      	ldr	r7, [pc, #220]	; (8009a2c <D80_GENERIC+0x288>)
 8009950:	fb24 6407 	smlad	r4, r4, r7, r6
 8009954:	4f36      	ldr	r7, [pc, #216]	; (8009a30 <D80_GENERIC+0x28c>)
 8009956:	fb21 4707 	smlad	r7, r1, r7, r4
 800995a:	4936      	ldr	r1, [pc, #216]	; (8009a34 <D80_GENERIC+0x290>)
 800995c:	fb25 7301 	smlad	r3, r5, r1, r7
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8009966:	9b08      	ldr	r3, [sp, #32]
 8009968:	b193      	cbz	r3, 8009990 <D80_GENERIC+0x1ec>
 800996a:	9a04      	ldr	r2, [sp, #16]
 800996c:	4452      	add	r2, sl
 800996e:	4614      	mov	r4, r2
 8009970:	9a05      	ldr	r2, [sp, #20]
 8009972:	f8cd a014 	str.w	sl, [sp, #20]
 8009976:	1aa4      	subs	r4, r4, r2
 8009978:	fba4 1203 	umull	r1, r2, r4, r3
 800997c:	17e7      	asrs	r7, r4, #31
 800997e:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8009982:	fb03 2207 	mla	r2, r3, r7, r2
 8009986:	f142 0500 	adc.w	r5, r2, #0
 800998a:	006b      	lsls	r3, r5, #1
 800998c:	469a      	mov	sl, r3
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	9e00      	ldr	r6, [sp, #0]
 8009992:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8009996:	9a06      	ldr	r2, [sp, #24]
 8009998:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800999c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800999e:	2500      	movs	r5, #0
 80099a0:	fb08 f303 	mul.w	r3, r8, r3
 80099a4:	fbc2 450a 	smlal	r4, r5, r2, sl
 80099a8:	9a07      	ldr	r2, [sp, #28]
 80099aa:	f108 0801 	add.w	r8, r8, #1
 80099ae:	10a9      	asrs	r1, r5, #2
 80099b0:	f301 010f 	ssat	r1, #16, r1
 80099b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80099b8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80099ba:	4543      	cmp	r3, r8
 80099bc:	dd12      	ble.n	80099e4 <D80_GENERIC+0x240>
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	f47f af0c 	bne.w	80097e0 <D80_GENERIC+0x3c>
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	6885      	ldr	r5, [r0, #8]
 80099cc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80099ce:	06b2      	lsls	r2, r6, #26
 80099d0:	e9d0 3100 	ldrd	r3, r1, [r0]
 80099d4:	f100 000a 	add.w	r0, r0, #10
 80099d8:	f57f af35 	bpl.w	8009846 <D80_GENERIC+0xa2>
 80099dc:	ba5b      	rev16	r3, r3
 80099de:	ba49      	rev16	r1, r1
 80099e0:	ba6d      	rev16	r5, r5
 80099e2:	e730      	b.n	8009846 <D80_GENERIC+0xa2>
 80099e4:	4632      	mov	r2, r6
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	2000      	movs	r0, #0
 80099ea:	6093      	str	r3, [r2, #8]
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	60d3      	str	r3, [r2, #12]
 80099f0:	9b02      	ldr	r3, [sp, #8]
 80099f2:	61d3      	str	r3, [r2, #28]
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	6113      	str	r3, [r2, #16]
 80099f8:	9b05      	ldr	r3, [sp, #20]
 80099fa:	6153      	str	r3, [r2, #20]
 80099fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fe:	6193      	str	r3, [r2, #24]
 8009a00:	b00b      	add	sp, #44	; 0x2c
 8009a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a06:	bf00      	nop
 8009a08:	002d0024 	.word	0x002d0024
 8009a0c:	001c0015 	.word	0x001c0015
 8009a10:	000f000a 	.word	0x000f000a
 8009a14:	00060003 	.word	0x00060003
 8009a18:	0037003f 	.word	0x0037003f
 8009a1c:	00450049 	.word	0x00450049
 8009a20:	00490045 	.word	0x00490045
 8009a24:	003f0037 	.word	0x003f0037
 8009a28:	00030006 	.word	0x00030006
 8009a2c:	000a000f 	.word	0x000a000f
 8009a30:	0015001c 	.word	0x0015001c
 8009a34:	0024002d 	.word	0x0024002d
 8009a38:	24000000 	.word	0x24000000

08009a3c <D128_GENERIC>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	b08d      	sub	sp, #52	; 0x34
 8009a42:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009a44:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8009a48:	9109      	str	r1, [sp, #36]	; 0x24
 8009a4a:	6911      	ldr	r1, [r2, #16]
 8009a4c:	9201      	str	r2, [sp, #4]
 8009a4e:	9106      	str	r1, [sp, #24]
 8009a50:	6951      	ldr	r1, [r2, #20]
 8009a52:	9107      	str	r1, [sp, #28]
 8009a54:	6991      	ldr	r1, [r2, #24]
 8009a56:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a58:	6891      	ldr	r1, [r2, #8]
 8009a5a:	9103      	str	r1, [sp, #12]
 8009a5c:	68d1      	ldr	r1, [r2, #12]
 8009a5e:	9102      	str	r1, [sp, #8]
 8009a60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009a62:	9108      	str	r1, [sp, #32]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8183 	beq.w	8009d70 <D128_GENERIC+0x334>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6a12      	ldr	r2, [r2, #32]
 8009a6e:	4681      	mov	r9, r0
 8009a70:	920a      	str	r2, [sp, #40]	; 0x28
 8009a72:	e9cd a304 	strd	sl, r3, [sp, #16]
 8009a76:	e165      	b.n	8009d44 <D128_GENERIC+0x308>
 8009a78:	b2d2      	uxtb	r2, r2
 8009a7a:	f899 b000 	ldrb.w	fp, [r9]
 8009a7e:	b213      	sxth	r3, r2
 8009a80:	4255      	negs	r5, r2
 8009a82:	f819 0002 	ldrb.w	r0, [r9, r2]
 8009a86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009a8a:	009f      	lsls	r7, r3, #2
 8009a8c:	eb09 0402 	add.w	r4, r9, r2
 8009a90:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8009a94:	f819 8002 	ldrb.w	r8, [r9, r2]
 8009a98:	443b      	add	r3, r7
 8009a9a:	1962      	adds	r2, r4, r5
 8009a9c:	5d64      	ldrb	r4, [r4, r5]
 8009a9e:	eb02 0c03 	add.w	ip, r2, r3
 8009aa2:	0424      	lsls	r4, r4, #16
 8009aa4:	5cd3      	ldrb	r3, [r2, r3]
 8009aa6:	eb0c 0e05 	add.w	lr, ip, r5
 8009aaa:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8009aae:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8009ab2:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8009ab6:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8009aba:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8009abe:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8009ac2:	eb0c 0e06 	add.w	lr, ip, r6
 8009ac6:	f81c a006 	ldrb.w	sl, [ip, r6]
 8009aca:	0412      	lsls	r2, r2, #16
 8009acc:	445c      	add	r4, fp
 8009ace:	eb0e 0c05 	add.w	ip, lr, r5
 8009ad2:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8009ad6:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009ada:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8009ade:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009ae2:	041b      	lsls	r3, r3, #16
 8009ae4:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8009ae8:	eb00 0b06 	add.w	fp, r0, r6
 8009aec:	5d80      	ldrb	r0, [r0, r6]
 8009aee:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8009af2:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8009af6:	eb0b 0a05 	add.w	sl, fp, r5
 8009afa:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8009afe:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8009b02:	0436      	lsls	r6, r6, #16
 8009b04:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8009b08:	4442      	add	r2, r8
 8009b0a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8009b0e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8009b12:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009b16:	44b9      	add	r9, r7
 8009b18:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009b1c:	4463      	add	r3, ip
 8009b1e:	eb06 0508 	add.w	r5, r6, r8
 8009b22:	b2e7      	uxtb	r7, r4
 8009b24:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8009b28:	499b      	ldr	r1, [pc, #620]	; (8009d98 <D128_GENERIC+0x35c>)
 8009b2a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8009b2e:	0e24      	lsrs	r4, r4, #24
 8009b30:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009b34:	b2d7      	uxtb	r7, r2
 8009b36:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009b3a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8009b3e:	9904      	ldr	r1, [sp, #16]
 8009b40:	4461      	add	r1, ip
 8009b42:	468c      	mov	ip, r1
 8009b44:	4994      	ldr	r1, [pc, #592]	; (8009d98 <D128_GENERIC+0x35c>)
 8009b46:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009b4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009b4e:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8009b52:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009b56:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009b5a:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8009b5e:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8009b62:	0e12      	lsrs	r2, r2, #24
 8009b64:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009b68:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009b6c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009b70:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009b74:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009b78:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009b82:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8009b86:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009b8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009b8e:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8009b92:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009b96:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009b9a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8009b9e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009ba2:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8009ba6:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8009baa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009bae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009bb2:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009bb6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009bba:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8009bbe:	0e1b      	lsrs	r3, r3, #24
 8009bc0:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8009bc4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009bc8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8009bcc:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8009bd0:	b2eb      	uxtb	r3, r5
 8009bd2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009bd6:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8009bda:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009be2:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8009be6:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8009bea:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009bf2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009bf6:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8009bfa:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8009bfe:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009c02:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8009c06:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009c0a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009c0e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8009c12:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009c16:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8009c1a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8009c1e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8009c22:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009c26:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8009c2a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009c2e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8009c32:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009c36:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009c3a:	9104      	str	r1, [sp, #16]
 8009c3c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009c40:	9902      	ldr	r1, [sp, #8]
 8009c42:	4a56      	ldr	r2, [pc, #344]	; (8009d9c <D128_GENERIC+0x360>)
 8009c44:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009c48:	4955      	ldr	r1, [pc, #340]	; (8009da0 <D128_GENERIC+0x364>)
 8009c4a:	fb28 2201 	smlad	r2, r8, r1, r2
 8009c4e:	4955      	ldr	r1, [pc, #340]	; (8009da4 <D128_GENERIC+0x368>)
 8009c50:	fb27 2201 	smlad	r2, r7, r1, r2
 8009c54:	4954      	ldr	r1, [pc, #336]	; (8009da8 <D128_GENERIC+0x36c>)
 8009c56:	fb26 2201 	smlad	r2, r6, r1, r2
 8009c5a:	4954      	ldr	r1, [pc, #336]	; (8009dac <D128_GENERIC+0x370>)
 8009c5c:	fb24 2201 	smlad	r2, r4, r1, r2
 8009c60:	4953      	ldr	r1, [pc, #332]	; (8009db0 <D128_GENERIC+0x374>)
 8009c62:	fb20 2201 	smlad	r2, r0, r1, r2
 8009c66:	4953      	ldr	r1, [pc, #332]	; (8009db4 <D128_GENERIC+0x378>)
 8009c68:	fb23 2201 	smlad	r2, r3, r1, r2
 8009c6c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009c70:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009c74:	4950      	ldr	r1, [pc, #320]	; (8009db8 <D128_GENERIC+0x37c>)
 8009c76:	9a03      	ldr	r2, [sp, #12]
 8009c78:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009c7c:	4a4f      	ldr	r2, [pc, #316]	; (8009dbc <D128_GENERIC+0x380>)
 8009c7e:	fb28 ce02 	smlad	lr, r8, r2, ip
 8009c82:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009dd4 <D128_GENERIC+0x398>
 8009c86:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009c8a:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009dd8 <D128_GENERIC+0x39c>
 8009c8e:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8009c92:	f8df e148 	ldr.w	lr, [pc, #328]	; 8009ddc <D128_GENERIC+0x3a0>
 8009c96:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009c9a:	f8df c144 	ldr.w	ip, [pc, #324]	; 8009de0 <D128_GENERIC+0x3a4>
 8009c9e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009ca2:	f8df c140 	ldr.w	ip, [pc, #320]	; 8009de4 <D128_GENERIC+0x3a8>
 8009ca6:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009caa:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009de8 <D128_GENERIC+0x3ac>
 8009cae:	fb25 c20e 	smlad	r2, r5, lr, ip
 8009cb2:	f04f 0c01 	mov.w	ip, #1
 8009cb6:	9202      	str	r2, [sp, #8]
 8009cb8:	fb2b fb0c 	smuad	fp, fp, ip
 8009cbc:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009dec <D128_GENERIC+0x3b0>
 8009cc0:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8009cc4:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009df0 <D128_GENERIC+0x3b4>
 8009cc8:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009ccc:	4f3c      	ldr	r7, [pc, #240]	; (8009dc0 <D128_GENERIC+0x384>)
 8009cce:	fb26 bb07 	smlad	fp, r6, r7, fp
 8009cd2:	4f3c      	ldr	r7, [pc, #240]	; (8009dc4 <D128_GENERIC+0x388>)
 8009cd4:	fb24 bb07 	smlad	fp, r4, r7, fp
 8009cd8:	4f3b      	ldr	r7, [pc, #236]	; (8009dc8 <D128_GENERIC+0x38c>)
 8009cda:	fb20 bb07 	smlad	fp, r0, r7, fp
 8009cde:	4f3b      	ldr	r7, [pc, #236]	; (8009dcc <D128_GENERIC+0x390>)
 8009ce0:	fb23 bb07 	smlad	fp, r3, r7, fp
 8009ce4:	4b3a      	ldr	r3, [pc, #232]	; (8009dd0 <D128_GENERIC+0x394>)
 8009ce6:	fb25 b303 	smlad	r3, r5, r3, fp
 8009cea:	9303      	str	r3, [sp, #12]
 8009cec:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8009cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf2:	b183      	cbz	r3, 8009d16 <D128_GENERIC+0x2da>
 8009cf4:	9a06      	ldr	r2, [sp, #24]
 8009cf6:	9907      	ldr	r1, [sp, #28]
 8009cf8:	4422      	add	r2, r4
 8009cfa:	9407      	str	r4, [sp, #28]
 8009cfc:	1a52      	subs	r2, r2, r1
 8009cfe:	fba2 0103 	umull	r0, r1, r2, r3
 8009d02:	17d5      	asrs	r5, r2, #31
 8009d04:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8009d08:	fb03 1105 	mla	r1, r3, r5, r1
 8009d0c:	f141 0300 	adc.w	r3, r1, #0
 8009d10:	005b      	lsls	r3, r3, #1
 8009d12:	461c      	mov	r4, r3
 8009d14:	9306      	str	r3, [sp, #24]
 8009d16:	9d01      	ldr	r5, [sp, #4]
 8009d18:	01e4      	lsls	r4, r4, #7
 8009d1a:	9e05      	ldr	r6, [sp, #20]
 8009d1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d20:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8009d22:	2300      	movs	r3, #0
 8009d24:	9908      	ldr	r1, [sp, #32]
 8009d26:	fb06 f000 	mul.w	r0, r6, r0
 8009d2a:	3601      	adds	r6, #1
 8009d2c:	fbc1 2304 	smlal	r2, r3, r1, r4
 8009d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d32:	109b      	asrs	r3, r3, #2
 8009d34:	9605      	str	r6, [sp, #20]
 8009d36:	f303 030f 	ssat	r3, #16, r3
 8009d3a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8009d3e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8009d40:	42b3      	cmp	r3, r6
 8009d42:	dd13      	ble.n	8009d6c <D128_GENERIC+0x330>
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009d48:	2a01      	cmp	r2, #1
 8009d4a:	f47f ae95 	bne.w	8009a78 <D128_GENERIC+0x3c>
 8009d4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009d50:	f109 0610 	add.w	r6, r9, #16
 8009d54:	0681      	lsls	r1, r0, #26
 8009d56:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009d5a:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009d5e:	d518      	bpl.n	8009d92 <D128_GENERIC+0x356>
 8009d60:	ba64      	rev16	r4, r4
 8009d62:	ba52      	rev16	r2, r2
 8009d64:	ba5b      	rev16	r3, r3
 8009d66:	ba6d      	rev16	r5, r5
 8009d68:	46b1      	mov	r9, r6
 8009d6a:	e6da      	b.n	8009b22 <D128_GENERIC+0xe6>
 8009d6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	2000      	movs	r0, #0
 8009d74:	9903      	ldr	r1, [sp, #12]
 8009d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d78:	6099      	str	r1, [r3, #8]
 8009d7a:	9902      	ldr	r1, [sp, #8]
 8009d7c:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009d80:	60d9      	str	r1, [r3, #12]
 8009d82:	9906      	ldr	r1, [sp, #24]
 8009d84:	619a      	str	r2, [r3, #24]
 8009d86:	6119      	str	r1, [r3, #16]
 8009d88:	9907      	ldr	r1, [sp, #28]
 8009d8a:	6159      	str	r1, [r3, #20]
 8009d8c:	b00d      	add	sp, #52	; 0x34
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	46b1      	mov	r9, r6
 8009d94:	e6c5      	b.n	8009b22 <D128_GENERIC+0xe6>
 8009d96:	bf00      	nop
 8009d98:	24000000 	.word	0x24000000
 8009d9c:	00780069 	.word	0x00780069
 8009da0:	005b004e 	.word	0x005b004e
 8009da4:	00420037 	.word	0x00420037
 8009da8:	002d0024 	.word	0x002d0024
 8009dac:	001c0015 	.word	0x001c0015
 8009db0:	000f000a 	.word	0x000f000a
 8009db4:	00060003 	.word	0x00060003
 8009db8:	00880096 	.word	0x00880096
 8009dbc:	00a200ac 	.word	0x00a200ac
 8009dc0:	0015001c 	.word	0x0015001c
 8009dc4:	0024002d 	.word	0x0024002d
 8009dc8:	00370042 	.word	0x00370042
 8009dcc:	004e005b 	.word	0x004e005b
 8009dd0:	00690078 	.word	0x00690078
 8009dd4:	00b400ba 	.word	0x00b400ba
 8009dd8:	00be00c0 	.word	0x00be00c0
 8009ddc:	00c000be 	.word	0x00c000be
 8009de0:	00ba00b4 	.word	0x00ba00b4
 8009de4:	00ac00a2 	.word	0x00ac00a2
 8009de8:	00960088 	.word	0x00960088
 8009dec:	00030006 	.word	0x00030006
 8009df0:	000a000f 	.word	0x000a000f

08009df4 <D16_1CH_HTONS_VOL_HP>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	6993      	ldr	r3, [r2, #24]
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8009e06:	69d3      	ldr	r3, [r2, #28]
 8009e08:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8009e0c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009e10:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8009e14:	9403      	str	r4, [sp, #12]
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d054      	beq.n	8009ec4 <D16_1CH_HTONS_VOL_HP+0xd0>
 8009e1a:	f1a1 0902 	sub.w	r9, r1, #2
 8009e1e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8009e22:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009ed0 <D16_1CH_HTONS_VOL_HP+0xdc>
 8009e26:	4650      	mov	r0, sl
 8009e28:	9101      	str	r1, [sp, #4]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	f8cd b008 	str.w	fp, [sp, #8]
 8009e30:	9205      	str	r2, [sp, #20]
 8009e32:	f850 3b02 	ldr.w	r3, [r0], #2
 8009e36:	ba5b      	rev16	r3, r3
 8009e38:	b2dc      	uxtb	r4, r3
 8009e3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009e3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e42:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009e46:	4419      	add	r1, r3
 8009e48:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009e4c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009e50:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009e54:	0aa1      	lsrs	r1, r4, #10
 8009e56:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009e5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ec8 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009e5c:	fb23 5402 	smlad	r4, r3, r2, r5
 8009e60:	4a1a      	ldr	r2, [pc, #104]	; (8009ecc <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009e62:	fb23 f502 	smuad	r5, r3, r2
 8009e66:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009e6a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009e6e:	f04f 0b00 	mov.w	fp, #0
 8009e72:	19a2      	adds	r2, r4, r6
 8009e74:	eba2 020c 	sub.w	r2, r2, ip
 8009e78:	46a4      	mov	ip, r4
 8009e7a:	17d7      	asrs	r7, r2, #31
 8009e7c:	fba2 230e 	umull	r2, r3, r2, lr
 8009e80:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009e84:	fb0e 3307 	mla	r3, lr, r7, r3
 8009e88:	f143 0700 	adc.w	r7, r3, #0
 8009e8c:	9b02      	ldr	r3, [sp, #8]
 8009e8e:	047a      	lsls	r2, r7, #17
 8009e90:	007e      	lsls	r6, r7, #1
 8009e92:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009e96:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009e9a:	f303 030f 	ssat	r3, #16, r3
 8009e9e:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	4298      	cmp	r0, r3
 8009ea6:	d1c4      	bne.n	8009e32 <D16_1CH_HTONS_VOL_HP+0x3e>
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	9a05      	ldr	r2, [sp, #20]
 8009eac:	2000      	movs	r0, #0
 8009eae:	9903      	ldr	r1, [sp, #12]
 8009eb0:	61d3      	str	r3, [r2, #28]
 8009eb2:	9b04      	ldr	r3, [sp, #16]
 8009eb4:	6095      	str	r5, [r2, #8]
 8009eb6:	60d1      	str	r1, [r2, #12]
 8009eb8:	6193      	str	r3, [r2, #24]
 8009eba:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009ebe:	b007      	add	sp, #28
 8009ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	4664      	mov	r4, ip
 8009ec6:	e7f1      	b.n	8009eac <D16_1CH_HTONS_VOL_HP+0xb8>
 8009ec8:	00030001 	.word	0x00030001
 8009ecc:	00010003 	.word	0x00010003
 8009ed0:	24000000 	.word	0x24000000

08009ed4 <D24_1CH_HTONS_VOL_HP>:
 8009ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009eda:	b089      	sub	sp, #36	; 0x24
 8009edc:	6993      	ldr	r3, [r2, #24]
 8009ede:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009ee0:	9604      	str	r6, [sp, #16]
 8009ee2:	6a16      	ldr	r6, [r2, #32]
 8009ee4:	9306      	str	r3, [sp, #24]
 8009ee6:	9505      	str	r5, [sp, #20]
 8009ee8:	69d3      	ldr	r3, [r2, #28]
 8009eea:	9600      	str	r6, [sp, #0]
 8009eec:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009ef0:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	f000 8083 	beq.w	800a000 <D24_1CH_HTONS_VOL_HP+0x12c>
 8009efa:	9207      	str	r2, [sp, #28]
 8009efc:	2600      	movs	r6, #0
 8009efe:	4622      	mov	r2, r4
 8009f00:	f1a1 0b02 	sub.w	fp, r1, #2
 8009f04:	4f3f      	ldr	r7, [pc, #252]	; (800a004 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009f06:	461d      	mov	r5, r3
 8009f08:	f8cd a00c 	str.w	sl, [sp, #12]
 8009f0c:	9c00      	ldr	r4, [sp, #0]
 8009f0e:	e056      	b.n	8009fbe <D24_1CH_HTONS_VOL_HP+0xea>
 8009f10:	7841      	ldrb	r1, [r0, #1]
 8009f12:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009f16:	3002      	adds	r0, #2
 8009f18:	4488      	add	r8, r1
 8009f1a:	fa5f f388 	uxtb.w	r3, r8
 8009f1e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009f22:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009f26:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009f2a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009f2e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009f32:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009f36:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009f3a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009f3e:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009f42:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009f4a:	492f      	ldr	r1, [pc, #188]	; (800a008 <D24_1CH_HTONS_VOL_HP+0x134>)
 8009f4c:	fb23 e901 	smlad	r9, r3, r1, lr
 8009f50:	492e      	ldr	r1, [pc, #184]	; (800a00c <D24_1CH_HTONS_VOL_HP+0x138>)
 8009f52:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009f56:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009f60:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009f64:	fb23 f301 	smuad	r3, r3, r1
 8009f68:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009f6c:	eb08 0c03 	add.w	ip, r8, r3
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	f04f 0a00 	mov.w	sl, #0
 8009f76:	440a      	add	r2, r1
 8009f78:	3601      	adds	r6, #1
 8009f7a:	9103      	str	r1, [sp, #12]
 8009f7c:	1ad2      	subs	r2, r2, r3
 8009f7e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009f82:	fba2 2304 	umull	r2, r3, r2, r4
 8009f86:	e9cd 2300 	strd	r2, r3, [sp]
 8009f8a:	fb04 3309 	mla	r3, r4, r9, r3
 8009f8e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f98:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009f9c:	f143 0300 	adc.w	r3, r3, #0
 8009fa0:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009fa4:	005a      	lsls	r2, r3, #1
 8009fa6:	9b04      	ldr	r3, [sp, #16]
 8009fa8:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009fac:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009fb0:	f303 030f 	ssat	r3, #16, r3
 8009fb4:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009fb8:	9b05      	ldr	r3, [sp, #20]
 8009fba:	429e      	cmp	r6, r3
 8009fbc:	d010      	beq.n	8009fe0 <D24_1CH_HTONS_VOL_HP+0x10c>
 8009fbe:	f890 9003 	ldrb.w	r9, [r0, #3]
 8009fc2:	f016 0f01 	tst.w	r6, #1
 8009fc6:	7801      	ldrb	r1, [r0, #0]
 8009fc8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009fcc:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8009fd0:	d09e      	beq.n	8009f10 <D24_1CH_HTONS_VOL_HP+0x3c>
 8009fd2:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009fd6:	3004      	adds	r0, #4
 8009fd8:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009fdc:	4488      	add	r8, r1
 8009fde:	e79c      	b.n	8009f1a <D24_1CH_HTONS_VOL_HP+0x46>
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	462b      	mov	r3, r5
 8009fe4:	9a07      	ldr	r2, [sp, #28]
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	61d3      	str	r3, [r2, #28]
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	f8c2 c008 	str.w	ip, [r2, #8]
 8009ff0:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009ff4:	6193      	str	r3, [r2, #24]
 8009ff6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009ffa:	b009      	add	sp, #36	; 0x24
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	4651      	mov	r1, sl
 800a002:	e7f0      	b.n	8009fe6 <D24_1CH_HTONS_VOL_HP+0x112>
 800a004:	24000000 	.word	0x24000000
 800a008:	00030001 	.word	0x00030001
 800a00c:	00060007 	.word	0x00060007

0800a010 <D32_1CH_HTONS_VOL_HP>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	6993      	ldr	r3, [r2, #24]
 800a016:	b087      	sub	sp, #28
 800a018:	4683      	mov	fp, r0
 800a01a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	69d5      	ldr	r5, [r2, #28]
 800a020:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a022:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a026:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800a02a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a02e:	2800      	cmp	r0, #0
 800a030:	d077      	beq.n	800a122 <D32_1CH_HTONS_VOL_HP+0x112>
 800a032:	460f      	mov	r7, r1
 800a034:	46f1      	mov	r9, lr
 800a036:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a03a:	f8cd 8000 	str.w	r8, [sp]
 800a03e:	4e3a      	ldr	r6, [pc, #232]	; (800a128 <D32_1CH_HTONS_VOL_HP+0x118>)
 800a040:	469e      	mov	lr, r3
 800a042:	46a0      	mov	r8, r4
 800a044:	9103      	str	r1, [sp, #12]
 800a046:	9205      	str	r2, [sp, #20]
 800a048:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a04c:	ba64      	rev16	r4, r4
 800a04e:	b2e0      	uxtb	r0, r4
 800a050:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a054:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a058:	0e24      	lsrs	r4, r4, #24
 800a05a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800a05e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a062:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800a066:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a06a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 800a06e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a072:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a076:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800a07a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a07e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a082:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a086:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a08a:	f3c5 0009 	ubfx	r0, r5, #0, #10
 800a08e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800a092:	4826      	ldr	r0, [pc, #152]	; (800a12c <D32_1CH_HTONS_VOL_HP+0x11c>)
 800a094:	fb23 c400 	smlad	r4, r3, r0, ip
 800a098:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a09c:	fb21 4402 	smlad	r4, r1, r2, r4
 800a0a0:	4823      	ldr	r0, [pc, #140]	; (800a130 <D32_1CH_HTONS_VOL_HP+0x120>)
 800a0a2:	fb23 ec00 	smlad	ip, r3, r0, lr
 800a0a6:	4823      	ldr	r0, [pc, #140]	; (800a134 <D32_1CH_HTONS_VOL_HP+0x124>)
 800a0a8:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	fb23 f302 	smuad	r3, r3, r2
 800a0b2:	4821      	ldr	r0, [pc, #132]	; (800a138 <D32_1CH_HTONS_VOL_HP+0x128>)
 800a0b4:	fb21 3e00 	smlad	lr, r1, r0, r3
 800a0b8:	9b00      	ldr	r3, [sp, #0]
 800a0ba:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 800a0be:	4423      	add	r3, r4
 800a0c0:	eba3 0209 	sub.w	r2, r3, r9
 800a0c4:	46a1      	mov	r9, r4
 800a0c6:	17d1      	asrs	r1, r2, #31
 800a0c8:	fba2 230a 	umull	r2, r3, r2, sl
 800a0cc:	e9cd 2300 	strd	r2, r3, [sp]
 800a0d0:	fb0a 3301 	mla	r3, sl, r1, r3
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0da:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0e2:	f143 0300 	adc.w	r3, r3, #0
 800a0e6:	0399      	lsls	r1, r3, #14
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	fbc8 2301 	smlal	r2, r3, r8, r1
 800a0f2:	109b      	asrs	r3, r3, #2
 800a0f4:	f303 030f 	ssat	r3, #16, r3
 800a0f8:	f827 3b02 	strh.w	r3, [r7], #2
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	429f      	cmp	r7, r3
 800a100:	d1a2      	bne.n	800a048 <D32_1CH_HTONS_VOL_HP+0x38>
 800a102:	4673      	mov	r3, lr
 800a104:	f8dd 8000 	ldr.w	r8, [sp]
 800a108:	9a05      	ldr	r2, [sp, #20]
 800a10a:	6093      	str	r3, [r2, #8]
 800a10c:	2000      	movs	r0, #0
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a114:	61d5      	str	r5, [r2, #28]
 800a116:	6193      	str	r3, [r2, #24]
 800a118:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a11c:	b007      	add	sp, #28
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	4674      	mov	r4, lr
 800a124:	e7f1      	b.n	800a10a <D32_1CH_HTONS_VOL_HP+0xfa>
 800a126:	bf00      	nop
 800a128:	24000000 	.word	0x24000000
 800a12c:	00060003 	.word	0x00060003
 800a130:	000a000c 	.word	0x000a000c
 800a134:	000c000a 	.word	0x000c000a
 800a138:	00030006 	.word	0x00030006

0800a13c <D48_1CH_HTONS_VOL_HP>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a142:	b087      	sub	sp, #28
 800a144:	6993      	ldr	r3, [r2, #24]
 800a146:	9701      	str	r7, [sp, #4]
 800a148:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a14a:	6a17      	ldr	r7, [r2, #32]
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	69d6      	ldr	r6, [r2, #28]
 800a150:	9702      	str	r7, [sp, #8]
 800a152:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800a156:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	f000 8093 	beq.w	800a286 <D48_1CH_HTONS_VOL_HP+0x14a>
 800a160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a164:	f1a1 0b02 	sub.w	fp, r1, #2
 800a168:	46f2      	mov	sl, lr
 800a16a:	4f48      	ldr	r7, [pc, #288]	; (800a28c <D48_1CH_HTONS_VOL_HP+0x150>)
 800a16c:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 800a170:	469e      	mov	lr, r3
 800a172:	9205      	str	r2, [sp, #20]
 800a174:	9103      	str	r1, [sp, #12]
 800a176:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a17a:	3006      	adds	r0, #6
 800a17c:	ba5b      	rev16	r3, r3
 800a17e:	fa92 f992 	rev16.w	r9, r2
 800a182:	b2dd      	uxtb	r5, r3
 800a184:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a188:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a18c:	0e1b      	lsrs	r3, r3, #24
 800a18e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a192:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a196:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 800a19a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 800a19e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a1a2:	fa5f f289 	uxtb.w	r2, r9
 800a1a6:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 800a1aa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800a1ae:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a1b2:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800a1b6:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a1ba:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800a1be:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a1c2:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800a1c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a1ca:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a1ce:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800a1d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1d6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a1da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a1de:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800a1e2:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a1e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a1ea:	4b29      	ldr	r3, [pc, #164]	; (800a290 <D48_1CH_HTONS_VOL_HP+0x154>)
 800a1ec:	fb28 c103 	smlad	r1, r8, r3, ip
 800a1f0:	4b28      	ldr	r3, [pc, #160]	; (800a294 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a1f2:	fb25 1103 	smlad	r1, r5, r3, r1
 800a1f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1fa:	fb22 1903 	smlad	r9, r2, r3, r1
 800a1fe:	4b26      	ldr	r3, [pc, #152]	; (800a298 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a200:	fb28 ec03 	smlad	ip, r8, r3, lr
 800a204:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a208:	fb25 cc03 	smlad	ip, r5, r3, ip
 800a20c:	4b23      	ldr	r3, [pc, #140]	; (800a29c <D48_1CH_HTONS_VOL_HP+0x160>)
 800a20e:	fb22 cc03 	smlad	ip, r2, r3, ip
 800a212:	2101      	movs	r1, #1
 800a214:	fb28 f801 	smuad	r8, r8, r1
 800a218:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800a21a:	fb25 8503 	smlad	r5, r5, r3, r8
 800a21e:	4b21      	ldr	r3, [pc, #132]	; (800a2a4 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a220:	fb22 5e03 	smlad	lr, r2, r3, r5
 800a224:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800a228:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a22c:	190a      	adds	r2, r1, r4
 800a22e:	9c02      	ldr	r4, [sp, #8]
 800a230:	eba2 020a 	sub.w	r2, r2, sl
 800a234:	468a      	mov	sl, r1
 800a236:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a23a:	fba2 2304 	umull	r2, r3, r2, r4
 800a23e:	fb04 3309 	mla	r3, r4, r9, r3
 800a242:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a246:	f04f 0900 	mov.w	r9, #0
 800a24a:	f143 0500 	adc.w	r5, r3, #0
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	032a      	lsls	r2, r5, #12
 800a252:	006c      	lsls	r4, r5, #1
 800a254:	fbc3 8902 	smlal	r8, r9, r3, r2
 800a258:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a25c:	f303 030f 	ssat	r3, #16, r3
 800a260:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	4283      	cmp	r3, r0
 800a268:	d185      	bne.n	800a176 <D48_1CH_HTONS_VOL_HP+0x3a>
 800a26a:	4673      	mov	r3, lr
 800a26c:	9a05      	ldr	r2, [sp, #20]
 800a26e:	6093      	str	r3, [r2, #8]
 800a270:	2000      	movs	r0, #0
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a278:	61d6      	str	r6, [r2, #28]
 800a27a:	6193      	str	r3, [r2, #24]
 800a27c:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a280:	b007      	add	sp, #28
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	4671      	mov	r1, lr
 800a288:	e7f1      	b.n	800a26e <D48_1CH_HTONS_VOL_HP+0x132>
 800a28a:	bf00      	nop
 800a28c:	24000000 	.word	0x24000000
 800a290:	000f000a 	.word	0x000f000a
 800a294:	00060003 	.word	0x00060003
 800a298:	00150019 	.word	0x00150019
 800a29c:	00190015 	.word	0x00190015
 800a2a0:	00030006 	.word	0x00030006
 800a2a4:	000a000f 	.word	0x000a000f

0800a2a8 <D64_1CH_HTONS_VOL_HP>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a2ae:	b089      	sub	sp, #36	; 0x24
 800a2b0:	6993      	ldr	r3, [r2, #24]
 800a2b2:	4686      	mov	lr, r0
 800a2b4:	9503      	str	r5, [sp, #12]
 800a2b6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a2b8:	6a15      	ldr	r5, [r2, #32]
 800a2ba:	9306      	str	r3, [sp, #24]
 800a2bc:	69d6      	ldr	r6, [r2, #28]
 800a2be:	9504      	str	r5, [sp, #16]
 800a2c0:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800a2c4:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	f000 80a4 	beq.w	800a416 <D64_1CH_HTONS_VOL_HP+0x16e>
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	46f1      	mov	r9, lr
 800a2d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a2d6:	4d56      	ldr	r5, [pc, #344]	; (800a430 <D64_1CH_HTONS_VOL_HP+0x188>)
 800a2d8:	46a2      	mov	sl, r4
 800a2da:	469e      	mov	lr, r3
 800a2dc:	9105      	str	r1, [sp, #20]
 800a2de:	9207      	str	r2, [sp, #28]
 800a2e0:	f859 1b08 	ldr.w	r1, [r9], #8
 800a2e4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a2e8:	ba49      	rev16	r1, r1
 800a2ea:	fa93 fb93 	rev16.w	fp, r3
 800a2ee:	b2cb      	uxtb	r3, r1
 800a2f0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a2f4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a2f8:	0e09      	lsrs	r1, r1, #24
 800a2fa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a2fe:	fa5f f38b 	uxtb.w	r3, fp
 800a302:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a306:	4426      	add	r6, r4
 800a308:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800a30c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a310:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a314:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a318:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a31c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a320:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a324:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a328:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a32c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800a330:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a334:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a338:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800a33c:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800a340:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a344:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a348:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800a34c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a350:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a354:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800a358:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a35c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a364:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800a368:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800a36c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a370:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800a374:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800a378:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800a37c:	482d      	ldr	r0, [pc, #180]	; (800a434 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800a37e:	fb22 cc00 	smlad	ip, r2, r0, ip
 800a382:	482d      	ldr	r0, [pc, #180]	; (800a438 <D64_1CH_HTONS_VOL_HP+0x190>)
 800a384:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a388:	482c      	ldr	r0, [pc, #176]	; (800a43c <D64_1CH_HTONS_VOL_HP+0x194>)
 800a38a:	fb23 cc00 	smlad	ip, r3, r0, ip
 800a38e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a392:	fb2b c404 	smlad	r4, fp, r4, ip
 800a396:	482a      	ldr	r0, [pc, #168]	; (800a440 <D64_1CH_HTONS_VOL_HP+0x198>)
 800a398:	fb22 ec00 	smlad	ip, r2, r0, lr
 800a39c:	fb2b cc10 	smladx	ip, fp, r0, ip
 800a3a0:	4828      	ldr	r0, [pc, #160]	; (800a444 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a3a2:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a3a6:	fb23 cc10 	smladx	ip, r3, r0, ip
 800a3aa:	f04f 0e01 	mov.w	lr, #1
 800a3ae:	fb22 f20e 	smuad	r2, r2, lr
 800a3b2:	4825      	ldr	r0, [pc, #148]	; (800a448 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a3b4:	fb21 2100 	smlad	r1, r1, r0, r2
 800a3b8:	4a24      	ldr	r2, [pc, #144]	; (800a44c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a3ba:	fb23 1302 	smlad	r3, r3, r2, r1
 800a3be:	4a24      	ldr	r2, [pc, #144]	; (800a450 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a3c0:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800a3c4:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800a3c8:	eb04 0208 	add.w	r2, r4, r8
 800a3cc:	eba2 020a 	sub.w	r2, r2, sl
 800a3d0:	46a2      	mov	sl, r4
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	17d1      	asrs	r1, r2, #31
 800a3d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a3da:	9904      	ldr	r1, [sp, #16]
 800a3dc:	9801      	ldr	r0, [sp, #4]
 800a3de:	fba2 2301 	umull	r2, r3, r2, r1
 800a3e2:	fb01 3300 	mla	r3, r1, r0, r3
 800a3e6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800a3ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a3ee:	f143 0100 	adc.w	r1, r3, #0
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	02ca      	lsls	r2, r1, #11
 800a3f6:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a400:	108b      	asrs	r3, r1, #2
 800a402:	f303 030f 	ssat	r3, #16, r3
 800a406:	f827 3b02 	strh.w	r3, [r7], #2
 800a40a:	9b05      	ldr	r3, [sp, #20]
 800a40c:	429f      	cmp	r7, r3
 800a40e:	f47f af67 	bne.w	800a2e0 <D64_1CH_HTONS_VOL_HP+0x38>
 800a412:	4673      	mov	r3, lr
 800a414:	9a07      	ldr	r2, [sp, #28]
 800a416:	6093      	str	r3, [r2, #8]
 800a418:	2000      	movs	r0, #0
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a420:	61d6      	str	r6, [r2, #28]
 800a422:	6193      	str	r3, [r2, #24]
 800a424:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a428:	b009      	add	sp, #36	; 0x24
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	bf00      	nop
 800a430:	24000000 	.word	0x24000000
 800a434:	001c0015 	.word	0x001c0015
 800a438:	000f000a 	.word	0x000f000a
 800a43c:	00060003 	.word	0x00060003
 800a440:	0024002a 	.word	0x0024002a
 800a444:	002e0030 	.word	0x002e0030
 800a448:	00030006 	.word	0x00030006
 800a44c:	000a000f 	.word	0x000a000f
 800a450:	0015001c 	.word	0x0015001c

0800a454 <D80_1CH_HTONS_VOL_HP>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	6913      	ldr	r3, [r2, #16]
 800a45a:	b089      	sub	sp, #36	; 0x24
 800a45c:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	9603      	str	r6, [sp, #12]
 800a462:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a464:	6a16      	ldr	r6, [r2, #32]
 800a466:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800a46a:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800a46e:	9306      	str	r3, [sp, #24]
 800a470:	9604      	str	r6, [sp, #16]
 800a472:	69d3      	ldr	r3, [r2, #28]
 800a474:	2c00      	cmp	r4, #0
 800a476:	f000 80ce 	beq.w	800a616 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800a47a:	3902      	subs	r1, #2
 800a47c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a480:	4e66      	ldr	r6, [pc, #408]	; (800a61c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800a482:	469e      	mov	lr, r3
 800a484:	9102      	str	r1, [sp, #8]
 800a486:	46aa      	mov	sl, r5
 800a488:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800a48c:	9207      	str	r2, [sp, #28]
 800a48e:	9105      	str	r1, [sp, #20]
 800a490:	6883      	ldr	r3, [r0, #8]
 800a492:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a496:	300a      	adds	r0, #10
 800a498:	ba64      	rev16	r4, r4
 800a49a:	ba52      	rev16	r2, r2
 800a49c:	fa93 fb93 	rev16.w	fp, r3
 800a4a0:	b2e5      	uxtb	r5, r4
 800a4a2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a4a6:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a4aa:	0e24      	lsrs	r4, r4, #24
 800a4ac:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800a4b0:	b2d5      	uxtb	r5, r2
 800a4b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a4b6:	44c6      	add	lr, r8
 800a4b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a4bc:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800a4c0:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a4c4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a4c8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a4cc:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800a4d0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a4d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4d8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a4dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a4e0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a4e4:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a4e8:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800a4ec:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a4f0:	0e12      	lsrs	r2, r2, #24
 800a4f2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800a4f6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a4fa:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a4fe:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a502:	fa5f fb8b 	uxtb.w	fp, fp
 800a506:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a50a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a50e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800a512:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a516:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a51a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a51e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a522:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a526:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800a52a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a52e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a532:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800a536:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a53a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800a53e:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800a542:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a546:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800a54a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a54e:	4934      	ldr	r1, [pc, #208]	; (800a620 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800a550:	fb23 cc01 	smlad	ip, r3, r1, ip
 800a554:	4933      	ldr	r1, [pc, #204]	; (800a624 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800a556:	fb24 cc01 	smlad	ip, r4, r1, ip
 800a55a:	4933      	ldr	r1, [pc, #204]	; (800a628 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a55c:	fb28 cc01 	smlad	ip, r8, r1, ip
 800a560:	4932      	ldr	r1, [pc, #200]	; (800a62c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a562:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a566:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a56a:	fb2b c901 	smlad	r9, fp, r1, ip
 800a56e:	4930      	ldr	r1, [pc, #192]	; (800a630 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a570:	fb23 7701 	smlad	r7, r3, r1, r7
 800a574:	492f      	ldr	r1, [pc, #188]	; (800a634 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a576:	fb24 7701 	smlad	r7, r4, r1, r7
 800a57a:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800a57e:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800a582:	492d      	ldr	r1, [pc, #180]	; (800a638 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a584:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a588:	492c      	ldr	r1, [pc, #176]	; (800a63c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a58a:	fb2b cc01 	smlad	ip, fp, r1, ip
 800a58e:	2101      	movs	r1, #1
 800a590:	fb23 f301 	smuad	r3, r3, r1
 800a594:	492a      	ldr	r1, [pc, #168]	; (800a640 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a596:	fb24 3401 	smlad	r4, r4, r1, r3
 800a59a:	492a      	ldr	r1, [pc, #168]	; (800a644 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a59c:	fb28 4101 	smlad	r1, r8, r1, r4
 800a5a0:	4f29      	ldr	r7, [pc, #164]	; (800a648 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a5a2:	fb22 1207 	smlad	r2, r2, r7, r1
 800a5a6:	4f29      	ldr	r7, [pc, #164]	; (800a64c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a5a8:	fb2b 2707 	smlad	r7, fp, r7, r2
 800a5ac:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800a5b0:	9b01      	ldr	r3, [sp, #4]
 800a5b2:	9c04      	ldr	r4, [sp, #16]
 800a5b4:	440b      	add	r3, r1
 800a5b6:	eba3 020a 	sub.w	r2, r3, sl
 800a5ba:	468a      	mov	sl, r1
 800a5bc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a5c0:	fba2 2304 	umull	r2, r3, r2, r4
 800a5c4:	fb04 3309 	mla	r3, r4, r9, r3
 800a5c8:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a5cc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a5d0:	f143 0500 	adc.w	r5, r3, #0
 800a5d4:	006b      	lsls	r3, r5, #1
 800a5d6:	02aa      	lsls	r2, r5, #10
 800a5d8:	2500      	movs	r5, #0
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a5e2:	9a02      	ldr	r2, [sp, #8]
 800a5e4:	10ab      	asrs	r3, r5, #2
 800a5e6:	f303 030f 	ssat	r3, #16, r3
 800a5ea:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a5ee:	9b05      	ldr	r3, [sp, #20]
 800a5f0:	9202      	str	r2, [sp, #8]
 800a5f2:	4298      	cmp	r0, r3
 800a5f4:	f47f af4c 	bne.w	800a490 <D80_1CH_HTONS_VOL_HP+0x3c>
 800a5f8:	4673      	mov	r3, lr
 800a5fa:	9a07      	ldr	r2, [sp, #28]
 800a5fc:	61d3      	str	r3, [r2, #28]
 800a5fe:	2000      	movs	r0, #0
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	6097      	str	r7, [r2, #8]
 800a604:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a608:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800a60c:	9b06      	ldr	r3, [sp, #24]
 800a60e:	6193      	str	r3, [r2, #24]
 800a610:	b009      	add	sp, #36	; 0x24
 800a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a616:	4629      	mov	r1, r5
 800a618:	e7f0      	b.n	800a5fc <D80_1CH_HTONS_VOL_HP+0x1a8>
 800a61a:	bf00      	nop
 800a61c:	24000000 	.word	0x24000000
 800a620:	002d0024 	.word	0x002d0024
 800a624:	001c0015 	.word	0x001c0015
 800a628:	000f000a 	.word	0x000f000a
 800a62c:	00060003 	.word	0x00060003
 800a630:	0037003f 	.word	0x0037003f
 800a634:	00450049 	.word	0x00450049
 800a638:	00490045 	.word	0x00490045
 800a63c:	003f0037 	.word	0x003f0037
 800a640:	00030006 	.word	0x00030006
 800a644:	000a000f 	.word	0x000a000f
 800a648:	0015001c 	.word	0x0015001c
 800a64c:	0024002d 	.word	0x0024002d

0800a650 <D128_1CH_HTONS_VOL_HP>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	6914      	ldr	r4, [r2, #16]
 800a656:	b08d      	sub	sp, #52	; 0x34
 800a658:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a65a:	9404      	str	r4, [sp, #16]
 800a65c:	6954      	ldr	r4, [r2, #20]
 800a65e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a660:	9405      	str	r4, [sp, #20]
 800a662:	6994      	ldr	r4, [r2, #24]
 800a664:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a668:	940a      	str	r4, [sp, #40]	; 0x28
 800a66a:	6894      	ldr	r4, [r2, #8]
 800a66c:	9403      	str	r4, [sp, #12]
 800a66e:	68d4      	ldr	r4, [r2, #12]
 800a670:	9402      	str	r4, [sp, #8]
 800a672:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a674:	6a12      	ldr	r2, [r2, #32]
 800a676:	9407      	str	r4, [sp, #28]
 800a678:	9208      	str	r2, [sp, #32]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 812e 	beq.w	800a8dc <D128_1CH_HTONS_VOL_HP+0x28c>
 800a680:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a684:	f100 0b10 	add.w	fp, r0, #16
 800a688:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a91c <D128_1CH_HTONS_VOL_HP+0x2cc>
 800a68c:	9106      	str	r1, [sp, #24]
 800a68e:	9309      	str	r3, [sp, #36]	; 0x24
 800a690:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800a694:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800a698:	ba40      	rev16	r0, r0
 800a69a:	ba52      	rev16	r2, r2
 800a69c:	ba5b      	rev16	r3, r3
 800a69e:	ba76      	rev16	r6, r6
 800a6a0:	b2c5      	uxtb	r5, r0
 800a6a2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a6a6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a6aa:	0e00      	lsrs	r0, r0, #24
 800a6ac:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800a6b0:	b2d5      	uxtb	r5, r2
 800a6b2:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800a6b6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a6ba:	44bc      	add	ip, r7
 800a6bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6c0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800a6c4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a6c8:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800a6cc:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800a6d0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a6d4:	0e12      	lsrs	r2, r2, #24
 800a6d6:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800a6da:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a6de:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a6e2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a6e6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a6ea:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a6ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800a6f8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a6fc:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800a700:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a704:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800a708:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a70c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800a710:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a714:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800a718:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a71c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800a720:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a724:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a728:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a72c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800a730:	0e1b      	lsrs	r3, r3, #24
 800a732:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a736:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a73a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800a73e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800a742:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800a746:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a74a:	b2f3      	uxtb	r3, r6
 800a74c:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800a750:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800a754:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a758:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a75c:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a760:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800a764:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a768:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a76c:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a770:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800a774:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a778:	0e36      	lsrs	r6, r6, #24
 800a77a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a77e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a782:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800a786:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a78a:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800a78e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a792:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800a796:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800a79a:	9101      	str	r1, [sp, #4]
 800a79c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a7a6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800a7b0:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800a7b4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a7b8:	4a49      	ldr	r2, [pc, #292]	; (800a8e0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800a7ba:	fb2e 3202 	smlad	r2, lr, r2, r3
 800a7be:	4b49      	ldr	r3, [pc, #292]	; (800a8e4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800a7c0:	fb27 2203 	smlad	r2, r7, r3, r2
 800a7c4:	4b48      	ldr	r3, [pc, #288]	; (800a8e8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800a7c6:	fb25 2203 	smlad	r2, r5, r3, r2
 800a7ca:	4b48      	ldr	r3, [pc, #288]	; (800a8ec <D128_1CH_HTONS_VOL_HP+0x29c>)
 800a7cc:	fb24 2203 	smlad	r2, r4, r3, r2
 800a7d0:	4b47      	ldr	r3, [pc, #284]	; (800a8f0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800a7d2:	fb20 2803 	smlad	r8, r0, r3, r2
 800a7d6:	4b47      	ldr	r3, [pc, #284]	; (800a8f4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800a7d8:	9a01      	ldr	r2, [sp, #4]
 800a7da:	fb22 8203 	smlad	r2, r2, r3, r8
 800a7de:	4b46      	ldr	r3, [pc, #280]	; (800a8f8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800a7e0:	9102      	str	r1, [sp, #8]
 800a7e2:	fb21 2203 	smlad	r2, r1, r3, r2
 800a7e6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a7ea:	fb26 2308 	smlad	r3, r6, r8, r2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	9a03      	ldr	r2, [sp, #12]
 800a7f2:	4b42      	ldr	r3, [pc, #264]	; (800a8fc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800a7f4:	fb2e 2803 	smlad	r8, lr, r3, r2
 800a7f8:	4b41      	ldr	r3, [pc, #260]	; (800a900 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800a7fa:	fb27 8a03 	smlad	sl, r7, r3, r8
 800a7fe:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a920 <D128_1CH_HTONS_VOL_HP+0x2d0>
 800a802:	fb25 a808 	smlad	r8, r5, r8, sl
 800a806:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a924 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800a80a:	fb24 880a 	smlad	r8, r4, sl, r8
 800a80e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a928 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800a812:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800a816:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a92c <D128_1CH_HTONS_VOL_HP+0x2dc>
 800a81a:	9b01      	ldr	r3, [sp, #4]
 800a81c:	fb23 aa08 	smlad	sl, r3, r8, sl
 800a820:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800a930 <D128_1CH_HTONS_VOL_HP+0x2e0>
 800a824:	9a02      	ldr	r2, [sp, #8]
 800a826:	fb22 a808 	smlad	r8, r2, r8, sl
 800a82a:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a934 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800a82e:	fb26 830a 	smlad	r3, r6, sl, r8
 800a832:	f04f 0801 	mov.w	r8, #1
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	fb2e fe08 	smuad	lr, lr, r8
 800a83c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a938 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800a840:	fb27 ee08 	smlad	lr, r7, r8, lr
 800a844:	4f2f      	ldr	r7, [pc, #188]	; (800a904 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800a846:	fb25 ee07 	smlad	lr, r5, r7, lr
 800a84a:	4f2f      	ldr	r7, [pc, #188]	; (800a908 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800a84c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a850:	4f2e      	ldr	r7, [pc, #184]	; (800a90c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800a852:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a856:	4f2e      	ldr	r7, [pc, #184]	; (800a910 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800a858:	9b01      	ldr	r3, [sp, #4]
 800a85a:	fb23 ee07 	smlad	lr, r3, r7, lr
 800a85e:	4f2d      	ldr	r7, [pc, #180]	; (800a914 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800a860:	fb22 e707 	smlad	r7, r2, r7, lr
 800a864:	4b2c      	ldr	r3, [pc, #176]	; (800a918 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a866:	fb26 7303 	smlad	r3, r6, r3, r7
 800a86a:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800a86e:	9303      	str	r3, [sp, #12]
 800a870:	9b04      	ldr	r3, [sp, #16]
 800a872:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a876:	9f08      	ldr	r7, [sp, #32]
 800a878:	2100      	movs	r1, #0
 800a87a:	4433      	add	r3, r6
 800a87c:	f10b 0b10 	add.w	fp, fp, #16
 800a880:	461a      	mov	r2, r3
 800a882:	9b05      	ldr	r3, [sp, #20]
 800a884:	9605      	str	r6, [sp, #20]
 800a886:	1ad2      	subs	r2, r2, r3
 800a888:	17d5      	asrs	r5, r2, #31
 800a88a:	fba2 2307 	umull	r2, r3, r2, r7
 800a88e:	1814      	adds	r4, r2, r0
 800a890:	fb07 3305 	mla	r3, r7, r5, r3
 800a894:	eb43 0501 	adc.w	r5, r3, r1
 800a898:	006b      	lsls	r3, r5, #1
 800a89a:	022a      	lsls	r2, r5, #8
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	9b07      	ldr	r3, [sp, #28]
 800a8a0:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a8a4:	9a06      	ldr	r2, [sp, #24]
 800a8a6:	108b      	asrs	r3, r1, #2
 800a8a8:	f303 030f 	ssat	r3, #16, r3
 800a8ac:	f822 3b02 	strh.w	r3, [r2], #2
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	9206      	str	r2, [sp, #24]
 800a8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	f47f aeea 	bne.w	800a690 <D128_1CH_HTONS_VOL_HP+0x40>
 800a8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8be:	2000      	movs	r0, #0
 800a8c0:	9903      	ldr	r1, [sp, #12]
 800a8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8c4:	6099      	str	r1, [r3, #8]
 800a8c6:	9902      	ldr	r1, [sp, #8]
 800a8c8:	f8c3 c01c 	str.w	ip, [r3, #28]
 800a8cc:	60d9      	str	r1, [r3, #12]
 800a8ce:	9904      	ldr	r1, [sp, #16]
 800a8d0:	619a      	str	r2, [r3, #24]
 800a8d2:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800a8d6:	b00d      	add	sp, #52	; 0x34
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	9e05      	ldr	r6, [sp, #20]
 800a8de:	e7ed      	b.n	800a8bc <D128_1CH_HTONS_VOL_HP+0x26c>
 800a8e0:	00780069 	.word	0x00780069
 800a8e4:	005b004e 	.word	0x005b004e
 800a8e8:	00420037 	.word	0x00420037
 800a8ec:	002d0024 	.word	0x002d0024
 800a8f0:	001c0015 	.word	0x001c0015
 800a8f4:	000f000a 	.word	0x000f000a
 800a8f8:	00060003 	.word	0x00060003
 800a8fc:	00880096 	.word	0x00880096
 800a900:	00a200ac 	.word	0x00a200ac
 800a904:	000a000f 	.word	0x000a000f
 800a908:	0015001c 	.word	0x0015001c
 800a90c:	0024002d 	.word	0x0024002d
 800a910:	00370042 	.word	0x00370042
 800a914:	004e005b 	.word	0x004e005b
 800a918:	00690078 	.word	0x00690078
 800a91c:	24000000 	.word	0x24000000
 800a920:	00b400ba 	.word	0x00b400ba
 800a924:	00be00c0 	.word	0x00be00c0
 800a928:	00c000be 	.word	0x00c000be
 800a92c:	00ba00b4 	.word	0x00ba00b4
 800a930:	00ac00a2 	.word	0x00ac00a2
 800a934:	00960088 	.word	0x00960088
 800a938:	00030006 	.word	0x00030006

0800a93c <PDM_Filter_Init>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	2240      	movs	r2, #64	; 0x40
 800a940:	2100      	movs	r1, #0
 800a942:	4604      	mov	r4, r0
 800a944:	300c      	adds	r0, #12
 800a946:	f000 f9ed 	bl	800ad24 <memset>
 800a94a:	4a56      	ldr	r2, [pc, #344]	; (800aaa4 <PDM_Filter_Init+0x168>)
 800a94c:	4856      	ldr	r0, [pc, #344]	; (800aaa8 <PDM_Filter_Init+0x16c>)
 800a94e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	f24c 2540 	movw	r5, #49728	; 0xc240
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	6803      	ldr	r3, [r0, #0]
 800a960:	400b      	ands	r3, r1
 800a962:	42ab      	cmp	r3, r5
 800a964:	d040      	beq.n	800a9e8 <PDM_Filter_Init+0xac>
 800a966:	6803      	ldr	r3, [r0, #0]
 800a968:	f24c 2270 	movw	r2, #49776	; 0xc270
 800a96c:	4019      	ands	r1, r3
 800a96e:	4291      	cmp	r1, r2
 800a970:	d03a      	beq.n	800a9e8 <PDM_Filter_Init+0xac>
 800a972:	4b4e      	ldr	r3, [pc, #312]	; (800aaac <PDM_Filter_Init+0x170>)
 800a974:	2101      	movs	r1, #1
 800a976:	461a      	mov	r2, r3
 800a978:	6019      	str	r1, [r3, #0]
 800a97a:	6813      	ldr	r3, [r2, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1fc      	bne.n	800a97a <PDM_Filter_Init+0x3e>
 800a980:	4b4b      	ldr	r3, [pc, #300]	; (800aab0 <PDM_Filter_Init+0x174>)
 800a982:	494c      	ldr	r1, [pc, #304]	; (800aab4 <PDM_Filter_Init+0x178>)
 800a984:	4a4c      	ldr	r2, [pc, #304]	; (800aab8 <PDM_Filter_Init+0x17c>)
 800a986:	6019      	str	r1, [r3, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	8820      	ldrh	r0, [r4, #0]
 800a98c:	4293      	cmp	r3, r2
 800a98e:	8961      	ldrh	r1, [r4, #10]
 800a990:	f04f 0300 	mov.w	r3, #0
 800a994:	8922      	ldrh	r2, [r4, #8]
 800a996:	bf14      	ite	ne
 800a998:	2500      	movne	r5, #0
 800a99a:	4d47      	ldreq	r5, [pc, #284]	; (800aab8 <PDM_Filter_Init+0x17c>)
 800a99c:	2801      	cmp	r0, #1
 800a99e:	61a3      	str	r3, [r4, #24]
 800a9a0:	6465      	str	r5, [r4, #68]	; 0x44
 800a9a2:	60e3      	str	r3, [r4, #12]
 800a9a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a9a6:	6423      	str	r3, [r4, #64]	; 0x40
 800a9a8:	86a1      	strh	r1, [r4, #52]	; 0x34
 800a9aa:	86e2      	strh	r2, [r4, #54]	; 0x36
 800a9ac:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a9b0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a9b4:	d936      	bls.n	800aa24 <PDM_Filter_Init+0xe8>
 800a9b6:	2003      	movs	r0, #3
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	8862      	ldrh	r2, [r4, #2]
 800a9bc:	2a01      	cmp	r2, #1
 800a9be:	d92e      	bls.n	800aa1e <PDM_Filter_Init+0xe2>
 800a9c0:	2140      	movs	r1, #64	; 0x40
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a9c6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800a9ca:	d101      	bne.n	800a9d0 <PDM_Filter_Init+0x94>
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	6421      	str	r1, [r4, #64]	; 0x40
 800a9d0:	6862      	ldr	r2, [r4, #4]
 800a9d2:	b11a      	cbz	r2, 800a9dc <PDM_Filter_Init+0xa0>
 800a9d4:	f043 0310 	orr.w	r3, r3, #16
 800a9d8:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a9da:	6423      	str	r3, [r4, #64]	; 0x40
 800a9dc:	2200      	movs	r2, #0
 800a9de:	8722      	strh	r2, [r4, #56]	; 0x38
 800a9e0:	b908      	cbnz	r0, 800a9e6 <PDM_Filter_Init+0xaa>
 800a9e2:	3380      	adds	r3, #128	; 0x80
 800a9e4:	6423      	str	r3, [r4, #64]	; 0x40
 800a9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e8:	4b34      	ldr	r3, [pc, #208]	; (800aabc <PDM_Filter_Init+0x180>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1c0      	bne.n	800a972 <PDM_Filter_Init+0x36>
 800a9f0:	4a33      	ldr	r2, [pc, #204]	; (800aac0 <PDM_Filter_Init+0x184>)
 800a9f2:	6813      	ldr	r3, [r2, #0]
 800a9f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a9fc:	d006      	beq.n	800aa0c <PDM_Filter_Init+0xd0>
 800a9fe:	6813      	ldr	r3, [r2, #0]
 800aa00:	f240 4283 	movw	r2, #1155	; 0x483
 800aa04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d1b2      	bne.n	800a972 <PDM_Filter_Init+0x36>
 800aa0c:	4b2d      	ldr	r3, [pc, #180]	; (800aac4 <PDM_Filter_Init+0x188>)
 800aa0e:	2101      	movs	r1, #1
 800aa10:	461a      	mov	r2, r3
 800aa12:	6019      	str	r1, [r3, #0]
 800aa14:	6813      	ldr	r3, [r2, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1fc      	bne.n	800aa14 <PDM_Filter_Init+0xd8>
 800aa1a:	4b2b      	ldr	r3, [pc, #172]	; (800aac8 <PDM_Filter_Init+0x18c>)
 800aa1c:	e7b1      	b.n	800a982 <PDM_Filter_Init+0x46>
 800aa1e:	d03a      	beq.n	800aa96 <PDM_Filter_Init+0x15a>
 800aa20:	4618      	mov	r0, r3
 800aa22:	e7cd      	b.n	800a9c0 <PDM_Filter_Init+0x84>
 800aa24:	4d29      	ldr	r5, [pc, #164]	; (800aacc <PDM_Filter_Init+0x190>)
 800aa26:	782a      	ldrb	r2, [r5, #0]
 800aa28:	d01b      	beq.n	800aa62 <PDM_Filter_Init+0x126>
 800aa2a:	2a01      	cmp	r2, #1
 800aa2c:	d001      	beq.n	800aa32 <PDM_Filter_Init+0xf6>
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e7c3      	b.n	800a9ba <PDM_Filter_Init+0x7e>
 800aa32:	4927      	ldr	r1, [pc, #156]	; (800aad0 <PDM_Filter_Init+0x194>)
 800aa34:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800aad8 <PDM_Filter_Init+0x19c>
 800aa38:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800aa3c:	4e25      	ldr	r6, [pc, #148]	; (800aad4 <PDM_Filter_Init+0x198>)
 800aa3e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800aa42:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800aa46:	ea02 0006 	and.w	r0, r2, r6
 800aa4a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800aa4e:	428f      	cmp	r7, r1
 800aa50:	ea43 0300 	orr.w	r3, r3, r0
 800aa54:	4413      	add	r3, r2
 800aa56:	600b      	str	r3, [r1, #0]
 800aa58:	d1f1      	bne.n	800aa3e <PDM_Filter_Init+0x102>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	702b      	strb	r3, [r5, #0]
 800aa60:	e7ab      	b.n	800a9ba <PDM_Filter_Init+0x7e>
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	d1a9      	bne.n	800a9ba <PDM_Filter_Init+0x7e>
 800aa66:	491a      	ldr	r1, [pc, #104]	; (800aad0 <PDM_Filter_Init+0x194>)
 800aa68:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800aad8 <PDM_Filter_Init+0x19c>
 800aa6c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800aa70:	4e18      	ldr	r6, [pc, #96]	; (800aad4 <PDM_Filter_Init+0x198>)
 800aa72:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800aa76:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800aa7a:	ea02 0006 	and.w	r0, r2, r6
 800aa7e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800aa82:	428f      	cmp	r7, r1
 800aa84:	ea43 0300 	orr.w	r3, r3, r0
 800aa88:	4413      	add	r3, r2
 800aa8a:	600b      	str	r3, [r1, #0]
 800aa8c:	d1f1      	bne.n	800aa72 <PDM_Filter_Init+0x136>
 800aa8e:	2001      	movs	r0, #1
 800aa90:	2300      	movs	r3, #0
 800aa92:	7028      	strb	r0, [r5, #0]
 800aa94:	e791      	b.n	800a9ba <PDM_Filter_Init+0x7e>
 800aa96:	2220      	movs	r2, #32
 800aa98:	4618      	mov	r0, r3
 800aa9a:	2160      	movs	r1, #96	; 0x60
 800aa9c:	6422      	str	r2, [r4, #64]	; 0x40
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	e790      	b.n	800a9c4 <PDM_Filter_Init+0x88>
 800aaa2:	bf00      	nop
 800aaa4:	e0002000 	.word	0xe0002000
 800aaa8:	e000ed00 	.word	0xe000ed00
 800aaac:	40023008 	.word	0x40023008
 800aab0:	40023000 	.word	0x40023000
 800aab4:	f407a5c2 	.word	0xf407a5c2
 800aab8:	b5e8b5cd 	.word	0xb5e8b5cd
 800aabc:	e0042000 	.word	0xe0042000
 800aac0:	5c001000 	.word	0x5c001000
 800aac4:	58024c08 	.word	0x58024c08
 800aac8:	58024c00 	.word	0x58024c00
 800aacc:	24000498 	.word	0x24000498
 800aad0:	23fffffc 	.word	0x23fffffc
 800aad4:	000ffc00 	.word	0x000ffc00
 800aad8:	3ff00000 	.word	0x3ff00000

0800aadc <PDM_Filter_setConfig>:
 800aadc:	4b67      	ldr	r3, [pc, #412]	; (800ac7c <PDM_Filter_setConfig+0x1a0>)
 800aade:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d128      	bne.n	800ab36 <PDM_Filter_setConfig+0x5a>
 800aae4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800aae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aae8:	880e      	ldrh	r6, [r1, #0]
 800aaea:	460d      	mov	r5, r1
 800aaec:	4604      	mov	r4, r0
 800aaee:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800aaf2:	1e73      	subs	r3, r6, #1
 800aaf4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800aaf8:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800aafc:	2b06      	cmp	r3, #6
 800aafe:	ed2d 8b02 	vpush	{d8}
 800ab02:	6421      	str	r1, [r4, #64]	; 0x40
 800ab04:	b083      	sub	sp, #12
 800ab06:	d820      	bhi.n	800ab4a <PDM_Filter_setConfig+0x6e>
 800ab08:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ab0a:	42b3      	cmp	r3, r6
 800ab0c:	d03d      	beq.n	800ab8a <PDM_Filter_setConfig+0xae>
 800ab0e:	4b5c      	ldr	r3, [pc, #368]	; (800ac80 <PDM_Filter_setConfig+0x1a4>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	4333      	orrs	r3, r6
 800ab14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ab18:	6423      	str	r3, [r4, #64]	; 0x40
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	2a70      	cmp	r2, #112	; 0x70
 800ab20:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ab24:	d009      	beq.n	800ab3a <PDM_Filter_setConfig+0x5e>
 800ab26:	2b06      	cmp	r3, #6
 800ab28:	d824      	bhi.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ab2a:	e8df f003 	tbb	[pc, r3]
 800ab2e:	878a      	.short	0x878a
 800ab30:	7b7e8184 	.word	0x7b7e8184
 800ab34:	78          	.byte	0x78
 800ab35:	00          	.byte	0x00
 800ab36:	2004      	movs	r0, #4
 800ab38:	4770      	bx	lr
 800ab3a:	2b06      	cmp	r3, #6
 800ab3c:	d81a      	bhi.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ab3e:	e8df f003 	tbb	[pc, r3]
 800ab42:	8f92      	.short	0x8f92
 800ab44:	8617898c 	.word	0x8617898c
 800ab48:	83          	.byte	0x83
 800ab49:	00          	.byte	0x00
 800ab4a:	4287      	cmp	r7, r0
 800ab4c:	f000 808e 	beq.w	800ac6c <PDM_Filter_setConfig+0x190>
 800ab50:	f117 0f0c 	cmn.w	r7, #12
 800ab54:	f04f 0008 	mov.w	r0, #8
 800ab58:	da11      	bge.n	800ab7e <PDM_Filter_setConfig+0xa2>
 800ab5a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ab5e:	3040      	adds	r0, #64	; 0x40
 800ab60:	80ab      	strh	r3, [r5, #4]
 800ab62:	886b      	ldrh	r3, [r5, #2]
 800ab64:	8626      	strh	r6, [r4, #48]	; 0x30
 800ab66:	8663      	strh	r3, [r4, #50]	; 0x32
 800ab68:	b003      	add	sp, #12
 800ab6a:	ecbd 8b02 	vpop	{d8}
 800ab6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab70:	4b44      	ldr	r3, [pc, #272]	; (800ac84 <PDM_Filter_setConfig+0x1a8>)
 800ab72:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab74:	f117 0f0c 	cmn.w	r7, #12
 800ab78:	f04f 0000 	mov.w	r0, #0
 800ab7c:	dbed      	blt.n	800ab5a <PDM_Filter_setConfig+0x7e>
 800ab7e:	2f33      	cmp	r7, #51	; 0x33
 800ab80:	dd10      	ble.n	800aba4 <PDM_Filter_setConfig+0xc8>
 800ab82:	2333      	movs	r3, #51	; 0x33
 800ab84:	3040      	adds	r0, #64	; 0x40
 800ab86:	80ab      	strh	r3, [r5, #4]
 800ab88:	e7eb      	b.n	800ab62 <PDM_Filter_setConfig+0x86>
 800ab8a:	4287      	cmp	r7, r0
 800ab8c:	d1f2      	bne.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ab8e:	886b      	ldrh	r3, [r5, #2]
 800ab90:	8663      	strh	r3, [r4, #50]	; 0x32
 800ab92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab94:	2000      	movs	r0, #0
 800ab96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab9a:	6423      	str	r3, [r4, #64]	; 0x40
 800ab9c:	b003      	add	sp, #12
 800ab9e:	ecbd 8b02 	vpop	{d8}
 800aba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aba6:	f003 030f 	and.w	r3, r3, #15
 800abaa:	3b01      	subs	r3, #1
 800abac:	2b06      	cmp	r3, #6
 800abae:	d831      	bhi.n	800ac14 <PDM_Filter_setConfig+0x138>
 800abb0:	4a35      	ldr	r2, [pc, #212]	; (800ac88 <PDM_Filter_setConfig+0x1ac>)
 800abb2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800abb6:	eddf 0a35 	vldr	s1, [pc, #212]	; 800ac8c <PDM_Filter_setConfig+0x1b0>
 800abba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abbe:	9001      	str	r0, [sp, #4]
 800abc0:	edd3 7a07 	vldr	s15, [r3, #28]
 800abc4:	ed93 8a00 	vldr	s16, [r3]
 800abc8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800abcc:	f000 f8cc 	bl	800ad68 <powf>
 800abd0:	eef0 8a40 	vmov.f32	s17, s0
 800abd4:	9801      	ldr	r0, [sp, #4]
 800abd6:	ee07 7a90 	vmov	s15, r7
 800abda:	ee28 8a28 	vmul.f32	s16, s16, s17
 800abde:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800abe2:	9001      	str	r0, [sp, #4]
 800abe4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800abe8:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ac90 <PDM_Filter_setConfig+0x1b4>
 800abec:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800abf0:	f000 f8ba 	bl	800ad68 <powf>
 800abf4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800abf8:	886b      	ldrh	r3, [r5, #2]
 800abfa:	9801      	ldr	r0, [sp, #4]
 800abfc:	feb8 8a48 	vrinta.f32	s16, s16
 800ac00:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800ac04:	8727      	strh	r7, [r4, #56]	; 0x38
 800ac06:	8663      	strh	r3, [r4, #50]	; 0x32
 800ac08:	8626      	strh	r6, [r4, #48]	; 0x30
 800ac0a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d0bf      	beq.n	800ab92 <PDM_Filter_setConfig+0xb6>
 800ac12:	e7a9      	b.n	800ab68 <PDM_Filter_setConfig+0x8c>
 800ac14:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800ac94 <PDM_Filter_setConfig+0x1b8>
 800ac18:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800ac98 <PDM_Filter_setConfig+0x1bc>
 800ac1c:	e7db      	b.n	800abd6 <PDM_Filter_setConfig+0xfa>
 800ac1e:	4b1f      	ldr	r3, [pc, #124]	; (800ac9c <PDM_Filter_setConfig+0x1c0>)
 800ac20:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac22:	e7a7      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac24:	4b1e      	ldr	r3, [pc, #120]	; (800aca0 <PDM_Filter_setConfig+0x1c4>)
 800ac26:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac28:	e7a4      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <PDM_Filter_setConfig+0x1c8>)
 800ac2c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac2e:	e7a1      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac30:	4b1d      	ldr	r3, [pc, #116]	; (800aca8 <PDM_Filter_setConfig+0x1cc>)
 800ac32:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac34:	e79e      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac36:	4b1d      	ldr	r3, [pc, #116]	; (800acac <PDM_Filter_setConfig+0x1d0>)
 800ac38:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac3a:	e79b      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac3c:	4b1c      	ldr	r3, [pc, #112]	; (800acb0 <PDM_Filter_setConfig+0x1d4>)
 800ac3e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac40:	e798      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <PDM_Filter_setConfig+0x1d8>)
 800ac44:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac46:	e795      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac48:	4b1b      	ldr	r3, [pc, #108]	; (800acb8 <PDM_Filter_setConfig+0x1dc>)
 800ac4a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac4c:	e792      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac4e:	4b1b      	ldr	r3, [pc, #108]	; (800acbc <PDM_Filter_setConfig+0x1e0>)
 800ac50:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac52:	e78f      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac54:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <PDM_Filter_setConfig+0x1e4>)
 800ac56:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac58:	e78c      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac5a:	4b1a      	ldr	r3, [pc, #104]	; (800acc4 <PDM_Filter_setConfig+0x1e8>)
 800ac5c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac5e:	e789      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac60:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <PDM_Filter_setConfig+0x1ec>)
 800ac62:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac64:	e786      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac66:	4b19      	ldr	r3, [pc, #100]	; (800accc <PDM_Filter_setConfig+0x1f0>)
 800ac68:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac6a:	e783      	b.n	800ab74 <PDM_Filter_setConfig+0x98>
 800ac6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ac6e:	42b3      	cmp	r3, r6
 800ac70:	f47f af6e 	bne.w	800ab50 <PDM_Filter_setConfig+0x74>
 800ac74:	886b      	ldrh	r3, [r5, #2]
 800ac76:	2008      	movs	r0, #8
 800ac78:	8663      	strh	r3, [r4, #50]	; 0x32
 800ac7a:	e775      	b.n	800ab68 <PDM_Filter_setConfig+0x8c>
 800ac7c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ac80:	fffffef0 	.word	0xfffffef0
 800ac84:	08009df5 	.word	0x08009df5
 800ac88:	0800b150 	.word	0x0800b150
 800ac8c:	42000000 	.word	0x42000000
 800ac90:	3d4ccccd 	.word	0x3d4ccccd
 800ac94:	4f800000 	.word	0x4f800000
 800ac98:	00000000 	.word	0x00000000
 800ac9c:	08009201 	.word	0x08009201
 800aca0:	08009089 	.word	0x08009089
 800aca4:	08008f79 	.word	0x08008f79
 800aca8:	08009a3d 	.word	0x08009a3d
 800acac:	080097a5 	.word	0x080097a5
 800acb0:	0800956d 	.word	0x0800956d
 800acb4:	08009389 	.word	0x08009389
 800acb8:	0800a011 	.word	0x0800a011
 800acbc:	08009ed5 	.word	0x08009ed5
 800acc0:	0800a651 	.word	0x0800a651
 800acc4:	0800a455 	.word	0x0800a455
 800acc8:	0800a2a9 	.word	0x0800a2a9
 800accc:	0800a13d 	.word	0x0800a13d

0800acd0 <__errno>:
 800acd0:	4b01      	ldr	r3, [pc, #4]	; (800acd8 <__errno+0x8>)
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	24000418 	.word	0x24000418

0800acdc <__libc_init_array>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	4d0d      	ldr	r5, [pc, #52]	; (800ad14 <__libc_init_array+0x38>)
 800ace0:	4c0d      	ldr	r4, [pc, #52]	; (800ad18 <__libc_init_array+0x3c>)
 800ace2:	1b64      	subs	r4, r4, r5
 800ace4:	10a4      	asrs	r4, r4, #2
 800ace6:	2600      	movs	r6, #0
 800ace8:	42a6      	cmp	r6, r4
 800acea:	d109      	bne.n	800ad00 <__libc_init_array+0x24>
 800acec:	4d0b      	ldr	r5, [pc, #44]	; (800ad1c <__libc_init_array+0x40>)
 800acee:	4c0c      	ldr	r4, [pc, #48]	; (800ad20 <__libc_init_array+0x44>)
 800acf0:	f000 f9e6 	bl	800b0c0 <_init>
 800acf4:	1b64      	subs	r4, r4, r5
 800acf6:	10a4      	asrs	r4, r4, #2
 800acf8:	2600      	movs	r6, #0
 800acfa:	42a6      	cmp	r6, r4
 800acfc:	d105      	bne.n	800ad0a <__libc_init_array+0x2e>
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad04:	4798      	blx	r3
 800ad06:	3601      	adds	r6, #1
 800ad08:	e7ee      	b.n	800ace8 <__libc_init_array+0xc>
 800ad0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad0e:	4798      	blx	r3
 800ad10:	3601      	adds	r6, #1
 800ad12:	e7f2      	b.n	800acfa <__libc_init_array+0x1e>
 800ad14:	0800b418 	.word	0x0800b418
 800ad18:	0800b418 	.word	0x0800b418
 800ad1c:	0800b418 	.word	0x0800b418
 800ad20:	0800b41c 	.word	0x0800b41c

0800ad24 <memset>:
 800ad24:	4402      	add	r2, r0
 800ad26:	4603      	mov	r3, r0
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d100      	bne.n	800ad2e <memset+0xa>
 800ad2c:	4770      	bx	lr
 800ad2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad32:	e7f9      	b.n	800ad28 <memset+0x4>

0800ad34 <checkint>:
 800ad34:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ad38:	2b7e      	cmp	r3, #126	; 0x7e
 800ad3a:	dd10      	ble.n	800ad5e <checkint+0x2a>
 800ad3c:	2b96      	cmp	r3, #150	; 0x96
 800ad3e:	dc0c      	bgt.n	800ad5a <checkint+0x26>
 800ad40:	2201      	movs	r2, #1
 800ad42:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ad46:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4a:	1e5a      	subs	r2, r3, #1
 800ad4c:	4202      	tst	r2, r0
 800ad4e:	d106      	bne.n	800ad5e <checkint+0x2a>
 800ad50:	4203      	tst	r3, r0
 800ad52:	bf0c      	ite	eq
 800ad54:	2002      	moveq	r0, #2
 800ad56:	2001      	movne	r0, #1
 800ad58:	4770      	bx	lr
 800ad5a:	2002      	movs	r0, #2
 800ad5c:	4770      	bx	lr
 800ad5e:	2000      	movs	r0, #0
 800ad60:	4770      	bx	lr
 800ad62:	0000      	movs	r0, r0
 800ad64:	0000      	movs	r0, r0
	...

0800ad68 <powf>:
 800ad68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad6a:	ee10 1a10 	vmov	r1, s0
 800ad6e:	ee10 6a90 	vmov	r6, s1
 800ad72:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800ad76:	0072      	lsls	r2, r6, #1
 800ad78:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800ad82:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800ad86:	d256      	bcs.n	800ae36 <powf+0xce>
 800ad88:	4298      	cmp	r0, r3
 800ad8a:	d256      	bcs.n	800ae3a <powf+0xd2>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800ad92:	4ea3      	ldr	r6, [pc, #652]	; (800b020 <powf+0x2b8>)
 800ad94:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ad98:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ad9c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800ada0:	0dd2      	lsrs	r2, r2, #23
 800ada2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800ada6:	05d2      	lsls	r2, r2, #23
 800ada8:	1a8b      	subs	r3, r1, r2
 800adaa:	ed97 5b00 	vldr	d5, [r7]
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	15d2      	asrs	r2, r2, #23
 800adb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800adb8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800adbc:	ed97 5b02 	vldr	d5, [r7, #8]
 800adc0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800adc4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800adc8:	ee07 2a90 	vmov	s15, r2
 800adcc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800add0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800add4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800add8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800addc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800ade0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ade4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800ade8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800adec:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800adf0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800adf4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800adf8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800adfc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ae00:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ae04:	ee10 1a90 	vmov	r1, s1
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2700      	movs	r7, #0
 800ae0c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800ae10:	f248 06be 	movw	r6, #32958	; 0x80be
 800ae14:	429f      	cmp	r7, r3
 800ae16:	bf08      	it	eq
 800ae18:	4296      	cmpeq	r6, r2
 800ae1a:	f080 80b1 	bcs.w	800af80 <powf+0x218>
 800ae1e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800b000 <powf+0x298>
 800ae22:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ae26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae2a:	dd79      	ble.n	800af20 <powf+0x1b8>
 800ae2c:	b005      	add	sp, #20
 800ae2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ae32:	f000 b91f 	b.w	800b074 <__math_oflowf>
 800ae36:	4298      	cmp	r0, r3
 800ae38:	d32d      	bcc.n	800ae96 <powf+0x12e>
 800ae3a:	b952      	cbnz	r2, 800ae52 <powf+0xea>
 800ae3c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ae46:	f240 80cd 	bls.w	800afe4 <powf+0x27c>
 800ae4a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800ae4e:	b005      	add	sp, #20
 800ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae52:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ae56:	d105      	bne.n	800ae64 <powf+0xfc>
 800ae58:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ae5c:	0076      	lsls	r6, r6, #1
 800ae5e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ae62:	e7f0      	b.n	800ae46 <powf+0xde>
 800ae64:	004b      	lsls	r3, r1, #1
 800ae66:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800ae6a:	d8ee      	bhi.n	800ae4a <powf+0xe2>
 800ae6c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ae70:	d1eb      	bne.n	800ae4a <powf+0xe2>
 800ae72:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ae76:	f000 80b5 	beq.w	800afe4 <powf+0x27c>
 800ae7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ae7e:	ea6f 0606 	mvn.w	r6, r6
 800ae82:	bf34      	ite	cc
 800ae84:	2300      	movcc	r3, #0
 800ae86:	2301      	movcs	r3, #1
 800ae88:	0ff6      	lsrs	r6, r6, #31
 800ae8a:	42b3      	cmp	r3, r6
 800ae8c:	f040 80ad 	bne.w	800afea <powf+0x282>
 800ae90:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800ae94:	e7db      	b.n	800ae4e <powf+0xe6>
 800ae96:	004f      	lsls	r7, r1, #1
 800ae98:	1e7a      	subs	r2, r7, #1
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d31c      	bcc.n	800aed8 <powf+0x170>
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aea4:	da0f      	bge.n	800aec6 <powf+0x15e>
 800aea6:	ee10 0a90 	vmov	r0, s1
 800aeaa:	f7ff ff43 	bl	800ad34 <checkint>
 800aeae:	2801      	cmp	r0, #1
 800aeb0:	d109      	bne.n	800aec6 <powf+0x15e>
 800aeb2:	eeb1 0a40 	vneg.f32	s0, s0
 800aeb6:	b947      	cbnz	r7, 800aeca <powf+0x162>
 800aeb8:	2e00      	cmp	r6, #0
 800aeba:	dac8      	bge.n	800ae4e <powf+0xe6>
 800aebc:	b005      	add	sp, #20
 800aebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aec2:	f000 b8dd 	b.w	800b080 <__math_divzerof>
 800aec6:	2000      	movs	r0, #0
 800aec8:	e7f5      	b.n	800aeb6 <powf+0x14e>
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	dabf      	bge.n	800ae4e <powf+0xe6>
 800aece:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aed2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800aed6:	e7ba      	b.n	800ae4e <powf+0xe6>
 800aed8:	2900      	cmp	r1, #0
 800aeda:	da1f      	bge.n	800af1c <powf+0x1b4>
 800aedc:	ee10 0a90 	vmov	r0, s1
 800aee0:	f7ff ff28 	bl	800ad34 <checkint>
 800aee4:	b920      	cbnz	r0, 800aef0 <powf+0x188>
 800aee6:	b005      	add	sp, #20
 800aee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aeec:	f000 b8d8 	b.w	800b0a0 <__math_invalidf>
 800aef0:	2801      	cmp	r0, #1
 800aef2:	bf14      	ite	ne
 800aef4:	2000      	movne	r0, #0
 800aef6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800aefa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aefe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800af02:	f4bf af44 	bcs.w	800ad8e <powf+0x26>
 800af06:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b024 <powf+0x2bc>
 800af0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af0e:	ee10 3a10 	vmov	r3, s0
 800af12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af16:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800af1a:	e738      	b.n	800ad8e <powf+0x26>
 800af1c:	2000      	movs	r0, #0
 800af1e:	e7ee      	b.n	800aefe <powf+0x196>
 800af20:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800b008 <powf+0x2a0>
 800af24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800af28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2c:	dd10      	ble.n	800af50 <powf+0x1e8>
 800af2e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800af32:	2800      	cmp	r0, #0
 800af34:	d15c      	bne.n	800aff0 <powf+0x288>
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	eddd 7a02 	vldr	s15, [sp, #8]
 800af3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af44:	eef4 7a47 	vcmp.f32	s15, s14
 800af48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af4c:	f47f af6e 	bne.w	800ae2c <powf+0xc4>
 800af50:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b010 <powf+0x2a8>
 800af54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800af58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af5c:	d804      	bhi.n	800af68 <powf+0x200>
 800af5e:	b005      	add	sp, #20
 800af60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af64:	f000 b87a 	b.w	800b05c <__math_uflowf>
 800af68:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800b018 <powf+0x2b0>
 800af6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800af70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af74:	d504      	bpl.n	800af80 <powf+0x218>
 800af76:	b005      	add	sp, #20
 800af78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af7c:	f000 b874 	b.w	800b068 <__math_may_uflowf>
 800af80:	4b29      	ldr	r3, [pc, #164]	; (800b028 <powf+0x2c0>)
 800af82:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800af86:	ee30 6b07 	vadd.f64	d6, d0, d7
 800af8a:	ed8d 6b00 	vstr	d6, [sp]
 800af8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af92:	ee30 7b47 	vsub.f64	d7, d0, d7
 800af96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800af9e:	f006 011f 	and.w	r1, r6, #31
 800afa2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800afa6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800afaa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800afae:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800afb2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800afb6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800afba:	ee27 5b07 	vmul.f64	d5, d7, d7
 800afbe:	1836      	adds	r6, r6, r0
 800afc0:	2300      	movs	r3, #0
 800afc2:	eb13 040c 	adds.w	r4, r3, ip
 800afc6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800afca:	eb41 050e 	adc.w	r5, r1, lr
 800afce:	eea7 0b04 	vfma.f64	d0, d7, d4
 800afd2:	ec45 4b17 	vmov	d7, r4, r5
 800afd6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800afda:	ee20 0b07 	vmul.f64	d0, d0, d7
 800afde:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800afe2:	e734      	b.n	800ae4e <powf+0xe6>
 800afe4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800afe8:	e731      	b.n	800ae4e <powf+0xe6>
 800afea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b02c <powf+0x2c4>
 800afee:	e72e      	b.n	800ae4e <powf+0xe6>
 800aff0:	9303      	str	r3, [sp, #12]
 800aff2:	eddd 7a03 	vldr	s15, [sp, #12]
 800aff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800affa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800affe:	e7a1      	b.n	800af44 <powf+0x1dc>
 800b000:	ffd1d571 	.word	0xffd1d571
 800b004:	405fffff 	.word	0x405fffff
 800b008:	ffa3aae2 	.word	0xffa3aae2
 800b00c:	405fffff 	.word	0x405fffff
 800b010:	00000000 	.word	0x00000000
 800b014:	c062c000 	.word	0xc062c000
 800b018:	00000000 	.word	0x00000000
 800b01c:	c062a000 	.word	0xc062a000
 800b020:	0800b1a8 	.word	0x0800b1a8
 800b024:	4b000000 	.word	0x4b000000
 800b028:	0800b2d0 	.word	0x0800b2d0
 800b02c:	00000000 	.word	0x00000000

0800b030 <with_errnof>:
 800b030:	b513      	push	{r0, r1, r4, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b038:	f7ff fe4a 	bl	800acd0 <__errno>
 800b03c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b040:	6004      	str	r4, [r0, #0]
 800b042:	b002      	add	sp, #8
 800b044:	bd10      	pop	{r4, pc}

0800b046 <xflowf>:
 800b046:	b130      	cbz	r0, 800b056 <xflowf+0x10>
 800b048:	eef1 7a40 	vneg.f32	s15, s0
 800b04c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b050:	2022      	movs	r0, #34	; 0x22
 800b052:	f7ff bfed 	b.w	800b030 <with_errnof>
 800b056:	eef0 7a40 	vmov.f32	s15, s0
 800b05a:	e7f7      	b.n	800b04c <xflowf+0x6>

0800b05c <__math_uflowf>:
 800b05c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b064 <__math_uflowf+0x8>
 800b060:	f7ff bff1 	b.w	800b046 <xflowf>
 800b064:	10000000 	.word	0x10000000

0800b068 <__math_may_uflowf>:
 800b068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b070 <__math_may_uflowf+0x8>
 800b06c:	f7ff bfeb 	b.w	800b046 <xflowf>
 800b070:	1a200000 	.word	0x1a200000

0800b074 <__math_oflowf>:
 800b074:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b07c <__math_oflowf+0x8>
 800b078:	f7ff bfe5 	b.w	800b046 <xflowf>
 800b07c:	70000000 	.word	0x70000000

0800b080 <__math_divzerof>:
 800b080:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b084:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b088:	2800      	cmp	r0, #0
 800b08a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800b08e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b09c <__math_divzerof+0x1c>
 800b092:	2022      	movs	r0, #34	; 0x22
 800b094:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b098:	f7ff bfca 	b.w	800b030 <with_errnof>
 800b09c:	00000000 	.word	0x00000000

0800b0a0 <__math_invalidf>:
 800b0a0:	eef0 7a40 	vmov.f32	s15, s0
 800b0a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b0a8:	eef4 7a67 	vcmp.f32	s15, s15
 800b0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b0b4:	d602      	bvs.n	800b0bc <__math_invalidf+0x1c>
 800b0b6:	2021      	movs	r0, #33	; 0x21
 800b0b8:	f7ff bfba 	b.w	800b030 <with_errnof>
 800b0bc:	4770      	bx	lr
	...

0800b0c0 <_init>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr

0800b0cc <_fini>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr
